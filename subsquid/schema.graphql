type Account @entity {
  "Account address"
  id: ID!
  "Last event involving account"
  eventId: String!
}

type PabloPool @entity {
  "ID of the last event that was used to derive this entity data"
  eventId: ID!
  "Pool ID"
  poolId: BigInt!
  owner: String!
  transactionCount: Int!
  totalLiquidity: String!
  totalVolume: String!
  totalFees: String!
  baseAssetId: BigInt!
  "Asset used for all quotes in this type"
  quoteAssetId: BigInt!
  blockNumber: BigInt!
  "Unix timestamp in ms"
  calculatedTimestamp: BigInt!
  poolAssets: [PabloPoolAsset!] @derivedFrom(field: "pool")
  transactions: [PabloTransaction!] @derivedFrom(field: "pool")
}

type PabloPoolAsset @entity {
  id: ID!
  assetId: BigInt!
  pool: PabloPool!
  totalLiquidity: BigInt!
  totalVolume: BigInt!
  blockNumber: BigInt!
  "Unix timestamp in ms"
  calculatedTimestamp: BigInt!
}

type BondedFinanceBondOffer @entity {
  id: ID!
  eventId: String!
  offerId: String!
  "Total amount of purchased bonds"
  totalPurchased: BigInt!
  "Beneficiary account for the bond offer"
  beneficiary: String!
  "True if the offer has been cancelled"
  cancelled: Boolean!
}

type ScheduleWindow {
  start: BigInt!
  period: BigInt!
  kind: String!
}

type Schedule {
  vestingScheduleId: BigInt!
  window: ScheduleWindow!
  periodCount: BigInt!
  perPeriod: BigInt!
  alreadyClaimed: BigInt!
}

type VestingSchedule @entity {
  id: ID!
  "account that initiates the schedule"
  from: String!
  "chain event ID"
  eventId: String!
  "Vesting schedule ID from chain"
  scheduleId: BigInt!
  "'To' account for the vesting schedule"
  to: String!
  "Asset ID"
  asset: BigInt!
  "Vesting schedule"
  schedule: Schedule!
  "Initial locked amount"
  totalAmount: BigInt!
  "True if the schedule has been fully claimed"
  fullyClaimed: Boolean!
}

enum PicassoTransactionType {
  BALANCES_TRANSFER,
  BALANCES_DEPOSIT,
  BALANCES_WITHDRAW,
  STAKING_REWARDS_REWARD_POOL_CREATED,
  STAKING_REWARDS_STAKED,
  STAKING_REWARDS_STAKE_AMOUNT_EXTENDED,
  STAKING_REWARDS_UNSTAKE,
  STAKING_REWARDS_SPLIT_POSITION,
  BONDED_FINANCE_NEW_OFFER,
  BONDED_FINANCE_NEW_BOND,
  BONDED_FINANCE_OFFER_CANCELLED,
  VESTING_SCHEDULES_VESTING_SCHEDULE_ADDED,
  VESTING_SCHEDULES_CLAIMED,
  VESTING_SCHEDULES_VESTING_SCHEDULES_UPDATED,
}

type PicassoTransaction @entity {
  id: ID!
  "ID of the event that was used to derive this transaction"
  eventId: String!
  "ID of account that executed transaction"
  accountId: String!
  "Type of transaction"
  transactionType: PicassoTransactionType!
  "Block in which transaction was registered"
  blockNumber: BigInt!
  "Timestamp of the block in which this transaction was registered"
  timestamp: BigInt!
}

type Activity @entity {
  id: ID!
  "ID of the event associated with this activity"
  eventId: String!
  "ID of the transaction associated with this activity"
  transactionId: String!
  "ID of the active account"
  accountId: String!
  "Timestamp of the block in which this activity occurred"
  timestamp: BigInt!
}

type Asset @entity {
  "ID of the asset in Picasso"
  id: ID!
  "ID of the event that added the last price"
  eventId: String!
  price: BigInt!
  historicalPrices: [HistoricalAssetPrice!] @derivedFrom(field: "asset")
}

type HistoricalAssetPrice @entity {
  id: ID!
  "ID of the event associated with this activity"
  eventId: String!
  "ID of the asset"
  asset: Asset!
  price: BigInt!
  timestamp: BigInt!
}

type PicassoStakingPosition @entity {
  id: ID!
  eventId: String!
  positionId: String!
  transactionId: String!
  poolId: String!
  amount: BigInt!
  owner: String!
  startTimestamp: BigInt!
  endTimestamp: BigInt
}

type HistoricalLockedValue @entity {
  id: ID!
  eventId: String!
  amount: BigInt!
  timestamp: BigInt!
}

type PabloTransaction @entity {
  id: ID!
  pool: PabloPool!
  baseAssetId: BigInt!
  baseAssetAmount: BigInt!
  quoteAssetId: BigInt!
  quoteAssetAmount: BigInt!
  spotPrice: String!
  "Optional: Only certain transaction types have fees charged by Pablo. Does NOT include the collected extrinsic execution fee."
  fee: String!
}

enum TransactionType {
  ADD_LIQUIDITY,
  REMOVE_LIQUIDITY,
  SWAP,
  CREATE_POOL,
  DELETE_POOL,
  BALANCES_TRANSFER,
  BALANCES_DEPOSIT,
  BALANCES_WITHDRAW,
  STAKING_REWARDS_REWARD_POOL_CREATED,
  STAKING_REWARDS_STAKED,
  STAKING_REWARDS_STAKE_AMOUNT_EXTENDED,
  STAKING_REWARDS_UNSTAKE,
  STAKING_REWARDS_SPLIT_POSITION,
  BONDED_FINANCE_NEW_OFFER,
  BONDED_FINANCE_NEW_BOND,
  BONDED_FINANCE_OFFER_CANCELLED,
  VESTING_SCHEDULES_VESTING_SCHEDULE_ADDED,
  VESTING_SCHEDULES_CLAIMED,
  VESTING_SCHEDULES_VESTING_SCHEDULES_UPDATED,
}

type Transaction @entity {
  id: ID!
  "ID of the event that was used to derive this transaction"
  eventId: String!
  "ID of account that executed transaction"
  accountId: String!
  "Type of transaction"
  transactionType: TransactionType!
  "Block in which transaction was registered"
  blockNumber: BigInt!
  "Timestamp of the block in which this transaction was registered"
  timestamp: BigInt!
  "If this transaction came from Pablo, it will have extra information"
  pabloTransaction: PabloTransaction
}