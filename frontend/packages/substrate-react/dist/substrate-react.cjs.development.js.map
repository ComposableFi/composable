{"version":3,"file":"substrate-react.cjs.development.js","sources":["../src/extrinsics/store/extrinsics/extrinsics.utils.ts","../src/extrinsics/store/extrinsics/extrinsics.slice.ts","../src/extrinsics/store/useStore.ts","../src/extrinsics/hooks/index.ts","../src/extrinsics/Executor.ts","../src/extrinsics/ExecutorProvider.tsx","../src/dotsama/Networks.ts","../src/dotsama/DotSamaContext.tsx","../src/dotsama/utils.ts","../src/dotsama/hooks/index.ts"],"sourcesContent":["import produce from 'immer';\nimport {\n  ExtrinsicMetadata,\n  ExtrinsicSlice,\n  ExtrinsicStatus,\n} from './extrinsics.types';\n\nexport const putTransactionData = (\n  transactions: ExtrinsicSlice['extrinsics'],\n  txHash: string,\n  data: ExtrinsicMetadata\n) => {\n  return produce(transactions, draft => {\n    draft[txHash] = data;\n  });\n};\n\nexport const putTrasactionStatus = (\n  transactions: ExtrinsicSlice['extrinsics'],\n  txHash: string,\n  status: ExtrinsicStatus\n) => {\n  return produce(transactions, draft => {\n    if (draft[txHash]) {\n      draft[txHash].status = status;\n    }\n  });\n};\n\nexport const putTransactionError = (\n  transactions: ExtrinsicSlice['extrinsics'],\n  txHash: string,\n  errorMessage: string\n) => {\n  return produce(transactions, draft => {\n    if (draft[txHash]) {\n      draft[txHash].status = 'Error';\n      draft[txHash].dispatchError = errorMessage;\n    }\n  });\n};\n\nexport const putBlockHash = (\n  transactions: ExtrinsicSlice['extrinsics'],\n  txHash: string,\n  blockHash: string\n) => {\n  return produce(transactions, draft => {\n    if (draft[txHash]) {\n      draft[txHash].status = 'isInBlock';\n      draft[txHash].blockHash = blockHash;\n    }\n  });\n};\n","import { StoreSlice } from '../types';\nimport {\n  ExtrinsicSlice,\n  ExtrinsicMetadata,\n  ExtrinsicStatus,\n} from './extrinsics.types';\nimport {\n  putTransactionData,\n  putBlockHash,\n  putTrasactionStatus,\n  putTransactionError,\n} from './extrinsics.utils';\n\nconst createExtrinsicsSlice: StoreSlice<ExtrinsicSlice> = set => ({\n  extrinsics: {},\n  addExtrinsic: (\n    transactionHash: string,\n    extrinsicCall: Omit<ExtrinsicMetadata, 'dispatchError'>\n  ) =>\n    set((prev: ExtrinsicSlice) => ({\n      extrinsics: putTransactionData(\n        prev.extrinsics,\n        transactionHash,\n        extrinsicCall\n      ),\n    })),\n  addBlockHash: (transactionHash: string, blockHash: string) =>\n    set((prev: ExtrinsicSlice) => ({\n      extrinsics: putBlockHash(prev.extrinsics, transactionHash, blockHash),\n    })),\n  updateExtrinsicStatus: (\n    transactionHash: string,\n    extrinsicStatus: ExtrinsicStatus\n  ) =>\n    set((prev: ExtrinsicSlice) => ({\n      extrinsics: putTrasactionStatus(\n        prev.extrinsics,\n        transactionHash,\n        extrinsicStatus\n      ),\n    })),\n  updateExtrinsicError: (transactionHash: string, errorMessage: string) =>\n    set((prev: ExtrinsicSlice) => ({\n      extrinsics: putTransactionError(\n        prev.extrinsics,\n        transactionHash,\n        errorMessage\n      ),\n    })),\n});\n\nexport default createExtrinsicsSlice;\n","import create from 'zustand';\nimport extrinsicsSlice from './extrinsics/extrinsics.slice';\n\nconst useStore = create(set => ({\n  ...extrinsicsSlice(set),\n}));\n\nexport default useStore;\n","import { useMemo } from 'react';\nimport {\n  ExtrinsicMetadata,\n  ExtrinsicSlice,\n  ExtrinsicStatus,\n} from '../store/extrinsics/extrinsics.types';\nimport useStore from '../store/useStore';\n\nexport const useExtrinsics = (): ExtrinsicSlice['extrinsics'] => {\n  const { extrinsics } = useStore();\n  return extrinsics;\n};\n\nfunction isPending(extrinsicStatus: ExtrinsicStatus): boolean {\n  if (extrinsicStatus !== 'isFinalized' && extrinsicStatus !== 'Error') {\n    return true;\n  }\n  return false;\n}\n\nexport const usePendingExtrinsic = (\n  method: string,\n  section: string,\n  sender: string\n): boolean => {\n  const { extrinsics } = useStore();\n\n  let _isPendingExtrinsic = useMemo(() => {\n    const sortedTxs = Object.values(extrinsics).sort((a, b) => {\n      return a.timestamp - b.timestamp;\n    });\n\n    for (const tx of sortedTxs) {\n      if (\n        tx.method === method &&\n        section === tx.section &&\n        tx.sender === sender\n      ) {\n        if (isPending(tx.status)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }, [extrinsics]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return _isPendingExtrinsic;\n};\n\nexport const useExtrinsicCalls = (\n  method: string,\n  section: string,\n  sender: string\n): ExtrinsicMetadata[] => {\n  const { extrinsics } = useStore();\n\n  const extrinsicCalls = useMemo(() => {\n    let calls = [];\n\n    for (const tx of Object.values(extrinsics)) {\n      if (\n        tx.method === method &&\n        section === tx.section &&\n        tx.sender === sender\n      ) {\n        calls.push({ ...tx });\n      }\n    }\n\n    return calls;\n  }, [extrinsics]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return extrinsicCalls;\n};\n","import { ApiPromise, SubmittableResult } from '@polkadot/api';\nimport {\n  SubmittableExtrinsic,\n  AddressOrPair,\n  Signer,\n} from '@polkadot/api/types';\nimport { EventRecord } from '@polkadot/types/interfaces/system';\nimport {\n  ExtrinsicSlice,\n  ExtrinsicMetadata,\n} from './store/extrinsics/extrinsics.types';\n\ninterface TransactionExecutor {\n  execute(\n    call: SubmittableExtrinsic<'promise'>,\n    sender: AddressOrPair,\n    api: ApiPromise,\n    signer: Signer,\n    onTxReady: (txHash: string) => void | undefined,\n    onTxFinalized: (txHash: string, events: EventRecord[]) => void | undefined,\n    onTxError?: (errorMessage: string) => void\n  ): Promise<void>;\n  executeUnsigned(\n    call: SubmittableExtrinsic<'promise'>,\n    api: ApiPromise,\n    onTxReady: (txHash: string) => void | undefined,\n    onTxFinalized: (txHash: string) => void | undefined\n  ): Promise<void>;\n}\n\nclass Executor implements TransactionExecutor {\n  private addExtrinsic: ExtrinsicSlice['addExtrinsic'];\n  private addBlockHash: ExtrinsicSlice['addBlockHash'];\n  private updateExstrinsicStatus: ExtrinsicSlice['updateExtrinsicStatus'];\n  private updateExtrinsicError: ExtrinsicSlice['updateExtrinsicError'];\n\n  constructor(\n    addExtrinsic: ExtrinsicSlice['addExtrinsic'],\n    addBlockHash: ExtrinsicSlice['addBlockHash'],\n    updateExstrinsicStatus: ExtrinsicSlice['updateExtrinsicStatus'],\n    updateExtrinsicError: ExtrinsicSlice['updateExtrinsicError']\n  ) {\n    this.addExtrinsic = addExtrinsic;\n    this.addBlockHash = addBlockHash;\n    this.updateExstrinsicStatus = updateExstrinsicStatus;\n    this.updateExtrinsicError = updateExtrinsicError;\n  }\n\n  /**\n   * Execute an API Call (legacy or not?)\n   * @param call a submittable extrinsic from Polkadot/api\n   * @param sender address of the user\n   * @param api polkadot api itself\n   * @param signer signer from an extension wallet\n   * @param onTxFinalized this should be optional\n   */\n  async execute(\n    call: SubmittableExtrinsic<'promise'>,\n    sender: AddressOrPair,\n    api: ApiPromise,\n    signer: Signer,\n    onTxReady: (txHash: string) => void | undefined,\n    onTxFinalized: (txHash: string, events: EventRecord[]) => void | undefined,\n    onTxError?: (errorMessage: string) => void | undefined\n  ): Promise<void> {\n    const unsub = await call.signAndSend(sender, { signer }, txResult => {\n      const txHash = txResult.txHash.toString().toLowerCase();\n\n      if (txResult.status.isReady) {\n        this.onReady(call, txResult, sender, true);\n\n        if (onTxReady) {\n          onTxReady(txHash);\n        }\n      }\n\n      if (txResult.dispatchError) {\n        const error = this.onDispatchError(txResult, api);\n        if (onTxError) onTxError(error);\n        unsub();\n      }\n\n      if (txResult.isFinalized) {\n        this.onFinalized(txHash);\n\n        if (onTxFinalized) {\n          onTxFinalized(txHash, txResult.events);\n        }\n        unsub();\n      }\n    });\n  }\n\n  async executeUnsigned(\n    call: SubmittableExtrinsic<'promise'>,\n    api: ApiPromise,\n    onTxReady: (txHash: string) => void | undefined,\n    onTxFinalized: (txHash: string) => void | undefined\n  ): Promise<void> {\n    const unsub = await call.send(txResult => {\n      const txHash = txResult.txHash.toString().toLowerCase();\n      if (txResult.status.isReady) {\n        this.onReady(call, txResult, '', false);\n        if (onTxReady) onTxReady(txHash);\n      }\n\n      if (txResult.status.isInBlock) {\n        this.onBlockInclusion(txResult);\n      }\n\n      if (txResult.dispatchError) {\n        this.onDispatchError(txResult, api);\n        unsub();\n      }\n\n      if (txResult.isFinalized && !txResult.dispatchError) {\n        this.onFinalized(txHash);\n        if (onTxFinalized) onTxFinalized(txHash);\n        unsub();\n      }\n    });\n  }\n\n  private async onReady(\n    call: SubmittableExtrinsic<'promise'>,\n    txResult: SubmittableResult,\n    sender: AddressOrPair,\n    isSigned: boolean\n  ) {\n    const serialized: any = call.toHuman();\n    const txHash = txResult.txHash.toString().toLowerCase();\n    const payload: ExtrinsicMetadata = {\n      hash: txHash,\n      method: serialized.method.method,\n      section: serialized.method.section,\n      sender: sender.toString(),\n      args: serialized.method.args,\n      dispatchError: undefined,\n      status: 'isReady',\n      isSigned,\n      timestamp: Date.now(),\n    };\n\n    this.addExtrinsic(txHash, payload);\n  }\n\n  private onDispatchError(txResult: SubmittableResult, api: ApiPromise) {\n    let errorMessage = ``;\n    let txHash = txResult.txHash.toString().toLowerCase();\n\n    if (txResult.dispatchError) {\n      if (txResult.dispatchError.isModule) {\n        const decoded = api.registry.findMetaError(\n          txResult.dispatchError.asModule\n        );\n        const { docs, name, section } = decoded;\n\n        errorMessage = `${section}.${name}: ${docs.join(' ')}`;\n      } else {\n        errorMessage = txResult.dispatchError.toString();\n      }\n    }\n\n    this.updateExtrinsicError(txHash, errorMessage);\n    return errorMessage;\n  }\n\n  private async onBlockInclusion(txResult: SubmittableResult) {\n    let txHash = txResult.txHash.toString().toLowerCase();\n    let blockHash = txResult.status.asInBlock.toString().toLowerCase();\n\n    this.addBlockHash(txHash, blockHash);\n  }\n\n  private async onFinalized(txHash: string) {\n    this.updateExstrinsicStatus(txHash, 'isFinalized');\n  }\n}\n\nexport default Executor;\n","import React, { useMemo } from 'react';\nimport Executor from './Executor';\nimport useStore from './store/useStore';\n/**\n * As zustand useStore is a hook\n * we need to create a context and wrap\n * executor in a provider to be able to\n * use useStore methods via executor\n *\n * exectuor would expose execute and executeUnsigned\n * methods to be able to execute extrsinsic calls\n */\nconst ExecutorContext = React.createContext({\n  executor: undefined as Executor | undefined,\n});\n\nexport const ExecutorProvider = ({\n  children,\n}: {\n  children: React.ReactNode;\n}) => {\n  /**\n   * Use store updaters\n   * from zustand store\n   */\n  const {\n    addExtrinsic,\n    addBlockHash,\n    updateExtrinsicStatus,\n    updateExtrinsicError,\n  } = useStore();\n  /**\n   * Create and memoize executor\n   */\n  const executor = useMemo<Executor>(() => {\n    return new Executor(\n      addExtrinsic,\n      addBlockHash,\n      updateExtrinsicStatus,\n      updateExtrinsicError\n    );\n  }, [addExtrinsic, addBlockHash, updateExtrinsicStatus, updateExtrinsicError]);\n\n  return (\n    <ExecutorContext.Provider\n      value={{\n        executor,\n      }}\n    >\n      {children}\n    </ExecutorContext.Provider>\n  );\n};\n\n/**\n * Hook that returns an extrinsics executor\n * @returns Executor\n */\nexport const useExecutor = (): Executor | undefined => {\n  return React.useContext(ExecutorContext).executor;\n};\n","import {\n  ParachainId,\n  ParachainNetwork,\n  RelayChainId,\n  RelaychainNetwork,\n} from './types';\n\nexport const ParachainNetworks: {\n  [parachainId in ParachainId]: ParachainNetwork;\n} = {\n  picasso: {\n    name: 'Picasso',\n    wsUrl: 'wss://picasso-rpc.composable.finance',\n    tokenId: 'pica',\n    prefix: 49,\n    accountType: '*25519',\n    subscanUrl: '',\n    decimals: 12,\n    color: '#B09A9F',\n    symbol: 'PICA',\n    logo:\n      'https://raw.githubusercontent.com/TalismanSociety/chaindata/2778d4b989407a2e9fca6ae897fe849561f74afe/assets/picasso/logo.svg',\n    parachainId: 2087,\n    relayChain: 'kusama',\n  },\n  karura: {\n    name: 'Karura',\n    wsUrl: 'wss://karura-rpc-0.aca-api.network',\n    tokenId: 'kar',\n    prefix: 8,\n    accountType: '*25519',\n    subscanUrl: 'https://karura.subscan.io/',\n    decimals: 12,\n    color: '#ff4c3b',\n    symbol: 'KAR',\n    logo:\n      'https://raw.githubusercontent.com/TalismanSociety/chaindata/2778d4b989407a2e9fca6ae897fe849561f74afe/assets/karura/logo.svg',\n    parachainId: 2000,\n    relayChain: 'kusama',\n  },\n};\n\nexport const RelayChainNetworks: {\n  [relaychainId in RelayChainId]: RelaychainNetwork;\n} = {\n  kusama: {\n    name: 'Kusama',\n    color: '#000000',\n    prefix: 2,\n    logo:\n      'https://raw.githubusercontent.com/TalismanSociety/chaindata/2778d4b989407a2e9fca6ae897fe849561f74afe/assets/kusama/logo.svg',\n    networkId: 'kusama',\n    accountType: '*25519',\n    wsUrl: 'wss://kusama-rpc.polkadot.io',\n    subscanUrl: 'https://kusama.subscan.io/',\n    decimals: 12,\n    tokenId: 'ksm',\n    symbol: 'KSM',\n  },\n  polkadot: {\n    name: 'Polkadot',\n    color: '#e6007a',\n    prefix: 0,\n    logo:\n      'https://raw.githubusercontent.com/TalismanSociety/chaindata/2778d4b989407a2e9fca6ae897fe849561f74afe/assets/polkadot/logo.svg',\n    networkId: 'polkadot',\n    accountType: '*25519',\n    wsUrl: 'wss://rpc.polkadot.io',\n    subscanUrl: 'https://polkadot.subscan.io/',\n    decimals: 10,\n    tokenId: 'dot',\n    symbol: 'DOT',\n  },\n};\n\nexport const getParachainNetwork = (\n  parachainId: ParachainId\n): ParachainNetwork => ParachainNetworks[parachainId];\nexport const getRelaychainNetwork = (\n  relaychainId: RelayChainId\n): RelaychainNetwork => RelayChainNetworks[relaychainId];\n","import { ApiPromise } from '@polkadot/api';\nimport { WsProvider } from '@polkadot/rpc-provider';\nimport React, { useState, useEffect, createContext } from 'react';\nimport {\n  DotSamaContext,\n  ParachainApi,\n  DotSamaExtensionStatus,\n  ParachainId,\n  RelaychainApi,\n  RelayChainId,\n} from './types';\nimport { ParachainNetworks, RelayChainNetworks } from './Networks';\n\nconst PARACHAIN_PROVIDERS_DEFAULT: {\n  [chainId in ParachainId]: ParachainApi;\n} = Object.entries(ParachainNetworks)\n  .map(([chainId, network]) => {\n    return {\n      chainId: chainId,\n      parachainApi: undefined,\n      apiStatus: 'initializing',\n      prefix: network.prefix,\n      accounts: [],\n    };\n  })\n  .reduce((acc, curr) => {\n    return {\n      ...acc,\n      [curr.chainId]: curr,\n    };\n  }, {} as { [chainId in ParachainId]: ParachainApi });\n\nconst RELAYCHAIN_PROVIDERS_DEFAULT: {\n  [chainId in RelayChainId]: RelaychainApi;\n} = Object.entries(RelayChainNetworks)\n  .map(([chainId, network]) => {\n    return {\n      chainId: chainId,\n      parachainApi: undefined,\n      apiStatus: 'initializing',\n      prefix: network.prefix,\n      accounts: [],\n    };\n  })\n  .reduce((acc, curr) => {\n    return {\n      ...acc,\n      [curr.chainId]: curr,\n    };\n  }, {} as { [chainId in RelayChainId]: RelaychainApi });\n\nexport const DotsamaContext = createContext<DotSamaContext>({\n  parachainProviders: PARACHAIN_PROVIDERS_DEFAULT,\n  relaychainProviders: RELAYCHAIN_PROVIDERS_DEFAULT,\n  extensionStatus: 'initializing',\n  activate: undefined,\n  selectedAccount: -1,\n});\n\nexport const DotSamaContextProvider = ({\n  supportedParachains,\n  children,\n  appName,\n}: {\n  appName: string;\n  supportedParachains: {\n    chainId: ParachainId;\n    rpcUrl: string;\n    rpc: any;\n    types: any;\n  }[];\n  children: React.ReactNode;\n}) => {\n  const [parachainProviders, setParachainProviders] = useState<\n    { [chainId in ParachainId]: ParachainApi }\n  >(PARACHAIN_PROVIDERS_DEFAULT);\n  const [relaychainProviders, setRelayChainProviders] = useState<\n    { [chainId in RelayChainId]: RelaychainApi }\n  >(RELAYCHAIN_PROVIDERS_DEFAULT);\n\n  const activate = async (): Promise<any[] | undefined> => {\n    setExtension(s => {\n      s.extensionStatus = 'connecting';\n      return s;\n    });\n\n    let extensionExists = true;\n    let inectedExtesions;\n    try {\n      const extensionPkg = await import('@polkadot/extension-dapp');\n      inectedExtesions = await extensionPkg.web3Enable(appName);\n      extensionExists = inectedExtesions.length !== 0;\n    } catch (e) {\n      console.error(e);\n      extensionExists = false;\n    }\n\n    if (!extensionExists) {\n      setExtension(s => {\n        s.extensionStatus = 'no_extension';\n        return s;\n      });\n      return inectedExtesions;\n    }\n\n    setExtension(s => {\n      s.extensionStatus = 'connected';\n      return s;\n    });\n\n    for (let i = 0; i < supportedParachains.length; i++) {\n      const { chainId } = supportedParachains[i];\n      const { prefix } = ParachainNetworks[chainId];\n\n      try {\n        const extensionPkg = await import('@polkadot/extension-dapp');\n        const accounts = await extensionPkg.web3Accounts({\n          ss58Format: prefix,\n        });\n\n        setParachainProviders(s => {\n          s[chainId].accounts = accounts.map((x, i) => ({\n            address: x.address,\n            name: x.meta.name ?? i.toFixed(),\n          }));\n          return { ...s };\n        });\n\n        // setting default account\n        setSelectedAccount(accounts.length ? 0 : -1);\n      } catch (e) {\n        console.error(e);\n        continue;\n      }\n    }\n\n    return inectedExtesions;\n  };\n\n  const deactivate = async (): Promise<void> => {\n    setExtension(s => {\n      s.extensionStatus = 'initializing';\n      return s;\n    });\n\n    for (let i = 0; i < supportedParachains.length; i++) {\n      setParachainProviders(s => {\n        const { chainId } = supportedParachains[i];\n        s[chainId].accounts = [];\n        return { ...s };\n      });\n\n      setSelectedAccount(-1);\n\n      return Promise.resolve();\n    }\n  };\n\n  const [extension, setExtension] = useState<{\n    extensionStatus: DotSamaExtensionStatus;\n    activate: () => Promise<any[] | undefined>;\n    deactivate: () => Promise<void>;\n  }>({\n    extensionStatus: 'initializing',\n    activate,\n    deactivate,\n  });\n\n  useEffect(() => {\n    for (let i = 0; i < supportedParachains.length; i++) {\n      const { rpcUrl, chainId, rpc, types } = supportedParachains[i];\n      const { prefix } = ParachainNetworks[chainId];\n\n      // just so we can activate ASAP (where ss58Format is needed)\n      // setParachainProviders(s => {\n      //   s[chainId] = {\n      //     parachainApi: undefined,\n      //     apiStatus: 'initializing',\n      //     accounts: [],\n      //     prefix,\n      //     chainId,\n      //   };\n      //   return s;\n      // });\n\n      const wsProvider = new WsProvider(rpcUrl);\n      const parachainApi = new ApiPromise({ provider: wsProvider, rpc, types });\n\n      parachainApi.isReady\n        .then((parachainApi: ApiPromise) => {\n          setParachainProviders(s => {\n            if (!(chainId in parachainProviders)) {\n              s[chainId] = {\n                chainId,\n                parachainApi: parachainApi,\n                apiStatus: 'connected',\n                accounts: [],\n                prefix,\n              };\n            } else {\n              s[chainId].apiStatus = 'connected';\n              s[chainId].parachainApi = parachainApi;\n            }\n            return s;\n          });\n        })\n        .catch((e: any) => {\n          console.error(e);\n          setParachainProviders(s => {\n            s[chainId] = {\n              chainId,\n              parachainApi: undefined,\n              apiStatus: 'failed',\n              accounts: [],\n              prefix,\n            };\n            return s;\n          });\n        });\n    }\n  }, []); // eslint-disable-line  react-hooks/exhaustive-deps\n\n  const [selectedAccount, setSelectedAccount] = useState<number | -1>(-1);\n\n  return (\n    <DotsamaContext.Provider\n      value={{\n        relaychainProviders,\n        parachainProviders,\n        setSelectedAccount,\n        selectedAccount,\n        ...extension,\n      }}\n    >\n      {children}\n    </DotsamaContext.Provider>\n  );\n};\n","export const getSigner = async (\n  applicationName: string,\n  address: string\n): Promise<any> => {\n  const extensionPackage = await import('@polkadot/extension-dapp');\n  const { web3FromAddress, web3Enable } = extensionPackage;\n  await web3Enable(applicationName);\n  const injector = await web3FromAddress(address);\n  return injector.signer;\n};\n","import React from 'react';\nimport { DotsamaContext } from '../DotSamaContext';\nimport {\n  ConntectedAccount,\n  DotSamaContext,\n  ParachainId,\n  RelayChainId,\n} from '../types';\n\nexport const useDotSamaContext = (): DotSamaContext => {\n  return React.useContext(DotsamaContext);\n};\n\nexport const useParachainApi = (parachainId: ParachainId) => {\n  const { parachainProviders } = React.useContext(DotsamaContext);\n  return parachainProviders[parachainId];\n};\n\nexport const useRelayChainApi = (relaychainId: RelayChainId) => {\n  const { relaychainProviders } = React.useContext(DotsamaContext);\n  return relaychainProviders[relaychainId];\n};\n\nexport const useSelectedAccount = (\n  parachainId: ParachainId\n): ConntectedAccount | undefined => {\n  const { selectedAccount, parachainProviders } = React.useContext(\n    DotsamaContext\n  );\n  const { accounts } = parachainProviders[parachainId];\n  return selectedAccount !== -1 ? accounts[selectedAccount] : undefined;\n};\n"],"names":["putTransactionData","transactions","txHash","data","produce","draft","putTrasactionStatus","status","putTransactionError","errorMessage","dispatchError","putBlockHash","blockHash","createExtrinsicsSlice","set","extrinsics","addExtrinsic","transactionHash","extrinsicCall","prev","addBlockHash","updateExtrinsicStatus","extrinsicStatus","updateExtrinsicError","useStore","create","extrinsicsSlice","useExtrinsics","isPending","usePendingExtrinsic","method","section","sender","_isPendingExtrinsic","useMemo","sortedTxs","Object","values","sort","a","b","timestamp","tx","useExtrinsicCalls","extrinsicCalls","calls","push","Executor","updateExstrinsicStatus","execute","call","api","signer","onTxReady","onTxFinalized","onTxError","signAndSend","txResult","toString","toLowerCase","isReady","onReady","error","onDispatchError","unsub","isFinalized","onFinalized","events","executeUnsigned","send","isInBlock","onBlockInclusion","isSigned","serialized","toHuman","payload","hash","args","undefined","Date","now","isModule","decoded","registry","findMetaError","asModule","docs","name","join","asInBlock","ExecutorContext","React","createContext","executor","ExecutorProvider","children","Provider","value","useExecutor","useContext","ParachainNetworks","picasso","wsUrl","tokenId","prefix","accountType","subscanUrl","decimals","color","symbol","logo","parachainId","relayChain","karura","RelayChainNetworks","kusama","networkId","polkadot","getParachainNetwork","getRelaychainNetwork","relaychainId","PARACHAIN_PROVIDERS_DEFAULT","entries","map","chainId","network","parachainApi","apiStatus","accounts","reduce","acc","curr","RELAYCHAIN_PROVIDERS_DEFAULT","DotsamaContext","parachainProviders","relaychainProviders","extensionStatus","activate","selectedAccount","DotSamaContextProvider","supportedParachains","appName","useState","setParachainProviders","setExtension","s","extensionExists","extensionPkg","web3Enable","inectedExtesions","length","console","i","web3Accounts","ss58Format","x","address","meta","toFixed","setSelectedAccount","deactivate","Promise","resolve","extension","useEffect","rpcUrl","rpc","types","wsProvider","WsProvider","ApiPromise","provider","then","e","getSigner","applicationName","extensionPackage","web3FromAddress","injector","useDotSamaContext","useParachainApi","useRelayChainApi","useSelectedAccount"],"mappings":"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"}