name: "Nix pipeline"
on:
  push:
    branches:
      - nix/dz/devc     
      - ci-via-nix
      - main

env:
  NIX_CACHIX: composable-community
  NIX_NIXPKGS_CHANNEL: https://nixos.org/channels/nixpkgs-22.05-darwin
  NIX_CONTAINER_IMAGE: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
  DOCKER_REPOSITORY_NAME: composablefi
  # weird, next is implicit dependency of docker action
  DOCKER_USER_OPTION: '$UID:$GID' 
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true
  NIX_INSTALL_SCRIPT: https://releases.nixos.org/nix/nix-2.10.3/install  

jobs:
  # common-deps:
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #   container:
  #     image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: |
  #         echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
  #     - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
  #       with:
  #         skipPush: true
  #         installCommand: |
  #           nix-channel --add https://nixos.org/channels/nixpkgs-22.05-darwin nixpkgs
  #           nix-channel --update
  #           nix-env -iA nixpkgs.cachix
  #         name: composable-community
  #         authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
  #     - run: |
  #         cd nix-crane
  #         cachix watch-exec -j 16 -c 0 composable-community nix -- build .#common-deps -L

  # tests:
  #   needs: common-deps
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #   container:
  #     image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: |
  #         echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
  #     - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
  #       with:
  #         skipPush: true
  #         installCommand: |
  #           nix-channel --add https://nixos.org/channels/nixpkgs-22.05-darwin nixpkgs
  #           nix-channel --update
  #           nix-env -iA nixpkgs.cachix
  #         authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
  #         name: composable-community
  #     - run: |
  #         cd nix-crane
  #         nix flake check -L --keep-going

  # package-node:
  #   needs: common-deps
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #   container:
  #     image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: |
  #         echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
  #     - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
  #       with:
  #         skipPush: true
  #         installCommand: |
  #           nix-channel --add https://nixos.org/channels/nixpkgs-22.05-darwin nixpkgs
  #           nix-channel --update
  #           nix-env -iA nixpkgs.cachix
  #         authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
  #         name: composable-community
  #     - run: |
  #         cd nix-crane
  #         cachix watch-exec -j 16 -c 0 composable-community nix -- build .#composable-node -L

  # package-price-feed:
  #   needs: common-deps
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #   container:
  #     image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: |
  #         echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
  #     - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
  #       with:
  #         skipPush: true
  #         installCommand: |
  #           nix-channel --add https://nixos.org/channels/nixpkgs-22.05-darwin nixpkgs
  #           nix-channel --update
  #           nix-env -iA nixpkgs.cachix
  #         authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
  #         name: composable-community
  #     - run: |
  #         cd nix-crane
  #         cachix watch-exec -j 16 -c 0 composable-community nix -- build .#price-feed -L

  cachix-arm64:
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    name: Build on ubuntu20.04 aarch64

    steps:
      - uses: actions/checkout@v3
        with:
          # NOTE: this setup to avoid checkout action to fail
    
          persist-credentials: false
          clean: false
          # TODO: replace with github parameters - very hard to get things working so and propagated into
          path: composable #${{ github.GITHUB_REPOSITORY }}
      - uses: uraimo/run-on-arch-action@v2
        name: Build nix
        id: build
        with:
          arch: aarch64
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          setup: |
            mkdir -p "${PWD}/result"
          dockerRunArgs: |
            --volume "${PWD}/result:/result" --volume "${PWD}/composable:/composable"
          env: | 
            result_name: git-ubuntu20.04_aarch64

          shell: /bin/bash
          install: |
                # NOTE: DO NOT USE ( and ) in script as it fails with syntax error
                echo "Installing inside docker inside qemu so it will be cached"                
                # not deterministic and you cannot make it so until bake your own base, required as because without update there is no stuff
                apt-get update -q -y 
                apt-get install -q -y curl xz-utils sudo

                echo "Making vscode user as nix hates root(see dozen of open issues)"
                adduser --quiet --gecos "" --disabled-password vscode
                passwd -d vscode

                echo "How funny it is, cannot use root, and yet have to allow via root owned folders"
                mkdir -m 0755 /nix && chown vscode /nix
                mkdir --parents /etc/nix && echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf


          run: |
            echo "Run in qemu each build"
            ls /composable
            echo "Installing actually"
            chmod +x ./composable/nix-install-vscode-composable.sh
            sudo --user vscode ./composable/nix-install-vscode-composable.sh ${{env.NIX_INSTALL_SCRIPT}} ${{env.NIX_NIXPKGS_CHANNEL}}
            find / -name nix-env        
            cd ./composable/nix-crane 
            echo "Pushing cache"
            export PATH="/home/vscode/.nix-profile/bin:$PATH"
            echo "PATH="/home/vscode/.nix-profile/bin:$PATH"" >> /etc/environment
            CACHIX_AUTH_TOKEN=${{ secrets.CACHIX_AUTH_TOKEN }}
            sudo --user vscode env PATH="/home/vscode/.nix-profile/bin:$PATH" env CACHIX_AUTH_TOKEN=${{ secrets.CACHIX_AUTH_TOKEN }} source ~/.nix-profile/etc/profile.d/nix.sh && cachix authtoken ${{ secrets.CACHIX_AUTH_TOKEN }} && cachix watch-exec -j 16 -c 0 composable-community nix -- build .#debug-derivation -L               

      - name: Show the artifact
        run: |
          ls -al "${PWD}/result"



  # build-arm64-docker:
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #   name: Build on ${{ matrix.distro }} aarch64

  #   # Run steps on a matrix of 3 arch/distro combinations
  #   strategy:
  #     matrix:
  #       include:
  #         - arch: aarch64
  #           distro: ubuntu20.04

  #   steps:
  #     - uses: uraimo/run-on-arch-action@v2
  #       name: Build artifact
  #       id: build
  #       with:
  #         arch: aarch64
  #         distro: ${{ matrix.distro }}

  #         # Not required, but speeds up builds
  #         githubToken: ${{ github.token }}

  #         # Create an artifacts directory
  #         setup: |
  #           mkdir -p "${PWD}/artifacts"

  #         # Mount the artifacts directory as /artifacts in the container
  #         dockerRunArgs: |
  #           --volume "${PWD}/artifacts:/artifacts"

  #         # Pass some environment variables to the container
  #         env: | # YAML, but pipe character is necessary
  #           result_name: git-ubuntu20.04_aarch64

  #         # The shell to run commands with in the container
  #         shell: /bin/sh

  #         # Install some dependencies in the container. This speeds up builds if
  #         # you are also using githubToken. Any dependencies installed here will
  #         # be part of the container image that gets cached, so subsequent
  #         # builds don't have to re-install them. The image layer is cached
  #         # publicly in your project's package repository, so it is vital that
  #         # no secrets are present in the container state or logs.
  #         install: |
  #               ls
  #               apt-get update -q -y
  #               apt-get install -q -y git curl xz-utils sudo
  #               # NOTE: cannot use ( or ) in next line as it wrapped into script and fails to run of syntax
  #               echo "getting nix"
                
  #               adduser --quiet --gecos "" --disabled-password vscode
  #               passwd -d vscode
  #               mkdir -m 0755 /nix && chown vscode /nix

  #               echo "switching to user"
  #               su - vscode
  #               whoami
  #               sudo --user vscode sh
  #               whoami                                
  #               su -c 'curl --location ${{env.NIX_INSTALL_SCRIPT}} | sh' - vscode
  #               sudo chmod +x /home/vscode/.nix-profile/etc/profile.d/nix.sh
  #               sudo --user vscode /home/vscode/.nix-profile/etc/profile.d/nix.sh
  #               su -c '/home/vscode/.nix-profile/etc/profile.d/nix.sh' - vscode
  #               sudo --user vscode sh
  #               /home/vscode/.nix-profile/etc/profile.d/nix.sh
  #               #nix-env --install --attr nixpkgs.cachix
  #               #cachix use composable-community       
  #               #curl --location ${{env.NIX_INSTALL_SCRIPT}} | sh
  #               # NOTE: does not work
  #               # curl --location ${{env.NIX_INSTALL_SCRIPT}} > nix-2.10.3-install.sh
  #               # sh nix-2.10.3-install.sh --daemon                

  #         # Produce a binary artifact and place it in the mounted volume
  #         run: |
  #           echo "compiling"
  #           ls
  #           whoami
  #           sudo --user vscode sh
  #           # su -c 'nix-env --install --attr nixpkgs.cachix' - vscode
  #           nix-env --install --attr nixpkgs.cachix
  #           cachix use composable-community       
  #           whoami                                
  #           cp $(which git) "/artifacts/${result_name}"
  #           echo "Produced artifact at /artifacts/${result_name}"
  #           cd ./nix-crane
  #           nix build .#packages.aarch64-linux.codespace-container
  #           mv ./result /artifacts/aarch64-linux.codespace-container.oci.tar.gz 

  #     - name: Show the artifact
  #       # Items placed in /artifacts in the container will be in
  #       # ${PWD}/artifacts on the host.
  #       run: |
  #         ls -al "${PWD}/artifacts"



  # codespace-devcontainer:
  #   # NOTE: so we want new container be publish iff all is ready and works
  #   # needs: package-node
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #   container:
  #     image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: |
  #         echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
  #     - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
  #       with:
  #         skipPush: true
  #         installCommand: |
  #           nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
  #           nix-channel --update
  #           nix-env -iA nixpkgs.cachix nixpkgs.docker nixpkgs.docker-buildx
  #         authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
  #         name: ${{  env.NIX_CACHIX }}
  #     - run: |
  #         cd nix-crane
  #         # TODO: use buildx to merge
  #         # ISSUE: cannot build not on arm          
  #         # nix build .#packages.aarch64-linux.codespace-container
  #         # warning: Git tree '/home/dz/git/blockchain/polkadot/composable' is dirty
  #         # error: a 'aarch64-linux' with features {} is required to build '/nix/store/pr7gzckrjqw1p2gxh4qwmmh3ydrdqf9b-builder.pl.drv', but I am a 'x86_64-linux' with features {benchmark, big-parallel, kvm, nixos-test}
  #         # nix build .#packages.aarch64-linux.codespace-container
  #         nix build .#packages.x86_64-linux.codespace-container
  #     - uses: docker/login-action@v1 
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} 
  #     - run: |
  #         # TODO: need to switch to root folder
  #         cd nix-crane
  #         docker load --input ./result
  #         # update soon https://github.com/actions/checkout/issues/760
  #         git config --global --add safe.directory /__w/composable/composable
  #         COMMIT_SHA=$(git rev-parse --short=9 HEAD)
  #         DOCKER_IMAGE_HASH=$(docker images | tail --lines=1 | tr --squeeze-repeats  ' ' |  cut --delimiter " " --fields 3)
  #         # TODO: make nix sha256 hash(allow to find by using nix ids) and branch dependant(allow to test from branches) tags
  #         docker image tag $DOCKER_IMAGE_HASH ${{env.DOCKER_REPOSITORY_NAME}}/composable-devcontainer:$COMMIT_SHA
  #         docker image tag $DOCKER_IMAGE_HASH ${{env.DOCKER_REPOSITORY_NAME}}/composable-devcontainer:latest
  #         docker push --all-tags ${{env.DOCKER_REPOSITORY_NAME}}/composable-devcontainer