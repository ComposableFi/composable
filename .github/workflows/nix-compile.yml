name: "Nix pipeline"
on:
  push:
    branches:
      - ci-via-nix
      - main
  pull_request:
    paths-ignore:
      # TODO: actually check and built UI too
      - frontend/**
    branches:
      - main
      - develop
      - releases    

env:
  NIX_CACHIX: composable-community
  NIX_NIXPKGS_CHANNEL: https://nixos.org/channels/nixpkgs-22.05-darwin
  NIX_CONTAINER_IMAGE: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
  DOCKER_REPOSITORY_NAME: composablefi
  # weird, next is implicit dependency of docker action
  DOCKER_USER_OPTION: '$UID:$GID' 
  NIX_INSTALL_SCRIPT: https://releases.nixos.org/nix/nix-2.10.3/install  

jobs:
  common-deps:
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add https://nixos.org/channels/nixpkgs-22.05-darwin nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          name: ${{  env.NIX_CACHIX }}
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
      - run: |
          cachix watch-exec -j 16 -c 0 composable-community nix -- build .#common-deps --no-update-lock-file

  tests:
    needs: common-deps
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add https://nixos.org/channels/nixpkgs-22.05-darwin nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          # TODO: replace with nix checking derivation which does all
          chmod +x  ./nix-validate.sh && ./nix-validate.sh

  package-node:
    needs: common-deps
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add https://nixos.org/channels/nixpkgs-22.05-darwin nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec -j 16 -c 0 composable-community nix -- build .#composable-node --no-update-lock-file

  package-price-feed:
    needs: common-deps
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add https://nixos.org/channels/nixpkgs-22.05-darwin nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec -j 16 -c 0 composable-community nix -- build .#price-feed --no-update-lock-file

  devnet-container:
    needs: package-node
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add https://nixos.org/channels/nixpkgs-22.05-darwin nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          # TODO: upload docker image
          # Only on trigger by user?
          nix build .#devnet-container --no-update-lock-file

  codespace-devcontainer:
    needs: package-node
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix nixpkgs.docker nixpkgs.docker-buildx
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: ${{  env.NIX_CACHIX }}
      - run: |
          # TODO: either make nixos to be devcontainer and use buildx https://github.com/microsoft/vscode-dev-containers/issues/947 
          # TODO: or use nix remote build 
          # TODO: to produce arm image
          # NOTE: building on qemu action failed (also it was emulating arm, still complained building wrong system - not reported)
          # NOTE: used manual install, so better to use this in future https://github.com/uraimo/run-on-arch-action/pull/83
          # NOTE: build arm on x86 failed and documented to fail          
          nix build .#packages.x86_64-linux.codespace-container
      - uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} 
      - run: |
          docker load --input ./result
          # update soon https://github.com/actions/checkout/issues/760
          git config --global --add safe.directory /__w/composable/composable
          COMMIT_SHA=$(git rev-parse --short=9 HEAD)
          DOCKER_IMAGE_HASH=$(docker images | tail --lines=1 | tr --squeeze-repeats  ' ' |  cut --delimiter " " --fields 3)
          # TODO: make nix sha256 hash(allow to find by using nix ids) and branch dependant(allow to test from branches) tags
          docker image tag $DOCKER_IMAGE_HASH ${{env.DOCKER_REPOSITORY_NAME}}/composable-devcontainer:$COMMIT_SHA
          docker image tag $DOCKER_IMAGE_HASH ${{env.DOCKER_REPOSITORY_NAME}}/composable-devcontainer:latest
          docker push --all-tags ${{env.DOCKER_REPOSITORY_NAME}}/composable-devcontainer

  deploy-devnet:
      name: "Devnet(Rococo Local Dali Dev) Deploy"
      needs: package-node
      # ISSUE: sre custom runners has issues with permission of checkout and ssh hangs - do not use
      runs-on: ubuntu-latest
      # ISSUE: we have some issues with SSH on nixos
      # container:
      #   image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee    
      # concurrency:
      #   group: deploy-devnet
      #   cancel-in-progress: false
      steps:
      - uses: actions/checkout@v3
        with:
          clean: false
          fetch-depth: 0                 

      #TODO: use nix tool and just oneliner to dump credentials, no need tasks
      #TODO: and this task is deprecated
      - uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
          export_default_credentials: true 

      - name: Build & Push
        run: |
          chmod +x ./nix-install-vscode-composable.sh
          ./nix-install-vscode-composable.sh ${{ env.NIX_INSTALL_SCRIPT }} ${{ env.NIX_NIXPKGS_CHANNEL }} ${{  env.NIX_CACHIX }}
          source ~/.nix-profile/etc/profile.d/nix.sh && export PATH="/home/$(whoami)/.nix-profile/bin:$PATH" 
          cachix authtoken ${{ secrets.CACHIX_AUTH_TOKEN }}
          nix-env -iA nixpkgs.docker nixpkgs.docker-buildx nixpkgs.python3  nixpkgs.google-cloud-sdk nixpkgs.jq          
          RELEASE_VERSION=$(git rev-parse HEAD)                  
          nix build .#composable-node --no-update-lock-file
          # NOTE: temporary move here until 100% nix
          mkdir -p target/release
          mkdir -p target/doc
          cp result/bin/composable target/release/composable 
          # TODO: derive archieve instead of direct tar call
          tar -czvf composable-picasso-$RELEASE_VERSION.tar.gz target/release/composable target/doc
          gsutil mv *.tar.gz gs://composable-binaries/community-releases/picasso/

          cd devnet
          ./update.sh $RELEASE_VERSION
          # TODO: what the adhoc hec is that?
          # TODO: just use path to GOOGLE_APPLICATION_CREDENTIALS
          jq --null-input --arg client_email "$GCP_DEVNET_SERVICE_ACCOUNT" --arg project_id "$GCP_PROJECT_ID" --arg key "\"$GCP_DEVNET_SERVICE_ACCOUNT_KEY\"" '{ "project_id": $project_id, "private_key": ($key | fromjson), "client_email": $client_email }' > ops.json
          cd ..

          if gsutil -q stat $NIXOPS_STATE_URL/$NIXOPS_STATE;
          then
            gsutil cp $NIXOPS_STATE_URL/$NIXOPS_STATE $NIXOPS_STATE
          else            
            nix develop .#sre --override-input flake-utils ./.nix/override-input/flake-utils/  --show-trace --command nixops create --deployment devnet-gce  
          fi

          nix develop .#sre --show-trace --override-input flake-utils ./.nix/override-input/flake-utils/ --command nixops deploy --check --confirm --deployment devnet-gce --debug --show-trace
          
          # TODO: document what happens if Deploy passed, but Store was stopped - how stat reconciled
          # TODO: consider running state save in same step as it is unseparable from deploy
          gsutil cp $NIXOPS_STATE $NIXOPS_STATE_URL/

        env:
          NIXOPS_STATE_URL: "gs://composable-state"
          NIXOPS_STATE: "deployment.nixops"
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_DEVNET_SERVICE_ACCOUNT: ${{ secrets.GCP_DEVNET_SERVICE_ACCOUNT }}
          GCP_DEVNET_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_DEVNET_SERVICE_ACCOUNT_KEY }}
          