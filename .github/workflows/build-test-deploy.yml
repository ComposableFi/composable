name: "Build, Test, Deploy"
on:
  push:
    branches:
      - release-*
      - main

  # For regular PRs.    
  pull_request_target:

  # For PRs that need to run in the monorepo context.
  pull_request:

permissions: 
  pull-requests: write

env:
  # NIX_INSTALL_SCRIPT: https://releases.nixos.org/nix/nix-2.13.2/install

  CACHIX_COMPOSABLE: composable-community
  CACHIX_COMPRESSION_LEVEL: 3

  DOCKER_REGISTRY_NAME: composablefi
  # weird, next is implicit dependency of docker action
  DOCKER_USER_OPTION: '$UID:$GID'

jobs:
  check-privilege:
    name: "Privilege Check"
    if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.id != 383289760) || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.id == 383289760) }}
    runs-on: ubuntu-latest  
    steps:
      - run: |
          echo "I am priviliged by goblins on repository id ${{ github.event.pull_request.head.repo.id }} ${{ github.event.pull_request_target.head.repo.id }}" 
      

  check-lfs:
    needs:
      - check-privilege
    continue-on-error: false
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: ${{ github.workflow }}-check-lfs-${{ github.event.pull_request.title }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
      - uses: actionsdesk/lfs-warning@v3.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filesizelimit: 10KB
          exclusionPatterns: |
            **/*.rs
            **/*.ts
            **/*.json
            **/*.lock

  # check-nix:
  #   name: "Check nix"
  #   needs:
  #     - check-privilege
  #   continue-on-error: false
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #   concurrency:
  #     group: ${{ github.workflow }}-check-nix-${{ github.event.pull_request.title }}
  #     cancel-in-progress: true
  #   container:
  #     image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}
  #         persist-credentials: false
  #     - run: |
  #         echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
  #         echo "sandbox = relaxed" >> /etc/nix/nix.conf
  #         echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
  #     - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
  #       with:
  #         skipPush: true
  #         installCommand: |
  #           nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
  #           nix-channel --update
  #           nix-env -iA nixpkgs.cachix
  #         authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
  #         name: composable-community
  #     - run: |
  #         nix --version
  #         nix show-config
  #         nix flake show --allow-import-from-derivation  --show-trace --fallback --debug --print-build-logs --keep-failed


  # check-nix-long:
  #   name: "Check nix long"
  #   needs:
  #     - check-privilege
  #     - check-nix
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #   concurrency:
  #     group: ${{ github.workflow }}-check-nix-long-${{ github.event.pull_request.title }}
  #     cancel-in-progress: true
  #   container:
  #     image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}
  #         persist-credentials: false
  #     - run: |
  #         echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
  #         echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
  #     - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
  #       with:
  #         skipPush: true
  #         installCommand: |
  #           nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
  #           nix-channel --update
  #           nix-env -iA nixpkgs.cachix
  #         name: composable-community
  #     - run: |
  #         chmod +x ./.github/workflows/check-nix-long.sh
  #         source ./.github/workflows/check-nix-long.sh


  
  all-ci-packages:
    needs: 
      - check-privilege
    runs-on:
      - self-hosted
      - linux
      - x64-monster
      - sre
    concurrency:
      group: ${{ github.workflow }}-all-ci-packages-${{ github.event.pull_request.title }}
      cancel-in-progress: true
    steps:
      - name: Set up Nix
        uses: cachix/install-nix-action@daddc62a2e67d1decb56e028c9fa68344b9b7c2a # v18
        with:
          install_url: https://releases.nixos.org/nix/nix-2.13.2/install
          nix_path: nixpkgs=channel:nixos-22.11 #TODO: change?
      - name: Set up Cachix
        uses: cachix/cachix-action@6a9a34cdd93d0ae4b4b59fd678660efb08109f2f # v12
        with:
          skipPush: true
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - name: Add tools needed for checkout
        run: |  
          nix-channel --update
          nix-env -iA cachix git-lfs nodejs tree
      - uses: actions/checkout@v3
        with:
          lfs: true
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
      - name: Build all-ci-packages 
        uses: "./.github/templates/watch-exec"
        with:
          command: nix -- build .#all-ci-packages
          token: "${{ secrets.CACHIX_AUTH_TOKEN }}"
      - run: |
          ls result
          nix-shell -p tree --command "tree result -L 3"
  # This isn't templated, since checkout needs to happen before templating occurs.
  # docs-check:
  #   name: "Docs check"
  #   needs:
  #     - check-privilege
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #   concurrency:
  #     group: ${{ github.workflow }}-docs-check-${{ github.event.pull_request.title }}
  #     cancel-in-progress: true
  #   container:
  #     image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
  #   steps:
  #     - run: |
  #         echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
  #         echo "sandbox = relaxed" >> /etc/nix/nix.conf
  #         echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
  #       shell: "bash"
  #     - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
  #       with:
  #         installCommand: |
  #           nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
  #           nix-channel --update
  #           nix-env -iA nixpkgs.cachix nixpkgs.git-lfs nixpkgs.nodejs
  #         name: ${{ env.CACHIX_COMPOSABLE }}
  #         authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
  #     - uses: actions/checkout@v3
  #       with:
  #         lfs: true
  #         ref: ${{ github.event.pull_request.head.sha }}
  #         persist-credentials: false
  #     - run: |
  #         # Marker status code in case of network failure.
  #         STATUS_TRANSIENT_FAILURE=200
  #         # Maximum retries in case of network failures.
  #         RETRIES=5
  #         CMD="cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#docs-static  --no-update-lock-file --show-trace -L 2> >(tee -a $LOG_FILE >&2)"
  #         # Marker that a network error occurred.
  #         BAD="HTTP error 200 ('')"
  #         LOG_FILE=/tmp/out.log

  #         function run() {
  #             eval "${CMD?}"
  #             STATUS_CODE=$?
  #             if [[ $STATUS_CODE -ne 0 ]] ; then
  #                 C=$(grep -c "HTTP error 200" $LOG_FILE)
  #                 if [[ $C -gt 0 ]]; then
  #                     STATUS_CODE=$STATUS_TRANSIENT_FAILURE
  #                 fi
  #             fi
  #         }

  #         try=0
  #         while [[ "${try?}" -le "${RETRIES?}" ]]; do
  #             if [[ "${try?}" -eq "${RETRIES?}" ]] ; then
  #                 exit 1
  #             fi
  #             run
  #             if [[ $STATUS_CODE -ne 0 ]] || [[ $STATUS_CODE -ne $STATUS_TRANSIENT_FAILURE ]] ; then
  #                 break
  #             fi
  #             ((try=try+1))
  #         done

  #         exit $((STATUS_CODE))
  #       shell: "bash"
  #       working-directory: ./docs
  #     - uses: FirebaseExtended/action-hosting-deploy@0f248036885ae672f78587669fa2923f0ef6cac2
  #       with:
  #         repoToken: ${{ secrets.GITHUB_TOKEN }}
  #         firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_DOCS_COMPOSABLE_FINANCE }}
  #         projectId: composable-docs
  #         entrypoint: docs/
  #         channelId: ${{ github.event_name == 'push' && github.event.pull_request.title_name == 'main' && 'live' }}

  # deploy-pablo-preview:
  #   name: "Deploy Pablo Preview"
  #   needs:
  #     - check-privilege
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #   container:
  #     image: node:latest
  #   steps:
  #     - run: |
  #         apt-get update
  #         apt-get install -y curl git
  #         curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
  #         apt-get install git-lfs
  #     - uses: actions/checkout@v3
  #       with:
  #         lfs: true
  #         ref: ${{ github.event.pull_request.head.sha }}
  #         persist-credentials: false
  #     - name: Install Vercel CLI
  #       run: npm install --global vercel@latest
  #     - name: Import project setting
  #       run: |
  #         mkdir -p .vercel
  #         echo '${{ secrets.PABLO_PROJ_JSON }}' >> .vercel/project.json
  #     - name: Pull Vercel Environment Information
  #       run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
  #     - name: Build Project Artifacts
  #       run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
  #     - name: Deploy Project Artifacts to Vercel
  #       run: |
  #         PREVIEW_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
  #         echo "preview-url=${PREVIEW_URL}" >> $GITHUB_OUTPUT
  #       id: deploy
  #     - name: Comment PR
  #       uses: "./.github/templates/comment"
  #       with:
  #         message: |
  #           ### Pablo Preview URL
  #           ${{ steps.deploy.outputs.preview-url }}
  #         comment_tag: 'Pablo Preview URL'
  #         github_token: ${{ secrets.GITHUB_TOKEN }}

  # deploy-picasso-preview:
  #   name: "Deploy Picasso Preview"
  #   needs:
  #     - check-privilege
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #   container:
  #     image: node:latest
  #   steps:
  #     - run: |
  #         apt-get update
  #         apt-get install -y curl git
  #         curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
  #         apt-get install git-lfs
  #     - uses: actions/checkout@v3
  #       with:
  #         lfs: true
  #         ref: ${{ github.event.pull_request.head.sha }}
  #         persist-credentials: false
  #     - name: Install Vercel CLI
  #       run: npm install --global vercel@latest
  #     - name: Import project setting
  #       run: |
  #         mkdir -p .vercel
  #         echo '${{ secrets.PICASSO_PROJ_JSON }}' >> .vercel/project.json
  #     - name: Pull Vercel Environment Information
  #       run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
  #     - name: Build Project Artifacts
  #       run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
  #     - name: Deploy Project Artifacts to Vercel
  #       run: |
  #          PREVIEW_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
  #          echo "preview-url=${PREVIEW_URL}" >> $GITHUB_OUTPUT
  #       id: deploy
  #     - name: Comment PR
  #       uses: "./.github/templates/comment"
  #       with:
  #         message: |
  #           ### Picasso Preview URL
  #           ${{ steps.deploy.outputs.preview-url }}
  #         comment_tag: 'Picasso Preview URL'
  #         github_token: ${{ secrets.GITHUB_TOKEN }}


  # package-hyperspace-dali:
  #   name: "Package Hyperspace"
  #   needs:
  #     - check-privilege
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #   concurrency:
  #     group: ${{ github.workflow }}-package-hyperspace-dali-${{ github.event.pull_request.title }}
  #     cancel-in-progress: true
  #   container:
  #     image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}
  #         persist-credentials: false
  #     - uses: "./.github/templates/watch-exec"
  #       with:
  #         command: nix -- build .#hyperspace-dali
  #         token: "${{ secrets.CACHIX_AUTH_TOKEN }}"
  #     - uses: "./.github/templates/docker-publish"
  #       with:
  #         command: nix -- build .#hyperspace-dali-container
  #         token: "${{ secrets.CACHIX_AUTH_TOKEN }}"
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  #         name: hyperspace-dali
  #         artifact: hyperspace-dali:latest


  # lint-test-frontend:
  #   # Legacy because these should be nixified.
  #   name: Legacy Frontend Checks
  #   needs: 
  #     - check-privilege
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #   container:
  #     image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
  #   steps:
  #     - run: |
  #         echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
  #         echo "sandbox = relaxed" >> /etc/nix/nix.conf
  #         echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
  #       shell: "bash"
  #     - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
  #       with:
  #         installCommand: |
  #           nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
  #           nix-channel --update
  #           nix-env -iA nixpkgs.cachix nixpkgs.git-lfs nixpkgs.nodejs nixpkgs.yarn
  #         name: ${{ env.CACHIX_COMPOSABLE }}
  #         authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
  #     - uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}
  #         persist-credentials: false
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 16
  #         always-auth: true
  #         registry-url: 'https://registry.npmjs.org'
  #     - run: yarn install --ignore-scripts
  #       env:
  #         CI: true
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #       working-directory: frontend
  #     - name: Lint Pablo
  #       run: yarn --filter=pablo lint
  #       working-directory: frontend
  #     - name: Test Pablo
  #       run: yarn --filter=pablo test
  #       working-directory: frontend
  #     - name: Lint Picasso
  #       run: yarn --filter=picasso lint
  #       working-directory: frontend
  #     - name: Test Picasso
  #       run: yarn --filter=picasso test
  #       working-directory: frontend

  # cmc-api:
  #   name: "Package CMC API"
  #   needs:
  #     - common-deps
  #     - check-privilege
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #   concurrency:
  #     group: ${{ github.workflow }}-build-cmc-api-${{ github.event.pull_request.title }}
  #     cancel-in-progress: true
  #   continue-on-error: true
  #   container:
  #     image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}
  #         persist-credentials: false
  #     - uses: "./.github/templates/watch-exec"
  #       with:
  #         command: nix -- build .#cmc-api
  #         token: "${{ secrets.CACHIX_AUTH_TOKEN }}"
  #     - uses: "./.github/templates/docker-publish"
  #       with:
  #         command: nix -- build .#cmc-api-image
  #         token: "${{ secrets.CACHIX_AUTH_TOKEN }}"
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  #         name: cmc-api-server
  #         artifact: cmc-api:latest

  # TODO: nixify these test steps, and add me to subsquid-processor
  # test-subsquid:
  #   name: Test Subquid
  #   needs:
  #     - check-privilege
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}
  #         persist-credentials: false
  #     - name: Setup jest
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16
  #     - name: Install dependencies
  #       run: npm ci
  #       working-directory: subsquid
  #     - name: Run tests
  #       run: npm run test
  #       working-directory: subsquid

  # subsquid-processor:
  #   name: "Package Subsquid Processor"
  #   needs:
  #     - test-subsquid
  #     - check-privilege
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #   concurrency:
  #     group: ${{ github.workflow }}-package-subsquid-processor-${{ github.event.pull_request.title }}
  #     cancel-in-progress: true
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}
  #         persist-credentials: false
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  #     - name: Build and push
  #       uses: docker/build-push-action@v3
  #       with:
  #         tags: ${{ env.DOCKER_REGISTRY_NAME }}/subsquid-processor:latest,${{ env.DOCKER_REGISTRY_NAME }}/subsquid-processor:${{ vars.GITHUB_SHA }}
  #         context: subsquid
  #         push: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
  # composable-sandbox-container-publish:
  #   needs:
  #     - effects-gate
  #     - check-privilege
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #   concurrency:
  #     group: packagepricefeed-${{ github.event.pull_request.title }}
  #     cancel-in-progress: true
  #   container:
  #     image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}
  #         persist-credentials: false
  #     - uses: "./.github/templates/watch-exec"
  #       with:
  #         command: nix -- build .#price-feed
  #         token: "${{ secrets.CACHIX_AUTH_TOKEN }}"
  #         push: ${{ github.event_name == 'push' && github.event.pull_request.title_name == 'main' }}

  # composable-bridge-devnet-container-publish:
  #   name: "Docker composable-bridge-devnet"
  #   needs:
  #     - effects-gate
  #     - check-privilege
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #   concurrency:
  #     group: ${{ github.workflow }}-composable-bridge-devnet-container-${{ github.event.pull_request.title }}
  #     cancel-in-progress: true
  #   container:
  #     image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}
  #         persist-credentials: false
  #     - uses: "./.github/templates/docker-publish"
  #       with:
  #         command: nix -- build .#bridge-devnet-dali-container
  #         token: "${{ secrets.CACHIX_AUTH_TOKEN }}"
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  #         name: composable-bridge-devnet
  #         artifact: composable-bridge-devnet-container

  # devnet-integration-tests:
  #     name: "Devnet integration tests"
  #     needs:
  #       - package-polkadot-node
  #       - package-composable-node
  #       - check-nix
  #       - check-privilege
  #     runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #     timeout-minutes: 120
  #     concurrency:
  #       group: ${{ github.workflow }}-devnet-integration-tests-${{ github.event.pull_request.title }}
  #       cancel-in-progress: true
  #     container:
  #       image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
  #     steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         clean: false
  #         fetch-depth: 0
  #         ref: ${{ github.event.pull_request.head.sha }}
  #         persist-credentials: false
  #     - run: |
  #         echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
  #         echo "sandbox = relaxed" >> /etc/nix/nix.conf
  #         echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
  #       shell: "bash"
  #     - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
  #       with:
  #         skipPush: true
  #         installCommand: |
  #           nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
  #           nix-channel --update
  #           nix-env -iA nixpkgs.cachix nixpkgs.nodejs
  #         authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
  #         name: ${{  env.CACHIX_COMPOSABLE }}
  #     - run: |
  #         nix run .#devnet-integration-tests

  # effects-gate:
  #     name: "Effect gate, automatically merged if passed"
  #     runs-on:
  #     - self-hosted
  #     - linux
  #     - x64
  #     - sre
  #     needs:
  #       - check-lfs
  #       - check-nix
  #       - check-nix-long
  #       - all-ci-packages
  #       # - test-running-of-pallet-benchmarks
  #       # FIXUP(hussein): reenable once v0.9.30 -> v0.9.33
  #       # - local-integration-tests

  #       # - lint-test-frontend
  #     steps:
  #       - run: echo "Goblins allow your work to see the light"

  nix-command-pr-comments:
    permissions:
      pull-requests: write
      issues: write
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    name: "Nix command PR comments"
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
      - name: Comment PR
        uses: "./.github/templates/comment"
        with:
          message: |
            ### Nix commands for this PR
            **NOTE: You can also run our Nix commands in Docker. See the bottom of this comment.**
            #### Make sure you have setup the Composable community cache:
            _(you only need to run it once on your machine)_
            ```bash
            nix-shell -p cachix --command "cachix use composable-community"
            ```
            #### Show all possible apps, shells and packages:
            ```
            nix flake show "github:ComposableFi/composable/${{ github.event.pull_request.head.sha }} --allow-import-from-derivation
            ```
            #### Run the Composable node alone:
            ```bash
            nix run "github:ComposableFi/composable/${{ github.event.pull_request.head.sha }}#composable-node" -L
            ```
            #### Spin up a local devnet:
            ```bash
            nix run "github:ComposableFi/composable/${{ github.event.pull_request.head.sha }}#devnet" -L --option sandbox relaxed --show-trace
            ```
            #### Spin up a local XCVM devnet:
            ```bash
            nix run "github:ComposableFi/composable/${{ github.event.pull_request.head.sha }}#devnet-xcvm" -L
            ```
            ### View the docs:
            ```bash
            nix run ".#docs-server"
            ```
            ### Run this without Nix in Docker.
            ```bash
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v nix:/nix -it nixos/nix bash -c "nix-env -iA nixpkgs.cachix && cachix use composable-community && nix run github:ComposableFi/Composable/${{ github.event.pull_request.head.sha }}#devnet-dali -L --extra-experimental-features nix-command --extra-experimental-features flakes"
            ```
            _NOTE: You can swap `devnet-dali` in the command above with any Nix package_
            _For more info on how to use Nix, check out our [Nix docs](https://docs.composable.finance/nix.html)_
            Note that the initial build may take about one hour if it has not been cached by our CI yet. Once it is cached, builds should take about one minute. We currently do not provide build caches for ARM machines such as M1 Macs, but building on ARM is supported.
          comment_tag: 'Nix commands for this PR'
          github_token: ${{ secrets.GITHUB_TOKEN }}       
