name: "Build, Test, Deploy"
on:
  push:
    branches:
      - release-*
      - main

  # For regular PRs.    
  pull_request_target:

  # For PRs that need to run in the monorepo context.
  pull_request:

permissions: 
  pull-requests: write

env:
  NIX_VERSION: nix-2.13.2
  NIXPKGS_CHANNEL: nixos-22.11
  CACHIX_COMPRESSION_LEVEL: 16
  CACHIX_JOBS: 8
  CACHIX_COMPRESSION_METHOD: zstd

  CACHIX_NAME: composable-community

  DOCKER_REGISTRY_NAME: composablefi
  # weird, next is implicit dependency of docker action
  DOCKER_USER_OPTION: '$UID:$GID'

jobs:
  privilege-check:
    name: "Privilege check"
    if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.id != 383289760) || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.id == 383289760) }}
    runs-on: ubuntu-latest  
    steps:
      - run: |
          echo "I am priviliged by goblins on repository id ${{ github.event.pull_request.head.repo.id }} ${{ github.event.pull_request_target.head.repo.id }}" 
      

  lfs-check:
    name: LFS check
    needs:
      - privilege-check
    continue-on-error: false
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-lfs-check-${{ github.event.pull_request.title }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
      - uses: actionsdesk/lfs-warning@v3.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filesizelimit: 10KB
          exclusionPatterns: |
            **/*.rs
            **/*.ts
            **/*.json
            **/*.lock

  nix-flake-check:
    name: "Nix flake check"
    needs:
      - privilege-check
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-nix-flake-check-${{ github.event.pull_request.title }}
      cancel-in-progress: true
    steps:
      # This isn't templated, since checkout needs to happen before templating occurs.
      - name: Set up Nix
        uses: cachix/install-nix-action@daddc62a2e67d1decb56e028c9fa68344b9b7c2a # v18
        with:
          install_url: https://releases.nixos.org/nix/${{ env.NIX_VERSION }}/install
          nix_path: nixpkgs=channel:${{ env.NIXPKGS_CHANNEL }}
          extra_nix_config: |
            sandbox = relaxed
            narinfo-cache-negative-ttl = 0      
            system-features = kvm
            http2 = false
      - name: Set up Cachix
        uses: cachix/cachix-action@6a9a34cdd93d0ae4b4b59fd678660efb08109f2f # v12
        with:
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: ${{ env.CACHIX_NAME }}
      - name: Add tools needed for non-nix steps
        run: |  
          nix-channel --add https://nixos.org/channels/${{ env.NIXPKGS_CHANNEL }} nixpkgs
          nix-channel --update
          nix-env -iA nixpkgs.cachix nixpkgs.nodejs nixpkgs.git nixpkgs.git-lfs nixpkgs.tree nixpkgs.docker
      - uses: actions/checkout@v3
        with:
          lfs: true
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
      - run: |
          chmod +x ./.github/workflows/nix-flake-check.sh
          source ./.github/workflows/nix-flake-check.sh
  
  all-packages:
    name: Build all packages
    strategy:
      matrix:
        arch: [x64-monster, arm-monster]
    needs: 
      - privilege-check
      - lfs-check
    runs-on:
      - self-hosted
      - ${{ matrix.arch }}
    concurrency:
      group: ${{ github.workflow }}-build-all-packages-${{ matrix.arch }}-${{ github.event.pull_request.title }}
      cancel-in-progress: true
    steps:
      - name: Set up Nix
        uses: cachix/install-nix-action@daddc62a2e67d1decb56e028c9fa68344b9b7c2a # v18
        with:
          install_url: https://releases.nixos.org/nix/${{ env.NIX_VERSION }}/install
          nix_path: nixpkgs=channel:${{ env.NIXPKGS_CHANNEL }}
          extra_nix_config: |
            sandbox = relaxed
            narinfo-cache-negative-ttl = 0      
            system-features = kvm
            http2 = false

      - name: Set up Cachix
        uses: cachix/cachix-action@6a9a34cdd93d0ae4b4b59fd678660efb08109f2f # v12
        with:
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: ${{ env.CACHIX_NAME }}
      - name: Add tools needed for non-nix steps
        run: |  
          nix-channel --add https://nixos.org/channels/${{ env.NIXPKGS_CHANNEL }} nixpkgs
          nix-channel --update
          nix-env -iA nixpkgs.cachix nixpkgs.nodejs nixpkgs.git nixpkgs.git-lfs nixpkgs.tree nixpkgs.docker nixpkgs.coreutils
      - uses: actions/checkout@v3
        with:
          lfs: true
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
      - name: Nix flake show
        run: |
          nix --version
          nix show-config
          NIX_DEBUG_COMMAND="" && [[ $ACTIONS_RUNNER_DEBUG = "true" ]] && NIX_DEBUG_COMMAND='--print-build-logs --debug --show-trace --verbose'
          nix flake show --allow-import-from-derivation --fallback --keep-failed ${NIX_DEBUG_COMMAND}
      - name: Build all packages 
        uses: "./.github/templates/watch-exec"
        with:
          command: nix -- build .#all --keep-going
      - name: List built results 
        run: |
          ls result
          tree result -L 3
  
  effects-gate:
      name: "Effect gate, automatically merged if passed"
      runs-on: ubuntu-latest
      needs:
        - privilege-check
        - lfs-check
        - nix-flake-check
        - all-packages
      steps:
        - run: echo "Goblins allow your work to see the light"

  deploy-docs:
    name: "Deploy docs"
    needs:
      - all-packages
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-deploy-docs-${{ github.event.pull_request.title }}
      cancel-in-progress: true
    steps:
      - name: Set up Nix
        uses: cachix/install-nix-action@daddc62a2e67d1decb56e028c9fa68344b9b7c2a # v18
        with:
          install_url: https://releases.nixos.org/nix/${{ env.NIX_VERSION }}/install
          nix_path: nixpkgs=channel:${{ env.NIXPKGS_CHANNEL }}
          extra_nix_config: |
            sandbox = relaxed
            narinfo-cache-negative-ttl = 0      
            system-features = kvm
            http2 = false
      - name: Set up Cachix
        uses: cachix/cachix-action@6a9a34cdd93d0ae4b4b59fd678660efb08109f2f # v12
        with:
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: ${{ env.CACHIX_NAME }}
      - name: Add tools needed for non-nix steps
        run: |  
          nix-channel --add https://nixos.org/channels/${{ env.NIXPKGS_CHANNEL }} nixpkgs
          nix-channel --update
          nix-env -iA nixpkgs.cachix nixpkgs.nodejs nixpkgs.git nixpkgs.git-lfs nixpkgs.tree nixpkgs.docker
      - uses: actions/checkout@v3
        with:
          lfs: true
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
      - name: Build docs
        uses: "./.github/templates/watch-exec"
        with:
          command: nix -- build .#docs-static
          working-directory: ./docs
      - name: Deploy docs
        uses: FirebaseExtended/action-hosting-deploy@0f248036885ae672f78587669fa2923f0ef6cac2
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_DOCS_COMPOSABLE_FINANCE }}
          projectId: composable-docs
          entrypoint: docs/
          channelId: ${{ github.event_name == 'push' && github.ref_name == 'main' && 'live' }}

  push-docker-images:
    name: Push docker images
    strategy:
      matrix:
        arch: [x64-cute] # TODO: add arm-cute and figure out pushing multi-arch imgaes to dockerhub
    needs: 
      - effects-gate
    runs-on:
      - self-hosted
      - ${{ matrix.arch }}
    concurrency:
      group: ${{ github.workflow }}-push-docker-images-${{ matrix.arch }}-${{ github.event.pull_request.title }}
      cancel-in-progress: true
    steps:
      # This isn't templated, since checkout needs to happen before templating occurs.
      - name: Set up Nix
        uses: cachix/install-nix-action@daddc62a2e67d1decb56e028c9fa68344b9b7c2a # v18
        with:
          install_url: https://releases.nixos.org/nix/${{ env.NIX_VERSION }}/install
          nix_path: nixpkgs=channel:${{ env.NIXPKGS_CHANNEL }}
          extra_nix_config: |
            sandbox = relaxed
            narinfo-cache-negative-ttl = 0      
            system-features = kvm
            http2 = false
      - name: Set up Cachix
        uses: cachix/cachix-action@6a9a34cdd93d0ae4b4b59fd678660efb08109f2f # v12
        with:
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: ${{ env.CACHIX_NAME }}
      - name: Add tools needed for non-nix steps
        run: |  
          nix-channel --add https://nixos.org/channels/${{ env.NIXPKGS_CHANNEL }} nixpkgs
          nix-channel --update
          nix-env -iA nixpkgs.cachix nixpkgs.nodejs nixpkgs.git nixpkgs.git-lfs nixpkgs.tree nixpkgs.docker
      - uses: actions/checkout@v3
        with:
          lfs: true
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
      - name: Nix flake show
        run: |
          nix --version
          nix show-config
          nix flake show --allow-import-from-derivation  --show-trace --fallback --debug --print-build-logs --keep-failed
      - name: Build all packages 
        uses: "./.github/templates/watch-exec"
        with:
          command: nix -- build .#docker-images-to-push
      - name: List built results 
        run: |
          ls result
          tree result -L 3
      - name: Publish cmc-api to docker hub
        uses: "./.github/templates/docker-publish"
        with:
          image_path: result/docker-image-cmc-api.tar.gz
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          name: cmc-api
          artifact: cmc-api:latest
      - name: Publish devnet-dali to docker hub
        uses: "./.github/templates/docker-publish"
        with:
          image_path: result/docker-image-devnet-dali.tar.gz
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          name: devnet-dali
          artifact: devnet-dali:latest
      - name: Publish hyperspace-dali to docker hub
        uses: "./.github/templates/docker-publish"
        with:
          image_path: result/docker-image-hyperspace-dali.tar.gz
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          name: hyperspace-dali
          artifact: hyperspace-dali:latest
      

  # NOTE: Everything below this line is not built deterministically and therefore considered flaky.
  # [FLAKY] jobs are not included in the effects gate


  deploy-pablo-preview:
    name: "Deploy Pablo Preview [FLAKY]"
    needs:
      - all-packages
    runs-on:
      - self-hosted
      - x64-cute
    container:
      image: node:latest
    steps:
      - run: |
          apt-get update
          apt-get install -y curl git
          curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
          apt-get install git-lfs
      - uses: actions/checkout@v3
        with:
          lfs: true
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Import project setting
        run: |
          mkdir -p .vercel
          echo '${{ secrets.PABLO_PROJ_JSON }}' >> .vercel/project.json
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: |
          PREVIEW_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=${PREVIEW_URL}" >> $GITHUB_OUTPUT
        id: deploy
      - name: Comment PR
        uses: "./.github/templates/comment"
        with:
          message: |
            ### Pablo Preview URL
            ${{ steps.deploy.outputs.preview-url }}
          comment_tag: 'Pablo Preview URL'
          github_token: ${{ secrets.GITHUB_TOKEN }}

  deploy-picasso-preview:
    name: "Deploy Picasso Preview [FLAKY]"
    needs:
      - all-packages
    runs-on:
      - self-hosted
      - x64-cute
    container:
      image: node:latest
    steps:
      - run: |
          apt-get update
          apt-get install -y curl git
          curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
          apt-get install git-lfs
      - uses: actions/checkout@v3
        with:
          lfs: true
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Import project setting
        run: |
          mkdir -p .vercel
          echo '${{ secrets.PICASSO_PROJ_JSON }}' >> .vercel/project.json
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: |
           PREVIEW_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
           echo "preview-url=${PREVIEW_URL}" >> $GITHUB_OUTPUT
        id: deploy
      - name: Comment PR
        uses: "./.github/templates/comment"
        with:
          message: |
            ### Picasso Preview URL
            ${{ steps.deploy.outputs.preview-url }}
          comment_tag: 'Picasso Preview URL'
          github_token: ${{ secrets.GITHUB_TOKEN }}

  devnet-integration-tests:
    name: Devnet integration tests [FLAKY]
    needs: 
      - all-packages
    strategy:
      matrix:
        arch: [x64-cute, arm-cute]
    runs-on:
      - self-hosted
      - ${{ matrix.arch }}
    concurrency:
      group: ${{ github.workflow }}-devnet-integration-tests-${{ matrix.arch }}-${{ github.event.pull_request.title }}
      cancel-in-progress: true
    steps:
      # This isn't templated, since checkout needs to happen before templating occurs.
      - name: Set up Nix
        uses: cachix/install-nix-action@daddc62a2e67d1decb56e028c9fa68344b9b7c2a # v18
        with:
          install_url: https://releases.nixos.org/nix/${{ env.NIX_VERSION }}/install
          nix_path: nixpkgs=channel:${{ env.NIXPKGS_CHANNEL }}
          extra_nix_config: |
            sandbox = relaxed
            narinfo-cache-negative-ttl = 0      
            system-features = kvm
            http2 = false
      - name: Set up Cachix
        uses: cachix/cachix-action@6a9a34cdd93d0ae4b4b59fd678660efb08109f2f # v12
        with:
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: ${{ env.CACHIX_NAME }}
      - name: Add tools needed for non-nix steps
        run: |  
          nix-channel --add https://nixos.org/channels/${{ env.NIXPKGS_CHANNEL }} nixpkgs
          nix-channel --update
          nix-env -iA nixpkgs.cachix nixpkgs.nodejs nixpkgs.git nixpkgs.git-lfs nixpkgs.tree nixpkgs.docker nixpkgs.coreutils nixpkgs.gnumake nixpkgs.python311 nixpkgs.gcc
      - uses: actions/checkout@v3
        with:
          lfs: true
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
      - name: Devnet integration tests
        run: |
          nix run .#devnet-integration-tests
   
  # TODO: nixify these test steps, and add me to subsquid-processor
  test-subsquid:
    name: Test Subquid [FLAKY]
    needs:
      - lfs-check
    strategy:
      matrix:
        arch: [x64-cute] # TODO: add arm-cute and figure out pushing multi-arch imgaes to dockerhub
    runs-on:
      - self-hosted
      - ${{ matrix.arch }}
    concurrency:
      group: ${{ github.workflow }}-test-subsquid-${{ matrix.arch }}-${{ github.event.pull_request.title }}
      cancel-in-progress: true
    steps:
      - name: Set up Nix
        uses: cachix/install-nix-action@daddc62a2e67d1decb56e028c9fa68344b9b7c2a # v18
        with:
          install_url: https://releases.nixos.org/nix/${{ env.NIX_VERSION }}/install
          nix_path: nixpkgs=channel:${{ env.NIXPKGS_CHANNEL }}
          extra_nix_config: |
            sandbox = relaxed
            narinfo-cache-negative-ttl = 0      
            system-features = kvm
            http2 = false
      - name: Set up Cachix
        uses: cachix/cachix-action@6a9a34cdd93d0ae4b4b59fd678660efb08109f2f # v12
        with:
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: ${{ env.CACHIX_NAME }}
      - name: Add tools needed for non-nix steps
        run: |  
          nix-channel --add https://nixos.org/channels/${{ env.NIXPKGS_CHANNEL }} nixpkgs
          nix-channel --update
          nix-env -iA nixpkgs.cachix nixpkgs.nodejs nixpkgs.git nixpkgs.git-lfs nixpkgs.tree nixpkgs.docker nixpkgs.coreutils nixpkgs.gnumake nixpkgs.python311 nixpkgs.gcc
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
      - name: Setup jest
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install dependencies
        run: npm ci
        working-directory: subsquid
      - name: Run tests
        run: npm run test
        working-directory: subsquid

  package-subsquid-processor:
    name: Package Subsquid Processor [FLAKY]
    needs:
      - test-subsquid
    strategy:
      matrix:
        arch: [x64-cute] # TODO: add arm-cute and figure out pushing multi-arch imgaes to dockerhub
    runs-on:
      - self-hosted
      - ${{ matrix.arch }}
    concurrency:
      group: ${{ github.workflow }}-package-subsquid-processor-${{ matrix.arch }}-${{ github.event.pull_request.title }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
      - name: Log INFO commit sha
        run: |
          echo "GITHUB_SHA=${GITHUB_SHA} github.sha=${{ github.sha }}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          tags: |
            ${{ env.DOCKER_REGISTRY_NAME }}/subsquid-processor:latest
            ${{ env.DOCKER_REGISTRY_NAME }}/subsquid-processor:${{ github.sha }}
          context: subsquid
          push: ${{ github.event_name == 'push' && github.ref_name == 'main' }}    
