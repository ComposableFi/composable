name: "Build, Test, Deploy"
on:
  push:
    branches:
      - releases
      - main
      # bors related branches. Please do not remove.
      - staging
      - trying
  pull_request:
    branches:
      - main
      - develop
      - releases

env:
  # NOTE: keep in sync with docs
  NIX_NIXPKGS_CHANNEL: https://nixos.org/channels/nixpkgs-22.05-darwin
  NIX_CONTAINER_IMAGE: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
  NIX_INSTALL_SCRIPT: https://releases.nixos.org/nix/nix-2.10.3/install

  CACHIX_COMPOSABLE: composable-community
  CACHIX_COMPRESSION_LEVEL: 3

  DOCKER_REGISTRY_NAME: composablefi
  # weird, next is implicit dependency of docker action
  DOCKER_USER_OPTION: '$UID:$GID'

jobs:
  common-deps:
    name: "Common dependencies"
    needs:
      - check-nix
    concurrency:
      group: ${{ github.workflow }}-common-deps-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      # TODO: do composable-nix-os which has experimental-features, proper channel, and cachix installed with composable cache
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          name: ${{  env.CACHIX_COMPOSABLE }}
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#common-deps --no-update-lock-file --show-trace -L
  build-common-test-deps:
    needs:
      - check-nix
    concurrency:
      group: ${{ github.workflow }}-build-common-test-deps-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      # TODO: do composable-nix-os which has experimental-features, proper channel, and cachix installed with composable cache
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          name: ${{  env.CACHIX_COMPOSABLE }}
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#common-test-deps --no-update-lock-file --show-trace -L

  check-nix:
    name: "Check nix"
    continue-on-error: false
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-check-nix-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          nix flake show --allow-import-from-derivation  --show-trace --fallback --debug --print-build-logs --keep-failed          

  cargo-fmt-check:
    name: "Cargo fmt check"
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-cargo-fmt-check-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#cargo-fmt-check --no-update-lock-file --show-trace -L

  taplo-cli-check:
    name: "Taplo cli check"
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-taplo-cli-check-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#taplo-cli-check --no-update-lock-file --show-trace -L

  prettier-check:
    name: "Prettier check"
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-prettier-check-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#prettier-check --no-update-lock-file --show-trace -L

  nixfmt-check:
    name: "Nixfmt check"
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-nixfmt-check-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#nixfmt-check --no-update-lock-file --show-trace -L

  deadnix-check:
    name: "Deadnix check"
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-deadnix-check-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#deadnix-check --no-update-lock-file --show-trace -L

  spell-check:
    name: "Spelling check"
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-spell-check-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#spell-check --no-update-lock-file --show-trace -L

  docs-check:
    name: "Docs check"
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-docs-check-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#docs-static --no-update-lock-file --show-trace -L

  frontend-check:
    name: "Frontend check"
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-frontend-check-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#frontend-static --no-update-lock-file --show-trace -L

  hadolint-check:
    name: "Dockerfiles check"
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: ${{ github.workflow }}-hadolint-check-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#hadolint-check --no-update-lock-file --show-trace -L

  cargo-clippy-check:
    name: "Cargo clippy check"
    needs: common-deps
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-cargo-clippy-check-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#cargo-clippy-check --no-update-lock-file --show-trace -L

  cargo-deny-check:
    name: "Cargo deny check"
    needs: common-deps
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-cargo-deny-check-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#cargo-deny-check --no-update-lock-file --show-trace -L

  cargo-udeps-check:
    name: "Cargo udeps"
    needs: common-deps
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-cargo-udeps-check-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#cargo-udeps-check --no-update-lock-file --show-trace -L

  benchmarks-check:
    name: "Benchmarks check"
    needs: common-deps
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: ${{ github.workflow }}-benchmarks-check-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level 0 composable-community nix -- build .#benchmarks-check --no-update-lock-file --show-trace -L

  unit-tests:
    name: "Unit Tests"
    needs:
      - build-common-test-deps
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: ${{ github.workflow }}-unittests-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#unit-tests --no-update-lock-file --show-trace -L

  unit-tests-with-coverage:
    name: "Unit Tests with coverage"
    needs: common-deps
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: ${{ github.workflow }}-unittests-with-coverage-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add https://nixos.org/channels/nixpkgs-22.05-darwin nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec -j 16 -c 0 composable-community nix -- build .#unit-tests-with-coverage --no-update-lock-file --show-trace -L
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: result/lcov/lcov.info
          fail_ci_if_error: false

  test-running-of-pallet-benchmarks:
    name: "Test running of pallet benchmarks"
    needs: package-composable-bench-node
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: ${{ github.workflow }}-test-running-of-pallet-benchmarks-${{ matrix.runtime }}-${{ github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        runtime: [dali, picasso, composable]
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- run .#benchmarks-once-${{ matrix.runtime }} --no-update-lock-file --show-trace -L

  check-simnode:
    name: "Simnode"
    needs: package-simnode-tests
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: check-simnode-${{ matrix.runtime }}-${{ github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        runtime: [picasso, composable]
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add https://nixos.org/channels/nixpkgs-22.05-darwin nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix nixpkgs.python3 nixpkgs.unzip
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ secrets.DEPLOY_DALI }}
          export_default_credentials: true
      - run: |
          FILENAME=$(date -d yesterday +'%m-%d-%Y').zip
          GS_BUCKET="${{ matrix.runtime }}-data-store"
          gsutil cp gs://$GS_BUCKET/"$FILENAME" .
          unzip -o "$FILENAME" -d /tmp/db
          cachix watch-exec -j 16 -c 0 composable-community nix -- run .#simnode-tests-${{ matrix.runtime }} --no-update-lock-file --show-trace -L

  local-integration-tests:
    name: "Local integration tests"
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: local-integration-tests-${{ matrix.runtime }}-${{ github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        runtime: [dali, picasso]
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#check-${{ matrix.runtime }}-integration-tests --no-update-lock-file --show-trace -L

  package-simnode-tests:
    name: "Package Simnode Tests"
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: package-simnode-tests-${{ matrix.runtime }}-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add https://nixos.org/channels/nixpkgs-22.05-darwin nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec -j 16 -c 0 composable-community nix -- build .#simnode-tests --no-update-lock-file --show-trace -L

  package-composable-node:
    name: "Package Composable node"
    needs: common-deps
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: ${{ github.workflow }}-package-composable-node-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#composable-node --no-update-lock-file --show-trace -L

  package-composable-bench-node:
    name: "Package Composable bench node"
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: ${{ github.workflow }}-package-composable-bench-node-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#composable-bench-node --no-update-lock-file --show-trace -L

  package-polkadot-node:
    name: "Package Polkadot node"
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: ${{ github.workflow }}-package-polkadot-node-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#polkadot-node --no-update-lock-file --show-trace -L

  package-statemine-node:
    name: "Package Statemine node"
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: ${{ github.workflow }}-package-statemine-node-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#statemine-node --no-update-lock-file --show-trace -L

  package-acala-node:
    name: "Package Acala node"
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: ${{ github.workflow }}-package-acala-node-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#acala-node --no-update-lock-file --show-trace -L

  cache-kusama-parachains-devnet:
    name: "Package kusama parachains devnet"
    needs:
      - package-polkadot-node
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: ${{ github.workflow }}-cache-kusama-parachains-devnet-${{ github.ref }}
      cancel-in-progress: true
    continue-on-error: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#kusama-picasso-karura-devnet --no-update-lock-file --show-trace -L

  cache-devnet-all-dev-local:
    name: "Package Full Devnet"
    needs:
      - package-polkadot-node
      - package-acala-node
      - package-statemine-node
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: ${{ github.workflow }}-cache-devnet-all-dev-local-${{ github.ref }}
      cancel-in-progress: true
    continue-on-error: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#devnet-default-program --no-update-lock-file --show-trace -L

  package-xcvm-minimal:
    name: "Package XCVM minimal"
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-package-xcvm-${{ github.ref }}
      cancel-in-progress: true
    continue-on-error: false

    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#junod --no-update-lock-file --show-trace -L
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#gex --no-update-lock-file --show-trace -L
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#wasmswap --no-update-lock-file --show-trace -L

  package-price-feed:
    needs: common-deps
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: packagepricefeed-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#price-feed --no-update-lock-file --show-trace -L

  composable-sandbox-container-publish:
    needs:
      - effects-gate
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: ${{ github.workflow }}-composable-sandbox-container-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix nixpkgs.docker nixpkgs.docker-buildx
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - run: |
          # enable required features (see https://github.com/cachix/install-nix-action/issues/19)
          mkdir -p ~/.config/nix
          echo "system-features = kvm" >> ~/.config/nix/nix.conf
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#devnet-container --no-update-lock-file --show-trace -L
          docker load --input ./result
          # update soon https://github.com/actions/checkout/issues/760
          git config --global --add safe.directory /__w/composable/composable
          CONTAINER_NAME=composable-sandbox
          SHA256=$(sha256sum ./result | cut --delimiter " " --fields 1)
          COMMIT_SHA=$(git rev-parse HEAD)
          LOCAL_DOCKER_IMAGE_NAME=composable-devnet-container:latest
          docker image tag $LOCAL_DOCKER_IMAGE_NAME "${{ env.DOCKER_REGISTRY_NAME }}/${CONTAINER_NAME}:${COMMIT_SHA}"
          docker image tag $LOCAL_DOCKER_IMAGE_NAME "${{ env.DOCKER_REGISTRY_NAME }}/${CONTAINER_NAME}:${SHA256}"
          if [ $(git symbolic-ref HEAD) = "refs/heads/main" ]; then
            docker image tag $LOCAL_DOCKER_IMAGE_NAME "${{ env.DOCKER_REGISTRY_NAME }}/${CONTAINER_NAME}:latest"
          fi;
          docker push --all-tags "${{ env.DOCKER_REGISTRY_NAME }}/${CONTAINER_NAME}"

  composable-bridge-devnet-container-publish:
    name: "Docker composable-bridge-devnet"
    needs:
      - effects-gate
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: ${{ github.workflow }}-composable-bridge-devnet-container-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix nixpkgs.docker nixpkgs.docker-buildx
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - run: |
          # enable required features (see https://github.com/cachix/install-nix-action/issues/19)
          mkdir -p ~/.config/nix
          echo "system-features = kvm" >> ~/.config/nix/nix.conf
      - run: |
          cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nix -- build .#bridge-devnet-dali-container --no-update-lock-file --show-trace -L
          docker load --input ./result

          # update soon https://github.com/actions/checkout/issues/760
          git config --global --add safe.directory /__w/composable/composable

          SHA256=$(sha256sum ./result | cut --delimiter " " --fields 1)
          COMMIT_SHA=$(git rev-parse HEAD)
          CONTAINER_NAME="composable-bridge-devnet"
          TEMP_CONTAINER_NAME="${CONTAINER_NAME}-container"

          docker tag "${TEMP_CONTAINER_NAME}:latest" "${{ env.DOCKER_REGISTRY_NAME }}/${CONTAINER_NAME}:${SHA256}"
          docker tag "${TEMP_CONTAINER_NAME}:latest" "${{ env.DOCKER_REGISTRY_NAME }}/${CONTAINER_NAME}:${COMMIT_SHA}"
          if [ $(git symbolic-ref HEAD) = "refs/heads/main" ]; then
            docker tag "${TEMP_CONTAINER_NAME}:latest" "${{ env.DOCKER_REGISTRY_NAME }}/${CONTAINER_NAME}:latest"
          fi;
          docker push --all-tags "${{ env.DOCKER_REGISTRY_NAME }}/${CONTAINER_NAME}"

  devnet-integration-tests:
      name: "Devnet integration tests"
      needs:
        - package-polkadot-node
        - package-composable-node
        - check-nix
      runs-on: ubuntu-latest
      timeout-minutes: 120
      concurrency:
        group: ${{ github.workflow }}-devnet-integration-tests-${{ github.ref }}
        cancel-in-progress: true
      steps:
      - uses: actions/checkout@v3
        with:
          clean: false
          fetch-depth: 0
      - uses: cachix/install-nix-action@v17
        with:
          extra_nix_config: |
            sandbox = relaxed
            narinfo-cache-negative-ttl = 0
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix nixpkgs.nodejs
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: ${{  env.CACHIX_COMPOSABLE }}

      - run: |
          # ideally it does:
          # start first process
          # start second if and only if first stdout specific string
          # first stdout await has timeout, any stderr or exit end stdout timeout and shell exits non zero
          # if first or second second stderr or non zero exited, then end second and first end and shell non zero exit
          # if second timeouted, then in shell non zero exit
          # more complicated, stderr by regex X times before exit
          # if second ended success, first stopped gracefully
          #
          # TODO: handle
          # 🧹 Resolving parachain id...
          # /nix/store/rfrhfi70ijykigwyaswrwlmfqbxw570g-polkadot-v0.9.27/bin/polkadot build-spec --chain=rococo-local --disable-default-bootnode
          # 2022-08-25 02:01:57 Building chain spec
          # ⚠ failed to parse the chain spec

          ( nix run .#devnet-dali 2>&1 & ) | tee devnet-dali.log &
          until test -f devnet-dali.log; do sleep 1 && echo "waiting network start"; done;
          ( tail --follow --lines=0  devnet-dali.log & ) | grep --max-count=1 "POLKADOT LAUNCH COMPLETE"

          echo "PATH=$(pwd):$PATH" >> $GITHUB_ENV
          cd code/integration-tests/runtime-tests
          npm install -q
          export ENDPOINT=127.0.0.1:9988 && export ENDPOINT_RELAYCHAIN=127.0.0.1:9944 && npm run test_short 2>&1>runtime-tests.log & RUNTIME_TESTS_PID=$!
          until test -f runtime-tests.log; do sleep 1 && echo "waiting tests start"; done;
          tail --follow runtime-tests.log &
          ( tail --follow --lines=0 runtime-tests.log & ) | ( grep --max-count=5 "API-WS: disconnected from" >stop.log & )
          ( while : ; do if test $( wc --lines stop.log | cut --delimiter " " --fields 1 ) -gt 4; then kill -9 $RUNTIME_TESTS_PID && echo "Failed" && exit 42; fi; sleep 1; done ) &
          wait $RUNTIME_TESTS_PID
          exit $?

  effects-gate:
      name: "Effect gate, automatically merged if passed"
      runs-on: ubuntu-latest
      needs:
        - check-nix
        - devnet-integration-tests
        - package-polkadot-node
        - package-composable-node
        - test-running-of-pallet-benchmarks
        - local-integration-tests
        - unit-tests
        - cargo-udeps-check
        - nixfmt-check
        - cargo-clippy-check
        - cargo-deny-check
        - cargo-fmt-check
        - taplo-cli-check
        - prettier-check
        - check-simnode
        - benchmarks-check
        - spell-check
        - docs-check
        - hadolint-check
        - frontend-check
      steps:
        - run: echo "Goblins allow your work to see the light"

  deploy-devnet:
      name: "Devnet(Rococo Local Dali Dev) Deploy"
      if: github.event_name == 'push' && github.ref_name == 'main'
      needs:
        - effects-gate
      runs-on: ubuntu-latest
      # ISSUE: SSH on container image nixos hangs, so we do not use it - need some customization
      concurrency:
        group: nix-deploy-devnet
        cancel-in-progress: false
      steps:
      - uses: actions/checkout@v3
        with:
          clean: false
          fetch-depth: 0
      - uses: cachix/install-nix-action@v17
        with:
          extra_nix_config: |
            sandbox = relaxed
            narinfo-cache-negative-ttl = 0
      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{ env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix nixpkgs.jq
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: ${{  env.CACHIX_COMPOSABLE }}

      - uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
          export_default_credentials: true

      - name: Build & Push
        run: |
          cd devnet
          jq --null-input --arg client_email "$GCP_DEVNET_SERVICE_ACCOUNT" --arg project_id "$GCP_PROJECT_ID" --arg key "\"$GCP_DEVNET_SERVICE_ACCOUNT_KEY\"" '{ "project_id": $project_id, "private_key": ($key | fromjson), "client_email": $client_email }' > ops.json
          cd ..

          if gsutil -q stat $NIXOPS_STATE_URL/$NIXOPS_STATE;
          then
            gsutil cp $NIXOPS_STATE_URL/$NIXOPS_STATE $NIXOPS_STATE
          else
            nix develop .#ci --show-trace -L --command cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nixops -- create --deployment devnet-gce --show-trace --option narinfo-cache-negative-ttl 0 --include composable-devnet-dali-dev composable-devnet-picasso-dev

          fi

          nix develop .#ci --show-trace -L --command cachix watch-exec --jobs 16 --compression-level $CACHIX_COMPRESSION_LEVEL composable-community nixops -- deploy --check --confirm --deployment devnet-gce --debug --show-trace --option narinfo-cache-negative-ttl 0 --include composable-devnet-dali-dev composable-devnet-picasso-dev

        env:
          NIXOPS_STATE_URL: "gs://composable-state"
          NIXOPS_STATE: "deployment.nixops"
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_DEVNET_SERVICE_ACCOUNT: ${{ secrets.GCP_DEVNET_SERVICE_ACCOUNT }}
          GCP_DEVNET_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_DEVNET_SERVICE_ACCOUNT_KEY }}

      - name: Save NixOps State
        if: always()
        run: |
          gsutil cp $NIXOPS_STATE $NIXOPS_STATE_URL/
        env:
          NIXOPS_STATE_URL: gs://composable-state
          NIXOPS_STATE: "deployment.nixops"

  frontend-firebase-preview-deploy:
    name: "Firebase Preview channel PR deployment"
    needs: common-deps
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: $${github.workflow }}-frontend-nix-deploy-firebase-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf
      - name: Check if hash changes
        if: steps.branch-name.outputs.current_branch != 'main' # PR
        id: feStaticHashChanges
        run: |
          if [ `nix build --dry-run "github:ComposableFi/composable#frontend-static" --json` == `nix build --dry-run ".#frontend-static" --json` ]; then
            echo "::set-output name=hashChange::false";
          else echo "::set-output name=hashChange::true";
          fi

      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level 0 composable-community nix -- build .#frontend-static-firebase --no-update-lock-file --show-trace -L
          mkdir -p firebase/picasso/out/
          mkdir -p firebase/pablo/out/
          cp -R result/picasso/* firebase/picasso/out/
          cp -R result/pablo/* firebase/pablo/out/
          cp frontend/apps/pablo/.firebaserc firebase/pablo/
          cp frontend/apps/pablo/firebase.json firebase/pablo/
          cp frontend/apps/picasso/.firebaserc firebase/picasso/
          cp frontend/apps/picasso/firebase.json firebase/picasso/
          nix-env -iA nixpkgs.nodejs

      - name: Deploy Picasso on preview channel
        if: steps.branch-name.outputs.current_branch != 'main' && steps.feStaticHashChanges.outputs.hashChange == 'true'
        uses: FirebaseExtended/action-hosting-deploy@0f248036885ae672f78587669fa2923f0ef6cac2
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PICASSO_WEB_APP }}
          projectId: picasso-f0d16
          entrypoint: firebase/picasso/
          channelId: ${{ steps.extract_branch.outputs.branch }}
      - name: Deploy Pablo on preview channel
        if: steps.branch-name.outputs.current_branch != 'main' && steps.feStaticHashChanges.outputs.hashChange == 'true'
        uses: FirebaseExtended/action-hosting-deploy@0f248036885ae672f78587669fa2923f0ef6cac2
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PABLO_WEB_APP }}
          projectId: pablo-afa5d
          entrypoint: firebase/pablo/
          channelId: ${{ steps.extract_branch.outputs.branch }}

  frontend-firebase-staging-deploy:
    if: github.event_name == 'push' && github.ref_name == 'main'
    name: "Firebase Live channel staging deployment"
    needs:
      - effects-gate
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: $${github.workflow }}-frontend-nix-deploy-firebase-${{ github.ref }}
      cancel-in-progress: true
    container:
      image: niteo/nixpkgs-nixos-22.05:316b762afdb9e142a803f29c49a88b4a47db80ee
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
          echo "sandbox = relaxed" >> /etc/nix/nix.conf
          echo "narinfo-cache-negative-ttl = 0" >> /etc/nix/nix.conf

      - uses: cachix/cachix-action@f5f67badd061acb62b5c6e25e763572ca8317004
        with:
          skipPush: true
          installCommand: |
            nix-channel --add ${{env.NIX_NIXPKGS_CHANNEL }} nixpkgs
            nix-channel --update
            nix-env -iA nixpkgs.cachix
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: composable-community
      - run: |
          cachix watch-exec --jobs 16 --compression-level 0 composable-community nix -- build .#frontend-static-firebase --no-update-lock-file --show-trace -L
          mkdir -p firebase/picasso/out/
          mkdir -p firebase/pablo/out/
          cp -R result/picasso/* firebase/picasso/out/
          cp -R result/pablo/* firebase/pablo/out/
          cp frontend/apps/pablo/.firebaserc firebase/pablo/
          cp frontend/apps/pablo/firebase.json firebase/pablo/
          cp frontend/apps/picasso/.firebaserc firebase/picasso/
          cp frontend/apps/picasso/firebase.json firebase/picasso/
          nix-env -iA nixpkgs.nodejs

      - name: Deploy Picasso on live channel
        uses: FirebaseExtended/action-hosting-deploy@0f248036885ae672f78587669fa2923f0ef6cac2
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PICASSO_WEB_APP }}
          projectId: picasso-f0d16
          entrypoint: firebase/picasso/
          channelId: live
      - name: Deploy Pablo on live channel
        uses: FirebaseExtended/action-hosting-deploy@0f248036885ae672f78587669fa2923f0ef6cac2
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PABLO_WEB_APP }}
          projectId: pablo-afa5d
          entrypoint: firebase/pablo/
          channelId: live

  nix-command-pr-comments:
    runs-on: ubuntu-latest
    needs:
      - check-nix
    name: "Nix command PR comments"

    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v1
        with:
          message: |
            ### Nix commands for this PR

            #### Make sure you have setup the Composable community cache:
            _(you only need to run it once on your machine)_
            ```bash
            nix-shell -p cachix --command "cachix use composable-community"
            ```

            #### Show all possible apps, shells and packages:
            ```
            nix flake show "github:ComposableFi/composable/${{ github.event.pull_request.head.sha }} --allow-import-from-derivation
            ```

            #### Run the Composable node alone:
            ```bash
            nix run "github:ComposableFi/composable/${{ github.event.pull_request.head.sha }}#composable-node" -L
            ```

            #### Spin up a local devnet:
            ```bash
            nix run "github:ComposableFi/composable/${{ github.event.pull_request.head.sha }}#devnet" -L --option sandbox relaxed --show-trace
            ```

            #### Spin up a local XCVM devnet:
            ```bash
            nix run "github:ComposableFi/composable/${{ github.event.pull_request.head.sha }}#devnet-xcvm-up" -L
            ```

            #### Are you on **macOS**, or do you not have [Nix](https://nixos.org/) installed? No worries, you can also run these commands in Docker like this:
            _(you only need to run the first command once on your machine)_
            ```bash
            docker volume create nix

            docker run --privileged --rm -v nix:/nix  -v /var/run/docker.sock:/var/run/docker.sock -it nixos/nix bash -c "nix-env -iA nixpkgs.cachix && cachix use composable-community && nix run github:ComposableFi/composable/${{ github.event.pull_request.head.sha }}#devnet-up -L --option cores 8 --extra-experimental-features nix-command --extra-experimental-features flakes"
            ```

            Note that the initial build may take about one hour if it has not been cached by our CI yet. Once it is cached, builds should take about one minute. We currently do not provide build caches for ARM machines such as M1 Macs, but building on ARM is supported.

          comment_includes: 'Nix commands for this PR'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
