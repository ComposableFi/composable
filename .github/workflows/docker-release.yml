name: "Community Release"

on:
  tags: 
    - '*'

jobs:
  check:
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
      - name: Cargo Check
        run: |
          rustup target add wasm32-unknown-unknown
          SKIP_WASM_BUILD=1 cargo check --all --benches
      - name: Cargo Check Benchmark
        run: |
          SKIP_WASM_BUILD=1 cargo check --features=runtime-benchmarks --workspace --release --exclude integration-tests
      - name: Picasso Runtime Build
        run: |
          cargo build --release -p picasso-runtime
  linters:
    name: Linters
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
          override: true
      - name: Install Rust components and targets
        run: |
          rustup target add wasm32-unknown-unknown
          rustup component add rustfmt --toolchain nightly-x86_64-unknown-linux-gnu
          rustup target add wasm32-unknown-unknown --toolchain nightly
      - name: Cargo fmt
        run: |
          cargo +nightly fmt -- --check
      - name: Hadolint
        env:
          HADOLINT_VERSION: v2.8.0
        run: |
          curl -L -o hadolint "https://github.com/hadolint/hadolint/releases/download/${HADOLINT_VERSION}/hadolint-Linux-x86_64"
          chmod +x hadolint
          ./hadolint --version
          total_exit_code=0
          while IFS= read -r file; do
            echo "=== $file ==="
            ./hadolint --config .hadolint.yaml $file || total_exit_code=$?
            echo ""
          done < <(find . -name "Dockerfile")
          exit $total_exit_code
      - name: Cargo clippy
        run: |
          cargo +nightly clippy -- -D warnings
      - name: Cargo udeps
        env:
          UDEPS_VERSION: v0.1.24
        run: |
          curl -L -O "https://github.com/est31/cargo-udeps/releases/download/${UDEPS_VERSION}/cargo-udeps-${UDEPS_VERSION}-x86_64-unknown-linux-gnu.tar.gz"
          tar xzf "cargo-udeps-${UDEPS_VERSION}-x86_64-unknown-linux-gnu.tar.gz"
          cp "cargo-udeps-${UDEPS_VERSION}-x86_64-unknown-linux-gnu/cargo-udeps" ~/.cargo/bin/
          rm -r "cargo-udeps-${UDEPS_VERSION}-x86_64-unknown-linux-gnu.tar.gz" "cargo-udeps-${UDEPS_VERSION}-x86_64-unknown-linux-gnu"
          cargo udeps --version
          total_exit_code=0
          while IFS= read -r crate; do
            echo "=== $crate ==="
            (cd "$crate"; SKIP_WASM_BUILD=1 cargo +nightly udeps -q --all-targets) || total_exit_code=$?
            echo ""
          done < <(find . -name "Cargo.toml" -not -path "./polkadot-launch/*" -not -path "./target/*" -exec dirname '{}' \;)
          exit $total_exit_code
  test:
    name: Unit Test
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Run Test
        run: |
          SKIP_WASM_BUILD=1 cargo test
          SKIP_WASM_BUILD=1 cargo clean -p picasso-runtime
          SKIP_WASM_BUILD=1 cargo clean -p composable
          
  build-and-publish:
    runs-on: 
        - self-hosted
        - linux
        - x64
        - sre
    steps:
    - uses: actions/checkout@v2
      with: 
        fetch-depth: 0

    - name: Set env
      run: |
        echo "RELEASE_VERSION=$(git tag --sort=committerdate | grep -E '^v[0-9]' | tail -1)" >> $GITHUB_ENV
    - name: Test
      run: |
        echo "${{ env.RELEASE_VERSION }}"

    - name: Build and Push Artifacts to gcloud
      run: |
          /home/runner/.cargo/bin/cargo build --release -p composable
          gsutil cp target/release/composable gs://composable-binaries/${{ env.RELEASE_VERSION }}/ 

    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}  

    - name: Build Docker image
      run: make containerize-release 
    - name:  Docker push
      run: make push-release
