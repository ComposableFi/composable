name: "Devnet Community Release"

on:
  push:
    branches:
      - devnet-image

jobs:
  deploy-devnet:
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    concurrency:
      group: deploy-devnet
      cancel-in-progress: false
    container:
      image: niteo/nixpkgs-nixos-21.11:ed02c2ba0384b2800db41333045a6fb781f12aac
    steps:
    - uses: actions/checkout@v2

    - name: Install Dependencies
      run: |
        nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs
        nix-channel --update
        nix-env -iA nixpkgs.python3 nixpkgs.rustup nixpkgs.sccache nixpkgs.jq nixpkgs.google-cloud-sdk nixpkgs.nix nixpkgs.neofetch
        nix --version
        rustup install stable
        rustup default stable
        rustup install nightly-2022-02-01
        rustup target add wasm32-unknown-unknown --toolchain nightly-2022-02-01
        neofetch

    - uses: cachix/cachix-action@v10
      with:
        name: composable-community
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: composable-community

    - name: Set env
      run: |
        # echo "RELEASE_VERSION=$GITHUB_SHA" >> $GITHUB_ENV
        echo "RELEASE_VERSION=4e9bbc92e45bcd60d7a92927769c5592efcb5525" >> $GITHUB_ENV

    # - name: Push artifact
    #   env:
    #     RUSTC_WRAPPER: sccache
    #     GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
    #   run: |
    #     nix-shell shell.nix --run "cargo build --release"
    #     nix-shell shell.nix --run "cargo doc --release"
    #     tar -czvf composable-picasso-${{ env.RELEASE_VERSION }}.tar.gz target/release/composable target/doc
    #     gsutil mv *.tar.gz gs://composable-binaries/community-releases/picasso/
    #     rm -rf target

    - name: Load state
      run: |
        cd nix

        echo $(cat devnet.json | jq --arg version "${{ env.RELEASE_VERSION }}" '.composable.version = $version' | jq --arg hash "$(nix-prefetch-url https://storage.googleapis.com/composable-binaries/community-releases/picasso/composable-picasso-${{ env.RELEASE_VERSION }}.tar.gz)" '.composable.hash = $hash') > devnet.json

        jq --null-input --arg client_email "$GCP_DEVNET_SERVICE_ACCOUNT" --arg project_id "$GCP_PROJECT_ID" --arg key "\"$GCP_DEVNET_SERVICE_ACCOUNT_KEY\"" '{ "project_id": $project_id, "private_key": ($key | fromjson), "client_email": $client_email }' > ops.json

        if gsutil -q stat $NIXOPS_STATE_URL/$NIXOPS_STATE;
        then
          gsutil cp $NIXOPS_STATE_URL/$NIXOPS_STATE $NIXOPS_STATE
        else
          nix develop .#deploy --impure --command nixops create -d devnet-gce
        fi
      env:
        NIXOPS_STATE_URL: "gs://composable-state"
        NIXOPS_STATE: "deployment.nixops"
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_DEVNET_SERVICE_ACCOUNT: ${{ secrets.GCP_DEVNET_SERVICE_ACCOUNT }}
        GCP_DEVNET_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_DEVNET_SERVICE_ACCOUNT_KEY }}

    - name: Deploy
      run: |
        cd nix
        echo $HOME
        echo $USER
        echo "Host *" > $HOME/.ssh/config
        echo " StrictHostKeyChecking no" >> $HOME/.ssh/config
        mkdir -p /root/.ssh
        echo "Host *" > /root/.ssh/config
        echo " StrictHostKeyChecking no" >> /root/.ssh/config
        nix develop .#deploy --impure --command nixops deploy --option sandbox false --check --confirm -d devnet-gce
      env:
        NIXOPS_STATE: "deployment.nixops"

    - name: Store state
      if: always()
      run: |
        cd nix
        gsutil cp $NIXOPS_STATE $NIXOPS_STATE_URL/
      env:
        NIXOPS_STATE: "deployment.nixops"
        NIXOPS_STATE_URL: "gs://composable-state"
