name: Release Pipeline
on:
  push:
    branches:
      - releases

env:
  GITHUB_TOKEN: ${{ secrets.COMPOSABLE_GITHUB_TOKEN }}
jobs:
  build-and-publish:
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    strategy:
      fail-fast: true
    steps:
      - name: Clean up
        continue-on-error: true
        run: |
          sudo chown -R $USER:$USER $GITHUB_WORKSPACE
          docker system prune --force --all --volumes

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install srtool
        run: |
          cargo install --git https://github.com/chevdor/srtool-cli
          cargo install --locked --git https://github.com/chevdor/subwasm --tag v0.16.1

      # Attempt to build runtimes whose sources have changed. (runtime/picasso, runtime/dali, runtime/composable)
      - name: Runtime wasm builds
        id: runtime_release
        run: |
          .maintain/runtime_release.sh

      # This would draft a release note presenting a list of new prs that have been added
      # in between this commit and the previous tag.
      - uses: release-drafter/release-drafter@v5
        id: release_drafter

      - name: Set Permission
        continue-on-error: true
        run: |
          sudo su runner && sudo chmod -R 777  /home/runner/_work/_tool/node/

      - uses: actions/setup-node@v2
        with:
          node-version: "16"

      # This step is very critical as it adds the subwasm metadata of the runtimes that have been built
      # to the release draft. The previous step (runtime_release) generates this metadata and appends it to
      # a temporary file release.md. This step takes that subwasm metadata and appends it to the release draft
      # that has already been created by release drafter.
      - name: Add runtime metadata to release body
        run: |
          cd scripts/github && npm install
          # interpolate release-drafter output with subwasm output.
          printf "\n%s" "${{ steps.release_drafter.outputs.body }}" >> $GITHUB_WORKSPACE/release.md
          # Uploads release body to github.
          npm run update-release-body -- --id=${{ steps.release_drafter.outputs.id  }} --repo=composableFi/composable --body="$GITHUB_WORKSPACE/release.md"
          cd $GITHUB_WORKSPACE

      # The following actions will attempt to append the built wasm binaries to the release draft.
      # If the proper env variables have been set by the runtime_release step.
      - name: Upload Dali wasm
        id: upload-dali-wasm
        if: env.dali_wasm == 1
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release_drafter.outputs.upload_url }}
          asset_path: ./runtime/dali/target/srtool/release/wbuild/dali-runtime/dali_runtime.compact.compressed.wasm
          asset_name: dali_runtime.wasm
          asset_content_type: application/octet-stream

      - name: Upload Picasso wasm
        id: upload-picasso-wasm
        if: env.picasso_wasm == 1
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release_drafter.outputs.upload_url }}
          asset_path: ./runtime/picasso/target/srtool/release/wbuild/picasso-runtime/picasso_runtime.compact.compressed.wasm
          asset_name: picasso_runtime.wasm
          asset_content_type: application/octet-stream

      - name: Upload Composable wasm
        id: upload-composable-wasm
        if: env.composable_wasm == 1
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release_drafter.outputs.upload_url }}
          asset_path: ./runtime/composable/target/srtool/release/wbuild/composable-runtime/composable_runtime.compact.compressed.wasm
          asset_name: composable_runtime.wasm
          asset_content_type: application/octet-stream

      # This will build a new client binary if there's a diff in the client source code (node/, src/)
      # between this commit and the previous tag.
      # DO NOT REMOVE
      - name: ðŸ”¨ Build Composable Binary
        env:
          # this is so that the binary version corresponds with the release tag.
          RELEASE_VERSION: ${{ steps.release_drafter.outputs.tag_name }}
        run: |
          RELEASE_VERSION=${RELEASE_VERSION:1} make version
          .maintain/client_release.sh

      # This uploads the client binary built in the previous step to the release draft
      # DO NOT REMOVE
      - name: Upload Composable Node Binaries
        id: upload-composable-binary
        # if the previous step didn't find a diff, this env won't be set
        # and hence this action won't run.
        if: env.client_release == 1
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release_drafter.outputs.upload_url }}
          asset_path: ./target/release/composable
          asset_name: composable
          asset_content_type: application/octet-stream
