name: Release Pipeline
on:
  push:
    branches:
      - releases
env:
  GITHUB_TOKEN: ${{ secrets.COMPOSABLE_GITHUB_TOKEN }}
jobs:
  build-and-publish:
    runs-on:
      - self-hosted
      - linux
      - x64
      - sre
    strategy:
      fail-fast: true
    steps:
      - name: Clean up
        continue-on-error: true
        run: |
          sudo chown -R $USER:$USER $GITHUB_WORKSPACE
          docker system prune --force --all --volumes

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install srtool
        run: |
          cargo install --git https://github.com/chevdor/srtool-cli
          cargo install --locked --git https://github.com/chevdor/subwasm --tag v0.16.1

#      - name: Runtime wasm builds
#        id: runtime_release
#        run: |
#          .maintain/runtime_release.sh

      - uses: release-drafter/release-drafter@v5
        id: release_drafter

      - name: Set env
        env:
          RELEASE_VERSION: ${{ steps.release_drafter.outputs.tag_name }}
        run: |
          RELEASE_VERSION="${RELEASE_VERSION:1}"
          echo $RELEASE_VERSION
          make version

      - name: Set Permission
        continue-on-error: true
        run: |
          sudo chown -R runner:runner /home/runner/_work

      - uses: actions/setup-node@v2
        with:
         node-version: "16"

#      - name: Add runtime metadata to release body
#        run: |
#          cd scripts/github && npm install
#          printf "\n%s" "${{ steps.release_drafter.outputs.body }}" >> $GITHUB_WORKSPACE/release.md
#          npm run update-release-body -- --id=${{ steps.release_drafter.outputs.id  }} --repo=composableFi/composable --body="$GITHUB_WORKSPACE/release.md"
#          cd $GITHUB_WORKSPACE

      - name: Upload Dali wasm
        id: upload-dali-wasm
        if: env.dali_wasm == 1
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release_drafter.outputs.upload_url }}
          asset_path: ./runtime/dali/target/srtool/release/wbuild/dali-runtime/dali_runtime.compact.wasm
          asset_name: dali_runtime.compact.wasm
          asset_content_type: application/octet-stream

      - name: Upload Picasso wasm
        id: upload-picasso-wasm
        if: env.picasso_wasm == 1
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release_drafter.outputs.upload_url }}
          asset_path: ./runtime/picasso/target/srtool/release/wbuild/picasso-runtime/picasso_runtime.compact.wasm
          asset_name: picasso_runtime.compact.wasm
          asset_content_type: application/octet-stream

      - name: Upload Composable wasm
        id: upload-composable-wasm
        if: env.composable_wasm == 1
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release_drafter.outputs.upload_url }}
          asset_path: ./runtime/composable/target/srtool/release/wbuild/composable-runtime/composable_runtime.compact.wasm
          asset_name: composable_runtime.compact.wasm
          asset_content_type: application/octet-stream

      - name: ðŸ”¨ Build Composable Binary
        run: |
          .maintain/client_release.sh

      - name: Upload Composable Node Binaries
        id: upload-composable-binary
#        if: env.client_release == 1
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release_drafter.outputs.upload_url }}
          asset_path: ./target/release/composable
          asset_name: composable
          asset_content_type: application/octet-stream