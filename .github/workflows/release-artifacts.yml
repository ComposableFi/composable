name: release-artifacts
on:
  push:
    tags:
      - 'release-v[0-9]+\.[0-9]+\.[0-9]+'

env:
  NIX_VERSION: nix-2.13.2
  NIXPKGS_CHANNEL: nixos-22.11
  CACHIX_COMPOSABLE: composable-community
  CACHIX_COMPRESSION_LEVEL: 16
  CACHIX_JOBS: 8
  CACHIX_COMPRESSION_METHOD: zstd
  CACHIX_NAME: composable-community
  DOCKER_REGISTRY_NAME: composablefi
  DOCKER_USER_OPTION: '$UID:$GID'

jobs:
  release-artifacts:
    name: "release-artifacts"
    runs-on:
      - self-hosted
      - x64-monster
    permissions: 
      pull-requests: write
      contents: write      
    concurrency:
      group: release-artifacts-${{ github.ref }}
      cancel-in-progress: true      
    steps:
      - name: Set up Nix
        uses: cachix/install-nix-action@daddc62a2e67d1decb56e028c9fa68344b9b7c2a # v18
        with:
          install_url: https://releases.nixos.org/nix/${{ env.NIX_VERSION }}/install
          nix_path: nixpkgs=channel:${{ env.NIXPKGS_CHANNEL }}
          extra_nix_config: |
            sandbox = relaxed
            narinfo-cache-negative-ttl = 0      
            system-features = kvm          
      - name: Set up Cachix
        uses: cachix/cachix-action@298387a7aea14d6564aa5d6ead79272878339c8b # v12
        with:
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: ${{ env.CACHIX_NAME }}
      - name: Add tools needed for non-nix steps
        run: |  
          nix-channel --add https://nixos.org/channels/${{ env.NIXPKGS_CHANNEL }} nixpkgs
          nix-channel --update
          nix-env -iA nixpkgs.cachix nixpkgs.git nixpkgs.git-lfs nixpkgs.docker nixpkgs.coreutils    
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure sccache env var
        run: | 
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
	        echo â€œSCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build runtime
        run: |
          cachix watch-exec --compression-level $CACHIX_COMPRESSION_LEVEL $CACHIX_COMPOSABLE nix -- build .#picasso-runtime
          cachix watch-exec --compression-level $CACHIX_COMPRESSION_LEVEL $CACHIX_COMPOSABLE nix -- build .#composable-runtime
          cachix watch-exec --compression-level $CACHIX_COMPRESSION_LEVEL $CACHIX_COMPOSABLE nix -- build .#picasso-testfast-runtime
          cachix watch-exec --compression-level $CACHIX_COMPRESSION_LEVEL $CACHIX_COMPOSABLE nix -- build .#composable-testfast-runtime
          cachix watch-exec --compression-level $CACHIX_COMPRESSION_LEVEL $CACHIX_COMPOSABLE nix -- build .#composable-node
          cachix watch-exec --compression-level $CACHIX_COMPRESSION_LEVEL $CACHIX_COMPOSABLE nix -- build .#devnet-image
          nix run .#generate-release-artifacts --print-build-logs
          echo "COMPOSABLE_VERSION=$(nix eval --raw .#composable-node.version)" >> $GITHUB_ENV

      - name: Release Docker image
        run: |
          docker load --input release-artifacts/composable-image
          docker tag composable:latest "${{ env.DOCKER_REGISTRY_NAME }}/composable:v${{ env.COMPOSABLE_VERSION }}"
          docker tag composable:latest "${{ env.DOCKER_REGISTRY_NAME }}/composable:latest-prerelease"
          docker push "${{ env.DOCKER_REGISTRY_NAME }}/composable:v${{ env.COMPOSABLE_VERSION }}"
          docker push "${{ env.DOCKER_REGISTRY_NAME }}/composable:latest-prerelease"

          docker load --input release-artifacts/devnet-image
          docker tag devnet:latest "${{ env.DOCKER_REGISTRY_NAME }}/devnet:v${{ env.COMPOSABLE_VERSION }}"
          docker tag devnet:latest "${{ env.DOCKER_REGISTRY_NAME }}/devnet:latest-prerelease"
          docker push "${{ env.DOCKER_REGISTRY_NAME }}/devnet:v${{ env.COMPOSABLE_VERSION }}"
          docker push "${{ env.DOCKER_REGISTRY_NAME }}/devnet:latest-prerelease"                    

      - name: Release artifacts
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: true
          fail_on_unmatched_files: true
          generate_release_notes: true
          body_path: release-artifacts/release.txt
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          target_commitish: ${{ github.sha }}
          files: |
            release-artifacts/to-upload/*
