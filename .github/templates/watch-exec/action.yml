name: watch-exec
description: Calls commands within a cachix watch-exec wrapper.

inputs:
  command:
    description: "The shell command to execute within a watch-exec context"
    required: true
  working-directory: 
    description: "Directory to execute command"
    required: false

runs:
  using: "composite"
  steps:
    - run: |
        # Marker status code in case of network failure.
        STATUS_TRANSIENT_FAILURE=200
        # Maximum retries in case of network failures.
        RETRIES=5               
        INPUTS_COMMAND="${{ inputs.command }}"        
        CACHIX="cachix watch-exec --jobs 16 --compression-level ${CACHIX_COMPRESSION_LEVEL?} composable-community"
        HAPPY_CMD="${CACHIX?} ${INPUTS_COMMAND?} --no-http2 --no-update-lock-file --show-trace -L 2> >(tee --append $LOG_FILE >&2)" 
        SLOW_CMD="${CACHIX?} ${INPUTS_COMMAND?} --no-http2 --no-update-lock-file --show-trace --fallback -L 2> >(tee --append $LOG_FILE >&2)" 
        
        printf "will try execute '${HAPPY_CMD?}'"

        # Marker that a network error occurred.
        BAD="HTTP error 200 ('')"  
        LOG_FILE=/tmp/out.log

        function run() {
            eval "${HAPPY_CMD?}"
            STATUS_CODE=$?
            if [[ $STATUS_CODE -ne 0 ]] ; then
                C=$(grep -c "HTTP error 200" $LOG_FILE)
                if [[ $C -gt 0 ]]; then 
                    STATUS_CODE=$STATUS_TRANSIENT_FAILURE 
                fi
            fi
        }

        try=0
        while [[ "${try?}" -le "${RETRIES?}" ]]; do
            if [[ "${try?}" -eq "${RETRIES?}" ]] ; then
                eval "${SLOW_CMD?}"
                STATUS_CODE=$?
                break
            fi     
                   
            run
            if [[ $STATUS_CODE -eq 0 ]] ; then
              break
            fi

            if [[ $STATUS_CODE -ne 0 ]] && [[ $STATUS_CODE -ne $STATUS_TRANSIENT_FAILURE ]] ; then
                break
            fi
            
            ((try=try+1))
        done

        exit $((STATUS_CODE))    
      shell: "bash"
      working-directory: ${{ inputs.working-directory }}
