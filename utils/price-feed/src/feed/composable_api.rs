#[allow(dead_code, unused_imports, non_camel_case_types)]
pub mod api {
	use super::api as root_mod;
	pub static PALLETS: [&str; 51usize] = [
		"System",
		"Timestamp",
		"Sudo",
		"RandomnessCollectiveFlip",
		"TransactionPayment",
		"Indices",
		"Balances",
		"Identity",
		"Multisig",
		"ParachainSystem",
		"ParachainInfo",
		"Authorship",
		"CollatorSelection",
		"Session",
		"Aura",
		"AuraExt",
		"Council",
		"CouncilMembership",
		"Treasury",
		"Democracy",
		"Scheduler",
		"Utility",
		"Preimage",
		"Proxy",
		"XcmpQueue",
		"RelayerXcm",
		"CumulusXcm",
		"DmpQueue",
		"XTokens",
		"UnknownTokens",
		"Tokens",
		"Oracle",
		"CurrencyFactory",
		"Vault",
		"AssetsRegistry",
		"GovernanceRegistry",
		"Assets",
		"CrowdloanRewards",
		"Vesting",
		"BondedFinance",
		"DutchAuction",
		"Mosaic",
		"Liquidations",
		"Lending",
		"Pablo",
		"DexRouter",
		"StakingRewards",
		"CallFilter",
		"IbcPing",
		"Transfer",
		"Ibc",
	];
	#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
	pub enum Event {
		#[codec(index = 0)]
		System(system::Event),
		#[codec(index = 2)]
		Sudo(sudo::Event),
		#[codec(index = 5)]
		Indices(indices::Event),
		#[codec(index = 6)]
		Balances(balances::Event),
		#[codec(index = 7)]
		Identity(identity::Event),
		#[codec(index = 8)]
		Multisig(multisig::Event),
		#[codec(index = 10)]
		ParachainSystem(parachain_system::Event),
		#[codec(index = 21)]
		CollatorSelection(collator_selection::Event),
		#[codec(index = 22)]
		Session(session::Event),
		#[codec(index = 30)]
		Council(council::Event),
		#[codec(index = 31)]
		CouncilMembership(council_membership::Event),
		#[codec(index = 32)]
		Treasury(treasury::Event),
		#[codec(index = 33)]
		Democracy(democracy::Event),
		#[codec(index = 34)]
		Scheduler(scheduler::Event),
		#[codec(index = 35)]
		Utility(utility::Event),
		#[codec(index = 36)]
		Preimage(preimage::Event),
		#[codec(index = 37)]
		Proxy(proxy::Event),
		#[codec(index = 40)]
		XcmpQueue(xcmp_queue::Event),
		#[codec(index = 41)]
		RelayerXcm(relayer_xcm::Event),
		#[codec(index = 42)]
		CumulusXcm(cumulus_xcm::Event),
		#[codec(index = 43)]
		DmpQueue(dmp_queue::Event),
		#[codec(index = 44)]
		XTokens(x_tokens::Event),
		#[codec(index = 45)]
		UnknownTokens(unknown_tokens::Event),
		#[codec(index = 51)]
		Tokens(tokens::Event),
		#[codec(index = 52)]
		Oracle(oracle::Event),
		#[codec(index = 53)]
		CurrencyFactory(currency_factory::Event),
		#[codec(index = 54)]
		Vault(vault::Event),
		#[codec(index = 55)]
		AssetsRegistry(assets_registry::Event),
		#[codec(index = 56)]
		GovernanceRegistry(governance_registry::Event),
		#[codec(index = 58)]
		CrowdloanRewards(crowdloan_rewards::Event),
		#[codec(index = 59)]
		Vesting(vesting::Event),
		#[codec(index = 60)]
		BondedFinance(bonded_finance::Event),
		#[codec(index = 61)]
		DutchAuction(dutch_auction::Event),
		#[codec(index = 62)]
		Mosaic(mosaic::Event),
		#[codec(index = 63)]
		Liquidations(liquidations::Event),
		#[codec(index = 64)]
		Lending(lending::Event),
		#[codec(index = 65)]
		Pablo(pablo::Event),
		#[codec(index = 66)]
		DexRouter(dex_router::Event),
		#[codec(index = 67)]
		StakingRewards(staking_rewards::Event),
		#[codec(index = 100)]
		CallFilter(call_filter::Event),
		#[codec(index = 101)]
		IbcPing(ibc_ping::Event),
		#[codec(index = 102)]
		Transfer(transfer::Event),
		#[codec(index = 103)]
		Ibc(ibc::Event),
	}
	pub mod system {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct FillBlock {
				pub ratio: runtime_types::sp_arithmetic::per_things::Perbill,
			}
			impl ::subxt::Call for FillBlock {
				const PALLET: &'static str = "System";
				const FUNCTION: &'static str = "fill_block";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Remark {
				pub remark: ::std::vec::Vec<::core::primitive::u8>,
			}
			impl ::subxt::Call for Remark {
				const PALLET: &'static str = "System";
				const FUNCTION: &'static str = "remark";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct SetHeapPages {
				pub pages: ::core::primitive::u64,
			}
			impl ::subxt::Call for SetHeapPages {
				const PALLET: &'static str = "System";
				const FUNCTION: &'static str = "set_heap_pages";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetCode {
				pub code: ::std::vec::Vec<::core::primitive::u8>,
			}
			impl ::subxt::Call for SetCode {
				const PALLET: &'static str = "System";
				const FUNCTION: &'static str = "set_code";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetCodeWithoutChecks {
				pub code: ::std::vec::Vec<::core::primitive::u8>,
			}
			impl ::subxt::Call for SetCodeWithoutChecks {
				const PALLET: &'static str = "System";
				const FUNCTION: &'static str = "set_code_without_checks";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetStorage {
				pub items: ::std::vec::Vec<(
					::std::vec::Vec<::core::primitive::u8>,
					::std::vec::Vec<::core::primitive::u8>,
				)>,
			}
			impl ::subxt::Call for SetStorage {
				const PALLET: &'static str = "System";
				const FUNCTION: &'static str = "set_storage";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct KillStorage {
				pub keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
			}
			impl ::subxt::Call for KillStorage {
				const PALLET: &'static str = "System";
				const FUNCTION: &'static str = "kill_storage";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct KillPrefix {
				pub prefix: ::std::vec::Vec<::core::primitive::u8>,
				pub subkeys: ::core::primitive::u32,
			}
			impl ::subxt::Call for KillPrefix {
				const PALLET: &'static str = "System";
				const FUNCTION: &'static str = "kill_prefix";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RemarkWithEvent {
				pub remark: ::std::vec::Vec<::core::primitive::u8>,
			}
			impl ::subxt::Call for RemarkWithEvent {
				const PALLET: &'static str = "System";
				const FUNCTION: &'static str = "remark_with_event";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "A dispatch that will fill the block weight up to the given ratio."]
				pub fn fill_block(
					&self,
					ratio: runtime_types::sp_arithmetic::per_things::Perbill,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						FillBlock,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<FillBlock>()?
					};
					if runtime_call_hash ==
						[
							228u8, 117u8, 251u8, 95u8, 47u8, 56u8, 32u8, 177u8, 191u8, 72u8, 75u8,
							23u8, 193u8, 175u8, 227u8, 218u8, 127u8, 94u8, 114u8, 110u8, 215u8,
							61u8, 162u8, 102u8, 73u8, 89u8, 218u8, 148u8, 59u8, 73u8, 59u8, 149u8,
						] {
						let call = FillBlock { ratio };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Make some on-chain remark."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(1)`"]
				#[doc = "# </weight>"]
				pub fn remark(
					&self,
					remark: ::std::vec::Vec<::core::primitive::u8>,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Remark, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Remark>()?
					};
					if runtime_call_hash ==
						[
							186u8, 79u8, 33u8, 199u8, 216u8, 115u8, 19u8, 146u8, 220u8, 174u8,
							98u8, 61u8, 179u8, 230u8, 40u8, 70u8, 22u8, 251u8, 77u8, 62u8, 133u8,
							80u8, 186u8, 70u8, 135u8, 172u8, 178u8, 241u8, 69u8, 106u8, 235u8,
							140u8,
						] {
						let call = Remark { remark };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Set the number of pages in the WebAssembly environment's heap."]
				pub fn set_heap_pages(
					&self,
					pages: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetHeapPages,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetHeapPages>()?
					};
					if runtime_call_hash ==
						[
							77u8, 138u8, 122u8, 55u8, 179u8, 101u8, 60u8, 137u8, 173u8, 39u8, 28u8,
							36u8, 237u8, 243u8, 232u8, 162u8, 76u8, 176u8, 135u8, 58u8, 60u8,
							177u8, 105u8, 136u8, 94u8, 53u8, 26u8, 31u8, 41u8, 156u8, 228u8, 241u8,
						] {
						let call = SetHeapPages { pages };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Set the new runtime code."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"]
				#[doc = "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is"]
				#[doc = "  expensive)."]
				#[doc = "- 1 storage write (codec `O(C)`)."]
				#[doc = "- 1 digest item."]
				#[doc = "- 1 event."]
				#[doc = "The weight of this function is dependent on the runtime, but generally this is very"]
				#[doc = "expensive. We will treat this as a full block."]
				#[doc = "# </weight>"]
				pub fn set_code(
					&self,
					code: ::std::vec::Vec<::core::primitive::u8>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetCode,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetCode>()?
					};
					if runtime_call_hash ==
						[
							35u8, 75u8, 103u8, 203u8, 91u8, 141u8, 77u8, 95u8, 37u8, 157u8, 107u8,
							240u8, 54u8, 242u8, 245u8, 205u8, 104u8, 165u8, 177u8, 37u8, 86u8,
							197u8, 28u8, 202u8, 121u8, 159u8, 18u8, 204u8, 237u8, 117u8, 141u8,
							131u8,
						] {
						let call = SetCode { code };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Set the new runtime code without doing any checks of the given `code`."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(C)` where `C` length of `code`"]
				#[doc = "- 1 storage write (codec `O(C)`)."]
				#[doc = "- 1 digest item."]
				#[doc = "- 1 event."]
				#[doc = "The weight of this function is dependent on the runtime. We will treat this as a full"]
				#[doc = "block. # </weight>"]
				pub fn set_code_without_checks(
					&self,
					code: ::std::vec::Vec<::core::primitive::u8>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetCodeWithoutChecks,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetCodeWithoutChecks>()?
					};
					if runtime_call_hash ==
						[
							150u8, 148u8, 119u8, 129u8, 77u8, 216u8, 135u8, 187u8, 127u8, 24u8,
							238u8, 15u8, 227u8, 229u8, 191u8, 217u8, 106u8, 129u8, 149u8, 79u8,
							154u8, 78u8, 53u8, 159u8, 89u8, 69u8, 103u8, 197u8, 93u8, 161u8, 134u8,
							17u8,
						] {
						let call = SetCodeWithoutChecks { code };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Set some items of storage."]
				pub fn set_storage(
					&self,
					items: ::std::vec::Vec<(
						::std::vec::Vec<::core::primitive::u8>,
						::std::vec::Vec<::core::primitive::u8>,
					)>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetStorage,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetStorage>()?
					};
					if runtime_call_hash ==
						[
							197u8, 12u8, 119u8, 205u8, 152u8, 103u8, 211u8, 170u8, 146u8, 253u8,
							25u8, 56u8, 180u8, 146u8, 74u8, 75u8, 38u8, 108u8, 212u8, 154u8, 23u8,
							22u8, 148u8, 175u8, 107u8, 186u8, 222u8, 13u8, 149u8, 132u8, 204u8,
							217u8,
						] {
						let call = SetStorage { items };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Kill some items from storage."]
				pub fn kill_storage(
					&self,
					keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						KillStorage,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<KillStorage>()?
					};
					if runtime_call_hash ==
						[
							154u8, 115u8, 185u8, 20u8, 126u8, 90u8, 222u8, 131u8, 199u8, 57u8,
							184u8, 226u8, 43u8, 245u8, 161u8, 176u8, 194u8, 123u8, 139u8, 97u8,
							97u8, 94u8, 47u8, 64u8, 204u8, 96u8, 190u8, 94u8, 216u8, 237u8, 69u8,
							51u8,
						] {
						let call = KillStorage { keys };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Kill all storage items with a key that starts with the given prefix."]
				#[doc = ""]
				#[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
				#[doc = "the prefix we are removing to accurately calculate the weight of this function."]
				pub fn kill_prefix(
					&self,
					prefix: ::std::vec::Vec<::core::primitive::u8>,
					subkeys: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						KillPrefix,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<KillPrefix>()?
					};
					if runtime_call_hash ==
						[
							214u8, 101u8, 191u8, 241u8, 1u8, 241u8, 144u8, 116u8, 246u8, 199u8,
							159u8, 249u8, 155u8, 164u8, 220u8, 221u8, 75u8, 33u8, 204u8, 3u8,
							255u8, 201u8, 187u8, 238u8, 181u8, 213u8, 41u8, 105u8, 234u8, 120u8,
							202u8, 115u8,
						] {
						let call = KillPrefix { prefix, subkeys };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Make some on-chain remark and emit event."]
				pub fn remark_with_event(
					&self,
					remark: ::std::vec::Vec<::core::primitive::u8>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RemarkWithEvent,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RemarkWithEvent>()?
					};
					if runtime_call_hash ==
						[
							171u8, 82u8, 75u8, 237u8, 69u8, 197u8, 223u8, 125u8, 123u8, 51u8,
							241u8, 35u8, 202u8, 210u8, 227u8, 109u8, 1u8, 241u8, 255u8, 63u8, 33u8,
							115u8, 156u8, 239u8, 97u8, 76u8, 193u8, 35u8, 74u8, 199u8, 43u8, 255u8,
						] {
						let call = RemarkWithEvent { remark };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "Event for the System pallet."]
		pub type Event = runtime_types::frame_system::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An extrinsic completed successfully."]
			pub struct ExtrinsicSuccess {
				pub dispatch_info: runtime_types::frame_support::weights::DispatchInfo,
			}
			impl ::subxt::Event for ExtrinsicSuccess {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "ExtrinsicSuccess";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An extrinsic failed."]
			pub struct ExtrinsicFailed {
				pub dispatch_error: runtime_types::sp_runtime::DispatchError,
				pub dispatch_info: runtime_types::frame_support::weights::DispatchInfo,
			}
			impl ::subxt::Event for ExtrinsicFailed {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "ExtrinsicFailed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "`:code` was updated."]
			pub struct CodeUpdated;
			impl ::subxt::Event for CodeUpdated {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "CodeUpdated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A new account was created."]
			pub struct NewAccount {
				pub account: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Event for NewAccount {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "NewAccount";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An account was reaped."]
			pub struct KilledAccount {
				pub account: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Event for KilledAccount {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "KilledAccount";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "On on-chain remark happened."]
			pub struct Remarked {
				pub sender: ::subxt::sp_core::crypto::AccountId32,
				pub hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Event for Remarked {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "Remarked";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct Account<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::StorageEntry for Account<'_> {
				const PALLET: &'static str = "System";
				const STORAGE: &'static str = "Account";
				type Value = runtime_types::frame_system::AccountInfo<
					::core::primitive::u32,
					runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct ExtrinsicCount;
			impl ::subxt::StorageEntry for ExtrinsicCount {
				const PALLET: &'static str = "System";
				const STORAGE: &'static str = "ExtrinsicCount";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct BlockWeight;
			impl ::subxt::StorageEntry for BlockWeight {
				const PALLET: &'static str = "System";
				const STORAGE: &'static str = "BlockWeight";
				type Value =
					runtime_types::frame_support::weights::PerDispatchClass<::core::primitive::u64>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct AllExtrinsicsLen;
			impl ::subxt::StorageEntry for AllExtrinsicsLen {
				const PALLET: &'static str = "System";
				const STORAGE: &'static str = "AllExtrinsicsLen";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct BlockHash<'a>(pub &'a ::core::primitive::u32);
			impl ::subxt::StorageEntry for BlockHash<'_> {
				const PALLET: &'static str = "System";
				const STORAGE: &'static str = "BlockHash";
				type Value = ::subxt::sp_core::H256;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct ExtrinsicData<'a>(pub &'a ::core::primitive::u32);
			impl ::subxt::StorageEntry for ExtrinsicData<'_> {
				const PALLET: &'static str = "System";
				const STORAGE: &'static str = "ExtrinsicData";
				type Value = ::std::vec::Vec<::core::primitive::u8>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct Number;
			impl ::subxt::StorageEntry for Number {
				const PALLET: &'static str = "System";
				const STORAGE: &'static str = "Number";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct ParentHash;
			impl ::subxt::StorageEntry for ParentHash {
				const PALLET: &'static str = "System";
				const STORAGE: &'static str = "ParentHash";
				type Value = ::subxt::sp_core::H256;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Digest;
			impl ::subxt::StorageEntry for Digest {
				const PALLET: &'static str = "System";
				const STORAGE: &'static str = "Digest";
				type Value = runtime_types::sp_runtime::generic::digest::Digest;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Events;
			impl ::subxt::StorageEntry for Events {
				const PALLET: &'static str = "System";
				const STORAGE: &'static str = "Events";
				type Value = ::std::vec::Vec<
					runtime_types::frame_system::EventRecord<
						runtime_types::dali_runtime::Event,
						::subxt::sp_core::H256,
					>,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct EventCount;
			impl ::subxt::StorageEntry for EventCount {
				const PALLET: &'static str = "System";
				const STORAGE: &'static str = "EventCount";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct EventTopics<'a>(pub &'a ::subxt::sp_core::H256);
			impl ::subxt::StorageEntry for EventTopics<'_> {
				const PALLET: &'static str = "System";
				const STORAGE: &'static str = "EventTopics";
				type Value = ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct LastRuntimeUpgrade;
			impl ::subxt::StorageEntry for LastRuntimeUpgrade {
				const PALLET: &'static str = "System";
				const STORAGE: &'static str = "LastRuntimeUpgrade";
				type Value = runtime_types::frame_system::LastRuntimeUpgradeInfo;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct UpgradedToU32RefCount;
			impl ::subxt::StorageEntry for UpgradedToU32RefCount {
				const PALLET: &'static str = "System";
				const STORAGE: &'static str = "UpgradedToU32RefCount";
				type Value = ::core::primitive::bool;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct UpgradedToTripleRefCount;
			impl ::subxt::StorageEntry for UpgradedToTripleRefCount {
				const PALLET: &'static str = "System";
				const STORAGE: &'static str = "UpgradedToTripleRefCount";
				type Value = ::core::primitive::bool;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct ExecutionPhase;
			impl ::subxt::StorageEntry for ExecutionPhase {
				const PALLET: &'static str = "System";
				const STORAGE: &'static str = "ExecutionPhase";
				type Value = runtime_types::frame_system::Phase;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The full account information for a particular account ID."]
				pub fn account(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::frame_system::AccountInfo<
							::core::primitive::u32,
							runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Account>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								224u8, 184u8, 2u8, 14u8, 38u8, 177u8, 223u8, 98u8, 223u8, 15u8,
								130u8, 23u8, 212u8, 69u8, 61u8, 165u8, 171u8, 61u8, 171u8, 57u8,
								88u8, 71u8, 168u8, 172u8, 54u8, 91u8, 109u8, 231u8, 169u8, 167u8,
								195u8, 46u8,
							] {
							let entry = Account(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The full account information for a particular account ID."]
				pub fn account_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Account<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Account>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								224u8, 184u8, 2u8, 14u8, 38u8, 177u8, 223u8, 98u8, 223u8, 15u8,
								130u8, 23u8, 212u8, 69u8, 61u8, 165u8, 171u8, 61u8, 171u8, 57u8,
								88u8, 71u8, 168u8, 172u8, 54u8, 91u8, 109u8, 231u8, 169u8, 167u8,
								195u8, 46u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Total extrinsics count for the current block."]
				pub fn extrinsic_count(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::core::primitive::u32>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ExtrinsicCount>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								223u8, 60u8, 201u8, 120u8, 36u8, 44u8, 180u8, 210u8, 242u8, 53u8,
								222u8, 154u8, 123u8, 176u8, 249u8, 8u8, 225u8, 28u8, 232u8, 4u8,
								136u8, 41u8, 151u8, 82u8, 189u8, 149u8, 49u8, 166u8, 139u8, 9u8,
								163u8, 231u8,
							] {
							let entry = ExtrinsicCount;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The current weight for the block."]
				pub fn block_weight(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::frame_support::weights::PerDispatchClass<
							::core::primitive::u64,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<BlockWeight>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								2u8, 236u8, 190u8, 174u8, 244u8, 98u8, 194u8, 168u8, 89u8, 208u8,
								7u8, 45u8, 175u8, 171u8, 177u8, 121u8, 215u8, 190u8, 184u8, 195u8,
								49u8, 133u8, 44u8, 1u8, 181u8, 215u8, 89u8, 84u8, 255u8, 16u8,
								57u8, 152u8,
							] {
							let entry = BlockWeight;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Total length (in bytes) for all extrinsics put together, for the current block."]
				pub fn all_extrinsics_len(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::core::primitive::u32>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AllExtrinsicsLen>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								202u8, 145u8, 209u8, 225u8, 40u8, 220u8, 174u8, 74u8, 93u8, 164u8,
								254u8, 248u8, 254u8, 192u8, 32u8, 117u8, 96u8, 149u8, 53u8, 145u8,
								219u8, 64u8, 234u8, 18u8, 217u8, 200u8, 203u8, 141u8, 145u8, 28u8,
								134u8, 60u8,
							] {
							let entry = AllExtrinsicsLen;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Map of block numbers to block hashes."]
				pub fn block_hash(
					&self,
					_0: &'a ::core::primitive::u32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::subxt::sp_core::H256, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<BlockHash>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								24u8, 99u8, 146u8, 142u8, 205u8, 166u8, 4u8, 32u8, 218u8, 213u8,
								24u8, 236u8, 45u8, 116u8, 145u8, 204u8, 27u8, 141u8, 169u8, 249u8,
								111u8, 141u8, 37u8, 136u8, 45u8, 73u8, 167u8, 217u8, 118u8, 206u8,
								246u8, 120u8,
							] {
							let entry = BlockHash(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Map of block numbers to block hashes."]
				pub fn block_hash_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, BlockHash<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<BlockHash>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								24u8, 99u8, 146u8, 142u8, 205u8, 166u8, 4u8, 32u8, 218u8, 213u8,
								24u8, 236u8, 45u8, 116u8, 145u8, 204u8, 27u8, 141u8, 169u8, 249u8,
								111u8, 141u8, 37u8, 136u8, 45u8, 73u8, 167u8, 217u8, 118u8, 206u8,
								246u8, 120u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
				pub fn extrinsic_data(
					&self,
					_0: &'a ::core::primitive::u32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::core::primitive::u8>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ExtrinsicData>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								210u8, 224u8, 211u8, 186u8, 118u8, 210u8, 185u8, 194u8, 238u8,
								211u8, 254u8, 73u8, 67u8, 184u8, 31u8, 229u8, 168u8, 125u8, 98u8,
								23u8, 241u8, 59u8, 49u8, 86u8, 126u8, 9u8, 114u8, 163u8, 160u8,
								62u8, 50u8, 67u8,
							] {
							let entry = ExtrinsicData(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
				pub fn extrinsic_data_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, ExtrinsicData<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ExtrinsicData>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								210u8, 224u8, 211u8, 186u8, 118u8, 210u8, 185u8, 194u8, 238u8,
								211u8, 254u8, 73u8, 67u8, 184u8, 31u8, 229u8, 168u8, 125u8, 98u8,
								23u8, 241u8, 59u8, 49u8, 86u8, 126u8, 9u8, 114u8, 163u8, 160u8,
								62u8, 50u8, 67u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The current block number being processed. Set by `execute_block`."]
				pub fn number(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Number>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								228u8, 96u8, 102u8, 190u8, 252u8, 130u8, 239u8, 172u8, 126u8,
								235u8, 246u8, 139u8, 208u8, 15u8, 88u8, 245u8, 141u8, 232u8, 43u8,
								204u8, 36u8, 87u8, 211u8, 141u8, 187u8, 68u8, 236u8, 70u8, 193u8,
								235u8, 164u8, 191u8,
							] {
							let entry = Number;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Hash of the previous block."]
				pub fn parent_hash(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::subxt::sp_core::H256, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ParentHash>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								194u8, 221u8, 147u8, 22u8, 68u8, 141u8, 32u8, 6u8, 202u8, 39u8,
								164u8, 184u8, 69u8, 126u8, 190u8, 101u8, 215u8, 27u8, 127u8, 157u8,
								200u8, 69u8, 170u8, 139u8, 232u8, 27u8, 254u8, 181u8, 183u8, 105u8,
								111u8, 177u8,
							] {
							let entry = ParentHash;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Digest of the current block, also part of the block header."]
				pub fn digest(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::sp_runtime::generic::digest::Digest,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Digest>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								10u8, 176u8, 13u8, 228u8, 226u8, 42u8, 210u8, 151u8, 107u8, 212u8,
								136u8, 15u8, 38u8, 182u8, 225u8, 12u8, 250u8, 56u8, 193u8, 243u8,
								219u8, 113u8, 95u8, 233u8, 21u8, 229u8, 125u8, 146u8, 92u8, 250u8,
								32u8, 168u8,
							] {
							let entry = Digest;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Events deposited for the current block."]
				#[doc = ""]
				#[doc = " NOTE: The item is unbound and should therefore never be read on chain."]
				#[doc = " It could otherwise inflate the PoV size of a block."]
				#[doc = ""]
				#[doc = " Events have a large in-memory size. Box the events to not go out-of-memory"]
				#[doc = " just in case someone still reads them from within the runtime."]
				pub fn events(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<
							runtime_types::frame_system::EventRecord<
								runtime_types::dali_runtime::Event,
								::subxt::sp_core::H256,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Events>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								253u8, 133u8, 129u8, 12u8, 68u8, 52u8, 173u8, 72u8, 30u8, 208u8,
								221u8, 67u8, 136u8, 97u8, 50u8, 214u8, 225u8, 149u8, 128u8, 255u8,
								91u8, 160u8, 40u8, 244u8, 230u8, 186u8, 140u8, 224u8, 27u8, 138u8,
								190u8, 230u8,
							] {
							let entry = Events;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The number of events in the `Events<T>` list."]
				pub fn event_count(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<EventCount>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								236u8, 93u8, 90u8, 177u8, 250u8, 211u8, 138u8, 187u8, 26u8, 208u8,
								203u8, 113u8, 221u8, 233u8, 227u8, 9u8, 249u8, 25u8, 202u8, 185u8,
								161u8, 144u8, 167u8, 104u8, 127u8, 187u8, 38u8, 18u8, 52u8, 61u8,
								66u8, 112u8,
							] {
							let entry = EventCount;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
				#[doc = " of events in the `<Events<T>>` list."]
				#[doc = ""]
				#[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
				#[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
				#[doc = " in case of changes fetch the list of events of interest."]
				#[doc = ""]
				#[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
				#[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
				#[doc = " no notification will be triggered thus the event might be lost."]
				pub fn event_topics(
					&self,
					_0: &'a ::subxt::sp_core::H256,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<EventTopics>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								231u8, 73u8, 172u8, 223u8, 210u8, 145u8, 151u8, 102u8, 73u8, 23u8,
								140u8, 55u8, 97u8, 40u8, 219u8, 239u8, 229u8, 177u8, 72u8, 41u8,
								93u8, 178u8, 7u8, 209u8, 57u8, 86u8, 153u8, 252u8, 86u8, 152u8,
								245u8, 179u8,
							] {
							let entry = EventTopics(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
				#[doc = " of events in the `<Events<T>>` list."]
				#[doc = ""]
				#[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
				#[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
				#[doc = " in case of changes fetch the list of events of interest."]
				#[doc = ""]
				#[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
				#[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
				#[doc = " no notification will be triggered thus the event might be lost."]
				pub fn event_topics_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, EventTopics<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<EventTopics>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								231u8, 73u8, 172u8, 223u8, 210u8, 145u8, 151u8, 102u8, 73u8, 23u8,
								140u8, 55u8, 97u8, 40u8, 219u8, 239u8, 229u8, 177u8, 72u8, 41u8,
								93u8, 178u8, 7u8, 209u8, 57u8, 86u8, 153u8, 252u8, 86u8, 152u8,
								245u8, 179u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]
				pub fn last_runtime_upgrade(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<runtime_types::frame_system::LastRuntimeUpgradeInfo>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<LastRuntimeUpgrade>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								219u8, 153u8, 158u8, 38u8, 45u8, 65u8, 151u8, 137u8, 53u8, 76u8,
								11u8, 181u8, 218u8, 248u8, 125u8, 190u8, 100u8, 240u8, 173u8, 75u8,
								179u8, 137u8, 198u8, 197u8, 248u8, 185u8, 118u8, 58u8, 42u8, 165u8,
								125u8, 119u8,
							] {
							let entry = LastRuntimeUpgrade;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]
				pub fn upgraded_to_u32_ref_count(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::bool, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<UpgradedToU32RefCount>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								171u8, 88u8, 244u8, 92u8, 122u8, 67u8, 27u8, 18u8, 59u8, 175u8,
								175u8, 178u8, 20u8, 150u8, 213u8, 59u8, 222u8, 141u8, 32u8, 107u8,
								3u8, 114u8, 83u8, 250u8, 180u8, 233u8, 152u8, 54u8, 187u8, 99u8,
								131u8, 204u8,
							] {
							let entry = UpgradedToU32RefCount;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False"]
				#[doc = " (default) if not."]
				pub fn upgraded_to_triple_ref_count(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::bool, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<UpgradedToTripleRefCount>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								90u8, 33u8, 56u8, 86u8, 90u8, 101u8, 89u8, 133u8, 203u8, 56u8,
								201u8, 210u8, 244u8, 232u8, 150u8, 18u8, 51u8, 105u8, 14u8, 230u8,
								103u8, 155u8, 246u8, 99u8, 53u8, 207u8, 225u8, 128u8, 186u8, 76u8,
								40u8, 185u8,
							] {
							let entry = UpgradedToTripleRefCount;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The execution phase of the block."]
				pub fn execution_phase(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<runtime_types::frame_system::Phase>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ExecutionPhase>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								174u8, 13u8, 230u8, 220u8, 239u8, 161u8, 172u8, 122u8, 188u8, 95u8,
								141u8, 118u8, 91u8, 158u8, 111u8, 145u8, 243u8, 173u8, 226u8,
								212u8, 187u8, 118u8, 94u8, 132u8, 221u8, 244u8, 61u8, 148u8, 217u8,
								30u8, 238u8, 225u8,
							] {
							let entry = ExecutionPhase;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " Block & extrinsics weights: base values and limits."]
				pub fn block_weights(
					&self,
				) -> ::core::result::Result<
					runtime_types::frame_system::limits::BlockWeights,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("System", "BlockWeights")? ==
						[
							171u8, 219u8, 233u8, 26u8, 8u8, 82u8, 126u8, 26u8, 45u8, 242u8, 95u8,
							241u8, 173u8, 95u8, 182u8, 49u8, 162u8, 240u8, 151u8, 9u8, 49u8, 197u8,
							203u8, 181u8, 118u8, 90u8, 209u8, 38u8, 23u8, 22u8, 164u8, 1u8,
						] {
						let pallet = metadata.pallet("System")?;
						let constant = pallet.constant("BlockWeights")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The maximum length of a block (in bytes)."]
				pub fn block_length(
					&self,
				) -> ::core::result::Result<
					runtime_types::frame_system::limits::BlockLength,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("System", "BlockLength")? ==
						[
							120u8, 249u8, 182u8, 103u8, 246u8, 214u8, 149u8, 44u8, 42u8, 64u8, 2u8,
							56u8, 157u8, 184u8, 43u8, 195u8, 214u8, 251u8, 207u8, 207u8, 249u8,
							105u8, 203u8, 108u8, 179u8, 93u8, 93u8, 246u8, 40u8, 175u8, 160u8,
							114u8,
						] {
						let pallet = metadata.pallet("System")?;
						let constant = pallet.constant("BlockLength")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " Maximum number of block number to block hash mappings to keep (oldest pruned first)."]
				pub fn block_hash_count(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("System", "BlockHashCount")? ==
						[
							26u8, 201u8, 14u8, 127u8, 151u8, 212u8, 14u8, 28u8, 184u8, 180u8, 96u8,
							223u8, 210u8, 69u8, 176u8, 187u8, 183u8, 124u8, 4u8, 13u8, 0u8, 241u8,
							151u8, 202u8, 41u8, 152u8, 230u8, 247u8, 138u8, 23u8, 132u8, 49u8,
						] {
						let pallet = metadata.pallet("System")?;
						let constant = pallet.constant("BlockHashCount")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The weight of runtime database operations the runtime can invoke."]
				pub fn db_weight(
					&self,
				) -> ::core::result::Result<
					runtime_types::frame_support::weights::RuntimeDbWeight,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("System", "DbWeight")? ==
						[
							203u8, 8u8, 106u8, 152u8, 74u8, 132u8, 2u8, 132u8, 244u8, 106u8, 147u8,
							12u8, 93u8, 80u8, 61u8, 158u8, 172u8, 178u8, 228u8, 125u8, 213u8,
							102u8, 75u8, 210u8, 64u8, 185u8, 204u8, 84u8, 10u8, 164u8, 204u8, 62u8,
						] {
						let pallet = metadata.pallet("System")?;
						let constant = pallet.constant("DbWeight")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " Get the chain's current version."]
				pub fn version(
					&self,
				) -> ::core::result::Result<
					runtime_types::sp_version::RuntimeVersion,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("System", "Version")? ==
						[
							8u8, 62u8, 173u8, 35u8, 237u8, 219u8, 58u8, 98u8, 113u8, 251u8, 114u8,
							213u8, 71u8, 205u8, 241u8, 164u8, 210u8, 48u8, 254u8, 58u8, 72u8, 86u8,
							241u8, 58u8, 173u8, 55u8, 217u8, 49u8, 32u8, 169u8, 198u8, 160u8,
						] {
						let pallet = metadata.pallet("System")?;
						let constant = pallet.constant("Version")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The designated SS85 prefix of this chain."]
				#[doc = ""]
				#[doc = " This replaces the \"ss58Format\" property declared in the chain spec. Reason is"]
				#[doc = " that the runtime should know about the prefix in order to make use of it as"]
				#[doc = " an identifier of the chain."]
				pub fn ss58_prefix(
					&self,
				) -> ::core::result::Result<::core::primitive::u16, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("System", "SS58Prefix")? ==
						[
							73u8, 253u8, 242u8, 167u8, 77u8, 8u8, 2u8, 100u8, 204u8, 4u8, 201u8,
							96u8, 227u8, 174u8, 43u8, 42u8, 234u8, 242u8, 119u8, 191u8, 18u8,
							144u8, 153u8, 77u8, 139u8, 105u8, 138u8, 212u8, 223u8, 89u8, 43u8,
							125u8,
						] {
						let pallet = metadata.pallet("System")?;
						let constant = pallet.constant("SS58Prefix")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod timestamp {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Set {
				#[codec(compact)]
				pub now: ::core::primitive::u64,
			}
			impl ::subxt::Call for Set {
				const PALLET: &'static str = "Timestamp";
				const FUNCTION: &'static str = "set";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Set the current time."]
				#[doc = ""]
				#[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
				#[doc = "phase, if this call hasn't been invoked by that time."]
				#[doc = ""]
				#[doc = "The timestamp should be greater than the previous one by the amount specified by"]
				#[doc = "`MinimumPeriod`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Inherent`."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
				#[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
				#[doc = "  `on_finalize`)"]
				#[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
				#[doc = "# </weight>"]
				pub fn set(
					&self,
					now: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Set, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Set>()?
					};
					if runtime_call_hash ==
						[
							191u8, 73u8, 102u8, 150u8, 65u8, 157u8, 172u8, 194u8, 7u8, 72u8, 1u8,
							35u8, 54u8, 99u8, 245u8, 139u8, 40u8, 136u8, 245u8, 53u8, 167u8, 100u8,
							143u8, 244u8, 160u8, 5u8, 18u8, 130u8, 77u8, 160u8, 227u8, 51u8,
						] {
						let call = Set { now };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct Now;
			impl ::subxt::StorageEntry for Now {
				const PALLET: &'static str = "Timestamp";
				const STORAGE: &'static str = "Now";
				type Value = ::core::primitive::u64;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct DidUpdate;
			impl ::subxt::StorageEntry for DidUpdate {
				const PALLET: &'static str = "Timestamp";
				const STORAGE: &'static str = "DidUpdate";
				type Value = ::core::primitive::bool;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " Current time for the current block."]
				pub fn now(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Now>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								148u8, 53u8, 50u8, 54u8, 13u8, 161u8, 57u8, 150u8, 16u8, 83u8,
								144u8, 221u8, 59u8, 75u8, 158u8, 130u8, 39u8, 123u8, 106u8, 134u8,
								202u8, 185u8, 83u8, 85u8, 60u8, 41u8, 120u8, 96u8, 210u8, 34u8,
								2u8, 250u8,
							] {
							let entry = Now;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Did the timestamp get updated in this block?"]
				pub fn did_update(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::bool, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<DidUpdate>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								70u8, 13u8, 92u8, 186u8, 80u8, 151u8, 167u8, 90u8, 158u8, 232u8,
								175u8, 13u8, 103u8, 135u8, 2u8, 78u8, 16u8, 6u8, 39u8, 158u8,
								167u8, 85u8, 27u8, 47u8, 122u8, 73u8, 127u8, 26u8, 35u8, 168u8,
								72u8, 204u8,
							] {
							let entry = DidUpdate;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The minimum period between blocks. Beware that this is different to the *expected*"]
				#[doc = " period that the block production apparatus provides. Your chosen consensus system will"]
				#[doc = " generally work with this to determine a sensible block time. e.g. For Aura, it will be"]
				#[doc = " double this period on default settings."]
				pub fn minimum_period(
					&self,
				) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Timestamp", "MinimumPeriod")? ==
						[
							224u8, 163u8, 2u8, 57u8, 22u8, 120u8, 36u8, 145u8, 190u8, 20u8, 13u8,
							182u8, 94u8, 250u8, 138u8, 166u8, 43u8, 184u8, 117u8, 174u8, 236u8,
							84u8, 149u8, 87u8, 176u8, 229u8, 213u8, 83u8, 187u8, 168u8, 16u8,
							210u8,
						] {
						let pallet = metadata.pallet("Timestamp")?;
						let constant = pallet.constant("MinimumPeriod")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod sudo {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Sudo {
				pub call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
			}
			impl ::subxt::Call for Sudo {
				const PALLET: &'static str = "Sudo";
				const FUNCTION: &'static str = "sudo";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SudoUncheckedWeight {
				pub call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
				pub weight: ::core::primitive::u64,
			}
			impl ::subxt::Call for SudoUncheckedWeight {
				const PALLET: &'static str = "Sudo";
				const FUNCTION: &'static str = "sudo_unchecked_weight";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetKey {
				pub new: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
			}
			impl ::subxt::Call for SetKey {
				const PALLET: &'static str = "Sudo";
				const FUNCTION: &'static str = "set_key";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SudoAs {
				pub who: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
			}
			impl ::subxt::Call for SudoAs {
				const PALLET: &'static str = "Sudo";
				const FUNCTION: &'static str = "sudo_as";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- O(1)."]
				#[doc = "- Limited storage reads."]
				#[doc = "- One DB write (event)."]
				#[doc = "- Weight of derivative `call` execution + 10,000."]
				#[doc = "# </weight>"]
				pub fn sudo(
					&self,
					call: runtime_types::dali_runtime::Call,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Sudo, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Sudo>()?
					};
					if runtime_call_hash ==
						[
							86u8, 173u8, 154u8, 46u8, 115u8, 226u8, 66u8, 251u8, 22u8, 141u8, 36u8,
							10u8, 148u8, 181u8, 224u8, 250u8, 121u8, 58u8, 231u8, 234u8, 130u8,
							200u8, 44u8, 99u8, 26u8, 26u8, 14u8, 206u8, 35u8, 215u8, 112u8, 6u8,
						] {
						let call = Sudo { call: ::std::boxed::Box::new(call) };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
				#[doc = "This function does not check the weight of the call, and instead allows the"]
				#[doc = "Sudo user to specify the weight of the call."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- O(1)."]
				#[doc = "- The weight of this call is defined by the caller."]
				#[doc = "# </weight>"]
				pub fn sudo_unchecked_weight(
					&self,
					call: runtime_types::dali_runtime::Call,
					weight: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SudoUncheckedWeight,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SudoUncheckedWeight>()?
					};
					if runtime_call_hash ==
						[
							111u8, 227u8, 145u8, 116u8, 161u8, 59u8, 59u8, 113u8, 136u8, 124u8,
							179u8, 216u8, 82u8, 188u8, 255u8, 216u8, 93u8, 182u8, 152u8, 47u8,
							30u8, 209u8, 147u8, 58u8, 32u8, 205u8, 224u8, 12u8, 23u8, 51u8, 213u8,
							225u8,
						] {
						let call =
							SudoUncheckedWeight { call: ::std::boxed::Box::new(call), weight };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
				#[doc = "key."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- O(1)."]
				#[doc = "- Limited storage reads."]
				#[doc = "- One DB change."]
				#[doc = "# </weight>"]
				pub fn set_key(
					&self,
					new: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, SetKey, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetKey>()?
					};
					if runtime_call_hash ==
						[
							142u8, 228u8, 169u8, 153u8, 89u8, 247u8, 116u8, 76u8, 245u8, 199u8,
							2u8, 131u8, 195u8, 249u8, 201u8, 178u8, 212u8, 253u8, 144u8, 48u8,
							172u8, 25u8, 184u8, 72u8, 32u8, 150u8, 161u8, 116u8, 72u8, 162u8,
							236u8, 131u8,
						] {
						let call = SetKey { new };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
				#[doc = "a given account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- O(1)."]
				#[doc = "- Limited storage reads."]
				#[doc = "- One DB write (event)."]
				#[doc = "- Weight of derivative `call` execution + 10,000."]
				#[doc = "# </weight>"]
				pub fn sudo_as(
					&self,
					who: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					call: runtime_types::dali_runtime::Call,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, SudoAs, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SudoAs>()?
					};
					if runtime_call_hash ==
						[
							32u8, 121u8, 94u8, 151u8, 181u8, 180u8, 201u8, 250u8, 62u8, 189u8,
							162u8, 183u8, 245u8, 161u8, 80u8, 159u8, 194u8, 24u8, 140u8, 7u8,
							229u8, 158u8, 214u8, 218u8, 78u8, 82u8, 217u8, 210u8, 241u8, 158u8,
							32u8, 114u8,
						] {
						let call = SudoAs { who, call: ::std::boxed::Box::new(call) };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_sudo::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A sudo just took place. \\[result\\]"]
			pub struct Sudid {
				pub sudo_result:
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::Event for Sudid {
				const PALLET: &'static str = "Sudo";
				const EVENT: &'static str = "Sudid";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."]
			pub struct KeyChanged {
				pub old_sudoer: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
			}
			impl ::subxt::Event for KeyChanged {
				const PALLET: &'static str = "Sudo";
				const EVENT: &'static str = "KeyChanged";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A sudo just took place. \\[result\\]"]
			pub struct SudoAsDone {
				pub sudo_result:
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::Event for SudoAsDone {
				const PALLET: &'static str = "Sudo";
				const EVENT: &'static str = "SudoAsDone";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct Key;
			impl ::subxt::StorageEntry for Key {
				const PALLET: &'static str = "Sudo";
				const STORAGE: &'static str = "Key";
				type Value = ::subxt::sp_core::crypto::AccountId32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The `AccountId` of the sudo key."]
				pub fn key(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Key>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								222u8, 90u8, 158u8, 233u8, 184u8, 23u8, 141u8, 135u8, 81u8, 187u8,
								47u8, 100u8, 30u8, 81u8, 239u8, 197u8, 249u8, 253u8, 73u8, 207u8,
								161u8, 141u8, 174u8, 59u8, 74u8, 181u8, 10u8, 90u8, 22u8, 109u8,
								62u8, 27u8,
							] {
							let entry = Key;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
	}
	pub mod randomness_collective_flip {
		use super::{root_mod, runtime_types};
		pub mod storage {
			use super::runtime_types;
			pub struct RandomMaterial;
			impl ::subxt::StorageEntry for RandomMaterial {
				const PALLET: &'static str = "RandomnessCollectiveFlip";
				const STORAGE: &'static str = "RandomMaterial";
				type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
					::subxt::sp_core::H256,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " Series of block headers from the last 81 blocks that acts as random seed material. This"]
				#[doc = " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of"]
				#[doc = " the oldest hash."]
				pub fn random_material(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::frame_support::storage::bounded_vec::BoundedVec<
							::subxt::sp_core::H256,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<RandomMaterial>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								60u8, 176u8, 119u8, 155u8, 161u8, 136u8, 144u8, 88u8, 26u8, 57u8,
								142u8, 34u8, 5u8, 37u8, 115u8, 11u8, 90u8, 222u8, 147u8, 194u8,
								82u8, 194u8, 70u8, 227u8, 175u8, 198u8, 235u8, 24u8, 7u8, 87u8,
								203u8, 182u8,
							] {
							let entry = RandomMaterial;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
	}
	pub mod transaction_payment {
		use super::{root_mod, runtime_types};
		pub mod storage {
			use super::runtime_types;
			pub struct NextFeeMultiplier;
			impl ::subxt::StorageEntry for NextFeeMultiplier {
				const PALLET: &'static str = "TransactionPayment";
				const STORAGE: &'static str = "NextFeeMultiplier";
				type Value = runtime_types::sp_arithmetic::fixed_point::FixedU128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageVersion;
			impl ::subxt::StorageEntry for StorageVersion {
				const PALLET: &'static str = "TransactionPayment";
				const STORAGE: &'static str = "StorageVersion";
				type Value = runtime_types::pallet_transaction_payment::Releases;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				pub fn next_fee_multiplier(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::sp_arithmetic::fixed_point::FixedU128,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<NextFeeMultiplier>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								232u8, 48u8, 68u8, 202u8, 209u8, 29u8, 249u8, 71u8, 0u8, 84u8,
								229u8, 250u8, 176u8, 203u8, 27u8, 26u8, 34u8, 55u8, 83u8, 183u8,
								224u8, 40u8, 62u8, 127u8, 131u8, 88u8, 128u8, 9u8, 56u8, 178u8,
								31u8, 183u8,
							] {
							let entry = NextFeeMultiplier;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn storage_version(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::pallet_transaction_payment::Releases,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<StorageVersion>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								219u8, 243u8, 82u8, 176u8, 65u8, 5u8, 132u8, 114u8, 8u8, 82u8,
								176u8, 200u8, 97u8, 150u8, 177u8, 164u8, 166u8, 11u8, 34u8, 12u8,
								12u8, 198u8, 58u8, 191u8, 186u8, 221u8, 221u8, 119u8, 181u8, 253u8,
								154u8, 228u8,
							] {
							let entry = StorageVersion;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their"]
				#[doc = " `priority`"]
				#[doc = ""]
				#[doc = " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later"]
				#[doc = " added to a tip component in regular `priority` calculations."]
				#[doc = " It means that a `Normal` transaction can front-run a similarly-sized `Operational`"]
				#[doc = " extrinsic (with no tip), by including a tip value greater than the virtual tip."]
				#[doc = ""]
				#[doc = " ```rust,ignore"]
				#[doc = " // For `Normal`"]
				#[doc = " let priority = priority_calc(tip);"]
				#[doc = ""]
				#[doc = " // For `Operational`"]
				#[doc = " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;"]
				#[doc = " let priority = priority_calc(tip + virtual_tip);"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " Note that since we use `final_fee` the multiplier applies also to the regular `tip`"]
				#[doc = " sent with the transaction. So, not only does the transaction get a priority bump based"]
				#[doc = " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`"]
				#[doc = " transactions."]
				pub fn operational_fee_multiplier(
					&self,
				) -> ::core::result::Result<::core::primitive::u8, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("TransactionPayment", "OperationalFeeMultiplier")? ==
						[
							161u8, 232u8, 150u8, 43u8, 106u8, 83u8, 56u8, 248u8, 54u8, 123u8,
							244u8, 73u8, 5u8, 49u8, 245u8, 150u8, 70u8, 92u8, 158u8, 207u8, 127u8,
							115u8, 211u8, 21u8, 24u8, 136u8, 89u8, 44u8, 151u8, 211u8, 235u8,
							196u8,
						] {
						let pallet = metadata.pallet("TransactionPayment")?;
						let constant = pallet.constant("OperationalFeeMultiplier")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The polynomial that is applied in order to derive fee from weight."]
				pub fn weight_to_fee(
					&self,
				) -> ::core::result::Result<
					::std::vec::Vec<
						runtime_types::frame_support::weights::WeightToFeeCoefficient<
							::core::primitive::u128,
						>,
					>,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("TransactionPayment", "WeightToFee")? ==
						[
							149u8, 0u8, 74u8, 92u8, 102u8, 215u8, 163u8, 188u8, 115u8, 9u8, 121u8,
							173u8, 219u8, 107u8, 145u8, 36u8, 73u8, 167u8, 82u8, 8u8, 181u8, 2u8,
							219u8, 93u8, 147u8, 48u8, 54u8, 19u8, 96u8, 224u8, 65u8, 30u8,
						] {
						let pallet = metadata.pallet("TransactionPayment")?;
						let constant = pallet.constant("WeightToFee")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The polynomial that is applied in order to derive fee from length."]
				pub fn length_to_fee(
					&self,
				) -> ::core::result::Result<
					::std::vec::Vec<
						runtime_types::frame_support::weights::WeightToFeeCoefficient<
							::core::primitive::u128,
						>,
					>,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("TransactionPayment", "LengthToFee")? ==
						[
							149u8, 219u8, 123u8, 143u8, 114u8, 114u8, 81u8, 168u8, 141u8, 27u8,
							130u8, 219u8, 191u8, 64u8, 183u8, 203u8, 237u8, 177u8, 121u8, 67u8,
							38u8, 89u8, 79u8, 93u8, 105u8, 185u8, 193u8, 229u8, 177u8, 205u8,
							173u8, 81u8,
						] {
						let pallet = metadata.pallet("TransactionPayment")?;
						let constant = pallet.constant("LengthToFee")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod indices {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct Claim {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::Call for Claim {
				const PALLET: &'static str = "Indices";
				const FUNCTION: &'static str = "claim";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Transfer {
				pub new: ::subxt::sp_core::crypto::AccountId32,
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::Call for Transfer {
				const PALLET: &'static str = "Indices";
				const FUNCTION: &'static str = "transfer";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct Free {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::Call for Free {
				const PALLET: &'static str = "Indices";
				const FUNCTION: &'static str = "free";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ForceTransfer {
				pub new: ::subxt::sp_core::crypto::AccountId32,
				pub index: ::core::primitive::u32,
				pub freeze: ::core::primitive::bool,
			}
			impl ::subxt::Call for ForceTransfer {
				const PALLET: &'static str = "Indices";
				const FUNCTION: &'static str = "force_transfer";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct Freeze {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::Call for Freeze {
				const PALLET: &'static str = "Indices";
				const FUNCTION: &'static str = "freeze";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Assign an previously unassigned index."]
				#[doc = ""]
				#[doc = "Payment: `Deposit` is reserved from the sender account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `index`: the index to be claimed. This must not be in use."]
				#[doc = ""]
				#[doc = "Emits `IndexAssigned` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(1)`."]
				#[doc = "- One storage mutation (codec `O(1)`)."]
				#[doc = "- One reserve operation."]
				#[doc = "- One event."]
				#[doc = "-------------------"]
				#[doc = "- DB Weight: 1 Read/Write (Accounts)"]
				#[doc = "# </weight>"]
				pub fn claim(
					&self,
					index: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Claim, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Claim>()?
					};
					if runtime_call_hash ==
						[
							27u8, 4u8, 108u8, 55u8, 23u8, 109u8, 175u8, 25u8, 201u8, 230u8, 228u8,
							51u8, 164u8, 15u8, 79u8, 10u8, 219u8, 182u8, 242u8, 102u8, 164u8,
							148u8, 39u8, 91u8, 106u8, 197u8, 29u8, 190u8, 178u8, 221u8, 16u8, 87u8,
						] {
						let call = Claim { index };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Assign an index already owned by the sender to another account. The balance reservation"]
				#[doc = "is effectively transferred to the new account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `index`: the index to be re-assigned. This must be owned by the sender."]
				#[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
				#[doc = ""]
				#[doc = "Emits `IndexAssigned` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(1)`."]
				#[doc = "- One storage mutation (codec `O(1)`)."]
				#[doc = "- One transfer operation."]
				#[doc = "- One event."]
				#[doc = "-------------------"]
				#[doc = "- DB Weight:"]
				#[doc = "   - Reads: Indices Accounts, System Account (recipient)"]
				#[doc = "   - Writes: Indices Accounts, System Account (recipient)"]
				#[doc = "# </weight>"]
				pub fn transfer(
					&self,
					new: ::subxt::sp_core::crypto::AccountId32,
					index: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Transfer,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Transfer>()?
					};
					if runtime_call_hash ==
						[
							124u8, 83u8, 33u8, 230u8, 23u8, 70u8, 83u8, 59u8, 76u8, 100u8, 219u8,
							100u8, 165u8, 163u8, 102u8, 193u8, 11u8, 22u8, 30u8, 125u8, 114u8,
							28u8, 61u8, 156u8, 38u8, 170u8, 129u8, 74u8, 187u8, 28u8, 33u8, 65u8,
						] {
						let call = Transfer { new, index };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Free up an index owned by the sender."]
				#[doc = ""]
				#[doc = "Payment: Any previous deposit placed for the index is unreserved in the sender account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must own the index."]
				#[doc = ""]
				#[doc = "- `index`: the index to be freed. This must be owned by the sender."]
				#[doc = ""]
				#[doc = "Emits `IndexFreed` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(1)`."]
				#[doc = "- One storage mutation (codec `O(1)`)."]
				#[doc = "- One reserve operation."]
				#[doc = "- One event."]
				#[doc = "-------------------"]
				#[doc = "- DB Weight: 1 Read/Write (Accounts)"]
				#[doc = "# </weight>"]
				pub fn free(
					&self,
					index: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Free, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Free>()?
					};
					if runtime_call_hash ==
						[
							153u8, 143u8, 162u8, 33u8, 229u8, 3u8, 159u8, 153u8, 111u8, 100u8,
							160u8, 250u8, 227u8, 24u8, 157u8, 226u8, 173u8, 39u8, 25u8, 200u8,
							137u8, 147u8, 232u8, 213u8, 182u8, 49u8, 142u8, 250u8, 139u8, 155u8,
							84u8, 214u8,
						] {
						let call = Free { index };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Force an index to an account. This doesn't require a deposit. If the index is already"]
				#[doc = "held, then any deposit is reimbursed to its current owner."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Root_."]
				#[doc = ""]
				#[doc = "- `index`: the index to be (re-)assigned."]
				#[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
				#[doc = "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred."]
				#[doc = ""]
				#[doc = "Emits `IndexAssigned` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(1)`."]
				#[doc = "- One storage mutation (codec `O(1)`)."]
				#[doc = "- Up to one reserve operation."]
				#[doc = "- One event."]
				#[doc = "-------------------"]
				#[doc = "- DB Weight:"]
				#[doc = "   - Reads: Indices Accounts, System Account (original owner)"]
				#[doc = "   - Writes: Indices Accounts, System Account (original owner)"]
				#[doc = "# </weight>"]
				pub fn force_transfer(
					&self,
					new: ::subxt::sp_core::crypto::AccountId32,
					index: ::core::primitive::u32,
					freeze: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ForceTransfer,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ForceTransfer>()?
					};
					if runtime_call_hash ==
						[
							181u8, 143u8, 90u8, 135u8, 132u8, 11u8, 145u8, 85u8, 4u8, 211u8, 56u8,
							110u8, 213u8, 153u8, 224u8, 106u8, 198u8, 250u8, 130u8, 253u8, 72u8,
							58u8, 133u8, 150u8, 102u8, 119u8, 177u8, 175u8, 77u8, 106u8, 253u8,
							99u8,
						] {
						let call = ForceTransfer { new, index, freeze };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Freeze an index so it will always point to the sender account. This consumes the"]
				#[doc = "deposit."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the signing account must have a"]
				#[doc = "non-frozen account `index`."]
				#[doc = ""]
				#[doc = "- `index`: the index to be frozen in place."]
				#[doc = ""]
				#[doc = "Emits `IndexFrozen` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(1)`."]
				#[doc = "- One storage mutation (codec `O(1)`)."]
				#[doc = "- Up to one slash operation."]
				#[doc = "- One event."]
				#[doc = "-------------------"]
				#[doc = "- DB Weight: 1 Read/Write (Accounts)"]
				#[doc = "# </weight>"]
				pub fn freeze(
					&self,
					index: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Freeze, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Freeze>()?
					};
					if runtime_call_hash ==
						[
							204u8, 127u8, 214u8, 137u8, 138u8, 28u8, 171u8, 169u8, 184u8, 164u8,
							235u8, 114u8, 132u8, 176u8, 14u8, 207u8, 72u8, 39u8, 179u8, 231u8,
							137u8, 243u8, 242u8, 57u8, 89u8, 57u8, 213u8, 210u8, 87u8, 12u8, 253u8,
							159u8,
						] {
						let call = Freeze { index };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_indices::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A account index was assigned."]
			pub struct IndexAssigned {
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::Event for IndexAssigned {
				const PALLET: &'static str = "Indices";
				const EVENT: &'static str = "IndexAssigned";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "A account index has been freed up (unassigned)."]
			pub struct IndexFreed {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::Event for IndexFreed {
				const PALLET: &'static str = "Indices";
				const EVENT: &'static str = "IndexFreed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A account index has been frozen to its current account ID."]
			pub struct IndexFrozen {
				pub index: ::core::primitive::u32,
				pub who: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Event for IndexFrozen {
				const PALLET: &'static str = "Indices";
				const EVENT: &'static str = "IndexFrozen";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct Accounts<'a>(pub &'a ::core::primitive::u32);
			impl ::subxt::StorageEntry for Accounts<'_> {
				const PALLET: &'static str = "Indices";
				const STORAGE: &'static str = "Accounts";
				type Value = (
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u128,
					::core::primitive::bool,
				);
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The lookup from index to account."]
				pub fn accounts(
					&self,
					_0: &'a ::core::primitive::u32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<(
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u128,
							::core::primitive::bool,
						)>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Accounts>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								105u8, 208u8, 81u8, 30u8, 157u8, 108u8, 22u8, 122u8, 152u8, 220u8,
								40u8, 97u8, 255u8, 166u8, 222u8, 11u8, 81u8, 245u8, 143u8, 79u8,
								57u8, 19u8, 174u8, 164u8, 220u8, 59u8, 77u8, 117u8, 39u8, 72u8,
								251u8, 234u8,
							] {
							let entry = Accounts(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The lookup from index to account."]
				pub fn accounts_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Accounts<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Accounts>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								105u8, 208u8, 81u8, 30u8, 157u8, 108u8, 22u8, 122u8, 152u8, 220u8,
								40u8, 97u8, 255u8, 166u8, 222u8, 11u8, 81u8, 245u8, 143u8, 79u8,
								57u8, 19u8, 174u8, 164u8, 220u8, 59u8, 77u8, 117u8, 39u8, 72u8,
								251u8, 234u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The deposit needed for reserving an index."]
				pub fn deposit(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Indices", "Deposit")? ==
						[
							173u8, 234u8, 239u8, 32u8, 129u8, 136u8, 106u8, 151u8, 229u8, 225u8,
							70u8, 47u8, 115u8, 214u8, 158u8, 215u8, 155u8, 20u8, 132u8, 204u8,
							168u8, 20u8, 135u8, 164u8, 129u8, 243u8, 20u8, 100u8, 47u8, 228u8, 4u8,
							248u8,
						] {
						let pallet = metadata.pallet("Indices")?;
						let constant = pallet.constant("Deposit")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod balances {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Transfer {
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
			}
			impl ::subxt::Call for Transfer {
				const PALLET: &'static str = "Balances";
				const FUNCTION: &'static str = "transfer";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetBalance {
				pub who: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub new_free: ::core::primitive::u128,
				#[codec(compact)]
				pub new_reserved: ::core::primitive::u128,
			}
			impl ::subxt::Call for SetBalance {
				const PALLET: &'static str = "Balances";
				const FUNCTION: &'static str = "set_balance";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ForceTransfer {
				pub source: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
			}
			impl ::subxt::Call for ForceTransfer {
				const PALLET: &'static str = "Balances";
				const FUNCTION: &'static str = "force_transfer";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct TransferKeepAlive {
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
			}
			impl ::subxt::Call for TransferKeepAlive {
				const PALLET: &'static str = "Balances";
				const FUNCTION: &'static str = "transfer_keep_alive";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct TransferAll {
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for TransferAll {
				const PALLET: &'static str = "Balances";
				const FUNCTION: &'static str = "transfer_all";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ForceUnreserve {
				pub who: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Call for ForceUnreserve {
				const PALLET: &'static str = "Balances";
				const FUNCTION: &'static str = "force_unreserve";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Transfer some liquid free balance to another account."]
				#[doc = ""]
				#[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
				#[doc = "If the sender's account is below the existential deposit as a result"]
				#[doc = "of the transfer, the account will be reaped."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Dependent on arguments but not critical, given proper implementations for input config"]
				#[doc = "  types. See related functions below."]
				#[doc = "- It contains a limited number of reads and writes internally and no complex"]
				#[doc = "  computation."]
				#[doc = ""]
				#[doc = "Related functions:"]
				#[doc = ""]
				#[doc = "  - `ensure_can_withdraw` is always called internally but has a bounded complexity."]
				#[doc = "  - Transferring balances to accounts that did not exist before will cause"]
				#[doc = "    `T::OnNewAccount::on_new_account` to be called."]
				#[doc = "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`."]
				#[doc = "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check"]
				#[doc = "    that the transfer will not kill the origin account."]
				#[doc = "---------------------------------"]
				#[doc = "- Origin account is already in memory, so no DB operations for them."]
				#[doc = "# </weight>"]
				pub fn transfer(
					&self,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					value: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Transfer,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Transfer>()?
					};
					if runtime_call_hash ==
						[
							51u8, 127u8, 65u8, 149u8, 186u8, 25u8, 125u8, 225u8, 172u8, 243u8,
							144u8, 156u8, 86u8, 150u8, 89u8, 114u8, 9u8, 142u8, 44u8, 98u8, 24u8,
							252u8, 83u8, 64u8, 78u8, 247u8, 136u8, 130u8, 203u8, 10u8, 206u8, 48u8,
						] {
						let call = Transfer { dest, value };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Set the balances of a given account."]
				#[doc = ""]
				#[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it will"]
				#[doc = "also alter the total issuance of the system (`TotalIssuance`) appropriately."]
				#[doc = "If the new free or reserved balance is below the existential deposit,"]
				#[doc = "it will reset the account nonce (`frame_system::AccountNonce`)."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call is `root`."]
				pub fn set_balance(
					&self,
					who: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					new_free: ::core::primitive::u128,
					new_reserved: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetBalance,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetBalance>()?
					};
					if runtime_call_hash ==
						[
							126u8, 224u8, 173u8, 235u8, 17u8, 214u8, 51u8, 73u8, 132u8, 184u8,
							52u8, 124u8, 147u8, 120u8, 186u8, 82u8, 247u8, 199u8, 89u8, 31u8,
							111u8, 94u8, 224u8, 130u8, 198u8, 2u8, 60u8, 0u8, 16u8, 248u8, 243u8,
							216u8,
						] {
						let call = SetBalance { who, new_free, new_reserved };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Exactly as `transfer`, except the origin must be root and the source account may be"]
				#[doc = "specified."]
				#[doc = "# <weight>"]
				#[doc = "- Same as transfer, but additional read and write because the source account is not"]
				#[doc = "  assumed to be in the overlay."]
				#[doc = "# </weight>"]
				pub fn force_transfer(
					&self,
					source: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					value: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ForceTransfer,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ForceTransfer>()?
					};
					if runtime_call_hash ==
						[
							39u8, 171u8, 216u8, 52u8, 120u8, 195u8, 8u8, 202u8, 157u8, 154u8,
							191u8, 235u8, 163u8, 121u8, 132u8, 119u8, 166u8, 162u8, 163u8, 68u8,
							144u8, 193u8, 97u8, 194u8, 130u8, 136u8, 234u8, 84u8, 177u8, 134u8,
							0u8, 232u8,
						] {
						let call = ForceTransfer { source, dest, value };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Same as the [`transfer`] call, but with a check that the transfer will not kill the"]
				#[doc = "origin account."]
				#[doc = ""]
				#[doc = "99% of the time you want [`transfer`] instead."]
				#[doc = ""]
				#[doc = "[`transfer`]: struct.Pallet.html#method.transfer"]
				pub fn transfer_keep_alive(
					&self,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					value: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						TransferKeepAlive,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<TransferKeepAlive>()?
					};
					if runtime_call_hash ==
						[
							81u8, 224u8, 225u8, 42u8, 20u8, 198u8, 176u8, 165u8, 166u8, 150u8,
							143u8, 162u8, 202u8, 240u8, 59u8, 171u8, 17u8, 168u8, 211u8, 217u8,
							137u8, 108u8, 207u8, 95u8, 221u8, 51u8, 152u8, 4u8, 208u8, 79u8, 251u8,
							29u8,
						] {
						let call = TransferKeepAlive { dest, value };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Transfer the entire transferable balance from the caller account."]
				#[doc = ""]
				#[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
				#[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
				#[doc = "transferred by this function. To ensure that this function results in a killed account,"]
				#[doc = "you might need to prepare the account by removing any reference counters, storage"]
				#[doc = "deposits, etc..."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be Signed."]
				#[doc = ""]
				#[doc = "- `dest`: The recipient of the transfer."]
				#[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
				#[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
				#[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
				#[doc = "  keep the sender account alive (true). # <weight>"]
				#[doc = "- O(1). Just like transfer, but reading the user's transferable balance first."]
				#[doc = "  #</weight>"]
				pub fn transfer_all(
					&self,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						TransferAll,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<TransferAll>()?
					};
					if runtime_call_hash ==
						[
							48u8, 241u8, 202u8, 6u8, 29u8, 207u8, 104u8, 141u8, 218u8, 18u8, 127u8,
							214u8, 99u8, 196u8, 39u8, 229u8, 120u8, 123u8, 130u8, 56u8, 129u8,
							169u8, 149u8, 62u8, 221u8, 108u8, 55u8, 201u8, 106u8, 36u8, 255u8,
							85u8,
						] {
						let call = TransferAll { dest, keep_alive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Unreserve some balance from a user by force."]
				#[doc = ""]
				#[doc = "Can only be called by ROOT."]
				pub fn force_unreserve(
					&self,
					who: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					amount: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ForceUnreserve,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ForceUnreserve>()?
					};
					if runtime_call_hash ==
						[
							4u8, 231u8, 55u8, 137u8, 114u8, 76u8, 44u8, 166u8, 28u8, 224u8, 22u8,
							92u8, 76u8, 124u8, 219u8, 29u8, 204u8, 207u8, 179u8, 134u8, 93u8,
							137u8, 33u8, 178u8, 174u8, 106u8, 132u8, 204u8, 180u8, 122u8, 162u8,
							110u8,
						] {
						let call = ForceUnreserve { who, amount };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_balances::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An account was created with some free balance."]
			pub struct Endowed {
				pub account: ::subxt::sp_core::crypto::AccountId32,
				pub free_balance: ::core::primitive::u128,
			}
			impl ::subxt::Event for Endowed {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Endowed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
			#[doc = "resulting in an outright loss."]
			pub struct DustLost {
				pub account: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for DustLost {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "DustLost";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Transfer succeeded."]
			pub struct Transfer {
				pub from: ::subxt::sp_core::crypto::AccountId32,
				pub to: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for Transfer {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Transfer";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A balance was set by root."]
			pub struct BalanceSet {
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub free: ::core::primitive::u128,
				pub reserved: ::core::primitive::u128,
			}
			impl ::subxt::Event for BalanceSet {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "BalanceSet";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Some balance was reserved (moved from free to reserved)."]
			pub struct Reserved {
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for Reserved {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Reserved";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Some balance was unreserved (moved from reserved to free)."]
			pub struct Unreserved {
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for Unreserved {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Unreserved";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Some balance was moved from the reserve of the first account to the second account."]
			#[doc = "Final argument indicates the destination balance type."]
			pub struct ReserveRepatriated {
				pub from: ::subxt::sp_core::crypto::AccountId32,
				pub to: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
				pub destination_status:
					runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
			}
			impl ::subxt::Event for ReserveRepatriated {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "ReserveRepatriated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Some amount was deposited (e.g. for transaction fees)."]
			pub struct Deposit {
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for Deposit {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Deposit";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
			pub struct Withdraw {
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for Withdraw {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Withdraw";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
			pub struct Slashed {
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for Slashed {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Slashed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct TotalIssuance;
			impl ::subxt::StorageEntry for TotalIssuance {
				const PALLET: &'static str = "Balances";
				const STORAGE: &'static str = "TotalIssuance";
				type Value = ::core::primitive::u128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Account<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::StorageEntry for Account<'_> {
				const PALLET: &'static str = "Balances";
				const STORAGE: &'static str = "Account";
				type Value = runtime_types::pallet_balances::AccountData<::core::primitive::u128>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct Locks<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::StorageEntry for Locks<'_> {
				const PALLET: &'static str = "Balances";
				const STORAGE: &'static str = "Locks";
				type Value =
					runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<
						runtime_types::pallet_balances::BalanceLock<::core::primitive::u128>,
					>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct Reserves<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::StorageEntry for Reserves<'_> {
				const PALLET: &'static str = "Balances";
				const STORAGE: &'static str = "Reserves";
				type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
					runtime_types::pallet_balances::ReserveData<
						[::core::primitive::u8; 8usize],
						::core::primitive::u128,
					>,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct StorageVersion;
			impl ::subxt::StorageEntry for StorageVersion {
				const PALLET: &'static str = "Balances";
				const STORAGE: &'static str = "StorageVersion";
				type Value = runtime_types::pallet_balances::Releases;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The total units issued in the system."]
				pub fn total_issuance(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<TotalIssuance>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								1u8, 206u8, 252u8, 237u8, 6u8, 30u8, 20u8, 232u8, 164u8, 115u8,
								51u8, 156u8, 156u8, 206u8, 241u8, 187u8, 44u8, 84u8, 25u8, 164u8,
								235u8, 20u8, 86u8, 242u8, 124u8, 23u8, 28u8, 140u8, 26u8, 73u8,
								231u8, 51u8,
							] {
							let entry = TotalIssuance;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The Balances pallet example of storing the balance of an account."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " You can also store the balance of an account in the `System` pallet."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "   type AccountStore = System"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
				#[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
				#[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
				#[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
				pub fn account(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Account>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								129u8, 169u8, 171u8, 206u8, 229u8, 178u8, 69u8, 118u8, 199u8, 64u8,
								254u8, 67u8, 16u8, 154u8, 160u8, 197u8, 177u8, 161u8, 148u8, 199u8,
								78u8, 219u8, 187u8, 83u8, 99u8, 110u8, 207u8, 252u8, 243u8, 39u8,
								46u8, 106u8,
							] {
							let entry = Account(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The Balances pallet example of storing the balance of an account."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " You can also store the balance of an account in the `System` pallet."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "   type AccountStore = System"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
				#[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
				#[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
				#[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
				pub fn account_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Account<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Account>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								129u8, 169u8, 171u8, 206u8, 229u8, 178u8, 69u8, 118u8, 199u8, 64u8,
								254u8, 67u8, 16u8, 154u8, 160u8, 197u8, 177u8, 161u8, 148u8, 199u8,
								78u8, 219u8, 187u8, 83u8, 99u8, 110u8, 207u8, 252u8, 243u8, 39u8,
								46u8, 106u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Any liquidity locks on some account balances."]
				#[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
				pub fn locks(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<
							runtime_types::pallet_balances::BalanceLock<::core::primitive::u128>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Locks>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								31u8, 76u8, 213u8, 60u8, 86u8, 11u8, 155u8, 151u8, 33u8, 212u8,
								74u8, 89u8, 174u8, 74u8, 195u8, 107u8, 29u8, 163u8, 178u8, 34u8,
								209u8, 8u8, 201u8, 237u8, 77u8, 99u8, 205u8, 212u8, 236u8, 132u8,
								2u8, 252u8,
							] {
							let entry = Locks(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Any liquidity locks on some account balances."]
				#[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
				pub fn locks_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Locks<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Locks>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								31u8, 76u8, 213u8, 60u8, 86u8, 11u8, 155u8, 151u8, 33u8, 212u8,
								74u8, 89u8, 174u8, 74u8, 195u8, 107u8, 29u8, 163u8, 178u8, 34u8,
								209u8, 8u8, 201u8, 237u8, 77u8, 99u8, 205u8, 212u8, 236u8, 132u8,
								2u8, 252u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Named reserves on some account balances."]
				pub fn reserves(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::frame_support::storage::bounded_vec::BoundedVec<
							runtime_types::pallet_balances::ReserveData<
								[::core::primitive::u8; 8usize],
								::core::primitive::u128,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Reserves>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								103u8, 6u8, 69u8, 151u8, 81u8, 40u8, 146u8, 113u8, 56u8, 239u8,
								104u8, 31u8, 168u8, 242u8, 141u8, 121u8, 213u8, 213u8, 114u8, 63u8,
								62u8, 47u8, 91u8, 119u8, 57u8, 91u8, 95u8, 81u8, 19u8, 208u8, 59u8,
								146u8,
							] {
							let entry = Reserves(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Named reserves on some account balances."]
				pub fn reserves_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Reserves<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Reserves>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								103u8, 6u8, 69u8, 151u8, 81u8, 40u8, 146u8, 113u8, 56u8, 239u8,
								104u8, 31u8, 168u8, 242u8, 141u8, 121u8, 213u8, 213u8, 114u8, 63u8,
								62u8, 47u8, 91u8, 119u8, 57u8, 91u8, 95u8, 81u8, 19u8, 208u8, 59u8,
								146u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Storage version of the pallet."]
				#[doc = ""]
				#[doc = " This is set to v2.0.0 for new networks."]
				pub fn storage_version(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::pallet_balances::Releases,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<StorageVersion>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								135u8, 96u8, 28u8, 234u8, 124u8, 212u8, 56u8, 140u8, 40u8, 101u8,
								235u8, 128u8, 136u8, 221u8, 182u8, 81u8, 17u8, 9u8, 184u8, 228u8,
								174u8, 165u8, 200u8, 162u8, 214u8, 178u8, 227u8, 72u8, 34u8, 5u8,
								173u8, 96u8,
							] {
							let entry = StorageVersion;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The minimum amount required to keep an account open."]
				pub fn existential_deposit(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Balances", "ExistentialDeposit")? ==
						[
							47u8, 23u8, 126u8, 122u8, 190u8, 106u8, 109u8, 151u8, 159u8, 1u8, 60u8,
							29u8, 128u8, 35u8, 34u8, 194u8, 245u8, 105u8, 14u8, 200u8, 102u8, 78u8,
							61u8, 138u8, 240u8, 186u8, 71u8, 219u8, 130u8, 118u8, 110u8, 251u8,
						] {
						let pallet = metadata.pallet("Balances")?;
						let constant = pallet.constant("ExistentialDeposit")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The maximum number of locks that should exist on an account."]
				#[doc = " Not strictly enforced, but used for weight estimation."]
				pub fn max_locks(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Balances", "MaxLocks")? ==
						[
							250u8, 58u8, 19u8, 15u8, 35u8, 113u8, 227u8, 89u8, 39u8, 75u8, 21u8,
							108u8, 202u8, 32u8, 163u8, 167u8, 207u8, 233u8, 69u8, 151u8, 53u8,
							164u8, 230u8, 16u8, 14u8, 22u8, 172u8, 46u8, 36u8, 216u8, 29u8, 1u8,
						] {
						let pallet = metadata.pallet("Balances")?;
						let constant = pallet.constant("MaxLocks")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The maximum number of named reserves that can exist on an account."]
				pub fn max_reserves(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Balances", "MaxReserves")? ==
						[
							95u8, 163u8, 254u8, 186u8, 158u8, 222u8, 45u8, 163u8, 130u8, 111u8,
							59u8, 232u8, 163u8, 210u8, 243u8, 112u8, 38u8, 103u8, 252u8, 120u8,
							141u8, 104u8, 20u8, 200u8, 128u8, 65u8, 56u8, 145u8, 247u8, 95u8, 82u8,
							42u8,
						] {
						let pallet = metadata.pallet("Balances")?;
						let constant = pallet.constant("MaxReserves")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod identity {
		use super::{root_mod, runtime_types};
		#[doc = "Identity pallet declaration."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AddRegistrar {
				pub account: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Call for AddRegistrar {
				const PALLET: &'static str = "Identity";
				const FUNCTION: &'static str = "add_registrar";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetIdentity {
				pub info: ::std::boxed::Box<runtime_types::pallet_identity::types::IdentityInfo>,
			}
			impl ::subxt::Call for SetIdentity {
				const PALLET: &'static str = "Identity";
				const FUNCTION: &'static str = "set_identity";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetSubs {
				pub subs: ::std::vec::Vec<(
					::subxt::sp_core::crypto::AccountId32,
					runtime_types::pallet_identity::types::Data,
				)>,
			}
			impl ::subxt::Call for SetSubs {
				const PALLET: &'static str = "Identity";
				const FUNCTION: &'static str = "set_subs";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ClearIdentity;
			impl ::subxt::Call for ClearIdentity {
				const PALLET: &'static str = "Identity";
				const FUNCTION: &'static str = "clear_identity";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RequestJudgement {
				#[codec(compact)]
				pub reg_index: ::core::primitive::u32,
				#[codec(compact)]
				pub max_fee: ::core::primitive::u128,
			}
			impl ::subxt::Call for RequestJudgement {
				const PALLET: &'static str = "Identity";
				const FUNCTION: &'static str = "request_judgement";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct CancelRequest {
				pub reg_index: ::core::primitive::u32,
			}
			impl ::subxt::Call for CancelRequest {
				const PALLET: &'static str = "Identity";
				const FUNCTION: &'static str = "cancel_request";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetFee {
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				#[codec(compact)]
				pub fee: ::core::primitive::u128,
			}
			impl ::subxt::Call for SetFee {
				const PALLET: &'static str = "Identity";
				const FUNCTION: &'static str = "set_fee";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetAccountId {
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				pub new: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Call for SetAccountId {
				const PALLET: &'static str = "Identity";
				const FUNCTION: &'static str = "set_account_id";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetFields {
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				pub fields: runtime_types::pallet_identity::types::BitFlags<
					runtime_types::pallet_identity::types::IdentityField,
				>,
			}
			impl ::subxt::Call for SetFields {
				const PALLET: &'static str = "Identity";
				const FUNCTION: &'static str = "set_fields";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ProvideJudgement {
				#[codec(compact)]
				pub reg_index: ::core::primitive::u32,
				pub target: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub judgement:
					runtime_types::pallet_identity::types::Judgement<::core::primitive::u128>,
			}
			impl ::subxt::Call for ProvideJudgement {
				const PALLET: &'static str = "Identity";
				const FUNCTION: &'static str = "provide_judgement";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct KillIdentity {
				pub target: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
			}
			impl ::subxt::Call for KillIdentity {
				const PALLET: &'static str = "Identity";
				const FUNCTION: &'static str = "kill_identity";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AddSub {
				pub sub: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub data: runtime_types::pallet_identity::types::Data,
			}
			impl ::subxt::Call for AddSub {
				const PALLET: &'static str = "Identity";
				const FUNCTION: &'static str = "add_sub";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RenameSub {
				pub sub: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub data: runtime_types::pallet_identity::types::Data,
			}
			impl ::subxt::Call for RenameSub {
				const PALLET: &'static str = "Identity";
				const FUNCTION: &'static str = "rename_sub";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RemoveSub {
				pub sub: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
			}
			impl ::subxt::Call for RemoveSub {
				const PALLET: &'static str = "Identity";
				const FUNCTION: &'static str = "remove_sub";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct QuitSub;
			impl ::subxt::Call for QuitSub {
				const PALLET: &'static str = "Identity";
				const FUNCTION: &'static str = "quit_sub";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Add a registrar to the system."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `T::RegistrarOrigin`."]
				#[doc = ""]
				#[doc = "- `account`: the account of the registrar."]
				#[doc = ""]
				#[doc = "Emits `RegistrarAdded` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded)."]
				#[doc = "- One storage mutation (codec `O(R)`)."]
				#[doc = "- One event."]
				#[doc = "# </weight>"]
				pub fn add_registrar(
					&self,
					account: ::subxt::sp_core::crypto::AccountId32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						AddRegistrar,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<AddRegistrar>()?
					};
					if runtime_call_hash ==
						[
							252u8, 233u8, 148u8, 186u8, 42u8, 127u8, 183u8, 107u8, 205u8, 34u8,
							63u8, 170u8, 82u8, 218u8, 141u8, 136u8, 174u8, 45u8, 3u8, 226u8, 175u8,
							22u8, 18u8, 120u8, 70u8, 4u8, 164u8, 147u8, 228u8, 52u8, 199u8, 196u8,
						] {
						let call = AddRegistrar { account };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Set an account's identity information and reserve the appropriate deposit."]
				#[doc = ""]
				#[doc = "If the account already has identity information, the deposit is taken as part payment"]
				#[doc = "for the new deposit."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `info`: The identity information."]
				#[doc = ""]
				#[doc = "Emits `IdentitySet` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(X + X' + R)`"]
				#[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)"]
				#[doc = "  - where `R` judgements-count (registrar-count-bounded)"]
				#[doc = "- One balance reserve operation."]
				#[doc = "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`)."]
				#[doc = "- One event."]
				#[doc = "# </weight>"]
				pub fn set_identity(
					&self,
					info: runtime_types::pallet_identity::types::IdentityInfo,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetIdentity,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetIdentity>()?
					};
					if runtime_call_hash ==
						[
							174u8, 5u8, 84u8, 201u8, 219u8, 147u8, 45u8, 241u8, 46u8, 192u8, 221u8,
							20u8, 233u8, 128u8, 206u8, 1u8, 71u8, 244u8, 153u8, 167u8, 150u8,
							164u8, 16u8, 58u8, 51u8, 168u8, 58u8, 184u8, 204u8, 229u8, 135u8, 91u8,
						] {
						let call = SetIdentity { info: ::std::boxed::Box::new(info) };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Set the sub-accounts of the sender."]
				#[doc = ""]
				#[doc = "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned"]
				#[doc = "and an amount `SubAccountDeposit` will be reserved for each item in `subs`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
				#[doc = "identity."]
				#[doc = ""]
				#[doc = "- `subs`: The identity's (new) sub-accounts."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(P + S)`"]
				#[doc = "  - where `P` old-subs-count (hard- and deposit-bounded)."]
				#[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
				#[doc = "- At most one balance operations."]
				#[doc = "- DB:"]
				#[doc = "  - `P + S` storage mutations (codec complexity `O(1)`)"]
				#[doc = "  - One storage read (codec complexity `O(P)`)."]
				#[doc = "  - One storage write (codec complexity `O(S)`)."]
				#[doc = "  - One storage-exists (`IdentityOf::contains_key`)."]
				#[doc = "# </weight>"]
				pub fn set_subs(
					&self,
					subs: ::std::vec::Vec<(
						::subxt::sp_core::crypto::AccountId32,
						runtime_types::pallet_identity::types::Data,
					)>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetSubs,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetSubs>()?
					};
					if runtime_call_hash ==
						[
							157u8, 141u8, 52u8, 45u8, 109u8, 252u8, 84u8, 0u8, 38u8, 209u8, 193u8,
							212u8, 177u8, 47u8, 219u8, 132u8, 254u8, 234u8, 43u8, 200u8, 104u8,
							149u8, 250u8, 169u8, 119u8, 208u8, 111u8, 184u8, 70u8, 161u8, 245u8,
							33u8,
						] {
						let call = SetSubs { subs };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Clear an account's identity info and all sub-accounts and return all deposits."]
				#[doc = ""]
				#[doc = "Payment: All reserved balances on the account are returned."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
				#[doc = "identity."]
				#[doc = ""]
				#[doc = "Emits `IdentityCleared` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(R + S + X)`"]
				#[doc = "  - where `R` registrar-count (governance-bounded)."]
				#[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
				#[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)."]
				#[doc = "- One balance-unreserve operation."]
				#[doc = "- `2` storage reads and `S + 2` storage deletions."]
				#[doc = "- One event."]
				#[doc = "# </weight>"]
				pub fn clear_identity(
					&self,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ClearIdentity,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ClearIdentity>()?
					};
					if runtime_call_hash ==
						[
							75u8, 44u8, 74u8, 122u8, 149u8, 202u8, 114u8, 230u8, 0u8, 255u8, 140u8,
							122u8, 14u8, 196u8, 205u8, 249u8, 220u8, 94u8, 216u8, 34u8, 63u8, 14u8,
							8u8, 205u8, 74u8, 23u8, 181u8, 129u8, 252u8, 110u8, 231u8, 114u8,
						] {
						let call = ClearIdentity {};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Request a judgement from a registrar."]
				#[doc = ""]
				#[doc = "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement"]
				#[doc = "given."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
				#[doc = "registered identity."]
				#[doc = ""]
				#[doc = "- `reg_index`: The index of the registrar whose judgement is requested."]
				#[doc = "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:"]
				#[doc = ""]
				#[doc = "```nocompile"]
				#[doc = "Self::registrars().get(reg_index).unwrap().fee"]
				#[doc = "```"]
				#[doc = ""]
				#[doc = "Emits `JudgementRequested` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(R + X)`."]
				#[doc = "- One balance-reserve operation."]
				#[doc = "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`."]
				#[doc = "- One event."]
				#[doc = "# </weight>"]
				pub fn request_judgement(
					&self,
					reg_index: ::core::primitive::u32,
					max_fee: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RequestJudgement,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RequestJudgement>()?
					};
					if runtime_call_hash ==
						[
							90u8, 137u8, 162u8, 2u8, 124u8, 245u8, 7u8, 200u8, 235u8, 138u8, 217u8,
							247u8, 77u8, 87u8, 152u8, 2u8, 13u8, 175u8, 106u8, 202u8, 204u8, 113u8,
							24u8, 127u8, 105u8, 136u8, 191u8, 133u8, 212u8, 138u8, 22u8, 173u8,
						] {
						let call = RequestJudgement { reg_index, max_fee };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Cancel a previous request."]
				#[doc = ""]
				#[doc = "Payment: A previously reserved deposit is returned on success."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
				#[doc = "registered identity."]
				#[doc = ""]
				#[doc = "- `reg_index`: The index of the registrar whose judgement is no longer requested."]
				#[doc = ""]
				#[doc = "Emits `JudgementUnrequested` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(R + X)`."]
				#[doc = "- One balance-reserve operation."]
				#[doc = "- One storage mutation `O(R + X)`."]
				#[doc = "- One event"]
				#[doc = "# </weight>"]
				pub fn cancel_request(
					&self,
					reg_index: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						CancelRequest,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<CancelRequest>()?
					};
					if runtime_call_hash ==
						[
							153u8, 44u8, 7u8, 70u8, 91u8, 44u8, 138u8, 219u8, 118u8, 67u8, 166u8,
							133u8, 90u8, 234u8, 248u8, 42u8, 108u8, 51u8, 229u8, 196u8, 74u8,
							167u8, 40u8, 229u8, 168u8, 159u8, 2u8, 231u8, 236u8, 58u8, 109u8, 32u8,
						] {
						let call = CancelRequest { reg_index };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Set the fee required for a judgement to be requested from a registrar."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
				#[doc = "of the registrar whose index is `index`."]
				#[doc = ""]
				#[doc = "- `index`: the index of the registrar whose fee is to be set."]
				#[doc = "- `fee`: the new fee."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(R)`."]
				#[doc = "- One storage mutation `O(R)`."]
				#[doc = "- Benchmark: 7.315 + R * 0.329 µs (min squares analysis)"]
				#[doc = "# </weight>"]
				pub fn set_fee(
					&self,
					index: ::core::primitive::u32,
					fee: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, SetFee, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetFee>()?
					};
					if runtime_call_hash ==
						[
							222u8, 115u8, 155u8, 44u8, 68u8, 179u8, 201u8, 247u8, 141u8, 226u8,
							124u8, 20u8, 188u8, 47u8, 190u8, 21u8, 212u8, 192u8, 213u8, 76u8,
							241u8, 75u8, 87u8, 142u8, 157u8, 229u8, 136u8, 254u8, 250u8, 28u8,
							69u8, 218u8,
						] {
						let call = SetFee { index, fee };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Change the account associated with a registrar."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
				#[doc = "of the registrar whose index is `index`."]
				#[doc = ""]
				#[doc = "- `index`: the index of the registrar whose fee is to be set."]
				#[doc = "- `new`: the new account ID."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(R)`."]
				#[doc = "- One storage mutation `O(R)`."]
				#[doc = "- Benchmark: 8.823 + R * 0.32 µs (min squares analysis)"]
				#[doc = "# </weight>"]
				pub fn set_account_id(
					&self,
					index: ::core::primitive::u32,
					new: ::subxt::sp_core::crypto::AccountId32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetAccountId,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetAccountId>()?
					};
					if runtime_call_hash ==
						[
							191u8, 243u8, 30u8, 116u8, 109u8, 235u8, 23u8, 106u8, 24u8, 23u8, 80u8,
							203u8, 68u8, 40u8, 116u8, 38u8, 68u8, 161u8, 219u8, 64u8, 249u8, 179u8,
							203u8, 113u8, 55u8, 7u8, 180u8, 161u8, 37u8, 66u8, 6u8, 90u8,
						] {
						let call = SetAccountId { index, new };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Set the field information for a registrar."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
				#[doc = "of the registrar whose index is `index`."]
				#[doc = ""]
				#[doc = "- `index`: the index of the registrar whose fee is to be set."]
				#[doc = "- `fields`: the fields that the registrar concerns themselves with."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(R)`."]
				#[doc = "- One storage mutation `O(R)`."]
				#[doc = "- Benchmark: 7.464 + R * 0.325 µs (min squares analysis)"]
				#[doc = "# </weight>"]
				pub fn set_fields(
					&self,
					index: ::core::primitive::u32,
					fields: runtime_types::pallet_identity::types::BitFlags<
						runtime_types::pallet_identity::types::IdentityField,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetFields,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetFields>()?
					};
					if runtime_call_hash ==
						[
							253u8, 43u8, 154u8, 17u8, 161u8, 187u8, 72u8, 96u8, 20u8, 240u8, 97u8,
							43u8, 242u8, 79u8, 115u8, 38u8, 130u8, 243u8, 176u8, 46u8, 16u8, 126u8,
							191u8, 32u8, 106u8, 200u8, 134u8, 72u8, 244u8, 189u8, 165u8, 125u8,
						] {
						let call = SetFields { index, fields };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Provide a judgement for an account's identity."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
				#[doc = "of the registrar whose index is `reg_index`."]
				#[doc = ""]
				#[doc = "- `reg_index`: the index of the registrar whose judgement is being made."]
				#[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
				#[doc = "  with a registered identity."]
				#[doc = "- `judgement`: the judgement of the registrar of index `reg_index` about `target`."]
				#[doc = ""]
				#[doc = "Emits `JudgementGiven` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(R + X)`."]
				#[doc = "- One balance-transfer operation."]
				#[doc = "- Up to one account-lookup operation."]
				#[doc = "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`."]
				#[doc = "- One event."]
				#[doc = "# </weight>"]
				pub fn provide_judgement(
					&self,
					reg_index: ::core::primitive::u32,
					target: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					judgement: runtime_types::pallet_identity::types::Judgement<
						::core::primitive::u128,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ProvideJudgement,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ProvideJudgement>()?
					};
					if runtime_call_hash ==
						[
							212u8, 112u8, 44u8, 40u8, 54u8, 193u8, 162u8, 6u8, 65u8, 155u8, 136u8,
							154u8, 138u8, 42u8, 207u8, 177u8, 237u8, 105u8, 173u8, 128u8, 206u8,
							40u8, 2u8, 243u8, 53u8, 76u8, 104u8, 69u8, 37u8, 100u8, 86u8, 238u8,
						] {
						let call = ProvideJudgement { reg_index, target, judgement };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Remove an account's identity and sub-account information and slash the deposits."]
				#[doc = ""]
				#[doc = "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by"]
				#[doc = "`Slash`. Verification request deposits are not returned; they should be cancelled"]
				#[doc = "manually using `cancel_request`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must match `T::ForceOrigin`."]
				#[doc = ""]
				#[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
				#[doc = "  with a registered identity."]
				#[doc = ""]
				#[doc = "Emits `IdentityKilled` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(R + S + X)`."]
				#[doc = "- One balance-reserve operation."]
				#[doc = "- `S + 2` storage mutations."]
				#[doc = "- One event."]
				#[doc = "# </weight>"]
				pub fn kill_identity(
					&self,
					target: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						KillIdentity,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<KillIdentity>()?
					};
					if runtime_call_hash ==
						[
							115u8, 146u8, 51u8, 149u8, 116u8, 66u8, 97u8, 195u8, 125u8, 83u8,
							247u8, 65u8, 247u8, 229u8, 125u8, 108u8, 166u8, 31u8, 244u8, 12u8,
							244u8, 232u8, 16u8, 182u8, 158u8, 50u8, 19u8, 156u8, 69u8, 37u8, 209u8,
							155u8,
						] {
						let call = KillIdentity { target };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Add the given account to the sender's subs."]
				#[doc = ""]
				#[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
				#[doc = "to the sender."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
				#[doc = "sub identity of `sub`."]
				pub fn add_sub(
					&self,
					sub: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					data: runtime_types::pallet_identity::types::Data,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, AddSub, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<AddSub>()?
					};
					if runtime_call_hash ==
						[
							193u8, 3u8, 191u8, 61u8, 212u8, 241u8, 217u8, 103u8, 157u8, 91u8,
							230u8, 102u8, 88u8, 180u8, 62u8, 103u8, 120u8, 42u8, 174u8, 81u8,
							230u8, 178u8, 136u8, 158u8, 24u8, 139u8, 56u8, 22u8, 187u8, 84u8,
							173u8, 184u8,
						] {
						let call = AddSub { sub, data };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Alter the associated name of the given sub-account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
				#[doc = "sub identity of `sub`."]
				pub fn rename_sub(
					&self,
					sub: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					data: runtime_types::pallet_identity::types::Data,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RenameSub,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RenameSub>()?
					};
					if runtime_call_hash ==
						[
							40u8, 195u8, 42u8, 204u8, 68u8, 188u8, 133u8, 45u8, 31u8, 161u8, 135u8,
							167u8, 204u8, 31u8, 247u8, 237u8, 66u8, 140u8, 60u8, 230u8, 123u8,
							157u8, 17u8, 97u8, 4u8, 159u8, 127u8, 173u8, 141u8, 204u8, 176u8, 22u8,
						] {
						let call = RenameSub { sub, data };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Remove the given account from the sender's subs."]
				#[doc = ""]
				#[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
				#[doc = "to the sender."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
				#[doc = "sub identity of `sub`."]
				pub fn remove_sub(
					&self,
					sub: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RemoveSub,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RemoveSub>()?
					};
					if runtime_call_hash ==
						[
							77u8, 21u8, 44u8, 30u8, 175u8, 255u8, 127u8, 34u8, 74u8, 239u8, 52u8,
							210u8, 153u8, 164u8, 17u8, 66u8, 42u8, 124u8, 98u8, 221u8, 209u8,
							126u8, 255u8, 0u8, 241u8, 173u8, 86u8, 141u8, 224u8, 222u8, 13u8, 47u8,
						] {
						let call = RemoveSub { sub };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Remove the sender as a sub-account."]
				#[doc = ""]
				#[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
				#[doc = "to the sender (*not* the original depositor)."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
				#[doc = "super-identity."]
				#[doc = ""]
				#[doc = "NOTE: This should not normally be used, but is provided in the case that the non-"]
				#[doc = "controller of an account is maliciously registered as a sub-account."]
				pub fn quit_sub(
					&self,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						QuitSub,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<QuitSub>()?
					};
					if runtime_call_hash ==
						[
							62u8, 57u8, 73u8, 72u8, 119u8, 216u8, 250u8, 155u8, 57u8, 169u8, 157u8,
							44u8, 87u8, 51u8, 63u8, 231u8, 77u8, 7u8, 0u8, 119u8, 244u8, 42u8,
							179u8, 51u8, 254u8, 240u8, 55u8, 25u8, 142u8, 38u8, 87u8, 44u8,
						] {
						let call = QuitSub {};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_identity::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A name was set or reset (which will remove all judgements)."]
			pub struct IdentitySet {
				pub who: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Event for IdentitySet {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "IdentitySet";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A name was cleared, and the given balance returned."]
			pub struct IdentityCleared {
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::Event for IdentityCleared {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "IdentityCleared";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A name was removed and the given balance slashed."]
			pub struct IdentityKilled {
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::Event for IdentityKilled {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "IdentityKilled";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A judgement was asked from a registrar."]
			pub struct JudgementRequested {
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub registrar_index: ::core::primitive::u32,
			}
			impl ::subxt::Event for JudgementRequested {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "JudgementRequested";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A judgement request was retracted."]
			pub struct JudgementUnrequested {
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub registrar_index: ::core::primitive::u32,
			}
			impl ::subxt::Event for JudgementUnrequested {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "JudgementUnrequested";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A judgement was given by a registrar."]
			pub struct JudgementGiven {
				pub target: ::subxt::sp_core::crypto::AccountId32,
				pub registrar_index: ::core::primitive::u32,
			}
			impl ::subxt::Event for JudgementGiven {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "JudgementGiven";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "A registrar was added."]
			pub struct RegistrarAdded {
				pub registrar_index: ::core::primitive::u32,
			}
			impl ::subxt::Event for RegistrarAdded {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "RegistrarAdded";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A sub-identity was added to an identity and the deposit paid."]
			pub struct SubIdentityAdded {
				pub sub: ::subxt::sp_core::crypto::AccountId32,
				pub main: ::subxt::sp_core::crypto::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::Event for SubIdentityAdded {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "SubIdentityAdded";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A sub-identity was removed from an identity and the deposit freed."]
			pub struct SubIdentityRemoved {
				pub sub: ::subxt::sp_core::crypto::AccountId32,
				pub main: ::subxt::sp_core::crypto::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::Event for SubIdentityRemoved {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "SubIdentityRemoved";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A sub-identity was cleared, and the given deposit repatriated from the"]
			#[doc = "main identity account to the sub-identity account."]
			pub struct SubIdentityRevoked {
				pub sub: ::subxt::sp_core::crypto::AccountId32,
				pub main: ::subxt::sp_core::crypto::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::Event for SubIdentityRevoked {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "SubIdentityRevoked";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct IdentityOf<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::StorageEntry for IdentityOf<'_> {
				const PALLET: &'static str = "Identity";
				const STORAGE: &'static str = "IdentityOf";
				type Value =
					runtime_types::pallet_identity::types::Registration<::core::primitive::u128>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct SuperOf<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::StorageEntry for SuperOf<'_> {
				const PALLET: &'static str = "Identity";
				const STORAGE: &'static str = "SuperOf";
				type Value = (
					::subxt::sp_core::crypto::AccountId32,
					runtime_types::pallet_identity::types::Data,
				);
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct SubsOf<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::StorageEntry for SubsOf<'_> {
				const PALLET: &'static str = "Identity";
				const STORAGE: &'static str = "SubsOf";
				type Value = (
					::core::primitive::u128,
					runtime_types::frame_support::storage::bounded_vec::BoundedVec<
						::subxt::sp_core::crypto::AccountId32,
					>,
				);
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct Registrars;
			impl ::subxt::StorageEntry for Registrars {
				const PALLET: &'static str = "Identity";
				const STORAGE: &'static str = "Registrars";
				type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
					::core::option::Option<
						runtime_types::pallet_identity::types::RegistrarInfo<
							::core::primitive::u128,
							::subxt::sp_core::crypto::AccountId32,
						>,
					>,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " Information that is pertinent to identify the entity behind an account."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
				pub fn identity_of(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_identity::types::Registration<
								::core::primitive::u128,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<IdentityOf>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								225u8, 101u8, 83u8, 137u8, 207u8, 77u8, 139u8, 227u8, 36u8, 100u8,
								14u8, 30u8, 197u8, 65u8, 248u8, 227u8, 175u8, 19u8, 189u8, 86u8,
								189u8, 244u8, 144u8, 137u8, 17u8, 249u8, 223u8, 200u8, 115u8,
								190u8, 225u8, 30u8,
							] {
							let entry = IdentityOf(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Information that is pertinent to identify the entity behind an account."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
				pub fn identity_of_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, IdentityOf<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<IdentityOf>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								225u8, 101u8, 83u8, 137u8, 207u8, 77u8, 139u8, 227u8, 36u8, 100u8,
								14u8, 30u8, 197u8, 65u8, 248u8, 227u8, 175u8, 19u8, 189u8, 86u8,
								189u8, 244u8, 144u8, 137u8, 17u8, 249u8, 223u8, 200u8, 115u8,
								190u8, 225u8, 30u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The super-identity of an alternative \"sub\" identity together with its name, within that"]
				#[doc = " context. If the account is not some other account's sub-identity, then just `None`."]
				pub fn super_of(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<(
							::subxt::sp_core::crypto::AccountId32,
							runtime_types::pallet_identity::types::Data,
						)>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<SuperOf>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								128u8, 234u8, 82u8, 152u8, 41u8, 4u8, 220u8, 41u8, 179u8, 131u8,
								72u8, 121u8, 131u8, 17u8, 40u8, 87u8, 186u8, 159u8, 209u8, 33u8,
								97u8, 28u8, 236u8, 196u8, 217u8, 15u8, 126u8, 197u8, 32u8, 165u8,
								78u8, 28u8,
							] {
							let entry = SuperOf(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The super-identity of an alternative \"sub\" identity together with its name, within that"]
				#[doc = " context. If the account is not some other account's sub-identity, then just `None`."]
				pub fn super_of_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, SuperOf<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<SuperOf>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								128u8, 234u8, 82u8, 152u8, 41u8, 4u8, 220u8, 41u8, 179u8, 131u8,
								72u8, 121u8, 131u8, 17u8, 40u8, 87u8, 186u8, 159u8, 209u8, 33u8,
								97u8, 28u8, 236u8, 196u8, 217u8, 15u8, 126u8, 197u8, 32u8, 165u8,
								78u8, 28u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Alternative \"sub\" identities of this account."]
				#[doc = ""]
				#[doc = " The first item is the deposit, the second is a vector of the accounts."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
				pub fn subs_of(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						(
							::core::primitive::u128,
							runtime_types::frame_support::storage::bounded_vec::BoundedVec<
								::subxt::sp_core::crypto::AccountId32,
							>,
						),
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<SubsOf>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								136u8, 240u8, 238u8, 121u8, 194u8, 242u8, 139u8, 155u8, 32u8,
								201u8, 123u8, 76u8, 116u8, 219u8, 193u8, 45u8, 251u8, 212u8, 46u8,
								194u8, 93u8, 30u8, 174u8, 133u8, 218u8, 147u8, 175u8, 38u8, 200u8,
								109u8, 104u8, 52u8,
							] {
							let entry = SubsOf(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Alternative \"sub\" identities of this account."]
				#[doc = ""]
				#[doc = " The first item is the deposit, the second is a vector of the accounts."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
				pub fn subs_of_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, SubsOf<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<SubsOf>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								136u8, 240u8, 238u8, 121u8, 194u8, 242u8, 139u8, 155u8, 32u8,
								201u8, 123u8, 76u8, 116u8, 219u8, 193u8, 45u8, 251u8, 212u8, 46u8,
								194u8, 93u8, 30u8, 174u8, 133u8, 218u8, 147u8, 175u8, 38u8, 200u8,
								109u8, 104u8, 52u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The set of registrars. Not expected to get very big as can only be added through a"]
				#[doc = " special origin (likely a council motion)."]
				#[doc = ""]
				#[doc = " The index into this can be cast to `RegistrarIndex` to get a valid value."]
				pub fn registrars(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::frame_support::storage::bounded_vec::BoundedVec<
							::core::option::Option<
								runtime_types::pallet_identity::types::RegistrarInfo<
									::core::primitive::u128,
									::subxt::sp_core::crypto::AccountId32,
								>,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Registrars>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								92u8, 161u8, 80u8, 77u8, 121u8, 65u8, 69u8, 26u8, 171u8, 158u8,
								66u8, 36u8, 81u8, 1u8, 79u8, 144u8, 188u8, 236u8, 88u8, 158u8,
								84u8, 100u8, 71u8, 86u8, 20u8, 68u8, 178u8, 164u8, 157u8, 105u8,
								58u8, 7u8,
							] {
							let entry = Registrars;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The amount held on deposit for a registered identity"]
				pub fn basic_deposit(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Identity", "BasicDeposit")? ==
						[
							238u8, 240u8, 121u8, 213u8, 179u8, 130u8, 97u8, 30u8, 250u8, 82u8,
							49u8, 43u8, 146u8, 210u8, 49u8, 25u8, 247u8, 245u8, 215u8, 184u8,
							181u8, 102u8, 103u8, 250u8, 217u8, 223u8, 4u8, 182u8, 199u8, 149u8,
							57u8, 255u8,
						] {
						let pallet = metadata.pallet("Identity")?;
						let constant = pallet.constant("BasicDeposit")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The amount held on deposit per additional field for a registered identity."]
				pub fn field_deposit(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Identity", "FieldDeposit")? ==
						[
							90u8, 26u8, 127u8, 113u8, 88u8, 209u8, 37u8, 61u8, 35u8, 151u8, 107u8,
							75u8, 159u8, 113u8, 66u8, 111u8, 147u8, 8u8, 104u8, 29u8, 197u8, 181u8,
							3u8, 107u8, 193u8, 231u8, 174u8, 22u8, 98u8, 204u8, 140u8, 248u8,
						] {
						let pallet = metadata.pallet("Identity")?;
						let constant = pallet.constant("FieldDeposit")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The amount held on deposit for a registered subaccount. This should account for the fact"]
				#[doc = " that one storage item's value will increase by the size of an account ID, and there will"]
				#[doc = " be another trie item whose value is the size of an account ID plus 32 bytes."]
				pub fn sub_account_deposit(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Identity", "SubAccountDeposit")? ==
						[
							181u8, 214u8, 14u8, 67u8, 144u8, 110u8, 31u8, 90u8, 194u8, 50u8, 8u8,
							130u8, 88u8, 74u8, 248u8, 185u8, 13u8, 149u8, 157u8, 200u8, 239u8,
							156u8, 50u8, 19u8, 75u8, 39u8, 65u8, 185u8, 232u8, 154u8, 21u8, 231u8,
						] {
						let pallet = metadata.pallet("Identity")?;
						let constant = pallet.constant("SubAccountDeposit")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The maximum number of sub-accounts allowed per identified account."]
				pub fn max_sub_accounts(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Identity", "MaxSubAccounts")? ==
						[
							214u8, 223u8, 188u8, 171u8, 115u8, 53u8, 80u8, 37u8, 217u8, 160u8,
							71u8, 30u8, 242u8, 82u8, 91u8, 178u8, 45u8, 80u8, 207u8, 196u8, 79u8,
							219u8, 60u8, 236u8, 70u8, 197u8, 226u8, 3u8, 94u8, 116u8, 196u8, 193u8,
						] {
						let pallet = metadata.pallet("Identity")?;
						let constant = pallet.constant("MaxSubAccounts")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O"]
				#[doc = " required to access an identity, but can be pretty high."]
				pub fn max_additional_fields(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Identity", "MaxAdditionalFields")? ==
						[
							169u8, 40u8, 150u8, 131u8, 248u8, 29u8, 142u8, 216u8, 197u8, 98u8,
							16u8, 152u8, 116u8, 129u8, 246u8, 17u8, 176u8, 124u8, 209u8, 10u8,
							95u8, 255u8, 188u8, 150u8, 146u8, 238u8, 37u8, 97u8, 7u8, 70u8, 165u8,
							44u8,
						] {
						let pallet = metadata.pallet("Identity")?;
						let constant = pallet.constant("MaxAdditionalFields")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " Maxmimum number of registrars allowed in the system. Needed to bound the complexity"]
				#[doc = " of, e.g., updating judgements."]
				pub fn max_registrars(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Identity", "MaxRegistrars")? ==
						[
							244u8, 192u8, 221u8, 2u8, 156u8, 127u8, 181u8, 34u8, 157u8, 97u8,
							138u8, 181u8, 239u8, 104u8, 35u8, 219u8, 116u8, 63u8, 84u8, 253u8,
							153u8, 243u8, 140u8, 209u8, 203u8, 123u8, 126u8, 9u8, 131u8, 188u8,
							135u8, 153u8,
						] {
						let pallet = metadata.pallet("Identity")?;
						let constant = pallet.constant("MaxRegistrars")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod multisig {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AsMultiThreshold1 {
				pub other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
				pub call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
			}
			impl ::subxt::Call for AsMultiThreshold1 {
				const PALLET: &'static str = "Multisig";
				const FUNCTION: &'static str = "as_multi_threshold_1";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AsMulti {
				pub threshold: ::core::primitive::u16,
				pub other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
				pub maybe_timepoint: ::core::option::Option<
					runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
				>,
				pub call: ::subxt::WrapperKeepOpaque<runtime_types::dali_runtime::Call>,
				pub store_call: ::core::primitive::bool,
				pub max_weight: ::core::primitive::u64,
			}
			impl ::subxt::Call for AsMulti {
				const PALLET: &'static str = "Multisig";
				const FUNCTION: &'static str = "as_multi";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ApproveAsMulti {
				pub threshold: ::core::primitive::u16,
				pub other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
				pub maybe_timepoint: ::core::option::Option<
					runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
				>,
				pub call_hash: [::core::primitive::u8; 32usize],
				pub max_weight: ::core::primitive::u64,
			}
			impl ::subxt::Call for ApproveAsMulti {
				const PALLET: &'static str = "Multisig";
				const FUNCTION: &'static str = "approve_as_multi";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct CancelAsMulti {
				pub threshold: ::core::primitive::u16,
				pub other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
				pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
				pub call_hash: [::core::primitive::u8; 32usize],
			}
			impl ::subxt::Call for CancelAsMulti {
				const PALLET: &'static str = "Multisig";
				const FUNCTION: &'static str = "cancel_as_multi";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
				#[doc = "multi-signature, but do not participate in the approval process."]
				#[doc = "- `call`: The call to be executed."]
				#[doc = ""]
				#[doc = "Result is equivalent to the dispatched result."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
				#[doc = "-------------------------------"]
				#[doc = "- DB Weight: None"]
				#[doc = "- Plus Call Weight"]
				#[doc = "# </weight>"]
				pub fn as_multi_threshold_1(
					&self,
					other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
					call: runtime_types::dali_runtime::Call,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						AsMultiThreshold1,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<AsMultiThreshold1>()?
					};
					if runtime_call_hash ==
						[
							82u8, 229u8, 222u8, 206u8, 20u8, 177u8, 83u8, 251u8, 74u8, 42u8, 252u8,
							145u8, 234u8, 44u8, 130u8, 216u8, 84u8, 201u8, 189u8, 35u8, 36u8,
							107u8, 117u8, 217u8, 211u8, 159u8, 138u8, 11u8, 164u8, 218u8, 92u8,
							82u8,
						] {
						let call = AsMultiThreshold1 {
							other_signatories,
							call: ::std::boxed::Box::new(call),
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
				#[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
				#[doc = ""]
				#[doc = "If there are enough, then dispatch the call."]
				#[doc = ""]
				#[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
				#[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
				#[doc = "is cancelled."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
				#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
				#[doc = "dispatch. May not be empty."]
				#[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
				#[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
				#[doc = "transaction index) of the first approval transaction."]
				#[doc = "- `call`: The call to be executed."]
				#[doc = ""]
				#[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
				#[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
				#[doc = ""]
				#[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
				#[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
				#[doc = "may be found in the deposited `MultisigExecuted` event."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(S + Z + Call)`."]
				#[doc = "- Up to one balance-reserve or unreserve operation."]
				#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
				#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
				#[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
				#[doc = "- One encode & hash, both of complexity `O(S)`."]
				#[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
				#[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
				#[doc = "- One event."]
				#[doc = "- The weight of the `call`."]
				#[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
				#[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
				#[doc = "-------------------------------"]
				#[doc = "- DB Weight:"]
				#[doc = "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
				#[doc = "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
				#[doc = "- Plus Call Weight"]
				#[doc = "# </weight>"]
				pub fn as_multi(
					&self,
					threshold: ::core::primitive::u16,
					other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
					maybe_timepoint: ::core::option::Option<
						runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
					>,
					call: ::subxt::WrapperKeepOpaque<runtime_types::dali_runtime::Call>,
					store_call: ::core::primitive::bool,
					max_weight: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						AsMulti,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<AsMulti>()?
					};
					if runtime_call_hash ==
						[
							190u8, 56u8, 128u8, 78u8, 80u8, 238u8, 227u8, 83u8, 229u8, 151u8,
							151u8, 129u8, 91u8, 168u8, 100u8, 192u8, 53u8, 97u8, 210u8, 20u8, 10u8,
							85u8, 249u8, 181u8, 21u8, 191u8, 221u8, 214u8, 192u8, 79u8, 1u8, 165u8,
						] {
						let call = AsMulti {
							threshold,
							other_signatories,
							maybe_timepoint,
							call,
							store_call,
							max_weight,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
				#[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
				#[doc = ""]
				#[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
				#[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
				#[doc = "is cancelled."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
				#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
				#[doc = "dispatch. May not be empty."]
				#[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
				#[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
				#[doc = "transaction index) of the first approval transaction."]
				#[doc = "- `call_hash`: The hash of the call to be executed."]
				#[doc = ""]
				#[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(S)`."]
				#[doc = "- Up to one balance-reserve or unreserve operation."]
				#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
				#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
				#[doc = "- One encode & hash, both of complexity `O(S)`."]
				#[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
				#[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
				#[doc = "- One event."]
				#[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
				#[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
				#[doc = "----------------------------------"]
				#[doc = "- DB Weight:"]
				#[doc = "    - Read: Multisig Storage, [Caller Account]"]
				#[doc = "    - Write: Multisig Storage, [Caller Account]"]
				#[doc = "# </weight>"]
				pub fn approve_as_multi(
					&self,
					threshold: ::core::primitive::u16,
					other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
					maybe_timepoint: ::core::option::Option<
						runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
					>,
					call_hash: [::core::primitive::u8; 32usize],
					max_weight: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ApproveAsMulti,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ApproveAsMulti>()?
					};
					if runtime_call_hash ==
						[
							114u8, 29u8, 118u8, 154u8, 91u8, 4u8, 127u8, 126u8, 190u8, 180u8, 57u8,
							112u8, 72u8, 8u8, 248u8, 126u8, 25u8, 190u8, 130u8, 86u8, 160u8, 164u8,
							76u8, 64u8, 25u8, 175u8, 132u8, 225u8, 147u8, 166u8, 12u8, 38u8,
						] {
						let call = ApproveAsMulti {
							threshold,
							other_signatories,
							maybe_timepoint,
							call_hash,
							max_weight,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
				#[doc = "for this operation will be unreserved on success."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
				#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
				#[doc = "dispatch. May not be empty."]
				#[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
				#[doc = "transaction for this dispatch."]
				#[doc = "- `call_hash`: The hash of the call to be executed."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(S)`."]
				#[doc = "- Up to one balance-reserve or unreserve operation."]
				#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
				#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
				#[doc = "- One encode & hash, both of complexity `O(S)`."]
				#[doc = "- One event."]
				#[doc = "- I/O: 1 read `O(S)`, one remove."]
				#[doc = "- Storage: removes one item."]
				#[doc = "----------------------------------"]
				#[doc = "- DB Weight:"]
				#[doc = "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls"]
				#[doc = "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls"]
				#[doc = "# </weight>"]
				pub fn cancel_as_multi(
					&self,
					threshold: ::core::primitive::u16,
					other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
					timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
					call_hash: [::core::primitive::u8; 32usize],
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						CancelAsMulti,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<CancelAsMulti>()?
					};
					if runtime_call_hash ==
						[
							195u8, 216u8, 37u8, 179u8, 9u8, 19u8, 238u8, 94u8, 156u8, 5u8, 120u8,
							78u8, 129u8, 99u8, 239u8, 142u8, 68u8, 12u8, 254u8, 46u8, 251u8, 8u8,
							193u8, 43u8, 37u8, 68u8, 249u8, 85u8, 163u8, 85u8, 193u8, 47u8,
						] {
						let call =
							CancelAsMulti { threshold, other_signatories, timepoint, call_hash };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_multisig::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A new multisig operation has begun."]
			pub struct NewMultisig {
				pub approving: ::subxt::sp_core::crypto::AccountId32,
				pub multisig: ::subxt::sp_core::crypto::AccountId32,
				pub call_hash: [::core::primitive::u8; 32usize],
			}
			impl ::subxt::Event for NewMultisig {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "NewMultisig";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A multisig operation has been approved by someone."]
			pub struct MultisigApproval {
				pub approving: ::subxt::sp_core::crypto::AccountId32,
				pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
				pub multisig: ::subxt::sp_core::crypto::AccountId32,
				pub call_hash: [::core::primitive::u8; 32usize],
			}
			impl ::subxt::Event for MultisigApproval {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "MultisigApproval";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A multisig operation has been executed."]
			pub struct MultisigExecuted {
				pub approving: ::subxt::sp_core::crypto::AccountId32,
				pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
				pub multisig: ::subxt::sp_core::crypto::AccountId32,
				pub call_hash: [::core::primitive::u8; 32usize],
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::Event for MultisigExecuted {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "MultisigExecuted";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A multisig operation has been cancelled."]
			pub struct MultisigCancelled {
				pub cancelling: ::subxt::sp_core::crypto::AccountId32,
				pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
				pub multisig: ::subxt::sp_core::crypto::AccountId32,
				pub call_hash: [::core::primitive::u8; 32usize],
			}
			impl ::subxt::Event for MultisigCancelled {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "MultisigCancelled";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct Multisigs<'a>(
				pub &'a ::subxt::sp_core::crypto::AccountId32,
				pub &'a [::core::primitive::u8; 32usize],
			);
			impl ::subxt::StorageEntry for Multisigs<'_> {
				const PALLET: &'static str = "Multisig";
				const STORAGE: &'static str = "Multisigs";
				type Value = runtime_types::pallet_multisig::Multisig<
					::core::primitive::u32,
					::core::primitive::u128,
					::subxt::sp_core::crypto::AccountId32,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct Calls<'a>(pub &'a [::core::primitive::u8; 32usize]);
			impl ::subxt::StorageEntry for Calls<'_> {
				const PALLET: &'static str = "Multisig";
				const STORAGE: &'static str = "Calls";
				type Value = (
					::subxt::WrapperKeepOpaque<runtime_types::dali_runtime::Call>,
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u128,
				);
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Identity,
					)])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The set of open multisig operations."]
				pub fn multisigs(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					_1: &'a [::core::primitive::u8; 32usize],
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_multisig::Multisig<
								::core::primitive::u32,
								::core::primitive::u128,
								::subxt::sp_core::crypto::AccountId32,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Multisigs>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								137u8, 130u8, 173u8, 65u8, 126u8, 244u8, 194u8, 167u8, 93u8, 174u8,
								104u8, 131u8, 115u8, 155u8, 93u8, 185u8, 54u8, 204u8, 155u8, 149u8,
								184u8, 24u8, 111u8, 40u8, 249u8, 215u8, 34u8, 251u8, 224u8, 110u8,
								202u8, 2u8,
							] {
							let entry = Multisigs(_0, _1);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The set of open multisig operations."]
				pub fn multisigs_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Multisigs<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Multisigs>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								137u8, 130u8, 173u8, 65u8, 126u8, 244u8, 194u8, 167u8, 93u8, 174u8,
								104u8, 131u8, 115u8, 155u8, 93u8, 185u8, 54u8, 204u8, 155u8, 149u8,
								184u8, 24u8, 111u8, 40u8, 249u8, 215u8, 34u8, 251u8, 224u8, 110u8,
								202u8, 2u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn calls(
					&self,
					_0: &'a [::core::primitive::u8; 32usize],
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<(
							::subxt::WrapperKeepOpaque<runtime_types::dali_runtime::Call>,
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						)>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Calls>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								94u8, 32u8, 157u8, 37u8, 161u8, 139u8, 89u8, 252u8, 161u8, 207u8,
								188u8, 253u8, 72u8, 41u8, 205u8, 136u8, 91u8, 236u8, 203u8, 234u8,
								153u8, 47u8, 202u8, 227u8, 151u8, 140u8, 32u8, 149u8, 122u8, 100u8,
								210u8, 88u8,
							] {
							let entry = Calls(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn calls_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Calls<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Calls>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								94u8, 32u8, 157u8, 37u8, 161u8, 139u8, 89u8, 252u8, 161u8, 207u8,
								188u8, 253u8, 72u8, 41u8, 205u8, 136u8, 91u8, 236u8, 203u8, 234u8,
								153u8, 47u8, 202u8, 227u8, 151u8, 140u8, 32u8, 149u8, 122u8, 100u8,
								210u8, 88u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The base amount of currency needed to reserve for creating a multisig execution or to"]
				#[doc = " store a dispatch call for later."]
				#[doc = ""]
				#[doc = " This is held for an additional storage item whose value size is"]
				#[doc = " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is"]
				#[doc = " `32 + sizeof(AccountId)` bytes."]
				pub fn deposit_base(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Multisig", "DepositBase")? ==
						[
							36u8, 243u8, 124u8, 235u8, 25u8, 12u8, 42u8, 104u8, 38u8, 208u8, 179u8,
							81u8, 216u8, 26u8, 90u8, 147u8, 34u8, 42u8, 214u8, 113u8, 121u8, 40u8,
							84u8, 121u8, 0u8, 160u8, 71u8, 168u8, 73u8, 124u8, 57u8, 244u8,
						] {
						let pallet = metadata.pallet("Multisig")?;
						let constant = pallet.constant("DepositBase")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The amount of currency needed per unit threshold when creating a multisig execution."]
				#[doc = ""]
				#[doc = " This is held for adding 32 bytes more into a pre-existing storage value."]
				pub fn deposit_factor(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Multisig", "DepositFactor")? ==
						[
							192u8, 31u8, 184u8, 59u8, 14u8, 64u8, 141u8, 131u8, 170u8, 223u8, 86u8,
							26u8, 116u8, 169u8, 126u8, 222u8, 117u8, 128u8, 40u8, 200u8, 21u8,
							31u8, 122u8, 93u8, 3u8, 223u8, 80u8, 162u8, 128u8, 174u8, 112u8, 79u8,
						] {
						let pallet = metadata.pallet("Multisig")?;
						let constant = pallet.constant("DepositFactor")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The maximum amount of signatories allowed in the multisig."]
				pub fn max_signatories(
					&self,
				) -> ::core::result::Result<::core::primitive::u16, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Multisig", "MaxSignatories")? ==
						[
							147u8, 45u8, 171u8, 176u8, 121u8, 128u8, 55u8, 85u8, 86u8, 151u8, 98u8,
							11u8, 135u8, 9u8, 203u8, 142u8, 62u8, 24u8, 89u8, 75u8, 188u8, 253u8,
							140u8, 194u8, 138u8, 144u8, 26u8, 106u8, 198u8, 61u8, 80u8, 8u8,
						] {
						let pallet = metadata.pallet("Multisig")?;
						let constant = pallet.constant("MaxSignatories")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod parachain_system {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetValidationData {
				pub data:
					runtime_types::cumulus_primitives_parachain_inherent::ParachainInherentData,
			}
			impl ::subxt::Call for SetValidationData {
				const PALLET: &'static str = "ParachainSystem";
				const FUNCTION: &'static str = "set_validation_data";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SudoSendUpwardMessage {
				pub message: ::std::vec::Vec<::core::primitive::u8>,
			}
			impl ::subxt::Call for SudoSendUpwardMessage {
				const PALLET: &'static str = "ParachainSystem";
				const FUNCTION: &'static str = "sudo_send_upward_message";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AuthorizeUpgrade {
				pub code_hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Call for AuthorizeUpgrade {
				const PALLET: &'static str = "ParachainSystem";
				const FUNCTION: &'static str = "authorize_upgrade";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct EnactAuthorizedUpgrade {
				pub code: ::std::vec::Vec<::core::primitive::u8>,
			}
			impl ::subxt::Call for EnactAuthorizedUpgrade {
				const PALLET: &'static str = "ParachainSystem";
				const FUNCTION: &'static str = "enact_authorized_upgrade";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Set the current validation data."]
				#[doc = ""]
				#[doc = "This should be invoked exactly once per block. It will panic at the finalization"]
				#[doc = "phase if the call was not invoked."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Inherent`"]
				#[doc = ""]
				#[doc = "As a side effect, this function upgrades the current validation function"]
				#[doc = "if the appropriate time has come."]
				pub fn set_validation_data(
					&self,
					data : runtime_types :: cumulus_primitives_parachain_inherent :: ParachainInherentData,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetValidationData,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetValidationData>()?
					};
					if runtime_call_hash ==
						[
							39u8, 225u8, 27u8, 249u8, 58u8, 153u8, 73u8, 121u8, 7u8, 162u8, 112u8,
							54u8, 125u8, 50u8, 254u8, 94u8, 142u8, 71u8, 83u8, 124u8, 175u8, 8u8,
							100u8, 208u8, 36u8, 206u8, 200u8, 101u8, 83u8, 110u8, 226u8, 179u8,
						] {
						let call = SetValidationData { data };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn sudo_send_upward_message(
					&self,
					message: ::std::vec::Vec<::core::primitive::u8>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SudoSendUpwardMessage,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SudoSendUpwardMessage>()?
					};
					if runtime_call_hash ==
						[
							49u8, 161u8, 67u8, 34u8, 72u8, 150u8, 52u8, 109u8, 63u8, 41u8, 41u8,
							245u8, 33u8, 194u8, 43u8, 148u8, 187u8, 59u8, 184u8, 121u8, 200u8,
							167u8, 235u8, 215u8, 208u8, 44u8, 85u8, 233u8, 177u8, 198u8, 157u8,
							134u8,
						] {
						let call = SudoSendUpwardMessage { message };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn authorize_upgrade(
					&self,
					code_hash: ::subxt::sp_core::H256,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						AuthorizeUpgrade,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<AuthorizeUpgrade>()?
					};
					if runtime_call_hash ==
						[
							202u8, 225u8, 158u8, 88u8, 109u8, 6u8, 3u8, 61u8, 208u8, 170u8, 97u8,
							83u8, 5u8, 132u8, 199u8, 62u8, 195u8, 53u8, 233u8, 8u8, 235u8, 112u8,
							186u8, 240u8, 223u8, 81u8, 181u8, 0u8, 151u8, 85u8, 153u8, 6u8,
						] {
						let call = AuthorizeUpgrade { code_hash };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn enact_authorized_upgrade(
					&self,
					code: ::std::vec::Vec<::core::primitive::u8>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						EnactAuthorizedUpgrade,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<EnactAuthorizedUpgrade>()?
					};
					if runtime_call_hash ==
						[
							210u8, 136u8, 47u8, 250u8, 122u8, 10u8, 208u8, 233u8, 122u8, 131u8,
							215u8, 134u8, 114u8, 143u8, 181u8, 32u8, 30u8, 221u8, 179u8, 84u8,
							98u8, 243u8, 136u8, 67u8, 206u8, 243u8, 190u8, 238u8, 177u8, 226u8,
							144u8, 103u8,
						] {
						let call = EnactAuthorizedUpgrade { code };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::cumulus_pallet_parachain_system::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "The validation function has been scheduled to apply."]
			pub struct ValidationFunctionStored;
			impl ::subxt::Event for ValidationFunctionStored {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "ValidationFunctionStored";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "The validation function was applied as of the contained relay chain block number."]
			pub struct ValidationFunctionApplied(pub ::core::primitive::u32);
			impl ::subxt::Event for ValidationFunctionApplied {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "ValidationFunctionApplied";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "The relay-chain aborted the upgrade process."]
			pub struct ValidationFunctionDiscarded;
			impl ::subxt::Event for ValidationFunctionDiscarded {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "ValidationFunctionDiscarded";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An upgrade has been authorized."]
			pub struct UpgradeAuthorized(pub ::subxt::sp_core::H256);
			impl ::subxt::Event for UpgradeAuthorized {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "UpgradeAuthorized";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "Some downward messages have been received and will be processed."]
			#[doc = "\\[ count \\]"]
			pub struct DownwardMessagesReceived(pub ::core::primitive::u32);
			impl ::subxt::Event for DownwardMessagesReceived {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "DownwardMessagesReceived";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Downward messages were processed using the given weight."]
			#[doc = "\\[ weight_used, result_mqc_head \\]"]
			pub struct DownwardMessagesProcessed(
				pub ::core::primitive::u64,
				pub ::subxt::sp_core::H256,
			);
			impl ::subxt::Event for DownwardMessagesProcessed {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "DownwardMessagesProcessed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct PendingValidationCode;
			impl ::subxt::StorageEntry for PendingValidationCode {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "PendingValidationCode";
				type Value = ::std::vec::Vec<::core::primitive::u8>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct NewValidationCode;
			impl ::subxt::StorageEntry for NewValidationCode {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "NewValidationCode";
				type Value = ::std::vec::Vec<::core::primitive::u8>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct ValidationData;
			impl ::subxt::StorageEntry for ValidationData {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "ValidationData";
				type Value = runtime_types::polkadot_primitives::v2::PersistedValidationData<
					::subxt::sp_core::H256,
					::core::primitive::u32,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct DidSetValidationCode;
			impl ::subxt::StorageEntry for DidSetValidationCode {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "DidSetValidationCode";
				type Value = ::core::primitive::bool;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct UpgradeRestrictionSignal;
			impl ::subxt::StorageEntry for UpgradeRestrictionSignal {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "UpgradeRestrictionSignal";
				type Value = ::core::option::Option<
					runtime_types::polkadot_primitives::v2::UpgradeRestriction,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct RelayStateProof;
			impl ::subxt::StorageEntry for RelayStateProof {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "RelayStateProof";
				type Value = runtime_types::sp_trie::storage_proof::StorageProof;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct RelevantMessagingState;
			impl ::subxt::StorageEntry for RelevantMessagingState {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "RelevantMessagingState";
				type Value = runtime_types :: cumulus_pallet_parachain_system :: relay_state_snapshot :: MessagingStateSnapshot ;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct HostConfiguration;
			impl ::subxt::StorageEntry for HostConfiguration {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "HostConfiguration";
				type Value = runtime_types::polkadot_primitives::v2::AbridgedHostConfiguration;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct LastDmqMqcHead;
			impl ::subxt::StorageEntry for LastDmqMqcHead {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "LastDmqMqcHead";
				type Value =
					runtime_types::cumulus_primitives_parachain_inherent::MessageQueueChain;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct LastHrmpMqcHeads;
			impl ::subxt::StorageEntry for LastHrmpMqcHeads {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "LastHrmpMqcHeads";
				type Value = ::subxt::KeyedVec<
					runtime_types::polkadot_parachain::primitives::Id,
					runtime_types::cumulus_primitives_parachain_inherent::MessageQueueChain,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct ProcessedDownwardMessages;
			impl ::subxt::StorageEntry for ProcessedDownwardMessages {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "ProcessedDownwardMessages";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct HrmpWatermark;
			impl ::subxt::StorageEntry for HrmpWatermark {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "HrmpWatermark";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct HrmpOutboundMessages;
			impl ::subxt::StorageEntry for HrmpOutboundMessages {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "HrmpOutboundMessages";
				type Value = ::std::vec::Vec<
					runtime_types::polkadot_core_primitives::OutboundHrmpMessage<
						runtime_types::polkadot_parachain::primitives::Id,
					>,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct UpwardMessages;
			impl ::subxt::StorageEntry for UpwardMessages {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "UpwardMessages";
				type Value = ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct PendingUpwardMessages;
			impl ::subxt::StorageEntry for PendingUpwardMessages {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "PendingUpwardMessages";
				type Value = ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct AnnouncedHrmpMessagesPerCandidate;
			impl ::subxt::StorageEntry for AnnouncedHrmpMessagesPerCandidate {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "AnnouncedHrmpMessagesPerCandidate";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct ReservedXcmpWeightOverride;
			impl ::subxt::StorageEntry for ReservedXcmpWeightOverride {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "ReservedXcmpWeightOverride";
				type Value = ::core::primitive::u64;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct ReservedDmpWeightOverride;
			impl ::subxt::StorageEntry for ReservedDmpWeightOverride {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "ReservedDmpWeightOverride";
				type Value = ::core::primitive::u64;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct AuthorizedUpgrade;
			impl ::subxt::StorageEntry for AuthorizedUpgrade {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "AuthorizedUpgrade";
				type Value = ::subxt::sp_core::H256;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct CustomValidationHeadData;
			impl ::subxt::StorageEntry for CustomValidationHeadData {
				const PALLET: &'static str = "ParachainSystem";
				const STORAGE: &'static str = "CustomValidationHeadData";
				type Value = ::std::vec::Vec<::core::primitive::u8>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " In case of a scheduled upgrade, this storage field contains the validation code to be applied."]
				#[doc = ""]
				#[doc = " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]"]
				#[doc = " which will result the next block process with the new validation code. This concludes the upgrade process."]
				#[doc = ""]
				#[doc = " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"]
				pub fn pending_validation_code(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::core::primitive::u8>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<PendingValidationCode>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								162u8, 35u8, 108u8, 76u8, 160u8, 93u8, 215u8, 84u8, 20u8, 249u8,
								57u8, 187u8, 88u8, 161u8, 15u8, 131u8, 213u8, 89u8, 140u8, 20u8,
								227u8, 204u8, 79u8, 176u8, 114u8, 119u8, 8u8, 7u8, 64u8, 15u8,
								90u8, 92u8,
							] {
							let entry = PendingValidationCode;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Validation code that is set by the parachain and is to be communicated to collator and"]
				#[doc = " consequently the relay-chain."]
				#[doc = ""]
				#[doc = " This will be cleared in `on_initialize` of each new block if no other pallet already set"]
				#[doc = " the value."]
				pub fn new_validation_code(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<NewValidationCode>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								224u8, 174u8, 53u8, 106u8, 240u8, 49u8, 48u8, 79u8, 219u8, 74u8,
								142u8, 166u8, 92u8, 204u8, 244u8, 200u8, 43u8, 169u8, 177u8, 207u8,
								190u8, 106u8, 180u8, 65u8, 245u8, 131u8, 134u8, 4u8, 53u8, 45u8,
								76u8, 3u8,
							] {
							let entry = NewValidationCode;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The [`PersistedValidationData`] set for this block."]
				#[doc = " This value is expected to be set only once per block and it's never stored"]
				#[doc = " in the trie."]
				pub fn validation_data(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::polkadot_primitives::v2::PersistedValidationData<
								::subxt::sp_core::H256,
								::core::primitive::u32,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ValidationData>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								172u8, 221u8, 162u8, 67u8, 105u8, 190u8, 232u8, 237u8, 46u8, 36u8,
								254u8, 224u8, 88u8, 242u8, 45u8, 20u8, 213u8, 211u8, 15u8, 25u8,
								231u8, 17u8, 41u8, 68u8, 33u8, 137u8, 127u8, 245u8, 219u8, 227u8,
								101u8, 55u8,
							] {
							let entry = ValidationData;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Were the validation data set to notify the relay chain?"]
				pub fn did_set_validation_code(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::bool, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<DidSetValidationCode>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								89u8, 83u8, 74u8, 174u8, 234u8, 188u8, 149u8, 78u8, 140u8, 17u8,
								92u8, 165u8, 243u8, 87u8, 59u8, 97u8, 135u8, 81u8, 192u8, 86u8,
								193u8, 187u8, 113u8, 22u8, 108u8, 83u8, 242u8, 208u8, 174u8, 40u8,
								49u8, 245u8,
							] {
							let entry = DidSetValidationCode;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " An option which indicates if the relay-chain restricts signalling a validation code upgrade."]
				#[doc = " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced"]
				#[doc = " candidate will be invalid."]
				#[doc = ""]
				#[doc = " This storage item is a mirror of the corresponding value for the current parachain from the"]
				#[doc = " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is"]
				#[doc = " set after the inherent."]
				pub fn upgrade_restriction_signal(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::polkadot_primitives::v2::UpgradeRestriction,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<UpgradeRestrictionSignal>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								61u8, 3u8, 26u8, 6u8, 88u8, 114u8, 109u8, 63u8, 7u8, 115u8, 245u8,
								198u8, 73u8, 234u8, 28u8, 228u8, 126u8, 27u8, 151u8, 18u8, 133u8,
								54u8, 144u8, 149u8, 246u8, 43u8, 83u8, 47u8, 77u8, 238u8, 10u8,
								196u8,
							] {
							let entry = UpgradeRestrictionSignal;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The state proof for the last relay parent block."]
				#[doc = ""]
				#[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
				#[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
				#[doc = ""]
				#[doc = " This data is also absent from the genesis."]
				pub fn relay_state_proof(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<runtime_types::sp_trie::storage_proof::StorageProof>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<RelayStateProof>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								27u8, 147u8, 163u8, 19u8, 86u8, 43u8, 249u8, 170u8, 182u8, 35u8,
								117u8, 251u8, 0u8, 213u8, 86u8, 243u8, 43u8, 104u8, 190u8, 252u8,
								183u8, 118u8, 233u8, 116u8, 181u8, 134u8, 133u8, 221u8, 203u8,
								202u8, 181u8, 209u8,
							] {
							let entry = RelayStateProof;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The snapshot of some state related to messaging relevant to the current parachain as per"]
				#[doc = " the relay parent."]
				#[doc = ""]
				#[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
				#[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
				#[doc = ""]
				#[doc = " This data is also absent from the genesis."]				pub fn relevant_messaging_state (& self , block_hash : :: core :: option :: Option < T :: Hash > ,) -> impl :: core :: future :: Future < Output = :: core :: result :: Result < :: core :: option :: Option < runtime_types :: cumulus_pallet_parachain_system :: relay_state_snapshot :: MessagingStateSnapshot > , :: subxt :: BasicError > > + 'a{
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<RelevantMessagingState>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								10u8, 168u8, 63u8, 15u8, 50u8, 249u8, 199u8, 12u8, 123u8, 226u8,
								71u8, 245u8, 201u8, 1u8, 203u8, 39u8, 36u8, 92u8, 238u8, 226u8,
								252u8, 199u8, 82u8, 110u8, 90u8, 224u8, 175u8, 160u8, 214u8, 130u8,
								151u8, 33u8,
							] {
							let entry = RelevantMessagingState;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The parachain host configuration that was obtained from the relay parent."]
				#[doc = ""]
				#[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
				#[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
				#[doc = ""]
				#[doc = " This data is also absent from the genesis."]
				pub fn host_configuration(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::polkadot_primitives::v2::AbridgedHostConfiguration,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<HostConfiguration>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								233u8, 213u8, 93u8, 115u8, 53u8, 137u8, 177u8, 87u8, 197u8, 199u8,
								214u8, 125u8, 20u8, 233u8, 210u8, 175u8, 44u8, 220u8, 30u8, 73u8,
								203u8, 192u8, 205u8, 160u8, 217u8, 139u8, 64u8, 114u8, 250u8, 69u8,
								15u8, 255u8,
							] {
							let entry = HostConfiguration;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The last downward message queue chain head we have observed."]
				#[doc = ""]
				#[doc = " This value is loaded before and saved after processing inbound downward messages carried"]
				#[doc = " by the system inherent."]
				pub fn last_dmq_mqc_head(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::cumulus_primitives_parachain_inherent::MessageQueueChain,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<LastDmqMqcHead>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								103u8, 3u8, 35u8, 115u8, 36u8, 179u8, 42u8, 120u8, 119u8, 11u8,
								134u8, 14u8, 45u8, 199u8, 152u8, 251u8, 47u8, 92u8, 87u8, 197u8,
								2u8, 143u8, 209u8, 86u8, 54u8, 177u8, 53u8, 117u8, 11u8, 204u8,
								27u8, 68u8,
							] {
							let entry = LastDmqMqcHead;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The message queue chain heads we have observed per each channel incoming channel."]
				#[doc = ""]
				#[doc = " This value is loaded before and saved after processing inbound downward messages carried"]
				#[doc = " by the system inherent."]
				pub fn last_hrmp_mqc_heads(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyedVec<
							runtime_types::polkadot_parachain::primitives::Id,
							runtime_types::cumulus_primitives_parachain_inherent::MessageQueueChain,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<LastHrmpMqcHeads>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								220u8, 111u8, 102u8, 164u8, 31u8, 33u8, 206u8, 150u8, 56u8, 113u8,
								189u8, 215u8, 183u8, 80u8, 134u8, 149u8, 226u8, 233u8, 61u8, 150u8,
								233u8, 16u8, 215u8, 235u8, 7u8, 53u8, 46u8, 188u8, 65u8, 100u8,
								84u8, 7u8,
							] {
							let entry = LastHrmpMqcHeads;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Number of downward messages processed in a block."]
				#[doc = ""]
				#[doc = " This will be cleared in `on_initialize` of each new block."]
				pub fn processed_downward_messages(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ProcessedDownwardMessages>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								48u8, 177u8, 84u8, 228u8, 101u8, 235u8, 181u8, 27u8, 66u8, 55u8,
								50u8, 146u8, 245u8, 223u8, 77u8, 132u8, 178u8, 80u8, 74u8, 90u8,
								166u8, 81u8, 109u8, 25u8, 91u8, 69u8, 5u8, 69u8, 123u8, 197u8,
								160u8, 146u8,
							] {
							let entry = ProcessedDownwardMessages;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " HRMP watermark that was set in a block."]
				#[doc = ""]
				#[doc = " This will be cleared in `on_initialize` of each new block."]
				pub fn hrmp_watermark(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<HrmpWatermark>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								189u8, 59u8, 183u8, 195u8, 69u8, 185u8, 241u8, 226u8, 62u8, 204u8,
								230u8, 77u8, 102u8, 75u8, 86u8, 157u8, 249u8, 140u8, 219u8, 72u8,
								94u8, 64u8, 176u8, 72u8, 34u8, 205u8, 114u8, 103u8, 231u8, 233u8,
								206u8, 111u8,
							] {
							let entry = HrmpWatermark;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " HRMP messages that were sent in a block."]
				#[doc = ""]
				#[doc = " This will be cleared in `on_initialize` of each new block."]
				pub fn hrmp_outbound_messages(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<
							runtime_types::polkadot_core_primitives::OutboundHrmpMessage<
								runtime_types::polkadot_parachain::primitives::Id,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<HrmpOutboundMessages>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								117u8, 161u8, 141u8, 250u8, 88u8, 41u8, 18u8, 251u8, 19u8, 199u8,
								211u8, 142u8, 42u8, 81u8, 27u8, 17u8, 225u8, 31u8, 62u8, 248u8,
								13u8, 154u8, 129u8, 243u8, 7u8, 44u8, 221u8, 249u8, 218u8, 6u8,
								75u8, 210u8,
							] {
							let entry = HrmpOutboundMessages;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Upward messages that were sent in a block."]
				#[doc = ""]
				#[doc = " This will be cleared in `on_initialize` of each new block."]
				pub fn upward_messages(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<UpwardMessages>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								129u8, 208u8, 187u8, 36u8, 48u8, 108u8, 135u8, 56u8, 204u8, 60u8,
								100u8, 158u8, 113u8, 238u8, 46u8, 92u8, 228u8, 41u8, 178u8, 177u8,
								208u8, 195u8, 148u8, 149u8, 127u8, 21u8, 93u8, 92u8, 29u8, 115u8,
								10u8, 248u8,
							] {
							let entry = UpwardMessages;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Upward messages that are still pending and not yet send to the relay chain."]
				pub fn pending_upward_messages(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<PendingUpwardMessages>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								223u8, 46u8, 224u8, 227u8, 222u8, 119u8, 225u8, 244u8, 59u8, 87u8,
								127u8, 19u8, 217u8, 237u8, 103u8, 61u8, 6u8, 210u8, 107u8, 201u8,
								117u8, 25u8, 85u8, 248u8, 36u8, 231u8, 28u8, 202u8, 41u8, 140u8,
								208u8, 254u8,
							] {
							let entry = PendingUpwardMessages;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The number of HRMP messages we observed in `on_initialize` and thus used that number for"]
				#[doc = " announcing the weight of `on_initialize` and `on_finalize`."]
				pub fn announced_hrmp_messages_per_candidate(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AnnouncedHrmpMessagesPerCandidate>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								132u8, 61u8, 162u8, 129u8, 251u8, 243u8, 20u8, 144u8, 162u8, 73u8,
								237u8, 51u8, 248u8, 41u8, 127u8, 171u8, 180u8, 79u8, 137u8, 23u8,
								66u8, 134u8, 106u8, 222u8, 182u8, 154u8, 0u8, 145u8, 184u8, 156u8,
								36u8, 97u8,
							] {
							let entry = AnnouncedHrmpMessagesPerCandidate;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The weight we reserve at the beginning of the block for processing XCMP messages. This"]
				#[doc = " overrides the amount set in the Config trait."]
				pub fn reserved_xcmp_weight_override(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::core::primitive::u64>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ReservedXcmpWeightOverride>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								250u8, 177u8, 18u8, 183u8, 23u8, 84u8, 14u8, 178u8, 92u8, 60u8,
								210u8, 155u8, 63u8, 58u8, 105u8, 196u8, 184u8, 235u8, 145u8, 11u8,
								215u8, 121u8, 60u8, 140u8, 14u8, 50u8, 185u8, 101u8, 210u8, 230u8,
								180u8, 250u8,
							] {
							let entry = ReservedXcmpWeightOverride;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The weight we reserve at the beginning of the block for processing DMP messages. This"]
				#[doc = " overrides the amount set in the Config trait."]
				pub fn reserved_dmp_weight_override(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::core::primitive::u64>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ReservedDmpWeightOverride>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								20u8, 145u8, 152u8, 245u8, 73u8, 101u8, 125u8, 190u8, 151u8, 180u8,
								22u8, 157u8, 58u8, 115u8, 165u8, 167u8, 117u8, 166u8, 201u8, 10u8,
								206u8, 255u8, 206u8, 40u8, 40u8, 63u8, 228u8, 53u8, 58u8, 47u8,
								121u8, 76u8,
							] {
							let entry = ReservedDmpWeightOverride;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The next authorized upgrade, if there is one."]
				pub fn authorized_upgrade(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::subxt::sp_core::H256>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AuthorizedUpgrade>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								162u8, 253u8, 211u8, 241u8, 158u8, 137u8, 172u8, 159u8, 193u8,
								182u8, 156u8, 218u8, 210u8, 80u8, 149u8, 115u8, 199u8, 196u8, 61u8,
								205u8, 167u8, 24u8, 183u8, 183u8, 19u8, 199u8, 55u8, 75u8, 142u8,
								125u8, 192u8, 202u8,
							] {
							let entry = AuthorizedUpgrade;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " A custom head data that should be returned as result of `validate_block`."]
				#[doc = ""]
				#[doc = " See [`Pallet::set_custom_validation_head_data`] for more information."]
				pub fn custom_validation_head_data(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<CustomValidationHeadData>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								189u8, 150u8, 234u8, 128u8, 111u8, 27u8, 173u8, 92u8, 109u8, 4u8,
								98u8, 103u8, 158u8, 19u8, 16u8, 5u8, 107u8, 135u8, 126u8, 170u8,
								62u8, 64u8, 149u8, 80u8, 33u8, 17u8, 83u8, 22u8, 176u8, 118u8,
								26u8, 223u8,
							] {
							let entry = CustomValidationHeadData;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
	}
	pub mod parachain_info {
		use super::{root_mod, runtime_types};
		pub mod storage {
			use super::runtime_types;
			pub struct ParachainId;
			impl ::subxt::StorageEntry for ParachainId {
				const PALLET: &'static str = "ParachainInfo";
				const STORAGE: &'static str = "ParachainId";
				type Value = runtime_types::polkadot_parachain::primitives::Id;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				pub fn parachain_id(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::polkadot_parachain::primitives::Id,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ParachainId>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								108u8, 199u8, 129u8, 85u8, 169u8, 54u8, 7u8, 32u8, 128u8, 184u8,
								180u8, 179u8, 182u8, 212u8, 83u8, 150u8, 166u8, 154u8, 160u8,
								103u8, 137u8, 115u8, 60u8, 124u8, 68u8, 90u8, 80u8, 100u8, 13u8,
								187u8, 22u8, 137u8,
							] {
							let entry = ParachainId;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
	}
	pub mod authorship {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetUncles {
				pub new_uncles: ::std::vec::Vec<
					runtime_types::sp_runtime::generic::header::Header<
						::core::primitive::u32,
						runtime_types::sp_runtime::traits::BlakeTwo256,
					>,
				>,
			}
			impl ::subxt::Call for SetUncles {
				const PALLET: &'static str = "Authorship";
				const FUNCTION: &'static str = "set_uncles";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Provide a set of uncles."]
				pub fn set_uncles(
					&self,
					new_uncles: ::std::vec::Vec<
						runtime_types::sp_runtime::generic::header::Header<
							::core::primitive::u32,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetUncles,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetUncles>()?
					};
					if runtime_call_hash ==
						[
							5u8, 56u8, 71u8, 152u8, 103u8, 232u8, 101u8, 171u8, 200u8, 2u8, 177u8,
							102u8, 0u8, 93u8, 210u8, 90u8, 56u8, 151u8, 5u8, 235u8, 227u8, 197u8,
							189u8, 248u8, 2u8, 71u8, 49u8, 220u8, 212u8, 253u8, 235u8, 67u8,
						] {
						let call = SetUncles { new_uncles };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct Uncles;
			impl ::subxt::StorageEntry for Uncles {
				const PALLET: &'static str = "Authorship";
				const STORAGE: &'static str = "Uncles";
				type Value = ::std::vec::Vec<
					runtime_types::pallet_authorship::UncleEntryItem<
						::core::primitive::u32,
						::subxt::sp_core::H256,
						::subxt::sp_core::crypto::AccountId32,
					>,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Author;
			impl ::subxt::StorageEntry for Author {
				const PALLET: &'static str = "Authorship";
				const STORAGE: &'static str = "Author";
				type Value = ::subxt::sp_core::crypto::AccountId32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct DidSetUncles;
			impl ::subxt::StorageEntry for DidSetUncles {
				const PALLET: &'static str = "Authorship";
				const STORAGE: &'static str = "DidSetUncles";
				type Value = ::core::primitive::bool;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " Uncles"]
				pub fn uncles(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<
							runtime_types::pallet_authorship::UncleEntryItem<
								::core::primitive::u32,
								::subxt::sp_core::H256,
								::subxt::sp_core::crypto::AccountId32,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Uncles>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								71u8, 135u8, 85u8, 172u8, 221u8, 165u8, 212u8, 2u8, 208u8, 50u8,
								9u8, 92u8, 251u8, 25u8, 194u8, 123u8, 210u8, 4u8, 148u8, 30u8,
								20u8, 146u8, 21u8, 210u8, 138u8, 128u8, 144u8, 152u8, 97u8, 57u8,
								205u8, 231u8,
							] {
							let entry = Uncles;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Author of current block."]
				pub fn author(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Author>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								191u8, 57u8, 3u8, 242u8, 220u8, 123u8, 103u8, 215u8, 149u8, 120u8,
								20u8, 139u8, 146u8, 234u8, 180u8, 105u8, 129u8, 128u8, 114u8,
								147u8, 114u8, 236u8, 23u8, 21u8, 15u8, 250u8, 180u8, 19u8, 177u8,
								145u8, 77u8, 228u8,
							] {
							let entry = Author;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Whether uncles were already set in this block."]
				pub fn did_set_uncles(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::bool, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<DidSetUncles>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								64u8, 3u8, 208u8, 187u8, 50u8, 45u8, 37u8, 88u8, 163u8, 226u8,
								37u8, 126u8, 232u8, 107u8, 156u8, 187u8, 29u8, 15u8, 53u8, 46u8,
								28u8, 73u8, 83u8, 123u8, 14u8, 244u8, 243u8, 43u8, 245u8, 143u8,
								15u8, 115u8,
							] {
							let entry = DidSetUncles;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The number of blocks back we should accept uncles."]
				#[doc = " This means that we will deal with uncle-parents that are"]
				#[doc = " `UncleGenerations + 1` before `now`."]
				pub fn uncle_generations(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Authorship", "UncleGenerations")? ==
						[
							0u8, 72u8, 57u8, 175u8, 222u8, 143u8, 191u8, 33u8, 163u8, 157u8, 202u8,
							83u8, 186u8, 103u8, 162u8, 103u8, 227u8, 158u8, 239u8, 212u8, 205u8,
							193u8, 226u8, 138u8, 5u8, 220u8, 221u8, 42u8, 7u8, 146u8, 173u8, 205u8,
						] {
						let pallet = metadata.pallet("Authorship")?;
						let constant = pallet.constant("UncleGenerations")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod collator_selection {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetInvulnerables {
				pub new: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
			}
			impl ::subxt::Call for SetInvulnerables {
				const PALLET: &'static str = "CollatorSelection";
				const FUNCTION: &'static str = "set_invulnerables";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct SetDesiredCandidates {
				pub max: ::core::primitive::u32,
			}
			impl ::subxt::Call for SetDesiredCandidates {
				const PALLET: &'static str = "CollatorSelection";
				const FUNCTION: &'static str = "set_desired_candidates";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct SetCandidacyBond {
				pub bond: ::core::primitive::u128,
			}
			impl ::subxt::Call for SetCandidacyBond {
				const PALLET: &'static str = "CollatorSelection";
				const FUNCTION: &'static str = "set_candidacy_bond";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RegisterAsCandidate;
			impl ::subxt::Call for RegisterAsCandidate {
				const PALLET: &'static str = "CollatorSelection";
				const FUNCTION: &'static str = "register_as_candidate";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct LeaveIntent;
			impl ::subxt::Call for LeaveIntent {
				const PALLET: &'static str = "CollatorSelection";
				const FUNCTION: &'static str = "leave_intent";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Set the list of invulnerable (fixed) collators."]
				pub fn set_invulnerables(
					&self,
					new: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetInvulnerables,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetInvulnerables>()?
					};
					if runtime_call_hash ==
						[
							147u8, 148u8, 230u8, 132u8, 108u8, 68u8, 229u8, 176u8, 25u8, 161u8,
							84u8, 123u8, 218u8, 134u8, 175u8, 81u8, 164u8, 126u8, 223u8, 105u8,
							212u8, 180u8, 65u8, 98u8, 254u8, 0u8, 252u8, 18u8, 159u8, 77u8, 51u8,
							150u8,
						] {
						let call = SetInvulnerables { new };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Set the ideal number of collators (not including the invulnerables)."]
				#[doc = "If lowering this number, then the number of running collators could be higher than this figure."]
				#[doc = "Aside from that edge case, there should be no other way to have more collators than the desired number."]
				pub fn set_desired_candidates(
					&self,
					max: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetDesiredCandidates,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetDesiredCandidates>()?
					};
					if runtime_call_hash ==
						[
							167u8, 161u8, 161u8, 25u8, 27u8, 34u8, 137u8, 171u8, 89u8, 126u8, 89u8,
							114u8, 219u8, 176u8, 83u8, 124u8, 156u8, 49u8, 188u8, 209u8, 39u8,
							138u8, 180u8, 47u8, 33u8, 162u8, 222u8, 74u8, 130u8, 117u8, 173u8,
							16u8,
						] {
						let call = SetDesiredCandidates { max };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Set the candidacy bond amount."]
				pub fn set_candidacy_bond(
					&self,
					bond: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetCandidacyBond,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetCandidacyBond>()?
					};
					if runtime_call_hash ==
						[
							128u8, 221u8, 132u8, 1u8, 215u8, 113u8, 188u8, 201u8, 197u8, 40u8,
							84u8, 60u8, 151u8, 237u8, 145u8, 70u8, 102u8, 48u8, 2u8, 2u8, 36u8,
							1u8, 99u8, 17u8, 98u8, 195u8, 131u8, 27u8, 47u8, 209u8, 197u8, 132u8,
						] {
						let call = SetCandidacyBond { bond };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Register this account as a collator candidate. The account must (a) already have"]
				#[doc = "registered session keys and (b) be able to reserve the `CandidacyBond`."]
				#[doc = ""]
				#[doc = "This call is not available to `Invulnerable` collators."]
				pub fn register_as_candidate(
					&self,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RegisterAsCandidate,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RegisterAsCandidate>()?
					};
					if runtime_call_hash ==
						[
							63u8, 11u8, 114u8, 142u8, 89u8, 78u8, 120u8, 214u8, 22u8, 215u8, 125u8,
							60u8, 203u8, 89u8, 141u8, 126u8, 124u8, 167u8, 70u8, 240u8, 85u8,
							253u8, 34u8, 245u8, 67u8, 46u8, 240u8, 195u8, 57u8, 81u8, 138u8, 69u8,
						] {
						let call = RegisterAsCandidate {};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Deregister `origin` as a collator candidate. Note that the collator can only leave on"]
				#[doc = "session change. The `CandidacyBond` will be unreserved immediately."]
				#[doc = ""]
				#[doc = "This call will fail if the total number of candidates would drop below `MinCandidates`."]
				#[doc = ""]
				#[doc = "This call is not available to `Invulnerable` collators."]
				pub fn leave_intent(
					&self,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						LeaveIntent,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<LeaveIntent>()?
					};
					if runtime_call_hash ==
						[
							217u8, 3u8, 35u8, 71u8, 152u8, 203u8, 203u8, 212u8, 25u8, 113u8, 158u8,
							124u8, 161u8, 154u8, 32u8, 47u8, 116u8, 134u8, 11u8, 201u8, 154u8,
							40u8, 138u8, 163u8, 184u8, 188u8, 33u8, 237u8, 219u8, 40u8, 63u8,
							221u8,
						] {
						let call = LeaveIntent {};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_collator_selection::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct NewInvulnerables(pub ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>);
			impl ::subxt::Event for NewInvulnerables {
				const PALLET: &'static str = "CollatorSelection";
				const EVENT: &'static str = "NewInvulnerables";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct NewDesiredCandidates(pub ::core::primitive::u32);
			impl ::subxt::Event for NewDesiredCandidates {
				const PALLET: &'static str = "CollatorSelection";
				const EVENT: &'static str = "NewDesiredCandidates";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct NewCandidacyBond(pub ::core::primitive::u128);
			impl ::subxt::Event for NewCandidacyBond {
				const PALLET: &'static str = "CollatorSelection";
				const EVENT: &'static str = "NewCandidacyBond";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct CandidateAdded(
				pub ::subxt::sp_core::crypto::AccountId32,
				pub ::core::primitive::u128,
			);
			impl ::subxt::Event for CandidateAdded {
				const PALLET: &'static str = "CollatorSelection";
				const EVENT: &'static str = "CandidateAdded";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct CandidateRemoved(pub ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::Event for CandidateRemoved {
				const PALLET: &'static str = "CollatorSelection";
				const EVENT: &'static str = "CandidateRemoved";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct Invulnerables;
			impl ::subxt::StorageEntry for Invulnerables {
				const PALLET: &'static str = "CollatorSelection";
				const STORAGE: &'static str = "Invulnerables";
				type Value = ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Candidates;
			impl ::subxt::StorageEntry for Candidates {
				const PALLET: &'static str = "CollatorSelection";
				const STORAGE: &'static str = "Candidates";
				type Value = ::std::vec::Vec<
					runtime_types::pallet_collator_selection::pallet::CandidateInfo<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u128,
					>,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct LastAuthoredBlock<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::StorageEntry for LastAuthoredBlock<'_> {
				const PALLET: &'static str = "CollatorSelection";
				const STORAGE: &'static str = "LastAuthoredBlock";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct DesiredCandidates;
			impl ::subxt::StorageEntry for DesiredCandidates {
				const PALLET: &'static str = "CollatorSelection";
				const STORAGE: &'static str = "DesiredCandidates";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct CandidacyBond;
			impl ::subxt::StorageEntry for CandidacyBond {
				const PALLET: &'static str = "CollatorSelection";
				const STORAGE: &'static str = "CandidacyBond";
				type Value = ::core::primitive::u128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The invulnerable, fixed collators."]
				pub fn invulnerables(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Invulnerables>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								103u8, 93u8, 29u8, 166u8, 244u8, 19u8, 78u8, 182u8, 235u8, 37u8,
								199u8, 127u8, 211u8, 124u8, 168u8, 145u8, 111u8, 251u8, 33u8, 36u8,
								167u8, 119u8, 124u8, 206u8, 205u8, 14u8, 186u8, 68u8, 16u8, 150u8,
								45u8, 158u8,
							] {
							let entry = Invulnerables;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The (community, limited) collation candidates."]
				pub fn candidates(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<
							runtime_types::pallet_collator_selection::pallet::CandidateInfo<
								::subxt::sp_core::crypto::AccountId32,
								::core::primitive::u128,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Candidates>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								249u8, 206u8, 40u8, 15u8, 9u8, 10u8, 173u8, 200u8, 141u8, 154u8,
								232u8, 31u8, 20u8, 129u8, 99u8, 96u8, 187u8, 128u8, 10u8, 208u8,
								198u8, 123u8, 197u8, 219u8, 242u8, 23u8, 110u8, 34u8, 220u8, 224u8,
								68u8, 161u8,
							] {
							let entry = Candidates;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Last block authored by collator."]
				pub fn last_authored_block(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<LastAuthoredBlock>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								31u8, 13u8, 209u8, 126u8, 134u8, 83u8, 102u8, 173u8, 231u8, 231u8,
								65u8, 155u8, 145u8, 135u8, 166u8, 140u8, 35u8, 32u8, 150u8, 177u8,
								205u8, 188u8, 216u8, 226u8, 121u8, 190u8, 41u8, 179u8, 244u8,
								254u8, 54u8, 149u8,
							] {
							let entry = LastAuthoredBlock(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Last block authored by collator."]
				pub fn last_authored_block_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, LastAuthoredBlock<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<LastAuthoredBlock>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								31u8, 13u8, 209u8, 126u8, 134u8, 83u8, 102u8, 173u8, 231u8, 231u8,
								65u8, 155u8, 145u8, 135u8, 166u8, 140u8, 35u8, 32u8, 150u8, 177u8,
								205u8, 188u8, 216u8, 226u8, 121u8, 190u8, 41u8, 179u8, 244u8,
								254u8, 54u8, 149u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Desired number of candidates."]
				#[doc = ""]
				#[doc = " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."]
				pub fn desired_candidates(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<DesiredCandidates>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								161u8, 170u8, 254u8, 76u8, 112u8, 146u8, 144u8, 7u8, 177u8, 152u8,
								146u8, 60u8, 143u8, 237u8, 1u8, 168u8, 176u8, 33u8, 103u8, 35u8,
								39u8, 233u8, 107u8, 253u8, 47u8, 183u8, 11u8, 86u8, 230u8, 13u8,
								127u8, 133u8,
							] {
							let entry = DesiredCandidates;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Fixed amount to deposit to become a collator."]
				#[doc = ""]
				#[doc = " When a collator calls `leave_intent` they immediately receive the deposit back."]
				pub fn candidacy_bond(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<CandidacyBond>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								1u8, 153u8, 211u8, 74u8, 138u8, 178u8, 81u8, 9u8, 205u8, 117u8,
								102u8, 182u8, 56u8, 184u8, 56u8, 62u8, 193u8, 82u8, 224u8, 218u8,
								253u8, 194u8, 250u8, 55u8, 220u8, 107u8, 157u8, 175u8, 62u8, 35u8,
								224u8, 183u8,
							] {
							let entry = CandidacyBond;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
	}
	pub mod session {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetKeys {
				pub keys: runtime_types::dali_runtime::opaque::SessionKeys,
				pub proof: ::std::vec::Vec<::core::primitive::u8>,
			}
			impl ::subxt::Call for SetKeys {
				const PALLET: &'static str = "Session";
				const FUNCTION: &'static str = "set_keys";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct PurgeKeys;
			impl ::subxt::Call for PurgeKeys {
				const PALLET: &'static str = "Session";
				const FUNCTION: &'static str = "purge_keys";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Sets the session key(s) of the function caller to `keys`."]
				#[doc = "Allows an account to set its session key prior to becoming a validator."]
				#[doc = "This doesn't take effect until the next session."]
				#[doc = ""]
				#[doc = "The dispatch origin of this function must be signed."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: `O(1)`. Actual cost depends on the number of length of"]
				#[doc = "  `T::Keys::key_ids()` which is fixed."]
				#[doc = "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`"]
				#[doc = "- DbWrites: `origin account`, `NextKeys`"]
				#[doc = "- DbReads per key id: `KeyOwner`"]
				#[doc = "- DbWrites per key id: `KeyOwner`"]
				#[doc = "# </weight>"]
				pub fn set_keys(
					&self,
					keys: runtime_types::dali_runtime::opaque::SessionKeys,
					proof: ::std::vec::Vec<::core::primitive::u8>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetKeys,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetKeys>()?
					};
					if runtime_call_hash ==
						[
							240u8, 174u8, 244u8, 95u8, 15u8, 73u8, 108u8, 183u8, 164u8, 138u8,
							122u8, 226u8, 146u8, 189u8, 211u8, 93u8, 251u8, 222u8, 161u8, 232u8,
							253u8, 4u8, 150u8, 5u8, 169u8, 142u8, 85u8, 137u8, 227u8, 90u8, 183u8,
							204u8,
						] {
						let call = SetKeys { keys, proof };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Removes any session key(s) of the function caller."]
				#[doc = ""]
				#[doc = "This doesn't take effect until the next session."]
				#[doc = ""]
				#[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
				#[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
				#[doc = "means being a controller account) or directly convertible into a validator ID (which"]
				#[doc = "usually means being a stash account)."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length"]
				#[doc = "  of `T::Keys::key_ids()` which is fixed."]
				#[doc = "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`"]
				#[doc = "- DbWrites: `NextKeys`, `origin account`"]
				#[doc = "- DbWrites per key id: `KeyOwner`"]
				#[doc = "# </weight>"]
				pub fn purge_keys(
					&self,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						PurgeKeys,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<PurgeKeys>()?
					};
					if runtime_call_hash ==
						[
							200u8, 255u8, 4u8, 213u8, 188u8, 92u8, 99u8, 116u8, 163u8, 152u8, 29u8,
							35u8, 133u8, 119u8, 246u8, 44u8, 91u8, 31u8, 145u8, 23u8, 213u8, 64u8,
							71u8, 242u8, 207u8, 239u8, 231u8, 37u8, 61u8, 63u8, 190u8, 35u8,
						] {
						let call = PurgeKeys {};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_session::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "New session has happened. Note that the argument is the session index, not the"]
			#[doc = "block number as the type might suggest."]
			pub struct NewSession {
				pub session_index: ::core::primitive::u32,
			}
			impl ::subxt::Event for NewSession {
				const PALLET: &'static str = "Session";
				const EVENT: &'static str = "NewSession";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct Validators;
			impl ::subxt::StorageEntry for Validators {
				const PALLET: &'static str = "Session";
				const STORAGE: &'static str = "Validators";
				type Value = ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct CurrentIndex;
			impl ::subxt::StorageEntry for CurrentIndex {
				const PALLET: &'static str = "Session";
				const STORAGE: &'static str = "CurrentIndex";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct QueuedChanged;
			impl ::subxt::StorageEntry for QueuedChanged {
				const PALLET: &'static str = "Session";
				const STORAGE: &'static str = "QueuedChanged";
				type Value = ::core::primitive::bool;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct QueuedKeys;
			impl ::subxt::StorageEntry for QueuedKeys {
				const PALLET: &'static str = "Session";
				const STORAGE: &'static str = "QueuedKeys";
				type Value = ::std::vec::Vec<(
					::subxt::sp_core::crypto::AccountId32,
					runtime_types::dali_runtime::opaque::SessionKeys,
				)>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct DisabledValidators;
			impl ::subxt::StorageEntry for DisabledValidators {
				const PALLET: &'static str = "Session";
				const STORAGE: &'static str = "DisabledValidators";
				type Value = ::std::vec::Vec<::core::primitive::u32>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct NextKeys<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::StorageEntry for NextKeys<'_> {
				const PALLET: &'static str = "Session";
				const STORAGE: &'static str = "NextKeys";
				type Value = runtime_types::dali_runtime::opaque::SessionKeys;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct KeyOwner<'a>(
				pub &'a runtime_types::sp_core::crypto::KeyTypeId,
				pub &'a [::core::primitive::u8],
			);
			impl ::subxt::StorageEntry for KeyOwner<'_> {
				const PALLET: &'static str = "Session";
				const STORAGE: &'static str = "KeyOwner";
				type Value = ::subxt::sp_core::crypto::AccountId32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&(&self.0, &self.1),
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The current set of validators."]
				pub fn validators(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Validators>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								186u8, 248u8, 234u8, 74u8, 245u8, 141u8, 90u8, 152u8, 226u8, 220u8,
								255u8, 104u8, 174u8, 1u8, 37u8, 152u8, 23u8, 208u8, 25u8, 49u8,
								33u8, 253u8, 254u8, 251u8, 141u8, 16u8, 18u8, 175u8, 196u8, 188u8,
								163u8, 209u8,
							] {
							let entry = Validators;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Current index of the session."]
				pub fn current_index(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<CurrentIndex>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								148u8, 179u8, 159u8, 15u8, 197u8, 95u8, 214u8, 30u8, 209u8, 251u8,
								183u8, 231u8, 91u8, 25u8, 181u8, 191u8, 143u8, 252u8, 227u8, 80u8,
								159u8, 66u8, 194u8, 67u8, 113u8, 74u8, 111u8, 91u8, 218u8, 187u8,
								130u8, 40u8,
							] {
							let entry = CurrentIndex;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " True if the underlying economic identities or weighting behind the validators"]
				#[doc = " has changed in the queued validator set."]
				pub fn queued_changed(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::bool, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<QueuedChanged>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								105u8, 140u8, 235u8, 218u8, 96u8, 100u8, 252u8, 10u8, 58u8, 221u8,
								244u8, 251u8, 67u8, 91u8, 80u8, 202u8, 152u8, 42u8, 50u8, 113u8,
								200u8, 247u8, 59u8, 213u8, 77u8, 195u8, 1u8, 150u8, 220u8, 18u8,
								245u8, 46u8,
							] {
							let entry = QueuedChanged;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The queued keys for the next session. When the next session begins, these keys"]
				#[doc = " will be used to determine the validator's session keys."]
				pub fn queued_keys(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<(
							::subxt::sp_core::crypto::AccountId32,
							runtime_types::dali_runtime::opaque::SessionKeys,
						)>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<QueuedKeys>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								77u8, 154u8, 63u8, 8u8, 160u8, 17u8, 30u8, 118u8, 131u8, 61u8,
								176u8, 206u8, 180u8, 74u8, 125u8, 233u8, 186u8, 12u8, 229u8, 72u8,
								143u8, 62u8, 18u8, 29u8, 94u8, 25u8, 70u8, 168u8, 90u8, 104u8,
								107u8, 75u8,
							] {
							let entry = QueuedKeys;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Indices of disabled validators."]
				#[doc = ""]
				#[doc = " The vec is always kept sorted so that we can find whether a given validator is"]
				#[doc = " disabled using binary search. It gets cleared when `on_session_ending` returns"]
				#[doc = " a new set of identities."]
				pub fn disabled_validators(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::core::primitive::u32>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<DisabledValidators>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								135u8, 22u8, 22u8, 97u8, 82u8, 217u8, 144u8, 141u8, 121u8, 240u8,
								189u8, 16u8, 176u8, 88u8, 177u8, 31u8, 20u8, 242u8, 73u8, 104u8,
								11u8, 110u8, 214u8, 34u8, 52u8, 217u8, 106u8, 33u8, 174u8, 174u8,
								198u8, 84u8,
							] {
							let entry = DisabledValidators;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The next session keys for a validator."]
				pub fn next_keys(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<runtime_types::dali_runtime::opaque::SessionKeys>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<NextKeys>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								91u8, 120u8, 219u8, 231u8, 50u8, 104u8, 67u8, 140u8, 26u8, 194u8,
								130u8, 248u8, 34u8, 225u8, 102u8, 242u8, 31u8, 98u8, 135u8, 106u8,
								49u8, 171u8, 119u8, 69u8, 227u8, 172u8, 137u8, 60u8, 137u8, 155u8,
								71u8, 75u8,
							] {
							let entry = NextKeys(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The next session keys for a validator."]
				pub fn next_keys_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, NextKeys<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<NextKeys>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								91u8, 120u8, 219u8, 231u8, 50u8, 104u8, 67u8, 140u8, 26u8, 194u8,
								130u8, 248u8, 34u8, 225u8, 102u8, 242u8, 31u8, 98u8, 135u8, 106u8,
								49u8, 171u8, 119u8, 69u8, 227u8, 172u8, 137u8, 60u8, 137u8, 155u8,
								71u8, 75u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
				pub fn key_owner(
					&self,
					_0: &'a runtime_types::sp_core::crypto::KeyTypeId,
					_1: &'a [::core::primitive::u8],
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<KeyOwner>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								49u8, 245u8, 212u8, 141u8, 211u8, 208u8, 109u8, 102u8, 249u8,
								161u8, 41u8, 93u8, 220u8, 230u8, 14u8, 59u8, 251u8, 176u8, 33u8,
								127u8, 93u8, 149u8, 205u8, 229u8, 113u8, 129u8, 162u8, 177u8,
								155u8, 216u8, 151u8, 57u8,
							] {
							let entry = KeyOwner(_0, _1);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
				pub fn key_owner_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, KeyOwner<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<KeyOwner>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								49u8, 245u8, 212u8, 141u8, 211u8, 208u8, 109u8, 102u8, 249u8,
								161u8, 41u8, 93u8, 220u8, 230u8, 14u8, 59u8, 251u8, 176u8, 33u8,
								127u8, 93u8, 149u8, 205u8, 229u8, 113u8, 129u8, 162u8, 177u8,
								155u8, 216u8, 151u8, 57u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
	}
	pub mod aura {
		use super::{root_mod, runtime_types};
		pub mod storage {
			use super::runtime_types;
			pub struct Authorities;
			impl ::subxt::StorageEntry for Authorities {
				const PALLET: &'static str = "Aura";
				const STORAGE: &'static str = "Authorities";
				type Value =
					runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<
						runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
					>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct CurrentSlot;
			impl ::subxt::StorageEntry for CurrentSlot {
				const PALLET: &'static str = "Aura";
				const STORAGE: &'static str = "CurrentSlot";
				type Value = runtime_types::sp_consensus_slots::Slot;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The current authority set."]
				pub fn authorities(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<
							runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Authorities>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								168u8, 101u8, 224u8, 96u8, 254u8, 152u8, 213u8, 141u8, 46u8, 181u8,
								131u8, 23u8, 218u8, 24u8, 145u8, 111u8, 161u8, 192u8, 253u8, 29u8,
								128u8, 92u8, 125u8, 159u8, 242u8, 144u8, 253u8, 174u8, 50u8, 190u8,
								148u8, 193u8,
							] {
							let entry = Authorities;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The current slot of this block."]
				#[doc = ""]
				#[doc = " This will be set in `on_initialize`."]
				pub fn current_slot(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::sp_consensus_slots::Slot,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<CurrentSlot>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								233u8, 102u8, 77u8, 99u8, 103u8, 50u8, 151u8, 229u8, 46u8, 226u8,
								181u8, 37u8, 117u8, 204u8, 234u8, 120u8, 116u8, 166u8, 80u8, 188u8,
								92u8, 154u8, 137u8, 150u8, 79u8, 164u8, 29u8, 203u8, 2u8, 51u8,
								123u8, 104u8,
							] {
							let entry = CurrentSlot;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
	}
	pub mod aura_ext {
		use super::{root_mod, runtime_types};
	}
	pub mod council {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetMembers {
				pub new_members: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
				pub prime: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
				pub old_count: ::core::primitive::u32,
			}
			impl ::subxt::Call for SetMembers {
				const PALLET: &'static str = "Council";
				const FUNCTION: &'static str = "set_members";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Execute {
				pub proposal: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			impl ::subxt::Call for Execute {
				const PALLET: &'static str = "Council";
				const FUNCTION: &'static str = "execute";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Propose {
				#[codec(compact)]
				pub threshold: ::core::primitive::u32,
				pub proposal: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			impl ::subxt::Call for Propose {
				const PALLET: &'static str = "Council";
				const FUNCTION: &'static str = "propose";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Vote {
				pub proposal: ::subxt::sp_core::H256,
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				pub approve: ::core::primitive::bool,
			}
			impl ::subxt::Call for Vote {
				const PALLET: &'static str = "Council";
				const FUNCTION: &'static str = "vote";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Close {
				pub proposal_hash: ::subxt::sp_core::H256,
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				#[codec(compact)]
				pub proposal_weight_bound: ::core::primitive::u64,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			impl ::subxt::Call for Close {
				const PALLET: &'static str = "Council";
				const FUNCTION: &'static str = "close";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct DisapproveProposal {
				pub proposal_hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Call for DisapproveProposal {
				const PALLET: &'static str = "Council";
				const FUNCTION: &'static str = "disapprove_proposal";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Set the collective's membership."]
				#[doc = ""]
				#[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
				#[doc = "- `prime`: The prime member whose vote sets the default."]
				#[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
				#[doc = "  weight estimation."]
				#[doc = ""]
				#[doc = "Requires root origin."]
				#[doc = ""]
				#[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
				#[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
				#[doc = ""]
				#[doc = "# WARNING:"]
				#[doc = ""]
				#[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
				#[doc = "implementation of the trait [`ChangeMembers`]."]
				#[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
				#[doc = "with other logic managing the member set."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "## Weight"]
				#[doc = "- `O(MP + N)` where:"]
				#[doc = "  - `M` old-members-count (code- and governance-bounded)"]
				#[doc = "  - `N` new-members-count (code- and governance-bounded)"]
				#[doc = "  - `P` proposals-count (code-bounded)"]
				#[doc = "- DB:"]
				#[doc = "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the"]
				#[doc = "    members"]
				#[doc = "  - 1 storage read (codec `O(P)`) for reading the proposals"]
				#[doc = "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal"]
				#[doc = "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one"]
				#[doc = "# </weight>"]
				pub fn set_members(
					&self,
					new_members: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
					prime: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
					old_count: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetMembers,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetMembers>()?
					};
					if runtime_call_hash ==
						[
							228u8, 186u8, 17u8, 12u8, 231u8, 231u8, 139u8, 15u8, 96u8, 200u8, 68u8,
							27u8, 61u8, 106u8, 245u8, 199u8, 120u8, 141u8, 95u8, 215u8, 36u8, 49u8,
							0u8, 163u8, 172u8, 252u8, 221u8, 9u8, 1u8, 222u8, 44u8, 214u8,
						] {
						let call = SetMembers { new_members, prime, old_count };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Dispatch a proposal from a member using the `Member` origin."]
				#[doc = ""]
				#[doc = "Origin must be a member of the collective."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "## Weight"]
				#[doc = "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching"]
				#[doc = "  `proposal`"]
				#[doc = "- DB: 1 read (codec `O(M)`) + DB access of `proposal`"]
				#[doc = "- 1 event"]
				#[doc = "# </weight>"]
				pub fn execute(
					&self,
					proposal: runtime_types::dali_runtime::Call,
					length_bound: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Execute,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Execute>()?
					};
					if runtime_call_hash ==
						[
							229u8, 50u8, 160u8, 188u8, 101u8, 164u8, 224u8, 250u8, 20u8, 242u8,
							0u8, 197u8, 209u8, 47u8, 217u8, 184u8, 101u8, 216u8, 118u8, 30u8,
							243u8, 91u8, 135u8, 146u8, 3u8, 104u8, 205u8, 255u8, 248u8, 82u8,
							107u8, 220u8,
						] {
						let call =
							Execute { proposal: ::std::boxed::Box::new(proposal), length_bound };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Add a new proposal to either be voted on or executed directly."]
				#[doc = ""]
				#[doc = "Requires the sender to be member."]
				#[doc = ""]
				#[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
				#[doc = "or put up for voting."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "## Weight"]
				#[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
				#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "  - `M` is members-count (code- and governance-bounded)"]
				#[doc = "  - branching is influenced by `threshold` where:"]
				#[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
				#[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
				#[doc = "- DB:"]
				#[doc = "  - 1 storage read `is_member` (codec `O(M)`)"]
				#[doc = "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)"]
				#[doc = "  - DB accesses influenced by `threshold`:"]
				#[doc = "    - EITHER storage accesses done by `proposal` (`threshold < 2`)"]
				#[doc = "    - OR proposal insertion (`threshold <= 2`)"]
				#[doc = "      - 1 storage mutation `Proposals` (codec `O(P2)`)"]
				#[doc = "      - 1 storage mutation `ProposalCount` (codec `O(1)`)"]
				#[doc = "      - 1 storage write `ProposalOf` (codec `O(B)`)"]
				#[doc = "      - 1 storage write `Voting` (codec `O(M)`)"]
				#[doc = "  - 1 event"]
				#[doc = "# </weight>"]
				pub fn propose(
					&self,
					threshold: ::core::primitive::u32,
					proposal: runtime_types::dali_runtime::Call,
					length_bound: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Propose,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Propose>()?
					};
					if runtime_call_hash ==
						[
							90u8, 138u8, 89u8, 112u8, 159u8, 48u8, 145u8, 91u8, 44u8, 155u8, 64u8,
							170u8, 252u8, 1u8, 242u8, 169u8, 17u8, 56u8, 147u8, 166u8, 31u8, 184u8,
							188u8, 41u8, 18u8, 39u8, 27u8, 253u8, 226u8, 149u8, 175u8, 61u8,
						] {
						let call = Propose {
							threshold,
							proposal: ::std::boxed::Box::new(proposal),
							length_bound,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Add an aye or nay vote for the sender to the given proposal."]
				#[doc = ""]
				#[doc = "Requires the sender to be a member."]
				#[doc = ""]
				#[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
				#[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
				#[doc = "fee."]
				#[doc = "# <weight>"]
				#[doc = "## Weight"]
				#[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
				#[doc = "- DB:"]
				#[doc = "  - 1 storage read `Members` (codec `O(M)`)"]
				#[doc = "  - 1 storage mutation `Voting` (codec `O(M)`)"]
				#[doc = "- 1 event"]
				#[doc = "# </weight>"]
				pub fn vote(
					&self,
					proposal: ::subxt::sp_core::H256,
					index: ::core::primitive::u32,
					approve: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Vote, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Vote>()?
					};
					if runtime_call_hash ==
						[
							184u8, 236u8, 80u8, 133u8, 26u8, 207u8, 3u8, 2u8, 120u8, 27u8, 38u8,
							135u8, 195u8, 86u8, 169u8, 229u8, 125u8, 253u8, 220u8, 120u8, 231u8,
							181u8, 101u8, 84u8, 151u8, 161u8, 39u8, 154u8, 183u8, 142u8, 165u8,
							161u8,
						] {
						let call = Vote { proposal, index, approve };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
				#[doc = ""]
				#[doc = "May be called by any signed account in order to finish voting and close the proposal."]
				#[doc = ""]
				#[doc = "If called before the end of the voting period it will only close the vote if it is"]
				#[doc = "has enough votes to be approved or disapproved."]
				#[doc = ""]
				#[doc = "If called after the end of the voting period abstentions are counted as rejections"]
				#[doc = "unless there is a prime member set and the prime member cast an approval."]
				#[doc = ""]
				#[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
				#[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
				#[doc = ""]
				#[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
				#[doc = "proposal."]
				#[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
				#[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "## Weight"]
				#[doc = "- `O(B + M + P1 + P2)` where:"]
				#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "  - `M` is members-count (code- and governance-bounded)"]
				#[doc = "  - `P1` is the complexity of `proposal` preimage."]
				#[doc = "  - `P2` is proposal-count (code-bounded)"]
				#[doc = "- DB:"]
				#[doc = " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)"]
				#[doc = " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec"]
				#[doc = "   `O(P2)`)"]
				#[doc = " - any mutations done while executing `proposal` (`P1`)"]
				#[doc = "- up to 3 events"]
				#[doc = "# </weight>"]
				pub fn close(
					&self,
					proposal_hash: ::subxt::sp_core::H256,
					index: ::core::primitive::u32,
					proposal_weight_bound: ::core::primitive::u64,
					length_bound: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Close, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Close>()?
					};
					if runtime_call_hash ==
						[
							242u8, 208u8, 108u8, 202u8, 24u8, 139u8, 8u8, 150u8, 108u8, 217u8,
							30u8, 209u8, 178u8, 1u8, 80u8, 25u8, 154u8, 146u8, 173u8, 172u8, 227u8,
							4u8, 140u8, 228u8, 58u8, 221u8, 189u8, 135u8, 203u8, 69u8, 105u8, 47u8,
						] {
						let call =
							Close { proposal_hash, index, proposal_weight_bound, length_bound };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
				#[doc = "state."]
				#[doc = ""]
				#[doc = "Must be called by the Root origin."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Complexity: O(P) where P is the number of max proposals"]
				#[doc = "DB Weight:"]
				#[doc = "* Reads: Proposals"]
				#[doc = "* Writes: Voting, Proposals, ProposalOf"]
				#[doc = "# </weight>"]
				pub fn disapprove_proposal(
					&self,
					proposal_hash: ::subxt::sp_core::H256,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						DisapproveProposal,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<DisapproveProposal>()?
					};
					if runtime_call_hash ==
						[
							199u8, 113u8, 221u8, 167u8, 60u8, 241u8, 77u8, 166u8, 205u8, 191u8,
							183u8, 121u8, 191u8, 206u8, 230u8, 212u8, 215u8, 219u8, 30u8, 51u8,
							123u8, 18u8, 17u8, 218u8, 77u8, 227u8, 197u8, 95u8, 232u8, 59u8, 169u8,
							133u8,
						] {
						let call = DisapproveProposal { proposal_hash };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_collective::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
			#[doc = "`MemberCount`)."]
			pub struct Proposed {
				pub account: ::subxt::sp_core::crypto::AccountId32,
				pub proposal_index: ::core::primitive::u32,
				pub proposal_hash: ::subxt::sp_core::H256,
				pub threshold: ::core::primitive::u32,
			}
			impl ::subxt::Event for Proposed {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A motion (given hash) has been voted on by given account, leaving"]
			#[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
			pub struct Voted {
				pub account: ::subxt::sp_core::crypto::AccountId32,
				pub proposal_hash: ::subxt::sp_core::H256,
				pub voted: ::core::primitive::bool,
				pub yes: ::core::primitive::u32,
				pub no: ::core::primitive::u32,
			}
			impl ::subxt::Event for Voted {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Voted";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A motion was approved by the required threshold."]
			pub struct Approved {
				pub proposal_hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Event for Approved {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Approved";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A motion was not approved by the required threshold."]
			pub struct Disapproved {
				pub proposal_hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Event for Disapproved {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Disapproved";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A motion was executed; result will be `Ok` if it returned without error."]
			pub struct Executed {
				pub proposal_hash: ::subxt::sp_core::H256,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::Event for Executed {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Executed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A single member did some action; result will be `Ok` if it returned without error."]
			pub struct MemberExecuted {
				pub proposal_hash: ::subxt::sp_core::H256,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::Event for MemberExecuted {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "MemberExecuted";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
			pub struct Closed {
				pub proposal_hash: ::subxt::sp_core::H256,
				pub yes: ::core::primitive::u32,
				pub no: ::core::primitive::u32,
			}
			impl ::subxt::Event for Closed {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Closed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct Proposals;
			impl ::subxt::StorageEntry for Proposals {
				const PALLET: &'static str = "Council";
				const STORAGE: &'static str = "Proposals";
				type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
					::subxt::sp_core::H256,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct ProposalOf<'a>(pub &'a ::subxt::sp_core::H256);
			impl ::subxt::StorageEntry for ProposalOf<'_> {
				const PALLET: &'static str = "Council";
				const STORAGE: &'static str = "ProposalOf";
				type Value = runtime_types::dali_runtime::Call;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Identity,
					)])
				}
			}
			pub struct Voting<'a>(pub &'a ::subxt::sp_core::H256);
			impl ::subxt::StorageEntry for Voting<'_> {
				const PALLET: &'static str = "Council";
				const STORAGE: &'static str = "Voting";
				type Value = runtime_types::pallet_collective::Votes<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Identity,
					)])
				}
			}
			pub struct ProposalCount;
			impl ::subxt::StorageEntry for ProposalCount {
				const PALLET: &'static str = "Council";
				const STORAGE: &'static str = "ProposalCount";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Members;
			impl ::subxt::StorageEntry for Members {
				const PALLET: &'static str = "Council";
				const STORAGE: &'static str = "Members";
				type Value = ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Prime;
			impl ::subxt::StorageEntry for Prime {
				const PALLET: &'static str = "Council";
				const STORAGE: &'static str = "Prime";
				type Value = ::subxt::sp_core::crypto::AccountId32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The hashes of the active proposals."]
				pub fn proposals(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::frame_support::storage::bounded_vec::BoundedVec<
							::subxt::sp_core::H256,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Proposals>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								174u8, 75u8, 108u8, 245u8, 86u8, 50u8, 107u8, 212u8, 244u8, 113u8,
								232u8, 168u8, 194u8, 33u8, 247u8, 97u8, 54u8, 115u8, 236u8, 189u8,
								59u8, 2u8, 252u8, 84u8, 199u8, 127u8, 197u8, 72u8, 23u8, 1u8,
								118u8, 95u8,
							] {
							let entry = Proposals;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Actual proposal for a given hash, if it's current."]
				pub fn proposal_of(
					&self,
					_0: &'a ::subxt::sp_core::H256,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<runtime_types::dali_runtime::Call>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ProposalOf>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								80u8, 54u8, 21u8, 139u8, 231u8, 150u8, 190u8, 157u8, 29u8, 176u8,
								140u8, 44u8, 200u8, 101u8, 43u8, 249u8, 244u8, 169u8, 234u8, 3u8,
								226u8, 52u8, 79u8, 250u8, 246u8, 245u8, 21u8, 94u8, 92u8, 127u8,
								82u8, 238u8,
							] {
							let entry = ProposalOf(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Actual proposal for a given hash, if it's current."]
				pub fn proposal_of_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, ProposalOf<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ProposalOf>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								80u8, 54u8, 21u8, 139u8, 231u8, 150u8, 190u8, 157u8, 29u8, 176u8,
								140u8, 44u8, 200u8, 101u8, 43u8, 249u8, 244u8, 169u8, 234u8, 3u8,
								226u8, 52u8, 79u8, 250u8, 246u8, 245u8, 21u8, 94u8, 92u8, 127u8,
								82u8, 238u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting(
					&self,
					_0: &'a ::subxt::sp_core::H256,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_collective::Votes<
								::subxt::sp_core::crypto::AccountId32,
								::core::primitive::u32,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Voting>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								145u8, 223u8, 203u8, 2u8, 137u8, 33u8, 22u8, 239u8, 175u8, 149u8,
								254u8, 185u8, 0u8, 139u8, 71u8, 134u8, 109u8, 95u8, 45u8, 75u8,
								33u8, 228u8, 127u8, 67u8, 53u8, 119u8, 188u8, 198u8, 11u8, 92u8,
								4u8, 177u8,
							] {
							let entry = Voting(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Voting<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Voting>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								145u8, 223u8, 203u8, 2u8, 137u8, 33u8, 22u8, 239u8, 175u8, 149u8,
								254u8, 185u8, 0u8, 139u8, 71u8, 134u8, 109u8, 95u8, 45u8, 75u8,
								33u8, 228u8, 127u8, 67u8, 53u8, 119u8, 188u8, 198u8, 11u8, 92u8,
								4u8, 177u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Proposals so far."]
				pub fn proposal_count(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ProposalCount>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8, 172u8, 143u8, 33u8,
								140u8, 99u8, 124u8, 208u8, 57u8, 232u8, 154u8, 110u8, 32u8, 142u8,
								24u8, 149u8, 109u8, 105u8, 30u8, 83u8, 39u8, 177u8, 127u8, 160u8,
								34u8, 70u8,
							] {
							let entry = ProposalCount;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The current members of the collective. This is stored sorted (just by value)."]
				pub fn members(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Members>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								136u8, 91u8, 140u8, 173u8, 238u8, 221u8, 4u8, 132u8, 238u8, 99u8,
								195u8, 142u8, 10u8, 35u8, 210u8, 227u8, 22u8, 72u8, 218u8, 222u8,
								227u8, 51u8, 55u8, 31u8, 252u8, 78u8, 195u8, 11u8, 195u8, 242u8,
								171u8, 75u8,
							] {
							let entry = Members;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
				pub fn prime(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Prime>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								70u8, 101u8, 20u8, 160u8, 173u8, 87u8, 190u8, 85u8, 60u8, 249u8,
								144u8, 77u8, 175u8, 195u8, 51u8, 196u8, 234u8, 62u8, 243u8, 199u8,
								126u8, 12u8, 88u8, 252u8, 1u8, 210u8, 65u8, 210u8, 33u8, 19u8,
								222u8, 11u8,
							] {
							let entry = Prime;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
	}
	pub mod council_membership {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AddMember {
				pub who: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Call for AddMember {
				const PALLET: &'static str = "CouncilMembership";
				const FUNCTION: &'static str = "add_member";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RemoveMember {
				pub who: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Call for RemoveMember {
				const PALLET: &'static str = "CouncilMembership";
				const FUNCTION: &'static str = "remove_member";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SwapMember {
				pub remove: ::subxt::sp_core::crypto::AccountId32,
				pub add: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Call for SwapMember {
				const PALLET: &'static str = "CouncilMembership";
				const FUNCTION: &'static str = "swap_member";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ResetMembers {
				pub members: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
			}
			impl ::subxt::Call for ResetMembers {
				const PALLET: &'static str = "CouncilMembership";
				const FUNCTION: &'static str = "reset_members";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ChangeKey {
				pub new: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Call for ChangeKey {
				const PALLET: &'static str = "CouncilMembership";
				const FUNCTION: &'static str = "change_key";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetPrime {
				pub who: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Call for SetPrime {
				const PALLET: &'static str = "CouncilMembership";
				const FUNCTION: &'static str = "set_prime";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ClearPrime;
			impl ::subxt::Call for ClearPrime {
				const PALLET: &'static str = "CouncilMembership";
				const FUNCTION: &'static str = "clear_prime";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Add a member `who` to the set."]
				#[doc = ""]
				#[doc = "May only be called from `T::AddOrigin`."]
				pub fn add_member(
					&self,
					who: ::subxt::sp_core::crypto::AccountId32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						AddMember,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<AddMember>()?
					};
					if runtime_call_hash ==
						[
							1u8, 149u8, 115u8, 222u8, 93u8, 9u8, 208u8, 58u8, 22u8, 148u8, 215u8,
							141u8, 204u8, 48u8, 107u8, 210u8, 202u8, 165u8, 43u8, 159u8, 45u8,
							161u8, 255u8, 127u8, 225u8, 100u8, 161u8, 195u8, 197u8, 206u8, 57u8,
							166u8,
						] {
						let call = AddMember { who };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Remove a member `who` from the set."]
				#[doc = ""]
				#[doc = "May only be called from `T::RemoveOrigin`."]
				pub fn remove_member(
					&self,
					who: ::subxt::sp_core::crypto::AccountId32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RemoveMember,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RemoveMember>()?
					};
					if runtime_call_hash ==
						[
							137u8, 249u8, 148u8, 139u8, 147u8, 47u8, 226u8, 228u8, 139u8, 219u8,
							109u8, 128u8, 254u8, 51u8, 227u8, 154u8, 105u8, 91u8, 229u8, 69u8,
							217u8, 241u8, 107u8, 229u8, 41u8, 202u8, 228u8, 227u8, 160u8, 162u8,
							45u8, 211u8,
						] {
						let call = RemoveMember { who };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Swap out one member `remove` for another `add`."]
				#[doc = ""]
				#[doc = "May only be called from `T::SwapOrigin`."]
				#[doc = ""]
				#[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
				pub fn swap_member(
					&self,
					remove: ::subxt::sp_core::crypto::AccountId32,
					add: ::subxt::sp_core::crypto::AccountId32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SwapMember,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SwapMember>()?
					};
					if runtime_call_hash ==
						[
							159u8, 62u8, 254u8, 117u8, 56u8, 185u8, 99u8, 29u8, 146u8, 210u8, 40u8,
							77u8, 169u8, 224u8, 215u8, 34u8, 106u8, 95u8, 204u8, 109u8, 72u8, 67u8,
							11u8, 183u8, 33u8, 84u8, 133u8, 4u8, 5u8, 13u8, 188u8, 123u8,
						] {
						let call = SwapMember { remove, add };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
				#[doc = "pass `members` pre-sorted."]
				#[doc = ""]
				#[doc = "May only be called from `T::ResetOrigin`."]
				pub fn reset_members(
					&self,
					members: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ResetMembers,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ResetMembers>()?
					};
					if runtime_call_hash ==
						[
							246u8, 84u8, 91u8, 191u8, 61u8, 245u8, 171u8, 80u8, 18u8, 120u8, 61u8,
							86u8, 23u8, 115u8, 161u8, 203u8, 128u8, 34u8, 166u8, 128u8, 33u8, 28u8,
							229u8, 81u8, 103u8, 217u8, 173u8, 151u8, 31u8, 118u8, 151u8, 217u8,
						] {
						let call = ResetMembers { members };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Swap out the sending member for some other key `new`."]
				#[doc = ""]
				#[doc = "May only be called from `Signed` origin of a current member."]
				#[doc = ""]
				#[doc = "Prime membership is passed from the origin account to `new`, if extant."]
				pub fn change_key(
					&self,
					new: ::subxt::sp_core::crypto::AccountId32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ChangeKey,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ChangeKey>()?
					};
					if runtime_call_hash ==
						[
							198u8, 93u8, 41u8, 52u8, 241u8, 11u8, 225u8, 82u8, 30u8, 114u8, 111u8,
							204u8, 13u8, 31u8, 34u8, 82u8, 171u8, 58u8, 180u8, 65u8, 3u8, 246u8,
							33u8, 167u8, 200u8, 23u8, 150u8, 235u8, 130u8, 172u8, 202u8, 216u8,
						] {
						let call = ChangeKey { new };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Set the prime member. Must be a current member."]
				#[doc = ""]
				#[doc = "May only be called from `T::PrimeOrigin`."]
				pub fn set_prime(
					&self,
					who: ::subxt::sp_core::crypto::AccountId32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetPrime,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetPrime>()?
					};
					if runtime_call_hash ==
						[
							185u8, 53u8, 61u8, 154u8, 234u8, 77u8, 195u8, 126u8, 19u8, 39u8, 78u8,
							205u8, 109u8, 210u8, 137u8, 245u8, 128u8, 110u8, 2u8, 201u8, 20u8,
							153u8, 146u8, 177u8, 4u8, 144u8, 229u8, 125u8, 91u8, 131u8, 199u8,
							15u8,
						] {
						let call = SetPrime { who };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Remove the prime member if it exists."]
				#[doc = ""]
				#[doc = "May only be called from `T::PrimeOrigin`."]
				pub fn clear_prime(
					&self,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ClearPrime,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ClearPrime>()?
					};
					if runtime_call_hash ==
						[
							186u8, 182u8, 225u8, 90u8, 71u8, 124u8, 69u8, 100u8, 234u8, 25u8, 53u8,
							23u8, 182u8, 32u8, 176u8, 81u8, 54u8, 140u8, 235u8, 126u8, 247u8, 7u8,
							155u8, 62u8, 35u8, 135u8, 48u8, 61u8, 88u8, 160u8, 183u8, 72u8,
						] {
						let call = ClearPrime {};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_membership::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "The given member was added; see the transaction for who."]
			pub struct MemberAdded;
			impl ::subxt::Event for MemberAdded {
				const PALLET: &'static str = "CouncilMembership";
				const EVENT: &'static str = "MemberAdded";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "The given member was removed; see the transaction for who."]
			pub struct MemberRemoved;
			impl ::subxt::Event for MemberRemoved {
				const PALLET: &'static str = "CouncilMembership";
				const EVENT: &'static str = "MemberRemoved";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Two members were swapped; see the transaction for who."]
			pub struct MembersSwapped;
			impl ::subxt::Event for MembersSwapped {
				const PALLET: &'static str = "CouncilMembership";
				const EVENT: &'static str = "MembersSwapped";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "The membership was reset; see the transaction for who the new set is."]
			pub struct MembersReset;
			impl ::subxt::Event for MembersReset {
				const PALLET: &'static str = "CouncilMembership";
				const EVENT: &'static str = "MembersReset";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "One of the members' keys changed."]
			pub struct KeyChanged;
			impl ::subxt::Event for KeyChanged {
				const PALLET: &'static str = "CouncilMembership";
				const EVENT: &'static str = "KeyChanged";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Phantom member, never used."]
			pub struct Dummy;
			impl ::subxt::Event for Dummy {
				const PALLET: &'static str = "CouncilMembership";
				const EVENT: &'static str = "Dummy";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct Members;
			impl ::subxt::StorageEntry for Members {
				const PALLET: &'static str = "CouncilMembership";
				const STORAGE: &'static str = "Members";
				type Value = ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Prime;
			impl ::subxt::StorageEntry for Prime {
				const PALLET: &'static str = "CouncilMembership";
				const STORAGE: &'static str = "Prime";
				type Value = ::subxt::sp_core::crypto::AccountId32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The current membership, stored as an ordered Vec."]
				pub fn members(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Members>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								136u8, 91u8, 140u8, 173u8, 238u8, 221u8, 4u8, 132u8, 238u8, 99u8,
								195u8, 142u8, 10u8, 35u8, 210u8, 227u8, 22u8, 72u8, 218u8, 222u8,
								227u8, 51u8, 55u8, 31u8, 252u8, 78u8, 195u8, 11u8, 195u8, 242u8,
								171u8, 75u8,
							] {
							let entry = Members;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The current prime member, if one exists."]
				pub fn prime(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Prime>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								70u8, 101u8, 20u8, 160u8, 173u8, 87u8, 190u8, 85u8, 60u8, 249u8,
								144u8, 77u8, 175u8, 195u8, 51u8, 196u8, 234u8, 62u8, 243u8, 199u8,
								126u8, 12u8, 88u8, 252u8, 1u8, 210u8, 65u8, 210u8, 33u8, 19u8,
								222u8, 11u8,
							] {
							let entry = Prime;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
	}
	pub mod treasury {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ProposeSpend {
				#[codec(compact)]
				pub value: ::core::primitive::u128,
				pub beneficiary: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
			}
			impl ::subxt::Call for ProposeSpend {
				const PALLET: &'static str = "Treasury";
				const FUNCTION: &'static str = "propose_spend";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RejectProposal {
				#[codec(compact)]
				pub proposal_id: ::core::primitive::u32,
			}
			impl ::subxt::Call for RejectProposal {
				const PALLET: &'static str = "Treasury";
				const FUNCTION: &'static str = "reject_proposal";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ApproveProposal {
				#[codec(compact)]
				pub proposal_id: ::core::primitive::u32,
			}
			impl ::subxt::Call for ApproveProposal {
				const PALLET: &'static str = "Treasury";
				const FUNCTION: &'static str = "approve_proposal";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RemoveApproval {
				#[codec(compact)]
				pub proposal_id: ::core::primitive::u32,
			}
			impl ::subxt::Call for RemoveApproval {
				const PALLET: &'static str = "Treasury";
				const FUNCTION: &'static str = "remove_approval";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Put forward a suggestion for spending. A deposit proportional to the value"]
				#[doc = "is reserved and slashed if the proposal is rejected. It is returned once the"]
				#[doc = "proposal is awarded."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: O(1)"]
				#[doc = "- DbReads: `ProposalCount`, `origin account`"]
				#[doc = "- DbWrites: `ProposalCount`, `Proposals`, `origin account`"]
				#[doc = "# </weight>"]
				pub fn propose_spend(
					&self,
					value: ::core::primitive::u128,
					beneficiary: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ProposeSpend,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ProposeSpend>()?
					};
					if runtime_call_hash ==
						[
							28u8, 133u8, 252u8, 219u8, 50u8, 86u8, 29u8, 221u8, 188u8, 4u8, 33u8,
							236u8, 171u8, 116u8, 77u8, 164u8, 7u8, 55u8, 138u8, 37u8, 51u8, 213u8,
							224u8, 6u8, 25u8, 245u8, 137u8, 136u8, 196u8, 86u8, 28u8, 154u8,
						] {
						let call = ProposeSpend { value, beneficiary };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Reject a proposed spend. The original deposit will be slashed."]
				#[doc = ""]
				#[doc = "May only be called from `T::RejectOrigin`."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: O(1)"]
				#[doc = "- DbReads: `Proposals`, `rejected proposer account`"]
				#[doc = "- DbWrites: `Proposals`, `rejected proposer account`"]
				#[doc = "# </weight>"]
				pub fn reject_proposal(
					&self,
					proposal_id: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RejectProposal,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RejectProposal>()?
					};
					if runtime_call_hash ==
						[
							153u8, 238u8, 223u8, 212u8, 86u8, 178u8, 184u8, 150u8, 117u8, 91u8,
							69u8, 30u8, 196u8, 134u8, 56u8, 54u8, 236u8, 145u8, 202u8, 139u8,
							135u8, 254u8, 80u8, 189u8, 40u8, 56u8, 148u8, 108u8, 42u8, 118u8, 74u8,
							242u8,
						] {
						let call = RejectProposal { proposal_id };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary"]
				#[doc = "and the original deposit will be returned."]
				#[doc = ""]
				#[doc = "May only be called from `T::ApproveOrigin`."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: O(1)."]
				#[doc = "- DbReads: `Proposals`, `Approvals`"]
				#[doc = "- DbWrite: `Approvals`"]
				#[doc = "# </weight>"]
				pub fn approve_proposal(
					&self,
					proposal_id: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ApproveProposal,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ApproveProposal>()?
					};
					if runtime_call_hash ==
						[
							191u8, 81u8, 78u8, 230u8, 230u8, 192u8, 144u8, 232u8, 81u8, 70u8,
							227u8, 212u8, 194u8, 228u8, 231u8, 147u8, 57u8, 222u8, 156u8, 77u8,
							173u8, 60u8, 92u8, 84u8, 255u8, 64u8, 240u8, 45u8, 131u8, 200u8, 206u8,
							231u8,
						] {
						let call = ApproveProposal { proposal_id };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Force a previously approved proposal to be removed from the approval queue."]
				#[doc = "The original deposit will no longer be returned."]
				#[doc = ""]
				#[doc = "May only be called from `T::RejectOrigin`."]
				#[doc = "- `proposal_id`: The index of a proposal"]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: O(A) where `A` is the number of approvals"]
				#[doc = "- Db reads and writes: `Approvals`"]
				#[doc = "# </weight>"]
				#[doc = ""]
				#[doc = "Errors:"]
				#[doc = "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,"]
				#[doc = "i.e., the proposal has not been approved. This could also mean the proposal does not"]
				#[doc = "exist altogether, thus there is no way it would have been approved in the first place."]
				pub fn remove_approval(
					&self,
					proposal_id: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RemoveApproval,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RemoveApproval>()?
					};
					if runtime_call_hash ==
						[
							235u8, 199u8, 214u8, 142u8, 168u8, 99u8, 226u8, 70u8, 161u8, 36u8,
							122u8, 95u8, 242u8, 2u8, 191u8, 163u8, 192u8, 26u8, 185u8, 75u8, 47u8,
							155u8, 80u8, 175u8, 88u8, 85u8, 83u8, 8u8, 138u8, 130u8, 12u8, 228u8,
						] {
						let call = RemoveApproval { proposal_id };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_treasury::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "New proposal."]
			pub struct Proposed {
				pub proposal_index: ::core::primitive::u32,
			}
			impl ::subxt::Event for Proposed {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "We have ended a spend period and will now allocate funds."]
			pub struct Spending {
				pub budget_remaining: ::core::primitive::u128,
			}
			impl ::subxt::Event for Spending {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Spending";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Some funds have been allocated."]
			pub struct Awarded {
				pub proposal_index: ::core::primitive::u32,
				pub award: ::core::primitive::u128,
				pub account: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Event for Awarded {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Awarded";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A proposal was rejected; funds were slashed."]
			pub struct Rejected {
				pub proposal_index: ::core::primitive::u32,
				pub slashed: ::core::primitive::u128,
			}
			impl ::subxt::Event for Rejected {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Rejected";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "Some of our funds have been burnt."]
			pub struct Burnt {
				pub burnt_funds: ::core::primitive::u128,
			}
			impl ::subxt::Event for Burnt {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Burnt";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "Spending has finished; this is the amount that rolls over until next spend."]
			pub struct Rollover {
				pub rollover_balance: ::core::primitive::u128,
			}
			impl ::subxt::Event for Rollover {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Rollover";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "Some funds have been deposited."]
			pub struct Deposit {
				pub value: ::core::primitive::u128,
			}
			impl ::subxt::Event for Deposit {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Deposit";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct ProposalCount;
			impl ::subxt::StorageEntry for ProposalCount {
				const PALLET: &'static str = "Treasury";
				const STORAGE: &'static str = "ProposalCount";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Proposals<'a>(pub &'a ::core::primitive::u32);
			impl ::subxt::StorageEntry for Proposals<'_> {
				const PALLET: &'static str = "Treasury";
				const STORAGE: &'static str = "Proposals";
				type Value = runtime_types::pallet_treasury::Proposal<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u128,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct Approvals;
			impl ::subxt::StorageEntry for Approvals {
				const PALLET: &'static str = "Treasury";
				const STORAGE: &'static str = "Approvals";
				type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
					::core::primitive::u32,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " Number of proposals that have been made."]
				pub fn proposal_count(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ProposalCount>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8, 172u8, 143u8, 33u8,
								140u8, 99u8, 124u8, 208u8, 57u8, 232u8, 154u8, 110u8, 32u8, 142u8,
								24u8, 149u8, 109u8, 105u8, 30u8, 83u8, 39u8, 177u8, 127u8, 160u8,
								34u8, 70u8,
							] {
							let entry = ProposalCount;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Proposals that have been made."]
				pub fn proposals(
					&self,
					_0: &'a ::core::primitive::u32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_treasury::Proposal<
								::subxt::sp_core::crypto::AccountId32,
								::core::primitive::u128,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Proposals>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								46u8, 242u8, 203u8, 56u8, 166u8, 200u8, 95u8, 110u8, 47u8, 71u8,
								71u8, 45u8, 12u8, 93u8, 222u8, 120u8, 40u8, 130u8, 29u8, 236u8,
								189u8, 49u8, 115u8, 238u8, 135u8, 64u8, 252u8, 171u8, 29u8, 229u8,
								63u8, 31u8,
							] {
							let entry = Proposals(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Proposals that have been made."]
				pub fn proposals_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Proposals<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Proposals>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								46u8, 242u8, 203u8, 56u8, 166u8, 200u8, 95u8, 110u8, 47u8, 71u8,
								71u8, 45u8, 12u8, 93u8, 222u8, 120u8, 40u8, 130u8, 29u8, 236u8,
								189u8, 49u8, 115u8, 238u8, 135u8, 64u8, 252u8, 171u8, 29u8, 229u8,
								63u8, 31u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Proposal indices that have been approved but not yet awarded."]
				pub fn approvals(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::frame_support::storage::bounded_vec::BoundedVec<
							::core::primitive::u32,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Approvals>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								152u8, 185u8, 127u8, 54u8, 169u8, 155u8, 124u8, 22u8, 142u8, 132u8,
								254u8, 197u8, 162u8, 152u8, 15u8, 18u8, 192u8, 138u8, 196u8, 231u8,
								234u8, 178u8, 111u8, 181u8, 20u8, 131u8, 149u8, 36u8, 222u8, 4u8,
								119u8, 135u8,
							] {
							let entry = Approvals;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " Fraction of a proposal's value that should be bonded in order to place the proposal."]
				#[doc = " An accepted proposal gets these back. A rejected proposal does not."]
				pub fn proposal_bond(
					&self,
				) -> ::core::result::Result<
					runtime_types::sp_arithmetic::per_things::Permill,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Treasury", "ProposalBond")? ==
						[
							254u8, 112u8, 56u8, 108u8, 71u8, 90u8, 128u8, 114u8, 54u8, 239u8, 87u8,
							235u8, 71u8, 56u8, 11u8, 132u8, 179u8, 134u8, 115u8, 139u8, 109u8,
							136u8, 59u8, 69u8, 108u8, 160u8, 18u8, 120u8, 34u8, 213u8, 166u8, 13u8,
						] {
						let pallet = metadata.pallet("Treasury")?;
						let constant = pallet.constant("ProposalBond")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " Minimum amount of funds that should be placed in a deposit for making a proposal."]
				pub fn proposal_bond_minimum(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Treasury", "ProposalBondMinimum")? ==
						[
							74u8, 247u8, 241u8, 153u8, 187u8, 209u8, 93u8, 143u8, 54u8, 172u8,
							209u8, 136u8, 121u8, 161u8, 201u8, 146u8, 41u8, 127u8, 209u8, 246u8,
							38u8, 46u8, 182u8, 92u8, 201u8, 184u8, 189u8, 80u8, 231u8, 30u8, 185u8,
							38u8,
						] {
						let pallet = metadata.pallet("Treasury")?;
						let constant = pallet.constant("ProposalBondMinimum")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " Maximum amount of funds that should be placed in a deposit for making a proposal."]
				pub fn proposal_bond_maximum(
					&self,
				) -> ::core::result::Result<
					::core::option::Option<::core::primitive::u128>,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Treasury", "ProposalBondMaximum")? ==
						[
							201u8, 165u8, 134u8, 248u8, 208u8, 144u8, 86u8, 251u8, 60u8, 74u8,
							73u8, 120u8, 29u8, 255u8, 124u8, 42u8, 124u8, 171u8, 88u8, 155u8,
							106u8, 239u8, 118u8, 219u8, 5u8, 170u8, 241u8, 78u8, 236u8, 203u8,
							221u8, 3u8,
						] {
						let pallet = metadata.pallet("Treasury")?;
						let constant = pallet.constant("ProposalBondMaximum")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " Period between successive spends."]
				pub fn spend_period(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Treasury", "SpendPeriod")? ==
						[
							106u8, 24u8, 10u8, 227u8, 158u8, 110u8, 248u8, 16u8, 18u8, 227u8,
							219u8, 123u8, 105u8, 207u8, 255u8, 111u8, 78u8, 66u8, 65u8, 247u8,
							72u8, 82u8, 23u8, 112u8, 47u8, 149u8, 61u8, 255u8, 19u8, 104u8, 48u8,
							188u8,
						] {
						let pallet = metadata.pallet("Treasury")?;
						let constant = pallet.constant("SpendPeriod")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " Percentage of spare funds (if any) that are burnt per spend period."]
				pub fn burn(
					&self,
				) -> ::core::result::Result<
					runtime_types::sp_arithmetic::per_things::Permill,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Treasury", "Burn")? ==
						[
							175u8, 244u8, 202u8, 183u8, 30u8, 101u8, 60u8, 205u8, 78u8, 55u8,
							138u8, 212u8, 254u8, 224u8, 88u8, 83u8, 244u8, 168u8, 90u8, 228u8,
							99u8, 130u8, 249u8, 104u8, 94u8, 160u8, 197u8, 38u8, 185u8, 166u8,
							105u8, 12u8,
						] {
						let pallet = metadata.pallet("Treasury")?;
						let constant = pallet.constant("Burn")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The treasury's pallet id, used for deriving its sovereign account ID."]
				pub fn pallet_id(
					&self,
				) -> ::core::result::Result<
					runtime_types::frame_support::PalletId,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Treasury", "PalletId")? ==
						[
							215u8, 38u8, 251u8, 239u8, 48u8, 208u8, 254u8, 213u8, 157u8, 17u8,
							124u8, 203u8, 241u8, 60u8, 16u8, 113u8, 71u8, 85u8, 123u8, 186u8,
							182u8, 163u8, 95u8, 0u8, 122u8, 200u8, 129u8, 147u8, 145u8, 31u8, 24u8,
							41u8,
						] {
						let pallet = metadata.pallet("Treasury")?;
						let constant = pallet.constant("PalletId")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The maximum number of approvals that can wait in the spending queue."]
				#[doc = ""]
				#[doc = " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."]
				pub fn max_approvals(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Treasury", "MaxApprovals")? ==
						[
							25u8, 185u8, 151u8, 218u8, 193u8, 64u8, 148u8, 243u8, 190u8, 70u8,
							31u8, 23u8, 181u8, 189u8, 127u8, 10u8, 142u8, 24u8, 148u8, 0u8, 250u8,
							127u8, 128u8, 131u8, 6u8, 129u8, 154u8, 118u8, 238u8, 176u8, 197u8,
							51u8,
						] {
						let pallet = metadata.pallet("Treasury")?;
						let constant = pallet.constant("MaxApprovals")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod democracy {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Propose {
				pub proposal_hash: ::subxt::sp_core::H256,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
			}
			impl ::subxt::Call for Propose {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "propose";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Second {
				#[codec(compact)]
				pub proposal: ::core::primitive::u32,
				#[codec(compact)]
				pub seconds_upper_bound: ::core::primitive::u32,
			}
			impl ::subxt::Call for Second {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "second";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Vote {
				#[codec(compact)]
				pub ref_index: ::core::primitive::u32,
				pub vote:
					runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>,
			}
			impl ::subxt::Call for Vote {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "vote";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct EmergencyCancel {
				pub ref_index: ::core::primitive::u32,
			}
			impl ::subxt::Call for EmergencyCancel {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "emergency_cancel";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ExternalPropose {
				pub proposal_hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Call for ExternalPropose {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "external_propose";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ExternalProposeMajority {
				pub proposal_hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Call for ExternalProposeMajority {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "external_propose_majority";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ExternalProposeDefault {
				pub proposal_hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Call for ExternalProposeDefault {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "external_propose_default";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct FastTrack {
				pub proposal_hash: ::subxt::sp_core::H256,
				pub voting_period: ::core::primitive::u32,
				pub delay: ::core::primitive::u32,
			}
			impl ::subxt::Call for FastTrack {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "fast_track";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct VetoExternal {
				pub proposal_hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Call for VetoExternal {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "veto_external";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct CancelReferendum {
				#[codec(compact)]
				pub ref_index: ::core::primitive::u32,
			}
			impl ::subxt::Call for CancelReferendum {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "cancel_referendum";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct CancelQueued {
				pub which: ::core::primitive::u32,
			}
			impl ::subxt::Call for CancelQueued {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "cancel_queued";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Delegate {
				pub to: ::subxt::sp_core::crypto::AccountId32,
				pub conviction: runtime_types::pallet_democracy::conviction::Conviction,
				pub balance: ::core::primitive::u128,
			}
			impl ::subxt::Call for Delegate {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "delegate";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Undelegate;
			impl ::subxt::Call for Undelegate {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "undelegate";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ClearPublicProposals;
			impl ::subxt::Call for ClearPublicProposals {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "clear_public_proposals";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct NotePreimage {
				pub encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
			}
			impl ::subxt::Call for NotePreimage {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "note_preimage";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct NotePreimageOperational {
				pub encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
			}
			impl ::subxt::Call for NotePreimageOperational {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "note_preimage_operational";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct NoteImminentPreimage {
				pub encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
			}
			impl ::subxt::Call for NoteImminentPreimage {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "note_imminent_preimage";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct NoteImminentPreimageOperational {
				pub encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
			}
			impl ::subxt::Call for NoteImminentPreimageOperational {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "note_imminent_preimage_operational";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ReapPreimage {
				pub proposal_hash: ::subxt::sp_core::H256,
				#[codec(compact)]
				pub proposal_len_upper_bound: ::core::primitive::u32,
			}
			impl ::subxt::Call for ReapPreimage {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "reap_preimage";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Unlock {
				pub target: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Call for Unlock {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "unlock";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct RemoveVote {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::Call for RemoveVote {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "remove_vote";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RemoveOtherVote {
				pub target: ::subxt::sp_core::crypto::AccountId32,
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::Call for RemoveOtherVote {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "remove_other_vote";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct EnactProposal {
				pub proposal_hash: ::subxt::sp_core::H256,
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::Call for EnactProposal {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "enact_proposal";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Blacklist {
				pub proposal_hash: ::subxt::sp_core::H256,
				pub maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
			}
			impl ::subxt::Call for Blacklist {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "blacklist";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct CancelProposal {
				#[codec(compact)]
				pub prop_index: ::core::primitive::u32,
			}
			impl ::subxt::Call for CancelProposal {
				const PALLET: &'static str = "Democracy";
				const FUNCTION: &'static str = "cancel_proposal";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Propose a sensitive action to be taken."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_ and the sender must"]
				#[doc = "have funds to cover the deposit."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The hash of the proposal preimage."]
				#[doc = "- `value`: The amount of deposit (must be at least `MinimumDeposit`)."]
				#[doc = ""]
				#[doc = "Emits `Proposed`."]
				#[doc = ""]
				#[doc = "Weight: `O(p)`"]
				pub fn propose(
					&self,
					proposal_hash: ::subxt::sp_core::H256,
					value: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Propose,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Propose>()?
					};
					if runtime_call_hash ==
						[
							149u8, 60u8, 16u8, 143u8, 114u8, 16u8, 124u8, 96u8, 97u8, 5u8, 176u8,
							137u8, 188u8, 164u8, 65u8, 145u8, 142u8, 104u8, 74u8, 120u8, 248u8,
							90u8, 109u8, 112u8, 29u8, 226u8, 208u8, 230u8, 101u8, 8u8, 79u8, 12u8,
						] {
						let call = Propose { proposal_hash, value };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Signals agreement with a particular proposal."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_ and the sender"]
				#[doc = "must have funds to cover the deposit, equal to the original deposit."]
				#[doc = ""]
				#[doc = "- `proposal`: The index of the proposal to second."]
				#[doc = "- `seconds_upper_bound`: an upper bound on the current number of seconds on this"]
				#[doc = "  proposal. Extrinsic is weighted according to this value with no refund."]
				#[doc = ""]
				#[doc = "Weight: `O(S)` where S is the number of seconds a proposal already has."]
				pub fn second(
					&self,
					proposal: ::core::primitive::u32,
					seconds_upper_bound: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Second, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Second>()?
					};
					if runtime_call_hash ==
						[
							37u8, 226u8, 138u8, 26u8, 138u8, 46u8, 39u8, 147u8, 22u8, 32u8, 245u8,
							40u8, 49u8, 228u8, 218u8, 225u8, 72u8, 89u8, 37u8, 90u8, 132u8, 31u8,
							52u8, 22u8, 234u8, 124u8, 254u8, 223u8, 56u8, 215u8, 255u8, 79u8,
						] {
						let call = Second { proposal, seconds_upper_bound };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;"]
				#[doc = "otherwise it is a vote to keep the status quo."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `ref_index`: The index of the referendum to vote for."]
				#[doc = "- `vote`: The vote configuration."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` where R is the number of referendums the voter has voted on."]
				pub fn vote(
					&self,
					ref_index: ::core::primitive::u32,
					vote: runtime_types::pallet_democracy::vote::AccountVote<
						::core::primitive::u128,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Vote, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Vote>()?
					};
					if runtime_call_hash ==
						[
							1u8, 235u8, 77u8, 58u8, 54u8, 224u8, 30u8, 168u8, 150u8, 169u8, 20u8,
							172u8, 137u8, 191u8, 189u8, 184u8, 28u8, 118u8, 204u8, 233u8, 146u8,
							212u8, 45u8, 139u8, 58u8, 175u8, 231u8, 169u8, 43u8, 164u8, 149u8,
							16u8,
						] {
						let call = Vote { ref_index, vote };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same"]
				#[doc = "referendum."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `CancellationOrigin`."]
				#[doc = ""]
				#[doc = "-`ref_index`: The index of the referendum to cancel."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`."]
				pub fn emergency_cancel(
					&self,
					ref_index: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						EmergencyCancel,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<EmergencyCancel>()?
					};
					if runtime_call_hash ==
						[
							4u8, 129u8, 205u8, 102u8, 202u8, 197u8, 75u8, 155u8, 24u8, 125u8,
							157u8, 73u8, 50u8, 243u8, 173u8, 103u8, 49u8, 60u8, 50u8, 63u8, 54u8,
							40u8, 34u8, 227u8, 29u8, 247u8, 179u8, 102u8, 107u8, 177u8, 117u8,
							161u8,
						] {
						let call = EmergencyCancel { ref_index };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Schedule a referendum to be tabled once it is legal to schedule an external"]
				#[doc = "referendum."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `ExternalOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
				#[doc = ""]
				#[doc = "Weight: `O(V)` with V number of vetoers in the blacklist of proposal."]
				#[doc = "  Decoding vec of length V. Charged as maximum"]
				pub fn external_propose(
					&self,
					proposal_hash: ::subxt::sp_core::H256,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ExternalPropose,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ExternalPropose>()?
					};
					if runtime_call_hash ==
						[
							50u8, 82u8, 155u8, 206u8, 57u8, 61u8, 64u8, 43u8, 30u8, 71u8, 89u8,
							91u8, 221u8, 46u8, 15u8, 222u8, 15u8, 211u8, 56u8, 176u8, 84u8, 225u8,
							192u8, 92u8, 253u8, 56u8, 207u8, 29u8, 252u8, 77u8, 245u8, 113u8,
						] {
						let call = ExternalPropose { proposal_hash };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Schedule a majority-carries referendum to be tabled next once it is legal to schedule"]
				#[doc = "an external referendum."]
				#[doc = ""]
				#[doc = "The dispatch of this call must be `ExternalMajorityOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
				#[doc = ""]
				#[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
				#[doc = "pre-scheduled `external_propose` call."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`"]
				pub fn external_propose_majority(
					&self,
					proposal_hash: ::subxt::sp_core::H256,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ExternalProposeMajority,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ExternalProposeMajority>()?
					};
					if runtime_call_hash ==
						[
							18u8, 92u8, 204u8, 120u8, 189u8, 60u8, 223u8, 166u8, 213u8, 49u8, 20u8,
							131u8, 202u8, 1u8, 87u8, 226u8, 168u8, 156u8, 144u8, 110u8, 118u8,
							125u8, 81u8, 111u8, 229u8, 244u8, 89u8, 93u8, 202u8, 140u8, 16u8,
							220u8,
						] {
						let call = ExternalProposeMajority { proposal_hash };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to"]
				#[doc = "schedule an external referendum."]
				#[doc = ""]
				#[doc = "The dispatch of this call must be `ExternalDefaultOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
				#[doc = ""]
				#[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
				#[doc = "pre-scheduled `external_propose` call."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`"]
				pub fn external_propose_default(
					&self,
					proposal_hash: ::subxt::sp_core::H256,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ExternalProposeDefault,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ExternalProposeDefault>()?
					};
					if runtime_call_hash ==
						[
							51u8, 75u8, 236u8, 51u8, 53u8, 39u8, 26u8, 231u8, 212u8, 191u8, 175u8,
							233u8, 181u8, 156u8, 210u8, 221u8, 181u8, 182u8, 113u8, 69u8, 171u8,
							70u8, 219u8, 133u8, 88u8, 78u8, 87u8, 228u8, 177u8, 53u8, 111u8, 115u8,
						] {
						let call = ExternalProposeDefault { proposal_hash };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Schedule the currently externally-proposed majority-carries referendum to be tabled"]
				#[doc = "immediately. If there is no externally-proposed referendum currently, or if there is one"]
				#[doc = "but it is not a majority-carries referendum then it fails."]
				#[doc = ""]
				#[doc = "The dispatch of this call must be `FastTrackOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The hash of the current external proposal."]
				#[doc = "- `voting_period`: The period that is allowed for voting on this proposal. Increased to"]
				#[doc = "  `FastTrackVotingPeriod` if too low."]
				#[doc = "- `delay`: The number of block after voting has ended in approval and this should be"]
				#[doc = "  enacted. This doesn't have a minimum amount."]
				#[doc = ""]
				#[doc = "Emits `Started`."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`"]
				pub fn fast_track(
					&self,
					proposal_hash: ::subxt::sp_core::H256,
					voting_period: ::core::primitive::u32,
					delay: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						FastTrack,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<FastTrack>()?
					};
					if runtime_call_hash ==
						[
							232u8, 255u8, 150u8, 13u8, 151u8, 28u8, 253u8, 37u8, 183u8, 127u8,
							53u8, 228u8, 160u8, 11u8, 223u8, 48u8, 74u8, 5u8, 37u8, 3u8, 84u8,
							224u8, 79u8, 172u8, 120u8, 220u8, 158u8, 191u8, 127u8, 55u8, 126u8,
							135u8,
						] {
						let call = FastTrack { proposal_hash, voting_period, delay };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Veto and blacklist the external proposal hash."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `VetoOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist."]
				#[doc = ""]
				#[doc = "Emits `Vetoed`."]
				#[doc = ""]
				#[doc = "Weight: `O(V + log(V))` where V is number of `existing vetoers`"]
				pub fn veto_external(
					&self,
					proposal_hash: ::subxt::sp_core::H256,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						VetoExternal,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<VetoExternal>()?
					};
					if runtime_call_hash ==
						[
							230u8, 207u8, 43u8, 137u8, 173u8, 97u8, 143u8, 183u8, 193u8, 78u8,
							252u8, 104u8, 237u8, 32u8, 151u8, 164u8, 91u8, 247u8, 233u8, 36u8,
							198u8, 88u8, 63u8, 176u8, 77u8, 87u8, 26u8, 242u8, 211u8, 47u8, 193u8,
							180u8,
						] {
						let call = VetoExternal { proposal_hash };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Remove a referendum."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Root_."]
				#[doc = ""]
				#[doc = "- `ref_index`: The index of the referendum to cancel."]
				#[doc = ""]
				#[doc = "# Weight: `O(1)`."]
				pub fn cancel_referendum(
					&self,
					ref_index: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						CancelReferendum,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<CancelReferendum>()?
					};
					if runtime_call_hash ==
						[
							107u8, 144u8, 114u8, 224u8, 39u8, 217u8, 156u8, 202u8, 62u8, 4u8,
							196u8, 63u8, 145u8, 196u8, 107u8, 241u8, 3u8, 61u8, 202u8, 20u8, 123u8,
							158u8, 153u8, 45u8, 192u8, 192u8, 244u8, 42u8, 224u8, 23u8, 243u8,
							225u8,
						] {
						let call = CancelReferendum { ref_index };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Cancel a proposal queued for enactment."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Root_."]
				#[doc = ""]
				#[doc = "- `which`: The index of the referendum to cancel."]
				#[doc = ""]
				#[doc = "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."]
				pub fn cancel_queued(
					&self,
					which: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						CancelQueued,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<CancelQueued>()?
					};
					if runtime_call_hash ==
						[
							130u8, 218u8, 212u8, 143u8, 89u8, 134u8, 207u8, 161u8, 165u8, 202u8,
							237u8, 237u8, 81u8, 125u8, 165u8, 147u8, 222u8, 198u8, 236u8, 1u8,
							223u8, 74u8, 200u8, 6u8, 208u8, 128u8, 215u8, 50u8, 46u8, 117u8, 16u8,
							143u8,
						] {
						let call = CancelQueued { which };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Delegate the voting power (with some given conviction) of the sending account."]
				#[doc = ""]
				#[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
				#[doc = "time appropriate for the conviction's lock period."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
				#[doc = "  - be delegating already; or"]
				#[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
				#[doc = "    through `reap_vote` or `unvote`)."]
				#[doc = ""]
				#[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
				#[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
				#[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
				#[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
				#[doc = "  be more than the account's current balance."]
				#[doc = ""]
				#[doc = "Emits `Delegated`."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
				#[doc = "  voted on. Weight is charged as if maximum votes."]
				pub fn delegate(
					&self,
					to: ::subxt::sp_core::crypto::AccountId32,
					conviction: runtime_types::pallet_democracy::conviction::Conviction,
					balance: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Delegate,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Delegate>()?
					};
					if runtime_call_hash ==
						[
							33u8, 155u8, 180u8, 53u8, 39u8, 251u8, 59u8, 100u8, 16u8, 124u8, 209u8,
							40u8, 42u8, 152u8, 3u8, 109u8, 97u8, 211u8, 129u8, 151u8, 82u8, 45u8,
							16u8, 98u8, 114u8, 250u8, 145u8, 176u8, 244u8, 39u8, 64u8, 11u8,
						] {
						let call = Delegate { to, conviction, balance };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Undelegate the voting power of the sending account."]
				#[doc = ""]
				#[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
				#[doc = "of the conviction with which the delegation was issued."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
				#[doc = "currently delegating."]
				#[doc = ""]
				#[doc = "Emits `Undelegated`."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
				#[doc = "  voted on. Weight is charged as if maximum votes."]
				pub fn undelegate(
					&self,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Undelegate,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Undelegate>()?
					};
					if runtime_call_hash ==
						[
							165u8, 40u8, 183u8, 209u8, 57u8, 153u8, 111u8, 29u8, 114u8, 109u8,
							107u8, 235u8, 97u8, 61u8, 53u8, 155u8, 44u8, 245u8, 28u8, 220u8, 56u8,
							134u8, 43u8, 122u8, 248u8, 156u8, 191u8, 154u8, 4u8, 121u8, 152u8,
							153u8,
						] {
						let call = Undelegate {};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Clears all public proposals."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Root_."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`."]
				pub fn clear_public_proposals(
					&self,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ClearPublicProposals,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ClearPublicProposals>()?
					};
					if runtime_call_hash ==
						[
							59u8, 126u8, 254u8, 223u8, 252u8, 225u8, 75u8, 185u8, 188u8, 181u8,
							42u8, 179u8, 211u8, 73u8, 12u8, 141u8, 243u8, 197u8, 46u8, 130u8,
							215u8, 196u8, 225u8, 88u8, 48u8, 199u8, 231u8, 249u8, 195u8, 53u8,
							184u8, 204u8,
						] {
						let call = ClearPublicProposals {};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Register the preimage for an upcoming proposal. This doesn't require the proposal to be"]
				#[doc = "in the dispatch queue but does require a deposit, returned once enacted."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `encoded_proposal`: The preimage of a proposal."]
				#[doc = ""]
				#[doc = "Emits `PreimageNoted`."]
				#[doc = ""]
				#[doc = "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."]
				pub fn note_preimage(
					&self,
					encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						NotePreimage,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<NotePreimage>()?
					};
					if runtime_call_hash ==
						[
							121u8, 179u8, 204u8, 32u8, 104u8, 133u8, 99u8, 153u8, 226u8, 190u8,
							89u8, 121u8, 232u8, 154u8, 89u8, 133u8, 124u8, 222u8, 237u8, 39u8,
							50u8, 128u8, 80u8, 115u8, 186u8, 180u8, 151u8, 139u8, 73u8, 112u8,
							148u8, 232u8,
						] {
						let call = NotePreimage { encoded_proposal };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."]
				pub fn note_preimage_operational(
					&self,
					encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						NotePreimageOperational,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<NotePreimageOperational>()?
					};
					if runtime_call_hash ==
						[
							102u8, 20u8, 213u8, 32u8, 64u8, 28u8, 150u8, 241u8, 173u8, 182u8,
							201u8, 70u8, 52u8, 211u8, 95u8, 211u8, 127u8, 12u8, 249u8, 57u8, 128u8,
							64u8, 185u8, 239u8, 255u8, 191u8, 203u8, 222u8, 123u8, 187u8, 106u8,
							12u8,
						] {
						let call = NotePreimageOperational { encoded_proposal };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Register the preimage for an upcoming proposal. This requires the proposal to be"]
				#[doc = "in the dispatch queue. No deposit is needed. When this call is successful, i.e."]
				#[doc = "the preimage has not been uploaded before and matches some imminent proposal,"]
				#[doc = "no fee is paid."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `encoded_proposal`: The preimage of a proposal."]
				#[doc = ""]
				#[doc = "Emits `PreimageNoted`."]
				#[doc = ""]
				#[doc = "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."]
				pub fn note_imminent_preimage(
					&self,
					encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						NoteImminentPreimage,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<NoteImminentPreimage>()?
					};
					if runtime_call_hash ==
						[
							240u8, 77u8, 42u8, 178u8, 110u8, 117u8, 152u8, 158u8, 64u8, 26u8, 49u8,
							37u8, 177u8, 178u8, 203u8, 227u8, 23u8, 251u8, 242u8, 112u8, 184u8,
							234u8, 95u8, 73u8, 86u8, 37u8, 148u8, 150u8, 6u8, 50u8, 239u8, 64u8,
						] {
						let call = NoteImminentPreimage { encoded_proposal };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."]
				pub fn note_imminent_preimage_operational(
					&self,
					encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						NoteImminentPreimageOperational,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<NoteImminentPreimageOperational>()?
					};
					if runtime_call_hash ==
						[
							119u8, 17u8, 140u8, 81u8, 7u8, 103u8, 162u8, 112u8, 160u8, 179u8,
							116u8, 34u8, 126u8, 150u8, 64u8, 117u8, 93u8, 225u8, 197u8, 40u8, 62u8,
							238u8, 174u8, 63u8, 148u8, 248u8, 214u8, 212u8, 228u8, 86u8, 87u8,
							195u8,
						] {
						let call = NoteImminentPreimageOperational { encoded_proposal };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Remove an expired proposal preimage and collect the deposit."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The preimage hash of a proposal."]
				#[doc = "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is"]
				#[doc = "  weighted according to this value with no refund."]
				#[doc = ""]
				#[doc = "This will only work after `VotingPeriod` blocks from the time that the preimage was"]
				#[doc = "noted, if it's the same account doing it. If it's a different account, then it'll only"]
				#[doc = "work an additional `EnactmentPeriod` later."]
				#[doc = ""]
				#[doc = "Emits `PreimageReaped`."]
				#[doc = ""]
				#[doc = "Weight: `O(D)` where D is length of proposal."]
				pub fn reap_preimage(
					&self,
					proposal_hash: ::subxt::sp_core::H256,
					proposal_len_upper_bound: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ReapPreimage,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ReapPreimage>()?
					};
					if runtime_call_hash ==
						[
							45u8, 191u8, 46u8, 19u8, 87u8, 216u8, 48u8, 29u8, 124u8, 205u8, 39u8,
							178u8, 158u8, 95u8, 163u8, 116u8, 232u8, 58u8, 6u8, 242u8, 52u8, 215u8,
							251u8, 49u8, 1u8, 234u8, 99u8, 142u8, 76u8, 182u8, 134u8, 173u8,
						] {
						let call = ReapPreimage { proposal_hash, proposal_len_upper_bound };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Unlock tokens that have an expired lock."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `target`: The account to remove the lock on."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` with R number of vote of target."]
				pub fn unlock(
					&self,
					target: ::subxt::sp_core::crypto::AccountId32,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Unlock, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Unlock>()?
					};
					if runtime_call_hash ==
						[
							106u8, 17u8, 189u8, 71u8, 208u8, 26u8, 49u8, 71u8, 162u8, 196u8, 126u8,
							192u8, 242u8, 239u8, 77u8, 196u8, 62u8, 171u8, 58u8, 176u8, 157u8,
							81u8, 65u8, 246u8, 210u8, 43u8, 1u8, 226u8, 143u8, 149u8, 210u8, 192u8,
						] {
						let call = Unlock { target };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Remove a vote for a referendum."]
				#[doc = ""]
				#[doc = "If:"]
				#[doc = "- the referendum was cancelled, or"]
				#[doc = "- the referendum is ongoing, or"]
				#[doc = "- the referendum has ended such that"]
				#[doc = "  - the vote of the account was in opposition to the result; or"]
				#[doc = "  - there was no conviction to the account's vote; or"]
				#[doc = "  - the account made a split vote"]
				#[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
				#[doc = "funds being available."]
				#[doc = ""]
				#[doc = "If, however, the referendum has ended and:"]
				#[doc = "- it finished corresponding to the vote of the account, and"]
				#[doc = "- the account made a standard vote with conviction, and"]
				#[doc = "- the lock period of the conviction is not over"]
				#[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
				#[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
				#[doc = "of both the amount locked and the time is it locked for)."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
				#[doc = "registered for referendum `index`."]
				#[doc = ""]
				#[doc = "- `index`: The index of referendum of the vote to be removed."]
				#[doc = ""]
				#[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
				#[doc = "  Weight is calculated for the maximum number of vote."]
				pub fn remove_vote(
					&self,
					index: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RemoveVote,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RemoveVote>()?
					};
					if runtime_call_hash ==
						[
							33u8, 72u8, 14u8, 166u8, 152u8, 18u8, 232u8, 153u8, 163u8, 96u8, 146u8,
							180u8, 98u8, 155u8, 119u8, 75u8, 247u8, 175u8, 246u8, 183u8, 182u8,
							108u8, 250u8, 80u8, 148u8, 86u8, 255u8, 59u8, 93u8, 197u8, 209u8,
							226u8,
						] {
						let call = RemoveVote { index };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Remove a vote for a referendum."]
				#[doc = ""]
				#[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
				#[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
				#[doc = "either because the referendum was cancelled, because the voter lost the referendum or"]
				#[doc = "because the conviction period is over."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `target`: The account of the vote to be removed; this account must have voted for"]
				#[doc = "  referendum `index`."]
				#[doc = "- `index`: The index of referendum of the vote to be removed."]
				#[doc = ""]
				#[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
				#[doc = "  Weight is calculated for the maximum number of vote."]
				pub fn remove_other_vote(
					&self,
					target: ::subxt::sp_core::crypto::AccountId32,
					index: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RemoveOtherVote,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RemoveOtherVote>()?
					};
					if runtime_call_hash ==
						[
							43u8, 194u8, 32u8, 219u8, 87u8, 143u8, 240u8, 34u8, 236u8, 232u8,
							128u8, 7u8, 99u8, 113u8, 106u8, 124u8, 92u8, 115u8, 75u8, 228u8, 39u8,
							234u8, 192u8, 134u8, 69u8, 109u8, 119u8, 133u8, 194u8, 110u8, 167u8,
							244u8,
						] {
						let call = RemoveOtherVote { target, index };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Enact a proposal from a referendum. For now we just make the weight be the maximum."]
				pub fn enact_proposal(
					&self,
					proposal_hash: ::subxt::sp_core::H256,
					index: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						EnactProposal,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<EnactProposal>()?
					};
					if runtime_call_hash ==
						[
							246u8, 188u8, 9u8, 244u8, 56u8, 81u8, 201u8, 59u8, 212u8, 11u8, 204u8,
							7u8, 173u8, 7u8, 212u8, 34u8, 173u8, 248u8, 83u8, 225u8, 209u8, 105u8,
							249u8, 167u8, 243u8, 49u8, 119u8, 167u8, 28u8, 31u8, 60u8, 75u8,
						] {
						let call = EnactProposal { proposal_hash, index };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Permanently place a proposal into the blacklist. This prevents it from ever being"]
				#[doc = "proposed again."]
				#[doc = ""]
				#[doc = "If called on a queued public or external proposal, then this will result in it being"]
				#[doc = "removed. If the `ref_index` supplied is an active referendum with the proposal hash,"]
				#[doc = "then it will be cancelled."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `BlacklistOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The proposal hash to blacklist permanently."]
				#[doc = "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be"]
				#[doc = "cancelled."]
				#[doc = ""]
				#[doc = "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a"]
				#[doc = "  reasonable value)."]
				pub fn blacklist(
					&self,
					proposal_hash: ::subxt::sp_core::H256,
					maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Blacklist,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Blacklist>()?
					};
					if runtime_call_hash ==
						[
							105u8, 99u8, 153u8, 150u8, 122u8, 234u8, 105u8, 238u8, 152u8, 152u8,
							121u8, 181u8, 133u8, 246u8, 159u8, 35u8, 8u8, 65u8, 15u8, 203u8, 206u8,
							75u8, 28u8, 214u8, 111u8, 26u8, 40u8, 141u8, 68u8, 57u8, 217u8, 244u8,
						] {
						let call = Blacklist { proposal_hash, maybe_ref_index };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Remove a proposal."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `CancelProposalOrigin`."]
				#[doc = ""]
				#[doc = "- `prop_index`: The index of the proposal to cancel."]
				#[doc = ""]
				#[doc = "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"]
				pub fn cancel_proposal(
					&self,
					prop_index: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						CancelProposal,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<CancelProposal>()?
					};
					if runtime_call_hash ==
						[
							26u8, 117u8, 180u8, 24u8, 12u8, 177u8, 77u8, 254u8, 113u8, 53u8, 146u8,
							48u8, 164u8, 255u8, 45u8, 205u8, 207u8, 46u8, 74u8, 184u8, 73u8, 95u8,
							216u8, 190u8, 240u8, 64u8, 121u8, 104u8, 147u8, 141u8, 128u8, 82u8,
						] {
						let call = CancelProposal { prop_index };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_democracy::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A motion has been proposed by a public account."]
			pub struct Proposed {
				pub proposal_index: ::core::primitive::u32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::Event for Proposed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A public proposal has been tabled for referendum vote."]
			pub struct Tabled {
				pub proposal_index: ::core::primitive::u32,
				pub deposit: ::core::primitive::u128,
				pub depositors: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
			}
			impl ::subxt::Event for Tabled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Tabled";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An external proposal has been tabled."]
			pub struct ExternalTabled;
			impl ::subxt::Event for ExternalTabled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "ExternalTabled";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A referendum has begun."]
			pub struct Started {
				pub ref_index: ::core::primitive::u32,
				pub threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
			}
			impl ::subxt::Event for Started {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Started";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "A proposal has been approved by referendum."]
			pub struct Passed {
				pub ref_index: ::core::primitive::u32,
			}
			impl ::subxt::Event for Passed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Passed";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "A proposal has been rejected by referendum."]
			pub struct NotPassed {
				pub ref_index: ::core::primitive::u32,
			}
			impl ::subxt::Event for NotPassed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "NotPassed";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "A referendum has been cancelled."]
			pub struct Cancelled {
				pub ref_index: ::core::primitive::u32,
			}
			impl ::subxt::Event for Cancelled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Cancelled";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A proposal has been enacted."]
			pub struct Executed {
				pub ref_index: ::core::primitive::u32,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::Event for Executed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Executed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An account has delegated their vote to another account."]
			pub struct Delegated {
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub target: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Event for Delegated {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Delegated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An account has cancelled a previous delegation operation."]
			pub struct Undelegated {
				pub account: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Event for Undelegated {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Undelegated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An external proposal has been vetoed."]
			pub struct Vetoed {
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub proposal_hash: ::subxt::sp_core::H256,
				pub until: ::core::primitive::u32,
			}
			impl ::subxt::Event for Vetoed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Vetoed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A proposal's preimage was noted, and the deposit taken."]
			pub struct PreimageNoted {
				pub proposal_hash: ::subxt::sp_core::H256,
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::Event for PreimageNoted {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "PreimageNoted";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A proposal preimage was removed and used (the deposit was returned)."]
			pub struct PreimageUsed {
				pub proposal_hash: ::subxt::sp_core::H256,
				pub provider: ::subxt::sp_core::crypto::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::Event for PreimageUsed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "PreimageUsed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A proposal could not be executed because its preimage was invalid."]
			pub struct PreimageInvalid {
				pub proposal_hash: ::subxt::sp_core::H256,
				pub ref_index: ::core::primitive::u32,
			}
			impl ::subxt::Event for PreimageInvalid {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "PreimageInvalid";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A proposal could not be executed because its preimage was missing."]
			pub struct PreimageMissing {
				pub proposal_hash: ::subxt::sp_core::H256,
				pub ref_index: ::core::primitive::u32,
			}
			impl ::subxt::Event for PreimageMissing {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "PreimageMissing";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A registered preimage was removed and the deposit collected by the reaper."]
			pub struct PreimageReaped {
				pub proposal_hash: ::subxt::sp_core::H256,
				pub provider: ::subxt::sp_core::crypto::AccountId32,
				pub deposit: ::core::primitive::u128,
				pub reaper: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Event for PreimageReaped {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "PreimageReaped";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A proposal_hash has been blacklisted permanently."]
			pub struct Blacklisted {
				pub proposal_hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Event for Blacklisted {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Blacklisted";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An account has voted in a referendum"]
			pub struct Voted {
				pub voter: ::subxt::sp_core::crypto::AccountId32,
				pub ref_index: ::core::primitive::u32,
				pub vote:
					runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>,
			}
			impl ::subxt::Event for Voted {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Voted";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An account has secconded a proposal"]
			pub struct Seconded {
				pub seconder: ::subxt::sp_core::crypto::AccountId32,
				pub prop_index: ::core::primitive::u32,
			}
			impl ::subxt::Event for Seconded {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Seconded";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct PublicPropCount;
			impl ::subxt::StorageEntry for PublicPropCount {
				const PALLET: &'static str = "Democracy";
				const STORAGE: &'static str = "PublicPropCount";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct PublicProps;
			impl ::subxt::StorageEntry for PublicProps {
				const PALLET: &'static str = "Democracy";
				const STORAGE: &'static str = "PublicProps";
				type Value = ::std::vec::Vec<(
					::core::primitive::u32,
					::subxt::sp_core::H256,
					::subxt::sp_core::crypto::AccountId32,
				)>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct DepositOf<'a>(pub &'a ::core::primitive::u32);
			impl ::subxt::StorageEntry for DepositOf<'_> {
				const PALLET: &'static str = "Democracy";
				const STORAGE: &'static str = "DepositOf";
				type Value = (
					::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
					::core::primitive::u128,
				);
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct Preimages<'a>(pub &'a ::subxt::sp_core::H256);
			impl ::subxt::StorageEntry for Preimages<'_> {
				const PALLET: &'static str = "Democracy";
				const STORAGE: &'static str = "Preimages";
				type Value = runtime_types::pallet_democracy::PreimageStatus<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u128,
					::core::primitive::u32,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Identity,
					)])
				}
			}
			pub struct ReferendumCount;
			impl ::subxt::StorageEntry for ReferendumCount {
				const PALLET: &'static str = "Democracy";
				const STORAGE: &'static str = "ReferendumCount";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct LowestUnbaked;
			impl ::subxt::StorageEntry for LowestUnbaked {
				const PALLET: &'static str = "Democracy";
				const STORAGE: &'static str = "LowestUnbaked";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct ReferendumInfoOf<'a>(pub &'a ::core::primitive::u32);
			impl ::subxt::StorageEntry for ReferendumInfoOf<'_> {
				const PALLET: &'static str = "Democracy";
				const STORAGE: &'static str = "ReferendumInfoOf";
				type Value = runtime_types::pallet_democracy::types::ReferendumInfo<
					::core::primitive::u32,
					::subxt::sp_core::H256,
					::core::primitive::u128,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct VotingOf<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::StorageEntry for VotingOf<'_> {
				const PALLET: &'static str = "Democracy";
				const STORAGE: &'static str = "VotingOf";
				type Value = runtime_types::pallet_democracy::vote::Voting<
					::core::primitive::u128,
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct LastTabledWasExternal;
			impl ::subxt::StorageEntry for LastTabledWasExternal {
				const PALLET: &'static str = "Democracy";
				const STORAGE: &'static str = "LastTabledWasExternal";
				type Value = ::core::primitive::bool;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct NextExternal;
			impl ::subxt::StorageEntry for NextExternal {
				const PALLET: &'static str = "Democracy";
				const STORAGE: &'static str = "NextExternal";
				type Value = (
					::subxt::sp_core::H256,
					runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
				);
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Blacklist<'a>(pub &'a ::subxt::sp_core::H256);
			impl ::subxt::StorageEntry for Blacklist<'_> {
				const PALLET: &'static str = "Democracy";
				const STORAGE: &'static str = "Blacklist";
				type Value = (
					::core::primitive::u32,
					::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
				);
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Identity,
					)])
				}
			}
			pub struct Cancellations<'a>(pub &'a ::subxt::sp_core::H256);
			impl ::subxt::StorageEntry for Cancellations<'_> {
				const PALLET: &'static str = "Democracy";
				const STORAGE: &'static str = "Cancellations";
				type Value = ::core::primitive::bool;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Identity,
					)])
				}
			}
			pub struct StorageVersion;
			impl ::subxt::StorageEntry for StorageVersion {
				const PALLET: &'static str = "Democracy";
				const STORAGE: &'static str = "StorageVersion";
				type Value = runtime_types::pallet_democracy::Releases;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The number of (public) proposals that have been made so far."]
				pub fn public_prop_count(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<PublicPropCount>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								91u8, 14u8, 171u8, 94u8, 37u8, 157u8, 46u8, 157u8, 254u8, 13u8,
								68u8, 144u8, 23u8, 146u8, 128u8, 159u8, 9u8, 174u8, 74u8, 174u8,
								218u8, 197u8, 23u8, 235u8, 152u8, 226u8, 216u8, 4u8, 120u8, 121u8,
								27u8, 138u8,
							] {
							let entry = PublicPropCount;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The public proposals. Unsorted. The second item is the proposal's hash."]
				pub fn public_props(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<(
							::core::primitive::u32,
							::subxt::sp_core::H256,
							::subxt::sp_core::crypto::AccountId32,
						)>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<PublicProps>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								78u8, 208u8, 211u8, 20u8, 85u8, 237u8, 161u8, 149u8, 99u8, 158u8,
								6u8, 54u8, 204u8, 228u8, 132u8, 10u8, 75u8, 247u8, 148u8, 155u8,
								101u8, 183u8, 58u8, 169u8, 21u8, 172u8, 10u8, 110u8, 130u8, 74u8,
								88u8, 52u8,
							] {
							let entry = PublicProps;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Those who have locked a deposit."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: Safe, as increasing integer keys are safe."]
				pub fn deposit_of(
					&self,
					_0: &'a ::core::primitive::u32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<(
							::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
							::core::primitive::u128,
						)>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<DepositOf>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								116u8, 57u8, 200u8, 96u8, 150u8, 62u8, 162u8, 169u8, 28u8, 18u8,
								134u8, 161u8, 210u8, 217u8, 80u8, 225u8, 22u8, 185u8, 177u8, 166u8,
								243u8, 232u8, 193u8, 64u8, 170u8, 89u8, 216u8, 198u8, 43u8, 102u8,
								178u8, 55u8,
							] {
							let entry = DepositOf(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Those who have locked a deposit."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: Safe, as increasing integer keys are safe."]
				pub fn deposit_of_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, DepositOf<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<DepositOf>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								116u8, 57u8, 200u8, 96u8, 150u8, 62u8, 162u8, 169u8, 28u8, 18u8,
								134u8, 161u8, 210u8, 217u8, 80u8, 225u8, 22u8, 185u8, 177u8, 166u8,
								243u8, 232u8, 193u8, 64u8, 170u8, 89u8, 216u8, 198u8, 43u8, 102u8,
								178u8, 55u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Map of hashes to the proposal preimage, along with who registered it and their deposit."]
				#[doc = " The block number is the block at which it was deposited."]
				pub fn preimages(
					&self,
					_0: &'a ::subxt::sp_core::H256,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_democracy::PreimageStatus<
								::subxt::sp_core::crypto::AccountId32,
								::core::primitive::u128,
								::core::primitive::u32,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Preimages>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								20u8, 82u8, 223u8, 51u8, 178u8, 115u8, 71u8, 83u8, 23u8, 15u8,
								85u8, 66u8, 0u8, 69u8, 68u8, 20u8, 28u8, 159u8, 74u8, 41u8, 225u8,
								145u8, 247u8, 23u8, 36u8, 155u8, 101u8, 229u8, 27u8, 24u8, 93u8,
								215u8,
							] {
							let entry = Preimages(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Map of hashes to the proposal preimage, along with who registered it and their deposit."]
				#[doc = " The block number is the block at which it was deposited."]
				pub fn preimages_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Preimages<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Preimages>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								20u8, 82u8, 223u8, 51u8, 178u8, 115u8, 71u8, 83u8, 23u8, 15u8,
								85u8, 66u8, 0u8, 69u8, 68u8, 20u8, 28u8, 159u8, 74u8, 41u8, 225u8,
								145u8, 247u8, 23u8, 36u8, 155u8, 101u8, 229u8, 27u8, 24u8, 93u8,
								215u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The next free referendum index, aka the number of referenda started so far."]
				pub fn referendum_count(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ReferendumCount>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								153u8, 210u8, 106u8, 244u8, 156u8, 70u8, 124u8, 251u8, 123u8, 75u8,
								7u8, 189u8, 199u8, 145u8, 95u8, 119u8, 137u8, 11u8, 240u8, 160u8,
								151u8, 248u8, 229u8, 231u8, 89u8, 222u8, 18u8, 237u8, 144u8, 78u8,
								99u8, 58u8,
							] {
							let entry = ReferendumCount;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The lowest referendum index representing an unbaked referendum. Equal to"]
				#[doc = " `ReferendumCount` if there isn't a unbaked referendum."]
				pub fn lowest_unbaked(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<LowestUnbaked>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								4u8, 51u8, 108u8, 11u8, 48u8, 165u8, 19u8, 251u8, 182u8, 76u8,
								163u8, 73u8, 227u8, 2u8, 212u8, 74u8, 128u8, 27u8, 165u8, 164u8,
								111u8, 22u8, 209u8, 190u8, 103u8, 7u8, 116u8, 16u8, 160u8, 144u8,
								123u8, 64u8,
							] {
							let entry = LowestUnbaked;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Information concerning any given referendum."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]
				pub fn referendum_info_of(
					&self,
					_0: &'a ::core::primitive::u32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_democracy::types::ReferendumInfo<
								::core::primitive::u32,
								::subxt::sp_core::H256,
								::core::primitive::u128,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ReferendumInfoOf>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								112u8, 206u8, 173u8, 93u8, 255u8, 76u8, 85u8, 122u8, 24u8, 97u8,
								177u8, 67u8, 44u8, 143u8, 53u8, 159u8, 206u8, 135u8, 63u8, 74u8,
								230u8, 47u8, 27u8, 224u8, 138u8, 217u8, 194u8, 229u8, 148u8, 249u8,
								230u8, 114u8,
							] {
							let entry = ReferendumInfoOf(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Information concerning any given referendum."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]
				pub fn referendum_info_of_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, ReferendumInfoOf<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ReferendumInfoOf>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								112u8, 206u8, 173u8, 93u8, 255u8, 76u8, 85u8, 122u8, 24u8, 97u8,
								177u8, 67u8, 44u8, 143u8, 53u8, 159u8, 206u8, 135u8, 63u8, 74u8,
								230u8, 47u8, 27u8, 224u8, 138u8, 217u8, 194u8, 229u8, 148u8, 249u8,
								230u8, 114u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " All votes for a particular voter. We store the balance for the number of votes that we"]
				#[doc = " have recorded. The second item is the total amount of delegations, that will be added."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]
				pub fn voting_of(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::pallet_democracy::vote::Voting<
							::core::primitive::u128,
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<VotingOf>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								194u8, 13u8, 151u8, 207u8, 194u8, 79u8, 233u8, 214u8, 193u8, 52u8,
								78u8, 62u8, 71u8, 35u8, 139u8, 11u8, 41u8, 163u8, 143u8, 156u8,
								236u8, 207u8, 132u8, 138u8, 2u8, 176u8, 56u8, 224u8, 67u8, 39u8,
								190u8, 13u8,
							] {
							let entry = VotingOf(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " All votes for a particular voter. We store the balance for the number of votes that we"]
				#[doc = " have recorded. The second item is the total amount of delegations, that will be added."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]
				pub fn voting_of_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, VotingOf<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<VotingOf>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								194u8, 13u8, 151u8, 207u8, 194u8, 79u8, 233u8, 214u8, 193u8, 52u8,
								78u8, 62u8, 71u8, 35u8, 139u8, 11u8, 41u8, 163u8, 143u8, 156u8,
								236u8, 207u8, 132u8, 138u8, 2u8, 176u8, 56u8, 224u8, 67u8, 39u8,
								190u8, 13u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " True if the last referendum tabled was submitted externally. False if it was a public"]
				#[doc = " proposal."]
				pub fn last_tabled_was_external(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::bool, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<LastTabledWasExternal>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								3u8, 67u8, 106u8, 1u8, 89u8, 204u8, 4u8, 145u8, 121u8, 44u8, 34u8,
								76u8, 18u8, 206u8, 65u8, 214u8, 222u8, 82u8, 31u8, 223u8, 144u8,
								169u8, 17u8, 6u8, 138u8, 36u8, 113u8, 155u8, 241u8, 106u8, 189u8,
								218u8,
							] {
							let entry = LastTabledWasExternal;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The referendum to be tabled whenever it would be valid to table an external proposal."]
				#[doc = " This happens when a referendum needs to be tabled and one of two conditions are met:"]
				#[doc = " - `LastTabledWasExternal` is `false`; or"]
				#[doc = " - `PublicProps` is empty."]
				pub fn next_external(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<(
							::subxt::sp_core::H256,
							runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
						)>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<NextExternal>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								167u8, 226u8, 113u8, 10u8, 12u8, 157u8, 190u8, 117u8, 233u8, 177u8,
								254u8, 126u8, 2u8, 55u8, 100u8, 249u8, 78u8, 127u8, 148u8, 239u8,
								193u8, 246u8, 123u8, 58u8, 150u8, 132u8, 209u8, 228u8, 105u8,
								195u8, 217u8, 99u8,
							] {
							let entry = NextExternal;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " A record of who vetoed what. Maps proposal hash to a possible existent block number"]
				#[doc = " (until when it may not be resubmitted) and who vetoed it."]
				pub fn blacklist(
					&self,
					_0: &'a ::subxt::sp_core::H256,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<(
							::core::primitive::u32,
							::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
						)>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Blacklist>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								9u8, 76u8, 174u8, 143u8, 210u8, 103u8, 197u8, 219u8, 152u8, 134u8,
								67u8, 78u8, 109u8, 39u8, 246u8, 214u8, 3u8, 51u8, 69u8, 208u8,
								32u8, 69u8, 247u8, 14u8, 236u8, 37u8, 112u8, 226u8, 146u8, 169u8,
								153u8, 217u8,
							] {
							let entry = Blacklist(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " A record of who vetoed what. Maps proposal hash to a possible existent block number"]
				#[doc = " (until when it may not be resubmitted) and who vetoed it."]
				pub fn blacklist_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Blacklist<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Blacklist>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								9u8, 76u8, 174u8, 143u8, 210u8, 103u8, 197u8, 219u8, 152u8, 134u8,
								67u8, 78u8, 109u8, 39u8, 246u8, 214u8, 3u8, 51u8, 69u8, 208u8,
								32u8, 69u8, 247u8, 14u8, 236u8, 37u8, 112u8, 226u8, 146u8, 169u8,
								153u8, 217u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Record of all proposals that have been subject to emergency cancellation."]
				pub fn cancellations(
					&self,
					_0: &'a ::subxt::sp_core::H256,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::bool, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Cancellations>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								176u8, 55u8, 142u8, 79u8, 35u8, 110u8, 215u8, 163u8, 134u8, 172u8,
								171u8, 71u8, 180u8, 175u8, 7u8, 29u8, 126u8, 141u8, 236u8, 234u8,
								214u8, 132u8, 192u8, 197u8, 205u8, 31u8, 106u8, 122u8, 204u8, 71u8,
								155u8, 18u8,
							] {
							let entry = Cancellations(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Record of all proposals that have been subject to emergency cancellation."]
				pub fn cancellations_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Cancellations<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Cancellations>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								176u8, 55u8, 142u8, 79u8, 35u8, 110u8, 215u8, 163u8, 134u8, 172u8,
								171u8, 71u8, 180u8, 175u8, 7u8, 29u8, 126u8, 141u8, 236u8, 234u8,
								214u8, 132u8, 192u8, 197u8, 205u8, 31u8, 106u8, 122u8, 204u8, 71u8,
								155u8, 18u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Storage version of the pallet."]
				#[doc = ""]
				#[doc = " New networks start with last version."]
				pub fn storage_version(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<runtime_types::pallet_democracy::Releases>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<StorageVersion>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								39u8, 219u8, 134u8, 64u8, 250u8, 96u8, 95u8, 156u8, 100u8, 236u8,
								18u8, 78u8, 59u8, 146u8, 5u8, 245u8, 113u8, 125u8, 220u8, 140u8,
								125u8, 5u8, 194u8, 134u8, 248u8, 95u8, 250u8, 108u8, 142u8, 230u8,
								21u8, 120u8,
							] {
							let entry = StorageVersion;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The period between a proposal being approved and enacted."]
				#[doc = ""]
				#[doc = " It should generally be a little more than the unstake period to ensure that"]
				#[doc = " voting stakers have an opportunity to remove themselves from the system in the case"]
				#[doc = " where they are on the losing side of a vote."]
				pub fn enactment_period(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Democracy", "EnactmentPeriod")? ==
						[
							253u8, 67u8, 165u8, 237u8, 244u8, 21u8, 109u8, 170u8, 142u8, 183u8,
							41u8, 182u8, 101u8, 237u8, 67u8, 154u8, 228u8, 14u8, 229u8, 154u8,
							109u8, 21u8, 146u8, 31u8, 214u8, 169u8, 17u8, 160u8, 130u8, 186u8,
							114u8, 40u8,
						] {
						let pallet = metadata.pallet("Democracy")?;
						let constant = pallet.constant("EnactmentPeriod")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " How often (in blocks) new public referenda are launched."]
				pub fn launch_period(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Democracy", "LaunchPeriod")? ==
						[
							245u8, 237u8, 56u8, 109u8, 232u8, 150u8, 223u8, 171u8, 23u8, 64u8,
							50u8, 121u8, 167u8, 27u8, 147u8, 211u8, 244u8, 31u8, 94u8, 133u8,
							157u8, 189u8, 228u8, 8u8, 154u8, 138u8, 31u8, 184u8, 0u8, 247u8, 80u8,
							40u8,
						] {
						let pallet = metadata.pallet("Democracy")?;
						let constant = pallet.constant("LaunchPeriod")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " How often (in blocks) to check for new votes."]
				pub fn voting_period(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Democracy", "VotingPeriod")? ==
						[
							171u8, 175u8, 8u8, 228u8, 60u8, 233u8, 241u8, 79u8, 126u8, 7u8, 91u8,
							193u8, 111u8, 213u8, 171u8, 254u8, 239u8, 84u8, 216u8, 218u8, 140u8,
							137u8, 165u8, 197u8, 197u8, 219u8, 235u8, 250u8, 156u8, 52u8, 141u8,
							231u8,
						] {
						let pallet = metadata.pallet("Democracy")?;
						let constant = pallet.constant("VotingPeriod")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The minimum period of vote locking."]
				#[doc = ""]
				#[doc = " It should be no shorter than enactment period to ensure that in the case of an approval,"]
				#[doc = " those successful voters are locked into the consequences that their votes entail."]
				pub fn vote_locking_period(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Democracy", "VoteLockingPeriod")? ==
						[
							0u8, 77u8, 4u8, 208u8, 241u8, 242u8, 197u8, 163u8, 193u8, 241u8, 59u8,
							147u8, 113u8, 125u8, 62u8, 30u8, 6u8, 158u8, 243u8, 57u8, 162u8, 41u8,
							68u8, 22u8, 227u8, 4u8, 242u8, 253u8, 203u8, 147u8, 183u8, 109u8,
						] {
						let pallet = metadata.pallet("Democracy")?;
						let constant = pallet.constant("VoteLockingPeriod")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The minimum amount to be used as a deposit for a public referendum proposal."]
				pub fn minimum_deposit(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Democracy", "MinimumDeposit")? ==
						[
							121u8, 234u8, 23u8, 29u8, 240u8, 133u8, 174u8, 115u8, 158u8, 231u8,
							16u8, 152u8, 230u8, 36u8, 211u8, 29u8, 232u8, 222u8, 8u8, 19u8, 140u8,
							236u8, 140u8, 225u8, 144u8, 190u8, 110u8, 76u8, 220u8, 219u8, 81u8,
							130u8,
						] {
						let pallet = metadata.pallet("Democracy")?;
						let constant = pallet.constant("MinimumDeposit")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " Indicator for whether an emergency origin is even allowed to happen. Some chains may"]
				#[doc = " want to set this permanently to `false`, others may want to condition it on things such"]
				#[doc = " as an upgrade having happened recently."]
				pub fn instant_allowed(
					&self,
				) -> ::core::result::Result<::core::primitive::bool, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Democracy", "InstantAllowed")? ==
						[
							66u8, 19u8, 43u8, 75u8, 149u8, 2u8, 157u8, 136u8, 33u8, 102u8, 57u8,
							127u8, 246u8, 72u8, 14u8, 94u8, 240u8, 2u8, 162u8, 86u8, 232u8, 70u8,
							22u8, 133u8, 209u8, 205u8, 115u8, 236u8, 17u8, 9u8, 37u8, 14u8,
						] {
						let pallet = metadata.pallet("Democracy")?;
						let constant = pallet.constant("InstantAllowed")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " Minimum voting period allowed for a fast-track referendum."]
				pub fn fast_track_voting_period(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Democracy", "FastTrackVotingPeriod")? ==
						[
							71u8, 48u8, 212u8, 167u8, 97u8, 240u8, 205u8, 66u8, 106u8, 13u8, 53u8,
							104u8, 141u8, 228u8, 124u8, 14u8, 185u8, 138u8, 30u8, 168u8, 192u8,
							78u8, 16u8, 7u8, 31u8, 126u8, 120u8, 79u8, 57u8, 207u8, 171u8, 37u8,
						] {
						let pallet = metadata.pallet("Democracy")?;
						let constant = pallet.constant("FastTrackVotingPeriod")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " Period in blocks where an external proposal may not be re-submitted after being vetoed."]
				pub fn cooloff_period(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Democracy", "CooloffPeriod")? ==
						[
							231u8, 13u8, 169u8, 211u8, 179u8, 85u8, 187u8, 112u8, 204u8, 125u8,
							248u8, 22u8, 161u8, 217u8, 211u8, 93u8, 187u8, 28u8, 129u8, 171u8,
							88u8, 37u8, 161u8, 180u8, 87u8, 207u8, 132u8, 111u8, 66u8, 194u8, 38u8,
							5u8,
						] {
						let pallet = metadata.pallet("Democracy")?;
						let constant = pallet.constant("CooloffPeriod")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The amount of balance that must be deposited per byte of preimage stored."]
				pub fn preimage_byte_deposit(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Democracy", "PreimageByteDeposit")? ==
						[
							40u8, 225u8, 79u8, 2u8, 3u8, 167u8, 159u8, 232u8, 81u8, 38u8, 248u8,
							132u8, 236u8, 203u8, 88u8, 133u8, 112u8, 47u8, 141u8, 153u8, 104u8,
							87u8, 191u8, 102u8, 65u8, 32u8, 120u8, 166u8, 188u8, 23u8, 34u8, 202u8,
						] {
						let pallet = metadata.pallet("Democracy")?;
						let constant = pallet.constant("PreimageByteDeposit")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The maximum number of votes for an account."]
				#[doc = ""]
				#[doc = " Also used to compute weight, an overly big value can"]
				#[doc = " lead to extrinsic with very big weight: see `delegate` for instance."]
				pub fn max_votes(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Democracy", "MaxVotes")? ==
						[
							218u8, 111u8, 73u8, 160u8, 254u8, 247u8, 22u8, 113u8, 78u8, 79u8,
							145u8, 255u8, 29u8, 155u8, 89u8, 144u8, 4u8, 167u8, 134u8, 190u8,
							232u8, 124u8, 36u8, 207u8, 7u8, 204u8, 40u8, 32u8, 38u8, 216u8, 249u8,
							29u8,
						] {
						let pallet = metadata.pallet("Democracy")?;
						let constant = pallet.constant("MaxVotes")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The maximum number of public proposals that can exist at any time."]
				pub fn max_proposals(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Democracy", "MaxProposals")? ==
						[
							125u8, 103u8, 31u8, 211u8, 29u8, 50u8, 100u8, 13u8, 229u8, 120u8,
							216u8, 228u8, 4u8, 121u8, 229u8, 90u8, 172u8, 228u8, 86u8, 73u8, 64u8,
							153u8, 249u8, 48u8, 232u8, 150u8, 150u8, 65u8, 205u8, 182u8, 12u8,
							81u8,
						] {
						let pallet = metadata.pallet("Democracy")?;
						let constant = pallet.constant("MaxProposals")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod scheduler {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Schedule {
				pub when: ::core::primitive::u32,
				pub maybe_periodic:
					::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
				pub priority: ::core::primitive::u8,
				pub call: ::std::boxed::Box<
					runtime_types::frame_support::traits::schedule::MaybeHashed<
						runtime_types::dali_runtime::Call,
						::subxt::sp_core::H256,
					>,
				>,
			}
			impl ::subxt::Call for Schedule {
				const PALLET: &'static str = "Scheduler";
				const FUNCTION: &'static str = "schedule";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Cancel {
				pub when: ::core::primitive::u32,
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::Call for Cancel {
				const PALLET: &'static str = "Scheduler";
				const FUNCTION: &'static str = "cancel";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ScheduleNamed {
				pub id: ::std::vec::Vec<::core::primitive::u8>,
				pub when: ::core::primitive::u32,
				pub maybe_periodic:
					::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
				pub priority: ::core::primitive::u8,
				pub call: ::std::boxed::Box<
					runtime_types::frame_support::traits::schedule::MaybeHashed<
						runtime_types::dali_runtime::Call,
						::subxt::sp_core::H256,
					>,
				>,
			}
			impl ::subxt::Call for ScheduleNamed {
				const PALLET: &'static str = "Scheduler";
				const FUNCTION: &'static str = "schedule_named";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct CancelNamed {
				pub id: ::std::vec::Vec<::core::primitive::u8>,
			}
			impl ::subxt::Call for CancelNamed {
				const PALLET: &'static str = "Scheduler";
				const FUNCTION: &'static str = "cancel_named";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ScheduleAfter {
				pub after: ::core::primitive::u32,
				pub maybe_periodic:
					::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
				pub priority: ::core::primitive::u8,
				pub call: ::std::boxed::Box<
					runtime_types::frame_support::traits::schedule::MaybeHashed<
						runtime_types::dali_runtime::Call,
						::subxt::sp_core::H256,
					>,
				>,
			}
			impl ::subxt::Call for ScheduleAfter {
				const PALLET: &'static str = "Scheduler";
				const FUNCTION: &'static str = "schedule_after";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ScheduleNamedAfter {
				pub id: ::std::vec::Vec<::core::primitive::u8>,
				pub after: ::core::primitive::u32,
				pub maybe_periodic:
					::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
				pub priority: ::core::primitive::u8,
				pub call: ::std::boxed::Box<
					runtime_types::frame_support::traits::schedule::MaybeHashed<
						runtime_types::dali_runtime::Call,
						::subxt::sp_core::H256,
					>,
				>,
			}
			impl ::subxt::Call for ScheduleNamedAfter {
				const PALLET: &'static str = "Scheduler";
				const FUNCTION: &'static str = "schedule_named_after";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Anonymously schedule a task."]
				pub fn schedule(
					&self,
					when: ::core::primitive::u32,
					maybe_periodic: ::core::option::Option<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					priority: ::core::primitive::u8,
					call: runtime_types::frame_support::traits::schedule::MaybeHashed<
						runtime_types::dali_runtime::Call,
						::subxt::sp_core::H256,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Schedule,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Schedule>()?
					};
					if runtime_call_hash ==
						[
							154u8, 52u8, 4u8, 94u8, 116u8, 65u8, 209u8, 139u8, 156u8, 236u8, 183u8,
							208u8, 108u8, 116u8, 166u8, 59u8, 1u8, 51u8, 252u8, 129u8, 31u8, 159u8,
							192u8, 17u8, 73u8, 142u8, 30u8, 126u8, 208u8, 108u8, 207u8, 46u8,
						] {
						let call = Schedule {
							when,
							maybe_periodic,
							priority,
							call: ::std::boxed::Box::new(call),
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Cancel an anonymously scheduled task."]
				pub fn cancel(
					&self,
					when: ::core::primitive::u32,
					index: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Cancel, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Cancel>()?
					};
					if runtime_call_hash ==
						[
							118u8, 0u8, 188u8, 218u8, 148u8, 86u8, 139u8, 15u8, 3u8, 161u8, 6u8,
							150u8, 46u8, 32u8, 85u8, 179u8, 106u8, 113u8, 240u8, 115u8, 167u8,
							114u8, 243u8, 69u8, 103u8, 60u8, 99u8, 135u8, 21u8, 8u8, 19u8, 225u8,
						] {
						let call = Cancel { when, index };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Schedule a named task."]
				pub fn schedule_named(
					&self,
					id: ::std::vec::Vec<::core::primitive::u8>,
					when: ::core::primitive::u32,
					maybe_periodic: ::core::option::Option<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					priority: ::core::primitive::u8,
					call: runtime_types::frame_support::traits::schedule::MaybeHashed<
						runtime_types::dali_runtime::Call,
						::subxt::sp_core::H256,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ScheduleNamed,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ScheduleNamed>()?
					};
					if runtime_call_hash ==
						[
							230u8, 165u8, 135u8, 100u8, 12u8, 183u8, 137u8, 92u8, 212u8, 130u8,
							47u8, 150u8, 31u8, 231u8, 43u8, 63u8, 227u8, 200u8, 127u8, 118u8, 28u8,
							108u8, 142u8, 241u8, 122u8, 161u8, 150u8, 54u8, 193u8, 130u8, 189u8,
							123u8,
						] {
						let call = ScheduleNamed {
							id,
							when,
							maybe_periodic,
							priority,
							call: ::std::boxed::Box::new(call),
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Cancel a named scheduled task."]
				pub fn cancel_named(
					&self,
					id: ::std::vec::Vec<::core::primitive::u8>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						CancelNamed,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<CancelNamed>()?
					};
					if runtime_call_hash ==
						[
							118u8, 221u8, 232u8, 126u8, 67u8, 134u8, 33u8, 7u8, 224u8, 110u8,
							181u8, 18u8, 57u8, 39u8, 15u8, 64u8, 90u8, 132u8, 2u8, 238u8, 19u8,
							241u8, 194u8, 120u8, 5u8, 109u8, 74u8, 205u8, 42u8, 244u8, 99u8, 54u8,
						] {
						let call = CancelNamed { id };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Anonymously schedule a task after a delay."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Same as [`schedule`]."]
				#[doc = "# </weight>"]
				pub fn schedule_after(
					&self,
					after: ::core::primitive::u32,
					maybe_periodic: ::core::option::Option<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					priority: ::core::primitive::u8,
					call: runtime_types::frame_support::traits::schedule::MaybeHashed<
						runtime_types::dali_runtime::Call,
						::subxt::sp_core::H256,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ScheduleAfter,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ScheduleAfter>()?
					};
					if runtime_call_hash ==
						[
							214u8, 59u8, 210u8, 169u8, 50u8, 115u8, 23u8, 65u8, 25u8, 8u8, 67u8,
							44u8, 121u8, 194u8, 62u8, 75u8, 205u8, 186u8, 208u8, 50u8, 237u8,
							170u8, 106u8, 16u8, 190u8, 13u8, 248u8, 188u8, 227u8, 12u8, 11u8, 29u8,
						] {
						let call = ScheduleAfter {
							after,
							maybe_periodic,
							priority,
							call: ::std::boxed::Box::new(call),
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Schedule a named task after a delay."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Same as [`schedule_named`](Self::schedule_named)."]
				#[doc = "# </weight>"]
				pub fn schedule_named_after(
					&self,
					id: ::std::vec::Vec<::core::primitive::u8>,
					after: ::core::primitive::u32,
					maybe_periodic: ::core::option::Option<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					priority: ::core::primitive::u8,
					call: runtime_types::frame_support::traits::schedule::MaybeHashed<
						runtime_types::dali_runtime::Call,
						::subxt::sp_core::H256,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ScheduleNamedAfter,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ScheduleNamedAfter>()?
					};
					if runtime_call_hash ==
						[
							52u8, 206u8, 88u8, 246u8, 103u8, 56u8, 237u8, 67u8, 145u8, 203u8, 4u8,
							230u8, 107u8, 241u8, 110u8, 108u8, 209u8, 51u8, 129u8, 40u8, 255u8,
							12u8, 82u8, 89u8, 92u8, 94u8, 116u8, 185u8, 228u8, 253u8, 213u8, 143u8,
						] {
						let call = ScheduleNamedAfter {
							id,
							after,
							maybe_periodic,
							priority,
							call: ::std::boxed::Box::new(call),
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "Events type."]
		pub type Event = runtime_types::pallet_scheduler::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Scheduled some task."]
			pub struct Scheduled {
				pub when: ::core::primitive::u32,
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::Event for Scheduled {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "Scheduled";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Canceled some task."]
			pub struct Canceled {
				pub when: ::core::primitive::u32,
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::Event for Canceled {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "Canceled";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Dispatched some task."]
			pub struct Dispatched {
				pub task: (::core::primitive::u32, ::core::primitive::u32),
				pub id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::Event for Dispatched {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "Dispatched";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "The call for the provided hash was not found so the task has been aborted."]
			pub struct CallLookupFailed {
				pub task: (::core::primitive::u32, ::core::primitive::u32),
				pub id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
				pub error: runtime_types::frame_support::traits::schedule::LookupError,
			}
			impl ::subxt::Event for CallLookupFailed {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "CallLookupFailed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct Agenda<'a>(pub &'a ::core::primitive::u32);
			impl ::subxt::StorageEntry for Agenda<'_> {
				const PALLET: &'static str = "Scheduler";
				const STORAGE: &'static str = "Agenda";
				type Value = ::std::vec::Vec<
					::core::option::Option<
						runtime_types::pallet_scheduler::ScheduledV3<
							runtime_types::frame_support::traits::schedule::MaybeHashed<
								runtime_types::dali_runtime::Call,
								::subxt::sp_core::H256,
							>,
							::core::primitive::u32,
							runtime_types::dali_runtime::OriginCaller,
							::subxt::sp_core::crypto::AccountId32,
						>,
					>,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct Lookup<'a>(pub &'a [::core::primitive::u8]);
			impl ::subxt::StorageEntry for Lookup<'_> {
				const PALLET: &'static str = "Scheduler";
				const STORAGE: &'static str = "Lookup";
				type Value = (::core::primitive::u32, ::core::primitive::u32);
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " Items to be executed, indexed by the block number that they should be executed on."]
				pub fn agenda(
					&self,
					_0: &'a ::core::primitive::u32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<
							::core::option::Option<
								runtime_types::pallet_scheduler::ScheduledV3<
									runtime_types::frame_support::traits::schedule::MaybeHashed<
										runtime_types::dali_runtime::Call,
										::subxt::sp_core::H256,
									>,
									::core::primitive::u32,
									runtime_types::dali_runtime::OriginCaller,
									::subxt::sp_core::crypto::AccountId32,
								>,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Agenda>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								119u8, 187u8, 238u8, 140u8, 156u8, 19u8, 58u8, 141u8, 235u8, 232u8,
								120u8, 140u8, 24u8, 190u8, 20u8, 31u8, 228u8, 107u8, 56u8, 14u8,
								65u8, 225u8, 181u8, 212u8, 169u8, 48u8, 97u8, 75u8, 216u8, 140u8,
								41u8, 168u8,
							] {
							let entry = Agenda(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Items to be executed, indexed by the block number that they should be executed on."]
				pub fn agenda_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Agenda<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Agenda>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								119u8, 187u8, 238u8, 140u8, 156u8, 19u8, 58u8, 141u8, 235u8, 232u8,
								120u8, 140u8, 24u8, 190u8, 20u8, 31u8, 228u8, 107u8, 56u8, 14u8,
								65u8, 225u8, 181u8, 212u8, 169u8, 48u8, 97u8, 75u8, 216u8, 140u8,
								41u8, 168u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Lookup from identity to the block number and index of the task."]
				pub fn lookup(
					&self,
					_0: &'a [::core::primitive::u8],
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Lookup>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								56u8, 105u8, 156u8, 110u8, 251u8, 141u8, 219u8, 56u8, 131u8, 57u8,
								180u8, 33u8, 48u8, 30u8, 193u8, 194u8, 169u8, 182u8, 168u8, 43u8,
								36u8, 202u8, 222u8, 182u8, 41u8, 216u8, 222u8, 1u8, 72u8, 165u8,
								62u8, 166u8,
							] {
							let entry = Lookup(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Lookup from identity to the block number and index of the task."]
				pub fn lookup_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Lookup<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Lookup>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								56u8, 105u8, 156u8, 110u8, 251u8, 141u8, 219u8, 56u8, 131u8, 57u8,
								180u8, 33u8, 48u8, 30u8, 193u8, 194u8, 169u8, 182u8, 168u8, 43u8,
								36u8, 202u8, 222u8, 182u8, 41u8, 216u8, 222u8, 1u8, 72u8, 165u8,
								62u8, 166u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The maximum weight that may be scheduled per block for any dispatchables of less"]
				#[doc = " priority than `schedule::HARD_DEADLINE`."]
				pub fn maximum_weight(
					&self,
				) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Scheduler", "MaximumWeight")? ==
						[
							230u8, 169u8, 152u8, 214u8, 255u8, 61u8, 176u8, 69u8, 211u8, 100u8,
							217u8, 192u8, 188u8, 247u8, 181u8, 157u8, 38u8, 122u8, 75u8, 206u8,
							246u8, 8u8, 161u8, 175u8, 73u8, 182u8, 204u8, 242u8, 227u8, 3u8, 231u8,
							254u8,
						] {
						let pallet = metadata.pallet("Scheduler")?;
						let constant = pallet.constant("MaximumWeight")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The maximum number of scheduled calls in the queue for a single block."]
				#[doc = " Not strictly enforced, but used for weight estimation."]
				pub fn max_scheduled_per_block(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Scheduler", "MaxScheduledPerBlock")? ==
						[
							64u8, 25u8, 128u8, 202u8, 165u8, 97u8, 30u8, 196u8, 174u8, 132u8,
							139u8, 223u8, 88u8, 20u8, 228u8, 203u8, 253u8, 201u8, 83u8, 157u8,
							161u8, 120u8, 187u8, 165u8, 4u8, 64u8, 184u8, 34u8, 28u8, 129u8, 136u8,
							13u8,
						] {
						let pallet = metadata.pallet("Scheduler")?;
						let constant = pallet.constant("MaxScheduledPerBlock")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod utility {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Batch {
				pub calls: ::std::vec::Vec<runtime_types::dali_runtime::Call>,
			}
			impl ::subxt::Call for Batch {
				const PALLET: &'static str = "Utility";
				const FUNCTION: &'static str = "batch";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AsDerivative {
				pub index: ::core::primitive::u16,
				pub call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
			}
			impl ::subxt::Call for AsDerivative {
				const PALLET: &'static str = "Utility";
				const FUNCTION: &'static str = "as_derivative";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct BatchAll {
				pub calls: ::std::vec::Vec<runtime_types::dali_runtime::Call>,
			}
			impl ::subxt::Call for BatchAll {
				const PALLET: &'static str = "Utility";
				const FUNCTION: &'static str = "batch_all";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct DispatchAs {
				pub as_origin: ::std::boxed::Box<runtime_types::dali_runtime::OriginCaller>,
				pub call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
			}
			impl ::subxt::Call for DispatchAs {
				const PALLET: &'static str = "Utility";
				const FUNCTION: &'static str = "dispatch_as";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ForceBatch {
				pub calls: ::std::vec::Vec<runtime_types::dali_runtime::Call>,
			}
			impl ::subxt::Call for ForceBatch {
				const PALLET: &'static str = "Utility";
				const FUNCTION: &'static str = "force_batch";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Send a batch of dispatch calls."]
				#[doc = ""]
				#[doc = "May be called from any origin."]
				#[doc = ""]
				#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
				#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
				#[doc = ""]
				#[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
				#[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
				#[doc = "# </weight>"]
				#[doc = ""]
				#[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
				#[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
				#[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
				#[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
				#[doc = "event is deposited."]
				pub fn batch(
					&self,
					calls: ::std::vec::Vec<runtime_types::dali_runtime::Call>,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Batch, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Batch>()?
					};
					if runtime_call_hash ==
						[
							201u8, 133u8, 141u8, 43u8, 91u8, 75u8, 191u8, 161u8, 12u8, 176u8,
							174u8, 134u8, 104u8, 234u8, 156u8, 254u8, 179u8, 144u8, 119u8, 85u8,
							121u8, 49u8, 137u8, 171u8, 205u8, 223u8, 52u8, 228u8, 225u8, 148u8,
							232u8, 244u8,
						] {
						let call = Batch { calls };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Send a call through an indexed pseudonym of the sender."]
				#[doc = ""]
				#[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
				#[doc = "use the same filter as the origin of this call."]
				#[doc = ""]
				#[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
				#[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
				#[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
				#[doc = "in the Multisig pallet instead."]
				#[doc = ""]
				#[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				pub fn as_derivative(
					&self,
					index: ::core::primitive::u16,
					call: runtime_types::dali_runtime::Call,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						AsDerivative,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<AsDerivative>()?
					};
					if runtime_call_hash ==
						[
							90u8, 217u8, 18u8, 46u8, 165u8, 118u8, 244u8, 179u8, 122u8, 143u8,
							30u8, 64u8, 192u8, 163u8, 28u8, 75u8, 129u8, 27u8, 9u8, 64u8, 170u8,
							9u8, 225u8, 103u8, 185u8, 61u8, 217u8, 53u8, 194u8, 10u8, 102u8, 238u8,
						] {
						let call = AsDerivative { index, call: ::std::boxed::Box::new(call) };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Send a batch of dispatch calls and atomically execute them."]
				#[doc = "The whole transaction will rollback and fail if any of the calls failed."]
				#[doc = ""]
				#[doc = "May be called from any origin."]
				#[doc = ""]
				#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
				#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
				#[doc = ""]
				#[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
				#[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
				#[doc = "# </weight>"]
				pub fn batch_all(
					&self,
					calls: ::std::vec::Vec<runtime_types::dali_runtime::Call>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						BatchAll,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<BatchAll>()?
					};
					if runtime_call_hash ==
						[
							190u8, 80u8, 88u8, 127u8, 165u8, 67u8, 53u8, 135u8, 80u8, 120u8, 113u8,
							1u8, 184u8, 142u8, 21u8, 124u8, 100u8, 175u8, 181u8, 11u8, 112u8,
							115u8, 108u8, 90u8, 190u8, 23u8, 218u8, 199u8, 81u8, 206u8, 179u8,
							38u8,
						] {
						let call = BatchAll { calls };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Dispatches a function call with a provided origin."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Root_."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- O(1)."]
				#[doc = "- Limited storage reads."]
				#[doc = "- One DB write (event)."]
				#[doc = "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as()."]
				#[doc = "# </weight>"]
				pub fn dispatch_as(
					&self,
					as_origin: runtime_types::dali_runtime::OriginCaller,
					call: runtime_types::dali_runtime::Call,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						DispatchAs,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<DispatchAs>()?
					};
					if runtime_call_hash ==
						[
							192u8, 147u8, 27u8, 240u8, 114u8, 193u8, 179u8, 142u8, 215u8, 0u8,
							38u8, 201u8, 70u8, 61u8, 40u8, 111u8, 50u8, 192u8, 155u8, 52u8, 167u8,
							75u8, 25u8, 190u8, 143u8, 169u8, 48u8, 121u8, 9u8, 132u8, 61u8, 235u8,
						] {
						let call = DispatchAs {
							as_origin: ::std::boxed::Box::new(as_origin),
							call: ::std::boxed::Box::new(call),
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Send a batch of dispatch calls."]
				#[doc = "Unlike `batch`, it allows errors and won't interrupt."]
				#[doc = ""]
				#[doc = "May be called from any origin."]
				#[doc = ""]
				#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
				#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
				#[doc = ""]
				#[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
				#[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
				#[doc = "# </weight>"]
				pub fn force_batch(
					&self,
					calls: ::std::vec::Vec<runtime_types::dali_runtime::Call>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ForceBatch,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ForceBatch>()?
					};
					if runtime_call_hash ==
						[
							161u8, 188u8, 219u8, 213u8, 229u8, 64u8, 209u8, 88u8, 22u8, 19u8,
							186u8, 245u8, 94u8, 15u8, 43u8, 161u8, 189u8, 66u8, 177u8, 42u8, 229u8,
							145u8, 62u8, 92u8, 30u8, 152u8, 188u8, 21u8, 155u8, 199u8, 230u8, 41u8,
						] {
						let call = ForceBatch { calls };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_utility::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
			#[doc = "well as the error."]
			pub struct BatchInterrupted {
				pub index: ::core::primitive::u32,
				pub error: runtime_types::sp_runtime::DispatchError,
			}
			impl ::subxt::Event for BatchInterrupted {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "BatchInterrupted";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Batch of dispatches completed fully with no error."]
			pub struct BatchCompleted;
			impl ::subxt::Event for BatchCompleted {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "BatchCompleted";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Batch of dispatches completed but has errors."]
			pub struct BatchCompletedWithErrors;
			impl ::subxt::Event for BatchCompletedWithErrors {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "BatchCompletedWithErrors";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A single item within a Batch of dispatches has completed with no error."]
			pub struct ItemCompleted;
			impl ::subxt::Event for ItemCompleted {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "ItemCompleted";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A single item within a Batch of dispatches has completed with error."]
			pub struct ItemFailed {
				pub error: runtime_types::sp_runtime::DispatchError,
			}
			impl ::subxt::Event for ItemFailed {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "ItemFailed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A call was dispatched."]
			pub struct DispatchedAs {
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::Event for DispatchedAs {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "DispatchedAs";
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The limit on the number of batched calls."]
				pub fn batched_calls_limit(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Utility", "batched_calls_limit")? ==
						[
							230u8, 161u8, 6u8, 191u8, 162u8, 108u8, 149u8, 245u8, 68u8, 101u8,
							120u8, 129u8, 140u8, 51u8, 77u8, 97u8, 30u8, 155u8, 115u8, 70u8, 72u8,
							235u8, 251u8, 192u8, 5u8, 8u8, 188u8, 72u8, 132u8, 227u8, 44u8, 2u8,
						] {
						let pallet = metadata.pallet("Utility")?;
						let constant = pallet.constant("batched_calls_limit")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod preimage {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct NotePreimage {
				pub bytes: ::std::vec::Vec<::core::primitive::u8>,
			}
			impl ::subxt::Call for NotePreimage {
				const PALLET: &'static str = "Preimage";
				const FUNCTION: &'static str = "note_preimage";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct UnnotePreimage {
				pub hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Call for UnnotePreimage {
				const PALLET: &'static str = "Preimage";
				const FUNCTION: &'static str = "unnote_preimage";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RequestPreimage {
				pub hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Call for RequestPreimage {
				const PALLET: &'static str = "Preimage";
				const FUNCTION: &'static str = "request_preimage";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct UnrequestPreimage {
				pub hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Call for UnrequestPreimage {
				const PALLET: &'static str = "Preimage";
				const FUNCTION: &'static str = "unrequest_preimage";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Register a preimage on-chain."]
				#[doc = ""]
				#[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
				#[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
				pub fn note_preimage(
					&self,
					bytes: ::std::vec::Vec<::core::primitive::u8>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						NotePreimage,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<NotePreimage>()?
					};
					if runtime_call_hash ==
						[
							116u8, 66u8, 88u8, 251u8, 187u8, 86u8, 82u8, 136u8, 215u8, 82u8, 240u8,
							255u8, 70u8, 190u8, 116u8, 187u8, 232u8, 168u8, 125u8, 234u8, 8u8,
							21u8, 247u8, 195u8, 167u8, 237u8, 27u8, 202u8, 123u8, 25u8, 225u8,
							131u8,
						] {
						let call = NotePreimage { bytes };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Clear an unrequested preimage from the runtime storage."]
				pub fn unnote_preimage(
					&self,
					hash: ::subxt::sp_core::H256,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						UnnotePreimage,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<UnnotePreimage>()?
					};
					if runtime_call_hash ==
						[
							162u8, 195u8, 220u8, 134u8, 147u8, 150u8, 145u8, 130u8, 231u8, 104u8,
							83u8, 70u8, 42u8, 90u8, 248u8, 61u8, 223u8, 63u8, 162u8, 219u8, 92u8,
							248u8, 179u8, 99u8, 158u8, 252u8, 89u8, 59u8, 115u8, 130u8, 73u8, 21u8,
						] {
						let call = UnnotePreimage { hash };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
				#[doc = ""]
				#[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
				#[doc = "a user may have paid, and take the control of the preimage out of their hands."]
				pub fn request_preimage(
					&self,
					hash: ::subxt::sp_core::H256,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RequestPreimage,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RequestPreimage>()?
					};
					if runtime_call_hash ==
						[
							186u8, 108u8, 235u8, 145u8, 104u8, 29u8, 22u8, 33u8, 21u8, 121u8, 32u8,
							75u8, 141u8, 125u8, 205u8, 186u8, 210u8, 184u8, 134u8, 248u8, 74u8,
							175u8, 104u8, 91u8, 247u8, 151u8, 70u8, 192u8, 183u8, 163u8, 245u8,
							180u8,
						] {
						let call = RequestPreimage { hash };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Clear a previously made request for a preimage."]
				#[doc = ""]
				#[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
				pub fn unrequest_preimage(
					&self,
					hash: ::subxt::sp_core::H256,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						UnrequestPreimage,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<UnrequestPreimage>()?
					};
					if runtime_call_hash ==
						[
							160u8, 6u8, 6u8, 198u8, 77u8, 37u8, 28u8, 86u8, 240u8, 160u8, 128u8,
							123u8, 144u8, 150u8, 150u8, 60u8, 107u8, 148u8, 189u8, 192u8, 125u8,
							25u8, 55u8, 212u8, 193u8, 212u8, 198u8, 131u8, 113u8, 37u8, 213u8,
							152u8,
						] {
						let call = UnrequestPreimage { hash };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_preimage::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A preimage has been noted."]
			pub struct Noted {
				pub hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Event for Noted {
				const PALLET: &'static str = "Preimage";
				const EVENT: &'static str = "Noted";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A preimage has been requested."]
			pub struct Requested {
				pub hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Event for Requested {
				const PALLET: &'static str = "Preimage";
				const EVENT: &'static str = "Requested";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A preimage has ben cleared."]
			pub struct Cleared {
				pub hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Event for Cleared {
				const PALLET: &'static str = "Preimage";
				const EVENT: &'static str = "Cleared";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StatusFor<'a>(pub &'a ::subxt::sp_core::H256);
			impl ::subxt::StorageEntry for StatusFor<'_> {
				const PALLET: &'static str = "Preimage";
				const STORAGE: &'static str = "StatusFor";
				type Value = runtime_types::pallet_preimage::RequestStatus<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u128,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Identity,
					)])
				}
			}
			pub struct PreimageFor<'a>(pub &'a ::subxt::sp_core::H256);
			impl ::subxt::StorageEntry for PreimageFor<'_> {
				const PALLET: &'static str = "Preimage";
				const STORAGE: &'static str = "PreimageFor";
				type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Identity,
					)])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The request status of a given hash."]
				pub fn status_for(
					&self,
					_0: &'a ::subxt::sp_core::H256,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_preimage::RequestStatus<
								::subxt::sp_core::crypto::AccountId32,
								::core::primitive::u128,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<StatusFor>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								239u8, 53u8, 52u8, 248u8, 196u8, 74u8, 99u8, 113u8, 135u8, 186u8,
								100u8, 46u8, 246u8, 245u8, 160u8, 102u8, 81u8, 96u8, 85u8, 11u8,
								27u8, 53u8, 139u8, 8u8, 18u8, 208u8, 241u8, 139u8, 162u8, 239u8,
								113u8, 28u8,
							] {
							let entry = StatusFor(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The request status of a given hash."]
				pub fn status_for_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, StatusFor<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<StatusFor>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								239u8, 53u8, 52u8, 248u8, 196u8, 74u8, 99u8, 113u8, 135u8, 186u8,
								100u8, 46u8, 246u8, 245u8, 160u8, 102u8, 81u8, 96u8, 85u8, 11u8,
								27u8, 53u8, 139u8, 8u8, 18u8, 208u8, 241u8, 139u8, 162u8, 239u8,
								113u8, 28u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The preimages stored by this pallet."]
				pub fn preimage_for(
					&self,
					_0: &'a ::subxt::sp_core::H256,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::frame_support::storage::bounded_vec::BoundedVec<
								::core::primitive::u8,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<PreimageFor>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								153u8, 48u8, 185u8, 144u8, 57u8, 68u8, 133u8, 92u8, 225u8, 172u8,
								36u8, 62u8, 152u8, 162u8, 15u8, 139u8, 140u8, 82u8, 118u8, 63u8,
								31u8, 158u8, 197u8, 26u8, 141u8, 210u8, 150u8, 82u8, 109u8, 100u8,
								144u8, 56u8,
							] {
							let entry = PreimageFor(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The preimages stored by this pallet."]
				pub fn preimage_for_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, PreimageFor<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<PreimageFor>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								153u8, 48u8, 185u8, 144u8, 57u8, 68u8, 133u8, 92u8, 225u8, 172u8,
								36u8, 62u8, 152u8, 162u8, 15u8, 139u8, 140u8, 82u8, 118u8, 63u8,
								31u8, 158u8, 197u8, 26u8, 141u8, 210u8, 150u8, 82u8, 109u8, 100u8,
								144u8, 56u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
	}
	pub mod proxy {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Proxy {
				pub real: ::subxt::sp_core::crypto::AccountId32,
				pub force_proxy_type: ::core::option::Option<()>,
				pub call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
			}
			impl ::subxt::Call for Proxy {
				const PALLET: &'static str = "Proxy";
				const FUNCTION: &'static str = "proxy";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AddProxy {
				pub delegate: ::subxt::sp_core::crypto::AccountId32,
				pub proxy_type: (),
				pub delay: ::core::primitive::u32,
			}
			impl ::subxt::Call for AddProxy {
				const PALLET: &'static str = "Proxy";
				const FUNCTION: &'static str = "add_proxy";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RemoveProxy {
				pub delegate: ::subxt::sp_core::crypto::AccountId32,
				pub proxy_type: (),
				pub delay: ::core::primitive::u32,
			}
			impl ::subxt::Call for RemoveProxy {
				const PALLET: &'static str = "Proxy";
				const FUNCTION: &'static str = "remove_proxy";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RemoveProxies;
			impl ::subxt::Call for RemoveProxies {
				const PALLET: &'static str = "Proxy";
				const FUNCTION: &'static str = "remove_proxies";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Anonymous {
				pub proxy_type: (),
				pub delay: ::core::primitive::u32,
				pub index: ::core::primitive::u16,
			}
			impl ::subxt::Call for Anonymous {
				const PALLET: &'static str = "Proxy";
				const FUNCTION: &'static str = "anonymous";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct KillAnonymous {
				pub spawner: ::subxt::sp_core::crypto::AccountId32,
				pub proxy_type: (),
				pub index: ::core::primitive::u16,
				#[codec(compact)]
				pub height: ::core::primitive::u32,
				#[codec(compact)]
				pub ext_index: ::core::primitive::u32,
			}
			impl ::subxt::Call for KillAnonymous {
				const PALLET: &'static str = "Proxy";
				const FUNCTION: &'static str = "kill_anonymous";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Announce {
				pub real: ::subxt::sp_core::crypto::AccountId32,
				pub call_hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Call for Announce {
				const PALLET: &'static str = "Proxy";
				const FUNCTION: &'static str = "announce";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RemoveAnnouncement {
				pub real: ::subxt::sp_core::crypto::AccountId32,
				pub call_hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Call for RemoveAnnouncement {
				const PALLET: &'static str = "Proxy";
				const FUNCTION: &'static str = "remove_announcement";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RejectAnnouncement {
				pub delegate: ::subxt::sp_core::crypto::AccountId32,
				pub call_hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Call for RejectAnnouncement {
				const PALLET: &'static str = "Proxy";
				const FUNCTION: &'static str = "reject_announcement";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ProxyAnnounced {
				pub delegate: ::subxt::sp_core::crypto::AccountId32,
				pub real: ::subxt::sp_core::crypto::AccountId32,
				pub force_proxy_type: ::core::option::Option<()>,
				pub call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
			}
			impl ::subxt::Call for ProxyAnnounced {
				const PALLET: &'static str = "Proxy";
				const FUNCTION: &'static str = "proxy_announced";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
				#[doc = "`add_proxy`."]
				#[doc = ""]
				#[doc = "Removes any corresponding announcement(s)."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
				#[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
				#[doc = "- `call`: The call to be made by the `real` account."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of the number of proxies the user has (P)."]
				#[doc = "# </weight>"]
				pub fn proxy(
					&self,
					real: ::subxt::sp_core::crypto::AccountId32,
					force_proxy_type: ::core::option::Option<()>,
					call: runtime_types::dali_runtime::Call,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Proxy, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Proxy>()?
					};
					if runtime_call_hash ==
						[
							112u8, 174u8, 218u8, 159u8, 51u8, 72u8, 238u8, 142u8, 177u8, 117u8,
							81u8, 58u8, 5u8, 81u8, 183u8, 241u8, 132u8, 99u8, 150u8, 229u8, 164u8,
							239u8, 106u8, 26u8, 4u8, 124u8, 9u8, 23u8, 196u8, 21u8, 82u8, 223u8,
						] {
						let call =
							Proxy { real, force_proxy_type, call: ::std::boxed::Box::new(call) };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
				#[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
				#[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
				#[doc = "zero."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of the number of proxies the user has (P)."]
				#[doc = "# </weight>"]
				pub fn add_proxy(
					&self,
					delegate: ::subxt::sp_core::crypto::AccountId32,
					proxy_type: (),
					delay: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						AddProxy,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<AddProxy>()?
					};
					if runtime_call_hash ==
						[
							207u8, 137u8, 152u8, 200u8, 107u8, 240u8, 11u8, 188u8, 122u8, 240u8,
							117u8, 174u8, 171u8, 64u8, 97u8, 170u8, 27u8, 196u8, 140u8, 179u8,
							66u8, 82u8, 57u8, 163u8, 141u8, 109u8, 50u8, 25u8, 166u8, 117u8, 101u8,
							154u8,
						] {
						let call = AddProxy { delegate, proxy_type, delay };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Unregister a proxy account for the sender."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
				#[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of the number of proxies the user has (P)."]
				#[doc = "# </weight>"]
				pub fn remove_proxy(
					&self,
					delegate: ::subxt::sp_core::crypto::AccountId32,
					proxy_type: (),
					delay: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RemoveProxy,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RemoveProxy>()?
					};
					if runtime_call_hash ==
						[
							40u8, 92u8, 86u8, 30u8, 44u8, 51u8, 2u8, 20u8, 85u8, 146u8, 68u8, 71u8,
							221u8, 84u8, 201u8, 207u8, 208u8, 40u8, 25u8, 47u8, 243u8, 159u8,
							128u8, 46u8, 182u8, 216u8, 220u8, 125u8, 150u8, 101u8, 221u8, 166u8,
						] {
						let call = RemoveProxy { delegate, proxy_type, delay };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Unregister all proxy accounts for the sender."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "WARNING: This may be called on accounts created by `anonymous`, however if done, then"]
				#[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of the number of proxies the user has (P)."]
				#[doc = "# </weight>"]
				pub fn remove_proxies(
					&self,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RemoveProxies,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RemoveProxies>()?
					};
					if runtime_call_hash ==
						[
							15u8, 237u8, 27u8, 166u8, 254u8, 218u8, 92u8, 5u8, 213u8, 239u8, 99u8,
							59u8, 1u8, 26u8, 73u8, 252u8, 81u8, 94u8, 214u8, 227u8, 169u8, 58u8,
							40u8, 253u8, 187u8, 225u8, 192u8, 26u8, 19u8, 23u8, 121u8, 129u8,
						] {
						let call = RemoveProxies {};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
				#[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
				#[doc = ""]
				#[doc = "Requires a `Signed` origin."]
				#[doc = ""]
				#[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
				#[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
				#[doc = "allow for maximum flexibility."]
				#[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
				#[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
				#[doc = "want to use `0`."]
				#[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
				#[doc = "zero."]
				#[doc = ""]
				#[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
				#[doc = "same sender, with the same parameters."]
				#[doc = ""]
				#[doc = "Fails if there are insufficient funds to pay for deposit."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of the number of proxies the user has (P)."]
				#[doc = "# </weight>"]
				#[doc = "TODO: Might be over counting 1 read"]
				pub fn anonymous(
					&self,
					proxy_type: (),
					delay: ::core::primitive::u32,
					index: ::core::primitive::u16,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Anonymous,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Anonymous>()?
					};
					if runtime_call_hash ==
						[
							68u8, 113u8, 250u8, 203u8, 204u8, 44u8, 247u8, 185u8, 159u8, 177u8,
							124u8, 102u8, 55u8, 125u8, 122u8, 10u8, 238u8, 52u8, 225u8, 233u8,
							173u8, 136u8, 132u8, 215u8, 192u8, 199u8, 98u8, 87u8, 52u8, 196u8,
							133u8, 149u8,
						] {
						let call = Anonymous { proxy_type, delay, index };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Removes a previously spawned anonymous proxy."]
				#[doc = ""]
				#[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
				#[doc = "inaccessible."]
				#[doc = ""]
				#[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
				#[doc = "`anonymous` with corresponding parameters."]
				#[doc = ""]
				#[doc = "- `spawner`: The account that originally called `anonymous` to create this account."]
				#[doc = "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`."]
				#[doc = "- `proxy_type`: The proxy type originally passed to `anonymous`."]
				#[doc = "- `height`: The height of the chain when the call to `anonymous` was processed."]
				#[doc = "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed."]
				#[doc = ""]
				#[doc = "Fails with `NoPermission` in case the caller is not a previously created anonymous"]
				#[doc = "account whose `anonymous` call has corresponding parameters."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of the number of proxies the user has (P)."]
				#[doc = "# </weight>"]
				pub fn kill_anonymous(
					&self,
					spawner: ::subxt::sp_core::crypto::AccountId32,
					proxy_type: (),
					index: ::core::primitive::u16,
					height: ::core::primitive::u32,
					ext_index: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						KillAnonymous,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<KillAnonymous>()?
					};
					if runtime_call_hash ==
						[
							63u8, 2u8, 198u8, 189u8, 22u8, 2u8, 121u8, 101u8, 140u8, 79u8, 157u8,
							191u8, 243u8, 149u8, 218u8, 232u8, 46u8, 43u8, 18u8, 163u8, 31u8, 21u8,
							171u8, 40u8, 244u8, 247u8, 152u8, 40u8, 93u8, 55u8, 154u8, 61u8,
						] {
						let call = KillAnonymous { spawner, proxy_type, index, height, ext_index };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Publish the hash of a proxy-call that will be made in the future."]
				#[doc = ""]
				#[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
				#[doc = "if the delay associated with the proxy relationship is greater than zero."]
				#[doc = ""]
				#[doc = "No more than `MaxPending` announcements may be made at any one time."]
				#[doc = ""]
				#[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
				#[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
				#[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of:"]
				#[doc = "- A: the number of announcements made."]
				#[doc = "- P: the number of proxies the user has."]
				#[doc = "# </weight>"]
				pub fn announce(
					&self,
					real: ::subxt::sp_core::crypto::AccountId32,
					call_hash: ::subxt::sp_core::H256,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Announce,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Announce>()?
					};
					if runtime_call_hash ==
						[
							102u8, 8u8, 136u8, 179u8, 13u8, 47u8, 158u8, 24u8, 93u8, 196u8, 52u8,
							22u8, 118u8, 98u8, 17u8, 8u8, 12u8, 51u8, 181u8, 75u8, 215u8, 133u8,
							201u8, 180u8, 231u8, 122u8, 198u8, 190u8, 188u8, 127u8, 228u8, 218u8,
						] {
						let call = Announce { real, call_hash };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Remove a given announcement."]
				#[doc = ""]
				#[doc = "May be called by a proxy account to remove a call they previously announced and return"]
				#[doc = "the deposit."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
				#[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of:"]
				#[doc = "- A: the number of announcements made."]
				#[doc = "- P: the number of proxies the user has."]
				#[doc = "# </weight>"]
				pub fn remove_announcement(
					&self,
					real: ::subxt::sp_core::crypto::AccountId32,
					call_hash: ::subxt::sp_core::H256,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RemoveAnnouncement,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RemoveAnnouncement>()?
					};
					if runtime_call_hash ==
						[
							209u8, 156u8, 215u8, 188u8, 225u8, 230u8, 171u8, 228u8, 241u8, 105u8,
							43u8, 183u8, 234u8, 18u8, 170u8, 239u8, 232u8, 188u8, 37u8, 84u8,
							156u8, 50u8, 241u8, 170u8, 9u8, 148u8, 185u8, 172u8, 204u8, 63u8,
							187u8, 253u8,
						] {
						let call = RemoveAnnouncement { real, call_hash };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Remove the given announcement of a delegate."]
				#[doc = ""]
				#[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
				#[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `delegate`: The account that previously announced the call."]
				#[doc = "- `call_hash`: The hash of the call to be made."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of:"]
				#[doc = "- A: the number of announcements made."]
				#[doc = "- P: the number of proxies the user has."]
				#[doc = "# </weight>"]
				pub fn reject_announcement(
					&self,
					delegate: ::subxt::sp_core::crypto::AccountId32,
					call_hash: ::subxt::sp_core::H256,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RejectAnnouncement,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RejectAnnouncement>()?
					};
					if runtime_call_hash ==
						[
							26u8, 67u8, 197u8, 169u8, 243u8, 11u8, 94u8, 153u8, 50u8, 22u8, 176u8,
							103u8, 88u8, 2u8, 13u8, 10u8, 96u8, 7u8, 121u8, 148u8, 13u8, 96u8,
							20u8, 67u8, 76u8, 51u8, 81u8, 54u8, 244u8, 44u8, 94u8, 52u8,
						] {
						let call = RejectAnnouncement { delegate, call_hash };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
				#[doc = "`add_proxy`."]
				#[doc = ""]
				#[doc = "Removes any corresponding announcement(s)."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
				#[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
				#[doc = "- `call`: The call to be made by the `real` account."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of:"]
				#[doc = "- A: the number of announcements made."]
				#[doc = "- P: the number of proxies the user has."]
				#[doc = "# </weight>"]
				pub fn proxy_announced(
					&self,
					delegate: ::subxt::sp_core::crypto::AccountId32,
					real: ::subxt::sp_core::crypto::AccountId32,
					force_proxy_type: ::core::option::Option<()>,
					call: runtime_types::dali_runtime::Call,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ProxyAnnounced,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ProxyAnnounced>()?
					};
					if runtime_call_hash ==
						[
							133u8, 100u8, 141u8, 225u8, 224u8, 111u8, 9u8, 31u8, 248u8, 184u8,
							49u8, 248u8, 93u8, 65u8, 0u8, 113u8, 226u8, 206u8, 216u8, 221u8, 72u8,
							77u8, 79u8, 234u8, 182u8, 46u8, 23u8, 237u8, 252u8, 13u8, 184u8, 184u8,
						] {
						let call = ProxyAnnounced {
							delegate,
							real,
							force_proxy_type,
							call: ::std::boxed::Box::new(call),
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_proxy::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A proxy was executed correctly, with the given."]
			pub struct ProxyExecuted {
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::Event for ProxyExecuted {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "ProxyExecuted";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Anonymous account has been created by new proxy with given"]
			#[doc = "disambiguation index and proxy type."]
			pub struct AnonymousCreated {
				pub anonymous: ::subxt::sp_core::crypto::AccountId32,
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub proxy_type: (),
				pub disambiguation_index: ::core::primitive::u16,
			}
			impl ::subxt::Event for AnonymousCreated {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "AnonymousCreated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An announcement was placed to make a call in the future."]
			pub struct Announced {
				pub real: ::subxt::sp_core::crypto::AccountId32,
				pub proxy: ::subxt::sp_core::crypto::AccountId32,
				pub call_hash: ::subxt::sp_core::H256,
			}
			impl ::subxt::Event for Announced {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "Announced";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A proxy was added."]
			pub struct ProxyAdded {
				pub delegator: ::subxt::sp_core::crypto::AccountId32,
				pub delegatee: ::subxt::sp_core::crypto::AccountId32,
				pub proxy_type: (),
				pub delay: ::core::primitive::u32,
			}
			impl ::subxt::Event for ProxyAdded {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "ProxyAdded";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A proxy was removed."]
			pub struct ProxyRemoved {
				pub delegator: ::subxt::sp_core::crypto::AccountId32,
				pub delegatee: ::subxt::sp_core::crypto::AccountId32,
				pub proxy_type: (),
				pub delay: ::core::primitive::u32,
			}
			impl ::subxt::Event for ProxyRemoved {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "ProxyRemoved";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct Proxies<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::StorageEntry for Proxies<'_> {
				const PALLET: &'static str = "Proxy";
				const STORAGE: &'static str = "Proxies";
				type Value = (
					runtime_types::frame_support::storage::bounded_vec::BoundedVec<
						runtime_types::pallet_proxy::ProxyDefinition<
							::subxt::sp_core::crypto::AccountId32,
							(),
							::core::primitive::u32,
						>,
					>,
					::core::primitive::u128,
				);
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct Announcements<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::StorageEntry for Announcements<'_> {
				const PALLET: &'static str = "Proxy";
				const STORAGE: &'static str = "Announcements";
				type Value = (
					runtime_types::frame_support::storage::bounded_vec::BoundedVec<
						runtime_types::pallet_proxy::Announcement<
							::subxt::sp_core::crypto::AccountId32,
							::subxt::sp_core::H256,
							::core::primitive::u32,
						>,
					>,
					::core::primitive::u128,
				);
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
				#[doc = " which are being delegated to, together with the amount held on deposit."]
				pub fn proxies(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						(
							runtime_types::frame_support::storage::bounded_vec::BoundedVec<
								runtime_types::pallet_proxy::ProxyDefinition<
									::subxt::sp_core::crypto::AccountId32,
									(),
									::core::primitive::u32,
								>,
							>,
							::core::primitive::u128,
						),
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Proxies>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								156u8, 88u8, 227u8, 157u8, 96u8, 56u8, 14u8, 200u8, 239u8, 84u8,
								54u8, 154u8, 190u8, 124u8, 136u8, 191u8, 245u8, 16u8, 19u8, 225u8,
								254u8, 104u8, 223u8, 97u8, 151u8, 35u8, 22u8, 87u8, 175u8, 142u8,
								165u8, 182u8,
							] {
							let entry = Proxies(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
				#[doc = " which are being delegated to, together with the amount held on deposit."]
				pub fn proxies_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Proxies<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Proxies>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								156u8, 88u8, 227u8, 157u8, 96u8, 56u8, 14u8, 200u8, 239u8, 84u8,
								54u8, 154u8, 190u8, 124u8, 136u8, 191u8, 245u8, 16u8, 19u8, 225u8,
								254u8, 104u8, 223u8, 97u8, 151u8, 35u8, 22u8, 87u8, 175u8, 142u8,
								165u8, 182u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The announcements made by the proxy (key)."]
				pub fn announcements(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						(
							runtime_types::frame_support::storage::bounded_vec::BoundedVec<
								runtime_types::pallet_proxy::Announcement<
									::subxt::sp_core::crypto::AccountId32,
									::subxt::sp_core::H256,
									::core::primitive::u32,
								>,
							>,
							::core::primitive::u128,
						),
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Announcements>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								247u8, 243u8, 109u8, 142u8, 99u8, 156u8, 61u8, 101u8, 200u8, 211u8,
								158u8, 60u8, 159u8, 232u8, 147u8, 125u8, 139u8, 150u8, 4u8, 129u8,
								189u8, 117u8, 74u8, 32u8, 85u8, 39u8, 46u8, 47u8, 164u8, 130u8,
								254u8, 43u8,
							] {
							let entry = Announcements(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The announcements made by the proxy (key)."]
				pub fn announcements_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Announcements<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Announcements>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								247u8, 243u8, 109u8, 142u8, 99u8, 156u8, 61u8, 101u8, 200u8, 211u8,
								158u8, 60u8, 159u8, 232u8, 147u8, 125u8, 139u8, 150u8, 4u8, 129u8,
								189u8, 117u8, 74u8, 32u8, 85u8, 39u8, 46u8, 47u8, 164u8, 130u8,
								254u8, 43u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The base amount of currency needed to reserve for creating a proxy."]
				#[doc = ""]
				#[doc = " This is held for an additional storage item whose value size is"]
				#[doc = " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."]
				pub fn proxy_deposit_base(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Proxy", "ProxyDepositBase")? ==
						[
							251u8, 90u8, 184u8, 192u8, 110u8, 50u8, 165u8, 29u8, 122u8, 142u8,
							143u8, 31u8, 210u8, 151u8, 137u8, 7u8, 163u8, 194u8, 22u8, 22u8, 90u8,
							250u8, 252u8, 69u8, 254u8, 82u8, 158u8, 255u8, 52u8, 38u8, 139u8, 29u8,
						] {
						let pallet = metadata.pallet("Proxy")?;
						let constant = pallet.constant("ProxyDepositBase")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The amount of currency needed per proxy added."]
				#[doc = ""]
				#[doc = " This is held for adding 32 bytes plus an instance of `ProxyType` more into a"]
				#[doc = " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take"]
				#[doc = " into account `32 + proxy_type.encode().len()` bytes of data."]
				pub fn proxy_deposit_factor(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Proxy", "ProxyDepositFactor")? ==
						[
							116u8, 1u8, 219u8, 31u8, 33u8, 34u8, 160u8, 15u8, 27u8, 217u8, 143u8,
							139u8, 113u8, 168u8, 233u8, 71u8, 242u8, 7u8, 199u8, 77u8, 81u8, 40u8,
							225u8, 28u8, 60u8, 36u8, 130u8, 225u8, 229u8, 148u8, 31u8, 64u8,
						] {
						let pallet = metadata.pallet("Proxy")?;
						let constant = pallet.constant("ProxyDepositFactor")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The maximum amount of proxies allowed for a single account."]
				pub fn max_proxies(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Proxy", "MaxProxies")? ==
						[
							255u8, 157u8, 199u8, 79u8, 189u8, 61u8, 112u8, 121u8, 16u8, 176u8,
							186u8, 124u8, 95u8, 14u8, 223u8, 237u8, 244u8, 138u8, 59u8, 129u8,
							101u8, 240u8, 188u8, 52u8, 245u8, 189u8, 168u8, 212u8, 62u8, 145u8,
							115u8, 253u8,
						] {
						let pallet = metadata.pallet("Proxy")?;
						let constant = pallet.constant("MaxProxies")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The maximum amount of time-delayed announcements that are allowed to be pending."]
				pub fn max_pending(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Proxy", "MaxPending")? ==
						[
							88u8, 148u8, 146u8, 152u8, 151u8, 208u8, 255u8, 193u8, 239u8, 105u8,
							197u8, 153u8, 151u8, 18u8, 86u8, 13u8, 242u8, 242u8, 59u8, 92u8, 107u8,
							203u8, 102u8, 69u8, 147u8, 147u8, 37u8, 83u8, 237u8, 9u8, 114u8, 196u8,
						] {
						let pallet = metadata.pallet("Proxy")?;
						let constant = pallet.constant("MaxPending")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The base amount of currency needed to reserve for creating an announcement."]
				#[doc = ""]
				#[doc = " This is held when a new storage item holding a `Balance` is created (typically 16"]
				#[doc = " bytes)."]
				pub fn announcement_deposit_base(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Proxy", "AnnouncementDepositBase")? ==
						[
							59u8, 62u8, 200u8, 104u8, 219u8, 144u8, 122u8, 219u8, 89u8, 246u8,
							223u8, 224u8, 54u8, 110u8, 96u8, 0u8, 147u8, 248u8, 158u8, 118u8,
							112u8, 106u8, 219u8, 204u8, 9u8, 224u8, 100u8, 197u8, 92u8, 79u8, 30u8,
							35u8,
						] {
						let pallet = metadata.pallet("Proxy")?;
						let constant = pallet.constant("AnnouncementDepositBase")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The amount of currency needed per announcement made."]
				#[doc = ""]
				#[doc = " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)"]
				#[doc = " into a pre-existing storage value."]
				pub fn announcement_deposit_factor(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Proxy", "AnnouncementDepositFactor")? ==
						[
							117u8, 148u8, 8u8, 20u8, 68u8, 73u8, 30u8, 213u8, 240u8, 58u8, 31u8,
							158u8, 197u8, 94u8, 118u8, 23u8, 229u8, 137u8, 230u8, 136u8, 40u8,
							245u8, 162u8, 87u8, 194u8, 68u8, 43u8, 163u8, 8u8, 164u8, 147u8, 190u8,
						] {
						let pallet = metadata.pallet("Proxy")?;
						let constant = pallet.constant("AnnouncementDepositFactor")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod xcmp_queue {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ServiceOverweight {
				pub index: ::core::primitive::u64,
				pub weight_limit: ::core::primitive::u64,
			}
			impl ::subxt::Call for ServiceOverweight {
				const PALLET: &'static str = "XcmpQueue";
				const FUNCTION: &'static str = "service_overweight";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SuspendXcmExecution;
			impl ::subxt::Call for SuspendXcmExecution {
				const PALLET: &'static str = "XcmpQueue";
				const FUNCTION: &'static str = "suspend_xcm_execution";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ResumeXcmExecution;
			impl ::subxt::Call for ResumeXcmExecution {
				const PALLET: &'static str = "XcmpQueue";
				const FUNCTION: &'static str = "resume_xcm_execution";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct UpdateSuspendThreshold {
				pub new: ::core::primitive::u32,
			}
			impl ::subxt::Call for UpdateSuspendThreshold {
				const PALLET: &'static str = "XcmpQueue";
				const FUNCTION: &'static str = "update_suspend_threshold";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct UpdateDropThreshold {
				pub new: ::core::primitive::u32,
			}
			impl ::subxt::Call for UpdateDropThreshold {
				const PALLET: &'static str = "XcmpQueue";
				const FUNCTION: &'static str = "update_drop_threshold";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct UpdateResumeThreshold {
				pub new: ::core::primitive::u32,
			}
			impl ::subxt::Call for UpdateResumeThreshold {
				const PALLET: &'static str = "XcmpQueue";
				const FUNCTION: &'static str = "update_resume_threshold";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct UpdateThresholdWeight {
				pub new: ::core::primitive::u64,
			}
			impl ::subxt::Call for UpdateThresholdWeight {
				const PALLET: &'static str = "XcmpQueue";
				const FUNCTION: &'static str = "update_threshold_weight";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct UpdateWeightRestrictDecay {
				pub new: ::core::primitive::u64,
			}
			impl ::subxt::Call for UpdateWeightRestrictDecay {
				const PALLET: &'static str = "XcmpQueue";
				const FUNCTION: &'static str = "update_weight_restrict_decay";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct UpdateXcmpMaxIndividualWeight {
				pub new: ::core::primitive::u64,
			}
			impl ::subxt::Call for UpdateXcmpMaxIndividualWeight {
				const PALLET: &'static str = "XcmpQueue";
				const FUNCTION: &'static str = "update_xcmp_max_individual_weight";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Services a single overweight XCM."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `ExecuteOverweightOrigin`."]
				#[doc = "- `index`: The index of the overweight XCM to service"]
				#[doc = "- `weight_limit`: The amount of weight that XCM execution may take."]
				#[doc = ""]
				#[doc = "Errors:"]
				#[doc = "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map."]
				#[doc = "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format."]
				#[doc = "- `WeightOverLimit`: XCM execution may use greater `weight_limit`."]
				#[doc = ""]
				#[doc = "Events:"]
				#[doc = "- `OverweightServiced`: On success."]
				pub fn service_overweight(
					&self,
					index: ::core::primitive::u64,
					weight_limit: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ServiceOverweight,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ServiceOverweight>()?
					};
					if runtime_call_hash ==
						[
							229u8, 167u8, 106u8, 63u8, 141u8, 80u8, 8u8, 201u8, 156u8, 34u8, 47u8,
							104u8, 116u8, 57u8, 35u8, 216u8, 132u8, 3u8, 201u8, 169u8, 38u8, 107u8,
							149u8, 120u8, 42u8, 130u8, 100u8, 133u8, 214u8, 48u8, 99u8, 146u8,
						] {
						let call = ServiceOverweight { index, weight_limit };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `ControllerOrigin`."]
				pub fn suspend_xcm_execution(
					&self,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SuspendXcmExecution,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SuspendXcmExecution>()?
					};
					if runtime_call_hash ==
						[
							139u8, 76u8, 166u8, 86u8, 106u8, 144u8, 16u8, 47u8, 105u8, 185u8, 7u8,
							7u8, 63u8, 14u8, 250u8, 236u8, 99u8, 121u8, 101u8, 143u8, 28u8, 175u8,
							108u8, 197u8, 226u8, 43u8, 103u8, 92u8, 186u8, 12u8, 51u8, 153u8,
						] {
						let call = SuspendXcmExecution {};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Resumes all XCM executions for the XCMP queue."]
				#[doc = ""]
				#[doc = "Note that this function doesn't change the status of the in/out bound channels."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `ControllerOrigin`."]
				pub fn resume_xcm_execution(
					&self,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ResumeXcmExecution,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ResumeXcmExecution>()?
					};
					if runtime_call_hash ==
						[
							67u8, 111u8, 47u8, 237u8, 79u8, 42u8, 90u8, 56u8, 245u8, 2u8, 20u8,
							23u8, 33u8, 121u8, 135u8, 50u8, 204u8, 147u8, 195u8, 80u8, 177u8,
							202u8, 8u8, 160u8, 164u8, 138u8, 64u8, 252u8, 178u8, 63u8, 102u8,
							245u8,
						] {
						let call = ResumeXcmExecution {};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Overwrites the number of pages of messages which must be in the queue for the other side to be told to"]
				#[doc = "suspend their sending."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `Root`."]
				#[doc = "- `new`: Desired value for `QueueConfigData.suspend_value`"]
				pub fn update_suspend_threshold(
					&self,
					new: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						UpdateSuspendThreshold,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<UpdateSuspendThreshold>()?
					};
					if runtime_call_hash ==
						[
							100u8, 133u8, 45u8, 37u8, 37u8, 228u8, 45u8, 53u8, 184u8, 163u8, 27u8,
							139u8, 115u8, 137u8, 238u8, 129u8, 112u8, 126u8, 49u8, 15u8, 188u8,
							159u8, 69u8, 112u8, 227u8, 24u8, 166u8, 201u8, 162u8, 21u8, 31u8, 61u8,
						] {
						let call = UpdateSuspendThreshold { new };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Overwrites the number of pages of messages which must be in the queue after which we drop any further"]
				#[doc = "messages from the channel."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `Root`."]
				#[doc = "- `new`: Desired value for `QueueConfigData.drop_threshold`"]
				pub fn update_drop_threshold(
					&self,
					new: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						UpdateDropThreshold,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<UpdateDropThreshold>()?
					};
					if runtime_call_hash ==
						[
							192u8, 10u8, 23u8, 88u8, 37u8, 126u8, 124u8, 136u8, 82u8, 231u8, 160u8,
							43u8, 110u8, 214u8, 61u8, 200u8, 32u8, 207u8, 22u8, 229u8, 239u8, 17u8,
							167u8, 49u8, 56u8, 77u8, 72u8, 202u8, 80u8, 133u8, 87u8, 224u8,
						] {
						let call = UpdateDropThreshold { new };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Overwrites the number of pages of messages which the queue must be reduced to before it signals that"]
				#[doc = "message sending may recommence after it has been suspended."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `Root`."]
				#[doc = "- `new`: Desired value for `QueueConfigData.resume_threshold`"]
				pub fn update_resume_threshold(
					&self,
					new: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						UpdateResumeThreshold,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<UpdateResumeThreshold>()?
					};
					if runtime_call_hash ==
						[
							211u8, 187u8, 253u8, 113u8, 49u8, 163u8, 165u8, 143u8, 176u8, 132u8,
							201u8, 221u8, 88u8, 161u8, 22u8, 136u8, 97u8, 220u8, 253u8, 7u8, 201u8,
							183u8, 239u8, 149u8, 18u8, 139u8, 69u8, 148u8, 74u8, 122u8, 196u8,
							183u8,
						] {
						let call = UpdateResumeThreshold { new };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Overwrites the amount of remaining weight under which we stop processing messages."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `Root`."]
				#[doc = "- `new`: Desired value for `QueueConfigData.threshold_weight`"]
				pub fn update_threshold_weight(
					&self,
					new: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						UpdateThresholdWeight,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<UpdateThresholdWeight>()?
					};
					if runtime_call_hash ==
						[
							91u8, 82u8, 62u8, 175u8, 72u8, 216u8, 67u8, 18u8, 1u8, 27u8, 249u8,
							237u8, 249u8, 52u8, 1u8, 204u8, 113u8, 157u8, 22u8, 174u8, 41u8, 106u8,
							216u8, 137u8, 158u8, 35u8, 245u8, 169u8, 114u8, 48u8, 252u8, 8u8,
						] {
						let call = UpdateThresholdWeight { new };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Overwrites the speed to which the available weight approaches the maximum weight."]
				#[doc = "A lower number results in a faster progression. A value of 1 makes the entire weight available initially."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `Root`."]
				#[doc = "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."]
				pub fn update_weight_restrict_decay(
					&self,
					new: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						UpdateWeightRestrictDecay,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<UpdateWeightRestrictDecay>()?
					};
					if runtime_call_hash ==
						[
							0u8, 110u8, 60u8, 37u8, 237u8, 50u8, 9u8, 21u8, 198u8, 56u8, 0u8, 15u8,
							220u8, 71u8, 217u8, 201u8, 112u8, 133u8, 192u8, 235u8, 106u8, 72u8,
							152u8, 224u8, 63u8, 119u8, 77u8, 3u8, 5u8, 52u8, 33u8, 62u8,
						] {
						let call = UpdateWeightRestrictDecay { new };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Overwrite the maximum amount of weight any individual message may consume."]
				#[doc = "Messages above this weight go into the overweight queue and may only be serviced explicitly."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `Root`."]
				#[doc = "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."]
				pub fn update_xcmp_max_individual_weight(
					&self,
					new: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						UpdateXcmpMaxIndividualWeight,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<UpdateXcmpMaxIndividualWeight>()?
					};
					if runtime_call_hash ==
						[
							147u8, 233u8, 248u8, 156u8, 59u8, 236u8, 243u8, 193u8, 251u8, 122u8,
							79u8, 64u8, 14u8, 182u8, 63u8, 39u8, 126u8, 250u8, 0u8, 213u8, 236u8,
							54u8, 27u8, 95u8, 119u8, 125u8, 127u8, 124u8, 16u8, 188u8, 88u8, 224u8,
						] {
						let call = UpdateXcmpMaxIndividualWeight { new };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::cumulus_pallet_xcmp_queue::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Some XCM was executed ok."]
			pub struct Success(pub ::core::option::Option<::subxt::sp_core::H256>);
			impl ::subxt::Event for Success {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "Success";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Some XCM failed."]
			pub struct Fail(
				pub ::core::option::Option<::subxt::sp_core::H256>,
				pub runtime_types::xcm::v2::traits::Error,
			);
			impl ::subxt::Event for Fail {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "Fail";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Bad XCM version used."]
			pub struct BadVersion(pub ::core::option::Option<::subxt::sp_core::H256>);
			impl ::subxt::Event for BadVersion {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "BadVersion";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Bad XCM format used."]
			pub struct BadFormat(pub ::core::option::Option<::subxt::sp_core::H256>);
			impl ::subxt::Event for BadFormat {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "BadFormat";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An upward message was sent to the relay chain."]
			pub struct UpwardMessageSent(pub ::core::option::Option<::subxt::sp_core::H256>);
			impl ::subxt::Event for UpwardMessageSent {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "UpwardMessageSent";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An HRMP message was sent to a sibling parachain."]
			pub struct XcmpMessageSent(pub ::core::option::Option<::subxt::sp_core::H256>);
			impl ::subxt::Event for XcmpMessageSent {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "XcmpMessageSent";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An XCM exceeded the individual message weight budget."]
			pub struct OverweightEnqueued(
				pub runtime_types::polkadot_parachain::primitives::Id,
				pub ::core::primitive::u32,
				pub ::core::primitive::u64,
				pub ::core::primitive::u64,
			);
			impl ::subxt::Event for OverweightEnqueued {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "OverweightEnqueued";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An XCM from the overweight queue was executed with the given actual weight used."]
			pub struct OverweightServiced(pub ::core::primitive::u64, pub ::core::primitive::u64);
			impl ::subxt::Event for OverweightServiced {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "OverweightServiced";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct InboundXcmpStatus;
			impl ::subxt::StorageEntry for InboundXcmpStatus {
				const PALLET: &'static str = "XcmpQueue";
				const STORAGE: &'static str = "InboundXcmpStatus";
				type Value = ::std::vec::Vec<
					runtime_types::cumulus_pallet_xcmp_queue::InboundChannelDetails,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct InboundXcmpMessages<'a>(
				pub &'a runtime_types::polkadot_parachain::primitives::Id,
				pub &'a ::core::primitive::u32,
			);
			impl ::subxt::StorageEntry for InboundXcmpMessages<'_> {
				const PALLET: &'static str = "XcmpQueue";
				const STORAGE: &'static str = "InboundXcmpMessages";
				type Value = ::std::vec::Vec<::core::primitive::u8>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
					])
				}
			}
			pub struct OutboundXcmpStatus;
			impl ::subxt::StorageEntry for OutboundXcmpStatus {
				const PALLET: &'static str = "XcmpQueue";
				const STORAGE: &'static str = "OutboundXcmpStatus";
				type Value = ::std::vec::Vec<
					runtime_types::cumulus_pallet_xcmp_queue::OutboundChannelDetails,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct OutboundXcmpMessages<'a>(
				pub &'a runtime_types::polkadot_parachain::primitives::Id,
				pub &'a ::core::primitive::u16,
			);
			impl ::subxt::StorageEntry for OutboundXcmpMessages<'_> {
				const PALLET: &'static str = "XcmpQueue";
				const STORAGE: &'static str = "OutboundXcmpMessages";
				type Value = ::std::vec::Vec<::core::primitive::u8>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
					])
				}
			}
			pub struct SignalMessages<'a>(
				pub &'a runtime_types::polkadot_parachain::primitives::Id,
			);
			impl ::subxt::StorageEntry for SignalMessages<'_> {
				const PALLET: &'static str = "XcmpQueue";
				const STORAGE: &'static str = "SignalMessages";
				type Value = ::std::vec::Vec<::core::primitive::u8>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct QueueConfig;
			impl ::subxt::StorageEntry for QueueConfig {
				const PALLET: &'static str = "XcmpQueue";
				const STORAGE: &'static str = "QueueConfig";
				type Value = runtime_types::cumulus_pallet_xcmp_queue::QueueConfigData;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Overweight<'a>(pub &'a ::core::primitive::u64);
			impl ::subxt::StorageEntry for Overweight<'_> {
				const PALLET: &'static str = "XcmpQueue";
				const STORAGE: &'static str = "Overweight";
				type Value = (
					runtime_types::polkadot_parachain::primitives::Id,
					::core::primitive::u32,
					::std::vec::Vec<::core::primitive::u8>,
				);
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct OverweightCount;
			impl ::subxt::StorageEntry for OverweightCount {
				const PALLET: &'static str = "XcmpQueue";
				const STORAGE: &'static str = "OverweightCount";
				type Value = ::core::primitive::u64;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct QueueSuspended;
			impl ::subxt::StorageEntry for QueueSuspended {
				const PALLET: &'static str = "XcmpQueue";
				const STORAGE: &'static str = "QueueSuspended";
				type Value = ::core::primitive::bool;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " Status of the inbound XCMP channels."]
				pub fn inbound_xcmp_status(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<
							runtime_types::cumulus_pallet_xcmp_queue::InboundChannelDetails,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<InboundXcmpStatus>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								34u8, 147u8, 78u8, 18u8, 34u8, 170u8, 77u8, 74u8, 114u8, 6u8, 76u8,
								143u8, 19u8, 115u8, 191u8, 134u8, 92u8, 76u8, 145u8, 254u8, 13u8,
								104u8, 69u8, 247u8, 206u8, 163u8, 117u8, 176u8, 45u8, 57u8, 83u8,
								60u8,
							] {
							let entry = InboundXcmpStatus;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Inbound aggregate XCMP messages. It can only be one per ParaId/block."]
				pub fn inbound_xcmp_messages(
					&self,
					_0: &'a runtime_types::polkadot_parachain::primitives::Id,
					_1: &'a ::core::primitive::u32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::core::primitive::u8>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<InboundXcmpMessages>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								40u8, 210u8, 247u8, 211u8, 86u8, 173u8, 196u8, 82u8, 179u8, 253u8,
								101u8, 113u8, 231u8, 237u8, 92u8, 59u8, 169u8, 175u8, 19u8, 18u8,
								197u8, 159u8, 146u8, 203u8, 34u8, 42u8, 158u8, 137u8, 20u8, 230u8,
								150u8, 7u8,
							] {
							let entry = InboundXcmpMessages(_0, _1);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Inbound aggregate XCMP messages. It can only be one per ParaId/block."]
				pub fn inbound_xcmp_messages_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, InboundXcmpMessages<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<InboundXcmpMessages>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								40u8, 210u8, 247u8, 211u8, 86u8, 173u8, 196u8, 82u8, 179u8, 253u8,
								101u8, 113u8, 231u8, 237u8, 92u8, 59u8, 169u8, 175u8, 19u8, 18u8,
								197u8, 159u8, 146u8, 203u8, 34u8, 42u8, 158u8, 137u8, 20u8, 230u8,
								150u8, 7u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The non-empty XCMP channels in order of becoming non-empty, and the index of the first"]
				#[doc = " and last outbound message. If the two indices are equal, then it indicates an empty"]
				#[doc = " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater"]
				#[doc = " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in"]
				#[doc = " case of the need to send a high-priority signal message this block."]
				#[doc = " The bool is true if there is a signal message waiting to be sent."]
				pub fn outbound_xcmp_status(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<
							runtime_types::cumulus_pallet_xcmp_queue::OutboundChannelDetails,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<OutboundXcmpStatus>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								122u8, 71u8, 144u8, 183u8, 102u8, 47u8, 214u8, 20u8, 30u8, 192u8,
								191u8, 120u8, 20u8, 215u8, 184u8, 50u8, 168u8, 166u8, 165u8, 177u8,
								138u8, 171u8, 135u8, 60u8, 100u8, 46u8, 10u8, 137u8, 110u8, 148u8,
								180u8, 22u8,
							] {
							let entry = OutboundXcmpStatus;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The messages outbound in a given XCMP channel."]
				pub fn outbound_xcmp_messages(
					&self,
					_0: &'a runtime_types::polkadot_parachain::primitives::Id,
					_1: &'a ::core::primitive::u16,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::core::primitive::u8>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<OutboundXcmpMessages>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								212u8, 72u8, 186u8, 88u8, 124u8, 179u8, 78u8, 181u8, 148u8, 165u8,
								18u8, 215u8, 169u8, 42u8, 235u8, 246u8, 54u8, 52u8, 74u8, 13u8,
								198u8, 7u8, 97u8, 120u8, 182u8, 157u8, 4u8, 82u8, 223u8, 160u8,
								170u8, 11u8,
							] {
							let entry = OutboundXcmpMessages(_0, _1);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The messages outbound in a given XCMP channel."]
				pub fn outbound_xcmp_messages_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, OutboundXcmpMessages<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<OutboundXcmpMessages>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								212u8, 72u8, 186u8, 88u8, 124u8, 179u8, 78u8, 181u8, 148u8, 165u8,
								18u8, 215u8, 169u8, 42u8, 235u8, 246u8, 54u8, 52u8, 74u8, 13u8,
								198u8, 7u8, 97u8, 120u8, 182u8, 157u8, 4u8, 82u8, 223u8, 160u8,
								170u8, 11u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Any signal messages waiting to be sent."]
				pub fn signal_messages(
					&self,
					_0: &'a runtime_types::polkadot_parachain::primitives::Id,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::core::primitive::u8>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<SignalMessages>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								103u8, 138u8, 202u8, 122u8, 216u8, 218u8, 251u8, 206u8, 7u8, 34u8,
								207u8, 21u8, 150u8, 7u8, 19u8, 247u8, 217u8, 27u8, 122u8, 242u8,
								217u8, 117u8, 90u8, 227u8, 247u8, 189u8, 91u8, 99u8, 94u8, 143u8,
								252u8, 75u8,
							] {
							let entry = SignalMessages(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Any signal messages waiting to be sent."]
				pub fn signal_messages_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, SignalMessages<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<SignalMessages>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								103u8, 138u8, 202u8, 122u8, 216u8, 218u8, 251u8, 206u8, 7u8, 34u8,
								207u8, 21u8, 150u8, 7u8, 19u8, 247u8, 217u8, 27u8, 122u8, 242u8,
								217u8, 117u8, 90u8, 227u8, 247u8, 189u8, 91u8, 99u8, 94u8, 143u8,
								252u8, 75u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The configuration which controls the dynamics of the outbound queue."]
				pub fn queue_config(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::cumulus_pallet_xcmp_queue::QueueConfigData,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<QueueConfig>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								146u8, 181u8, 63u8, 128u8, 159u8, 243u8, 226u8, 163u8, 165u8,
								191u8, 255u8, 171u8, 243u8, 34u8, 245u8, 196u8, 18u8, 9u8, 37u8,
								72u8, 186u8, 253u8, 92u8, 197u8, 210u8, 78u8, 96u8, 117u8, 40u8,
								24u8, 147u8, 27u8,
							] {
							let entry = QueueConfig;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The messages that exceeded max individual message weight budget."]
				#[doc = ""]
				#[doc = " These message stay in this storage map until they are manually dispatched via"]
				#[doc = " `service_overweight`."]
				pub fn overweight(
					&self,
					_0: &'a ::core::primitive::u64,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<(
							runtime_types::polkadot_parachain::primitives::Id,
							::core::primitive::u32,
							::std::vec::Vec<::core::primitive::u8>,
						)>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Overweight>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								76u8, 53u8, 150u8, 74u8, 65u8, 88u8, 231u8, 216u8, 66u8, 156u8,
								233u8, 255u8, 111u8, 51u8, 235u8, 148u8, 255u8, 180u8, 179u8,
								232u8, 231u8, 110u8, 223u8, 14u8, 82u8, 59u8, 224u8, 98u8, 6u8,
								14u8, 95u8, 110u8,
							] {
							let entry = Overweight(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The messages that exceeded max individual message weight budget."]
				#[doc = ""]
				#[doc = " These message stay in this storage map until they are manually dispatched via"]
				#[doc = " `service_overweight`."]
				pub fn overweight_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Overweight<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Overweight>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								76u8, 53u8, 150u8, 74u8, 65u8, 88u8, 231u8, 216u8, 66u8, 156u8,
								233u8, 255u8, 111u8, 51u8, 235u8, 148u8, 255u8, 180u8, 179u8,
								232u8, 231u8, 110u8, 223u8, 14u8, 82u8, 59u8, 224u8, 98u8, 6u8,
								14u8, 95u8, 110u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next"]
				#[doc = " available free overweight index."]
				pub fn overweight_count(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<OverweightCount>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								102u8, 180u8, 196u8, 148u8, 115u8, 62u8, 46u8, 238u8, 97u8, 116u8,
								117u8, 42u8, 14u8, 5u8, 72u8, 237u8, 230u8, 46u8, 150u8, 126u8,
								89u8, 64u8, 233u8, 166u8, 180u8, 137u8, 52u8, 233u8, 252u8, 255u8,
								36u8, 20u8,
							] {
							let entry = OverweightCount;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."]
				pub fn queue_suspended(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::bool, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<QueueSuspended>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								23u8, 37u8, 48u8, 112u8, 222u8, 17u8, 252u8, 65u8, 160u8, 217u8,
								218u8, 30u8, 2u8, 1u8, 204u8, 0u8, 251u8, 17u8, 138u8, 197u8,
								164u8, 50u8, 122u8, 0u8, 31u8, 238u8, 147u8, 213u8, 30u8, 132u8,
								184u8, 215u8,
							] {
							let entry = QueueSuspended;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
	}
	pub mod relayer_xcm {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Send {
				pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
			}
			impl ::subxt::Call for Send {
				const PALLET: &'static str = "RelayerXcm";
				const FUNCTION: &'static str = "send";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct TeleportAssets {
				pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
				pub fee_asset_item: ::core::primitive::u32,
			}
			impl ::subxt::Call for TeleportAssets {
				const PALLET: &'static str = "RelayerXcm";
				const FUNCTION: &'static str = "teleport_assets";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ReserveTransferAssets {
				pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
				pub fee_asset_item: ::core::primitive::u32,
			}
			impl ::subxt::Call for ReserveTransferAssets {
				const PALLET: &'static str = "RelayerXcm";
				const FUNCTION: &'static str = "reserve_transfer_assets";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Execute {
				pub message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
				pub max_weight: ::core::primitive::u64,
			}
			impl ::subxt::Call for Execute {
				const PALLET: &'static str = "RelayerXcm";
				const FUNCTION: &'static str = "execute";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ForceXcmVersion {
				pub location:
					::std::boxed::Box<runtime_types::xcm::v1::multilocation::MultiLocation>,
				pub xcm_version: ::core::primitive::u32,
			}
			impl ::subxt::Call for ForceXcmVersion {
				const PALLET: &'static str = "RelayerXcm";
				const FUNCTION: &'static str = "force_xcm_version";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ForceDefaultXcmVersion {
				pub maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
			}
			impl ::subxt::Call for ForceDefaultXcmVersion {
				const PALLET: &'static str = "RelayerXcm";
				const FUNCTION: &'static str = "force_default_xcm_version";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ForceSubscribeVersionNotify {
				pub location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
			}
			impl ::subxt::Call for ForceSubscribeVersionNotify {
				const PALLET: &'static str = "RelayerXcm";
				const FUNCTION: &'static str = "force_subscribe_version_notify";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ForceUnsubscribeVersionNotify {
				pub location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
			}
			impl ::subxt::Call for ForceUnsubscribeVersionNotify {
				const PALLET: &'static str = "RelayerXcm";
				const FUNCTION: &'static str = "force_unsubscribe_version_notify";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct LimitedReserveTransferAssets {
				pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
				pub fee_asset_item: ::core::primitive::u32,
				pub weight_limit: runtime_types::xcm::v2::WeightLimit,
			}
			impl ::subxt::Call for LimitedReserveTransferAssets {
				const PALLET: &'static str = "RelayerXcm";
				const FUNCTION: &'static str = "limited_reserve_transfer_assets";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct LimitedTeleportAssets {
				pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
				pub fee_asset_item: ::core::primitive::u32,
				pub weight_limit: runtime_types::xcm::v2::WeightLimit,
			}
			impl ::subxt::Call for LimitedTeleportAssets {
				const PALLET: &'static str = "RelayerXcm";
				const FUNCTION: &'static str = "limited_teleport_assets";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				pub fn send(
					&self,
					dest: runtime_types::xcm::VersionedMultiLocation,
					message: runtime_types::xcm::VersionedXcm,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Send, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Send>()?
					};
					if runtime_call_hash ==
						[
							232u8, 188u8, 205u8, 27u8, 92u8, 141u8, 251u8, 24u8, 90u8, 155u8, 20u8,
							139u8, 7u8, 160u8, 39u8, 85u8, 205u8, 11u8, 111u8, 1u8, 250u8, 168u8,
							134u8, 61u8, 19u8, 216u8, 239u8, 127u8, 137u8, 136u8, 48u8, 19u8,
						] {
						let call = Send {
							dest: ::std::boxed::Box::new(dest),
							message: ::std::boxed::Box::new(message),
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Teleport some assets from the local chain to some destination chain."]
				#[doc = ""]
				#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
				#[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
				#[doc = "with all fees taken as needed from the asset."]
				#[doc = ""]
				#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
				#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
				#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
				#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
				#[doc = "  an `AccountId32` value."]
				#[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
				#[doc = "  `dest` side. May not be empty."]
				#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
				#[doc = "  fees."]
				pub fn teleport_assets(
					&self,
					dest: runtime_types::xcm::VersionedMultiLocation,
					beneficiary: runtime_types::xcm::VersionedMultiLocation,
					assets: runtime_types::xcm::VersionedMultiAssets,
					fee_asset_item: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						TeleportAssets,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<TeleportAssets>()?
					};
					if runtime_call_hash ==
						[
							55u8, 192u8, 217u8, 186u8, 230u8, 234u8, 26u8, 194u8, 243u8, 199u8,
							16u8, 227u8, 225u8, 88u8, 130u8, 219u8, 228u8, 110u8, 20u8, 255u8,
							233u8, 147u8, 121u8, 173u8, 126u8, 248u8, 192u8, 243u8, 211u8, 91u8,
							115u8, 148u8,
						] {
						let call = TeleportAssets {
							dest: ::std::boxed::Box::new(dest),
							beneficiary: ::std::boxed::Box::new(beneficiary),
							assets: ::std::boxed::Box::new(assets),
							fee_asset_item,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
				#[doc = "chain and forward a notification XCM."]
				#[doc = ""]
				#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
				#[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
				#[doc = "with all fees taken as needed from the asset."]
				#[doc = ""]
				#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
				#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
				#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
				#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
				#[doc = "  an `AccountId32` value."]
				#[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
				#[doc = "  `dest` side."]
				#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
				#[doc = "  fees."]
				pub fn reserve_transfer_assets(
					&self,
					dest: runtime_types::xcm::VersionedMultiLocation,
					beneficiary: runtime_types::xcm::VersionedMultiLocation,
					assets: runtime_types::xcm::VersionedMultiAssets,
					fee_asset_item: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ReserveTransferAssets,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ReserveTransferAssets>()?
					};
					if runtime_call_hash ==
						[
							134u8, 229u8, 104u8, 209u8, 160u8, 7u8, 99u8, 175u8, 128u8, 110u8,
							189u8, 225u8, 141u8, 1u8, 10u8, 17u8, 247u8, 233u8, 146u8, 19u8, 31u8,
							145u8, 217u8, 144u8, 85u8, 223u8, 197u8, 249u8, 1u8, 222u8, 98u8, 13u8,
						] {
						let call = ReserveTransferAssets {
							dest: ::std::boxed::Box::new(dest),
							beneficiary: ::std::boxed::Box::new(beneficiary),
							assets: ::std::boxed::Box::new(assets),
							fee_asset_item,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Execute an XCM message from a local, signed, origin."]
				#[doc = ""]
				#[doc = "An event is deposited indicating whether `msg` could be executed completely or only"]
				#[doc = "partially."]
				#[doc = ""]
				#[doc = "No more than `max_weight` will be used in its attempted execution. If this is less than the"]
				#[doc = "maximum amount of weight that the message could take to be executed, then no execution"]
				#[doc = "attempt will be made."]
				#[doc = ""]
				#[doc = "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully"]
				#[doc = "to completion; only that *some* of it was executed."]
				pub fn execute(
					&self,
					message: runtime_types::xcm::VersionedXcm,
					max_weight: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Execute,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Execute>()?
					};
					if runtime_call_hash ==
						[
							95u8, 48u8, 201u8, 232u8, 83u8, 23u8, 20u8, 126u8, 116u8, 116u8, 176u8,
							206u8, 145u8, 9u8, 155u8, 109u8, 141u8, 226u8, 253u8, 196u8, 37u8,
							230u8, 243u8, 68u8, 39u8, 133u8, 233u8, 108u8, 226u8, 87u8, 5u8, 247u8,
						] {
						let call = Execute { message: ::std::boxed::Box::new(message), max_weight };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Extoll that a particular destination can be communicated with through a particular"]
				#[doc = "version of XCM."]
				#[doc = ""]
				#[doc = "- `origin`: Must be Root."]
				#[doc = "- `location`: The destination that is being described."]
				#[doc = "- `xcm_version`: The latest version of XCM that `location` supports."]
				pub fn force_xcm_version(
					&self,
					location: runtime_types::xcm::v1::multilocation::MultiLocation,
					xcm_version: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ForceXcmVersion,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ForceXcmVersion>()?
					};
					if runtime_call_hash ==
						[
							32u8, 219u8, 213u8, 152u8, 203u8, 73u8, 121u8, 64u8, 78u8, 53u8, 110u8,
							23u8, 87u8, 93u8, 34u8, 166u8, 205u8, 189u8, 25u8, 160u8, 172u8, 178u8,
							125u8, 182u8, 37u8, 254u8, 220u8, 179u8, 70u8, 252u8, 63u8, 94u8,
						] {
						let call = ForceXcmVersion {
							location: ::std::boxed::Box::new(location),
							xcm_version,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Set a safe XCM version (the version that XCM should be encoded with if the most recent"]
				#[doc = "version a destination can accept is unknown)."]
				#[doc = ""]
				#[doc = "- `origin`: Must be Root."]
				#[doc = "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."]
				pub fn force_default_xcm_version(
					&self,
					maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ForceDefaultXcmVersion,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ForceDefaultXcmVersion>()?
					};
					if runtime_call_hash ==
						[
							44u8, 161u8, 28u8, 189u8, 162u8, 221u8, 14u8, 31u8, 8u8, 211u8, 181u8,
							51u8, 197u8, 14u8, 87u8, 198u8, 3u8, 240u8, 90u8, 78u8, 141u8, 131u8,
							205u8, 250u8, 211u8, 150u8, 237u8, 160u8, 239u8, 226u8, 233u8, 29u8,
						] {
						let call = ForceDefaultXcmVersion { maybe_xcm_version };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Ask a location to notify us regarding their XCM version and any changes to it."]
				#[doc = ""]
				#[doc = "- `origin`: Must be Root."]
				#[doc = "- `location`: The location to which we should subscribe for XCM version notifications."]
				pub fn force_subscribe_version_notify(
					&self,
					location: runtime_types::xcm::VersionedMultiLocation,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ForceSubscribeVersionNotify,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ForceSubscribeVersionNotify>()?
					};
					if runtime_call_hash ==
						[
							41u8, 248u8, 187u8, 195u8, 146u8, 143u8, 0u8, 246u8, 248u8, 38u8,
							128u8, 200u8, 143u8, 149u8, 127u8, 73u8, 3u8, 247u8, 106u8, 6u8, 56u8,
							50u8, 207u8, 234u8, 137u8, 201u8, 16u8, 21u8, 226u8, 148u8, 181u8,
							44u8,
						] {
						let call = ForceSubscribeVersionNotify {
							location: ::std::boxed::Box::new(location),
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Require that a particular destination should no longer notify us regarding any XCM"]
				#[doc = "version changes."]
				#[doc = ""]
				#[doc = "- `origin`: Must be Root."]
				#[doc = "- `location`: The location to which we are currently subscribed for XCM version"]
				#[doc = "  notifications which we no longer desire."]
				pub fn force_unsubscribe_version_notify(
					&self,
					location: runtime_types::xcm::VersionedMultiLocation,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ForceUnsubscribeVersionNotify,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ForceUnsubscribeVersionNotify>()?
					};
					if runtime_call_hash ==
						[
							150u8, 202u8, 148u8, 13u8, 187u8, 169u8, 5u8, 60u8, 25u8, 144u8, 43u8,
							196u8, 35u8, 215u8, 184u8, 72u8, 143u8, 220u8, 176u8, 27u8, 100u8,
							245u8, 31u8, 243u8, 0u8, 83u8, 165u8, 7u8, 102u8, 172u8, 218u8, 133u8,
						] {
						let call = ForceUnsubscribeVersionNotify {
							location: ::std::boxed::Box::new(location),
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
				#[doc = "chain and forward a notification XCM."]
				#[doc = ""]
				#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
				#[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
				#[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
				#[doc = "at risk."]
				#[doc = ""]
				#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
				#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
				#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
				#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
				#[doc = "  an `AccountId32` value."]
				#[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
				#[doc = "  `dest` side."]
				#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
				#[doc = "  fees."]
				#[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
				pub fn limited_reserve_transfer_assets(
					&self,
					dest: runtime_types::xcm::VersionedMultiLocation,
					beneficiary: runtime_types::xcm::VersionedMultiLocation,
					assets: runtime_types::xcm::VersionedMultiAssets,
					fee_asset_item: ::core::primitive::u32,
					weight_limit: runtime_types::xcm::v2::WeightLimit,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						LimitedReserveTransferAssets,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<LimitedReserveTransferAssets>()?
					};
					if runtime_call_hash ==
						[
							242u8, 206u8, 126u8, 164u8, 44u8, 116u8, 181u8, 90u8, 121u8, 124u8,
							120u8, 240u8, 129u8, 217u8, 131u8, 100u8, 248u8, 149u8, 56u8, 154u8,
							35u8, 91u8, 210u8, 118u8, 207u8, 110u8, 42u8, 249u8, 160u8, 155u8,
							251u8, 68u8,
						] {
						let call = LimitedReserveTransferAssets {
							dest: ::std::boxed::Box::new(dest),
							beneficiary: ::std::boxed::Box::new(beneficiary),
							assets: ::std::boxed::Box::new(assets),
							fee_asset_item,
							weight_limit,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Teleport some assets from the local chain to some destination chain."]
				#[doc = ""]
				#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
				#[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
				#[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
				#[doc = "at risk."]
				#[doc = ""]
				#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
				#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
				#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
				#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
				#[doc = "  an `AccountId32` value."]
				#[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
				#[doc = "  `dest` side. May not be empty."]
				#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
				#[doc = "  fees."]
				#[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
				pub fn limited_teleport_assets(
					&self,
					dest: runtime_types::xcm::VersionedMultiLocation,
					beneficiary: runtime_types::xcm::VersionedMultiLocation,
					assets: runtime_types::xcm::VersionedMultiAssets,
					fee_asset_item: ::core::primitive::u32,
					weight_limit: runtime_types::xcm::v2::WeightLimit,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						LimitedTeleportAssets,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<LimitedTeleportAssets>()?
					};
					if runtime_call_hash ==
						[
							189u8, 233u8, 43u8, 16u8, 158u8, 114u8, 154u8, 233u8, 179u8, 144u8,
							81u8, 179u8, 169u8, 38u8, 4u8, 130u8, 95u8, 237u8, 172u8, 167u8, 2u8,
							169u8, 53u8, 252u8, 159u8, 42u8, 143u8, 216u8, 112u8, 155u8, 48u8,
							129u8,
						] {
						let call = LimitedTeleportAssets {
							dest: ::std::boxed::Box::new(dest),
							beneficiary: ::std::boxed::Box::new(beneficiary),
							assets: ::std::boxed::Box::new(assets),
							fee_asset_item,
							weight_limit,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_xcm::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Execution of an XCM message was attempted."]
			#[doc = ""]
			#[doc = "\\[ outcome \\]"]
			pub struct Attempted(pub runtime_types::xcm::v2::traits::Outcome);
			impl ::subxt::Event for Attempted {
				const PALLET: &'static str = "RelayerXcm";
				const EVENT: &'static str = "Attempted";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A XCM message was sent."]
			#[doc = ""]
			#[doc = "\\[ origin, destination, message \\]"]
			pub struct Sent(
				pub runtime_types::xcm::v1::multilocation::MultiLocation,
				pub runtime_types::xcm::v1::multilocation::MultiLocation,
				pub runtime_types::xcm::v2::Xcm,
			);
			impl ::subxt::Event for Sent {
				const PALLET: &'static str = "RelayerXcm";
				const EVENT: &'static str = "Sent";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Query response received which does not match a registered query. This may be because a"]
			#[doc = "matching query was never registered, it may be because it is a duplicate response, or"]
			#[doc = "because the query timed out."]
			#[doc = ""]
			#[doc = "\\[ origin location, id \\]"]
			pub struct UnexpectedResponse(
				pub runtime_types::xcm::v1::multilocation::MultiLocation,
				pub ::core::primitive::u64,
			);
			impl ::subxt::Event for UnexpectedResponse {
				const PALLET: &'static str = "RelayerXcm";
				const EVENT: &'static str = "UnexpectedResponse";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Query response has been received and is ready for taking with `take_response`. There is"]
			#[doc = "no registered notification call."]
			#[doc = ""]
			#[doc = "\\[ id, response \\]"]
			pub struct ResponseReady(
				pub ::core::primitive::u64,
				pub runtime_types::xcm::v2::Response,
			);
			impl ::subxt::Event for ResponseReady {
				const PALLET: &'static str = "RelayerXcm";
				const EVENT: &'static str = "ResponseReady";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Query response has been received and query is removed. The registered notification has"]
			#[doc = "been dispatched and executed successfully."]
			#[doc = ""]
			#[doc = "\\[ id, pallet index, call index \\]"]
			pub struct Notified(
				pub ::core::primitive::u64,
				pub ::core::primitive::u8,
				pub ::core::primitive::u8,
			);
			impl ::subxt::Event for Notified {
				const PALLET: &'static str = "RelayerXcm";
				const EVENT: &'static str = "Notified";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Query response has been received and query is removed. The registered notification could"]
			#[doc = "not be dispatched because the dispatch weight is greater than the maximum weight"]
			#[doc = "originally budgeted by this runtime for the query result."]
			#[doc = ""]
			#[doc = "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"]
			pub struct NotifyOverweight(
				pub ::core::primitive::u64,
				pub ::core::primitive::u8,
				pub ::core::primitive::u8,
				pub ::core::primitive::u64,
				pub ::core::primitive::u64,
			);
			impl ::subxt::Event for NotifyOverweight {
				const PALLET: &'static str = "RelayerXcm";
				const EVENT: &'static str = "NotifyOverweight";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Query response has been received and query is removed. There was a general error with"]
			#[doc = "dispatching the notification call."]
			#[doc = ""]
			#[doc = "\\[ id, pallet index, call index \\]"]
			pub struct NotifyDispatchError(
				pub ::core::primitive::u64,
				pub ::core::primitive::u8,
				pub ::core::primitive::u8,
			);
			impl ::subxt::Event for NotifyDispatchError {
				const PALLET: &'static str = "RelayerXcm";
				const EVENT: &'static str = "NotifyDispatchError";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Query response has been received and query is removed. The dispatch was unable to be"]
			#[doc = "decoded into a `Call`; this might be due to dispatch function having a signature which"]
			#[doc = "is not `(origin, QueryId, Response)`."]
			#[doc = ""]
			#[doc = "\\[ id, pallet index, call index \\]"]
			pub struct NotifyDecodeFailed(
				pub ::core::primitive::u64,
				pub ::core::primitive::u8,
				pub ::core::primitive::u8,
			);
			impl ::subxt::Event for NotifyDecodeFailed {
				const PALLET: &'static str = "RelayerXcm";
				const EVENT: &'static str = "NotifyDecodeFailed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Expected query response has been received but the origin location of the response does"]
			#[doc = "not match that expected. The query remains registered for a later, valid, response to"]
			#[doc = "be received and acted upon."]
			#[doc = ""]
			#[doc = "\\[ origin location, id, expected location \\]"]
			pub struct InvalidResponder(
				pub runtime_types::xcm::v1::multilocation::MultiLocation,
				pub ::core::primitive::u64,
				pub ::core::option::Option<runtime_types::xcm::v1::multilocation::MultiLocation>,
			);
			impl ::subxt::Event for InvalidResponder {
				const PALLET: &'static str = "RelayerXcm";
				const EVENT: &'static str = "InvalidResponder";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Expected query response has been received but the expected origin location placed in"]
			#[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
			#[doc = ""]
			#[doc = "This is unexpected (since a location placed in storage in a previously executing"]
			#[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
			#[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
			#[doc = "needed."]
			#[doc = ""]
			#[doc = "\\[ origin location, id \\]"]
			pub struct InvalidResponderVersion(
				pub runtime_types::xcm::v1::multilocation::MultiLocation,
				pub ::core::primitive::u64,
			);
			impl ::subxt::Event for InvalidResponderVersion {
				const PALLET: &'static str = "RelayerXcm";
				const EVENT: &'static str = "InvalidResponderVersion";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "Received query response has been read and removed."]
			#[doc = ""]
			#[doc = "\\[ id \\]"]
			pub struct ResponseTaken(pub ::core::primitive::u64);
			impl ::subxt::Event for ResponseTaken {
				const PALLET: &'static str = "RelayerXcm";
				const EVENT: &'static str = "ResponseTaken";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Some assets have been placed in an asset trap."]
			#[doc = ""]
			#[doc = "\\[ hash, origin, assets \\]"]
			pub struct AssetsTrapped(
				pub ::subxt::sp_core::H256,
				pub runtime_types::xcm::v1::multilocation::MultiLocation,
				pub runtime_types::xcm::VersionedMultiAssets,
			);
			impl ::subxt::Event for AssetsTrapped {
				const PALLET: &'static str = "RelayerXcm";
				const EVENT: &'static str = "AssetsTrapped";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An XCM version change notification message has been attempted to be sent."]
			#[doc = ""]
			#[doc = "\\[ destination, result \\]"]
			pub struct VersionChangeNotified(
				pub runtime_types::xcm::v1::multilocation::MultiLocation,
				pub ::core::primitive::u32,
			);
			impl ::subxt::Event for VersionChangeNotified {
				const PALLET: &'static str = "RelayerXcm";
				const EVENT: &'static str = "VersionChangeNotified";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "The supported version of a location has been changed. This might be through an"]
			#[doc = "automatic notification or a manual intervention."]
			#[doc = ""]
			#[doc = "\\[ location, XCM version \\]"]
			pub struct SupportedVersionChanged(
				pub runtime_types::xcm::v1::multilocation::MultiLocation,
				pub ::core::primitive::u32,
			);
			impl ::subxt::Event for SupportedVersionChanged {
				const PALLET: &'static str = "RelayerXcm";
				const EVENT: &'static str = "SupportedVersionChanged";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A given location which had a version change subscription was dropped owing to an error"]
			#[doc = "sending the notification to it."]
			#[doc = ""]
			#[doc = "\\[ location, query ID, error \\]"]
			pub struct NotifyTargetSendFail(
				pub runtime_types::xcm::v1::multilocation::MultiLocation,
				pub ::core::primitive::u64,
				pub runtime_types::xcm::v2::traits::Error,
			);
			impl ::subxt::Event for NotifyTargetSendFail {
				const PALLET: &'static str = "RelayerXcm";
				const EVENT: &'static str = "NotifyTargetSendFail";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A given location which had a version change subscription was dropped owing to an error"]
			#[doc = "migrating the location to our new XCM format."]
			#[doc = ""]
			#[doc = "\\[ location, query ID \\]"]
			pub struct NotifyTargetMigrationFail(
				pub runtime_types::xcm::VersionedMultiLocation,
				pub ::core::primitive::u64,
			);
			impl ::subxt::Event for NotifyTargetMigrationFail {
				const PALLET: &'static str = "RelayerXcm";
				const EVENT: &'static str = "NotifyTargetMigrationFail";
			}
		}
	}
	pub mod cumulus_xcm {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::cumulus_pallet_xcm::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Downward message is invalid XCM."]
			#[doc = "\\[ id \\]"]
			pub struct InvalidFormat(pub [::core::primitive::u8; 8usize]);
			impl ::subxt::Event for InvalidFormat {
				const PALLET: &'static str = "CumulusXcm";
				const EVENT: &'static str = "InvalidFormat";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Downward message is unsupported version of XCM."]
			#[doc = "\\[ id \\]"]
			pub struct UnsupportedVersion(pub [::core::primitive::u8; 8usize]);
			impl ::subxt::Event for UnsupportedVersion {
				const PALLET: &'static str = "CumulusXcm";
				const EVENT: &'static str = "UnsupportedVersion";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Downward message executed with the given outcome."]
			#[doc = "\\[ id, outcome \\]"]
			pub struct ExecutedDownward(
				pub [::core::primitive::u8; 8usize],
				pub runtime_types::xcm::v2::traits::Outcome,
			);
			impl ::subxt::Event for ExecutedDownward {
				const PALLET: &'static str = "CumulusXcm";
				const EVENT: &'static str = "ExecutedDownward";
			}
		}
	}
	pub mod dmp_queue {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ServiceOverweight {
				pub index: ::core::primitive::u64,
				pub weight_limit: ::core::primitive::u64,
			}
			impl ::subxt::Call for ServiceOverweight {
				const PALLET: &'static str = "DmpQueue";
				const FUNCTION: &'static str = "service_overweight";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Service a single overweight message."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `ExecuteOverweightOrigin`."]
				#[doc = "- `index`: The index of the overweight message to service."]
				#[doc = "- `weight_limit`: The amount of weight that message execution may take."]
				#[doc = ""]
				#[doc = "Errors:"]
				#[doc = "- `Unknown`: Message of `index` is unknown."]
				#[doc = "- `OverLimit`: Message execution may use greater than `weight_limit`."]
				#[doc = ""]
				#[doc = "Events:"]
				#[doc = "- `OverweightServiced`: On success."]
				pub fn service_overweight(
					&self,
					index: ::core::primitive::u64,
					weight_limit: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ServiceOverweight,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ServiceOverweight>()?
					};
					if runtime_call_hash ==
						[
							229u8, 167u8, 106u8, 63u8, 141u8, 80u8, 8u8, 201u8, 156u8, 34u8, 47u8,
							104u8, 116u8, 57u8, 35u8, 216u8, 132u8, 3u8, 201u8, 169u8, 38u8, 107u8,
							149u8, 120u8, 42u8, 130u8, 100u8, 133u8, 214u8, 48u8, 99u8, 146u8,
						] {
						let call = ServiceOverweight { index, weight_limit };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::cumulus_pallet_dmp_queue::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Downward message is invalid XCM."]
			#[doc = "\\[ id \\]"]
			pub struct InvalidFormat(pub [::core::primitive::u8; 32usize]);
			impl ::subxt::Event for InvalidFormat {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "InvalidFormat";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Downward message is unsupported version of XCM."]
			#[doc = "\\[ id \\]"]
			pub struct UnsupportedVersion(pub [::core::primitive::u8; 32usize]);
			impl ::subxt::Event for UnsupportedVersion {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "UnsupportedVersion";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Downward message executed with the given outcome."]
			#[doc = "\\[ id, outcome \\]"]
			pub struct ExecutedDownward(
				pub [::core::primitive::u8; 32usize],
				pub runtime_types::xcm::v2::traits::Outcome,
			);
			impl ::subxt::Event for ExecutedDownward {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "ExecutedDownward";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "The weight limit for handling downward messages was reached."]
			#[doc = "\\[ id, remaining, required \\]"]
			pub struct WeightExhausted(
				pub [::core::primitive::u8; 32usize],
				pub ::core::primitive::u64,
				pub ::core::primitive::u64,
			);
			impl ::subxt::Event for WeightExhausted {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "WeightExhausted";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Downward message is overweight and was placed in the overweight queue."]
			#[doc = "\\[ id, index, required \\]"]
			pub struct OverweightEnqueued(
				pub [::core::primitive::u8; 32usize],
				pub ::core::primitive::u64,
				pub ::core::primitive::u64,
			);
			impl ::subxt::Event for OverweightEnqueued {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "OverweightEnqueued";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Downward message from the overweight queue was executed."]
			#[doc = "\\[ index, used \\]"]
			pub struct OverweightServiced(pub ::core::primitive::u64, pub ::core::primitive::u64);
			impl ::subxt::Event for OverweightServiced {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "OverweightServiced";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct Configuration;
			impl ::subxt::StorageEntry for Configuration {
				const PALLET: &'static str = "DmpQueue";
				const STORAGE: &'static str = "Configuration";
				type Value = runtime_types::cumulus_pallet_dmp_queue::ConfigData;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct PageIndex;
			impl ::subxt::StorageEntry for PageIndex {
				const PALLET: &'static str = "DmpQueue";
				const STORAGE: &'static str = "PageIndex";
				type Value = runtime_types::cumulus_pallet_dmp_queue::PageIndexData;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Pages<'a>(pub &'a ::core::primitive::u32);
			impl ::subxt::StorageEntry for Pages<'_> {
				const PALLET: &'static str = "DmpQueue";
				const STORAGE: &'static str = "Pages";
				type Value = ::std::vec::Vec<(
					::core::primitive::u32,
					::std::vec::Vec<::core::primitive::u8>,
				)>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct Overweight<'a>(pub &'a ::core::primitive::u64);
			impl ::subxt::StorageEntry for Overweight<'_> {
				const PALLET: &'static str = "DmpQueue";
				const STORAGE: &'static str = "Overweight";
				type Value = (::core::primitive::u32, ::std::vec::Vec<::core::primitive::u8>);
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The configuration."]
				pub fn configuration(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::cumulus_pallet_dmp_queue::ConfigData,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Configuration>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								56u8, 109u8, 219u8, 202u8, 168u8, 10u8, 171u8, 185u8, 37u8, 140u8,
								78u8, 29u8, 152u8, 136u8, 67u8, 225u8, 10u8, 0u8, 185u8, 176u8,
								133u8, 142u8, 214u8, 253u8, 240u8, 148u8, 241u8, 66u8, 54u8, 19u8,
								100u8, 180u8,
							] {
							let entry = Configuration;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The page index."]
				pub fn page_index(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::cumulus_pallet_dmp_queue::PageIndexData,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<PageIndex>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								122u8, 54u8, 173u8, 79u8, 103u8, 237u8, 132u8, 20u8, 204u8, 109u8,
								127u8, 98u8, 134u8, 55u8, 214u8, 32u8, 225u8, 138u8, 243u8, 105u8,
								104u8, 60u8, 19u8, 172u8, 228u8, 160u8, 226u8, 233u8, 41u8, 176u8,
								116u8, 162u8,
							] {
							let entry = PageIndex;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The queue pages."]
				pub fn pages(
					&self,
					_0: &'a ::core::primitive::u32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<(
							::core::primitive::u32,
							::std::vec::Vec<::core::primitive::u8>,
						)>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Pages>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								228u8, 86u8, 33u8, 107u8, 248u8, 4u8, 223u8, 175u8, 222u8, 25u8,
								204u8, 42u8, 235u8, 21u8, 215u8, 91u8, 167u8, 14u8, 133u8, 151u8,
								190u8, 57u8, 138u8, 208u8, 79u8, 244u8, 132u8, 14u8, 48u8, 247u8,
								171u8, 108u8,
							] {
							let entry = Pages(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The queue pages."]
				pub fn pages_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Pages<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Pages>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								228u8, 86u8, 33u8, 107u8, 248u8, 4u8, 223u8, 175u8, 222u8, 25u8,
								204u8, 42u8, 235u8, 21u8, 215u8, 91u8, 167u8, 14u8, 133u8, 151u8,
								190u8, 57u8, 138u8, 208u8, 79u8, 244u8, 132u8, 14u8, 48u8, 247u8,
								171u8, 108u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The overweight messages."]
				pub fn overweight(
					&self,
					_0: &'a ::core::primitive::u64,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<(
							::core::primitive::u32,
							::std::vec::Vec<::core::primitive::u8>,
						)>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Overweight>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								222u8, 85u8, 143u8, 49u8, 42u8, 248u8, 138u8, 163u8, 46u8, 199u8,
								188u8, 61u8, 137u8, 135u8, 127u8, 146u8, 210u8, 254u8, 121u8, 42u8,
								112u8, 114u8, 22u8, 228u8, 207u8, 207u8, 245u8, 175u8, 152u8,
								140u8, 225u8, 237u8,
							] {
							let entry = Overweight(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The overweight messages."]
				pub fn overweight_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Overweight<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Overweight>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								222u8, 85u8, 143u8, 49u8, 42u8, 248u8, 138u8, 163u8, 46u8, 199u8,
								188u8, 61u8, 137u8, 135u8, 127u8, 146u8, 210u8, 254u8, 121u8, 42u8,
								112u8, 114u8, 22u8, 228u8, 207u8, 207u8, 245u8, 175u8, 152u8,
								140u8, 225u8, 237u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
	}
	pub mod x_tokens {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Transfer {
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				pub amount: ::core::primitive::u128,
				pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub dest_weight: ::core::primitive::u64,
			}
			impl ::subxt::Call for Transfer {
				const PALLET: &'static str = "XTokens";
				const FUNCTION: &'static str = "transfer";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct TransferMultiasset {
				pub asset: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
				pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub dest_weight: ::core::primitive::u64,
			}
			impl ::subxt::Call for TransferMultiasset {
				const PALLET: &'static str = "XTokens";
				const FUNCTION: &'static str = "transfer_multiasset";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct TransferWithFee {
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				pub amount: ::core::primitive::u128,
				pub fee: ::core::primitive::u128,
				pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub dest_weight: ::core::primitive::u64,
			}
			impl ::subxt::Call for TransferWithFee {
				const PALLET: &'static str = "XTokens";
				const FUNCTION: &'static str = "transfer_with_fee";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct TransferMultiassetWithFee {
				pub asset: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
				pub fee: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
				pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub dest_weight: ::core::primitive::u64,
			}
			impl ::subxt::Call for TransferMultiassetWithFee {
				const PALLET: &'static str = "XTokens";
				const FUNCTION: &'static str = "transfer_multiasset_with_fee";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct TransferMulticurrencies {
				pub currencies: ::std::vec::Vec<(
					runtime_types::primitives::currency::CurrencyId,
					::core::primitive::u128,
				)>,
				pub fee_item: ::core::primitive::u32,
				pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub dest_weight: ::core::primitive::u64,
			}
			impl ::subxt::Call for TransferMulticurrencies {
				const PALLET: &'static str = "XTokens";
				const FUNCTION: &'static str = "transfer_multicurrencies";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct TransferMultiassets {
				pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
				pub fee_item: ::core::primitive::u32,
				pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub dest_weight: ::core::primitive::u64,
			}
			impl ::subxt::Call for TransferMultiassets {
				const PALLET: &'static str = "XTokens";
				const FUNCTION: &'static str = "transfer_multiassets";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Transfer native currencies."]
				#[doc = ""]
				#[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
				#[doc = "it would be charged from the transferred assets. If set below"]
				#[doc = "requirements, the execution may fail and assets wouldn't be"]
				#[doc = "received."]
				#[doc = ""]
				#[doc = "It's a no-op if any error on local XCM execution or message sending."]
				#[doc = "Note sending assets out per se doesn't guarantee they would be"]
				#[doc = "received. Receiving depends on if the XCM message could be delivered"]
				#[doc = "by the network, and if the receiving chain would handle"]
				#[doc = "messages correctly."]
				pub fn transfer(
					&self,
					currency_id: runtime_types::primitives::currency::CurrencyId,
					amount: ::core::primitive::u128,
					dest: runtime_types::xcm::VersionedMultiLocation,
					dest_weight: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Transfer,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Transfer>()?
					};
					if runtime_call_hash ==
						[
							210u8, 9u8, 41u8, 191u8, 210u8, 112u8, 29u8, 45u8, 12u8, 250u8, 25u8,
							58u8, 187u8, 148u8, 79u8, 241u8, 70u8, 62u8, 16u8, 82u8, 19u8, 158u8,
							183u8, 192u8, 247u8, 34u8, 243u8, 216u8, 79u8, 12u8, 236u8, 37u8,
						] {
						let call = Transfer {
							currency_id,
							amount,
							dest: ::std::boxed::Box::new(dest),
							dest_weight,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Transfer `MultiAsset`."]
				#[doc = ""]
				#[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
				#[doc = "it would be charged from the transferred assets. If set below"]
				#[doc = "requirements, the execution may fail and assets wouldn't be"]
				#[doc = "received."]
				#[doc = ""]
				#[doc = "It's a no-op if any error on local XCM execution or message sending."]
				#[doc = "Note sending assets out per se doesn't guarantee they would be"]
				#[doc = "received. Receiving depends on if the XCM message could be delivered"]
				#[doc = "by the network, and if the receiving chain would handle"]
				#[doc = "messages correctly."]
				pub fn transfer_multiasset(
					&self,
					asset: runtime_types::xcm::VersionedMultiAsset,
					dest: runtime_types::xcm::VersionedMultiLocation,
					dest_weight: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						TransferMultiasset,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<TransferMultiasset>()?
					};
					if runtime_call_hash ==
						[
							47u8, 91u8, 171u8, 67u8, 171u8, 74u8, 79u8, 107u8, 150u8, 215u8, 214u8,
							8u8, 75u8, 36u8, 39u8, 197u8, 254u8, 88u8, 124u8, 129u8, 218u8, 143u8,
							161u8, 107u8, 171u8, 238u8, 173u8, 130u8, 26u8, 218u8, 219u8, 159u8,
						] {
						let call = TransferMultiasset {
							asset: ::std::boxed::Box::new(asset),
							dest: ::std::boxed::Box::new(dest),
							dest_weight,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Transfer native currencies specifying the fee and amount as"]
				#[doc = "separate."]
				#[doc = ""]
				#[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
				#[doc = "it would be charged from the transferred assets. If set below"]
				#[doc = "requirements, the execution may fail and assets wouldn't be"]
				#[doc = "received."]
				#[doc = ""]
				#[doc = "`fee` is the amount to be spent to pay for execution in destination"]
				#[doc = "chain. Both fee and amount will be subtracted form the callers"]
				#[doc = "balance."]
				#[doc = ""]
				#[doc = "If `fee` is not high enough to cover for the execution costs in the"]
				#[doc = "destination chain, then the assets will be trapped in the"]
				#[doc = "destination chain"]
				#[doc = ""]
				#[doc = "It's a no-op if any error on local XCM execution or message sending."]
				#[doc = "Note sending assets out per se doesn't guarantee they would be"]
				#[doc = "received. Receiving depends on if the XCM message could be delivered"]
				#[doc = "by the network, and if the receiving chain would handle"]
				#[doc = "messages correctly."]
				pub fn transfer_with_fee(
					&self,
					currency_id: runtime_types::primitives::currency::CurrencyId,
					amount: ::core::primitive::u128,
					fee: ::core::primitive::u128,
					dest: runtime_types::xcm::VersionedMultiLocation,
					dest_weight: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						TransferWithFee,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<TransferWithFee>()?
					};
					if runtime_call_hash ==
						[
							93u8, 114u8, 6u8, 155u8, 234u8, 191u8, 142u8, 178u8, 192u8, 149u8, 6u8,
							82u8, 131u8, 191u8, 2u8, 237u8, 192u8, 211u8, 142u8, 162u8, 163u8,
							25u8, 215u8, 196u8, 128u8, 160u8, 252u8, 14u8, 38u8, 0u8, 107u8, 190u8,
						] {
						let call = TransferWithFee {
							currency_id,
							amount,
							fee,
							dest: ::std::boxed::Box::new(dest),
							dest_weight,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Transfer `MultiAsset` specifying the fee and amount as separate."]
				#[doc = ""]
				#[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
				#[doc = "it would be charged from the transferred assets. If set below"]
				#[doc = "requirements, the execution may fail and assets wouldn't be"]
				#[doc = "received."]
				#[doc = ""]
				#[doc = "`fee` is the multiasset to be spent to pay for execution in"]
				#[doc = "destination chain. Both fee and amount will be subtracted form the"]
				#[doc = "callers balance For now we only accept fee and asset having the same"]
				#[doc = "`MultiLocation` id."]
				#[doc = ""]
				#[doc = "If `fee` is not high enough to cover for the execution costs in the"]
				#[doc = "destination chain, then the assets will be trapped in the"]
				#[doc = "destination chain"]
				#[doc = ""]
				#[doc = "It's a no-op if any error on local XCM execution or message sending."]
				#[doc = "Note sending assets out per se doesn't guarantee they would be"]
				#[doc = "received. Receiving depends on if the XCM message could be delivered"]
				#[doc = "by the network, and if the receiving chain would handle"]
				#[doc = "messages correctly."]
				pub fn transfer_multiasset_with_fee(
					&self,
					asset: runtime_types::xcm::VersionedMultiAsset,
					fee: runtime_types::xcm::VersionedMultiAsset,
					dest: runtime_types::xcm::VersionedMultiLocation,
					dest_weight: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						TransferMultiassetWithFee,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<TransferMultiassetWithFee>()?
					};
					if runtime_call_hash ==
						[
							160u8, 58u8, 60u8, 29u8, 104u8, 238u8, 23u8, 84u8, 74u8, 195u8, 159u8,
							94u8, 251u8, 193u8, 100u8, 242u8, 238u8, 82u8, 205u8, 237u8, 53u8,
							53u8, 93u8, 90u8, 106u8, 249u8, 167u8, 63u8, 28u8, 6u8, 115u8, 218u8,
						] {
						let call = TransferMultiassetWithFee {
							asset: ::std::boxed::Box::new(asset),
							fee: ::std::boxed::Box::new(fee),
							dest: ::std::boxed::Box::new(dest),
							dest_weight,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Transfer several currencies specifying the item to be used as fee"]
				#[doc = ""]
				#[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
				#[doc = "it would be charged from the transferred assets. If set below"]
				#[doc = "requirements, the execution may fail and assets wouldn't be"]
				#[doc = "received."]
				#[doc = ""]
				#[doc = "`fee_item` is index of the currencies tuple that we want to use for"]
				#[doc = "payment"]
				#[doc = ""]
				#[doc = "It's a no-op if any error on local XCM execution or message sending."]
				#[doc = "Note sending assets out per se doesn't guarantee they would be"]
				#[doc = "received. Receiving depends on if the XCM message could be delivered"]
				#[doc = "by the network, and if the receiving chain would handle"]
				#[doc = "messages correctly."]
				pub fn transfer_multicurrencies(
					&self,
					currencies: ::std::vec::Vec<(
						runtime_types::primitives::currency::CurrencyId,
						::core::primitive::u128,
					)>,
					fee_item: ::core::primitive::u32,
					dest: runtime_types::xcm::VersionedMultiLocation,
					dest_weight: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						TransferMulticurrencies,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<TransferMulticurrencies>()?
					};
					if runtime_call_hash ==
						[
							55u8, 145u8, 25u8, 83u8, 121u8, 180u8, 111u8, 34u8, 115u8, 123u8,
							184u8, 96u8, 239u8, 21u8, 60u8, 152u8, 91u8, 37u8, 158u8, 133u8, 17u8,
							209u8, 190u8, 10u8, 3u8, 116u8, 121u8, 13u8, 196u8, 39u8, 114u8, 205u8,
						] {
						let call = TransferMulticurrencies {
							currencies,
							fee_item,
							dest: ::std::boxed::Box::new(dest),
							dest_weight,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Transfer several `MultiAsset` specifying the item to be used as fee"]
				#[doc = ""]
				#[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
				#[doc = "it would be charged from the transferred assets. If set below"]
				#[doc = "requirements, the execution may fail and assets wouldn't be"]
				#[doc = "received."]
				#[doc = ""]
				#[doc = "`fee_item` is index of the MultiAssets that we want to use for"]
				#[doc = "payment"]
				#[doc = ""]
				#[doc = "It's a no-op if any error on local XCM execution or message sending."]
				#[doc = "Note sending assets out per se doesn't guarantee they would be"]
				#[doc = "received. Receiving depends on if the XCM message could be delivered"]
				#[doc = "by the network, and if the receiving chain would handle"]
				#[doc = "messages correctly."]
				pub fn transfer_multiassets(
					&self,
					assets: runtime_types::xcm::VersionedMultiAssets,
					fee_item: ::core::primitive::u32,
					dest: runtime_types::xcm::VersionedMultiLocation,
					dest_weight: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						TransferMultiassets,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<TransferMultiassets>()?
					};
					if runtime_call_hash ==
						[
							253u8, 245u8, 142u8, 40u8, 206u8, 124u8, 171u8, 181u8, 86u8, 60u8,
							114u8, 177u8, 150u8, 39u8, 5u8, 9u8, 199u8, 58u8, 172u8, 184u8, 6u8,
							80u8, 199u8, 97u8, 183u8, 203u8, 92u8, 71u8, 17u8, 207u8, 146u8, 235u8,
						] {
						let call = TransferMultiassets {
							assets: ::std::boxed::Box::new(assets),
							fee_item,
							dest: ::std::boxed::Box::new(dest),
							dest_weight,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::orml_xtokens::module::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Transferred `MultiAsset` with fee."]
			pub struct TransferredMultiAssets {
				pub sender: ::subxt::sp_core::crypto::AccountId32,
				pub assets: runtime_types::xcm::v1::multiasset::MultiAssets,
				pub fee: runtime_types::xcm::v1::multiasset::MultiAsset,
				pub dest: runtime_types::xcm::v1::multilocation::MultiLocation,
			}
			impl ::subxt::Event for TransferredMultiAssets {
				const PALLET: &'static str = "XTokens";
				const EVENT: &'static str = "TransferredMultiAssets";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " Self chain location."]
				pub fn self_location(
					&self,
				) -> ::core::result::Result<
					runtime_types::xcm::v1::multilocation::MultiLocation,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("XTokens", "SelfLocation")? ==
						[
							122u8, 165u8, 212u8, 188u8, 76u8, 202u8, 6u8, 183u8, 87u8, 110u8,
							201u8, 175u8, 230u8, 137u8, 177u8, 213u8, 227u8, 25u8, 81u8, 191u8,
							104u8, 228u8, 228u8, 84u8, 72u8, 187u8, 97u8, 88u8, 70u8, 118u8, 82u8,
							150u8,
						] {
						let pallet = metadata.pallet("XTokens")?;
						let constant = pallet.constant("SelfLocation")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " Base XCM weight."]
				#[doc = ""]
				#[doc = " The actually weight for an XCM message is `T::BaseXcmWeight +"]
				#[doc = " T::Weigher::weight(&msg)`."]
				pub fn base_xcm_weight(
					&self,
				) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("XTokens", "BaseXcmWeight")? ==
						[
							194u8, 170u8, 206u8, 180u8, 209u8, 79u8, 87u8, 9u8, 26u8, 220u8, 252u8,
							184u8, 173u8, 200u8, 203u8, 255u8, 147u8, 226u8, 172u8, 23u8, 169u8,
							140u8, 204u8, 97u8, 76u8, 161u8, 135u8, 140u8, 40u8, 59u8, 114u8,
							158u8,
						] {
						let pallet = metadata.pallet("XTokens")?;
						let constant = pallet.constant("BaseXcmWeight")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod unknown_tokens {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::orml_unknown_tokens::module::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Deposit success."]
			pub struct Deposited {
				pub asset: runtime_types::xcm::v1::multiasset::MultiAsset,
				pub who: runtime_types::xcm::v1::multilocation::MultiLocation,
			}
			impl ::subxt::Event for Deposited {
				const PALLET: &'static str = "UnknownTokens";
				const EVENT: &'static str = "Deposited";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Withdraw success."]
			pub struct Withdrawn {
				pub asset: runtime_types::xcm::v1::multiasset::MultiAsset,
				pub who: runtime_types::xcm::v1::multilocation::MultiLocation,
			}
			impl ::subxt::Event for Withdrawn {
				const PALLET: &'static str = "UnknownTokens";
				const EVENT: &'static str = "Withdrawn";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct ConcreteFungibleBalances<'a>(
				pub &'a runtime_types::xcm::v1::multilocation::MultiLocation,
				pub &'a runtime_types::xcm::v1::multilocation::MultiLocation,
			);
			impl ::subxt::StorageEntry for ConcreteFungibleBalances<'_> {
				const PALLET: &'static str = "UnknownTokens";
				const STORAGE: &'static str = "ConcreteFungibleBalances";
				type Value = ::core::primitive::u128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct AbstractFungibleBalances<'a>(
				pub &'a runtime_types::xcm::v1::multilocation::MultiLocation,
				pub &'a [::core::primitive::u8],
			);
			impl ::subxt::StorageEntry for AbstractFungibleBalances<'_> {
				const PALLET: &'static str = "UnknownTokens";
				const STORAGE: &'static str = "AbstractFungibleBalances";
				type Value = ::core::primitive::u128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " Concrete fungible balances under a given location and a concrete"]
				#[doc = " fungible id."]
				#[doc = ""]
				#[doc = " double_map: who, asset_id => u128"]
				pub fn concrete_fungible_balances(
					&self,
					_0: &'a runtime_types::xcm::v1::multilocation::MultiLocation,
					_1: &'a runtime_types::xcm::v1::multilocation::MultiLocation,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ConcreteFungibleBalances>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								58u8, 138u8, 0u8, 60u8, 79u8, 219u8, 98u8, 236u8, 71u8, 80u8,
								221u8, 122u8, 98u8, 47u8, 5u8, 104u8, 197u8, 7u8, 16u8, 182u8,
								14u8, 178u8, 246u8, 123u8, 154u8, 80u8, 182u8, 132u8, 219u8, 43u8,
								217u8, 223u8,
							] {
							let entry = ConcreteFungibleBalances(_0, _1);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Concrete fungible balances under a given location and a concrete"]
				#[doc = " fungible id."]
				#[doc = ""]
				#[doc = " double_map: who, asset_id => u128"]
				pub fn concrete_fungible_balances_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, ConcreteFungibleBalances<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ConcreteFungibleBalances>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								58u8, 138u8, 0u8, 60u8, 79u8, 219u8, 98u8, 236u8, 71u8, 80u8,
								221u8, 122u8, 98u8, 47u8, 5u8, 104u8, 197u8, 7u8, 16u8, 182u8,
								14u8, 178u8, 246u8, 123u8, 154u8, 80u8, 182u8, 132u8, 219u8, 43u8,
								217u8, 223u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Abstract fungible balances under a given location and a abstract"]
				#[doc = " fungible id."]
				#[doc = ""]
				#[doc = " double_map: who, asset_id => u128"]
				pub fn abstract_fungible_balances(
					&self,
					_0: &'a runtime_types::xcm::v1::multilocation::MultiLocation,
					_1: &'a [::core::primitive::u8],
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AbstractFungibleBalances>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								76u8, 96u8, 71u8, 22u8, 34u8, 31u8, 127u8, 163u8, 90u8, 43u8,
								154u8, 180u8, 229u8, 214u8, 81u8, 227u8, 218u8, 124u8, 239u8,
								180u8, 38u8, 28u8, 123u8, 209u8, 171u8, 207u8, 122u8, 121u8, 102u8,
								247u8, 1u8, 211u8,
							] {
							let entry = AbstractFungibleBalances(_0, _1);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Abstract fungible balances under a given location and a abstract"]
				#[doc = " fungible id."]
				#[doc = ""]
				#[doc = " double_map: who, asset_id => u128"]
				pub fn abstract_fungible_balances_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, AbstractFungibleBalances<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AbstractFungibleBalances>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								76u8, 96u8, 71u8, 22u8, 34u8, 31u8, 127u8, 163u8, 90u8, 43u8,
								154u8, 180u8, 229u8, 214u8, 81u8, 227u8, 218u8, 124u8, 239u8,
								180u8, 38u8, 28u8, 123u8, 209u8, 171u8, 207u8, 122u8, 121u8, 102u8,
								247u8, 1u8, 211u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
	}
	pub mod tokens {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Transfer {
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Call for Transfer {
				const PALLET: &'static str = "Tokens";
				const FUNCTION: &'static str = "transfer";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct TransferAll {
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for TransferAll {
				const PALLET: &'static str = "Tokens";
				const FUNCTION: &'static str = "transfer_all";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct TransferKeepAlive {
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Call for TransferKeepAlive {
				const PALLET: &'static str = "Tokens";
				const FUNCTION: &'static str = "transfer_keep_alive";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ForceTransfer {
				pub source: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Call for ForceTransfer {
				const PALLET: &'static str = "Tokens";
				const FUNCTION: &'static str = "force_transfer";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetBalance {
				pub who: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				#[codec(compact)]
				pub new_free: ::core::primitive::u128,
				#[codec(compact)]
				pub new_reserved: ::core::primitive::u128,
			}
			impl ::subxt::Call for SetBalance {
				const PALLET: &'static str = "Tokens";
				const FUNCTION: &'static str = "set_balance";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Transfer some liquid free balance to another account."]
				#[doc = ""]
				#[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
				#[doc = "It will decrease the total issuance of the system by the"]
				#[doc = "`TransferFee`. If the sender's account is below the existential"]
				#[doc = "deposit as a result of the transfer, the account will be reaped."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Signed` by the"]
				#[doc = "transactor."]
				#[doc = ""]
				#[doc = "- `dest`: The recipient of the transfer."]
				#[doc = "- `currency_id`: currency type."]
				#[doc = "- `amount`: free balance amount to tranfer."]
				pub fn transfer(
					&self,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					currency_id: runtime_types::primitives::currency::CurrencyId,
					amount: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Transfer,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Transfer>()?
					};
					if runtime_call_hash ==
						[
							253u8, 229u8, 247u8, 0u8, 236u8, 248u8, 183u8, 214u8, 30u8, 174u8,
							223u8, 182u8, 70u8, 203u8, 251u8, 232u8, 7u8, 79u8, 133u8, 44u8, 10u8,
							74u8, 251u8, 48u8, 114u8, 143u8, 142u8, 64u8, 10u8, 90u8, 149u8, 90u8,
						] {
						let call = Transfer { dest, currency_id, amount };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Transfer all remaining balance to the given account."]
				#[doc = ""]
				#[doc = "NOTE: This function only attempts to transfer _transferable_"]
				#[doc = "balances. This means that any locked, reserved, or existential"]
				#[doc = "deposits (when `keep_alive` is `true`), will not be transferred by"]
				#[doc = "this function. To ensure that this function results in a killed"]
				#[doc = "account, you might need to prepare the account by removing any"]
				#[doc = "reference counters, storage deposits, etc..."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Signed` by the"]
				#[doc = "transactor."]
				#[doc = ""]
				#[doc = "- `dest`: The recipient of the transfer."]
				#[doc = "- `currency_id`: currency type."]
				#[doc = "- `keep_alive`: A boolean to determine if the `transfer_all`"]
				#[doc = "  operation should send all of the funds the account has, causing"]
				#[doc = "  the sender account to be killed (false), or transfer everything"]
				#[doc = "  except at least the existential deposit, which will guarantee to"]
				#[doc = "  keep the sender account alive (true)."]
				pub fn transfer_all(
					&self,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					currency_id: runtime_types::primitives::currency::CurrencyId,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						TransferAll,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<TransferAll>()?
					};
					if runtime_call_hash ==
						[
							5u8, 215u8, 36u8, 5u8, 187u8, 245u8, 152u8, 214u8, 81u8, 200u8, 17u8,
							114u8, 134u8, 231u8, 77u8, 123u8, 30u8, 251u8, 50u8, 158u8, 187u8,
							159u8, 141u8, 29u8, 62u8, 159u8, 202u8, 60u8, 214u8, 68u8, 6u8, 141u8,
						] {
						let call = TransferAll { dest, currency_id, keep_alive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Same as the [`transfer`] call, but with a check that the transfer"]
				#[doc = "will not kill the origin account."]
				#[doc = ""]
				#[doc = "99% of the time you want [`transfer`] instead."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Signed` by the"]
				#[doc = "transactor."]
				#[doc = ""]
				#[doc = "- `dest`: The recipient of the transfer."]
				#[doc = "- `currency_id`: currency type."]
				#[doc = "- `amount`: free balance amount to tranfer."]
				pub fn transfer_keep_alive(
					&self,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					currency_id: runtime_types::primitives::currency::CurrencyId,
					amount: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						TransferKeepAlive,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<TransferKeepAlive>()?
					};
					if runtime_call_hash ==
						[
							47u8, 99u8, 198u8, 98u8, 112u8, 113u8, 220u8, 88u8, 95u8, 98u8, 57u8,
							230u8, 34u8, 198u8, 170u8, 144u8, 89u8, 19u8, 248u8, 231u8, 254u8,
							193u8, 216u8, 39u8, 162u8, 104u8, 248u8, 43u8, 149u8, 222u8, 13u8,
							158u8,
						] {
						let call = TransferKeepAlive { dest, currency_id, amount };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Exactly as `transfer`, except the origin must be root and the source"]
				#[doc = "account may be specified."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Root_."]
				#[doc = ""]
				#[doc = "- `source`: The sender of the transfer."]
				#[doc = "- `dest`: The recipient of the transfer."]
				#[doc = "- `currency_id`: currency type."]
				#[doc = "- `amount`: free balance amount to tranfer."]
				pub fn force_transfer(
					&self,
					source: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					currency_id: runtime_types::primitives::currency::CurrencyId,
					amount: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ForceTransfer,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ForceTransfer>()?
					};
					if runtime_call_hash ==
						[
							69u8, 121u8, 194u8, 112u8, 41u8, 101u8, 99u8, 114u8, 129u8, 95u8,
							152u8, 97u8, 126u8, 91u8, 186u8, 152u8, 15u8, 209u8, 106u8, 208u8,
							95u8, 215u8, 94u8, 171u8, 225u8, 249u8, 27u8, 108u8, 90u8, 107u8, 89u8,
							66u8,
						] {
						let call = ForceTransfer { source, dest, currency_id, amount };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Set the balances of a given account."]
				#[doc = ""]
				#[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it"]
				#[doc = "will also decrease the total issuance of the system"]
				#[doc = "(`TotalIssuance`). If the new free or reserved balance is below the"]
				#[doc = "existential deposit, it will reap the `AccountInfo`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call is `root`."]
				pub fn set_balance(
					&self,
					who: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					currency_id: runtime_types::primitives::currency::CurrencyId,
					new_free: ::core::primitive::u128,
					new_reserved: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetBalance,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetBalance>()?
					};
					if runtime_call_hash ==
						[
							184u8, 87u8, 202u8, 34u8, 234u8, 64u8, 225u8, 32u8, 35u8, 73u8, 143u8,
							49u8, 135u8, 230u8, 216u8, 24u8, 158u8, 137u8, 131u8, 136u8, 206u8,
							45u8, 89u8, 201u8, 113u8, 45u8, 219u8, 188u8, 25u8, 154u8, 215u8, 49u8,
						] {
						let call = SetBalance { who, currency_id, new_free, new_reserved };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::orml_tokens::module::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An account was created with some free balance."]
			pub struct Endowed {
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for Endowed {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Endowed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An account was removed whose balance was non-zero but below"]
			#[doc = "ExistentialDeposit, resulting in an outright loss."]
			pub struct DustLost {
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for DustLost {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "DustLost";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Transfer succeeded."]
			pub struct Transfer {
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				pub from: ::subxt::sp_core::crypto::AccountId32,
				pub to: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for Transfer {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Transfer";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Some balance was reserved (moved from free to reserved)."]
			pub struct Reserved {
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for Reserved {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Reserved";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Some balance was unreserved (moved from reserved to free)."]
			pub struct Unreserved {
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for Unreserved {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Unreserved";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Some reserved balance was repatriated (moved from reserved to"]
			#[doc = "another account)."]
			pub struct ReserveRepatriated {
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				pub from: ::subxt::sp_core::crypto::AccountId32,
				pub to: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
				pub status: runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
			}
			impl ::subxt::Event for ReserveRepatriated {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "ReserveRepatriated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A balance was set by root."]
			pub struct BalanceSet {
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub free: ::core::primitive::u128,
				pub reserved: ::core::primitive::u128,
			}
			impl ::subxt::Event for BalanceSet {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "BalanceSet";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "The total issuance of an currency has been set"]
			pub struct TotalIssuanceSet {
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for TotalIssuanceSet {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "TotalIssuanceSet";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Some balances were withdrawn (e.g. pay for transaction fee)"]
			pub struct Withdrawn {
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for Withdrawn {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Withdrawn";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Some balances were slashed (e.g. due to mis-behavior)"]
			pub struct Slashed {
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub free_amount: ::core::primitive::u128,
				pub reserved_amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for Slashed {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Slashed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Deposited some balance into an account"]
			pub struct Deposited {
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for Deposited {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Deposited";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Some funds are locked"]
			pub struct LockSet {
				pub lock_id: [::core::primitive::u8; 8usize],
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for LockSet {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "LockSet";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Some locked funds were unlocked"]
			pub struct LockRemoved {
				pub lock_id: [::core::primitive::u8; 8usize],
				pub currency_id: runtime_types::primitives::currency::CurrencyId,
				pub who: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Event for LockRemoved {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "LockRemoved";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct TotalIssuance<'a>(pub &'a runtime_types::primitives::currency::CurrencyId);
			impl ::subxt::StorageEntry for TotalIssuance<'_> {
				const PALLET: &'static str = "Tokens";
				const STORAGE: &'static str = "TotalIssuance";
				type Value = ::core::primitive::u128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct Locks<'a>(
				pub &'a ::subxt::sp_core::crypto::AccountId32,
				pub &'a runtime_types::primitives::currency::CurrencyId,
			);
			impl ::subxt::StorageEntry for Locks<'_> {
				const PALLET: &'static str = "Tokens";
				const STORAGE: &'static str = "Locks";
				type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
					runtime_types::orml_tokens::BalanceLock<::core::primitive::u128>,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
					])
				}
			}
			pub struct Accounts<'a>(
				pub &'a ::subxt::sp_core::crypto::AccountId32,
				pub &'a runtime_types::primitives::currency::CurrencyId,
			);
			impl ::subxt::StorageEntry for Accounts<'_> {
				const PALLET: &'static str = "Tokens";
				const STORAGE: &'static str = "Accounts";
				type Value = runtime_types::orml_tokens::AccountData<::core::primitive::u128>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
					])
				}
			}
			pub struct Reserves<'a>(
				pub &'a ::subxt::sp_core::crypto::AccountId32,
				pub &'a runtime_types::primitives::currency::CurrencyId,
			);
			impl ::subxt::StorageEntry for Reserves<'_> {
				const PALLET: &'static str = "Tokens";
				const STORAGE: &'static str = "Reserves";
				type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
					runtime_types::orml_tokens::ReserveData<
						[::core::primitive::u8; 8usize],
						::core::primitive::u128,
					>,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
					])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The total issuance of a token type."]
				pub fn total_issuance(
					&self,
					_0: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<TotalIssuance>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								241u8, 129u8, 5u8, 167u8, 216u8, 197u8, 164u8, 93u8, 33u8, 196u8,
								21u8, 6u8, 165u8, 64u8, 194u8, 9u8, 168u8, 124u8, 131u8, 45u8,
								93u8, 214u8, 69u8, 181u8, 154u8, 80u8, 199u8, 207u8, 45u8, 237u8,
								17u8, 105u8,
							] {
							let entry = TotalIssuance(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The total issuance of a token type."]
				pub fn total_issuance_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, TotalIssuance<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<TotalIssuance>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								241u8, 129u8, 5u8, 167u8, 216u8, 197u8, 164u8, 93u8, 33u8, 196u8,
								21u8, 6u8, 165u8, 64u8, 194u8, 9u8, 168u8, 124u8, 131u8, 45u8,
								93u8, 214u8, 69u8, 181u8, 154u8, 80u8, 199u8, 207u8, 45u8, 237u8,
								17u8, 105u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Any liquidity locks of a token type under an account."]
				#[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
				pub fn locks(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					_1: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::frame_support::storage::bounded_vec::BoundedVec<
							runtime_types::orml_tokens::BalanceLock<::core::primitive::u128>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Locks>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								106u8, 95u8, 21u8, 107u8, 207u8, 248u8, 136u8, 57u8, 249u8, 58u8,
								181u8, 195u8, 161u8, 8u8, 239u8, 232u8, 69u8, 203u8, 119u8, 82u8,
								248u8, 105u8, 115u8, 126u8, 54u8, 177u8, 115u8, 41u8, 164u8, 144u8,
								14u8, 202u8,
							] {
							let entry = Locks(_0, _1);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Any liquidity locks of a token type under an account."]
				#[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
				pub fn locks_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Locks<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Locks>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								106u8, 95u8, 21u8, 107u8, 207u8, 248u8, 136u8, 57u8, 249u8, 58u8,
								181u8, 195u8, 161u8, 8u8, 239u8, 232u8, 69u8, 203u8, 119u8, 82u8,
								248u8, 105u8, 115u8, 126u8, 54u8, 177u8, 115u8, 41u8, 164u8, 144u8,
								14u8, 202u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The balance of a token type under an account."]
				#[doc = ""]
				#[doc = " NOTE: If the total is ever zero, decrease account ref account."]
				#[doc = ""]
				#[doc = " NOTE: This is only used in the case that this module is used to store"]
				#[doc = " balances."]
				pub fn accounts(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					_1: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::orml_tokens::AccountData<::core::primitive::u128>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Accounts>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								94u8, 147u8, 137u8, 73u8, 118u8, 3u8, 43u8, 29u8, 26u8, 78u8, 23u8,
								2u8, 162u8, 111u8, 102u8, 126u8, 166u8, 97u8, 85u8, 107u8, 56u8,
								34u8, 3u8, 107u8, 93u8, 134u8, 20u8, 219u8, 146u8, 202u8, 24u8,
								89u8,
							] {
							let entry = Accounts(_0, _1);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The balance of a token type under an account."]
				#[doc = ""]
				#[doc = " NOTE: If the total is ever zero, decrease account ref account."]
				#[doc = ""]
				#[doc = " NOTE: This is only used in the case that this module is used to store"]
				#[doc = " balances."]
				pub fn accounts_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Accounts<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Accounts>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								94u8, 147u8, 137u8, 73u8, 118u8, 3u8, 43u8, 29u8, 26u8, 78u8, 23u8,
								2u8, 162u8, 111u8, 102u8, 126u8, 166u8, 97u8, 85u8, 107u8, 56u8,
								34u8, 3u8, 107u8, 93u8, 134u8, 20u8, 219u8, 146u8, 202u8, 24u8,
								89u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Named reserves on some account balances."]
				pub fn reserves(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					_1: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::frame_support::storage::bounded_vec::BoundedVec<
							runtime_types::orml_tokens::ReserveData<
								[::core::primitive::u8; 8usize],
								::core::primitive::u128,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Reserves>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								115u8, 127u8, 2u8, 243u8, 219u8, 144u8, 206u8, 81u8, 119u8, 222u8,
								50u8, 12u8, 232u8, 215u8, 139u8, 146u8, 206u8, 76u8, 212u8, 58u8,
								70u8, 34u8, 36u8, 85u8, 16u8, 210u8, 86u8, 14u8, 170u8, 102u8,
								157u8, 28u8,
							] {
							let entry = Reserves(_0, _1);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Named reserves on some account balances."]
				pub fn reserves_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Reserves<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Reserves>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								115u8, 127u8, 2u8, 243u8, 219u8, 144u8, 206u8, 81u8, 119u8, 222u8,
								50u8, 12u8, 232u8, 215u8, 139u8, 146u8, 206u8, 76u8, 212u8, 58u8,
								70u8, 34u8, 36u8, 85u8, 16u8, 210u8, 86u8, 14u8, 170u8, 102u8,
								157u8, 28u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				pub fn max_locks(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Tokens", "MaxLocks")? ==
						[
							250u8, 58u8, 19u8, 15u8, 35u8, 113u8, 227u8, 89u8, 39u8, 75u8, 21u8,
							108u8, 202u8, 32u8, 163u8, 167u8, 207u8, 233u8, 69u8, 151u8, 53u8,
							164u8, 230u8, 16u8, 14u8, 22u8, 172u8, 46u8, 36u8, 216u8, 29u8, 1u8,
						] {
						let pallet = metadata.pallet("Tokens")?;
						let constant = pallet.constant("MaxLocks")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The maximum number of named reserves that can exist on an account."]
				pub fn max_reserves(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Tokens", "MaxReserves")? ==
						[
							117u8, 207u8, 208u8, 40u8, 3u8, 139u8, 184u8, 190u8, 227u8, 156u8,
							207u8, 252u8, 250u8, 235u8, 170u8, 16u8, 211u8, 218u8, 21u8, 251u8,
							32u8, 22u8, 8u8, 3u8, 224u8, 40u8, 165u8, 131u8, 30u8, 97u8, 205u8,
							19u8,
						] {
						let pallet = metadata.pallet("Tokens")?;
						let constant = pallet.constant("MaxReserves")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod oracle {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AddAssetAndInfo {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub threshold: runtime_types::sp_arithmetic::per_things::Percent,
				pub min_answers: ::core::primitive::u32,
				pub max_answers: ::core::primitive::u32,
				pub block_interval: ::core::primitive::u32,
				pub reward: ::core::primitive::u128,
				pub slash: ::core::primitive::u128,
			}
			impl ::subxt::Call for AddAssetAndInfo {
				const PALLET: &'static str = "Oracle";
				const FUNCTION: &'static str = "add_asset_and_info";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetSigner {
				pub signer: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Call for SetSigner {
				const PALLET: &'static str = "Oracle";
				const FUNCTION: &'static str = "set_signer";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct AddStake {
				pub stake: ::core::primitive::u128,
			}
			impl ::subxt::Call for AddStake {
				const PALLET: &'static str = "Oracle";
				const FUNCTION: &'static str = "add_stake";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RemoveStake;
			impl ::subxt::Call for RemoveStake {
				const PALLET: &'static str = "Oracle";
				const FUNCTION: &'static str = "remove_stake";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ReclaimStake;
			impl ::subxt::Call for ReclaimStake {
				const PALLET: &'static str = "Oracle";
				const FUNCTION: &'static str = "reclaim_stake";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SubmitPrice {
				pub price: ::core::primitive::u128,
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
			}
			impl ::subxt::Call for SubmitPrice {
				const PALLET: &'static str = "Oracle";
				const FUNCTION: &'static str = "submit_price";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Permissioned call to add an asset"]
				#[doc = ""]
				#[doc = "- `asset_id`: Id for the asset"]
				#[doc = "- `threshold`: Percent close to mean to be rewarded"]
				#[doc = "- `min_answers`: Min answers before aggregation"]
				#[doc = "- `max_answers`: Max answers to aggregate"]
				#[doc = "- `block_interval`: blocks until oracle triggered"]
				#[doc = "- `reward`: reward amount for correct answer"]
				#[doc = "- `slash`: slash amount for bad answer"]
				#[doc = ""]
				#[doc = "Emits `DepositEvent` event when successful."]
				pub fn add_asset_and_info(
					&self,
					asset_id: runtime_types::primitives::currency::CurrencyId,
					threshold: runtime_types::sp_arithmetic::per_things::Percent,
					min_answers: ::core::primitive::u32,
					max_answers: ::core::primitive::u32,
					block_interval: ::core::primitive::u32,
					reward: ::core::primitive::u128,
					slash: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						AddAssetAndInfo,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<AddAssetAndInfo>()?
					};
					if runtime_call_hash ==
						[
							98u8, 31u8, 78u8, 150u8, 100u8, 239u8, 107u8, 254u8, 33u8, 206u8, 20u8,
							95u8, 251u8, 241u8, 193u8, 176u8, 194u8, 169u8, 149u8, 81u8, 98u8, 9u8,
							72u8, 216u8, 5u8, 90u8, 129u8, 141u8, 254u8, 212u8, 152u8, 180u8,
						] {
						let call = AddAssetAndInfo {
							asset_id,
							threshold,
							min_answers,
							max_answers,
							block_interval,
							reward,
							slash,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Call for a signer to be set, called from controller, adds stake."]
				#[doc = ""]
				#[doc = "- `signer`: signer to tie controller to"]
				#[doc = ""]
				#[doc = "Emits `SignerSet` and `StakeAdded` events when successful."]
				pub fn set_signer(
					&self,
					signer: ::subxt::sp_core::crypto::AccountId32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetSigner,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetSigner>()?
					};
					if runtime_call_hash ==
						[
							91u8, 112u8, 3u8, 237u8, 120u8, 103u8, 52u8, 221u8, 30u8, 92u8, 52u8,
							11u8, 9u8, 108u8, 69u8, 232u8, 57u8, 219u8, 244u8, 194u8, 97u8, 62u8,
							131u8, 237u8, 19u8, 161u8, 193u8, 181u8, 197u8, 102u8, 159u8, 116u8,
						] {
						let call = SetSigner { signer };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "call to add more stake from a controller"]
				#[doc = ""]
				#[doc = "- `stake`: amount to add to stake"]
				#[doc = ""]
				#[doc = "Emits `StakeAdded` event when successful."]
				pub fn add_stake(
					&self,
					stake: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						AddStake,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<AddStake>()?
					};
					if runtime_call_hash ==
						[
							85u8, 100u8, 248u8, 226u8, 18u8, 148u8, 218u8, 131u8, 31u8, 119u8,
							54u8, 52u8, 98u8, 178u8, 35u8, 23u8, 94u8, 50u8, 27u8, 201u8, 66u8,
							39u8, 216u8, 172u8, 126u8, 50u8, 145u8, 164u8, 73u8, 143u8, 70u8, 80u8,
						] {
						let call = AddStake { stake };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Call to put in a claim to remove stake, called from controller"]
				#[doc = ""]
				#[doc = "Emits `StakeRemoved` event when successful."]
				pub fn remove_stake(
					&self,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RemoveStake,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RemoveStake>()?
					};
					if runtime_call_hash ==
						[
							109u8, 215u8, 126u8, 241u8, 3u8, 34u8, 227u8, 110u8, 116u8, 160u8,
							101u8, 240u8, 73u8, 57u8, 225u8, 212u8, 100u8, 41u8, 126u8, 120u8,
							206u8, 201u8, 191u8, 156u8, 142u8, 110u8, 62u8, 19u8, 226u8, 239u8,
							93u8, 80u8,
						] {
						let call = RemoveStake {};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Call to reclaim stake after proper time has passed, called from controller"]
				#[doc = ""]
				#[doc = "Emits `StakeReclaimed` event when successful."]
				pub fn reclaim_stake(
					&self,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ReclaimStake,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ReclaimStake>()?
					};
					if runtime_call_hash ==
						[
							214u8, 66u8, 83u8, 162u8, 26u8, 140u8, 190u8, 228u8, 234u8, 121u8,
							54u8, 75u8, 1u8, 193u8, 237u8, 149u8, 168u8, 46u8, 93u8, 146u8, 50u8,
							64u8, 72u8, 217u8, 183u8, 6u8, 185u8, 103u8, 176u8, 54u8, 188u8, 149u8,
						] {
						let call = ReclaimStake {};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Call to submit a price, gas is returned if all logic gates passed"]
				#[doc = "Should be called from offchain worker but can be called manually too"]
				#[doc = "Operational transaction"]
				#[doc = ""]
				#[doc = "- `price`: price to submit"]
				#[doc = "- `asset_id`: Id for the asset"]
				#[doc = ""]
				#[doc = "Emits `PriceSubmitted` event when successful."]
				pub fn submit_price(
					&self,
					price: ::core::primitive::u128,
					asset_id: runtime_types::primitives::currency::CurrencyId,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SubmitPrice,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SubmitPrice>()?
					};
					if runtime_call_hash ==
						[
							48u8, 152u8, 178u8, 121u8, 32u8, 85u8, 179u8, 238u8, 107u8, 45u8,
							184u8, 184u8, 76u8, 164u8, 113u8, 179u8, 77u8, 128u8, 178u8, 57u8,
							123u8, 191u8, 203u8, 196u8, 204u8, 110u8, 229u8, 155u8, 200u8, 205u8,
							83u8, 138u8,
						] {
						let call = SubmitPrice { price, asset_id };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_oracle::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Asset info created or changed. \\[asset_id, threshold, min_answers, max_answers,"]
			#[doc = "block_interval, reward, slash\\]"]
			pub struct AssetInfoChange(
				pub runtime_types::primitives::currency::CurrencyId,
				pub runtime_types::sp_arithmetic::per_things::Percent,
				pub ::core::primitive::u32,
				pub ::core::primitive::u32,
				pub ::core::primitive::u32,
				pub ::core::primitive::u128,
				pub ::core::primitive::u128,
			);
			impl ::subxt::Event for AssetInfoChange {
				const PALLET: &'static str = "Oracle";
				const EVENT: &'static str = "AssetInfoChange";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Signer was set. \\[signer, controller\\]"]
			pub struct SignerSet(
				pub ::subxt::sp_core::crypto::AccountId32,
				pub ::subxt::sp_core::crypto::AccountId32,
			);
			impl ::subxt::Event for SignerSet {
				const PALLET: &'static str = "Oracle";
				const EVENT: &'static str = "SignerSet";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Stake was added. \\[added_by, amount_added, total_amount\\]"]
			pub struct StakeAdded(
				pub ::subxt::sp_core::crypto::AccountId32,
				pub ::core::primitive::u128,
				pub ::core::primitive::u128,
			);
			impl ::subxt::Event for StakeAdded {
				const PALLET: &'static str = "Oracle";
				const EVENT: &'static str = "StakeAdded";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Stake removed. \\[removed_by, amount, block_number\\]"]
			pub struct StakeRemoved(
				pub ::subxt::sp_core::crypto::AccountId32,
				pub ::core::primitive::u128,
				pub ::core::primitive::u32,
			);
			impl ::subxt::Event for StakeRemoved {
				const PALLET: &'static str = "Oracle";
				const EVENT: &'static str = "StakeRemoved";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Stake reclaimed. \\[reclaimed_by, amount\\]"]
			pub struct StakeReclaimed(
				pub ::subxt::sp_core::crypto::AccountId32,
				pub ::core::primitive::u128,
			);
			impl ::subxt::Event for StakeReclaimed {
				const PALLET: &'static str = "Oracle";
				const EVENT: &'static str = "StakeReclaimed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Price submitted by oracle. \\[oracle_address, asset_id, price\\]"]
			pub struct PriceSubmitted(
				pub ::subxt::sp_core::crypto::AccountId32,
				pub runtime_types::primitives::currency::CurrencyId,
				pub ::core::primitive::u128,
			);
			impl ::subxt::Event for PriceSubmitted {
				const PALLET: &'static str = "Oracle";
				const EVENT: &'static str = "PriceSubmitted";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Oracle slashed. \\[oracle_address, asset_id, amount\\]"]
			pub struct UserSlashed(
				pub ::subxt::sp_core::crypto::AccountId32,
				pub runtime_types::primitives::currency::CurrencyId,
				pub ::core::primitive::u128,
			);
			impl ::subxt::Event for UserSlashed {
				const PALLET: &'static str = "Oracle";
				const EVENT: &'static str = "UserSlashed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Oracle rewarded. \\[oracle_address, asset_id, price\\]"]
			pub struct UserRewarded(
				pub ::subxt::sp_core::crypto::AccountId32,
				pub runtime_types::primitives::currency::CurrencyId,
				pub ::core::primitive::u128,
			);
			impl ::subxt::Event for UserRewarded {
				const PALLET: &'static str = "Oracle";
				const EVENT: &'static str = "UserRewarded";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Answer from oracle removed for staleness. \\[oracle_address, price\\]"]
			pub struct AnswerPruned(
				pub ::subxt::sp_core::crypto::AccountId32,
				pub ::core::primitive::u128,
			);
			impl ::subxt::Event for AnswerPruned {
				const PALLET: &'static str = "Oracle";
				const EVENT: &'static str = "AnswerPruned";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct AssetsCount;
			impl ::subxt::StorageEntry for AssetsCount {
				const PALLET: &'static str = "Oracle";
				const STORAGE: &'static str = "AssetsCount";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct SignerToController<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::StorageEntry for SignerToController<'_> {
				const PALLET: &'static str = "Oracle";
				const STORAGE: &'static str = "SignerToController";
				type Value = ::subxt::sp_core::crypto::AccountId32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct ControllerToSigner<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::StorageEntry for ControllerToSigner<'_> {
				const PALLET: &'static str = "Oracle";
				const STORAGE: &'static str = "ControllerToSigner";
				type Value = ::subxt::sp_core::crypto::AccountId32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct DeclaredWithdraws<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::StorageEntry for DeclaredWithdraws<'_> {
				const PALLET: &'static str = "Oracle";
				const STORAGE: &'static str = "DeclaredWithdraws";
				type Value = runtime_types::pallet_oracle::pallet::Withdraw<
					::core::primitive::u128,
					::core::primitive::u32,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct OracleStake<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::StorageEntry for OracleStake<'_> {
				const PALLET: &'static str = "Oracle";
				const STORAGE: &'static str = "OracleStake";
				type Value = ::core::primitive::u128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct AnswerInTransit<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::StorageEntry for AnswerInTransit<'_> {
				const PALLET: &'static str = "Oracle";
				const STORAGE: &'static str = "AnswerInTransit";
				type Value = ::core::primitive::u128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct Prices<'a>(pub &'a runtime_types::primitives::currency::CurrencyId);
			impl ::subxt::StorageEntry for Prices<'_> {
				const PALLET: &'static str = "Oracle";
				const STORAGE: &'static str = "Prices";
				type Value = runtime_types::composable_traits::oracle::Price<
					::core::primitive::u128,
					::core::primitive::u32,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct PriceHistory<'a>(pub &'a runtime_types::primitives::currency::CurrencyId);
			impl ::subxt::StorageEntry for PriceHistory<'_> {
				const PALLET: &'static str = "Oracle";
				const STORAGE: &'static str = "PriceHistory";
				type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
					runtime_types::composable_traits::oracle::Price<
						::core::primitive::u128,
						::core::primitive::u32,
					>,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct PrePrices<'a>(pub &'a runtime_types::primitives::currency::CurrencyId);
			impl ::subxt::StorageEntry for PrePrices<'_> {
				const PALLET: &'static str = "Oracle";
				const STORAGE: &'static str = "PrePrices";
				type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
					runtime_types::pallet_oracle::pallet::PrePrice<
						::core::primitive::u128,
						::core::primitive::u32,
						::subxt::sp_core::crypto::AccountId32,
					>,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct AssetsInfo<'a>(pub &'a runtime_types::primitives::currency::CurrencyId);
			impl ::subxt::StorageEntry for AssetsInfo<'_> {
				const PALLET: &'static str = "Oracle";
				const STORAGE: &'static str = "AssetsInfo";
				type Value = runtime_types::pallet_oracle::pallet::AssetInfo<
					runtime_types::sp_arithmetic::per_things::Percent,
					::core::primitive::u32,
					::core::primitive::u128,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " Total amount of assets"]
				pub fn assets_count(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AssetsCount>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								215u8, 70u8, 33u8, 171u8, 12u8, 49u8, 202u8, 86u8, 73u8, 211u8,
								199u8, 120u8, 212u8, 27u8, 233u8, 0u8, 13u8, 97u8, 179u8, 132u8,
								34u8, 70u8, 211u8, 86u8, 135u8, 179u8, 68u8, 39u8, 64u8, 79u8,
								26u8, 211u8,
							] {
							let entry = AssetsCount;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Mapping signing key to controller key"]
				pub fn signer_to_controller(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<SignerToController>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								128u8, 61u8, 69u8, 201u8, 216u8, 39u8, 140u8, 194u8, 58u8, 3u8,
								186u8, 173u8, 93u8, 85u8, 83u8, 88u8, 114u8, 34u8, 113u8, 110u8,
								157u8, 210u8, 70u8, 11u8, 37u8, 15u8, 113u8, 60u8, 10u8, 114u8,
								178u8, 232u8,
							] {
							let entry = SignerToController(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Mapping signing key to controller key"]
				pub fn signer_to_controller_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, SignerToController<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<SignerToController>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								128u8, 61u8, 69u8, 201u8, 216u8, 39u8, 140u8, 194u8, 58u8, 3u8,
								186u8, 173u8, 93u8, 85u8, 83u8, 88u8, 114u8, 34u8, 113u8, 110u8,
								157u8, 210u8, 70u8, 11u8, 37u8, 15u8, 113u8, 60u8, 10u8, 114u8,
								178u8, 232u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Mapping Controller key to signer key"]
				pub fn controller_to_signer(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ControllerToSigner>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								212u8, 41u8, 87u8, 47u8, 63u8, 235u8, 131u8, 25u8, 129u8, 168u8,
								133u8, 58u8, 234u8, 147u8, 70u8, 137u8, 102u8, 28u8, 94u8, 209u8,
								187u8, 49u8, 249u8, 86u8, 151u8, 118u8, 75u8, 80u8, 82u8, 72u8,
								51u8, 111u8,
							] {
							let entry = ControllerToSigner(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Mapping Controller key to signer key"]
				pub fn controller_to_signer_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, ControllerToSigner<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ControllerToSigner>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								212u8, 41u8, 87u8, 47u8, 63u8, 235u8, 131u8, 25u8, 129u8, 168u8,
								133u8, 58u8, 234u8, 147u8, 70u8, 137u8, 102u8, 28u8, 94u8, 209u8,
								187u8, 49u8, 249u8, 86u8, 151u8, 118u8, 75u8, 80u8, 82u8, 72u8,
								51u8, 111u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Tracking withdrawl requests"]
				pub fn declared_withdraws(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_oracle::pallet::Withdraw<
								::core::primitive::u128,
								::core::primitive::u32,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<DeclaredWithdraws>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								192u8, 21u8, 33u8, 215u8, 167u8, 22u8, 31u8, 249u8, 229u8, 198u8,
								68u8, 168u8, 235u8, 252u8, 117u8, 189u8, 220u8, 187u8, 217u8,
								149u8, 2u8, 194u8, 28u8, 179u8, 202u8, 28u8, 161u8, 252u8, 239u8,
								10u8, 43u8, 34u8,
							] {
							let entry = DeclaredWithdraws(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Tracking withdrawl requests"]
				pub fn declared_withdraws_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, DeclaredWithdraws<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<DeclaredWithdraws>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								192u8, 21u8, 33u8, 215u8, 167u8, 22u8, 31u8, 249u8, 229u8, 198u8,
								68u8, 168u8, 235u8, 252u8, 117u8, 189u8, 220u8, 187u8, 217u8,
								149u8, 2u8, 194u8, 28u8, 179u8, 202u8, 28u8, 161u8, 252u8, 239u8,
								10u8, 43u8, 34u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Mapping of signing key to stake"]
				pub fn oracle_stake(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::core::primitive::u128>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<OracleStake>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								79u8, 221u8, 116u8, 91u8, 228u8, 238u8, 249u8, 243u8, 156u8, 232u8,
								236u8, 164u8, 217u8, 169u8, 96u8, 133u8, 246u8, 82u8, 130u8, 243u8,
								65u8, 224u8, 101u8, 190u8, 192u8, 253u8, 64u8, 32u8, 148u8, 162u8,
								6u8, 119u8,
							] {
							let entry = OracleStake(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Mapping of signing key to stake"]
				pub fn oracle_stake_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, OracleStake<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<OracleStake>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								79u8, 221u8, 116u8, 91u8, 228u8, 238u8, 249u8, 243u8, 156u8, 232u8,
								236u8, 164u8, 217u8, 169u8, 96u8, 133u8, 246u8, 82u8, 130u8, 243u8,
								65u8, 224u8, 101u8, 190u8, 192u8, 253u8, 64u8, 32u8, 148u8, 162u8,
								6u8, 119u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Mapping of slash amounts currently in transit"]
				pub fn answer_in_transit(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::core::primitive::u128>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AnswerInTransit>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								118u8, 245u8, 247u8, 55u8, 186u8, 63u8, 254u8, 15u8, 241u8, 88u8,
								110u8, 249u8, 225u8, 40u8, 185u8, 71u8, 236u8, 59u8, 47u8, 57u8,
								178u8, 108u8, 233u8, 1u8, 195u8, 76u8, 72u8, 187u8, 54u8, 3u8,
								132u8, 221u8,
							] {
							let entry = AnswerInTransit(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Mapping of slash amounts currently in transit"]
				pub fn answer_in_transit_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, AnswerInTransit<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AnswerInTransit>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								118u8, 245u8, 247u8, 55u8, 186u8, 63u8, 254u8, 15u8, 241u8, 88u8,
								110u8, 249u8, 225u8, 40u8, 185u8, 71u8, 236u8, 59u8, 47u8, 57u8,
								178u8, 108u8, 233u8, 1u8, 195u8, 76u8, 72u8, 187u8, 54u8, 3u8,
								132u8, 221u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Price for an asset and blocknumber asset was updated at"]
				pub fn prices(
					&self,
					_0: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::composable_traits::oracle::Price<
							::core::primitive::u128,
							::core::primitive::u32,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Prices>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								41u8, 55u8, 31u8, 202u8, 137u8, 51u8, 29u8, 43u8, 63u8, 180u8,
								159u8, 205u8, 131u8, 181u8, 180u8, 253u8, 15u8, 251u8, 112u8,
								130u8, 32u8, 94u8, 77u8, 179u8, 22u8, 95u8, 142u8, 120u8, 236u8,
								175u8, 80u8, 107u8,
							] {
							let entry = Prices(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Price for an asset and blocknumber asset was updated at"]
				pub fn prices_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Prices<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Prices>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								41u8, 55u8, 31u8, 202u8, 137u8, 51u8, 29u8, 43u8, 63u8, 180u8,
								159u8, 205u8, 131u8, 181u8, 180u8, 253u8, 15u8, 251u8, 112u8,
								130u8, 32u8, 94u8, 77u8, 179u8, 22u8, 95u8, 142u8, 120u8, 236u8,
								175u8, 80u8, 107u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Price for an asset and blocknumber asset was updated at"]
				pub fn price_history(
					&self,
					_0: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::frame_support::storage::bounded_vec::BoundedVec<
							runtime_types::composable_traits::oracle::Price<
								::core::primitive::u128,
								::core::primitive::u32,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<PriceHistory>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								134u8, 223u8, 185u8, 20u8, 95u8, 31u8, 61u8, 188u8, 48u8, 1u8,
								234u8, 50u8, 84u8, 153u8, 160u8, 245u8, 164u8, 39u8, 118u8, 33u8,
								45u8, 180u8, 255u8, 4u8, 169u8, 178u8, 102u8, 123u8, 244u8, 218u8,
								16u8, 42u8,
							] {
							let entry = PriceHistory(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Price for an asset and blocknumber asset was updated at"]
				pub fn price_history_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, PriceHistory<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<PriceHistory>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								134u8, 223u8, 185u8, 20u8, 95u8, 31u8, 61u8, 188u8, 48u8, 1u8,
								234u8, 50u8, 84u8, 153u8, 160u8, 245u8, 164u8, 39u8, 118u8, 33u8,
								45u8, 180u8, 255u8, 4u8, 169u8, 178u8, 102u8, 123u8, 244u8, 218u8,
								16u8, 42u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Temporary prices before aggregated"]
				pub fn pre_prices(
					&self,
					_0: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::frame_support::storage::bounded_vec::BoundedVec<
							runtime_types::pallet_oracle::pallet::PrePrice<
								::core::primitive::u128,
								::core::primitive::u32,
								::subxt::sp_core::crypto::AccountId32,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<PrePrices>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								132u8, 190u8, 21u8, 245u8, 108u8, 250u8, 30u8, 3u8, 66u8, 156u8,
								81u8, 252u8, 75u8, 236u8, 105u8, 137u8, 38u8, 143u8, 143u8, 108u8,
								117u8, 157u8, 234u8, 137u8, 158u8, 253u8, 40u8, 30u8, 163u8, 149u8,
								151u8, 2u8,
							] {
							let entry = PrePrices(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Temporary prices before aggregated"]
				pub fn pre_prices_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, PrePrices<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<PrePrices>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								132u8, 190u8, 21u8, 245u8, 108u8, 250u8, 30u8, 3u8, 66u8, 156u8,
								81u8, 252u8, 75u8, 236u8, 105u8, 137u8, 38u8, 143u8, 143u8, 108u8,
								117u8, 157u8, 234u8, 137u8, 158u8, 253u8, 40u8, 30u8, 163u8, 149u8,
								151u8, 2u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Information about asset, including precision threshold and max/min answers"]
				pub fn assets_info(
					&self,
					_0: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_oracle::pallet::AssetInfo<
								runtime_types::sp_arithmetic::per_things::Percent,
								::core::primitive::u32,
								::core::primitive::u128,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AssetsInfo>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								207u8, 184u8, 73u8, 202u8, 91u8, 133u8, 105u8, 57u8, 144u8, 6u8,
								25u8, 28u8, 141u8, 163u8, 62u8, 188u8, 212u8, 93u8, 85u8, 255u8,
								122u8, 159u8, 45u8, 164u8, 228u8, 156u8, 199u8, 107u8, 95u8, 132u8,
								87u8, 144u8,
							] {
							let entry = AssetsInfo(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Information about asset, including precision threshold and max/min answers"]
				pub fn assets_info_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, AssetsInfo<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AssetsInfo>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								207u8, 184u8, 73u8, 202u8, 91u8, 133u8, 105u8, 57u8, 144u8, 6u8,
								25u8, 28u8, 141u8, 163u8, 62u8, 188u8, 212u8, 93u8, 85u8, 255u8,
								122u8, 159u8, 45u8, 164u8, 228u8, 156u8, 199u8, 107u8, 95u8, 132u8,
								87u8, 144u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				pub fn max_history(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Oracle", "MaxHistory")? ==
						[
							153u8, 49u8, 125u8, 26u8, 204u8, 57u8, 233u8, 63u8, 163u8, 127u8, 12u8,
							89u8, 175u8, 95u8, 226u8, 70u8, 193u8, 69u8, 214u8, 94u8, 187u8, 178u8,
							166u8, 2u8, 80u8, 222u8, 227u8, 71u8, 96u8, 125u8, 1u8, 216u8,
						] {
						let pallet = metadata.pallet("Oracle")?;
						let constant = pallet.constant("MaxHistory")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn twap_window(
					&self,
				) -> ::core::result::Result<::core::primitive::u16, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Oracle", "TwapWindow")? ==
						[
							242u8, 172u8, 153u8, 41u8, 148u8, 77u8, 100u8, 136u8, 36u8, 111u8,
							148u8, 136u8, 82u8, 0u8, 4u8, 186u8, 129u8, 59u8, 18u8, 97u8, 180u8,
							200u8, 246u8, 91u8, 164u8, 209u8, 163u8, 147u8, 173u8, 153u8, 153u8,
							190u8,
						] {
						let pallet = metadata.pallet("Oracle")?;
						let constant = pallet.constant("TwapWindow")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn max_pre_prices(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Oracle", "MaxPrePrices")? ==
						[
							135u8, 15u8, 117u8, 221u8, 206u8, 197u8, 119u8, 228u8, 121u8, 161u8,
							56u8, 134u8, 10u8, 219u8, 50u8, 87u8, 100u8, 113u8, 4u8, 198u8, 20u8,
							220u8, 1u8, 179u8, 63u8, 225u8, 143u8, 178u8, 157u8, 148u8, 123u8,
							46u8,
						] {
						let pallet = metadata.pallet("Oracle")?;
						let constant = pallet.constant("MaxPrePrices")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod currency_factory {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_currency_factory::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RangeCreated {
				pub range: runtime_types::pallet_currency_factory::ranges::Range<
					runtime_types::primitives::currency::CurrencyId,
				>,
			}
			impl ::subxt::Event for RangeCreated {
				const PALLET: &'static str = "CurrencyFactory";
				const EVENT: &'static str = "RangeCreated";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct AssetIdRanges;
			impl ::subxt::StorageEntry for AssetIdRanges {
				const PALLET: &'static str = "CurrencyFactory";
				const STORAGE: &'static str = "AssetIdRanges";
				type Value = runtime_types::pallet_currency_factory::ranges::Ranges<
					runtime_types::primitives::currency::CurrencyId,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct AssetEd<'a>(pub &'a runtime_types::primitives::currency::CurrencyId);
			impl ::subxt::StorageEntry for AssetEd<'_> {
				const PALLET: &'static str = "CurrencyFactory";
				const STORAGE: &'static str = "AssetEd";
				type Value = ::core::primitive::u128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox128,
					)])
				}
			}
			pub struct AssetMetadata<'a>(pub &'a runtime_types::primitives::currency::CurrencyId);
			impl ::subxt::StorageEntry for AssetMetadata<'_> {
				const PALLET: &'static str = "CurrencyFactory";
				const STORAGE: &'static str = "AssetMetadata";
				type Value = runtime_types::composable_traits::assets::BasicAssetMetadata;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox128,
					)])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				pub fn asset_id_ranges(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::pallet_currency_factory::ranges::Ranges<
							runtime_types::primitives::currency::CurrencyId,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AssetIdRanges>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								92u8, 62u8, 111u8, 78u8, 92u8, 255u8, 129u8, 9u8, 223u8, 170u8,
								162u8, 137u8, 90u8, 189u8, 162u8, 146u8, 111u8, 235u8, 96u8, 46u8,
								222u8, 161u8, 72u8, 148u8, 173u8, 119u8, 2u8, 9u8, 152u8, 90u8,
								88u8, 83u8,
							] {
							let entry = AssetIdRanges;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn asset_ed(
					&self,
					_0: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::core::primitive::u128>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AssetEd>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								167u8, 198u8, 211u8, 108u8, 204u8, 120u8, 234u8, 164u8, 100u8,
								64u8, 52u8, 202u8, 2u8, 108u8, 229u8, 111u8, 170u8, 2u8, 158u8,
								54u8, 71u8, 243u8, 181u8, 48u8, 77u8, 196u8, 201u8, 255u8, 135u8,
								154u8, 65u8, 61u8,
							] {
							let entry = AssetEd(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn asset_ed_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, AssetEd<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AssetEd>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								167u8, 198u8, 211u8, 108u8, 204u8, 120u8, 234u8, 164u8, 100u8,
								64u8, 52u8, 202u8, 2u8, 108u8, 229u8, 111u8, 170u8, 2u8, 158u8,
								54u8, 71u8, 243u8, 181u8, 48u8, 77u8, 196u8, 201u8, 255u8, 135u8,
								154u8, 65u8, 61u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn asset_metadata(
					&self,
					_0: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::composable_traits::assets::BasicAssetMetadata,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AssetMetadata>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								120u8, 132u8, 180u8, 152u8, 7u8, 60u8, 37u8, 220u8, 238u8, 127u8,
								168u8, 59u8, 199u8, 215u8, 218u8, 136u8, 127u8, 154u8, 162u8,
								239u8, 27u8, 159u8, 73u8, 236u8, 157u8, 33u8, 105u8, 242u8, 142u8,
								222u8, 105u8, 173u8,
							] {
							let entry = AssetMetadata(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn asset_metadata_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, AssetMetadata<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AssetMetadata>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								120u8, 132u8, 180u8, 152u8, 7u8, 60u8, 37u8, 220u8, 238u8, 127u8,
								168u8, 59u8, 199u8, 215u8, 218u8, 136u8, 127u8, 154u8, 162u8,
								239u8, 27u8, 159u8, 73u8, 236u8, 157u8, 33u8, 105u8, 242u8, 142u8,
								222u8, 105u8, 173u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
	}
	pub mod vault {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Create {
				pub vault: runtime_types::composable_traits::vault::VaultConfig<
					::subxt::sp_core::crypto::AccountId32,
					runtime_types::primitives::currency::CurrencyId,
				>,
				pub deposit_amount: ::core::primitive::u128,
			}
			impl ::subxt::Call for Create {
				const PALLET: &'static str = "Vault";
				const FUNCTION: &'static str = "create";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ClaimSurcharge {
				pub dest: ::core::primitive::u64,
				pub address: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
			}
			impl ::subxt::Call for ClaimSurcharge {
				const PALLET: &'static str = "Vault";
				const FUNCTION: &'static str = "claim_surcharge";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AddSurcharge {
				pub dest: ::core::primitive::u64,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Call for AddSurcharge {
				const PALLET: &'static str = "Vault";
				const FUNCTION: &'static str = "add_surcharge";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct DeleteTombstoned {
				pub dest: ::core::primitive::u64,
				pub address: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
			}
			impl ::subxt::Call for DeleteTombstoned {
				const PALLET: &'static str = "Vault";
				const FUNCTION: &'static str = "delete_tombstoned";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Deposit {
				pub vault: ::core::primitive::u64,
				pub asset_amount: ::core::primitive::u128,
			}
			impl ::subxt::Call for Deposit {
				const PALLET: &'static str = "Vault";
				const FUNCTION: &'static str = "deposit";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Withdraw {
				pub vault: ::core::primitive::u64,
				pub lp_amount: ::core::primitive::u128,
			}
			impl ::subxt::Call for Withdraw {
				const PALLET: &'static str = "Vault";
				const FUNCTION: &'static str = "withdraw";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct EmergencyShutdown {
				pub vault: ::core::primitive::u64,
			}
			impl ::subxt::Call for EmergencyShutdown {
				const PALLET: &'static str = "Vault";
				const FUNCTION: &'static str = "emergency_shutdown";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct Start {
				pub vault: ::core::primitive::u64,
			}
			impl ::subxt::Call for Start {
				const PALLET: &'static str = "Vault";
				const FUNCTION: &'static str = "start";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct LiquidateStrategy {
				pub vault_idx: ::core::primitive::u64,
				pub strategy_account_id: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Call for LiquidateStrategy {
				const PALLET: &'static str = "Vault";
				const FUNCTION: &'static str = "liquidate_strategy";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Creates a new vault, locking up the deposit. If the deposit is greater than the"]
				#[doc = "`ExistentialDeposit` + `CreationDeposit`, the vault will remain alive forever, else it"]
				#[doc = "can be `tombstoned` after `deposit / RentPerBlock `. Accounts may deposit more funds to"]
				#[doc = "keep the vault alive."]
				#[doc = ""]
				#[doc = "# Emits"]
				#[doc = " - [`Event::VaultCreated`](Event::VaultCreated)"]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When the origin is not signed."]
				#[doc = " - When `deposit < CreationDeposit`."]
				#[doc = " - Origin has insufficient funds to lock the deposit."]
				pub fn create(
					&self,
					vault: runtime_types::composable_traits::vault::VaultConfig<
						::subxt::sp_core::crypto::AccountId32,
						runtime_types::primitives::currency::CurrencyId,
					>,
					deposit_amount: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Create, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Create>()?
					};
					if runtime_call_hash ==
						[
							187u8, 221u8, 148u8, 52u8, 31u8, 87u8, 61u8, 221u8, 126u8, 107u8,
							246u8, 79u8, 245u8, 170u8, 176u8, 26u8, 180u8, 172u8, 158u8, 186u8,
							200u8, 220u8, 108u8, 7u8, 184u8, 123u8, 146u8, 121u8, 129u8, 166u8,
							213u8, 48u8,
						] {
						let call = Create { vault, deposit_amount };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Substracts rent from a vault, rewarding the caller if successful with a small fee and"]
				#[doc = "possibly tombstoning the vault."]
				#[doc = ""]
				#[doc = "A tombstoned vault still allows for withdrawals but blocks deposits, and requests all"]
				#[doc = "strategies to return their funds."]
				pub fn claim_surcharge(
					&self,
					dest: ::core::primitive::u64,
					address: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ClaimSurcharge,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ClaimSurcharge>()?
					};
					if runtime_call_hash ==
						[
							192u8, 161u8, 51u8, 11u8, 57u8, 169u8, 244u8, 132u8, 147u8, 186u8,
							176u8, 24u8, 178u8, 103u8, 3u8, 14u8, 224u8, 240u8, 160u8, 179u8,
							243u8, 145u8, 132u8, 191u8, 131u8, 27u8, 15u8, 221u8, 28u8, 170u8,
							170u8, 185u8,
						] {
						let call = ClaimSurcharge { dest, address };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn add_surcharge(
					&self,
					dest: ::core::primitive::u64,
					amount: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						AddSurcharge,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<AddSurcharge>()?
					};
					if runtime_call_hash ==
						[
							106u8, 145u8, 229u8, 210u8, 68u8, 241u8, 103u8, 208u8, 48u8, 247u8,
							77u8, 22u8, 20u8, 137u8, 171u8, 127u8, 144u8, 104u8, 193u8, 176u8,
							36u8, 111u8, 184u8, 173u8, 120u8, 35u8, 179u8, 220u8, 33u8, 178u8,
							77u8, 214u8,
						] {
						let call = AddSurcharge { dest, amount };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn delete_tombstoned(
					&self,
					dest: ::core::primitive::u64,
					address: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						DeleteTombstoned,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<DeleteTombstoned>()?
					};
					if runtime_call_hash ==
						[
							26u8, 42u8, 146u8, 165u8, 30u8, 32u8, 219u8, 35u8, 234u8, 213u8, 124u8,
							76u8, 85u8, 182u8, 145u8, 251u8, 109u8, 60u8, 105u8, 92u8, 115u8,
							197u8, 233u8, 232u8, 52u8, 105u8, 136u8, 211u8, 125u8, 133u8, 244u8,
							214u8,
						] {
						let call = DeleteTombstoned { dest, address };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Deposit funds in the vault and receive LP tokens in return."]
				#[doc = "# Emits"]
				#[doc = " - Event::Deposited"]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When the origin is not signed."]
				#[doc = " - When `deposit < MinimumDeposit`."]
				pub fn deposit(
					&self,
					vault: ::core::primitive::u64,
					asset_amount: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Deposit,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Deposit>()?
					};
					if runtime_call_hash ==
						[
							212u8, 50u8, 228u8, 177u8, 197u8, 225u8, 69u8, 32u8, 151u8, 209u8,
							14u8, 222u8, 59u8, 222u8, 223u8, 219u8, 82u8, 58u8, 89u8, 106u8, 135u8,
							255u8, 163u8, 152u8, 194u8, 241u8, 229u8, 138u8, 203u8, 162u8, 137u8,
							190u8,
						] {
						let call = Deposit { vault, asset_amount };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Withdraw funds"]
				#[doc = ""]
				#[doc = "# Emits"]
				#[doc = " - Event::Withdrawn"]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When the origin is not signed."]
				#[doc = " - When `lp_amount < MinimumWithdrawal`."]
				#[doc = " - When the vault has insufficient amounts reserved."]
				pub fn withdraw(
					&self,
					vault: ::core::primitive::u64,
					lp_amount: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Withdraw,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Withdraw>()?
					};
					if runtime_call_hash ==
						[
							184u8, 87u8, 199u8, 251u8, 93u8, 111u8, 16u8, 64u8, 194u8, 198u8,
							140u8, 71u8, 39u8, 244u8, 26u8, 247u8, 0u8, 66u8, 12u8, 9u8, 248u8,
							107u8, 106u8, 151u8, 225u8, 24u8, 152u8, 202u8, 8u8, 183u8, 51u8, 23u8,
						] {
						let call = Withdraw { vault, lp_amount };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Stops a vault. To be used in case of severe protocol flaws."]
				#[doc = ""]
				#[doc = "# Emits"]
				#[doc = " - Event::EmergencyShutdown"]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When the origin is not root."]
				#[doc = " - When `vault` does not exist."]
				pub fn emergency_shutdown(
					&self,
					vault: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						EmergencyShutdown,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<EmergencyShutdown>()?
					};
					if runtime_call_hash ==
						[
							168u8, 222u8, 184u8, 119u8, 234u8, 108u8, 47u8, 76u8, 175u8, 39u8,
							90u8, 180u8, 191u8, 7u8, 197u8, 105u8, 58u8, 195u8, 69u8, 230u8, 134u8,
							23u8, 94u8, 200u8, 64u8, 9u8, 124u8, 175u8, 63u8, 49u8, 52u8, 61u8,
						] {
						let call = EmergencyShutdown { vault };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "(Re)starts a vault after emergency shutdown."]
				#[doc = ""]
				#[doc = "# Emits"]
				#[doc = " - Event::VaultStarted"]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When the origin is not root."]
				#[doc = " - When `vault` does not exist."]
				pub fn start(
					&self,
					vault: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Start, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Start>()?
					};
					if runtime_call_hash ==
						[
							193u8, 35u8, 102u8, 149u8, 39u8, 233u8, 88u8, 7u8, 45u8, 242u8, 123u8,
							46u8, 241u8, 252u8, 197u8, 213u8, 47u8, 174u8, 24u8, 79u8, 17u8, 55u8,
							123u8, 40u8, 143u8, 168u8, 149u8, 12u8, 29u8, 63u8, 217u8, 31u8,
						] {
						let call = Start { vault };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Turns an existent strategy account `strategy_account` of a vault determined by"]
				#[doc = "`vault_idx` into a liquidation state where withdrawn funds should be returned as soon"]
				#[doc = "as possible."]
				#[doc = ""]
				#[doc = "Only the vault's manager will be able to call this method."]
				#[doc = ""]
				#[doc = "# Emits"]
				#[doc = " - Event::LiquidateStrategy"]
				pub fn liquidate_strategy(
					&self,
					vault_idx: ::core::primitive::u64,
					strategy_account_id: ::subxt::sp_core::crypto::AccountId32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						LiquidateStrategy,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<LiquidateStrategy>()?
					};
					if runtime_call_hash ==
						[
							185u8, 65u8, 154u8, 21u8, 52u8, 100u8, 56u8, 131u8, 247u8, 243u8,
							118u8, 53u8, 155u8, 90u8, 68u8, 213u8, 184u8, 23u8, 184u8, 105u8,
							121u8, 44u8, 48u8, 77u8, 222u8, 245u8, 168u8, 162u8, 166u8, 134u8, 6u8,
							135u8,
						] {
						let call = LiquidateStrategy { vault_idx, strategy_account_id };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_vault::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "Emitted after a vault has been successfully created."]
			pub struct VaultCreated {
				pub id: ::core::primitive::u64,
			}
			impl ::subxt::Event for VaultCreated {
				const PALLET: &'static str = "Vault";
				const EVENT: &'static str = "VaultCreated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Emitted after a user deposits funds into the vault."]
			pub struct Deposited {
				pub account: ::subxt::sp_core::crypto::AccountId32,
				pub asset_amount: ::core::primitive::u128,
				pub lp_amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for Deposited {
				const PALLET: &'static str = "Vault";
				const EVENT: &'static str = "Deposited";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct LiquidateStrategy {
				pub account: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for LiquidateStrategy {
				const PALLET: &'static str = "Vault";
				const EVENT: &'static str = "LiquidateStrategy";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Emitted after a user exchanges LP tokens back for underlying assets"]
			pub struct Withdrawn {
				pub account: ::subxt::sp_core::crypto::AccountId32,
				pub lp_amount: ::core::primitive::u128,
				pub asset_amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for Withdrawn {
				const PALLET: &'static str = "Vault";
				const EVENT: &'static str = "Withdrawn";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "Emitted after a succesful emergency shutdown."]
			pub struct EmergencyShutdown {
				pub vault: ::core::primitive::u64,
			}
			impl ::subxt::Event for EmergencyShutdown {
				const PALLET: &'static str = "Vault";
				const EVENT: &'static str = "EmergencyShutdown";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "Emitted after a vault is restarted."]
			pub struct VaultStarted {
				pub vault: ::core::primitive::u64,
			}
			impl ::subxt::Event for VaultStarted {
				const PALLET: &'static str = "Vault";
				const EVENT: &'static str = "VaultStarted";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct VaultCount;
			impl ::subxt::StorageEntry for VaultCount {
				const PALLET: &'static str = "Vault";
				const STORAGE: &'static str = "VaultCount";
				type Value = ::core::primitive::u64;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Vaults<'a>(pub &'a ::core::primitive::u64);
			impl ::subxt::StorageEntry for Vaults<'_> {
				const PALLET: &'static str = "Vault";
				const STORAGE: &'static str = "Vaults";
				type Value = runtime_types::pallet_vault::models::VaultInfo<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u128,
					runtime_types::primitives::currency::CurrencyId,
					::core::primitive::u32,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct LpTokensToVaults<'a>(
				pub &'a runtime_types::primitives::currency::CurrencyId,
			);
			impl ::subxt::StorageEntry for LpTokensToVaults<'_> {
				const PALLET: &'static str = "Vault";
				const STORAGE: &'static str = "LpTokensToVaults";
				type Value = ::core::primitive::u64;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct CapitalStructure<'a>(
				pub &'a ::core::primitive::u64,
				pub &'a ::subxt::sp_core::crypto::AccountId32,
			);
			impl ::subxt::StorageEntry for CapitalStructure<'_> {
				const PALLET: &'static str = "Vault";
				const STORAGE: &'static str = "CapitalStructure";
				type Value =
					runtime_types::pallet_vault::models::StrategyOverview<::core::primitive::u128>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The number of vaults, also used to generate the next vault identifier."]
				#[doc = ""]
				#[doc = " # Note"]
				#[doc = ""]
				#[doc = " Cleaned up vaults do not decrement the counter."]
				pub fn vault_count(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<VaultCount>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								136u8, 131u8, 155u8, 183u8, 229u8, 122u8, 109u8, 220u8, 197u8,
								100u8, 180u8, 166u8, 110u8, 47u8, 86u8, 165u8, 37u8, 191u8, 132u8,
								224u8, 147u8, 13u8, 99u8, 63u8, 71u8, 238u8, 7u8, 34u8, 56u8, 43u8,
								19u8, 212u8,
							] {
							let entry = VaultCount;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Info for each specific vaults."]
				pub fn vaults(
					&self,
					_0: &'a ::core::primitive::u64,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_vault::models::VaultInfo<
								::subxt::sp_core::crypto::AccountId32,
								::core::primitive::u128,
								runtime_types::primitives::currency::CurrencyId,
								::core::primitive::u32,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Vaults>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								207u8, 117u8, 88u8, 6u8, 114u8, 201u8, 84u8, 238u8, 47u8, 199u8,
								8u8, 5u8, 12u8, 44u8, 60u8, 88u8, 7u8, 207u8, 203u8, 168u8, 237u8,
								71u8, 71u8, 85u8, 108u8, 240u8, 103u8, 30u8, 102u8, 162u8, 145u8,
								136u8,
							] {
							let entry = Vaults(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Info for each specific vaults."]
				pub fn vaults_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Vaults<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Vaults>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								207u8, 117u8, 88u8, 6u8, 114u8, 201u8, 84u8, 238u8, 47u8, 199u8,
								8u8, 5u8, 12u8, 44u8, 60u8, 88u8, 7u8, 207u8, 203u8, 168u8, 237u8,
								71u8, 71u8, 85u8, 108u8, 240u8, 103u8, 30u8, 102u8, 162u8, 145u8,
								136u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Associated LP token for each vault."]
				pub fn lp_tokens_to_vaults(
					&self,
					_0: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::core::primitive::u64>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<LpTokensToVaults>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								123u8, 35u8, 247u8, 207u8, 165u8, 166u8, 64u8, 89u8, 217u8, 17u8,
								7u8, 39u8, 11u8, 145u8, 241u8, 71u8, 252u8, 130u8, 65u8, 20u8,
								112u8, 115u8, 51u8, 22u8, 41u8, 230u8, 160u8, 244u8, 130u8, 100u8,
								150u8, 242u8,
							] {
							let entry = LpTokensToVaults(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Associated LP token for each vault."]
				pub fn lp_tokens_to_vaults_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, LpTokensToVaults<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<LpTokensToVaults>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								123u8, 35u8, 247u8, 207u8, 165u8, 166u8, 64u8, 89u8, 217u8, 17u8,
								7u8, 39u8, 11u8, 145u8, 241u8, 71u8, 252u8, 130u8, 65u8, 20u8,
								112u8, 115u8, 51u8, 22u8, 41u8, 230u8, 160u8, 244u8, 130u8, 100u8,
								150u8, 242u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Overview of the allocation & balances at each strategy. Does not contain the balance held by"]
				#[doc = " the vault itself."]
				pub fn capital_structure(
					&self,
					_0: &'a ::core::primitive::u64,
					_1: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::pallet_vault::models::StrategyOverview<
							::core::primitive::u128,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<CapitalStructure>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								182u8, 77u8, 141u8, 36u8, 76u8, 143u8, 160u8, 102u8, 123u8, 117u8,
								85u8, 23u8, 46u8, 168u8, 162u8, 100u8, 219u8, 54u8, 195u8, 20u8,
								159u8, 4u8, 203u8, 168u8, 20u8, 183u8, 8u8, 95u8, 185u8, 74u8,
								122u8, 209u8,
							] {
							let entry = CapitalStructure(_0, _1);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Overview of the allocation & balances at each strategy. Does not contain the balance held by"]
				#[doc = " the vault itself."]
				pub fn capital_structure_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, CapitalStructure<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<CapitalStructure>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								182u8, 77u8, 141u8, 36u8, 76u8, 143u8, 160u8, 102u8, 123u8, 117u8,
								85u8, 23u8, 46u8, 168u8, 162u8, 100u8, 219u8, 54u8, 195u8, 20u8,
								159u8, 4u8, 203u8, 168u8, 20u8, 183u8, 8u8, 95u8, 185u8, 74u8,
								122u8, 209u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The minimum amount needed to deposit in a vault and receive LP tokens."]
				pub fn minimum_deposit(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Vault", "MinimumDeposit")? ==
						[
							10u8, 26u8, 182u8, 87u8, 115u8, 131u8, 161u8, 236u8, 183u8, 75u8,
							168u8, 226u8, 243u8, 237u8, 193u8, 208u8, 162u8, 251u8, 181u8, 26u8,
							12u8, 28u8, 2u8, 182u8, 100u8, 104u8, 178u8, 146u8, 191u8, 50u8, 12u8,
							86u8,
						] {
						let pallet = metadata.pallet("Vault")?;
						let constant = pallet.constant("MinimumDeposit")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The minimum amount of LP tokens to withdraw funds from a vault."]
				pub fn minimum_withdrawal(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Vault", "MinimumWithdrawal")? ==
						[
							223u8, 215u8, 150u8, 249u8, 236u8, 87u8, 45u8, 168u8, 84u8, 129u8,
							190u8, 181u8, 140u8, 76u8, 61u8, 73u8, 128u8, 214u8, 217u8, 138u8,
							240u8, 114u8, 245u8, 32u8, 3u8, 2u8, 229u8, 32u8, 79u8, 27u8, 233u8,
							4u8,
						] {
						let pallet = metadata.pallet("Vault")?;
						let constant = pallet.constant("MinimumWithdrawal")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The minimum native asset needed to create a vault."]
				pub fn creation_deposit(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Vault", "CreationDeposit")? ==
						[
							102u8, 223u8, 220u8, 89u8, 173u8, 165u8, 177u8, 46u8, 254u8, 122u8,
							122u8, 122u8, 50u8, 233u8, 3u8, 80u8, 82u8, 97u8, 219u8, 43u8, 149u8,
							168u8, 160u8, 245u8, 37u8, 45u8, 0u8, 28u8, 102u8, 132u8, 147u8, 70u8,
						] {
						let pallet = metadata.pallet("Vault")?;
						let constant = pallet.constant("CreationDeposit")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The deposit needed for a vault to never be cleaned up. Should be significantly higher"]
				#[doc = " than the rent."]
				pub fn existential_deposit(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Vault", "ExistentialDeposit")? ==
						[
							138u8, 10u8, 158u8, 213u8, 183u8, 26u8, 221u8, 163u8, 62u8, 37u8, 31u8,
							209u8, 24u8, 109u8, 138u8, 9u8, 3u8, 217u8, 66u8, 178u8, 241u8, 186u8,
							105u8, 24u8, 94u8, 65u8, 84u8, 85u8, 194u8, 192u8, 211u8, 135u8,
						] {
						let pallet = metadata.pallet("Vault")?;
						let constant = pallet.constant("ExistentialDeposit")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The duration that a vault may remain tombstoned before it can be deleted."]
				pub fn tombstone_duration(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Vault", "TombstoneDuration")? ==
						[
							15u8, 90u8, 168u8, 123u8, 80u8, 233u8, 146u8, 240u8, 58u8, 128u8, 87u8,
							46u8, 158u8, 25u8, 240u8, 216u8, 133u8, 140u8, 2u8, 221u8, 243u8, 83u8,
							60u8, 28u8, 19u8, 211u8, 42u8, 116u8, 186u8, 68u8, 83u8, 129u8,
						] {
						let pallet = metadata.pallet("Vault")?;
						let constant = pallet.constant("TombstoneDuration")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The rent being charged per block for vaults which have not committed the"]
				#[doc = " `ExistentialDeposit`."]
				pub fn rent_per_block(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Vault", "RentPerBlock")? ==
						[
							7u8, 248u8, 136u8, 119u8, 90u8, 251u8, 20u8, 160u8, 130u8, 88u8, 77u8,
							191u8, 244u8, 69u8, 179u8, 30u8, 39u8, 0u8, 209u8, 31u8, 0u8, 231u8,
							86u8, 223u8, 74u8, 63u8, 33u8, 12u8, 81u8, 253u8, 165u8, 159u8,
						] {
						let pallet = metadata.pallet("Vault")?;
						let constant = pallet.constant("RentPerBlock")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The id used as the `AccountId` of the vault. This should be unique across all pallets to"]
				#[doc = " avoid name collisions with other pallets and vaults."]
				pub fn pallet_id(
					&self,
				) -> ::core::result::Result<
					runtime_types::frame_support::PalletId,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Vault", "PalletId")? ==
						[
							20u8, 179u8, 51u8, 183u8, 44u8, 183u8, 17u8, 122u8, 233u8, 138u8,
							169u8, 218u8, 147u8, 65u8, 195u8, 139u8, 219u8, 224u8, 163u8, 122u8,
							225u8, 3u8, 114u8, 164u8, 78u8, 57u8, 109u8, 225u8, 143u8, 94u8, 133u8,
							68u8,
						] {
						let pallet = metadata.pallet("Vault")?;
						let constant = pallet.constant("PalletId")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod assets_registry {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RegisterAsset {
				pub location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
				pub ed: ::core::primitive::u128,
				pub ratio:
					::core::option::Option<runtime_types::sp_arithmetic::fixed_point::FixedU128>,
				pub decimals: ::core::option::Option<::core::primitive::u32>,
			}
			impl ::subxt::Call for RegisterAsset {
				const PALLET: &'static str = "AssetsRegistry";
				const FUNCTION: &'static str = "register_asset";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct UpdateAsset {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
				pub ratio:
					::core::option::Option<runtime_types::sp_arithmetic::fixed_point::FixedU128>,
				pub decimals: ::core::option::Option<::core::primitive::u32>,
			}
			impl ::subxt::Call for UpdateAsset {
				const PALLET: &'static str = "AssetsRegistry";
				const FUNCTION: &'static str = "update_asset";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetMinFee {
				pub target_parachain_id: runtime_types::polkadot_parachain::primitives::Id,
				pub foreign_asset_id:
					runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
				pub amount: ::core::option::Option<::core::primitive::u128>,
			}
			impl ::subxt::Call for SetMinFee {
				const PALLET: &'static str = "AssetsRegistry";
				const FUNCTION: &'static str = "set_min_fee";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "creates asset using `CurrencyFactory`,"]
				#[doc = "raises `AssetRegistered` event"]
				pub fn register_asset(
					&self,
					location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
					ed: ::core::primitive::u128,
					ratio: ::core::option::Option<
						runtime_types::sp_arithmetic::fixed_point::FixedU128,
					>,
					decimals: ::core::option::Option<::core::primitive::u32>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RegisterAsset,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RegisterAsset>()?
					};
					if runtime_call_hash ==
						[
							191u8, 69u8, 37u8, 79u8, 192u8, 7u8, 254u8, 188u8, 206u8, 117u8, 84u8,
							183u8, 74u8, 251u8, 102u8, 1u8, 108u8, 26u8, 214u8, 216u8, 195u8, 57u8,
							220u8, 111u8, 159u8, 212u8, 136u8, 69u8, 17u8, 165u8, 36u8, 37u8,
						] {
						let call = RegisterAsset { location, ed, ratio, decimals };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Given well existing asset, update its remote information."]
				#[doc = "Use with caution as it allow reroute assets location."]
				pub fn update_asset(
					&self,
					asset_id: runtime_types::primitives::currency::CurrencyId,
					location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
					ratio: ::core::option::Option<
						runtime_types::sp_arithmetic::fixed_point::FixedU128,
					>,
					decimals: ::core::option::Option<::core::primitive::u32>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						UpdateAsset,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<UpdateAsset>()?
					};
					if runtime_call_hash ==
						[
							216u8, 66u8, 236u8, 13u8, 151u8, 56u8, 129u8, 122u8, 173u8, 201u8,
							148u8, 184u8, 234u8, 231u8, 133u8, 163u8, 245u8, 31u8, 69u8, 149u8,
							203u8, 72u8, 151u8, 13u8, 201u8, 157u8, 101u8, 193u8, 52u8, 136u8,
							61u8, 54u8,
						] {
						let call = UpdateAsset { asset_id, location, ratio, decimals };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Minimal amount of asset_id required to send message to other network."]
				#[doc = "Target network may or may not accept payment."]
				#[doc = "Assumed this is maintained up to date by technical team."]
				#[doc = "Mostly UI hint and fail fast solution."]
				#[doc = "In theory can be updated by parachain sovereign account too."]
				#[doc = "If None, than it is well known cannot pay with that asset on target_parachain_id."]
				#[doc = "If Some(0), than price can be anything greater or equal to zero."]
				#[doc = "If Some(MAX), than actually it forbids transfers."]
				pub fn set_min_fee(
					&self,
					target_parachain_id: runtime_types::polkadot_parachain::primitives::Id,
					foreign_asset_id : runtime_types :: composable_traits :: xcm :: assets :: XcmAssetLocation,
					amount: ::core::option::Option<::core::primitive::u128>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetMinFee,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetMinFee>()?
					};
					if runtime_call_hash ==
						[
							9u8, 155u8, 171u8, 157u8, 59u8, 105u8, 200u8, 137u8, 173u8, 87u8,
							227u8, 196u8, 187u8, 182u8, 18u8, 38u8, 196u8, 133u8, 199u8, 11u8,
							82u8, 29u8, 118u8, 191u8, 108u8, 1u8, 206u8, 240u8, 54u8, 208u8, 220u8,
							7u8,
						] {
						let call = SetMinFee { target_parachain_id, foreign_asset_id, amount };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_assets_registry::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AssetRegistered {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
			}
			impl ::subxt::Event for AssetRegistered {
				const PALLET: &'static str = "AssetsRegistry";
				const EVENT: &'static str = "AssetRegistered";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AssetUpdated {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
			}
			impl ::subxt::Event for AssetUpdated {
				const PALLET: &'static str = "AssetsRegistry";
				const EVENT: &'static str = "AssetUpdated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct MinFeeUpdated {
				pub target_parachain_id: runtime_types::polkadot_parachain::primitives::Id,
				pub foreign_asset_id:
					runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
				pub amount: ::core::option::Option<::core::primitive::u128>,
			}
			impl ::subxt::Event for MinFeeUpdated {
				const PALLET: &'static str = "AssetsRegistry";
				const EVENT: &'static str = "MinFeeUpdated";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct LocalToForeign<'a>(pub &'a runtime_types::primitives::currency::CurrencyId);
			impl ::subxt::StorageEntry for LocalToForeign<'_> {
				const PALLET: &'static str = "AssetsRegistry";
				const STORAGE: &'static str = "LocalToForeign";
				type Value = runtime_types::composable_traits::xcm::assets::ForeignMetadata<
					runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox128,
					)])
				}
			}
			pub struct ForeignToLocal<'a>(
				pub &'a runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
			);
			impl ::subxt::StorageEntry for ForeignToLocal<'_> {
				const PALLET: &'static str = "AssetsRegistry";
				const STORAGE: &'static str = "ForeignToLocal";
				type Value = runtime_types::primitives::currency::CurrencyId;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct MinFeeAmounts<'a>(
				pub &'a runtime_types::polkadot_parachain::primitives::Id,
				pub &'a runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
			);
			impl ::subxt::StorageEntry for MinFeeAmounts<'_> {
				const PALLET: &'static str = "AssetsRegistry";
				const STORAGE: &'static str = "MinFeeAmounts";
				type Value = ::core::primitive::u128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct AssetRatio<'a>(pub &'a runtime_types::primitives::currency::CurrencyId);
			impl ::subxt::StorageEntry for AssetRatio<'_> {
				const PALLET: &'static str = "AssetsRegistry";
				const STORAGE: &'static str = "AssetRatio";
				type Value = runtime_types::sp_arithmetic::fixed_point::FixedU128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox128,
					)])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " Mapping local asset to foreign asset."]
				pub fn local_to_foreign(
					&self,
					_0: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::composable_traits::xcm::assets::ForeignMetadata<
								runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<LocalToForeign>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								55u8, 238u8, 224u8, 176u8, 236u8, 87u8, 72u8, 135u8, 20u8, 130u8,
								13u8, 31u8, 89u8, 184u8, 61u8, 2u8, 129u8, 26u8, 63u8, 220u8, 34u8,
								145u8, 199u8, 53u8, 201u8, 178u8, 30u8, 129u8, 132u8, 193u8, 174u8,
								212u8,
							] {
							let entry = LocalToForeign(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Mapping local asset to foreign asset."]
				pub fn local_to_foreign_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, LocalToForeign<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<LocalToForeign>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								55u8, 238u8, 224u8, 176u8, 236u8, 87u8, 72u8, 135u8, 20u8, 130u8,
								13u8, 31u8, 89u8, 184u8, 61u8, 2u8, 129u8, 26u8, 63u8, 220u8, 34u8,
								145u8, 199u8, 53u8, 201u8, 178u8, 30u8, 129u8, 132u8, 193u8, 174u8,
								212u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Mapping foreign asset to local asset."]
				pub fn foreign_to_local(
					&self,
					_0: &'a runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ForeignToLocal>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								168u8, 11u8, 232u8, 160u8, 34u8, 185u8, 250u8, 243u8, 91u8, 87u8,
								11u8, 187u8, 228u8, 149u8, 83u8, 227u8, 172u8, 37u8, 24u8, 32u8,
								181u8, 28u8, 14u8, 131u8, 111u8, 183u8, 165u8, 200u8, 172u8, 167u8,
								76u8, 188u8,
							] {
							let entry = ForeignToLocal(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Mapping foreign asset to local asset."]
				pub fn foreign_to_local_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, ForeignToLocal<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ForeignToLocal>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								168u8, 11u8, 232u8, 160u8, 34u8, 185u8, 250u8, 243u8, 91u8, 87u8,
								11u8, 187u8, 228u8, 149u8, 83u8, 227u8, 172u8, 37u8, 24u8, 32u8,
								181u8, 28u8, 14u8, 131u8, 111u8, 183u8, 165u8, 200u8, 172u8, 167u8,
								76u8, 188u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn min_fee_amounts(
					&self,
					_0: &'a runtime_types::polkadot_parachain::primitives::Id,
					_1: &'a runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::core::primitive::u128>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<MinFeeAmounts>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								173u8, 40u8, 6u8, 0u8, 234u8, 232u8, 191u8, 231u8, 7u8, 34u8,
								182u8, 8u8, 23u8, 27u8, 98u8, 186u8, 215u8, 116u8, 158u8, 177u8,
								202u8, 88u8, 45u8, 58u8, 197u8, 133u8, 245u8, 193u8, 137u8, 131u8,
								161u8, 98u8,
							] {
							let entry = MinFeeAmounts(_0, _1);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn min_fee_amounts_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, MinFeeAmounts<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<MinFeeAmounts>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								173u8, 40u8, 6u8, 0u8, 234u8, 232u8, 191u8, 231u8, 7u8, 34u8,
								182u8, 8u8, 23u8, 27u8, 98u8, 186u8, 215u8, 116u8, 158u8, 177u8,
								202u8, 88u8, 45u8, 58u8, 197u8, 133u8, 245u8, 193u8, 137u8, 131u8,
								161u8, 98u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " How much of asset amount is needed to pay for one unit of native token."]
				pub fn asset_ratio(
					&self,
					_0: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::sp_arithmetic::fixed_point::FixedU128,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AssetRatio>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								176u8, 39u8, 15u8, 109u8, 121u8, 30u8, 87u8, 4u8, 50u8, 46u8,
								247u8, 214u8, 76u8, 76u8, 143u8, 153u8, 241u8, 227u8, 116u8, 157u8,
								123u8, 78u8, 230u8, 122u8, 187u8, 157u8, 177u8, 84u8, 184u8, 101u8,
								160u8, 41u8,
							] {
							let entry = AssetRatio(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " How much of asset amount is needed to pay for one unit of native token."]
				pub fn asset_ratio_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, AssetRatio<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AssetRatio>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								176u8, 39u8, 15u8, 109u8, 121u8, 30u8, 87u8, 4u8, 50u8, 46u8,
								247u8, 214u8, 76u8, 76u8, 143u8, 153u8, 241u8, 227u8, 116u8, 157u8,
								123u8, 78u8, 230u8, 122u8, 187u8, 157u8, 177u8, 84u8, 184u8, 101u8,
								160u8, 41u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
	}
	pub mod governance_registry {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Set {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub value: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Call for Set {
				const PALLET: &'static str = "GovernanceRegistry";
				const FUNCTION: &'static str = "set";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct GrantRoot {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
			}
			impl ::subxt::Call for GrantRoot {
				const PALLET: &'static str = "GovernanceRegistry";
				const FUNCTION: &'static str = "grant_root";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Remove {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
			}
			impl ::subxt::Call for Remove {
				const PALLET: &'static str = "GovernanceRegistry";
				const FUNCTION: &'static str = "remove";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Sets the value of an `asset_id` to the signed account id. Only callable by root."]
				pub fn set(
					&self,
					asset_id: runtime_types::primitives::currency::CurrencyId,
					value: ::subxt::sp_core::crypto::AccountId32,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Set, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Set>()?
					};
					if runtime_call_hash ==
						[
							185u8, 88u8, 143u8, 119u8, 43u8, 54u8, 21u8, 123u8, 91u8, 212u8, 125u8,
							171u8, 114u8, 107u8, 42u8, 246u8, 171u8, 86u8, 84u8, 225u8, 209u8,
							10u8, 77u8, 49u8, 78u8, 199u8, 69u8, 71u8, 85u8, 171u8, 81u8, 171u8,
						] {
						let call = Set { asset_id, value };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Sets the value of an `asset_id` to root. Only callable by root."]
				pub fn grant_root(
					&self,
					asset_id: runtime_types::primitives::currency::CurrencyId,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						GrantRoot,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<GrantRoot>()?
					};
					if runtime_call_hash ==
						[
							178u8, 240u8, 198u8, 51u8, 60u8, 105u8, 97u8, 51u8, 1u8, 10u8, 77u8,
							64u8, 193u8, 228u8, 205u8, 91u8, 11u8, 252u8, 236u8, 35u8, 31u8, 58u8,
							20u8, 145u8, 162u8, 11u8, 253u8, 53u8, 240u8, 54u8, 221u8, 107u8,
						] {
						let call = GrantRoot { asset_id };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Removes mapping of an `asset_id`. Only callable by root."]
				pub fn remove(
					&self,
					asset_id: runtime_types::primitives::currency::CurrencyId,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Remove, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Remove>()?
					};
					if runtime_call_hash ==
						[
							8u8, 236u8, 210u8, 71u8, 180u8, 189u8, 238u8, 163u8, 160u8, 206u8,
							147u8, 178u8, 235u8, 154u8, 237u8, 92u8, 56u8, 64u8, 140u8, 50u8,
							137u8, 158u8, 241u8, 130u8, 136u8, 168u8, 195u8, 46u8, 91u8, 97u8,
							101u8, 12u8,
						] {
						let call = Remove { asset_id };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_governance_registry::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Set {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub value: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Event for Set {
				const PALLET: &'static str = "GovernanceRegistry";
				const EVENT: &'static str = "Set";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct GrantRoot {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
			}
			impl ::subxt::Event for GrantRoot {
				const PALLET: &'static str = "GovernanceRegistry";
				const EVENT: &'static str = "GrantRoot";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Remove {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
			}
			impl ::subxt::Event for Remove {
				const PALLET: &'static str = "GovernanceRegistry";
				const EVENT: &'static str = "Remove";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct OriginsByAssetId<'a>(
				pub &'a runtime_types::primitives::currency::CurrencyId,
			);
			impl ::subxt::StorageEntry for OriginsByAssetId<'_> {
				const PALLET: &'static str = "GovernanceRegistry";
				const STORAGE: &'static str = "OriginsByAssetId";
				type Value = runtime_types::composable_traits::governance::SignedRawOrigin<
					::subxt::sp_core::crypto::AccountId32,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				pub fn origins_by_asset_id(
					&self,
					_0: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::composable_traits::governance::SignedRawOrigin<
								::subxt::sp_core::crypto::AccountId32,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<OriginsByAssetId>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								122u8, 72u8, 237u8, 38u8, 204u8, 68u8, 231u8, 11u8, 242u8, 68u8,
								47u8, 24u8, 170u8, 68u8, 49u8, 201u8, 238u8, 26u8, 167u8, 151u8,
								241u8, 11u8, 75u8, 59u8, 7u8, 243u8, 7u8, 140u8, 61u8, 191u8, 34u8,
								122u8,
							] {
							let entry = OriginsByAssetId(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn origins_by_asset_id_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, OriginsByAssetId<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<OriginsByAssetId>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								122u8, 72u8, 237u8, 38u8, 204u8, 68u8, 231u8, 11u8, 242u8, 68u8,
								47u8, 24u8, 170u8, 68u8, 49u8, 201u8, 238u8, 26u8, 167u8, 151u8,
								241u8, 11u8, 75u8, 59u8, 7u8, 243u8, 7u8, 140u8, 61u8, 191u8, 34u8,
								122u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
	}
	pub mod assets {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Transfer {
				pub asset: runtime_types::primitives::currency::CurrencyId,
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for Transfer {
				const PALLET: &'static str = "Assets";
				const FUNCTION: &'static str = "transfer";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct TransferNative {
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for TransferNative {
				const PALLET: &'static str = "Assets";
				const FUNCTION: &'static str = "transfer_native";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ForceTransfer {
				pub asset: runtime_types::primitives::currency::CurrencyId,
				pub source: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for ForceTransfer {
				const PALLET: &'static str = "Assets";
				const FUNCTION: &'static str = "force_transfer";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ForceTransferNative {
				pub source: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for ForceTransferNative {
				const PALLET: &'static str = "Assets";
				const FUNCTION: &'static str = "force_transfer_native";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct TransferAll {
				pub asset: runtime_types::primitives::currency::CurrencyId,
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for TransferAll {
				const PALLET: &'static str = "Assets";
				const FUNCTION: &'static str = "transfer_all";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct TransferAllNative {
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for TransferAllNative {
				const PALLET: &'static str = "Assets";
				const FUNCTION: &'static str = "transfer_all_native";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct MintInitialize {
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
			}
			impl ::subxt::Call for MintInitialize {
				const PALLET: &'static str = "Assets";
				const FUNCTION: &'static str = "mint_initialize";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct MintInitializeWithGovernance {
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
				pub governance_origin: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
			}
			impl ::subxt::Call for MintInitializeWithGovernance {
				const PALLET: &'static str = "Assets";
				const FUNCTION: &'static str = "mint_initialize_with_governance";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct MintInto {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Call for MintInto {
				const PALLET: &'static str = "Assets";
				const FUNCTION: &'static str = "mint_into";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct BurnFrom {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Call for BurnFrom {
				const PALLET: &'static str = "Assets";
				const FUNCTION: &'static str = "burn_from";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Transfer `amount` of `asset` from `origin` to `dest`."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not signed."]
				#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
				#[doc = "   cannot be respected."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub fn transfer(
					&self,
					asset: runtime_types::primitives::currency::CurrencyId,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					amount: ::core::primitive::u128,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Transfer,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Transfer>()?
					};
					if runtime_call_hash ==
						[
							226u8, 14u8, 41u8, 102u8, 90u8, 111u8, 217u8, 188u8, 145u8, 139u8,
							207u8, 216u8, 199u8, 72u8, 233u8, 93u8, 102u8, 33u8, 226u8, 102u8, 3u8,
							149u8, 252u8, 184u8, 129u8, 161u8, 169u8, 45u8, 8u8, 28u8, 124u8,
							217u8,
						] {
						let call = Transfer { asset, dest, amount, keep_alive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Transfer `amount` of the native asset from `origin` to `dest`. This is slightly"]
				#[doc = "cheaper to call, as it avoids an asset lookup."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not signed."]
				#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
				#[doc = "   cannot be respected."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub fn transfer_native(
					&self,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					value: ::core::primitive::u128,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						TransferNative,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<TransferNative>()?
					};
					if runtime_call_hash ==
						[
							1u8, 22u8, 158u8, 220u8, 183u8, 174u8, 125u8, 139u8, 34u8, 37u8, 106u8,
							115u8, 5u8, 21u8, 145u8, 159u8, 97u8, 57u8, 188u8, 243u8, 175u8, 24u8,
							173u8, 111u8, 76u8, 223u8, 160u8, 86u8, 103u8, 200u8, 84u8, 101u8,
						] {
						let call = TransferNative { dest, value, keep_alive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Transfer `amount` of the `asset` from `origin` to `dest`. This requires root."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not root."]
				#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
				#[doc = "   cannot be respected."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub fn force_transfer(
					&self,
					asset: runtime_types::primitives::currency::CurrencyId,
					source: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					value: ::core::primitive::u128,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ForceTransfer,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ForceTransfer>()?
					};
					if runtime_call_hash ==
						[
							91u8, 97u8, 104u8, 132u8, 91u8, 202u8, 251u8, 56u8, 138u8, 112u8,
							164u8, 16u8, 72u8, 76u8, 73u8, 153u8, 8u8, 137u8, 58u8, 18u8, 93u8,
							202u8, 230u8, 50u8, 39u8, 3u8, 52u8, 120u8, 28u8, 11u8, 191u8, 86u8,
						] {
						let call = ForceTransfer { asset, source, dest, value, keep_alive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Transfer `amount` of the the native asset from `origin` to `dest`. This requires root."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not root."]
				#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
				#[doc = "   cannot be respected."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub fn force_transfer_native(
					&self,
					source: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					value: ::core::primitive::u128,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ForceTransferNative,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ForceTransferNative>()?
					};
					if runtime_call_hash ==
						[
							114u8, 93u8, 85u8, 170u8, 118u8, 212u8, 88u8, 185u8, 222u8, 165u8,
							93u8, 5u8, 105u8, 92u8, 118u8, 132u8, 111u8, 158u8, 124u8, 220u8,
							220u8, 138u8, 153u8, 53u8, 11u8, 127u8, 139u8, 116u8, 60u8, 97u8,
							186u8, 238u8,
						] {
						let call = ForceTransferNative { source, dest, value, keep_alive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Transfer all free balance of the `asset` from `origin` to `dest`."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not signed."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub fn transfer_all(
					&self,
					asset: runtime_types::primitives::currency::CurrencyId,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						TransferAll,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<TransferAll>()?
					};
					if runtime_call_hash ==
						[
							166u8, 246u8, 8u8, 56u8, 7u8, 210u8, 52u8, 223u8, 136u8, 67u8, 6u8,
							156u8, 168u8, 215u8, 38u8, 196u8, 198u8, 6u8, 66u8, 78u8, 143u8, 243u8,
							135u8, 39u8, 213u8, 206u8, 99u8, 196u8, 158u8, 125u8, 45u8, 150u8,
						] {
						let call = TransferAll { asset, dest, keep_alive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Transfer all free balance of the native asset from `origin` to `dest`."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not signed."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub fn transfer_all_native(
					&self,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						TransferAllNative,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<TransferAllNative>()?
					};
					if runtime_call_hash ==
						[
							61u8, 58u8, 231u8, 228u8, 77u8, 67u8, 187u8, 120u8, 86u8, 34u8, 224u8,
							17u8, 168u8, 70u8, 198u8, 226u8, 153u8, 240u8, 6u8, 88u8, 177u8, 238u8,
							6u8, 24u8, 208u8, 18u8, 158u8, 230u8, 110u8, 243u8, 157u8, 109u8,
						] {
						let call = TransferAllNative { dest, keep_alive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Creates a new asset, minting `amount` of funds into the `dest` account. Intented to be"]
				#[doc = "used for creating wrapped assets, not associated with any project."]
				pub fn mint_initialize(
					&self,
					amount: ::core::primitive::u128,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						MintInitialize,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<MintInitialize>()?
					};
					if runtime_call_hash ==
						[
							248u8, 78u8, 169u8, 117u8, 167u8, 115u8, 19u8, 237u8, 204u8, 92u8,
							39u8, 151u8, 162u8, 192u8, 173u8, 194u8, 117u8, 6u8, 59u8, 82u8, 179u8,
							71u8, 236u8, 144u8, 50u8, 156u8, 152u8, 5u8, 142u8, 225u8, 74u8, 196u8,
						] {
						let call = MintInitialize { amount, dest };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Creates a new asset, minting `amount` of funds into the `dest` account. The `dest`"]
				#[doc = "account can use the democracy pallet to mint further assets, or if the governance_origin"]
				#[doc = "is set to an owned account, using signed transactions. In general the"]
				#[doc = "`governance_origin` should be generated from the pallet id."]
				pub fn mint_initialize_with_governance(
					&self,
					amount: ::core::primitive::u128,
					governance_origin: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						MintInitializeWithGovernance,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<MintInitializeWithGovernance>()?
					};
					if runtime_call_hash ==
						[
							227u8, 252u8, 54u8, 203u8, 176u8, 182u8, 51u8, 220u8, 94u8, 154u8,
							85u8, 84u8, 210u8, 54u8, 235u8, 55u8, 206u8, 95u8, 20u8, 194u8, 82u8,
							42u8, 141u8, 2u8, 52u8, 188u8, 102u8, 193u8, 136u8, 105u8, 122u8,
							210u8,
						] {
						let call = MintInitializeWithGovernance { amount, governance_origin, dest };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Mints `amount` of `asset_id` into the `dest` account."]
				pub fn mint_into(
					&self,
					asset_id: runtime_types::primitives::currency::CurrencyId,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					amount: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						MintInto,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<MintInto>()?
					};
					if runtime_call_hash ==
						[
							248u8, 199u8, 35u8, 101u8, 222u8, 20u8, 204u8, 211u8, 76u8, 146u8,
							36u8, 38u8, 95u8, 214u8, 206u8, 97u8, 178u8, 215u8, 145u8, 98u8, 69u8,
							185u8, 8u8, 198u8, 225u8, 97u8, 158u8, 224u8, 231u8, 17u8, 93u8, 71u8,
						] {
						let call = MintInto { asset_id, dest, amount };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Mints `amount` of `asset_id` into the `dest` account."]
				pub fn burn_from(
					&self,
					asset_id: runtime_types::primitives::currency::CurrencyId,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					amount: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						BurnFrom,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<BurnFrom>()?
					};
					if runtime_call_hash ==
						[
							71u8, 229u8, 204u8, 203u8, 62u8, 128u8, 95u8, 251u8, 109u8, 177u8,
							122u8, 14u8, 113u8, 170u8, 151u8, 131u8, 148u8, 169u8, 241u8, 3u8,
							89u8, 105u8, 243u8, 191u8, 37u8, 54u8, 81u8, 25u8, 17u8, 4u8, 251u8,
							20u8,
						] {
						let call = BurnFrom { asset_id, dest, amount };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				pub fn native_asset_id(
					&self,
				) -> ::core::result::Result<
					runtime_types::primitives::currency::CurrencyId,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Assets", "NativeAssetId")? ==
						[
							5u8, 229u8, 128u8, 77u8, 111u8, 113u8, 81u8, 70u8, 233u8, 240u8, 41u8,
							19u8, 81u8, 158u8, 189u8, 220u8, 93u8, 107u8, 47u8, 136u8, 7u8, 115u8,
							229u8, 164u8, 195u8, 41u8, 146u8, 210u8, 138u8, 98u8, 216u8, 161u8,
						] {
						let pallet = metadata.pallet("Assets")?;
						let constant = pallet.constant("NativeAssetId")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod crowdloan_rewards {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Initialize;
			impl ::subxt::Call for Initialize {
				const PALLET: &'static str = "CrowdloanRewards";
				const FUNCTION: &'static str = "initialize";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct InitializeAt {
				pub at: ::core::primitive::u64,
			}
			impl ::subxt::Call for InitializeAt {
				const PALLET: &'static str = "CrowdloanRewards";
				const FUNCTION: &'static str = "initialize_at";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Populate {
				pub rewards: ::std::vec::Vec<(
					runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
						::subxt::sp_core::crypto::AccountId32,
					>,
					::core::primitive::u128,
					::core::primitive::u64,
				)>,
			}
			impl ::subxt::Call for Populate {
				const PALLET: &'static str = "CrowdloanRewards";
				const FUNCTION: &'static str = "populate";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Associate {
				pub reward_account: ::subxt::sp_core::crypto::AccountId32,
				pub proof: runtime_types::pallet_crowdloan_rewards::models::Proof<
					::subxt::sp_core::crypto::AccountId32,
				>,
			}
			impl ::subxt::Call for Associate {
				const PALLET: &'static str = "CrowdloanRewards";
				const FUNCTION: &'static str = "associate";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Claim;
			impl ::subxt::Call for Claim {
				const PALLET: &'static str = "CrowdloanRewards";
				const FUNCTION: &'static str = "claim";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Initialize the pallet at the current transaction block."]
				pub fn initialize(
					&self,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Initialize,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Initialize>()?
					};
					if runtime_call_hash ==
						[
							210u8, 6u8, 171u8, 194u8, 188u8, 76u8, 163u8, 192u8, 223u8, 241u8,
							194u8, 189u8, 221u8, 190u8, 28u8, 191u8, 208u8, 85u8, 140u8, 167u8,
							160u8, 29u8, 155u8, 216u8, 185u8, 27u8, 109u8, 39u8, 4u8, 82u8, 50u8,
							180u8,
						] {
						let call = Initialize {};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Initialize the pallet at the given transaction block."]
				pub fn initialize_at(
					&self,
					at: ::core::primitive::u64,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						InitializeAt,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<InitializeAt>()?
					};
					if runtime_call_hash ==
						[
							39u8, 34u8, 209u8, 171u8, 216u8, 15u8, 155u8, 118u8, 71u8, 240u8, 13u8,
							44u8, 92u8, 126u8, 29u8, 135u8, 183u8, 30u8, 239u8, 1u8, 140u8, 230u8,
							189u8, 194u8, 146u8, 81u8, 1u8, 51u8, 147u8, 136u8, 160u8, 253u8,
						] {
						let call = InitializeAt { at };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Populate pallet by adding more rewards."]
				#[doc = "Can be called multiple times. If an remote account already has a reward, it will be"]
				#[doc = "replaced by the new reward value."]
				#[doc = "Can only be called before `initialize`."]
				pub fn populate(
					&self,
					rewards: ::std::vec::Vec<(
						runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
							::subxt::sp_core::crypto::AccountId32,
						>,
						::core::primitive::u128,
						::core::primitive::u64,
					)>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Populate,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Populate>()?
					};
					if runtime_call_hash ==
						[
							119u8, 157u8, 147u8, 86u8, 235u8, 34u8, 128u8, 113u8, 12u8, 86u8,
							159u8, 125u8, 44u8, 83u8, 59u8, 97u8, 180u8, 86u8, 38u8, 90u8, 92u8,
							212u8, 68u8, 140u8, 157u8, 142u8, 149u8, 137u8, 177u8, 215u8, 211u8,
							253u8,
						] {
						let call = Populate { rewards };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Associate a reward account. A valid proof has to be provided."]
				#[doc = "This call also claim the first reward (a.k.a. the first payment, which is a % of the"]
				#[doc = "vested reward)."]
				#[doc = "If logic gate pass, no fees are applied."]
				#[doc = ""]
				#[doc = "The proof should be:"]
				#[doc = "```haskell"]
				#[doc = "proof = sign (concat prefix (hex reward_account))"]
				#[doc = "```"]
				pub fn associate(
					&self,
					reward_account: ::subxt::sp_core::crypto::AccountId32,
					proof: runtime_types::pallet_crowdloan_rewards::models::Proof<
						::subxt::sp_core::crypto::AccountId32,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Associate,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Associate>()?
					};
					if runtime_call_hash ==
						[
							104u8, 155u8, 250u8, 96u8, 19u8, 35u8, 89u8, 132u8, 2u8, 124u8, 95u8,
							189u8, 238u8, 34u8, 150u8, 107u8, 223u8, 24u8, 55u8, 207u8, 194u8,
							110u8, 35u8, 197u8, 90u8, 177u8, 253u8, 233u8, 180u8, 88u8, 159u8,
							109u8,
						] {
						let call = Associate { reward_account, proof };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Claim a reward from the associated reward account."]
				#[doc = "A previous call to `associate` should have been made."]
				#[doc = "If logic gate pass, no fees are applied."]
				pub fn claim(
					&self,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Claim, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Claim>()?
					};
					if runtime_call_hash ==
						[
							45u8, 97u8, 229u8, 222u8, 255u8, 43u8, 179u8, 22u8, 163u8, 231u8, 33u8,
							96u8, 167u8, 206u8, 213u8, 116u8, 80u8, 254u8, 184u8, 3u8, 96u8, 5u8,
							160u8, 81u8, 148u8, 30u8, 117u8, 255u8, 107u8, 177u8, 200u8, 78u8,
						] {
						let call = Claim {};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_crowdloan_rewards::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct Initialized {
				pub at: ::core::primitive::u64,
			}
			impl ::subxt::Event for Initialized {
				const PALLET: &'static str = "CrowdloanRewards";
				const EVENT: &'static str = "Initialized";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Claimed {
				pub remote_account: runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
					::subxt::sp_core::crypto::AccountId32,
				>,
				pub reward_account: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for Claimed {
				const PALLET: &'static str = "CrowdloanRewards";
				const EVENT: &'static str = "Claimed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Associated {
				pub remote_account: runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
					::subxt::sp_core::crypto::AccountId32,
				>,
				pub reward_account: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Event for Associated {
				const PALLET: &'static str = "CrowdloanRewards";
				const EVENT: &'static str = "Associated";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct Rewards<'a>(
				pub  &'a runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
					::subxt::sp_core::crypto::AccountId32,
				>,
			);
			impl ::subxt::StorageEntry for Rewards<'_> {
				const PALLET: &'static str = "CrowdloanRewards";
				const STORAGE: &'static str = "Rewards";
				type Value = runtime_types::pallet_crowdloan_rewards::models::Reward<
					::core::primitive::u128,
					::core::primitive::u64,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct TotalRewards;
			impl ::subxt::StorageEntry for TotalRewards {
				const PALLET: &'static str = "CrowdloanRewards";
				const STORAGE: &'static str = "TotalRewards";
				type Value = ::core::primitive::u128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct ClaimedRewards;
			impl ::subxt::StorageEntry for ClaimedRewards {
				const PALLET: &'static str = "CrowdloanRewards";
				const STORAGE: &'static str = "ClaimedRewards";
				type Value = ::core::primitive::u128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct TotalContributors;
			impl ::subxt::StorageEntry for TotalContributors {
				const PALLET: &'static str = "CrowdloanRewards";
				const STORAGE: &'static str = "TotalContributors";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct VestingTimeStart;
			impl ::subxt::StorageEntry for VestingTimeStart {
				const PALLET: &'static str = "CrowdloanRewards";
				const STORAGE: &'static str = "VestingTimeStart";
				type Value = ::core::primitive::u64;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Associations<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
			impl ::subxt::StorageEntry for Associations<'_> {
				const PALLET: &'static str = "CrowdloanRewards";
				const STORAGE: &'static str = "Associations";
				type Value = runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
					::subxt::sp_core::crypto::AccountId32,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				pub fn rewards(
					&self,
					_0: &'a runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
						::subxt::sp_core::crypto::AccountId32,
					>,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_crowdloan_rewards::models::Reward<
								::core::primitive::u128,
								::core::primitive::u64,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Rewards>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								103u8, 37u8, 38u8, 107u8, 19u8, 1u8, 96u8, 175u8, 96u8, 247u8,
								61u8, 79u8, 80u8, 230u8, 216u8, 49u8, 60u8, 198u8, 199u8, 7u8,
								123u8, 80u8, 4u8, 211u8, 133u8, 198u8, 137u8, 234u8, 163u8, 175u8,
								23u8, 134u8,
							] {
							let entry = Rewards(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn rewards_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Rewards<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Rewards>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								103u8, 37u8, 38u8, 107u8, 19u8, 1u8, 96u8, 175u8, 96u8, 247u8,
								61u8, 79u8, 80u8, 230u8, 216u8, 49u8, 60u8, 198u8, 199u8, 7u8,
								123u8, 80u8, 4u8, 211u8, 133u8, 198u8, 137u8, 234u8, 163u8, 175u8,
								23u8, 134u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The total amount of rewards to be claimed."]
				pub fn total_rewards(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<TotalRewards>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								37u8, 36u8, 124u8, 79u8, 45u8, 126u8, 177u8, 179u8, 118u8, 125u8,
								178u8, 245u8, 125u8, 208u8, 201u8, 248u8, 51u8, 5u8, 202u8, 199u8,
								82u8, 75u8, 64u8, 150u8, 40u8, 196u8, 223u8, 17u8, 32u8, 105u8,
								208u8, 126u8,
							] {
							let entry = TotalRewards;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The rewards claimed so far."]
				pub fn claimed_rewards(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ClaimedRewards>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								250u8, 96u8, 206u8, 11u8, 109u8, 190u8, 255u8, 1u8, 24u8, 244u8,
								7u8, 255u8, 93u8, 85u8, 138u8, 87u8, 165u8, 25u8, 154u8, 246u8,
								135u8, 210u8, 89u8, 170u8, 227u8, 236u8, 123u8, 161u8, 77u8, 214u8,
								44u8, 240u8,
							] {
							let entry = ClaimedRewards;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The total number of contributors."]
				pub fn total_contributors(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<TotalContributors>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								236u8, 88u8, 207u8, 169u8, 18u8, 55u8, 31u8, 213u8, 140u8, 154u8,
								142u8, 214u8, 66u8, 114u8, 157u8, 35u8, 172u8, 205u8, 122u8, 169u8,
								45u8, 64u8, 132u8, 177u8, 180u8, 21u8, 208u8, 12u8, 20u8, 23u8,
								13u8, 30u8,
							] {
							let entry = TotalContributors;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The block at which the users are able to claim their rewards."]
				pub fn vesting_time_start(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::core::primitive::u64>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<VestingTimeStart>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								93u8, 101u8, 112u8, 233u8, 17u8, 239u8, 82u8, 207u8, 167u8, 62u8,
								181u8, 104u8, 114u8, 195u8, 132u8, 255u8, 106u8, 152u8, 75u8,
								200u8, 76u8, 193u8, 89u8, 137u8, 224u8, 62u8, 225u8, 206u8, 157u8,
								28u8, 126u8, 48u8,
							] {
							let entry = VestingTimeStart;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Associate a local account with a remote one."]
				pub fn associations(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
								::subxt::sp_core::crypto::AccountId32,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Associations>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								43u8, 19u8, 215u8, 252u8, 154u8, 84u8, 230u8, 216u8, 184u8, 216u8,
								172u8, 77u8, 240u8, 78u8, 143u8, 147u8, 242u8, 27u8, 69u8, 228u8,
								1u8, 135u8, 230u8, 185u8, 210u8, 207u8, 147u8, 20u8, 198u8, 107u8,
								225u8, 73u8,
							] {
							let entry = Associations(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Associate a local account with a remote one."]
				pub fn associations_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Associations<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Associations>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								43u8, 19u8, 215u8, 252u8, 154u8, 84u8, 230u8, 216u8, 184u8, 216u8,
								172u8, 77u8, 240u8, 78u8, 143u8, 147u8, 242u8, 27u8, 69u8, 228u8,
								1u8, 135u8, 230u8, 185u8, 210u8, 207u8, 147u8, 20u8, 198u8, 107u8,
								225u8, 73u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The upfront liquidity unlocked at first claim."]
				pub fn initial_payment(
					&self,
				) -> ::core::result::Result<
					runtime_types::sp_arithmetic::per_things::Perbill,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("CrowdloanRewards", "InitialPayment")? ==
						[
							41u8, 209u8, 129u8, 62u8, 243u8, 146u8, 141u8, 163u8, 215u8, 127u8,
							33u8, 87u8, 6u8, 154u8, 175u8, 13u8, 186u8, 221u8, 25u8, 195u8, 66u8,
							218u8, 186u8, 186u8, 158u8, 180u8, 193u8, 141u8, 125u8, 94u8, 35u8,
							42u8,
						] {
						let pallet = metadata.pallet("CrowdloanRewards")?;
						let constant = pallet.constant("InitialPayment")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The time you have to wait to unlock another part of your reward."]
				pub fn vesting_step(
					&self,
				) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("CrowdloanRewards", "VestingStep")? ==
						[
							11u8, 13u8, 5u8, 60u8, 143u8, 234u8, 103u8, 124u8, 44u8, 67u8, 199u8,
							126u8, 0u8, 142u8, 233u8, 176u8, 25u8, 108u8, 193u8, 51u8, 242u8, 25u8,
							33u8, 92u8, 83u8, 11u8, 157u8, 188u8, 8u8, 14u8, 102u8, 68u8,
						] {
						let pallet = metadata.pallet("CrowdloanRewards")?;
						let constant = pallet.constant("VestingStep")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The arbitrary prefix used for the proof"]
				pub fn prefix(
					&self,
				) -> ::core::result::Result<
					::std::vec::Vec<::core::primitive::u8>,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("CrowdloanRewards", "Prefix")? ==
						[
							26u8, 155u8, 134u8, 70u8, 34u8, 41u8, 200u8, 3u8, 241u8, 104u8, 245u8,
							97u8, 216u8, 89u8, 95u8, 105u8, 153u8, 142u8, 86u8, 230u8, 78u8, 244u8,
							37u8, 51u8, 98u8, 231u8, 46u8, 132u8, 150u8, 55u8, 63u8, 146u8,
						] {
						let pallet = metadata.pallet("CrowdloanRewards")?;
						let constant = pallet.constant("Prefix")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The unique identifier of this pallet."]
				pub fn pallet_id(
					&self,
				) -> ::core::result::Result<
					runtime_types::frame_support::PalletId,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("CrowdloanRewards", "PalletId")? ==
						[
							27u8, 151u8, 182u8, 224u8, 193u8, 17u8, 185u8, 31u8, 86u8, 157u8, 72u8,
							35u8, 53u8, 82u8, 82u8, 78u8, 108u8, 117u8, 38u8, 82u8, 225u8, 10u8,
							34u8, 148u8, 200u8, 157u8, 177u8, 213u8, 64u8, 190u8, 187u8, 222u8,
						] {
						let pallet = metadata.pallet("CrowdloanRewards")?;
						let constant = pallet.constant("PalletId")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The AccountId of this pallet."]
				pub fn account_id(
					&self,
				) -> ::core::result::Result<
					::subxt::sp_core::crypto::AccountId32,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("CrowdloanRewards", "account_id")? ==
						[
							94u8, 240u8, 254u8, 185u8, 38u8, 128u8, 22u8, 147u8, 126u8, 60u8,
							142u8, 31u8, 173u8, 46u8, 0u8, 115u8, 66u8, 97u8, 48u8, 79u8, 68u8,
							240u8, 215u8, 168u8, 147u8, 75u8, 27u8, 188u8, 217u8, 76u8, 81u8, 20u8,
						] {
						let pallet = metadata.pallet("CrowdloanRewards")?;
						let constant = pallet.constant("account_id")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod vesting {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Claim {
				pub asset: runtime_types::primitives::currency::CurrencyId,
			}
			impl ::subxt::Call for Claim {
				const PALLET: &'static str = "Vesting";
				const FUNCTION: &'static str = "claim";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct VestedTransfer {
				pub from: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub beneficiary: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub asset: runtime_types::primitives::currency::CurrencyId,
				pub schedule: runtime_types::composable_traits::vesting::VestingSchedule<
					::core::primitive::u32,
					::core::primitive::u64,
					::core::primitive::u128,
				>,
			}
			impl ::subxt::Call for VestedTransfer {
				const PALLET: &'static str = "Vesting";
				const FUNCTION: &'static str = "vested_transfer";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct UpdateVestingSchedules {
				pub who: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub asset: runtime_types::primitives::currency::CurrencyId,
				pub vesting_schedules: ::std::vec::Vec<
					runtime_types::composable_traits::vesting::VestingSchedule<
						::core::primitive::u32,
						::core::primitive::u64,
						::core::primitive::u128,
					>,
				>,
			}
			impl ::subxt::Call for UpdateVestingSchedules {
				const PALLET: &'static str = "Vesting";
				const FUNCTION: &'static str = "update_vesting_schedules";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ClaimFor {
				pub dest: ::subxt::sp_runtime::MultiAddress<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>,
				pub asset: runtime_types::primitives::currency::CurrencyId,
			}
			impl ::subxt::Call for ClaimFor {
				const PALLET: &'static str = "Vesting";
				const FUNCTION: &'static str = "claim_for";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				pub fn claim(
					&self,
					asset: runtime_types::primitives::currency::CurrencyId,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Claim, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Claim>()?
					};
					if runtime_call_hash ==
						[
							7u8, 236u8, 122u8, 8u8, 139u8, 8u8, 242u8, 23u8, 98u8, 120u8, 107u8,
							111u8, 221u8, 115u8, 108u8, 75u8, 61u8, 46u8, 224u8, 16u8, 241u8,
							166u8, 195u8, 251u8, 137u8, 70u8, 221u8, 252u8, 230u8, 238u8, 51u8,
							139u8,
						] {
						let call = Claim { asset };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn vested_transfer(
					&self,
					from: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					beneficiary: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					asset: runtime_types::primitives::currency::CurrencyId,
					schedule: runtime_types::composable_traits::vesting::VestingSchedule<
						::core::primitive::u32,
						::core::primitive::u64,
						::core::primitive::u128,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						VestedTransfer,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<VestedTransfer>()?
					};
					if runtime_call_hash ==
						[
							247u8, 34u8, 225u8, 249u8, 154u8, 86u8, 103u8, 214u8, 52u8, 124u8,
							250u8, 19u8, 50u8, 143u8, 73u8, 157u8, 106u8, 220u8, 4u8, 129u8, 228u8,
							155u8, 64u8, 251u8, 87u8, 109u8, 208u8, 186u8, 111u8, 148u8, 252u8,
							249u8,
						] {
						let call = VestedTransfer { from, beneficiary, asset, schedule };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn update_vesting_schedules(
					&self,
					who: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					asset: runtime_types::primitives::currency::CurrencyId,
					vesting_schedules: ::std::vec::Vec<
						runtime_types::composable_traits::vesting::VestingSchedule<
							::core::primitive::u32,
							::core::primitive::u64,
							::core::primitive::u128,
						>,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						UpdateVestingSchedules,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<UpdateVestingSchedules>()?
					};
					if runtime_call_hash ==
						[
							243u8, 185u8, 36u8, 3u8, 80u8, 244u8, 88u8, 159u8, 71u8, 134u8, 132u8,
							161u8, 43u8, 69u8, 242u8, 103u8, 123u8, 30u8, 24u8, 26u8, 151u8, 253u8,
							11u8, 23u8, 54u8, 27u8, 98u8, 38u8, 217u8, 123u8, 53u8, 212u8,
						] {
						let call = UpdateVestingSchedules { who, asset, vesting_schedules };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn claim_for(
					&self,
					dest: ::subxt::sp_runtime::MultiAddress<
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u32,
					>,
					asset: runtime_types::primitives::currency::CurrencyId,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ClaimFor,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ClaimFor>()?
					};
					if runtime_call_hash ==
						[
							49u8, 76u8, 70u8, 22u8, 184u8, 35u8, 6u8, 210u8, 193u8, 78u8, 17u8,
							36u8, 214u8, 208u8, 220u8, 198u8, 28u8, 98u8, 134u8, 247u8, 139u8,
							129u8, 40u8, 54u8, 7u8, 231u8, 89u8, 131u8, 185u8, 182u8, 162u8, 102u8,
						] {
						let call = ClaimFor { dest, asset };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_vesting::module::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Added new vesting schedule. \\[from, to, schedule\\]"]
			pub struct VestingScheduleAdded {
				pub from: ::subxt::sp_core::crypto::AccountId32,
				pub to: ::subxt::sp_core::crypto::AccountId32,
				pub asset: runtime_types::primitives::currency::CurrencyId,
				pub schedule: runtime_types::composable_traits::vesting::VestingSchedule<
					::core::primitive::u32,
					::core::primitive::u64,
					::core::primitive::u128,
				>,
			}
			impl ::subxt::Event for VestingScheduleAdded {
				const PALLET: &'static str = "Vesting";
				const EVENT: &'static str = "VestingScheduleAdded";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Claimed vesting. \\[who, locked_amount\\]"]
			pub struct Claimed {
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub asset: runtime_types::primitives::currency::CurrencyId,
				pub locked_amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for Claimed {
				const PALLET: &'static str = "Vesting";
				const EVENT: &'static str = "Claimed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Updated vesting schedules. \\[who\\]"]
			pub struct VestingSchedulesUpdated {
				pub who: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Event for VestingSchedulesUpdated {
				const PALLET: &'static str = "Vesting";
				const EVENT: &'static str = "VestingSchedulesUpdated";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct VestingSchedules<'a>(
				pub &'a ::subxt::sp_core::crypto::AccountId32,
				pub &'a runtime_types::primitives::currency::CurrencyId,
			);
			impl ::subxt::StorageEntry for VestingSchedules<'_> {
				const PALLET: &'static str = "Vesting";
				const STORAGE: &'static str = "VestingSchedules";
				type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
					runtime_types::composable_traits::vesting::VestingSchedule<
						::core::primitive::u32,
						::core::primitive::u64,
						::core::primitive::u128,
					>,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " Vesting schedules of an account."]
				#[doc = ""]
				#[doc = " VestingSchedules: map AccountId => Vec<VestingSchedule>"]
				pub fn vesting_schedules(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					_1: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::frame_support::storage::bounded_vec::BoundedVec<
							runtime_types::composable_traits::vesting::VestingSchedule<
								::core::primitive::u32,
								::core::primitive::u64,
								::core::primitive::u128,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<VestingSchedules>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								116u8, 91u8, 240u8, 27u8, 236u8, 104u8, 96u8, 54u8, 89u8, 247u8,
								117u8, 39u8, 143u8, 13u8, 80u8, 216u8, 84u8, 233u8, 11u8, 173u8,
								169u8, 115u8, 101u8, 74u8, 121u8, 102u8, 132u8, 173u8, 220u8,
								102u8, 96u8, 89u8,
							] {
							let entry = VestingSchedules(_0, _1);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Vesting schedules of an account."]
				#[doc = ""]
				#[doc = " VestingSchedules: map AccountId => Vec<VestingSchedule>"]
				pub fn vesting_schedules_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, VestingSchedules<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<VestingSchedules>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								116u8, 91u8, 240u8, 27u8, 236u8, 104u8, 96u8, 54u8, 89u8, 247u8,
								117u8, 39u8, 143u8, 13u8, 80u8, 216u8, 84u8, 233u8, 11u8, 173u8,
								169u8, 115u8, 101u8, 74u8, 121u8, 102u8, 132u8, 173u8, 220u8,
								102u8, 96u8, 89u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The minimum amount transferred to call `vested_transfer`."]
				pub fn min_vested_transfer(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Vesting", "MinVestedTransfer")? ==
						[
							235u8, 181u8, 176u8, 221u8, 17u8, 206u8, 17u8, 84u8, 104u8, 202u8,
							44u8, 149u8, 166u8, 30u8, 122u8, 244u8, 59u8, 142u8, 243u8, 114u8,
							53u8, 10u8, 139u8, 103u8, 234u8, 75u8, 180u8, 233u8, 236u8, 38u8, 42u8,
							74u8,
						] {
						let pallet = metadata.pallet("Vesting")?;
						let constant = pallet.constant("MinVestedTransfer")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod bonded_finance {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Offer {
				pub offer: runtime_types::composable_traits::bonded_finance::BondOffer<
					::subxt::sp_core::crypto::AccountId32,
					runtime_types::primitives::currency::CurrencyId,
					::core::primitive::u128,
					::core::primitive::u32,
				>,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for Offer {
				const PALLET: &'static str = "BondedFinance";
				const FUNCTION: &'static str = "offer";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Bond {
				pub offer_id: ::core::primitive::u128,
				pub nb_of_bonds: ::core::primitive::u128,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for Bond {
				const PALLET: &'static str = "BondedFinance";
				const FUNCTION: &'static str = "bond";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct Cancel {
				pub offer_id: ::core::primitive::u128,
			}
			impl ::subxt::Call for Cancel {
				const PALLET: &'static str = "BondedFinance";
				const FUNCTION: &'static str = "cancel";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Create a new bond offer. To be `bond` to later."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have the"]
				#[doc = "appropriate funds to stake the offer."]
				#[doc = ""]
				#[doc = "Allows the issuer to ask for their account to be kept alive using the `keep_alive`"]
				#[doc = "parameter."]
				#[doc = ""]
				#[doc = "Emits a `NewOffer`."]
				pub fn offer(
					&self,
					offer: runtime_types::composable_traits::bonded_finance::BondOffer<
						::subxt::sp_core::crypto::AccountId32,
						runtime_types::primitives::currency::CurrencyId,
						::core::primitive::u128,
						::core::primitive::u32,
					>,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Offer, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Offer>()?
					};
					if runtime_call_hash ==
						[
							16u8, 132u8, 223u8, 99u8, 180u8, 175u8, 26u8, 7u8, 171u8, 5u8, 78u8,
							126u8, 235u8, 207u8, 59u8, 254u8, 227u8, 229u8, 209u8, 168u8, 218u8,
							254u8, 48u8, 19u8, 40u8, 242u8, 74u8, 74u8, 11u8, 27u8, 55u8, 113u8,
						] {
						let call = Offer { offer, keep_alive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Bond to an offer."]
				#[doc = ""]
				#[doc = "The issuer should provide the number of contracts they are willing to buy."]
				#[doc = "Once there are no more contracts available on the offer, the `stake` put by the"]
				#[doc = "offer creator is refunded."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have the"]
				#[doc = "appropriate funds to buy the desired number of contracts."]
				#[doc = ""]
				#[doc = "Allows the issuer to ask for their account to be kept alive using the `keep_alive`"]
				#[doc = "parameter."]
				#[doc = ""]
				#[doc = "Emits a `NewBond`."]
				#[doc = "Possibily Emits a `OfferCompleted`."]
				pub fn bond(
					&self,
					offer_id: ::core::primitive::u128,
					nb_of_bonds: ::core::primitive::u128,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Bond, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Bond>()?
					};
					if runtime_call_hash ==
						[
							188u8, 230u8, 130u8, 100u8, 131u8, 60u8, 198u8, 194u8, 140u8, 67u8,
							211u8, 192u8, 127u8, 146u8, 182u8, 25u8, 33u8, 175u8, 180u8, 148u8,
							105u8, 30u8, 54u8, 132u8, 136u8, 171u8, 121u8, 62u8, 3u8, 92u8, 33u8,
							163u8,
						] {
						let call = Bond { offer_id, nb_of_bonds, keep_alive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Cancel a running offer."]
				#[doc = ""]
				#[doc = "Blocking further bonds but not cancelling the currently vested rewards. The `stake` put"]
				#[doc = "by the offer creator is refunded."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be `AdminOrigin`"]
				#[doc = ""]
				#[doc = "Emits a `OfferCancelled`."]
				pub fn cancel(
					&self,
					offer_id: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Cancel, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Cancel>()?
					};
					if runtime_call_hash ==
						[
							100u8, 139u8, 124u8, 7u8, 199u8, 151u8, 233u8, 130u8, 33u8, 251u8,
							179u8, 95u8, 156u8, 64u8, 202u8, 34u8, 57u8, 40u8, 74u8, 39u8, 98u8,
							54u8, 199u8, 47u8, 20u8, 12u8, 37u8, 5u8, 5u8, 17u8, 165u8, 1u8,
						] {
						let call = Cancel { offer_id };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_bonded_finance::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "A new offer has been created."]
			pub struct NewOffer {
				pub offer_id: ::core::primitive::u128,
			}
			impl ::subxt::Event for NewOffer {
				const PALLET: &'static str = "BondedFinance";
				const EVENT: &'static str = "NewOffer";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A new bond has been registered."]
			pub struct NewBond {
				pub offer_id: ::core::primitive::u128,
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub nb_of_bonds: ::core::primitive::u128,
			}
			impl ::subxt::Event for NewBond {
				const PALLET: &'static str = "BondedFinance";
				const EVENT: &'static str = "NewBond";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "An offer has been cancelled by the `AdminOrigin`."]
			pub struct OfferCancelled {
				pub offer_id: ::core::primitive::u128,
			}
			impl ::subxt::Event for OfferCancelled {
				const PALLET: &'static str = "BondedFinance";
				const EVENT: &'static str = "OfferCancelled";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			#[doc = "An offer has been completed."]
			pub struct OfferCompleted {
				pub offer_id: ::core::primitive::u128,
			}
			impl ::subxt::Event for OfferCompleted {
				const PALLET: &'static str = "BondedFinance";
				const EVENT: &'static str = "OfferCompleted";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct BondOfferCount;
			impl ::subxt::StorageEntry for BondOfferCount {
				const PALLET: &'static str = "BondedFinance";
				const STORAGE: &'static str = "BondOfferCount";
				type Value = ::core::primitive::u128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct BondOffers<'a>(pub &'a ::core::primitive::u128);
			impl ::subxt::StorageEntry for BondOffers<'_> {
				const PALLET: &'static str = "BondedFinance";
				const STORAGE: &'static str = "BondOffers";
				type Value = (
					::subxt::sp_core::crypto::AccountId32,
					runtime_types::composable_traits::bonded_finance::BondOffer<
						::subxt::sp_core::crypto::AccountId32,
						runtime_types::primitives::currency::CurrencyId,
						::core::primitive::u128,
						::core::primitive::u32,
					>,
				);
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The counter used to uniquely identify bond offers within this pallet."]
				pub fn bond_offer_count(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<BondOfferCount>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								2u8, 219u8, 28u8, 115u8, 157u8, 78u8, 81u8, 57u8, 26u8, 136u8,
								186u8, 15u8, 179u8, 229u8, 113u8, 56u8, 68u8, 46u8, 68u8, 85u8,
								211u8, 130u8, 188u8, 231u8, 201u8, 154u8, 3u8, 63u8, 39u8, 39u8,
								157u8, 203u8,
							] {
							let entry = BondOfferCount;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " A mapping from offer ID to the pair: (issuer, offer)"]
				pub fn bond_offers(
					&self,
					_0: &'a ::core::primitive::u128,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<(
							::subxt::sp_core::crypto::AccountId32,
							runtime_types::composable_traits::bonded_finance::BondOffer<
								::subxt::sp_core::crypto::AccountId32,
								runtime_types::primitives::currency::CurrencyId,
								::core::primitive::u128,
								::core::primitive::u32,
							>,
						)>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<BondOffers>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								30u8, 27u8, 245u8, 21u8, 58u8, 217u8, 5u8, 93u8, 121u8, 183u8,
								44u8, 10u8, 242u8, 38u8, 45u8, 117u8, 228u8, 177u8, 183u8, 253u8,
								26u8, 254u8, 25u8, 75u8, 146u8, 34u8, 21u8, 131u8, 28u8, 63u8,
								237u8, 200u8,
							] {
							let entry = BondOffers(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " A mapping from offer ID to the pair: (issuer, offer)"]
				pub fn bond_offers_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, BondOffers<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<BondOffers>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								30u8, 27u8, 245u8, 21u8, 58u8, 217u8, 5u8, 93u8, 121u8, 183u8,
								44u8, 10u8, 242u8, 38u8, 45u8, 117u8, 228u8, 177u8, 183u8, 253u8,
								26u8, 254u8, 25u8, 75u8, 146u8, 34u8, 21u8, 131u8, 28u8, 63u8,
								237u8, 200u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The pallet ID, required to create sub-accounts used by offers."]
				pub fn pallet_id(
					&self,
				) -> ::core::result::Result<
					runtime_types::frame_support::PalletId,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("BondedFinance", "PalletId")? ==
						[
							165u8, 193u8, 27u8, 82u8, 205u8, 18u8, 37u8, 119u8, 19u8, 244u8, 73u8,
							146u8, 99u8, 220u8, 59u8, 105u8, 65u8, 80u8, 195u8, 47u8, 204u8, 223u8,
							70u8, 209u8, 224u8, 7u8, 121u8, 171u8, 224u8, 38u8, 140u8, 213u8,
						] {
						let pallet = metadata.pallet("BondedFinance")?;
						let constant = pallet.constant("PalletId")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The stake a user has to put to create an offer."]
				pub fn stake(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("BondedFinance", "Stake")? ==
						[
							167u8, 96u8, 9u8, 212u8, 217u8, 121u8, 230u8, 106u8, 206u8, 112u8,
							237u8, 220u8, 195u8, 234u8, 181u8, 52u8, 84u8, 151u8, 184u8, 233u8,
							193u8, 131u8, 135u8, 193u8, 1u8, 8u8, 32u8, 141u8, 73u8, 188u8, 14u8,
							149u8,
						] {
						let pallet = metadata.pallet("BondedFinance")?;
						let constant = pallet.constant("Stake")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The minimum reward for an offer."]
				#[doc = ""]
				#[doc = " Must be > T::Vesting::MinVestedTransfer."]
				pub fn min_reward(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("BondedFinance", "MinReward")? ==
						[
							174u8, 248u8, 159u8, 24u8, 29u8, 126u8, 156u8, 134u8, 155u8, 24u8,
							150u8, 24u8, 238u8, 229u8, 32u8, 103u8, 225u8, 196u8, 178u8, 55u8,
							198u8, 240u8, 175u8, 129u8, 212u8, 118u8, 141u8, 70u8, 178u8, 184u8,
							7u8, 99u8,
						] {
						let pallet = metadata.pallet("BondedFinance")?;
						let constant = pallet.constant("MinReward")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod dutch_auction {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AddConfiguration {
				pub configuration_id: ::core::primitive::u128,
				pub configuration: runtime_types::composable_traits::time::TimeReleaseFunction,
			}
			impl ::subxt::Call for AddConfiguration {
				const PALLET: &'static str = "DutchAuction";
				const FUNCTION: &'static str = "add_configuration";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Ask {
				pub order: runtime_types::composable_traits::defi::Sell<
					runtime_types::primitives::currency::CurrencyId,
					::core::primitive::u128,
				>,
				pub configuration: runtime_types::composable_traits::time::TimeReleaseFunction,
			}
			impl ::subxt::Call for Ask {
				const PALLET: &'static str = "DutchAuction";
				const FUNCTION: &'static str = "ask";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Take {
				pub order_id: ::core::primitive::u128,
				pub take: runtime_types::composable_traits::defi::Take<::core::primitive::u128>,
			}
			impl ::subxt::Call for Take {
				const PALLET: &'static str = "DutchAuction";
				const FUNCTION: &'static str = "take";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct Liquidate {
				pub order_id: ::core::primitive::u128,
			}
			impl ::subxt::Call for Liquidate {
				const PALLET: &'static str = "DutchAuction";
				const FUNCTION: &'static str = "liquidate";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct XcmSell {
				pub request: runtime_types::composable_traits::xcm::XcmSellRequest,
			}
			impl ::subxt::Call for XcmSell {
				const PALLET: &'static str = "DutchAuction";
				const FUNCTION: &'static str = "xcm_sell";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Inserts or replaces auction configuration."]
				#[doc = "Already running auctions are not updated."]
				pub fn add_configuration(
					&self,
					configuration_id: ::core::primitive::u128,
					configuration: runtime_types::composable_traits::time::TimeReleaseFunction,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						AddConfiguration,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<AddConfiguration>()?
					};
					if runtime_call_hash ==
						[
							127u8, 33u8, 135u8, 206u8, 53u8, 233u8, 7u8, 188u8, 185u8, 146u8, 25u8,
							65u8, 64u8, 163u8, 93u8, 25u8, 85u8, 209u8, 189u8, 27u8, 185u8, 125u8,
							119u8, 69u8, 188u8, 167u8, 17u8, 8u8, 90u8, 32u8, 111u8, 107u8,
						] {
						let call = AddConfiguration { configuration_id, configuration };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "sell `order` in auction with `configuration`"]
				#[doc = "some deposit is taken for storing sell order"]
				pub fn ask(
					&self,
					order: runtime_types::composable_traits::defi::Sell<
						runtime_types::primitives::currency::CurrencyId,
						::core::primitive::u128,
					>,
					configuration: runtime_types::composable_traits::time::TimeReleaseFunction,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Ask, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Ask>()?
					};
					if runtime_call_hash ==
						[
							235u8, 209u8, 92u8, 123u8, 14u8, 95u8, 40u8, 224u8, 174u8, 192u8, 13u8,
							36u8, 54u8, 140u8, 144u8, 119u8, 66u8, 192u8, 151u8, 136u8, 137u8,
							79u8, 103u8, 42u8, 85u8, 145u8, 17u8, 172u8, 252u8, 136u8, 185u8,
							130u8,
						] {
						let call = Ask { order, configuration };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "adds take to list, does not execute take immediately"]
				pub fn take(
					&self,
					order_id: ::core::primitive::u128,
					take: runtime_types::composable_traits::defi::Take<::core::primitive::u128>,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Take, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Take>()?
					};
					if runtime_call_hash ==
						[
							17u8, 20u8, 213u8, 163u8, 140u8, 63u8, 103u8, 10u8, 132u8, 104u8,
							202u8, 168u8, 191u8, 188u8, 165u8, 79u8, 203u8, 107u8, 249u8, 115u8,
							73u8, 66u8, 173u8, 164u8, 250u8, 173u8, 123u8, 70u8, 148u8, 73u8,
							160u8, 252u8,
						] {
						let call = Take { order_id, take };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "allows to remove `order_id` from storage"]
				pub fn liquidate(
					&self,
					order_id: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Liquidate,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Liquidate>()?
					};
					if runtime_call_hash ==
						[
							154u8, 98u8, 159u8, 36u8, 88u8, 73u8, 8u8, 213u8, 231u8, 50u8, 117u8,
							218u8, 63u8, 174u8, 55u8, 248u8, 135u8, 0u8, 194u8, 129u8, 101u8,
							131u8, 153u8, 24u8, 35u8, 42u8, 236u8, 44u8, 77u8, 193u8, 13u8, 69u8,
						] {
						let call = Liquidate { order_id };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn xcm_sell(
					&self,
					request: runtime_types::composable_traits::xcm::XcmSellRequest,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						XcmSell,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<XcmSell>()?
					};
					if runtime_call_hash ==
						[
							39u8, 252u8, 32u8, 27u8, 23u8, 41u8, 237u8, 177u8, 44u8, 132u8, 129u8,
							249u8, 42u8, 234u8, 161u8, 160u8, 229u8, 247u8, 182u8, 224u8, 9u8,
							254u8, 2u8, 34u8, 159u8, 254u8, 97u8, 162u8, 88u8, 229u8, 177u8, 106u8,
						] {
						let call = XcmSell { request };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_dutch_auction::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct OrderAdded {
				pub order_id: ::core::primitive::u128,
				pub order: runtime_types::pallet_dutch_auction::types::SellOrder<
					runtime_types::primitives::currency::CurrencyId,
					::core::primitive::u128,
					::subxt::sp_core::crypto::AccountId32,
					runtime_types::pallet_dutch_auction::types::EDContext<::core::primitive::u128>,
					runtime_types::composable_traits::time::TimeReleaseFunction,
				>,
			}
			impl ::subxt::Event for OrderAdded {
				const PALLET: &'static str = "DutchAuction";
				const EVENT: &'static str = "OrderAdded";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "raised when part or whole order was taken with mentioned balance"]
			pub struct OrderTaken {
				pub order_id: ::core::primitive::u128,
				pub taken: ::core::primitive::u128,
			}
			impl ::subxt::Event for OrderTaken {
				const PALLET: &'static str = "DutchAuction";
				const EVENT: &'static str = "OrderTaken";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct OrderRemoved {
				pub order_id: ::core::primitive::u128,
			}
			impl ::subxt::Event for OrderRemoved {
				const PALLET: &'static str = "DutchAuction";
				const EVENT: &'static str = "OrderRemoved";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct CofigurationAdded {
				pub configuration_id: ::core::primitive::u128,
				pub configuration: runtime_types::composable_traits::time::TimeReleaseFunction,
			}
			impl ::subxt::Event for CofigurationAdded {
				const PALLET: &'static str = "DutchAuction";
				const EVENT: &'static str = "CofigurationAdded";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct OrdersIndex;
			impl ::subxt::StorageEntry for OrdersIndex {
				const PALLET: &'static str = "DutchAuction";
				const STORAGE: &'static str = "OrdersIndex";
				type Value = ::core::primitive::u128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct SellOrders<'a>(pub &'a ::core::primitive::u128);
			impl ::subxt::StorageEntry for SellOrders<'_> {
				const PALLET: &'static str = "DutchAuction";
				const STORAGE: &'static str = "SellOrders";
				type Value = runtime_types::pallet_dutch_auction::types::SellOrder<
					runtime_types::primitives::currency::CurrencyId,
					::core::primitive::u128,
					::subxt::sp_core::crypto::AccountId32,
					runtime_types::pallet_dutch_auction::types::EDContext<::core::primitive::u128>,
					runtime_types::composable_traits::time::TimeReleaseFunction,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct XcmSellOrders<'a>(
				pub &'a runtime_types::polkadot_parachain::primitives::Id,
				pub &'a ::core::primitive::u64,
			);
			impl ::subxt::StorageEntry for XcmSellOrders<'_> {
				const PALLET: &'static str = "DutchAuction";
				const STORAGE: &'static str = "XcmSellOrders";
				type Value = ::core::primitive::u128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
						::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
					])
				}
			}
			pub struct LocalOrderIdToRemote<'a>(pub &'a ::core::primitive::u128);
			impl ::subxt::StorageEntry for LocalOrderIdToRemote<'_> {
				const PALLET: &'static str = "DutchAuction";
				const STORAGE: &'static str = "LocalOrderIdToRemote";
				type Value =
					(runtime_types::polkadot_parachain::primitives::Id, ::core::primitive::u64);
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct ParachainXcmCallbackLocation<'a>(
				pub &'a runtime_types::polkadot_parachain::primitives::Id,
			);
			impl ::subxt::StorageEntry for ParachainXcmCallbackLocation<'_> {
				const PALLET: &'static str = "DutchAuction";
				const STORAGE: &'static str = "ParachainXcmCallbackLocation";
				type Value = runtime_types::composable_traits::xcm::CumulusMethodId;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct Configurations<'a>(pub &'a ::core::primitive::u128);
			impl ::subxt::StorageEntry for Configurations<'_> {
				const PALLET: &'static str = "DutchAuction";
				const STORAGE: &'static str = "Configurations";
				type Value = runtime_types::composable_traits::time::TimeReleaseFunction;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct Takes<'a>(pub &'a ::core::primitive::u128);
			impl ::subxt::StorageEntry for Takes<'_> {
				const PALLET: &'static str = "DutchAuction";
				const STORAGE: &'static str = "Takes";
				type Value = ::std::vec::Vec<
					runtime_types::pallet_dutch_auction::types::TakeOrder<
						::core::primitive::u128,
						::subxt::sp_core::crypto::AccountId32,
					>,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				pub fn orders_index(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<OrdersIndex>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								33u8, 214u8, 151u8, 4u8, 55u8, 106u8, 106u8, 35u8, 123u8, 123u8,
								216u8, 230u8, 28u8, 248u8, 255u8, 191u8, 198u8, 37u8, 217u8, 70u8,
								130u8, 35u8, 94u8, 231u8, 60u8, 86u8, 99u8, 123u8, 51u8, 104u8,
								142u8, 175u8,
							] {
							let entry = OrdersIndex;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn sell_orders(
					&self,
					_0: &'a ::core::primitive::u128,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_dutch_auction::types::SellOrder<
								runtime_types::primitives::currency::CurrencyId,
								::core::primitive::u128,
								::subxt::sp_core::crypto::AccountId32,
								runtime_types::pallet_dutch_auction::types::EDContext<
									::core::primitive::u128,
								>,
								runtime_types::composable_traits::time::TimeReleaseFunction,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<SellOrders>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								34u8, 229u8, 220u8, 114u8, 75u8, 191u8, 239u8, 147u8, 202u8, 121u8,
								12u8, 15u8, 203u8, 49u8, 58u8, 64u8, 86u8, 120u8, 63u8, 136u8,
								106u8, 230u8, 41u8, 207u8, 161u8, 236u8, 199u8, 143u8, 70u8, 113u8,
								133u8, 181u8,
							] {
							let entry = SellOrders(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn sell_orders_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, SellOrders<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<SellOrders>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								34u8, 229u8, 220u8, 114u8, 75u8, 191u8, 239u8, 147u8, 202u8, 121u8,
								12u8, 15u8, 203u8, 49u8, 58u8, 64u8, 86u8, 120u8, 63u8, 136u8,
								106u8, 230u8, 41u8, 207u8, 161u8, 236u8, 199u8, 143u8, 70u8, 113u8,
								133u8, 181u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn xcm_sell_orders(
					&self,
					_0: &'a runtime_types::polkadot_parachain::primitives::Id,
					_1: &'a ::core::primitive::u64,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::core::primitive::u128>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<XcmSellOrders>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								231u8, 29u8, 224u8, 172u8, 5u8, 35u8, 69u8, 170u8, 239u8, 19u8,
								110u8, 120u8, 33u8, 92u8, 102u8, 200u8, 82u8, 158u8, 203u8, 56u8,
								70u8, 229u8, 29u8, 128u8, 201u8, 189u8, 216u8, 144u8, 40u8, 38u8,
								118u8, 173u8,
							] {
							let entry = XcmSellOrders(_0, _1);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn xcm_sell_orders_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, XcmSellOrders<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<XcmSellOrders>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								231u8, 29u8, 224u8, 172u8, 5u8, 35u8, 69u8, 170u8, 239u8, 19u8,
								110u8, 120u8, 33u8, 92u8, 102u8, 200u8, 82u8, 158u8, 203u8, 56u8,
								70u8, 229u8, 29u8, 128u8, 201u8, 189u8, 216u8, 144u8, 40u8, 38u8,
								118u8, 173u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " orders are handled locally, but if these came from remote,"]
				#[doc = " these should be notified approtiately"]
				pub fn local_order_id_to_remote(
					&self,
					_0: &'a ::core::primitive::u128,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<(
							runtime_types::polkadot_parachain::primitives::Id,
							::core::primitive::u64,
						)>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<LocalOrderIdToRemote>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								37u8, 150u8, 167u8, 145u8, 174u8, 196u8, 19u8, 44u8, 182u8, 132u8,
								90u8, 205u8, 149u8, 122u8, 148u8, 216u8, 219u8, 220u8, 166u8, 54u8,
								143u8, 205u8, 65u8, 109u8, 246u8, 193u8, 71u8, 52u8, 81u8, 153u8,
								114u8, 116u8,
							] {
							let entry = LocalOrderIdToRemote(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " orders are handled locally, but if these came from remote,"]
				#[doc = " these should be notified approtiately"]
				pub fn local_order_id_to_remote_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, LocalOrderIdToRemote<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<LocalOrderIdToRemote>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								37u8, 150u8, 167u8, 145u8, 174u8, 196u8, 19u8, 44u8, 182u8, 132u8,
								90u8, 205u8, 149u8, 122u8, 148u8, 216u8, 219u8, 220u8, 166u8, 54u8,
								143u8, 205u8, 65u8, 109u8, 246u8, 193u8, 71u8, 52u8, 81u8, 153u8,
								114u8, 116u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " registered callback location for specific parachain"]
				pub fn parachain_xcm_callback_location(
					&self,
					_0: &'a runtime_types::polkadot_parachain::primitives::Id,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::composable_traits::xcm::CumulusMethodId,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ParachainXcmCallbackLocation>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								111u8, 52u8, 31u8, 122u8, 158u8, 48u8, 154u8, 155u8, 28u8, 206u8,
								246u8, 101u8, 3u8, 89u8, 153u8, 229u8, 175u8, 50u8, 141u8, 150u8,
								254u8, 54u8, 45u8, 50u8, 250u8, 78u8, 224u8, 107u8, 227u8, 185u8,
								117u8, 255u8,
							] {
							let entry = ParachainXcmCallbackLocation(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " registered callback location for specific parachain"]
				pub fn parachain_xcm_callback_location_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, ParachainXcmCallbackLocation<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ParachainXcmCallbackLocation>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								111u8, 52u8, 31u8, 122u8, 158u8, 48u8, 154u8, 155u8, 28u8, 206u8,
								246u8, 101u8, 3u8, 89u8, 153u8, 229u8, 175u8, 50u8, 141u8, 150u8,
								254u8, 54u8, 45u8, 50u8, 250u8, 78u8, 224u8, 107u8, 227u8, 185u8,
								117u8, 255u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " set of reusable auction configurations"]
				pub fn configurations(
					&self,
					_0: &'a ::core::primitive::u128,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::composable_traits::time::TimeReleaseFunction,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Configurations>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								59u8, 108u8, 233u8, 126u8, 191u8, 70u8, 94u8, 28u8, 217u8, 171u8,
								66u8, 67u8, 6u8, 210u8, 235u8, 21u8, 118u8, 153u8, 214u8, 223u8,
								186u8, 226u8, 93u8, 206u8, 146u8, 158u8, 190u8, 171u8, 228u8, 50u8,
								47u8, 119u8,
							] {
							let entry = Configurations(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " set of reusable auction configurations"]
				pub fn configurations_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Configurations<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Configurations>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								59u8, 108u8, 233u8, 126u8, 191u8, 70u8, 94u8, 28u8, 217u8, 171u8,
								66u8, 67u8, 6u8, 210u8, 235u8, 21u8, 118u8, 153u8, 214u8, 223u8,
								186u8, 226u8, 93u8, 206u8, 146u8, 158u8, 190u8, 171u8, 228u8, 50u8,
								47u8, 119u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " one block storage, users payed N * WEIGHT for this Vec, so will not put bound here (neither"]
				#[doc = " HydraDX does)"]
				pub fn takes(
					&self,
					_0: &'a ::core::primitive::u128,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							::std::vec::Vec<
								runtime_types::pallet_dutch_auction::types::TakeOrder<
									::core::primitive::u128,
									::subxt::sp_core::crypto::AccountId32,
								>,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Takes>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								32u8, 187u8, 156u8, 241u8, 219u8, 109u8, 26u8, 25u8, 207u8, 227u8,
								27u8, 95u8, 93u8, 177u8, 130u8, 36u8, 195u8, 201u8, 185u8, 162u8,
								112u8, 30u8, 87u8, 0u8, 215u8, 11u8, 108u8, 158u8, 12u8, 44u8,
								198u8, 159u8,
							] {
							let entry = Takes(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " one block storage, users payed N * WEIGHT for this Vec, so will not put bound here (neither"]
				#[doc = " HydraDX does)"]
				pub fn takes_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Takes<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Takes>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								32u8, 187u8, 156u8, 241u8, 219u8, 109u8, 26u8, 25u8, 207u8, 227u8,
								27u8, 95u8, 93u8, 177u8, 130u8, 36u8, 195u8, 201u8, 185u8, 162u8,
								112u8, 30u8, 87u8, 0u8, 215u8, 11u8, 108u8, 158u8, 12u8, 44u8,
								198u8, 159u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				pub fn pallet_id(
					&self,
				) -> ::core::result::Result<
					runtime_types::frame_support::PalletId,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("DutchAuction", "PalletId")? ==
						[
							119u8, 163u8, 119u8, 45u8, 242u8, 119u8, 213u8, 187u8, 75u8, 167u8,
							60u8, 138u8, 199u8, 143u8, 78u8, 144u8, 20u8, 35u8, 55u8, 131u8, 186u8,
							220u8, 209u8, 135u8, 206u8, 71u8, 193u8, 243u8, 29u8, 253u8, 110u8,
							40u8,
						] {
						let pallet = metadata.pallet("DutchAuction")?;
						let constant = pallet.constant("PalletId")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " ED taken to create position. Part of if returned when position is liqudated."]
				pub fn position_existential_deposit(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("DutchAuction", "PositionExistentialDeposit")? ==
						[
							206u8, 75u8, 164u8, 48u8, 14u8, 85u8, 38u8, 130u8, 250u8, 152u8, 69u8,
							202u8, 12u8, 67u8, 134u8, 81u8, 26u8, 229u8, 59u8, 10u8, 58u8, 142u8,
							213u8, 128u8, 40u8, 176u8, 73u8, 237u8, 131u8, 62u8, 180u8, 96u8,
						] {
						let pallet = metadata.pallet("DutchAuction")?;
						let constant = pallet.constant("PositionExistentialDeposit")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod mosaic {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetRelayer {
				pub relayer: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Call for SetRelayer {
				const PALLET: &'static str = "Mosaic";
				const FUNCTION: &'static str = "set_relayer";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RotateRelayer {
				pub new: ::subxt::sp_core::crypto::AccountId32,
				pub validated_ttl: ::core::primitive::u32,
			}
			impl ::subxt::Call for RotateRelayer {
				const PALLET: &'static str = "Mosaic";
				const FUNCTION: &'static str = "rotate_relayer";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetNetwork {
				pub network_id: ::core::primitive::u32,
				pub network_info:
					runtime_types::pallet_mosaic::pallet::NetworkInfo<::core::primitive::u128>,
			}
			impl ::subxt::Call for SetNetwork {
				const PALLET: &'static str = "Mosaic";
				const FUNCTION: &'static str = "set_network";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetBudget {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub amount: ::core::primitive::u128,
				pub decay: runtime_types::pallet_mosaic::decay::BudgetPenaltyDecayer<
					::core::primitive::u128,
					::core::primitive::u32,
				>,
			}
			impl ::subxt::Call for SetBudget {
				const PALLET: &'static str = "Mosaic";
				const FUNCTION: &'static str = "set_budget";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct TransferTo {
				pub network_id: ::core::primitive::u32,
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub address: runtime_types::composable_support::types::EthereumAddress,
				pub amount: ::core::primitive::u128,
				pub swap_to_native: ::core::primitive::bool,
				pub source_user_account: ::subxt::sp_core::crypto::AccountId32,
				pub amm_swap_info: ::core::option::Option<
					runtime_types::pallet_mosaic::pallet::AmmSwapInfo<
						::core::primitive::u32,
						::core::primitive::u128,
					>,
				>,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for TransferTo {
				const PALLET: &'static str = "Mosaic";
				const FUNCTION: &'static str = "transfer_to";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AcceptTransfer {
				pub from: ::subxt::sp_core::crypto::AccountId32,
				pub network_id: ::core::primitive::u32,
				pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Call for AcceptTransfer {
				const PALLET: &'static str = "Mosaic";
				const FUNCTION: &'static str = "accept_transfer";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ClaimStaleTo {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub to: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Call for ClaimStaleTo {
				const PALLET: &'static str = "Mosaic";
				const FUNCTION: &'static str = "claim_stale_to";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct TimelockedMint {
				pub network_id: ::core::primitive::u32,
				pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
				pub to: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
				pub lock_time: ::core::primitive::u32,
				pub id: ::subxt::sp_core::H256,
			}
			impl ::subxt::Call for TimelockedMint {
				const PALLET: &'static str = "Mosaic";
				const FUNCTION: &'static str = "timelocked_mint";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct SetTimelockDuration {
				pub period: ::core::primitive::u32,
			}
			impl ::subxt::Call for SetTimelockDuration {
				const PALLET: &'static str = "Mosaic";
				const FUNCTION: &'static str = "set_timelock_duration";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RescindTimelockedMint {
				pub network_id: ::core::primitive::u32,
				pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
				pub account: ::subxt::sp_core::crypto::AccountId32,
				pub untrusted_amount: ::core::primitive::u128,
			}
			impl ::subxt::Call for RescindTimelockedMint {
				const PALLET: &'static str = "Mosaic";
				const FUNCTION: &'static str = "rescind_timelocked_mint";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ClaimTo {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub to: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Call for ClaimTo {
				const PALLET: &'static str = "Mosaic";
				const FUNCTION: &'static str = "claim_to";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct UpdateAssetMapping {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub network_id: ::core::primitive::u32,
				pub remote_asset_id:
					::core::option::Option<runtime_types::common::types::MosaicRemoteAssetId>,
			}
			impl ::subxt::Call for UpdateAssetMapping {
				const PALLET: &'static str = "Mosaic";
				const FUNCTION: &'static str = "update_asset_mapping";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AddRemoteAmmId {
				pub network_id: ::core::primitive::u32,
				pub amm_id: ::core::primitive::u128,
			}
			impl ::subxt::Call for AddRemoteAmmId {
				const PALLET: &'static str = "Mosaic";
				const FUNCTION: &'static str = "add_remote_amm_id";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RemoveRemoteAmmId {
				pub network_id: ::core::primitive::u32,
				pub amm_id: ::core::primitive::u128,
			}
			impl ::subxt::Call for RemoveRemoteAmmId {
				const PALLET: &'static str = "Mosaic";
				const FUNCTION: &'static str = "remove_remote_amm_id";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Sets the current Relayer configuration."]
				#[doc = ""]
				#[doc = "This is enacted immediately and invalidates inflight/ incoming transactions from the"]
				#[doc = "previous Relayer. However, existing budgets remain in place."]
				#[doc = ""]
				#[doc = "This can only be called by the [`ControlOrigin`]."]
				#[doc = ""]
				#[doc = "[controlorigin]: https://dali.devnets.composablefinance.ninja/doc/pallet_mosaic/pallet/trait.Config.html#associatedtype.ControlOrigin"]
				pub fn set_relayer(
					&self,
					relayer: ::subxt::sp_core::crypto::AccountId32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetRelayer,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetRelayer>()?
					};
					if runtime_call_hash ==
						[
							208u8, 154u8, 189u8, 200u8, 251u8, 48u8, 179u8, 180u8, 253u8, 113u8,
							71u8, 141u8, 82u8, 176u8, 234u8, 125u8, 231u8, 11u8, 27u8, 166u8, 65u8,
							6u8, 18u8, 242u8, 122u8, 175u8, 142u8, 154u8, 40u8, 52u8, 12u8, 219u8,
						] {
						let call = SetRelayer { relayer };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Rotates the Relayer Account"]
				#[doc = ""]
				#[doc = "# Restrictions"]
				#[doc = " - Only callable by the current Relayer."]
				#[doc = " - The Time To Live (TTL) must be greater than the [`MinimumTTL`](Config::MinimumTTL)"]
				pub fn rotate_relayer(
					&self,
					new: ::subxt::sp_core::crypto::AccountId32,
					validated_ttl: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RotateRelayer,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RotateRelayer>()?
					};
					if runtime_call_hash ==
						[
							140u8, 28u8, 182u8, 204u8, 126u8, 148u8, 42u8, 231u8, 48u8, 190u8,
							109u8, 184u8, 151u8, 159u8, 254u8, 211u8, 34u8, 211u8, 185u8, 54u8,
							221u8, 170u8, 178u8, 187u8, 223u8, 83u8, 224u8, 183u8, 76u8, 87u8,
							30u8, 122u8,
						] {
						let call = RotateRelayer { new, validated_ttl };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Sets supported networks and maximum transaction sizes accepted by the Relayer."]
				#[doc = ""]
				#[doc = "Only callable by the current Relayer"]
				pub fn set_network(
					&self,
					network_id: ::core::primitive::u32,
					network_info: runtime_types::pallet_mosaic::pallet::NetworkInfo<
						::core::primitive::u128,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetNetwork,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetNetwork>()?
					};
					if runtime_call_hash ==
						[
							160u8, 198u8, 248u8, 37u8, 164u8, 225u8, 55u8, 176u8, 101u8, 68u8,
							102u8, 254u8, 212u8, 8u8, 185u8, 239u8, 124u8, 80u8, 106u8, 62u8, 48u8,
							209u8, 31u8, 84u8, 48u8, 76u8, 71u8, 179u8, 106u8, 60u8, 107u8, 183u8,
						] {
						let call = SetNetwork { network_id, network_info };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Sets the relayer budget for _incoming_ transactions for specific assets. Does not reset"]
				#[doc = "the current `penalty`."]
				#[doc = ""]
				#[doc = "# Restrictions"]
				#[doc = "- This can only be called by the [`ControlOrigin`](Config::ControlOrigin)"]
				pub fn set_budget(
					&self,
					asset_id: runtime_types::primitives::currency::CurrencyId,
					amount: ::core::primitive::u128,
					decay: runtime_types::pallet_mosaic::decay::BudgetPenaltyDecayer<
						::core::primitive::u128,
						::core::primitive::u32,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetBudget,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetBudget>()?
					};
					if runtime_call_hash ==
						[
							174u8, 78u8, 21u8, 99u8, 221u8, 11u8, 74u8, 80u8, 175u8, 191u8, 232u8,
							140u8, 27u8, 118u8, 217u8, 77u8, 221u8, 220u8, 133u8, 90u8, 119u8,
							32u8, 241u8, 220u8, 253u8, 251u8, 106u8, 198u8, 82u8, 43u8, 199u8,
							60u8,
						] {
						let call = SetBudget { asset_id, amount, decay };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Creates an outgoing transaction request, locking the funds locally until picked up by"]
				#[doc = "the Relayer."]
				#[doc = ""]
				#[doc = "# Restrictions"]
				#[doc = "- Network must be supported."]
				#[doc = "- AssetId must be supported."]
				#[doc = "- Amount must be lower than the networks `max_transfer_size`."]
				#[doc = "- Origin must have sufficient funds."]
				#[doc = "- Transfers near Balance::max may result in overflows, which are caught and returned as"]
				#[doc = "  an error."]
				pub fn transfer_to(
					&self,
					network_id: ::core::primitive::u32,
					asset_id: runtime_types::primitives::currency::CurrencyId,
					address: runtime_types::composable_support::types::EthereumAddress,
					amount: ::core::primitive::u128,
					swap_to_native: ::core::primitive::bool,
					source_user_account: ::subxt::sp_core::crypto::AccountId32,
					amm_swap_info: ::core::option::Option<
						runtime_types::pallet_mosaic::pallet::AmmSwapInfo<
							::core::primitive::u32,
							::core::primitive::u128,
						>,
					>,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						TransferTo,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<TransferTo>()?
					};
					if runtime_call_hash ==
						[
							161u8, 202u8, 213u8, 184u8, 239u8, 215u8, 108u8, 110u8, 78u8, 131u8,
							235u8, 48u8, 171u8, 93u8, 189u8, 166u8, 146u8, 69u8, 167u8, 163u8,
							247u8, 142u8, 146u8, 158u8, 164u8, 153u8, 219u8, 31u8, 183u8, 162u8,
							12u8, 19u8,
						] {
						let call = TransferTo {
							network_id,
							asset_id,
							address,
							amount,
							swap_to_native,
							source_user_account,
							amm_swap_info,
							keep_alive,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "This is called by the Relayer to confirm that it will relay a transaction."]
				#[doc = ""]
				#[doc = "Once this is called, the sender will be unable to reclaim their tokens."]
				#[doc = ""]
				#[doc = "If all the funds are not removed, the reclaim period will not be reset. If the"]
				#[doc = "reclaim period is not reset, the Relayer will still attempt to pick up the"]
				#[doc = "remainder of the transaction."]
				#[doc = ""]
				#[doc = "# Restrictions"]
				#[doc = "- Only callable by the current Relayer"]
				#[doc = "- Outgoing transaction must exist for the user"]
				#[doc = "- Amount must be equal or lower than what the user has locked"]
				#[doc = ""]
				#[doc = "# Note"]
				#[doc = "- Reclaim period is not reset if not all the funds are moved; menaing that the clock"]
				#[doc = "  remains ticking for the relayer to pick up the rest of the transaction."]
				pub fn accept_transfer(
					&self,
					from: ::subxt::sp_core::crypto::AccountId32,
					network_id: ::core::primitive::u32,
					remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
					amount: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						AcceptTransfer,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<AcceptTransfer>()?
					};
					if runtime_call_hash ==
						[
							42u8, 109u8, 170u8, 83u8, 193u8, 150u8, 138u8, 184u8, 168u8, 229u8,
							119u8, 109u8, 150u8, 21u8, 19u8, 119u8, 99u8, 10u8, 59u8, 17u8, 180u8,
							159u8, 242u8, 150u8, 242u8, 154u8, 231u8, 92u8, 86u8, 58u8, 35u8,
							184u8,
						] {
						let call = AcceptTransfer { from, network_id, remote_asset_id, amount };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Claims user funds from the `OutgoingTransactions`, in case that the Relayer has not"]
				#[doc = "picked them up."]
				pub fn claim_stale_to(
					&self,
					asset_id: runtime_types::primitives::currency::CurrencyId,
					to: ::subxt::sp_core::crypto::AccountId32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ClaimStaleTo,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ClaimStaleTo>()?
					};
					if runtime_call_hash ==
						[
							191u8, 195u8, 62u8, 175u8, 207u8, 167u8, 1u8, 12u8, 161u8, 194u8,
							148u8, 40u8, 246u8, 238u8, 240u8, 253u8, 230u8, 156u8, 8u8, 142u8,
							32u8, 31u8, 111u8, 164u8, 248u8, 52u8, 132u8, 188u8, 9u8, 137u8, 171u8,
							19u8,
						] {
						let call = ClaimStaleTo { asset_id, to };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Mints new tokens into the pallet's wallet, ready for the user to be picked up after"]
				#[doc = "`lock_time` blocks have expired."]
				#[doc = ""]
				#[doc = "Only callable by the current Relayer"]
				pub fn timelocked_mint(
					&self,
					network_id: ::core::primitive::u32,
					remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
					to: ::subxt::sp_core::crypto::AccountId32,
					amount: ::core::primitive::u128,
					lock_time: ::core::primitive::u32,
					id: ::subxt::sp_core::H256,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						TimelockedMint,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<TimelockedMint>()?
					};
					if runtime_call_hash ==
						[
							13u8, 250u8, 154u8, 144u8, 242u8, 255u8, 18u8, 41u8, 212u8, 162u8,
							189u8, 4u8, 15u8, 153u8, 90u8, 123u8, 223u8, 147u8, 90u8, 104u8, 196u8,
							86u8, 104u8, 9u8, 133u8, 253u8, 68u8, 249u8, 96u8, 188u8, 202u8, 157u8,
						] {
						let call = TimelockedMint {
							network_id,
							remote_asset_id,
							to,
							amount,
							lock_time,
							id,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Sets the time lock, in blocks, on new transfers"]
				#[doc = ""]
				#[doc = "This can only be called by the [`ControlOrigin`](Config::ControlOrigin)"]
				pub fn set_timelock_duration(
					&self,
					period: ::core::primitive::u32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetTimelockDuration,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetTimelockDuration>()?
					};
					if runtime_call_hash ==
						[
							18u8, 219u8, 228u8, 161u8, 66u8, 87u8, 204u8, 225u8, 100u8, 163u8,
							123u8, 98u8, 146u8, 162u8, 57u8, 21u8, 86u8, 24u8, 238u8, 104u8, 76u8,
							190u8, 6u8, 192u8, 237u8, 253u8, 186u8, 55u8, 64u8, 56u8, 204u8, 133u8,
						] {
						let call = SetTimelockDuration { period };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Burns funds waiting in incoming_transactions that are still unclaimed."]
				#[doc = ""]
				#[doc = "May be used by the Relayer in case of finality issues on the other side of the bridge."]
				pub fn rescind_timelocked_mint(
					&self,
					network_id: ::core::primitive::u32,
					remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
					account: ::subxt::sp_core::crypto::AccountId32,
					untrusted_amount: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RescindTimelockedMint,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RescindTimelockedMint>()?
					};
					if runtime_call_hash ==
						[
							131u8, 18u8, 166u8, 208u8, 104u8, 204u8, 225u8, 95u8, 240u8, 47u8,
							241u8, 212u8, 177u8, 44u8, 81u8, 215u8, 163u8, 141u8, 219u8, 93u8,
							226u8, 225u8, 40u8, 187u8, 3u8, 27u8, 172u8, 47u8, 38u8, 104u8, 2u8,
							240u8,
						] {
						let call = RescindTimelockedMint {
							network_id,
							remote_asset_id,
							account,
							untrusted_amount,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Collects funds deposited by the Relayer into the owner's account"]
				pub fn claim_to(
					&self,
					asset_id: runtime_types::primitives::currency::CurrencyId,
					to: ::subxt::sp_core::crypto::AccountId32,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						ClaimTo,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<ClaimTo>()?
					};
					if runtime_call_hash ==
						[
							147u8, 2u8, 84u8, 134u8, 220u8, 201u8, 103u8, 182u8, 252u8, 175u8,
							212u8, 240u8, 41u8, 8u8, 72u8, 236u8, 237u8, 198u8, 39u8, 24u8, 15u8,
							51u8, 247u8, 79u8, 158u8, 193u8, 181u8, 229u8, 178u8, 111u8, 13u8,
							82u8,
						] {
						let call = ClaimTo { asset_id, to };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Update a network asset mapping."]
				#[doc = ""]
				#[doc = "This can only be called by the [`ControlOrigin`](Config::ControlOrigin)"]
				#[doc = ""]
				#[doc = "Possibly emits one of:"]
				#[doc = "- `AssetMappingCreated`"]
				#[doc = "- `AssetMappingDeleted`"]
				#[doc = "- `AssetMappingUpdated`"]
				pub fn update_asset_mapping(
					&self,
					asset_id: runtime_types::primitives::currency::CurrencyId,
					network_id: ::core::primitive::u32,
					remote_asset_id: ::core::option::Option<
						runtime_types::common::types::MosaicRemoteAssetId,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						UpdateAssetMapping,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<UpdateAssetMapping>()?
					};
					if runtime_call_hash ==
						[
							105u8, 169u8, 179u8, 12u8, 3u8, 143u8, 30u8, 74u8, 33u8, 147u8, 239u8,
							31u8, 24u8, 3u8, 141u8, 211u8, 6u8, 36u8, 182u8, 197u8, 53u8, 186u8,
							251u8, 240u8, 107u8, 253u8, 194u8, 8u8, 241u8, 197u8, 141u8, 217u8,
						] {
						let call = UpdateAssetMapping { asset_id, network_id, remote_asset_id };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Adds a remote AMM for a specific Network"]
				pub fn add_remote_amm_id(
					&self,
					network_id: ::core::primitive::u32,
					amm_id: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						AddRemoteAmmId,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<AddRemoteAmmId>()?
					};
					if runtime_call_hash ==
						[
							86u8, 233u8, 50u8, 215u8, 162u8, 237u8, 119u8, 62u8, 49u8, 54u8, 149u8,
							162u8, 13u8, 157u8, 16u8, 247u8, 50u8, 183u8, 36u8, 229u8, 202u8,
							145u8, 227u8, 176u8, 74u8, 224u8, 186u8, 168u8, 95u8, 209u8, 71u8,
							162u8,
						] {
						let call = AddRemoteAmmId { network_id, amm_id };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Removes a remote AMM for a specific Network"]
				pub fn remove_remote_amm_id(
					&self,
					network_id: ::core::primitive::u32,
					amm_id: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RemoveRemoteAmmId,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RemoveRemoteAmmId>()?
					};
					if runtime_call_hash ==
						[
							28u8, 191u8, 49u8, 107u8, 104u8, 103u8, 198u8, 22u8, 212u8, 164u8,
							134u8, 172u8, 136u8, 216u8, 252u8, 99u8, 107u8, 228u8, 102u8, 185u8,
							166u8, 102u8, 57u8, 79u8, 247u8, 183u8, 52u8, 25u8, 247u8, 42u8, 209u8,
							242u8,
						] {
						let call = RemoveRemoteAmmId { network_id, amm_id };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_mosaic::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "The account of the relayer has been set."]
			pub struct RelayerSet {
				pub relayer: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Event for RelayerSet {
				const PALLET: &'static str = "Mosaic";
				const EVENT: &'static str = "RelayerSet";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "The relayer has been rotated to `account_id`."]
			pub struct RelayerRotated {
				pub ttl: ::core::primitive::u32,
				pub account_id: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Event for RelayerRotated {
				const PALLET: &'static str = "Mosaic";
				const EVENT: &'static str = "RelayerRotated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct BudgetUpdated {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub amount: ::core::primitive::u128,
				pub decay: runtime_types::pallet_mosaic::decay::BudgetPenaltyDecayer<
					::core::primitive::u128,
					::core::primitive::u32,
				>,
			}
			impl ::subxt::Event for BudgetUpdated {
				const PALLET: &'static str = "Mosaic";
				const EVENT: &'static str = "BudgetUpdated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "The `NetworkInfos` `network_info` was updated for `network_id`."]
			pub struct NetworksUpdated {
				pub network_id: ::core::primitive::u32,
				pub network_info:
					runtime_types::pallet_mosaic::pallet::NetworkInfo<::core::primitive::u128>,
			}
			impl ::subxt::Event for NetworksUpdated {
				const PALLET: &'static str = "Mosaic";
				const EVENT: &'static str = "NetworksUpdated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An outgoing tx is created, and locked in the outgoing tx pool."]
			pub struct TransferOut {
				pub id: ::subxt::sp_core::H256,
				pub to: runtime_types::composable_support::types::EthereumAddress,
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub network_id: ::core::primitive::u32,
				pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
				pub amount: ::core::primitive::u128,
				pub swap_to_native: ::core::primitive::bool,
				pub source_user_account: ::subxt::sp_core::crypto::AccountId32,
				pub amm_swap_info: ::core::option::Option<
					runtime_types::pallet_mosaic::pallet::AmmSwapInfo<
						::core::primitive::u32,
						::core::primitive::u128,
					>,
				>,
			}
			impl ::subxt::Event for TransferOut {
				const PALLET: &'static str = "Mosaic";
				const EVENT: &'static str = "TransferOut";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "User claimed outgoing tx that was not (yet) picked up by the relayer"]
			pub struct StaleTxClaimed {
				pub to: ::subxt::sp_core::crypto::AccountId32,
				pub by: ::subxt::sp_core::crypto::AccountId32,
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for StaleTxClaimed {
				const PALLET: &'static str = "Mosaic";
				const EVENT: &'static str = "StaleTxClaimed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An incoming tx is created and waiting for the user to claim."]
			pub struct TransferInto {
				pub id: ::subxt::sp_core::H256,
				pub to: ::subxt::sp_core::crypto::AccountId32,
				pub network_id: ::core::primitive::u32,
				pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for TransferInto {
				const PALLET: &'static str = "Mosaic";
				const EVENT: &'static str = "TransferInto";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "When we have finality issues occur on the Ethereum chain,"]
			#[doc = "we burn the locked `IncomingTransaction` for which we know that it is invalid."]
			pub struct TransferIntoRescined {
				pub account: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
			}
			impl ::subxt::Event for TransferIntoRescined {
				const PALLET: &'static str = "Mosaic";
				const EVENT: &'static str = "TransferIntoRescined";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "The relayer partially accepted the user's `OutgoingTransaction`."]
			pub struct PartialTransferAccepted {
				pub from: ::subxt::sp_core::crypto::AccountId32,
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub network_id: ::core::primitive::u32,
				pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for PartialTransferAccepted {
				const PALLET: &'static str = "Mosaic";
				const EVENT: &'static str = "PartialTransferAccepted";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "The relayer accepted the user's `OutgoingTransaction`."]
			pub struct TransferAccepted {
				pub from: ::subxt::sp_core::crypto::AccountId32,
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub network_id: ::core::primitive::u32,
				pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for TransferAccepted {
				const PALLET: &'static str = "Mosaic";
				const EVENT: &'static str = "TransferAccepted";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "The user claims his `IncomingTransaction` and unlocks the locked amount."]
			pub struct TransferClaimed {
				pub by: ::subxt::sp_core::crypto::AccountId32,
				pub to: ::subxt::sp_core::crypto::AccountId32,
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for TransferClaimed {
				const PALLET: &'static str = "Mosaic";
				const EVENT: &'static str = "TransferClaimed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An asset mapping has been created."]
			pub struct AssetMappingCreated {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub network_id: ::core::primitive::u32,
				pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
			}
			impl ::subxt::Event for AssetMappingCreated {
				const PALLET: &'static str = "Mosaic";
				const EVENT: &'static str = "AssetMappingCreated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An existing asset mapping has been updated."]
			pub struct AssetMappingUpdated {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub network_id: ::core::primitive::u32,
				pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
			}
			impl ::subxt::Event for AssetMappingUpdated {
				const PALLET: &'static str = "Mosaic";
				const EVENT: &'static str = "AssetMappingUpdated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "An existing asset mapping has been deleted."]
			pub struct AssetMappingDeleted {
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub network_id: ::core::primitive::u32,
				pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
			}
			impl ::subxt::Event for AssetMappingDeleted {
				const PALLET: &'static str = "Mosaic";
				const EVENT: &'static str = "AssetMappingDeleted";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct Relayer;
			impl ::subxt::StorageEntry for Relayer {
				const PALLET: &'static str = "Mosaic";
				const STORAGE: &'static str = "Relayer";
				type Value = runtime_types::pallet_mosaic::relayer::StaleRelayer<
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct AssetsInfo<'a>(pub &'a runtime_types::primitives::currency::CurrencyId);
			impl ::subxt::StorageEntry for AssetsInfo<'_> {
				const PALLET: &'static str = "Mosaic";
				const STORAGE: &'static str = "AssetsInfo";
				type Value = runtime_types::pallet_mosaic::pallet::AssetInfo<
					::core::primitive::u32,
					::core::primitive::u128,
					runtime_types::pallet_mosaic::decay::BudgetPenaltyDecayer<
						::core::primitive::u128,
						::core::primitive::u32,
					>,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct NetworkInfos<'a>(pub &'a ::core::primitive::u32);
			impl ::subxt::StorageEntry for NetworkInfos<'_> {
				const PALLET: &'static str = "Mosaic";
				const STORAGE: &'static str = "NetworkInfos";
				type Value =
					runtime_types::pallet_mosaic::pallet::NetworkInfo<::core::primitive::u128>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct TimeLockPeriod;
			impl ::subxt::StorageEntry for TimeLockPeriod {
				const PALLET: &'static str = "Mosaic";
				const STORAGE: &'static str = "TimeLockPeriod";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Nonce;
			impl ::subxt::StorageEntry for Nonce {
				const PALLET: &'static str = "Mosaic";
				const STORAGE: &'static str = "Nonce";
				type Value = ::core::primitive::u128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct RemoteAmmWhitelist<'a>(
				pub &'a ::core::primitive::u32,
				pub &'a ::core::primitive::u128,
			);
			impl ::subxt::StorageEntry for RemoteAmmWhitelist<'_> {
				const PALLET: &'static str = "Mosaic";
				const STORAGE: &'static str = "RemoteAmmWhitelist";
				type Value = ();
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct OutgoingTransactions<'a>(
				pub &'a ::subxt::sp_core::crypto::AccountId32,
				pub &'a runtime_types::primitives::currency::CurrencyId,
			);
			impl ::subxt::StorageEntry for OutgoingTransactions<'_> {
				const PALLET: &'static str = "Mosaic";
				const STORAGE: &'static str = "OutgoingTransactions";
				type Value = (::core::primitive::u128, ::core::primitive::u32);
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct IncomingTransactions<'a>(
				pub &'a ::subxt::sp_core::crypto::AccountId32,
				pub &'a runtime_types::primitives::currency::CurrencyId,
			);
			impl ::subxt::StorageEntry for IncomingTransactions<'_> {
				const PALLET: &'static str = "Mosaic";
				const STORAGE: &'static str = "IncomingTransactions";
				type Value = (::core::primitive::u128, ::core::primitive::u32);
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct LocalToRemoteAsset<'a>(
				pub &'a runtime_types::primitives::currency::CurrencyId,
				pub &'a ::core::primitive::u32,
			);
			impl ::subxt::StorageEntry for LocalToRemoteAsset<'_> {
				const PALLET: &'static str = "Mosaic";
				const STORAGE: &'static str = "LocalToRemoteAsset";
				type Value = runtime_types::common::types::MosaicRemoteAssetId;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct RemoteToLocalAsset<'a>(
				pub &'a runtime_types::common::types::MosaicRemoteAssetId,
				pub &'a ::core::primitive::u32,
			);
			impl ::subxt::StorageEntry for RemoteToLocalAsset<'_> {
				const PALLET: &'static str = "Mosaic";
				const STORAGE: &'static str = "RemoteToLocalAsset";
				type Value = runtime_types::primitives::currency::CurrencyId;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				pub fn relayer(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_mosaic::relayer::StaleRelayer<
								::subxt::sp_core::crypto::AccountId32,
								::core::primitive::u32,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Relayer>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								162u8, 111u8, 161u8, 244u8, 241u8, 227u8, 247u8, 89u8, 62u8, 48u8,
								170u8, 63u8, 52u8, 35u8, 34u8, 229u8, 69u8, 22u8, 92u8, 111u8,
								236u8, 44u8, 7u8, 178u8, 54u8, 96u8, 160u8, 237u8, 22u8, 174u8,
								92u8, 19u8,
							] {
							let entry = Relayer;
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn assets_info(
					&self,
					_0: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_mosaic::pallet::AssetInfo<
								::core::primitive::u32,
								::core::primitive::u128,
								runtime_types::pallet_mosaic::decay::BudgetPenaltyDecayer<
									::core::primitive::u128,
									::core::primitive::u32,
								>,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AssetsInfo>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								109u8, 54u8, 96u8, 230u8, 135u8, 142u8, 220u8, 42u8, 142u8, 196u8,
								6u8, 161u8, 133u8, 98u8, 106u8, 137u8, 107u8, 58u8, 127u8, 75u8,
								253u8, 186u8, 71u8, 218u8, 99u8, 107u8, 171u8, 187u8, 26u8, 205u8,
								252u8, 17u8,
							] {
							let entry = AssetsInfo(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn assets_info_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, AssetsInfo<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AssetsInfo>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								109u8, 54u8, 96u8, 230u8, 135u8, 142u8, 220u8, 42u8, 142u8, 196u8,
								6u8, 161u8, 133u8, 98u8, 106u8, 137u8, 107u8, 58u8, 127u8, 75u8,
								253u8, 186u8, 71u8, 218u8, 99u8, 107u8, 171u8, 187u8, 26u8, 205u8,
								252u8, 17u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn network_infos(
					&self,
					_0: &'a ::core::primitive::u32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_mosaic::pallet::NetworkInfo<
								::core::primitive::u128,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<NetworkInfos>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								36u8, 35u8, 135u8, 3u8, 36u8, 91u8, 109u8, 55u8, 52u8, 99u8, 16u8,
								208u8, 164u8, 159u8, 29u8, 218u8, 151u8, 134u8, 187u8, 204u8,
								178u8, 153u8, 186u8, 156u8, 210u8, 254u8, 5u8, 85u8, 117u8, 96u8,
								100u8, 198u8,
							] {
							let entry = NetworkInfos(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn network_infos_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, NetworkInfos<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<NetworkInfos>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								36u8, 35u8, 135u8, 3u8, 36u8, 91u8, 109u8, 55u8, 52u8, 99u8, 16u8,
								208u8, 164u8, 159u8, 29u8, 218u8, 151u8, 134u8, 187u8, 204u8,
								178u8, 153u8, 186u8, 156u8, 210u8, 254u8, 5u8, 85u8, 117u8, 96u8,
								100u8, 198u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn time_lock_period(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<TimeLockPeriod>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								198u8, 108u8, 208u8, 63u8, 180u8, 103u8, 193u8, 115u8, 31u8, 129u8,
								105u8, 246u8, 81u8, 44u8, 98u8, 196u8, 131u8, 145u8, 247u8, 150u8,
								221u8, 100u8, 93u8, 163u8, 200u8, 179u8, 88u8, 194u8, 133u8, 143u8,
								8u8, 25u8,
							] {
							let entry = TimeLockPeriod;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn nonce(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Nonce>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								39u8, 133u8, 225u8, 169u8, 101u8, 10u8, 59u8, 139u8, 91u8, 154u8,
								209u8, 7u8, 168u8, 217u8, 46u8, 251u8, 99u8, 138u8, 131u8, 106u8,
								12u8, 221u8, 20u8, 117u8, 159u8, 18u8, 82u8, 55u8, 213u8, 214u8,
								18u8, 48u8,
							] {
							let entry = Nonce;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Remote AMM IDs that exist (NetworkId, AmmId)."]
				#[doc = " Note that this is actually a set that does bookkeeping of valid AmmIds."]
				#[doc = " Therefore, the value type is (), because it is irrelevant for our use case."]
				pub fn remote_amm_whitelist(
					&self,
					_0: &'a ::core::primitive::u32,
					_1: &'a ::core::primitive::u128,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<()>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<RemoteAmmWhitelist>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								141u8, 249u8, 50u8, 17u8, 142u8, 111u8, 4u8, 128u8, 175u8, 52u8,
								74u8, 186u8, 230u8, 148u8, 50u8, 102u8, 19u8, 164u8, 27u8, 119u8,
								33u8, 38u8, 201u8, 244u8, 66u8, 253u8, 38u8, 5u8, 97u8, 14u8,
								202u8, 10u8,
							] {
							let entry = RemoteAmmWhitelist(_0, _1);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Remote AMM IDs that exist (NetworkId, AmmId)."]
				#[doc = " Note that this is actually a set that does bookkeeping of valid AmmIds."]
				#[doc = " Therefore, the value type is (), because it is irrelevant for our use case."]
				pub fn remote_amm_whitelist_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, RemoteAmmWhitelist<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<RemoteAmmWhitelist>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								141u8, 249u8, 50u8, 17u8, 142u8, 111u8, 4u8, 128u8, 175u8, 52u8,
								74u8, 186u8, 230u8, 148u8, 50u8, 102u8, 19u8, 164u8, 27u8, 119u8,
								33u8, 38u8, 201u8, 244u8, 66u8, 253u8, 38u8, 5u8, 97u8, 14u8,
								202u8, 10u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Locked outgoing tx out of Picasso, that a relayer needs to process."]
				pub fn outgoing_transactions(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					_1: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<(::core::primitive::u128, ::core::primitive::u32)>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<OutgoingTransactions>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								190u8, 194u8, 68u8, 83u8, 47u8, 226u8, 138u8, 144u8, 117u8, 95u8,
								49u8, 128u8, 182u8, 176u8, 228u8, 95u8, 102u8, 62u8, 180u8, 198u8,
								131u8, 57u8, 145u8, 34u8, 78u8, 252u8, 108u8, 38u8, 168u8, 234u8,
								84u8, 91u8,
							] {
							let entry = OutgoingTransactions(_0, _1);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Locked outgoing tx out of Picasso, that a relayer needs to process."]
				pub fn outgoing_transactions_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, OutgoingTransactions<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<OutgoingTransactions>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								190u8, 194u8, 68u8, 83u8, 47u8, 226u8, 138u8, 144u8, 117u8, 95u8,
								49u8, 128u8, 182u8, 176u8, 228u8, 95u8, 102u8, 62u8, 180u8, 198u8,
								131u8, 57u8, 145u8, 34u8, 78u8, 252u8, 108u8, 38u8, 168u8, 234u8,
								84u8, 91u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Locked incoming tx into Picasso that the user needs to claim."]
				pub fn incoming_transactions(
					&self,
					_0: &'a ::subxt::sp_core::crypto::AccountId32,
					_1: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<(::core::primitive::u128, ::core::primitive::u32)>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<IncomingTransactions>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								41u8, 76u8, 153u8, 96u8, 212u8, 142u8, 16u8, 61u8, 205u8, 249u8,
								194u8, 250u8, 146u8, 86u8, 233u8, 66u8, 217u8, 198u8, 123u8, 92u8,
								55u8, 188u8, 244u8, 193u8, 148u8, 195u8, 212u8, 129u8, 207u8,
								140u8, 152u8, 106u8,
							] {
							let entry = IncomingTransactions(_0, _1);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Locked incoming tx into Picasso that the user needs to claim."]
				pub fn incoming_transactions_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, IncomingTransactions<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<IncomingTransactions>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								41u8, 76u8, 153u8, 96u8, 212u8, 142u8, 16u8, 61u8, 205u8, 249u8,
								194u8, 250u8, 146u8, 86u8, 233u8, 66u8, 217u8, 198u8, 123u8, 92u8,
								55u8, 188u8, 244u8, 193u8, 148u8, 195u8, 212u8, 129u8, 207u8,
								140u8, 152u8, 106u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn local_to_remote_asset(
					&self,
					_0: &'a runtime_types::primitives::currency::CurrencyId,
					_1: &'a ::core::primitive::u32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<runtime_types::common::types::MosaicRemoteAssetId>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<LocalToRemoteAsset>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								98u8, 1u8, 171u8, 1u8, 131u8, 203u8, 23u8, 49u8, 213u8, 105u8,
								143u8, 62u8, 102u8, 109u8, 198u8, 253u8, 236u8, 132u8, 253u8, 18u8,
								45u8, 59u8, 167u8, 16u8, 76u8, 184u8, 209u8, 165u8, 110u8, 117u8,
								237u8, 203u8,
							] {
							let entry = LocalToRemoteAsset(_0, _1);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn local_to_remote_asset_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, LocalToRemoteAsset<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<LocalToRemoteAsset>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								98u8, 1u8, 171u8, 1u8, 131u8, 203u8, 23u8, 49u8, 213u8, 105u8,
								143u8, 62u8, 102u8, 109u8, 198u8, 253u8, 236u8, 132u8, 253u8, 18u8,
								45u8, 59u8, 167u8, 16u8, 76u8, 184u8, 209u8, 165u8, 110u8, 117u8,
								237u8, 203u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn remote_to_local_asset(
					&self,
					_0: &'a runtime_types::common::types::MosaicRemoteAssetId,
					_1: &'a ::core::primitive::u32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<RemoteToLocalAsset>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								58u8, 235u8, 50u8, 6u8, 149u8, 142u8, 174u8, 67u8, 214u8, 98u8,
								158u8, 34u8, 245u8, 94u8, 62u8, 31u8, 140u8, 119u8, 160u8, 35u8,
								191u8, 37u8, 153u8, 61u8, 62u8, 197u8, 135u8, 100u8, 244u8, 143u8,
								6u8, 108u8,
							] {
							let entry = RemoteToLocalAsset(_0, _1);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn remote_to_local_asset_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, RemoteToLocalAsset<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<RemoteToLocalAsset>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								58u8, 235u8, 50u8, 6u8, 149u8, 142u8, 174u8, 67u8, 214u8, 98u8,
								158u8, 34u8, 245u8, 94u8, 62u8, 31u8, 140u8, 119u8, 160u8, 35u8,
								191u8, 37u8, 153u8, 61u8, 62u8, 197u8, 135u8, 100u8, 244u8, 143u8,
								6u8, 108u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The minimum time to live before a relayer account rotation."]
				pub fn minimum_ttl(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Mosaic", "MinimumTTL")? ==
						[
							41u8, 211u8, 120u8, 190u8, 186u8, 126u8, 42u8, 130u8, 164u8, 93u8,
							103u8, 72u8, 38u8, 215u8, 227u8, 123u8, 177u8, 184u8, 173u8, 235u8,
							139u8, 53u8, 153u8, 1u8, 73u8, 179u8, 126u8, 229u8, 245u8, 137u8,
							164u8, 156u8,
						] {
						let pallet = metadata.pallet("Mosaic")?;
						let constant = pallet.constant("MinimumTTL")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The minimum period for which we lock outgoing/incoming funds."]
				pub fn minimum_time_lock_period(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Mosaic", "MinimumTimeLockPeriod")? ==
						[
							150u8, 142u8, 200u8, 56u8, 248u8, 62u8, 32u8, 240u8, 146u8, 121u8,
							218u8, 245u8, 211u8, 219u8, 101u8, 119u8, 70u8, 111u8, 34u8, 173u8,
							76u8, 219u8, 176u8, 50u8, 194u8, 91u8, 16u8, 179u8, 230u8, 114u8,
							136u8, 122u8,
						] {
						let pallet = metadata.pallet("Mosaic")?;
						let constant = pallet.constant("MinimumTimeLockPeriod")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn timelock_period(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Mosaic", "timelock_period")? ==
						[
							226u8, 146u8, 121u8, 251u8, 110u8, 243u8, 205u8, 137u8, 123u8, 146u8,
							47u8, 252u8, 15u8, 71u8, 59u8, 157u8, 201u8, 91u8, 13u8, 192u8, 221u8,
							200u8, 32u8, 110u8, 216u8, 77u8, 67u8, 61u8, 13u8, 148u8, 132u8, 172u8,
						] {
						let pallet = metadata.pallet("Mosaic")?;
						let constant = pallet.constant("timelock_period")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod liquidations {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AddLiquidationStrategy {
				pub configuraiton:
					runtime_types::pallet_liquidations::pallet::LiquidationStrategyConfiguration,
			}
			impl ::subxt::Call for AddLiquidationStrategy {
				const PALLET: &'static str = "Liquidations";
				const FUNCTION: &'static str = "add_liquidation_strategy";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Sell {
				pub order: runtime_types::composable_traits::defi::Sell<
					runtime_types::primitives::currency::CurrencyId,
					::core::primitive::u128,
				>,
				pub configuration: ::std::vec::Vec<::core::primitive::u32>,
			}
			impl ::subxt::Call for Sell {
				const PALLET: &'static str = "Liquidations";
				const FUNCTION: &'static str = "sell";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				pub fn add_liquidation_strategy(
					&self,
					configuraiton : runtime_types :: pallet_liquidations :: pallet :: LiquidationStrategyConfiguration,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						AddLiquidationStrategy,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<AddLiquidationStrategy>()?
					};
					if runtime_call_hash ==
						[
							252u8, 201u8, 156u8, 202u8, 220u8, 98u8, 77u8, 91u8, 251u8, 51u8,
							111u8, 241u8, 22u8, 236u8, 90u8, 29u8, 29u8, 208u8, 101u8, 13u8, 206u8,
							164u8, 31u8, 111u8, 23u8, 239u8, 7u8, 225u8, 117u8, 109u8, 30u8, 135u8,
						] {
						let call = AddLiquidationStrategy { configuraiton };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn sell(
					&self,
					order: runtime_types::composable_traits::defi::Sell<
						runtime_types::primitives::currency::CurrencyId,
						::core::primitive::u128,
					>,
					configuration: ::std::vec::Vec<::core::primitive::u32>,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Sell, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Sell>()?
					};
					if runtime_call_hash ==
						[
							209u8, 215u8, 136u8, 202u8, 217u8, 208u8, 150u8, 234u8, 213u8, 250u8,
							39u8, 76u8, 184u8, 254u8, 36u8, 85u8, 56u8, 61u8, 39u8, 175u8, 41u8,
							121u8, 92u8, 229u8, 217u8, 118u8, 186u8, 198u8, 61u8, 157u8, 102u8,
							27u8,
						] {
						let call = Sell { order, configuration };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_liquidations::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct PositionWasSentToLiquidation;
			impl ::subxt::Event for PositionWasSentToLiquidation {
				const PALLET: &'static str = "Liquidations";
				const EVENT: &'static str = "PositionWasSentToLiquidation";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct Strategies<'a>(pub &'a ::core::primitive::u32);
			impl ::subxt::StorageEntry for Strategies<'_> {
				const PALLET: &'static str = "Liquidations";
				const STORAGE: &'static str = "Strategies";
				type Value =
					runtime_types::pallet_liquidations::pallet::LiquidationStrategyConfiguration;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct StrategyIndex;
			impl ::subxt::StorageEntry for StrategyIndex {
				const PALLET: &'static str = "Liquidations";
				const STORAGE: &'static str = "StrategyIndex";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct DefaultStrategyIndex;
			impl ::subxt::StorageEntry for DefaultStrategyIndex {
				const PALLET: &'static str = "Liquidations";
				const STORAGE: &'static str = "DefaultStrategyIndex";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}				pub fn strategies (& self , _0 : & 'a :: core :: primitive :: u32 , block_hash : :: core :: option :: Option < T :: Hash > ,) -> impl :: core :: future :: Future < Output = :: core :: result :: Result < :: core :: option :: Option < runtime_types :: pallet_liquidations :: pallet :: LiquidationStrategyConfiguration > , :: subxt :: BasicError > > + 'a{
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Strategies>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								47u8, 233u8, 156u8, 10u8, 172u8, 60u8, 246u8, 105u8, 209u8, 210u8,
								244u8, 99u8, 37u8, 215u8, 33u8, 82u8, 106u8, 24u8, 38u8, 195u8,
								43u8, 3u8, 3u8, 216u8, 196u8, 155u8, 214u8, 236u8, 141u8, 198u8,
								23u8, 63u8,
							] {
							let entry = Strategies(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn strategies_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Strategies<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Strategies>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								47u8, 233u8, 156u8, 10u8, 172u8, 60u8, 246u8, 105u8, 209u8, 210u8,
								244u8, 99u8, 37u8, 215u8, 33u8, 82u8, 106u8, 24u8, 38u8, 195u8,
								43u8, 3u8, 3u8, 216u8, 196u8, 155u8, 214u8, 236u8, 141u8, 198u8,
								23u8, 63u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn strategy_index(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<StrategyIndex>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								89u8, 101u8, 246u8, 92u8, 182u8, 143u8, 108u8, 163u8, 14u8, 117u8,
								170u8, 242u8, 99u8, 108u8, 222u8, 126u8, 78u8, 180u8, 167u8, 177u8,
								190u8, 88u8, 56u8, 183u8, 39u8, 54u8, 136u8, 250u8, 14u8, 114u8,
								203u8, 14u8,
							] {
							let entry = StrategyIndex;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn default_strategy_index(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<DefaultStrategyIndex>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								160u8, 45u8, 68u8, 164u8, 1u8, 72u8, 128u8, 238u8, 252u8, 3u8,
								233u8, 149u8, 129u8, 157u8, 171u8, 181u8, 227u8, 212u8, 177u8,
								15u8, 19u8, 158u8, 39u8, 13u8, 2u8, 7u8, 179u8, 33u8, 125u8, 169u8,
								81u8, 253u8,
							] {
							let entry = DefaultStrategyIndex;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				pub fn pallet_id(
					&self,
				) -> ::core::result::Result<
					runtime_types::frame_support::PalletId,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Liquidations", "PalletId")? ==
						[
							186u8, 16u8, 158u8, 138u8, 78u8, 5u8, 241u8, 150u8, 142u8, 188u8, 21u8,
							147u8, 9u8, 103u8, 158u8, 67u8, 23u8, 235u8, 77u8, 240u8, 97u8, 109u8,
							43u8, 100u8, 193u8, 116u8, 201u8, 2u8, 21u8, 217u8, 16u8, 127u8,
						] {
						let pallet = metadata.pallet("Liquidations")?;
						let constant = pallet.constant("PalletId")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod lending {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct CreateMarket {
				pub input: runtime_types::composable_traits::lending::CreateInput<
					::core::primitive::u32,
					runtime_types::primitives::currency::CurrencyId,
					::core::primitive::u32,
				>,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for CreateMarket {
				const PALLET: &'static str = "Lending";
				const FUNCTION: &'static str = "create_market";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct UpdateMarket {
				pub market_id: runtime_types::pallet_lending::types::MarketIndex,
				pub input: runtime_types::composable_traits::lending::UpdateInput<
					::core::primitive::u32,
					::core::primitive::u32,
				>,
			}
			impl ::subxt::Call for UpdateMarket {
				const PALLET: &'static str = "Lending";
				const FUNCTION: &'static str = "update_market";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct DepositCollateral {
				pub market_id: runtime_types::pallet_lending::types::MarketIndex,
				pub amount: ::core::primitive::u128,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for DepositCollateral {
				const PALLET: &'static str = "Lending";
				const FUNCTION: &'static str = "deposit_collateral";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct WithdrawCollateral {
				pub market_id: runtime_types::pallet_lending::types::MarketIndex,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Call for WithdrawCollateral {
				const PALLET: &'static str = "Lending";
				const FUNCTION: &'static str = "withdraw_collateral";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Borrow {
				pub market_id: runtime_types::pallet_lending::types::MarketIndex,
				pub amount_to_borrow: ::core::primitive::u128,
			}
			impl ::subxt::Call for Borrow {
				const PALLET: &'static str = "Lending";
				const FUNCTION: &'static str = "borrow";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RepayBorrow {
				pub market_id: runtime_types::pallet_lending::types::MarketIndex,
				pub beneficiary: ::subxt::sp_core::crypto::AccountId32,
				pub amount: runtime_types::composable_traits::lending::RepayStrategy<
					::core::primitive::u128,
				>,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for RepayBorrow {
				const PALLET: &'static str = "Lending";
				const FUNCTION: &'static str = "repay_borrow";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Liquidate {
				pub market_id: runtime_types::pallet_lending::types::MarketIndex,
				pub borrowers: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
					::subxt::sp_core::crypto::AccountId32,
				>,
			}
			impl ::subxt::Call for Liquidate {
				const PALLET: &'static str = "Lending";
				const FUNCTION: &'static str = "liquidate";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Create a new lending market."]
				#[doc = "- `origin` : Sender of this extrinsic. Manager for new market to be created. Can pause"]
				#[doc = "  borrow operations."]
				#[doc = "- `input`   : Borrow & deposits of assets, persentages."]
				#[doc = ""]
				#[doc = "`origin` irreversibly pays `T::OracleMarketCreationStake`."]
				pub fn create_market(
					&self,
					input: runtime_types::composable_traits::lending::CreateInput<
						::core::primitive::u32,
						runtime_types::primitives::currency::CurrencyId,
						::core::primitive::u32,
					>,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						CreateMarket,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<CreateMarket>()?
					};
					if runtime_call_hash ==
						[
							243u8, 121u8, 199u8, 53u8, 224u8, 86u8, 83u8, 128u8, 43u8, 197u8, 17u8,
							17u8, 13u8, 53u8, 20u8, 71u8, 156u8, 30u8, 136u8, 60u8, 131u8, 217u8,
							120u8, 122u8, 150u8, 63u8, 143u8, 148u8, 33u8, 130u8, 158u8, 19u8,
						] {
						let call = CreateMarket { input, keep_alive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "owner must be very careful calling this"]
				pub fn update_market(
					&self,
					market_id: runtime_types::pallet_lending::types::MarketIndex,
					input: runtime_types::composable_traits::lending::UpdateInput<
						::core::primitive::u32,
						::core::primitive::u32,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						UpdateMarket,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<UpdateMarket>()?
					};
					if runtime_call_hash ==
						[
							139u8, 167u8, 159u8, 246u8, 151u8, 73u8, 126u8, 77u8, 26u8, 243u8, 4u8,
							194u8, 190u8, 75u8, 172u8, 154u8, 246u8, 115u8, 60u8, 23u8, 19u8, 94u8,
							94u8, 26u8, 217u8, 198u8, 172u8, 172u8, 254u8, 55u8, 177u8, 154u8,
						] {
						let call = UpdateMarket { market_id, input };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Deposit collateral to market."]
				#[doc = "- `origin` : Sender of this extrinsic."]
				#[doc = "- `market` : Market index to which collateral will be deposited."]
				#[doc = "- `amount` : Amount of collateral to be deposited."]
				pub fn deposit_collateral(
					&self,
					market_id: runtime_types::pallet_lending::types::MarketIndex,
					amount: ::core::primitive::u128,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						DepositCollateral,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<DepositCollateral>()?
					};
					if runtime_call_hash ==
						[
							92u8, 52u8, 212u8, 103u8, 5u8, 175u8, 65u8, 145u8, 6u8, 100u8, 34u8,
							241u8, 254u8, 43u8, 253u8, 66u8, 113u8, 55u8, 36u8, 207u8, 139u8,
							167u8, 123u8, 194u8, 13u8, 145u8, 78u8, 130u8, 73u8, 90u8, 61u8, 213u8,
						] {
						let call = DepositCollateral { market_id, amount, keep_alive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Withdraw collateral from market."]
				#[doc = "- `origin` : Sender of this extrinsic."]
				#[doc = "- `market_id` : Market index from which collateral will be withdraw."]
				#[doc = "- `amount` : Amount of collateral to be withdrawn."]
				pub fn withdraw_collateral(
					&self,
					market_id: runtime_types::pallet_lending::types::MarketIndex,
					amount: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						WithdrawCollateral,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<WithdrawCollateral>()?
					};
					if runtime_call_hash ==
						[
							193u8, 66u8, 178u8, 27u8, 218u8, 1u8, 48u8, 91u8, 213u8, 132u8, 74u8,
							66u8, 70u8, 184u8, 11u8, 176u8, 21u8, 72u8, 5u8, 205u8, 235u8, 42u8,
							47u8, 228u8, 30u8, 41u8, 47u8, 97u8, 227u8, 53u8, 236u8, 35u8,
						] {
						let call = WithdrawCollateral { market_id, amount };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Borrow asset against deposited collateral."]
				#[doc = "- `origin` : Sender of this extrinsic. (Also the user who wants to borrow from market.)"]
				#[doc = "- `market_id` : Market index from which user wants to borrow."]
				#[doc = "- `amount_to_borrow` : Amount which user wants to borrow."]
				pub fn borrow(
					&self,
					market_id: runtime_types::pallet_lending::types::MarketIndex,
					amount_to_borrow: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Borrow, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Borrow>()?
					};
					if runtime_call_hash ==
						[
							250u8, 191u8, 161u8, 251u8, 209u8, 39u8, 36u8, 22u8, 1u8, 79u8, 51u8,
							213u8, 17u8, 19u8, 25u8, 47u8, 74u8, 246u8, 24u8, 23u8, 6u8, 165u8,
							125u8, 241u8, 30u8, 223u8, 174u8, 91u8, 148u8, 252u8, 11u8, 137u8,
						] {
						let call = Borrow { market_id, amount_to_borrow };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Repay part or all of the borrow in the given market."]
				#[doc = ""]
				#[doc = "# Parameters"]
				#[doc = ""]
				#[doc = "- `origin` : Sender of this extrinsic. (Also the user who repays beneficiary's borrow.)"]
				#[doc = "- `market_id` : [`MarketIndex`] of the market being repaid."]
				#[doc = "- `beneficiary` : [`AccountId`] of the account who is in debt to (has borrowed assets"]
				#[doc = "  from) the market. This can be same or different from the `origin`, allowing one"]
				#[doc = "  account to pay off another's debts."]
				#[doc = "- `amount`: The amount to repay. See [`RepayStrategy`] for more information."]
				pub fn repay_borrow(
					&self,
					market_id: runtime_types::pallet_lending::types::MarketIndex,
					beneficiary: ::subxt::sp_core::crypto::AccountId32,
					amount: runtime_types::composable_traits::lending::RepayStrategy<
						::core::primitive::u128,
					>,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RepayBorrow,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RepayBorrow>()?
					};
					if runtime_call_hash ==
						[
							90u8, 53u8, 172u8, 88u8, 161u8, 128u8, 23u8, 10u8, 83u8, 148u8, 68u8,
							14u8, 85u8, 238u8, 9u8, 33u8, 147u8, 49u8, 107u8, 239u8, 173u8, 88u8,
							66u8, 33u8, 146u8, 75u8, 148u8, 230u8, 126u8, 39u8, 69u8, 136u8,
						] {
						let call = RepayBorrow { market_id, beneficiary, amount, keep_alive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Check if borrows for the `borrowers` accounts are required to be liquidated, initiate"]
				#[doc = "liquidation."]
				#[doc = "- `origin` : Sender of this extrinsic."]
				#[doc = "- `market_id` : Market index from which `borrower` has taken borrow."]
				#[doc = "- `borrowers` : Vector of borrowers accounts' ids."]
				pub fn liquidate(
					&self,
					market_id: runtime_types::pallet_lending::types::MarketIndex,
					borrowers: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
						::subxt::sp_core::crypto::AccountId32,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Liquidate,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Liquidate>()?
					};
					if runtime_call_hash ==
						[
							249u8, 237u8, 156u8, 11u8, 120u8, 253u8, 221u8, 241u8, 170u8, 184u8,
							113u8, 30u8, 43u8, 12u8, 78u8, 72u8, 84u8, 72u8, 210u8, 253u8, 248u8,
							206u8, 134u8, 231u8, 46u8, 57u8, 190u8, 22u8, 177u8, 184u8, 84u8,
							105u8,
						] {
						let call = Liquidate { market_id, borrowers };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_lending::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Event emitted when new lending market is created."]
			pub struct MarketCreated {
				pub market_id: runtime_types::pallet_lending::types::MarketIndex,
				pub vault_id: ::core::primitive::u64,
				pub manager: ::subxt::sp_core::crypto::AccountId32,
				pub currency_pair: runtime_types::composable_traits::defi::CurrencyPair<
					runtime_types::primitives::currency::CurrencyId,
				>,
			}
			impl ::subxt::Event for MarketCreated {
				const PALLET: &'static str = "Lending";
				const EVENT: &'static str = "MarketCreated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct MarketUpdated {
				pub market_id: runtime_types::pallet_lending::types::MarketIndex,
				pub input: runtime_types::composable_traits::lending::UpdateInput<
					::core::primitive::u32,
					::core::primitive::u32,
				>,
			}
			impl ::subxt::Event for MarketUpdated {
				const PALLET: &'static str = "Lending";
				const EVENT: &'static str = "MarketUpdated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Event emitted when collateral is deposited."]
			pub struct CollateralDeposited {
				pub sender: ::subxt::sp_core::crypto::AccountId32,
				pub market_id: runtime_types::pallet_lending::types::MarketIndex,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for CollateralDeposited {
				const PALLET: &'static str = "Lending";
				const EVENT: &'static str = "CollateralDeposited";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Event emitted when collateral is withdrawed."]
			pub struct CollateralWithdrawn {
				pub sender: ::subxt::sp_core::crypto::AccountId32,
				pub market_id: runtime_types::pallet_lending::types::MarketIndex,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for CollateralWithdrawn {
				const PALLET: &'static str = "Lending";
				const EVENT: &'static str = "CollateralWithdrawn";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Event emitted when user borrows from given market."]
			pub struct Borrowed {
				pub sender: ::subxt::sp_core::crypto::AccountId32,
				pub market_id: runtime_types::pallet_lending::types::MarketIndex,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for Borrowed {
				const PALLET: &'static str = "Lending";
				const EVENT: &'static str = "Borrowed";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Event emitted when user repays borrow of beneficiary in given market."]
			pub struct BorrowRepaid {
				pub sender: ::subxt::sp_core::crypto::AccountId32,
				pub market_id: runtime_types::pallet_lending::types::MarketIndex,
				pub beneficiary: ::subxt::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for BorrowRepaid {
				const PALLET: &'static str = "Lending";
				const EVENT: &'static str = "BorrowRepaid";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Event emitted when a liquidation is initiated for a loan."]
			pub struct LiquidationInitiated {
				pub market_id: runtime_types::pallet_lending::types::MarketIndex,
				pub borrowers: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
			}
			impl ::subxt::Event for LiquidationInitiated {
				const PALLET: &'static str = "Lending";
				const EVENT: &'static str = "LiquidationInitiated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Event emitted to warn that loan may go under collaterlized soon."]
			pub struct MayGoUnderCollateralizedSoon {
				pub market_id: runtime_types::pallet_lending::types::MarketIndex,
				pub account: ::subxt::sp_core::crypto::AccountId32,
			}
			impl ::subxt::Event for MayGoUnderCollateralizedSoon {
				const PALLET: &'static str = "Lending";
				const EVENT: &'static str = "MayGoUnderCollateralizedSoon";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct LendingCount;
			impl ::subxt::StorageEntry for LendingCount {
				const PALLET: &'static str = "Lending";
				const STORAGE: &'static str = "LendingCount";
				type Value = runtime_types::pallet_lending::types::MarketIndex;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Markets<'a>(pub &'a runtime_types::pallet_lending::types::MarketIndex);
			impl ::subxt::StorageEntry for Markets<'_> {
				const PALLET: &'static str = "Lending";
				const STORAGE: &'static str = "Markets";
				type Value = runtime_types::composable_traits::lending::MarketConfig<
					::core::primitive::u64,
					runtime_types::primitives::currency::CurrencyId,
					::subxt::sp_core::crypto::AccountId32,
					::core::primitive::u32,
					::core::primitive::u32,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct DebtTokenForMarket<'a>(
				pub &'a runtime_types::pallet_lending::types::MarketIndex,
			);
			impl ::subxt::StorageEntry for DebtTokenForMarket<'_> {
				const PALLET: &'static str = "Lending";
				const STORAGE: &'static str = "DebtTokenForMarket";
				type Value = runtime_types::primitives::currency::CurrencyId;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct DebtIndex<'a>(
				pub &'a runtime_types::pallet_lending::types::MarketIndex,
				pub &'a ::subxt::sp_core::crypto::AccountId32,
			);
			impl ::subxt::StorageEntry for DebtIndex<'_> {
				const PALLET: &'static str = "Lending";
				const STORAGE: &'static str = "DebtIndex";
				type Value = runtime_types::sp_arithmetic::fixed_point::FixedU128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
						::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
					])
				}
			}
			pub struct BorrowTimestamp<'a>(
				pub &'a runtime_types::pallet_lending::types::MarketIndex,
				pub &'a ::subxt::sp_core::crypto::AccountId32,
			);
			impl ::subxt::StorageEntry for BorrowTimestamp<'_> {
				const PALLET: &'static str = "Lending";
				const STORAGE: &'static str = "BorrowTimestamp";
				type Value = ::core::primitive::u64;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
						::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
					])
				}
			}
			pub struct BorrowRent<'a>(
				pub &'a runtime_types::pallet_lending::types::MarketIndex,
				pub &'a ::subxt::sp_core::crypto::AccountId32,
			);
			impl ::subxt::StorageEntry for BorrowRent<'_> {
				const PALLET: &'static str = "Lending";
				const STORAGE: &'static str = "BorrowRent";
				type Value = ::core::primitive::u128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
						::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
					])
				}
			}
			pub struct BorrowIndex<'a>(pub &'a runtime_types::pallet_lending::types::MarketIndex);
			impl ::subxt::StorageEntry for BorrowIndex<'_> {
				const PALLET: &'static str = "Lending";
				const STORAGE: &'static str = "BorrowIndex";
				type Value = runtime_types::sp_arithmetic::fixed_point::FixedU128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct AccountCollateral<'a>(
				pub &'a runtime_types::pallet_lending::types::MarketIndex,
				pub &'a ::subxt::sp_core::crypto::AccountId32,
			);
			impl ::subxt::StorageEntry for AccountCollateral<'_> {
				const PALLET: &'static str = "Lending";
				const STORAGE: &'static str = "AccountCollateral";
				type Value = ::core::primitive::u128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct LastBlockTimestamp;
			impl ::subxt::StorageEntry for LastBlockTimestamp {
				const PALLET: &'static str = "Lending";
				const STORAGE: &'static str = "LastBlockTimestamp";
				type Value = ::core::primitive::u64;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " Lending instances counter"]
				pub fn lending_count(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::pallet_lending::types::MarketIndex,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<LendingCount>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								164u8, 164u8, 124u8, 80u8, 99u8, 177u8, 138u8, 80u8, 164u8, 58u8,
								169u8, 83u8, 3u8, 22u8, 175u8, 28u8, 51u8, 12u8, 226u8, 132u8,
								188u8, 53u8, 187u8, 182u8, 63u8, 250u8, 89u8, 74u8, 54u8, 34u8,
								215u8, 151u8,
							] {
							let entry = LendingCount;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Indexed lending instances. Maps markets to their respective [`MarketConfig`]."]
				#[doc = ""]
				#[doc = " ```text"]
				#[doc = " MarketIndex -> MarketConfig"]
				#[doc = " ```"]
				pub fn markets(
					&self,
					_0: &'a runtime_types::pallet_lending::types::MarketIndex,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::composable_traits::lending::MarketConfig<
								::core::primitive::u64,
								runtime_types::primitives::currency::CurrencyId,
								::subxt::sp_core::crypto::AccountId32,
								::core::primitive::u32,
								::core::primitive::u32,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Markets>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								222u8, 82u8, 242u8, 170u8, 16u8, 113u8, 213u8, 51u8, 225u8, 148u8,
								12u8, 31u8, 172u8, 96u8, 68u8, 200u8, 20u8, 78u8, 158u8, 6u8, 69u8,
								46u8, 9u8, 115u8, 42u8, 114u8, 103u8, 155u8, 128u8, 141u8, 98u8,
								179u8,
							] {
							let entry = Markets(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Indexed lending instances. Maps markets to their respective [`MarketConfig`]."]
				#[doc = ""]
				#[doc = " ```text"]
				#[doc = " MarketIndex -> MarketConfig"]
				#[doc = " ```"]
				pub fn markets_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Markets<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Markets>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								222u8, 82u8, 242u8, 170u8, 16u8, 113u8, 213u8, 51u8, 225u8, 148u8,
								12u8, 31u8, 172u8, 96u8, 68u8, 200u8, 20u8, 78u8, 158u8, 6u8, 69u8,
								46u8, 9u8, 115u8, 42u8, 114u8, 103u8, 155u8, 128u8, 141u8, 98u8,
								179u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Maps markets to their corresponding debt token."]
				#[doc = ""]
				#[doc = " ```text"]
				#[doc = " MarketIndex -> debt asset"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " See [this clickup task](task) for a more in-depth explanation."]
				#[doc = ""]
				#[doc = " [task]: <https://sharing.clickup.com/20465559/t/h/27y9y84/15U30TKC3THPZYT>"]
				pub fn debt_token_for_market(
					&self,
					_0: &'a runtime_types::pallet_lending::types::MarketIndex,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<DebtTokenForMarket>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								156u8, 129u8, 117u8, 170u8, 251u8, 143u8, 191u8, 82u8, 70u8, 216u8,
								127u8, 21u8, 94u8, 196u8, 88u8, 103u8, 253u8, 249u8, 172u8, 122u8,
								81u8, 245u8, 82u8, 211u8, 49u8, 42u8, 230u8, 15u8, 183u8, 191u8,
								12u8, 196u8,
							] {
							let entry = DebtTokenForMarket(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Maps markets to their corresponding debt token."]
				#[doc = ""]
				#[doc = " ```text"]
				#[doc = " MarketIndex -> debt asset"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " See [this clickup task](task) for a more in-depth explanation."]
				#[doc = ""]
				#[doc = " [task]: <https://sharing.clickup.com/20465559/t/h/27y9y84/15U30TKC3THPZYT>"]
				pub fn debt_token_for_market_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, DebtTokenForMarket<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<DebtTokenForMarket>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								156u8, 129u8, 117u8, 170u8, 251u8, 143u8, 191u8, 82u8, 70u8, 216u8,
								127u8, 21u8, 94u8, 196u8, 88u8, 103u8, 253u8, 249u8, 172u8, 122u8,
								81u8, 245u8, 82u8, 211u8, 49u8, 42u8, 230u8, 15u8, 183u8, 191u8,
								12u8, 196u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " at which lending index account did borrowed."]
				#[doc = " if first borrow: market index when the borrowed occured"]
				#[doc = " if additional borrow: market index adjusted wrt the previous index"]
				pub fn debt_index(
					&self,
					_0: &'a runtime_types::pallet_lending::types::MarketIndex,
					_1: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::sp_arithmetic::fixed_point::FixedU128,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<DebtIndex>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								61u8, 76u8, 51u8, 47u8, 129u8, 49u8, 108u8, 14u8, 94u8, 170u8,
								89u8, 11u8, 212u8, 176u8, 27u8, 184u8, 200u8, 15u8, 99u8, 137u8,
								18u8, 200u8, 14u8, 88u8, 92u8, 213u8, 206u8, 208u8, 175u8, 57u8,
								43u8, 67u8,
							] {
							let entry = DebtIndex(_0, _1);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " at which lending index account did borrowed."]
				#[doc = " if first borrow: market index when the borrowed occured"]
				#[doc = " if additional borrow: market index adjusted wrt the previous index"]
				pub fn debt_index_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, DebtIndex<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<DebtIndex>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								61u8, 76u8, 51u8, 47u8, 129u8, 49u8, 108u8, 14u8, 94u8, 170u8,
								89u8, 11u8, 212u8, 176u8, 27u8, 184u8, 200u8, 15u8, 99u8, 137u8,
								18u8, 200u8, 14u8, 88u8, 92u8, 213u8, 206u8, 208u8, 175u8, 57u8,
								43u8, 67u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Latest timestamp at which account borrowed from market."]
				#[doc = ""]
				#[doc = " (Market, Account) -> Timestamp"]
				pub fn borrow_timestamp(
					&self,
					_0: &'a runtime_types::pallet_lending::types::MarketIndex,
					_1: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::core::primitive::u64>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<BorrowTimestamp>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								79u8, 76u8, 80u8, 249u8, 16u8, 107u8, 173u8, 108u8, 55u8, 46u8,
								180u8, 113u8, 252u8, 23u8, 232u8, 127u8, 87u8, 10u8, 215u8, 21u8,
								157u8, 209u8, 16u8, 114u8, 237u8, 17u8, 71u8, 79u8, 221u8, 184u8,
								135u8, 122u8,
							] {
							let entry = BorrowTimestamp(_0, _1);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Latest timestamp at which account borrowed from market."]
				#[doc = ""]
				#[doc = " (Market, Account) -> Timestamp"]
				pub fn borrow_timestamp_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, BorrowTimestamp<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<BorrowTimestamp>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								79u8, 76u8, 80u8, 249u8, 16u8, 107u8, 173u8, 108u8, 55u8, 46u8,
								180u8, 113u8, 252u8, 23u8, 232u8, 127u8, 87u8, 10u8, 215u8, 21u8,
								157u8, 209u8, 16u8, 114u8, 237u8, 17u8, 71u8, 79u8, 221u8, 184u8,
								135u8, 122u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn borrow_rent(
					&self,
					_0: &'a runtime_types::pallet_lending::types::MarketIndex,
					_1: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::core::primitive::u128>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<BorrowRent>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								130u8, 174u8, 104u8, 42u8, 22u8, 188u8, 245u8, 135u8, 81u8, 68u8,
								125u8, 10u8, 61u8, 172u8, 117u8, 165u8, 205u8, 152u8, 111u8, 23u8,
								164u8, 198u8, 127u8, 72u8, 94u8, 231u8, 36u8, 190u8, 88u8, 68u8,
								7u8, 52u8,
							] {
							let entry = BorrowRent(_0, _1);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn borrow_rent_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, BorrowRent<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<BorrowRent>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								130u8, 174u8, 104u8, 42u8, 22u8, 188u8, 245u8, 135u8, 81u8, 68u8,
								125u8, 10u8, 61u8, 172u8, 117u8, 165u8, 205u8, 152u8, 111u8, 23u8,
								164u8, 198u8, 127u8, 72u8, 94u8, 231u8, 36u8, 190u8, 88u8, 68u8,
								7u8, 52u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " market borrow index"]
				pub fn borrow_index(
					&self,
					_0: &'a runtime_types::pallet_lending::types::MarketIndex,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::sp_arithmetic::fixed_point::FixedU128,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<BorrowIndex>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								179u8, 150u8, 88u8, 45u8, 142u8, 86u8, 103u8, 162u8, 165u8, 194u8,
								158u8, 149u8, 13u8, 78u8, 238u8, 4u8, 75u8, 219u8, 220u8, 137u8,
								20u8, 49u8, 77u8, 227u8, 231u8, 239u8, 176u8, 206u8, 151u8, 207u8,
								213u8, 245u8,
							] {
							let entry = BorrowIndex(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " market borrow index"]
				pub fn borrow_index_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, BorrowIndex<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<BorrowIndex>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								179u8, 150u8, 88u8, 45u8, 142u8, 86u8, 103u8, 162u8, 165u8, 194u8,
								158u8, 149u8, 13u8, 78u8, 238u8, 4u8, 75u8, 219u8, 220u8, 137u8,
								20u8, 49u8, 77u8, 227u8, 231u8, 239u8, 176u8, 206u8, 151u8, 207u8,
								213u8, 245u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " (Market, Account) -> Collateral"]
				pub fn account_collateral(
					&self,
					_0: &'a runtime_types::pallet_lending::types::MarketIndex,
					_1: &'a ::subxt::sp_core::crypto::AccountId32,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::core::primitive::u128>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AccountCollateral>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								212u8, 253u8, 77u8, 124u8, 219u8, 140u8, 106u8, 27u8, 187u8, 130u8,
								177u8, 112u8, 228u8, 232u8, 134u8, 218u8, 55u8, 226u8, 207u8, 24u8,
								212u8, 144u8, 204u8, 213u8, 160u8, 71u8, 76u8, 24u8, 44u8, 222u8,
								4u8, 74u8,
							] {
							let entry = AccountCollateral(_0, _1);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " (Market, Account) -> Collateral"]
				pub fn account_collateral_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, AccountCollateral<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<AccountCollateral>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								212u8, 253u8, 77u8, 124u8, 219u8, 140u8, 106u8, 27u8, 187u8, 130u8,
								177u8, 112u8, 228u8, 232u8, 134u8, 218u8, 55u8, 226u8, 207u8, 24u8,
								212u8, 144u8, 204u8, 213u8, 160u8, 71u8, 76u8, 24u8, 44u8, 222u8,
								4u8, 74u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The timestamp of the previous block or defaults to timestamp at genesis."]
				pub fn last_block_timestamp(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<LastBlockTimestamp>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								25u8, 108u8, 61u8, 130u8, 214u8, 163u8, 64u8, 8u8, 149u8, 127u8,
								214u8, 235u8, 193u8, 180u8, 221u8, 127u8, 0u8, 35u8, 122u8, 215u8,
								102u8, 155u8, 73u8, 110u8, 7u8, 254u8, 230u8, 181u8, 210u8, 233u8,
								174u8, 250u8,
							] {
							let entry = LastBlockTimestamp;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " Minimal price of borrow asset in Oracle price required to create."]
				#[doc = " Examples, 100 USDC."]
				#[doc = " Creators puts that amount and it is staked under Vault account."]
				#[doc = " So he does not owns it anymore."]
				#[doc = " So borrow is both stake and tool to create market."]
				#[doc = ""]
				#[doc = " # Why not pure borrow amount minimum?"]
				#[doc = ""]
				#[doc = " Borrow may have very small price. Will imbalance some markets on creation."]
				#[doc = ""]
				#[doc = " # Why not native parachain token?"]
				#[doc = ""]
				#[doc = " Possible option. But I doubt closing market as easy as transferring back rent.  So it is"]
				#[doc = " not exactly platform rent only."]
				#[doc = ""]
				#[doc = " # Why borrow amount priced by Oracle?"]
				#[doc = ""]
				#[doc = " We depend on Oracle to price in Lending. So we know price anyway."]
				#[doc = " We normalized price over all markets and protect from spam all possible pairs equally."]
				#[doc = " Locking borrow amount ensures manager can create market with borrow assets, and we force"]
				#[doc = " him to really create it."]
				#[doc = ""]
				#[doc = " This solution forces to have amount before creating market."]
				#[doc = " Vault can take that amount if reconfigured so, but that may be changed during runtime"]
				#[doc = " upgrades."]
				pub fn oracle_market_creation_stake(
					&self,
				) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Lending", "OracleMarketCreationStake")? ==
						[
							250u8, 101u8, 6u8, 247u8, 89u8, 119u8, 90u8, 224u8, 251u8, 122u8,
							235u8, 152u8, 49u8, 161u8, 172u8, 141u8, 205u8, 224u8, 153u8, 114u8,
							242u8, 27u8, 84u8, 22u8, 100u8, 201u8, 40u8, 7u8, 6u8, 109u8, 246u8,
							217u8,
						] {
						let pallet = metadata.pallet("Lending")?;
						let constant = pallet.constant("OracleMarketCreationStake")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn pallet_id(
					&self,
				) -> ::core::result::Result<
					runtime_types::frame_support::PalletId,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Lending", "PalletId")? ==
						[
							133u8, 8u8, 0u8, 81u8, 78u8, 77u8, 211u8, 136u8, 229u8, 173u8, 181u8,
							104u8, 61u8, 126u8, 112u8, 208u8, 165u8, 223u8, 227u8, 210u8, 73u8,
							15u8, 215u8, 192u8, 67u8, 6u8, 33u8, 215u8, 25u8, 33u8, 163u8, 233u8,
						] {
						let pallet = metadata.pallet("Lending")?;
						let constant = pallet.constant("PalletId")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod pablo {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Create {
				pub pool: runtime_types::pallet_pablo::pallet::PoolInitConfiguration<
					::subxt::sp_core::crypto::AccountId32,
					runtime_types::primitives::currency::CurrencyId,
					::core::primitive::u32,
				>,
			}
			impl ::subxt::Call for Create {
				const PALLET: &'static str = "Pablo";
				const FUNCTION: &'static str = "create";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Buy {
				pub pool_id: ::core::primitive::u128,
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub amount: ::core::primitive::u128,
				pub min_receive: ::core::primitive::u128,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for Buy {
				const PALLET: &'static str = "Pablo";
				const FUNCTION: &'static str = "buy";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Sell {
				pub pool_id: ::core::primitive::u128,
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub amount: ::core::primitive::u128,
				pub min_receive: ::core::primitive::u128,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for Sell {
				const PALLET: &'static str = "Pablo";
				const FUNCTION: &'static str = "sell";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Swap {
				pub pool_id: ::core::primitive::u128,
				pub pair: runtime_types::composable_traits::defi::CurrencyPair<
					runtime_types::primitives::currency::CurrencyId,
				>,
				pub quote_amount: ::core::primitive::u128,
				pub min_receive: ::core::primitive::u128,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for Swap {
				const PALLET: &'static str = "Pablo";
				const FUNCTION: &'static str = "swap";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AddLiquidity {
				pub pool_id: ::core::primitive::u128,
				pub base_amount: ::core::primitive::u128,
				pub quote_amount: ::core::primitive::u128,
				pub min_mint_amount: ::core::primitive::u128,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for AddLiquidity {
				const PALLET: &'static str = "Pablo";
				const FUNCTION: &'static str = "add_liquidity";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RemoveLiquidity {
				pub pool_id: ::core::primitive::u128,
				pub lp_amount: ::core::primitive::u128,
				pub min_base_amount: ::core::primitive::u128,
				pub min_quote_amount: ::core::primitive::u128,
			}
			impl ::subxt::Call for RemoveLiquidity {
				const PALLET: &'static str = "Pablo";
				const FUNCTION: &'static str = "remove_liquidity";
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct EnableTwap {
				pub pool_id: ::core::primitive::u128,
			}
			impl ::subxt::Call for EnableTwap {
				const PALLET: &'static str = "Pablo";
				const FUNCTION: &'static str = "enable_twap";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Create a new pool."]
				#[doc = ""]
				#[doc = "Emits `PoolCreated` event when successful."]
				pub fn create(
					&self,
					pool: runtime_types::pallet_pablo::pallet::PoolInitConfiguration<
						::subxt::sp_core::crypto::AccountId32,
						runtime_types::primitives::currency::CurrencyId,
						::core::primitive::u32,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Create, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Create>()?
					};
					if runtime_call_hash ==
						[
							207u8, 239u8, 120u8, 183u8, 245u8, 249u8, 174u8, 189u8, 19u8, 167u8,
							191u8, 123u8, 38u8, 196u8, 166u8, 34u8, 125u8, 252u8, 100u8, 230u8,
							243u8, 69u8, 75u8, 233u8, 223u8, 229u8, 79u8, 125u8, 186u8, 128u8,
							103u8, 23u8,
						] {
						let call = Create { pool };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Execute a buy order on pool."]
				#[doc = ""]
				#[doc = "Emits `Swapped` event when successful."]
				pub fn buy(
					&self,
					pool_id: ::core::primitive::u128,
					asset_id: runtime_types::primitives::currency::CurrencyId,
					amount: ::core::primitive::u128,
					min_receive: ::core::primitive::u128,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Buy, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Buy>()?
					};
					if runtime_call_hash ==
						[
							28u8, 21u8, 89u8, 250u8, 107u8, 23u8, 78u8, 12u8, 75u8, 121u8, 124u8,
							87u8, 37u8, 200u8, 226u8, 15u8, 196u8, 57u8, 5u8, 37u8, 165u8, 0u8,
							229u8, 0u8, 180u8, 251u8, 58u8, 22u8, 244u8, 235u8, 127u8, 250u8,
						] {
						let call = Buy { pool_id, asset_id, amount, min_receive, keep_alive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Execute a sell order on pool."]
				#[doc = ""]
				#[doc = "Emits `Swapped` event when successful."]
				pub fn sell(
					&self,
					pool_id: ::core::primitive::u128,
					asset_id: runtime_types::primitives::currency::CurrencyId,
					amount: ::core::primitive::u128,
					min_receive: ::core::primitive::u128,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Sell, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Sell>()?
					};
					if runtime_call_hash ==
						[
							199u8, 197u8, 151u8, 226u8, 193u8, 21u8, 116u8, 197u8, 89u8, 20u8,
							126u8, 19u8, 162u8, 209u8, 189u8, 134u8, 0u8, 162u8, 105u8, 156u8,
							249u8, 55u8, 190u8, 207u8, 5u8, 75u8, 46u8, 150u8, 159u8, 214u8, 234u8,
							133u8,
						] {
						let call = Sell { pool_id, asset_id, amount, min_receive, keep_alive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Execute a specific swap operation."]
				#[doc = ""]
				#[doc = "The `quote_amount` is always the quote asset amount (A/B => B), (B/A => A)."]
				#[doc = ""]
				#[doc = "Emits `Swapped` event when successful."]
				pub fn swap(
					&self,
					pool_id: ::core::primitive::u128,
					pair: runtime_types::composable_traits::defi::CurrencyPair<
						runtime_types::primitives::currency::CurrencyId,
					>,
					quote_amount: ::core::primitive::u128,
					min_receive: ::core::primitive::u128,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Swap, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Swap>()?
					};
					if runtime_call_hash ==
						[
							197u8, 96u8, 187u8, 244u8, 124u8, 190u8, 93u8, 47u8, 34u8, 107u8,
							189u8, 126u8, 100u8, 17u8, 118u8, 120u8, 218u8, 101u8, 96u8, 29u8,
							135u8, 252u8, 231u8, 88u8, 235u8, 214u8, 78u8, 116u8, 131u8, 95u8,
							70u8, 62u8,
						] {
						let call = Swap { pool_id, pair, quote_amount, min_receive, keep_alive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Add liquidity to the given pool."]
				#[doc = ""]
				#[doc = "Emits `LiquidityAdded` event when successful."]
				pub fn add_liquidity(
					&self,
					pool_id: ::core::primitive::u128,
					base_amount: ::core::primitive::u128,
					quote_amount: ::core::primitive::u128,
					min_mint_amount: ::core::primitive::u128,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						AddLiquidity,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<AddLiquidity>()?
					};
					if runtime_call_hash ==
						[
							232u8, 33u8, 148u8, 134u8, 156u8, 242u8, 82u8, 252u8, 68u8, 76u8,
							159u8, 240u8, 215u8, 206u8, 146u8, 172u8, 140u8, 124u8, 36u8, 51u8,
							33u8, 134u8, 235u8, 244u8, 172u8, 6u8, 106u8, 78u8, 83u8, 5u8, 115u8,
							172u8,
						] {
						let call = AddLiquidity {
							pool_id,
							base_amount,
							quote_amount,
							min_mint_amount,
							keep_alive,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Remove liquidity from the given pool."]
				#[doc = ""]
				#[doc = "Emits `LiquidityRemoved` event when successful."]
				pub fn remove_liquidity(
					&self,
					pool_id: ::core::primitive::u128,
					lp_amount: ::core::primitive::u128,
					min_base_amount: ::core::primitive::u128,
					min_quote_amount: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RemoveLiquidity,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RemoveLiquidity>()?
					};
					if runtime_call_hash ==
						[
							115u8, 218u8, 140u8, 169u8, 250u8, 165u8, 236u8, 117u8, 69u8, 107u8,
							131u8, 115u8, 32u8, 197u8, 73u8, 240u8, 253u8, 160u8, 135u8, 124u8,
							207u8, 148u8, 56u8, 57u8, 197u8, 70u8, 187u8, 169u8, 56u8, 73u8, 104u8,
							251u8,
						] {
						let call = RemoveLiquidity {
							pool_id,
							lp_amount,
							min_base_amount,
							min_quote_amount,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn enable_twap(
					&self,
					pool_id: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						EnableTwap,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<EnableTwap>()?
					};
					if runtime_call_hash ==
						[
							210u8, 112u8, 59u8, 29u8, 30u8, 137u8, 203u8, 193u8, 225u8, 47u8,
							155u8, 210u8, 235u8, 235u8, 163u8, 142u8, 59u8, 104u8, 142u8, 87u8,
							36u8, 201u8, 11u8, 149u8, 188u8, 117u8, 251u8, 243u8, 96u8, 115u8,
							218u8, 41u8,
						] {
						let call = EnableTwap { pool_id };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_pablo::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Pool with specified id `T::PoolId` was created successfully by `T::AccountId`."]
			pub struct PoolCreated {
				pub pool_id: ::core::primitive::u128,
				pub owner: ::subxt::sp_core::crypto::AccountId32,
				pub assets: runtime_types::composable_traits::defi::CurrencyPair<
					runtime_types::primitives::currency::CurrencyId,
				>,
			}
			impl ::subxt::Event for PoolCreated {
				const PALLET: &'static str = "Pablo";
				const EVENT: &'static str = "PoolCreated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "The sale ended, the funds repatriated and the pool deleted."]
			pub struct PoolDeleted {
				pub pool_id: ::core::primitive::u128,
				pub base_amount: ::core::primitive::u128,
				pub quote_amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for PoolDeleted {
				const PALLET: &'static str = "Pablo";
				const EVENT: &'static str = "PoolDeleted";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Liquidity added into the pool `T::PoolId`."]
			pub struct LiquidityAdded {
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub pool_id: ::core::primitive::u128,
				pub base_amount: ::core::primitive::u128,
				pub quote_amount: ::core::primitive::u128,
				pub minted_lp: ::core::primitive::u128,
			}
			impl ::subxt::Event for LiquidityAdded {
				const PALLET: &'static str = "Pablo";
				const EVENT: &'static str = "LiquidityAdded";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Liquidity removed from pool `T::PoolId` by `T::AccountId` in balanced way."]
			pub struct LiquidityRemoved {
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub pool_id: ::core::primitive::u128,
				pub base_amount: ::core::primitive::u128,
				pub quote_amount: ::core::primitive::u128,
				pub total_issuance: ::core::primitive::u128,
			}
			impl ::subxt::Event for LiquidityRemoved {
				const PALLET: &'static str = "Pablo";
				const EVENT: &'static str = "LiquidityRemoved";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Token exchange happened."]
			pub struct Swapped {
				pub pool_id: ::core::primitive::u128,
				pub who: ::subxt::sp_core::crypto::AccountId32,
				pub base_asset: runtime_types::primitives::currency::CurrencyId,
				pub quote_asset: runtime_types::primitives::currency::CurrencyId,
				pub base_amount: ::core::primitive::u128,
				pub quote_amount: ::core::primitive::u128,
				pub fee: runtime_types::composable_traits::dex::Fee<
					runtime_types::primitives::currency::CurrencyId,
					::core::primitive::u128,
				>,
			}
			impl ::subxt::Event for Swapped {
				const PALLET: &'static str = "Pablo";
				const EVENT: &'static str = "Swapped";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "TWAP updated."]
			pub struct TwapUpdated {
				pub pool_id: ::core::primitive::u128,
				pub timestamp: ::core::primitive::u64,
				pub twaps: ::subxt::KeyedVec<
					runtime_types::primitives::currency::CurrencyId,
					runtime_types::sp_arithmetic::fixed_point::FixedU128,
				>,
			}
			impl ::subxt::Event for TwapUpdated {
				const PALLET: &'static str = "Pablo";
				const EVENT: &'static str = "TwapUpdated";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct PoolCount;
			impl ::subxt::StorageEntry for PoolCount {
				const PALLET: &'static str = "Pablo";
				const STORAGE: &'static str = "PoolCount";
				type Value = ::core::primitive::u128;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Pools<'a>(pub &'a ::core::primitive::u128);
			impl ::subxt::StorageEntry for Pools<'_> {
				const PALLET: &'static str = "Pablo";
				const STORAGE: &'static str = "Pools";
				type Value = runtime_types::pallet_pablo::pallet::PoolConfiguration<
					::subxt::sp_core::crypto::AccountId32,
					runtime_types::primitives::currency::CurrencyId,
					::core::primitive::u32,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct TWAPState<'a>(pub &'a ::core::primitive::u128);
			impl ::subxt::StorageEntry for TWAPState<'_> {
				const PALLET: &'static str = "Pablo";
				const STORAGE: &'static str = "TWAPState";
				type Value = runtime_types::pallet_pablo::types::TimeWeightedAveragePrice<
					::core::primitive::u64,
					::core::primitive::u128,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct PriceCumulativeState<'a>(pub &'a ::core::primitive::u128);
			impl ::subxt::StorageEntry for PriceCumulativeState<'_> {
				const PALLET: &'static str = "Pablo";
				const STORAGE: &'static str = "PriceCumulativeState";
				type Value = runtime_types::pallet_pablo::types::PriceCumulative<
					::core::primitive::u64,
					::core::primitive::u128,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				pub fn pool_count(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<PoolCount>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								176u8, 166u8, 120u8, 250u8, 28u8, 181u8, 8u8, 119u8, 201u8, 200u8,
								183u8, 13u8, 123u8, 148u8, 35u8, 223u8, 184u8, 61u8, 14u8, 78u8,
								178u8, 39u8, 72u8, 93u8, 47u8, 179u8, 245u8, 208u8, 39u8, 94u8,
								84u8, 70u8,
							] {
							let entry = PoolCount;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn pools(
					&self,
					_0: &'a ::core::primitive::u128,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_pablo::pallet::PoolConfiguration<
								::subxt::sp_core::crypto::AccountId32,
								runtime_types::primitives::currency::CurrencyId,
								::core::primitive::u32,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Pools>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								59u8, 194u8, 74u8, 44u8, 180u8, 133u8, 254u8, 10u8, 77u8, 249u8,
								202u8, 77u8, 228u8, 146u8, 21u8, 166u8, 247u8, 10u8, 113u8, 83u8,
								91u8, 252u8, 48u8, 186u8, 40u8, 3u8, 15u8, 96u8, 199u8, 108u8,
								252u8, 95u8,
							] {
							let entry = Pools(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn pools_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Pools<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Pools>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								59u8, 194u8, 74u8, 44u8, 180u8, 133u8, 254u8, 10u8, 77u8, 249u8,
								202u8, 77u8, 228u8, 146u8, 21u8, 166u8, 247u8, 10u8, 113u8, 83u8,
								91u8, 252u8, 48u8, 186u8, 40u8, 3u8, 15u8, 96u8, 199u8, 108u8,
								252u8, 95u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn twap_state(
					&self,
					_0: &'a ::core::primitive::u128,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_pablo::types::TimeWeightedAveragePrice<
								::core::primitive::u64,
								::core::primitive::u128,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<TWAPState>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								57u8, 125u8, 204u8, 129u8, 56u8, 95u8, 123u8, 116u8, 57u8, 54u8,
								186u8, 163u8, 54u8, 35u8, 167u8, 29u8, 136u8, 27u8, 143u8, 248u8,
								192u8, 233u8, 174u8, 209u8, 20u8, 42u8, 126u8, 110u8, 6u8, 66u8,
								143u8, 210u8,
							] {
							let entry = TWAPState(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn twap_state_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, TWAPState<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<TWAPState>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								57u8, 125u8, 204u8, 129u8, 56u8, 95u8, 123u8, 116u8, 57u8, 54u8,
								186u8, 163u8, 54u8, 35u8, 167u8, 29u8, 136u8, 27u8, 143u8, 248u8,
								192u8, 233u8, 174u8, 209u8, 20u8, 42u8, 126u8, 110u8, 6u8, 66u8,
								143u8, 210u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn price_cumulative_state(
					&self,
					_0: &'a ::core::primitive::u128,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::pallet_pablo::types::PriceCumulative<
								::core::primitive::u64,
								::core::primitive::u128,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<PriceCumulativeState>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								151u8, 201u8, 27u8, 48u8, 20u8, 225u8, 155u8, 80u8, 13u8, 71u8,
								238u8, 109u8, 132u8, 207u8, 180u8, 43u8, 166u8, 183u8, 118u8,
								232u8, 68u8, 26u8, 102u8, 9u8, 110u8, 154u8, 166u8, 187u8, 25u8,
								16u8, 120u8, 93u8,
							] {
							let entry = PriceCumulativeState(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn price_cumulative_state_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, PriceCumulativeState<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<PriceCumulativeState>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								151u8, 201u8, 27u8, 48u8, 20u8, 225u8, 155u8, 80u8, 13u8, 71u8,
								238u8, 109u8, 132u8, 207u8, 180u8, 43u8, 166u8, 183u8, 118u8,
								232u8, 68u8, 26u8, 102u8, 9u8, 110u8, 154u8, 166u8, 187u8, 25u8,
								16u8, 120u8, 93u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				pub fn pallet_id(
					&self,
				) -> ::core::result::Result<
					runtime_types::frame_support::PalletId,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Pablo", "PalletId")? ==
						[
							216u8, 219u8, 146u8, 252u8, 126u8, 63u8, 95u8, 144u8, 94u8, 52u8,
							170u8, 118u8, 148u8, 204u8, 237u8, 189u8, 63u8, 108u8, 239u8, 233u8,
							253u8, 244u8, 10u8, 65u8, 169u8, 59u8, 174u8, 228u8, 246u8, 31u8, 55u8,
							14u8,
						] {
						let pallet = metadata.pallet("Pablo")?;
						let constant = pallet.constant("PalletId")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " Minimum duration for a sale."]
				pub fn lbp_min_sale_duration(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Pablo", "LbpMinSaleDuration")? ==
						[
							186u8, 249u8, 77u8, 132u8, 189u8, 32u8, 39u8, 85u8, 150u8, 101u8,
							173u8, 17u8, 92u8, 113u8, 46u8, 230u8, 199u8, 95u8, 120u8, 29u8, 160u8,
							13u8, 23u8, 114u8, 97u8, 146u8, 191u8, 192u8, 169u8, 128u8, 236u8,
							163u8,
						] {
						let pallet = metadata.pallet("Pablo")?;
						let constant = pallet.constant("LbpMinSaleDuration")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " Maximum duration for a sale."]
				pub fn lbp_max_sale_duration(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Pablo", "LbpMaxSaleDuration")? ==
						[
							66u8, 132u8, 37u8, 75u8, 216u8, 76u8, 109u8, 158u8, 26u8, 180u8, 197u8,
							60u8, 139u8, 98u8, 125u8, 81u8, 143u8, 218u8, 59u8, 112u8, 251u8,
							133u8, 153u8, 180u8, 136u8, 118u8, 137u8, 246u8, 158u8, 107u8, 196u8,
							142u8,
						] {
						let pallet = metadata.pallet("Pablo")?;
						let constant = pallet.constant("LbpMaxSaleDuration")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " Maximum initial weight."]
				pub fn lbp_max_initial_weight(
					&self,
				) -> ::core::result::Result<
					runtime_types::sp_arithmetic::per_things::Permill,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Pablo", "LbpMaxInitialWeight")? ==
						[
							133u8, 231u8, 89u8, 93u8, 178u8, 128u8, 39u8, 11u8, 69u8, 232u8, 189u8,
							107u8, 233u8, 115u8, 155u8, 234u8, 230u8, 190u8, 121u8, 189u8, 43u8,
							217u8, 33u8, 142u8, 234u8, 160u8, 28u8, 88u8, 123u8, 118u8, 160u8,
							66u8,
						] {
						let pallet = metadata.pallet("Pablo")?;
						let constant = pallet.constant("LbpMaxInitialWeight")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " Minimum final weight."]
				pub fn lbp_min_final_weight(
					&self,
				) -> ::core::result::Result<
					runtime_types::sp_arithmetic::per_things::Permill,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Pablo", "LbpMinFinalWeight")? ==
						[
							186u8, 142u8, 189u8, 210u8, 14u8, 33u8, 92u8, 99u8, 58u8, 69u8, 36u8,
							93u8, 56u8, 40u8, 128u8, 161u8, 161u8, 255u8, 229u8, 37u8, 186u8, 82u8,
							143u8, 148u8, 39u8, 222u8, 122u8, 56u8, 194u8, 254u8, 87u8, 28u8,
						] {
						let pallet = metadata.pallet("Pablo")?;
						let constant = pallet.constant("LbpMinFinalWeight")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = " The interval between TWAP computations."]
				pub fn twap_interval(
					&self,
				) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Pablo", "TWAPInterval")? ==
						[
							36u8, 82u8, 55u8, 184u8, 141u8, 137u8, 253u8, 97u8, 206u8, 53u8, 237u8,
							131u8, 254u8, 95u8, 199u8, 198u8, 169u8, 198u8, 83u8, 102u8, 1u8,
							177u8, 69u8, 33u8, 241u8, 164u8, 71u8, 159u8, 134u8, 107u8, 10u8,
							108u8,
						] {
						let pallet = metadata.pallet("Pablo")?;
						let constant = pallet.constant("TWAPInterval")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod dex_router {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct UpdateRoute {
				pub asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
					runtime_types::primitives::currency::CurrencyId,
				>,
				pub route: ::core::option::Option<
					runtime_types::frame_support::storage::bounded_vec::BoundedVec<
						::core::primitive::u128,
					>,
				>,
			}
			impl ::subxt::Call for UpdateRoute {
				const PALLET: &'static str = "DexRouter";
				const FUNCTION: &'static str = "update_route";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Exchange {
				pub asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
					runtime_types::primitives::currency::CurrencyId,
				>,
				pub amount: ::core::primitive::u128,
				pub min_receive: ::core::primitive::u128,
			}
			impl ::subxt::Call for Exchange {
				const PALLET: &'static str = "DexRouter";
				const FUNCTION: &'static str = "exchange";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Sell {
				pub asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
					runtime_types::primitives::currency::CurrencyId,
				>,
				pub amount: ::core::primitive::u128,
				pub min_receive: ::core::primitive::u128,
			}
			impl ::subxt::Call for Sell {
				const PALLET: &'static str = "DexRouter";
				const FUNCTION: &'static str = "sell";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Buy {
				pub asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
					runtime_types::primitives::currency::CurrencyId,
				>,
				pub amount: ::core::primitive::u128,
				pub min_receive: ::core::primitive::u128,
			}
			impl ::subxt::Call for Buy {
				const PALLET: &'static str = "DexRouter";
				const FUNCTION: &'static str = "buy";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AddLiquidity {
				pub asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
					runtime_types::primitives::currency::CurrencyId,
				>,
				pub base_amount: ::core::primitive::u128,
				pub quote_amount: ::core::primitive::u128,
				pub min_mint_amount: ::core::primitive::u128,
				pub keep_alive: ::core::primitive::bool,
			}
			impl ::subxt::Call for AddLiquidity {
				const PALLET: &'static str = "DexRouter";
				const FUNCTION: &'static str = "add_liquidity";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RemoveLiquidity {
				pub asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
					runtime_types::primitives::currency::CurrencyId,
				>,
				pub lp_amount: ::core::primitive::u128,
				pub min_base_amount: ::core::primitive::u128,
				pub min_quote_amount: ::core::primitive::u128,
			}
			impl ::subxt::Call for RemoveLiquidity {
				const PALLET: &'static str = "DexRouter";
				const FUNCTION: &'static str = "remove_liquidity";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Create, update or remove route."]
				#[doc = "On successful emits one of `RouteAdded`, `RouteUpdated` or `RouteDeleted`."]
				pub fn update_route(
					&self,
					asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
						runtime_types::primitives::currency::CurrencyId,
					>,
					route: ::core::option::Option<
						runtime_types::frame_support::storage::bounded_vec::BoundedVec<
							::core::primitive::u128,
						>,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						UpdateRoute,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<UpdateRoute>()?
					};
					if runtime_call_hash ==
						[
							39u8, 39u8, 225u8, 7u8, 42u8, 95u8, 24u8, 100u8, 191u8, 115u8, 30u8,
							121u8, 116u8, 131u8, 41u8, 240u8, 245u8, 82u8, 123u8, 234u8, 95u8,
							12u8, 10u8, 64u8, 4u8, 95u8, 172u8, 45u8, 196u8, 219u8, 132u8, 192u8,
						] {
						let call = UpdateRoute { asset_pair, route };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Exchange `amount` of quote asset for `asset_pair` via route found in router."]
				#[doc = "On successful underlying DEX pallets will emit appropriate event"]
				pub fn exchange(
					&self,
					asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
						runtime_types::primitives::currency::CurrencyId,
					>,
					amount: ::core::primitive::u128,
					min_receive: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Exchange,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Exchange>()?
					};
					if runtime_call_hash ==
						[
							63u8, 3u8, 184u8, 43u8, 238u8, 213u8, 60u8, 0u8, 127u8, 168u8, 201u8,
							185u8, 171u8, 28u8, 86u8, 213u8, 124u8, 108u8, 108u8, 115u8, 175u8,
							142u8, 178u8, 95u8, 0u8, 83u8, 152u8, 27u8, 111u8, 24u8, 49u8, 108u8,
						] {
						let call = Exchange { asset_pair, amount, min_receive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Sell `amount` of quote asset for `asset_pair` via route found in router."]
				#[doc = "On successful underlying DEX pallets will emit appropriate event."]
				pub fn sell(
					&self,
					asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
						runtime_types::primitives::currency::CurrencyId,
					>,
					amount: ::core::primitive::u128,
					min_receive: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Sell, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Sell>()?
					};
					if runtime_call_hash ==
						[
							122u8, 186u8, 82u8, 29u8, 183u8, 193u8, 182u8, 206u8, 131u8, 159u8,
							46u8, 123u8, 109u8, 30u8, 127u8, 152u8, 70u8, 222u8, 90u8, 25u8, 27u8,
							217u8, 157u8, 203u8, 233u8, 143u8, 46u8, 98u8, 50u8, 133u8, 214u8,
							215u8,
						] {
						let call = Sell { asset_pair, amount, min_receive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Buy `amount` of quote asset for `asset_pair` via route found in router."]
				#[doc = "On successful underlying DEX pallets will emit appropriate event."]
				pub fn buy(
					&self,
					asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
						runtime_types::primitives::currency::CurrencyId,
					>,
					amount: ::core::primitive::u128,
					min_receive: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Buy, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Buy>()?
					};
					if runtime_call_hash ==
						[
							124u8, 98u8, 13u8, 155u8, 171u8, 68u8, 146u8, 64u8, 122u8, 195u8, 67u8,
							41u8, 138u8, 116u8, 155u8, 71u8, 183u8, 180u8, 17u8, 64u8, 2u8, 88u8,
							181u8, 125u8, 255u8, 12u8, 39u8, 255u8, 16u8, 128u8, 103u8, 101u8,
						] {
						let call = Buy { asset_pair, amount, min_receive };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Add liquidity to the underlying pablo pool."]
				#[doc = "Works only for single pool route."]
				pub fn add_liquidity(
					&self,
					asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
						runtime_types::primitives::currency::CurrencyId,
					>,
					base_amount: ::core::primitive::u128,
					quote_amount: ::core::primitive::u128,
					min_mint_amount: ::core::primitive::u128,
					keep_alive: ::core::primitive::bool,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						AddLiquidity,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<AddLiquidity>()?
					};
					if runtime_call_hash ==
						[
							19u8, 32u8, 137u8, 24u8, 95u8, 179u8, 61u8, 155u8, 34u8, 143u8, 219u8,
							163u8, 12u8, 139u8, 220u8, 88u8, 30u8, 143u8, 211u8, 138u8, 158u8,
							46u8, 182u8, 190u8, 197u8, 112u8, 60u8, 158u8, 153u8, 141u8, 178u8,
							7u8,
						] {
						let call = AddLiquidity {
							asset_pair,
							base_amount,
							quote_amount,
							min_mint_amount,
							keep_alive,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Remove liquidity from the underlying pablo pool."]
				#[doc = "Works only for single pool route."]
				pub fn remove_liquidity(
					&self,
					asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
						runtime_types::primitives::currency::CurrencyId,
					>,
					lp_amount: ::core::primitive::u128,
					min_base_amount: ::core::primitive::u128,
					min_quote_amount: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						RemoveLiquidity,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<RemoveLiquidity>()?
					};
					if runtime_call_hash ==
						[
							43u8, 16u8, 46u8, 140u8, 245u8, 71u8, 102u8, 248u8, 23u8, 71u8, 7u8,
							205u8, 98u8, 192u8, 247u8, 117u8, 212u8, 192u8, 197u8, 184u8, 109u8,
							141u8, 86u8, 214u8, 127u8, 126u8, 87u8, 220u8, 151u8, 137u8, 25u8,
							162u8,
						] {
						let call = RemoveLiquidity {
							asset_pair,
							lp_amount,
							min_base_amount,
							min_quote_amount,
						};
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_dex_router::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RouteAdded {
				pub x_asset_id: runtime_types::primitives::currency::CurrencyId,
				pub y_asset_id: runtime_types::primitives::currency::CurrencyId,
				pub route: ::std::vec::Vec<::core::primitive::u128>,
			}
			impl ::subxt::Event for RouteAdded {
				const PALLET: &'static str = "DexRouter";
				const EVENT: &'static str = "RouteAdded";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RouteDeleted {
				pub x_asset_id: runtime_types::primitives::currency::CurrencyId,
				pub y_asset_id: runtime_types::primitives::currency::CurrencyId,
				pub route: ::std::vec::Vec<::core::primitive::u128>,
			}
			impl ::subxt::Event for RouteDeleted {
				const PALLET: &'static str = "DexRouter";
				const EVENT: &'static str = "RouteDeleted";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RouteUpdated {
				pub x_asset_id: runtime_types::primitives::currency::CurrencyId,
				pub y_asset_id: runtime_types::primitives::currency::CurrencyId,
				pub old_route: ::std::vec::Vec<::core::primitive::u128>,
				pub updated_route: ::std::vec::Vec<::core::primitive::u128>,
			}
			impl ::subxt::Event for RouteUpdated {
				const PALLET: &'static str = "DexRouter";
				const EVENT: &'static str = "RouteUpdated";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct DexRoutes<'a>(
				pub &'a runtime_types::primitives::currency::CurrencyId,
				pub &'a runtime_types::primitives::currency::CurrencyId,
			);
			impl ::subxt::StorageEntry for DexRoutes<'_> {
				const PALLET: &'static str = "DexRouter";
				const STORAGE: &'static str = "DexRoutes";
				type Value = runtime_types::composable_traits::dex::DexRoute<
					::core::primitive::u128,
					runtime_types::dali_runtime::MaxHopsCount,
				>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				pub fn dex_routes(
					&self,
					_0: &'a runtime_types::primitives::currency::CurrencyId,
					_1: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<
							runtime_types::composable_traits::dex::DexRoute<
								::core::primitive::u128,
								runtime_types::dali_runtime::MaxHopsCount,
							>,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<DexRoutes>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								249u8, 225u8, 195u8, 208u8, 52u8, 39u8, 174u8, 161u8, 64u8, 45u8,
								67u8, 21u8, 68u8, 163u8, 33u8, 110u8, 81u8, 124u8, 156u8, 26u8,
								140u8, 95u8, 23u8, 194u8, 26u8, 35u8, 50u8, 36u8, 12u8, 234u8,
								250u8, 140u8,
							] {
							let entry = DexRoutes(_0, _1);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn dex_routes_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, DexRoutes<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<DexRoutes>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								249u8, 225u8, 195u8, 208u8, 52u8, 39u8, 174u8, 161u8, 64u8, 45u8,
								67u8, 21u8, 68u8, 163u8, 33u8, 110u8, 81u8, 124u8, 156u8, 26u8,
								140u8, 95u8, 23u8, 194u8, 26u8, 35u8, 50u8, 36u8, 12u8, 234u8,
								250u8, 140u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The maximum hops in the route."]
				pub fn max_hops_in_route(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("DexRouter", "MaxHopsInRoute")? ==
						[
							168u8, 47u8, 103u8, 187u8, 40u8, 38u8, 40u8, 112u8, 192u8, 169u8, 80u8,
							255u8, 73u8, 124u8, 25u8, 163u8, 36u8, 16u8, 193u8, 160u8, 25u8, 152u8,
							66u8, 61u8, 173u8, 54u8, 249u8, 95u8, 66u8, 245u8, 56u8, 18u8,
						] {
						let pallet = metadata.pallet("DexRouter")?;
						let constant = pallet.constant("MaxHopsInRoute")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn pallet_id(
					&self,
				) -> ::core::result::Result<
					runtime_types::frame_support::PalletId,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("DexRouter", "PalletId")? ==
						[
							1u8, 66u8, 163u8, 116u8, 5u8, 169u8, 152u8, 148u8, 131u8, 233u8, 83u8,
							120u8, 134u8, 172u8, 99u8, 153u8, 61u8, 111u8, 131u8, 230u8, 94u8,
							178u8, 195u8, 160u8, 10u8, 35u8, 207u8, 205u8, 13u8, 83u8, 14u8, 133u8,
						] {
						let pallet = metadata.pallet("DexRouter")?;
						let constant = pallet.constant("PalletId")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod staking_rewards {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_staking_rewards::pallet::Event;
		pub mod events {
			use super::runtime_types;
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " the size of batch to take each time trying to release rewards"]
				pub fn release_rewards_pools_batch_size(
					&self,
				) -> ::core::result::Result<::core::primitive::u8, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("StakingRewards", "ReleaseRewardsPoolsBatchSize")? ==
						[
							108u8, 225u8, 180u8, 4u8, 27u8, 182u8, 110u8, 47u8, 207u8, 202u8,
							233u8, 80u8, 125u8, 135u8, 169u8, 234u8, 38u8, 200u8, 6u8, 121u8,
							205u8, 176u8, 248u8, 177u8, 0u8, 138u8, 213u8, 227u8, 129u8, 145u8,
							64u8, 48u8,
						] {
						let pallet = metadata.pallet("StakingRewards")?;
						let constant = pallet.constant("ReleaseRewardsPoolsBatchSize")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn pallet_id(
					&self,
				) -> ::core::result::Result<
					runtime_types::frame_support::PalletId,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("StakingRewards", "PalletId")? ==
						[
							189u8, 101u8, 193u8, 125u8, 53u8, 26u8, 17u8, 138u8, 154u8, 22u8,
							154u8, 115u8, 60u8, 48u8, 151u8, 226u8, 249u8, 88u8, 22u8, 46u8, 16u8,
							246u8, 28u8, 176u8, 148u8, 125u8, 173u8, 45u8, 20u8, 181u8, 24u8,
							231u8,
						] {
						let pallet = metadata.pallet("StakingRewards")?;
						let constant = pallet.constant("PalletId")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod call_filter {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Disable {
				pub entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
					runtime_types::dali_runtime::MaxStringSize,
				>,
			}
			impl ::subxt::Call for Disable {
				const PALLET: &'static str = "CallFilter";
				const FUNCTION: &'static str = "disable";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Enable {
				pub entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
					runtime_types::dali_runtime::MaxStringSize,
				>,
			}
			impl ::subxt::Call for Enable {
				const PALLET: &'static str = "CallFilter";
				const FUNCTION: &'static str = "enable";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				#[doc = "Disable a pallet function."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be"]
				#[doc = "`UpdateOrigin`."]
				#[doc = ""]
				#[doc = "Possibly emits a `Disabled` event."]
				pub fn disable(
					&self,
					entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
						runtime_types::dali_runtime::MaxStringSize,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Disable,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Disable>()?
					};
					if runtime_call_hash ==
						[
							139u8, 195u8, 12u8, 115u8, 199u8, 139u8, 117u8, 222u8, 46u8, 106u8,
							241u8, 81u8, 200u8, 148u8, 64u8, 167u8, 177u8, 200u8, 21u8, 39u8,
							127u8, 231u8, 24u8, 55u8, 178u8, 185u8, 74u8, 220u8, 76u8, 123u8,
							167u8, 183u8,
						] {
						let call = Disable { entry };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				#[doc = "Enable a previously disabled pallet function."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be"]
				#[doc = "`UpdateOrigin`."]
				#[doc = ""]
				#[doc = "Possibly emits an `Enabled` event."]
				pub fn enable(
					&self,
					entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
						runtime_types::dali_runtime::MaxStringSize,
					>,
				) -> Result<
					::subxt::SubmittableExtrinsic<'a, T, X, Enable, DispatchError, root_mod::Event>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Enable>()?
					};
					if runtime_call_hash ==
						[
							98u8, 181u8, 117u8, 91u8, 51u8, 48u8, 183u8, 94u8, 3u8, 144u8, 55u8,
							205u8, 162u8, 20u8, 20u8, 77u8, 13u8, 25u8, 179u8, 105u8, 62u8, 41u8,
							209u8, 141u8, 211u8, 240u8, 41u8, 118u8, 97u8, 105u8, 97u8, 75u8,
						] {
						let call = Enable { entry };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_call_filter::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Paused transaction"]
			pub struct Disabled {
				pub entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
					runtime_types::dali_runtime::MaxStringSize,
				>,
			}
			impl ::subxt::Event for Disabled {
				const PALLET: &'static str = "CallFilter";
				const EVENT: &'static str = "Disabled";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Unpaused transaction"]
			pub struct Enabled {
				pub entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
					runtime_types::dali_runtime::MaxStringSize,
				>,
			}
			impl ::subxt::Event for Enabled {
				const PALLET: &'static str = "CallFilter";
				const EVENT: &'static str = "Enabled";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct DisabledCalls<'a>(
				pub  &'a runtime_types::composable_traits::call_filter::CallFilterEntry<
					runtime_types::dali_runtime::MaxStringSize,
				>,
			);
			impl ::subxt::StorageEntry for DisabledCalls<'_> {
				const PALLET: &'static str = "CallFilter";
				const STORAGE: &'static str = "DisabledCalls";
				type Value = ();
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " The list of disabled extrinsics."]
				pub fn disabled_calls(
					&self,
					_0: &'a runtime_types::composable_traits::call_filter::CallFilterEntry<
						runtime_types::dali_runtime::MaxStringSize,
					>,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<()>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<DisabledCalls>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								116u8, 70u8, 130u8, 194u8, 189u8, 123u8, 239u8, 23u8, 47u8, 10u8,
								33u8, 66u8, 200u8, 168u8, 45u8, 187u8, 149u8, 193u8, 166u8, 153u8,
								229u8, 24u8, 254u8, 137u8, 41u8, 168u8, 140u8, 145u8, 238u8, 249u8,
								87u8, 3u8,
							] {
							let entry = DisabledCalls(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " The list of disabled extrinsics."]
				pub fn disabled_calls_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, DisabledCalls<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<DisabledCalls>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								116u8, 70u8, 130u8, 194u8, 189u8, 123u8, 239u8, 23u8, 47u8, 10u8,
								33u8, 66u8, 200u8, 168u8, 45u8, 187u8, 149u8, 193u8, 166u8, 153u8,
								229u8, 24u8, 254u8, 137u8, 41u8, 168u8, 140u8, 145u8, 238u8, 249u8,
								87u8, 3u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				pub fn max_string_size(
					&self,
				) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("CallFilter", "MaxStringSize")? ==
						[
							22u8, 75u8, 78u8, 181u8, 55u8, 111u8, 114u8, 246u8, 168u8, 121u8, 87u8,
							213u8, 200u8, 169u8, 122u8, 162u8, 128u8, 165u8, 161u8, 33u8, 125u8,
							64u8, 158u8, 33u8, 115u8, 49u8, 55u8, 4u8, 38u8, 116u8, 15u8, 75u8,
						] {
						let pallet = metadata.pallet("CallFilter")?;
						let constant = pallet.constant("MaxStringSize")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod ibc_ping {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct OpenChannel {
				pub params: runtime_types::ibc_trait::OpenChannelParams,
			}
			impl ::subxt::Call for OpenChannel {
				const PALLET: &'static str = "IbcPing";
				const FUNCTION: &'static str = "open_channel";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SendPing {
				pub params: runtime_types::pallet_ibc_ping::SendPingParams,
			}
			impl ::subxt::Call for SendPing {
				const PALLET: &'static str = "IbcPing";
				const FUNCTION: &'static str = "send_ping";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				pub fn open_channel(
					&self,
					params: runtime_types::ibc_trait::OpenChannelParams,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						OpenChannel,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<OpenChannel>()?
					};
					if runtime_call_hash ==
						[
							109u8, 41u8, 32u8, 59u8, 130u8, 39u8, 143u8, 113u8, 63u8, 39u8, 12u8,
							47u8, 241u8, 121u8, 131u8, 242u8, 76u8, 147u8, 153u8, 169u8, 131u8,
							58u8, 24u8, 88u8, 248u8, 131u8, 58u8, 129u8, 186u8, 224u8, 99u8, 183u8,
						] {
						let call = OpenChannel { params };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn send_ping(
					&self,
					params: runtime_types::pallet_ibc_ping::SendPingParams,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SendPing,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SendPing>()?
					};
					if runtime_call_hash ==
						[
							180u8, 164u8, 150u8, 222u8, 115u8, 49u8, 134u8, 23u8, 43u8, 57u8, 43u8,
							146u8, 226u8, 72u8, 13u8, 129u8, 136u8, 34u8, 26u8, 34u8, 177u8, 17u8,
							234u8, 155u8, 102u8, 119u8, 218u8, 244u8, 111u8, 39u8, 165u8, 80u8,
						] {
						let call = SendPing { params };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_ibc_ping::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A send packet has been registered"]
			pub struct PacketSent;
			impl ::subxt::Event for PacketSent {
				const PALLET: &'static str = "IbcPing";
				const EVENT: &'static str = "PacketSent";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A channel has been opened"]
			pub struct ChannelOpened {
				pub channel_id: ::std::vec::Vec<::core::primitive::u8>,
				pub port_id: ::std::vec::Vec<::core::primitive::u8>,
			}
			impl ::subxt::Event for ChannelOpened {
				const PALLET: &'static str = "IbcPing";
				const EVENT: &'static str = "ChannelOpened";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
			}
		}
	}
	pub mod transfer {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Transfer {
				pub params: runtime_types::ibc_transfer::pallet::TransferParams,
				pub asset_id: runtime_types::primitives::currency::CurrencyId,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Call for Transfer {
				const PALLET: &'static str = "Transfer";
				const FUNCTION: &'static str = "transfer";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct OpenChannel {
				pub params: runtime_types::ibc_trait::OpenChannelParams,
			}
			impl ::subxt::Call for OpenChannel {
				const PALLET: &'static str = "Transfer";
				const FUNCTION: &'static str = "open_channel";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SetPalletParams {
				pub params: runtime_types::ibc_transfer::pallet::PalletParams,
			}
			impl ::subxt::Call for SetPalletParams {
				const PALLET: &'static str = "Transfer";
				const FUNCTION: &'static str = "set_pallet_params";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				pub fn transfer(
					&self,
					params: runtime_types::ibc_transfer::pallet::TransferParams,
					asset_id: runtime_types::primitives::currency::CurrencyId,
					amount: ::core::primitive::u128,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Transfer,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Transfer>()?
					};
					if runtime_call_hash ==
						[
							120u8, 208u8, 28u8, 92u8, 69u8, 249u8, 252u8, 105u8, 64u8, 232u8, 84u8,
							66u8, 235u8, 30u8, 25u8, 12u8, 51u8, 12u8, 183u8, 52u8, 130u8, 131u8,
							183u8, 0u8, 95u8, 180u8, 247u8, 89u8, 197u8, 101u8, 42u8, 218u8,
						] {
						let call = Transfer { params, asset_id, amount };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn open_channel(
					&self,
					params: runtime_types::ibc_trait::OpenChannelParams,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						OpenChannel,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<OpenChannel>()?
					};
					if runtime_call_hash ==
						[
							109u8, 41u8, 32u8, 59u8, 130u8, 39u8, 143u8, 113u8, 63u8, 39u8, 12u8,
							47u8, 241u8, 121u8, 131u8, 242u8, 76u8, 147u8, 153u8, 169u8, 131u8,
							58u8, 24u8, 88u8, 248u8, 131u8, 58u8, 129u8, 186u8, 224u8, 99u8, 183u8,
						] {
						let call = OpenChannel { params };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn set_pallet_params(
					&self,
					params: runtime_types::ibc_transfer::pallet::PalletParams,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						SetPalletParams,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<SetPalletParams>()?
					};
					if runtime_call_hash ==
						[
							59u8, 92u8, 123u8, 215u8, 247u8, 196u8, 178u8, 224u8, 105u8, 238u8,
							83u8, 200u8, 32u8, 91u8, 229u8, 62u8, 175u8, 63u8, 145u8, 154u8, 55u8,
							194u8, 176u8, 206u8, 12u8, 200u8, 106u8, 194u8, 231u8, 81u8, 194u8,
							173u8,
						] {
						let call = SetPalletParams { params };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::ibc_transfer::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct TokenTransferInitiated {
				pub from: ::subxt::sp_core::crypto::AccountId32,
				pub to: ::std::vec::Vec<::core::primitive::u8>,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::Event for TokenTransferInitiated {
				const PALLET: &'static str = "Transfer";
				const EVENT: &'static str = "TokenTransferInitiated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "A channel has been opened"]
			pub struct ChannelOpened {
				pub channel_id: ::std::vec::Vec<::core::primitive::u8>,
				pub port_id: ::std::vec::Vec<::core::primitive::u8>,
			}
			impl ::subxt::Event for ChannelOpened {
				const PALLET: &'static str = "Transfer";
				const EVENT: &'static str = "ChannelOpened";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Pallet params updated"]
			pub struct PalletParamsUpdated {
				pub send_enabled: ::core::primitive::bool,
				pub receive_enabled: ::core::primitive::bool,
			}
			impl ::subxt::Event for PalletParamsUpdated {
				const PALLET: &'static str = "Transfer";
				const EVENT: &'static str = "PalletParamsUpdated";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct Params;
			impl ::subxt::StorageEntry for Params {
				const PALLET: &'static str = "Transfer";
				const STORAGE: &'static str = "Params";
				type Value = runtime_types::ibc_transfer::pallet::PalletParams;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct IbcAssetIds<'a>(pub &'a runtime_types::primitives::currency::CurrencyId);
			impl ::subxt::StorageEntry for IbcAssetIds<'_> {
				const PALLET: &'static str = "Transfer";
				const STORAGE: &'static str = "IbcAssetIds";
				type Value = ::std::vec::Vec<::core::primitive::u8>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Twox64Concat,
					)])
				}
			}
			pub struct ChannelIds;
			impl ::subxt::StorageEntry for ChannelIds {
				const PALLET: &'static str = "Transfer";
				const STORAGE: &'static str = "ChannelIds";
				type Value = ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " Pallet Params used to disable sending or receipt of ibc tokens"]
				pub fn params(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::ibc_transfer::pallet::PalletParams,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Params>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								3u8, 55u8, 60u8, 27u8, 102u8, 66u8, 127u8, 111u8, 252u8, 82u8,
								178u8, 63u8, 66u8, 169u8, 82u8, 3u8, 4u8, 98u8, 227u8, 34u8, 90u8,
								230u8, 176u8, 152u8, 57u8, 109u8, 189u8, 6u8, 97u8, 160u8, 129u8,
								4u8,
							] {
							let entry = Params;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Map of asset id to ibc denom pairs (T::AssetId, Vec<u8>)"]
				#[doc = " ibc denoms represented as utf8 string bytes"]
				pub fn ibc_asset_ids(
					&self,
					_0: &'a runtime_types::primitives::currency::CurrencyId,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<IbcAssetIds>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								101u8, 147u8, 209u8, 89u8, 150u8, 173u8, 2u8, 130u8, 228u8, 188u8,
								219u8, 120u8, 134u8, 151u8, 22u8, 15u8, 119u8, 221u8, 3u8, 152u8,
								255u8, 224u8, 199u8, 215u8, 158u8, 129u8, 78u8, 92u8, 233u8, 227u8,
								72u8, 213u8,
							] {
							let entry = IbcAssetIds(_0);
							client.storage().fetch(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " Map of asset id to ibc denom pairs (T::AssetId, Vec<u8>)"]
				#[doc = " ibc denoms represented as utf8 string bytes"]
				pub fn ibc_asset_ids_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, IbcAssetIds<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<IbcAssetIds>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								101u8, 147u8, 209u8, 89u8, 150u8, 173u8, 2u8, 130u8, 228u8, 188u8,
								219u8, 120u8, 134u8, 151u8, 22u8, 15u8, 119u8, 221u8, 3u8, 152u8,
								255u8, 224u8, 199u8, 215u8, 158u8, 129u8, 78u8, 92u8, 233u8, 227u8,
								72u8, 213u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " ChannelIds open from this module"]
				pub fn channel_ids(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ChannelIds>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								21u8, 104u8, 164u8, 90u8, 17u8, 181u8, 235u8, 0u8, 67u8, 67u8,
								164u8, 217u8, 126u8, 131u8, 214u8, 38u8, 143u8, 134u8, 215u8,
								173u8, 53u8, 154u8, 118u8, 215u8, 175u8, 207u8, 14u8, 134u8, 241u8,
								215u8, 188u8, 69u8,
							] {
							let entry = ChannelIds;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				pub fn pallet_id(
					&self,
				) -> ::core::result::Result<
					runtime_types::frame_support::PalletId,
					::subxt::BasicError,
				> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Transfer", "PalletId")? ==
						[
							47u8, 196u8, 12u8, 56u8, 70u8, 61u8, 100u8, 138u8, 108u8, 108u8, 90u8,
							23u8, 248u8, 66u8, 133u8, 219u8, 203u8, 67u8, 110u8, 148u8, 237u8,
							25u8, 151u8, 59u8, 72u8, 78u8, 118u8, 83u8, 186u8, 237u8, 12u8, 235u8,
						] {
						let pallet = metadata.pallet("Transfer")?;
						let constant = pallet.constant("PalletId")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod ibc {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Deliver {
				pub messages: ::std::vec::Vec<runtime_types::pallet_ibc::Any>,
			}
			impl ::subxt::Call for Deliver {
				const PALLET: &'static str = "Ibc";
				const FUNCTION: &'static str = "deliver";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct CreateClient {
				pub msg: runtime_types::pallet_ibc::Any,
			}
			impl ::subxt::Call for CreateClient {
				const PALLET: &'static str = "Ibc";
				const FUNCTION: &'static str = "create_client";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct InitiateConnection {
				pub params: runtime_types::pallet_ibc::ConnectionParams,
			}
			impl ::subxt::Call for InitiateConnection {
				const PALLET: &'static str = "Ibc";
				const FUNCTION: &'static str = "initiate_connection";
			}
			pub struct TransactionApi<'a, T: ::subxt::Config, X> {
				client: &'a ::subxt::Client<T>,
				marker: ::core::marker::PhantomData<X>,
			}
			impl<'a, T, X> TransactionApi<'a, T, X>
			where
				T: ::subxt::Config,
				X: ::subxt::extrinsic::ExtrinsicParams<T>,
			{
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client, marker: ::core::marker::PhantomData }
				}
				pub fn deliver(
					&self,
					messages: ::std::vec::Vec<runtime_types::pallet_ibc::Any>,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						Deliver,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<Deliver>()?
					};
					if runtime_call_hash ==
						[
							137u8, 41u8, 176u8, 222u8, 112u8, 133u8, 122u8, 71u8, 86u8, 164u8,
							20u8, 55u8, 79u8, 68u8, 244u8, 181u8, 188u8, 105u8, 23u8, 25u8, 42u8,
							88u8, 181u8, 102u8, 176u8, 171u8, 195u8, 234u8, 251u8, 57u8, 255u8,
							220u8,
						] {
						let call = Deliver { messages };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn create_client(
					&self,
					msg: runtime_types::pallet_ibc::Any,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						CreateClient,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<CreateClient>()?
					};
					if runtime_call_hash ==
						[
							211u8, 110u8, 33u8, 54u8, 39u8, 113u8, 31u8, 140u8, 240u8, 205u8, 36u8,
							118u8, 86u8, 54u8, 52u8, 175u8, 253u8, 184u8, 100u8, 108u8, 141u8,
							174u8, 219u8, 15u8, 18u8, 180u8, 242u8, 55u8, 6u8, 150u8, 245u8, 203u8,
						] {
						let call = CreateClient { msg };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
				pub fn initiate_connection(
					&self,
					params: runtime_types::pallet_ibc::ConnectionParams,
				) -> Result<
					::subxt::SubmittableExtrinsic<
						'a,
						T,
						X,
						InitiateConnection,
						DispatchError,
						root_mod::Event,
					>,
					::subxt::BasicError,
				> {
					let runtime_call_hash = {
						let locked_metadata = self.client.metadata();
						let metadata = locked_metadata.read();
						metadata.call_hash::<InitiateConnection>()?
					};
					if runtime_call_hash ==
						[
							207u8, 143u8, 255u8, 158u8, 100u8, 42u8, 176u8, 193u8, 94u8, 53u8,
							234u8, 218u8, 108u8, 190u8, 74u8, 35u8, 180u8, 2u8, 133u8, 164u8,
							230u8, 167u8, 161u8, 11u8, 151u8, 3u8, 170u8, 213u8, 123u8, 251u8,
							196u8, 131u8,
						] {
						let call = InitiateConnection { params };
						Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_ibc::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Processed incoming ibc messages"]
			pub struct ProcessedIBCMessages;
			impl ::subxt::Event for ProcessedIBCMessages {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "ProcessedIBCMessages";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Initiated a new connection"]
			pub struct ConnectionInitiated;
			impl ::subxt::Event for ConnectionInitiated {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "ConnectionInitiated";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Raw Ibc events"]
			pub struct IbcEvents {
				pub events: ::std::vec::Vec<runtime_types::pallet_ibc::events::IbcEvent>,
			}
			impl ::subxt::Event for IbcEvents {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "IbcEvents";
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			#[doc = "Ibc errors"]
			pub struct IbcErrors {
				pub errors: ::std::vec::Vec<runtime_types::pallet_ibc::errors::IbcError>,
			}
			impl ::subxt::Event for IbcErrors {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "IbcErrors";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct ClientStates<'a>(pub &'a [::core::primitive::u8]);
			impl ::subxt::StorageEntry for ClientStates<'_> {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "ClientStates";
				type Value = ::std::vec::Vec<::core::primitive::u8>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct ConsensusStates<'a>(
				pub &'a [::core::primitive::u8],
				pub &'a [::core::primitive::u8],
			);
			impl ::subxt::StorageEntry for ConsensusStates<'_> {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "ConsensusStates";
				type Value = ::std::vec::Vec<::core::primitive::u8>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct ClientUpdateHeight<'a>(
				pub &'a [::core::primitive::u8],
				pub &'a [::core::primitive::u8],
			);
			impl ::subxt::StorageEntry for ClientUpdateHeight<'_> {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "ClientUpdateHeight";
				type Value = ::std::vec::Vec<::core::primitive::u8>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct ClientUpdateTime<'a>(
				pub &'a [::core::primitive::u8],
				pub &'a [::core::primitive::u8],
			);
			impl ::subxt::StorageEntry for ClientUpdateTime<'_> {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "ClientUpdateTime";
				type Value = ::core::primitive::u64;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct Connections<'a>(pub &'a [::core::primitive::u8]);
			impl ::subxt::StorageEntry for Connections<'_> {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "Connections";
				type Value = ::std::vec::Vec<::core::primitive::u8>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct CounterForConnections;
			impl ::subxt::StorageEntry for CounterForConnections {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "CounterForConnections";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct ChannelCounter;
			impl ::subxt::StorageEntry for ChannelCounter {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "ChannelCounter";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Channels<'a>(
				pub &'a [::core::primitive::u8],
				pub &'a [::core::primitive::u8],
			);
			impl ::subxt::StorageEntry for Channels<'_> {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "Channels";
				type Value = ::std::vec::Vec<::core::primitive::u8>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct ChannelsConnection<'a>(pub &'a [::core::primitive::u8]);
			impl ::subxt::StorageEntry for ChannelsConnection<'_> {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "ChannelsConnection";
				type Value = ::std::vec::Vec<(
					::std::vec::Vec<::core::primitive::u8>,
					::std::vec::Vec<::core::primitive::u8>,
				)>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct NextSequenceSend<'a>(
				pub &'a [::core::primitive::u8],
				pub &'a [::core::primitive::u8],
			);
			impl ::subxt::StorageEntry for NextSequenceSend<'_> {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "NextSequenceSend";
				type Value = ::core::primitive::u64;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct NextSequenceRecv<'a>(
				pub &'a [::core::primitive::u8],
				pub &'a [::core::primitive::u8],
			);
			impl ::subxt::StorageEntry for NextSequenceRecv<'_> {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "NextSequenceRecv";
				type Value = ::core::primitive::u64;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct NextSequenceAck<'a>(
				pub &'a [::core::primitive::u8],
				pub &'a [::core::primitive::u8],
			);
			impl ::subxt::StorageEntry for NextSequenceAck<'_> {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "NextSequenceAck";
				type Value = ::core::primitive::u64;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![
						::subxt::StorageMapKey::new(
							&self.0,
							::subxt::StorageHasher::Blake2_128Concat,
						),
						::subxt::StorageMapKey::new(
							&self.1,
							::subxt::StorageHasher::Blake2_128Concat,
						),
					])
				}
			}
			pub struct Acknowledgements<'a>(
				pub &'a [::core::primitive::u8],
				pub &'a [::core::primitive::u8],
				pub &'a ::core::primitive::u64,
			);
			impl ::subxt::StorageEntry for Acknowledgements<'_> {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "Acknowledgements";
				type Value = ::std::vec::Vec<::core::primitive::u8>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&(&self.0, &self.1, &self.2),
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct CounterForAcknowledgements;
			impl ::subxt::StorageEntry for CounterForAcknowledgements {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "CounterForAcknowledgements";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct Clients<'a>(pub &'a [::core::primitive::u8]);
			impl ::subxt::StorageEntry for Clients<'_> {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "Clients";
				type Value = ::std::vec::Vec<::core::primitive::u8>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct CounterForClients;
			impl ::subxt::StorageEntry for CounterForClients {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "CounterForClients";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct ConnectionClient<'a>(pub &'a [::core::primitive::u8]);
			impl ::subxt::StorageEntry for ConnectionClient<'_> {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "ConnectionClient";
				type Value = ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&self.0,
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct PacketReceipt<'a>(
				pub &'a [::core::primitive::u8],
				pub &'a [::core::primitive::u8],
				pub &'a ::core::primitive::u64,
			);
			impl ::subxt::StorageEntry for PacketReceipt<'_> {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "PacketReceipt";
				type Value = ::std::vec::Vec<::core::primitive::u8>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&(&self.0, &self.1, &self.2),
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct CounterForPacketReceipt;
			impl ::subxt::StorageEntry for CounterForPacketReceipt {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "CounterForPacketReceipt";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct PacketCommitment<'a>(
				pub &'a [::core::primitive::u8],
				pub &'a [::core::primitive::u8],
				pub &'a ::core::primitive::u64,
			);
			impl ::subxt::StorageEntry for PacketCommitment<'_> {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "PacketCommitment";
				type Value = ::std::vec::Vec<::core::primitive::u8>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
						&(&self.0, &self.1, &self.2),
						::subxt::StorageHasher::Blake2_128Concat,
					)])
				}
			}
			pub struct CounterForPacketCommitment;
			impl ::subxt::StorageEntry for CounterForPacketCommitment {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "CounterForPacketCommitment";
				type Value = ::core::primitive::u32;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct HostConsensusStates;
			impl ::subxt::StorageEntry for HostConsensusStates {
				const PALLET: &'static str = "Ibc";
				const STORAGE: &'static str = "HostConsensusStates";
				type Value =
					runtime_types::frame_support::storage::bounded_btree_map::BoundedBTreeMap<
						::core::primitive::u64,
						runtime_types::pallet_ibc::IbcConsensusState,
					>;
				fn key(&self) -> ::subxt::StorageEntryKey {
					::subxt::StorageEntryKey::Plain
				}
			}
			pub struct StorageApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				#[doc = " client_id => ClientState"]
				pub fn client_states(
					&self,
					_0: &'a [::core::primitive::u8],
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::core::primitive::u8>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ClientStates>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								152u8, 61u8, 20u8, 185u8, 66u8, 82u8, 87u8, 198u8, 200u8, 82u8,
								17u8, 70u8, 194u8, 161u8, 141u8, 18u8, 150u8, 161u8, 211u8, 177u8,
								40u8, 189u8, 70u8, 104u8, 51u8, 190u8, 94u8, 171u8, 157u8, 254u8,
								120u8, 254u8,
							] {
							let entry = ClientStates(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " client_id => ClientState"]
				pub fn client_states_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, ClientStates<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ClientStates>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								152u8, 61u8, 20u8, 185u8, 66u8, 82u8, 87u8, 198u8, 200u8, 82u8,
								17u8, 70u8, 194u8, 161u8, 141u8, 18u8, 150u8, 161u8, 211u8, 177u8,
								40u8, 189u8, 70u8, 104u8, 51u8, 190u8, 94u8, 171u8, 157u8, 254u8,
								120u8, 254u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " client_id, height => ConsensusState"]
				pub fn consensus_states(
					&self,
					_0: &'a [::core::primitive::u8],
					_1: &'a [::core::primitive::u8],
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::core::primitive::u8>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ConsensusStates>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								255u8, 39u8, 86u8, 121u8, 77u8, 241u8, 148u8, 132u8, 156u8, 123u8,
								194u8, 169u8, 175u8, 214u8, 138u8, 191u8, 68u8, 235u8, 182u8,
								236u8, 190u8, 8u8, 89u8, 40u8, 41u8, 128u8, 115u8, 182u8, 149u8,
								16u8, 247u8, 4u8,
							] {
							let entry = ConsensusStates(_0, _1);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " client_id, height => ConsensusState"]
				pub fn consensus_states_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, ConsensusStates<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ConsensusStates>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								255u8, 39u8, 86u8, 121u8, 77u8, 241u8, 148u8, 132u8, 156u8, 123u8,
								194u8, 169u8, 175u8, 214u8, 138u8, 191u8, 68u8, 235u8, 182u8,
								236u8, 190u8, 8u8, 89u8, 40u8, 41u8, 128u8, 115u8, 182u8, 149u8,
								16u8, 247u8, 4u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " client_id , Height => Height"]
				pub fn client_update_height(
					&self,
					_0: &'a [::core::primitive::u8],
					_1: &'a [::core::primitive::u8],
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::core::primitive::u8>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ClientUpdateHeight>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								209u8, 84u8, 212u8, 177u8, 250u8, 147u8, 136u8, 149u8, 231u8, 34u8,
								164u8, 47u8, 254u8, 183u8, 58u8, 126u8, 85u8, 221u8, 39u8, 54u8,
								60u8, 221u8, 88u8, 168u8, 195u8, 106u8, 67u8, 127u8, 60u8, 158u8,
								191u8, 131u8,
							] {
							let entry = ClientUpdateHeight(_0, _1);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " client_id , Height => Height"]
				pub fn client_update_height_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, ClientUpdateHeight<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ClientUpdateHeight>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								209u8, 84u8, 212u8, 177u8, 250u8, 147u8, 136u8, 149u8, 231u8, 34u8,
								164u8, 47u8, 254u8, 183u8, 58u8, 126u8, 85u8, 221u8, 39u8, 54u8,
								60u8, 221u8, 88u8, 168u8, 195u8, 106u8, 67u8, 127u8, 60u8, 158u8,
								191u8, 131u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " client_id , Height => Timestamp"]
				pub fn client_update_time(
					&self,
					_0: &'a [::core::primitive::u8],
					_1: &'a [::core::primitive::u8],
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ClientUpdateTime>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								152u8, 60u8, 85u8, 39u8, 72u8, 28u8, 27u8, 55u8, 110u8, 87u8,
								214u8, 56u8, 172u8, 103u8, 251u8, 23u8, 7u8, 241u8, 156u8, 102u8,
								22u8, 48u8, 50u8, 120u8, 44u8, 193u8, 123u8, 95u8, 110u8, 141u8,
								152u8, 254u8,
							] {
							let entry = ClientUpdateTime(_0, _1);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " client_id , Height => Timestamp"]
				pub fn client_update_time_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, ClientUpdateTime<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ClientUpdateTime>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								152u8, 60u8, 85u8, 39u8, 72u8, 28u8, 27u8, 55u8, 110u8, 87u8,
								214u8, 56u8, 172u8, 103u8, 251u8, 23u8, 7u8, 241u8, 156u8, 102u8,
								22u8, 48u8, 50u8, 120u8, 44u8, 193u8, 123u8, 95u8, 110u8, 141u8,
								152u8, 254u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " connection_id => ConnectionEnd"]
				pub fn connections(
					&self,
					_0: &'a [::core::primitive::u8],
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::core::primitive::u8>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Connections>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								37u8, 64u8, 201u8, 194u8, 200u8, 243u8, 164u8, 32u8, 192u8, 132u8,
								162u8, 108u8, 130u8, 185u8, 100u8, 253u8, 190u8, 135u8, 162u8,
								24u8, 69u8, 214u8, 50u8, 186u8, 139u8, 178u8, 132u8, 250u8, 230u8,
								252u8, 225u8, 209u8,
							] {
							let entry = Connections(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " connection_id => ConnectionEnd"]
				pub fn connections_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Connections<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Connections>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								37u8, 64u8, 201u8, 194u8, 200u8, 243u8, 164u8, 32u8, 192u8, 132u8,
								162u8, 108u8, 130u8, 185u8, 100u8, 253u8, 190u8, 135u8, 162u8,
								24u8, 69u8, 214u8, 50u8, 186u8, 139u8, 178u8, 132u8, 250u8, 230u8,
								252u8, 225u8, 209u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_connections(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<CounterForConnections>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								216u8, 127u8, 6u8, 201u8, 44u8, 80u8, 43u8, 80u8, 70u8, 62u8, 44u8,
								118u8, 28u8, 143u8, 236u8, 194u8, 129u8, 96u8, 29u8, 166u8, 83u8,
								147u8, 169u8, 91u8, 70u8, 24u8, 93u8, 118u8, 141u8, 45u8, 41u8,
								124u8,
							] {
							let entry = CounterForConnections;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				pub fn channel_counter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ChannelCounter>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								227u8, 20u8, 185u8, 41u8, 83u8, 61u8, 150u8, 45u8, 251u8, 243u8,
								199u8, 188u8, 94u8, 160u8, 194u8, 25u8, 245u8, 89u8, 69u8, 105u8,
								37u8, 220u8, 143u8, 106u8, 244u8, 161u8, 215u8, 129u8, 220u8, 79u8,
								193u8, 255u8,
							] {
							let entry = ChannelCounter;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " (port_identifier, channel_identifier) => ChannelEnd"]
				pub fn channels(
					&self,
					_0: &'a [::core::primitive::u8],
					_1: &'a [::core::primitive::u8],
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::core::primitive::u8>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Channels>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								132u8, 125u8, 252u8, 86u8, 67u8, 210u8, 214u8, 68u8, 117u8, 174u8,
								15u8, 92u8, 78u8, 54u8, 84u8, 180u8, 38u8, 63u8, 63u8, 157u8, 40u8,
								118u8, 53u8, 100u8, 155u8, 68u8, 117u8, 246u8, 215u8, 200u8, 109u8,
								96u8,
							] {
							let entry = Channels(_0, _1);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " (port_identifier, channel_identifier) => ChannelEnd"]
				pub fn channels_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Channels<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Channels>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								132u8, 125u8, 252u8, 86u8, 67u8, 210u8, 214u8, 68u8, 117u8, 174u8,
								15u8, 92u8, 78u8, 54u8, 84u8, 180u8, 38u8, 63u8, 63u8, 157u8, 40u8,
								118u8, 53u8, 100u8, 155u8, 68u8, 117u8, 246u8, 215u8, 200u8, 109u8,
								96u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " connection_identifier => Vec<(port_id, channel_id)>"]
				pub fn channels_connection(
					&self,
					_0: &'a [::core::primitive::u8],
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<(
							::std::vec::Vec<::core::primitive::u8>,
							::std::vec::Vec<::core::primitive::u8>,
						)>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ChannelsConnection>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								175u8, 74u8, 214u8, 39u8, 82u8, 72u8, 28u8, 110u8, 105u8, 136u8,
								218u8, 218u8, 110u8, 111u8, 182u8, 21u8, 180u8, 80u8, 66u8, 44u8,
								85u8, 138u8, 56u8, 102u8, 121u8, 201u8, 111u8, 240u8, 73u8, 7u8,
								8u8, 115u8,
							] {
							let entry = ChannelsConnection(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " connection_identifier => Vec<(port_id, channel_id)>"]
				pub fn channels_connection_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, ChannelsConnection<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ChannelsConnection>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								175u8, 74u8, 214u8, 39u8, 82u8, 72u8, 28u8, 110u8, 105u8, 136u8,
								218u8, 218u8, 110u8, 111u8, 182u8, 21u8, 180u8, 80u8, 66u8, 44u8,
								85u8, 138u8, 56u8, 102u8, 121u8, 201u8, 111u8, 240u8, 73u8, 7u8,
								8u8, 115u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " (port_identifier, channel_identifier) => Sequence"]
				pub fn next_sequence_send(
					&self,
					_0: &'a [::core::primitive::u8],
					_1: &'a [::core::primitive::u8],
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<NextSequenceSend>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								235u8, 6u8, 179u8, 32u8, 206u8, 228u8, 221u8, 192u8, 182u8, 77u8,
								147u8, 61u8, 1u8, 18u8, 211u8, 30u8, 212u8, 95u8, 17u8, 21u8,
								110u8, 247u8, 249u8, 27u8, 255u8, 35u8, 199u8, 66u8, 151u8, 35u8,
								38u8, 89u8,
							] {
							let entry = NextSequenceSend(_0, _1);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " (port_identifier, channel_identifier) => Sequence"]
				pub fn next_sequence_send_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, NextSequenceSend<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<NextSequenceSend>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								235u8, 6u8, 179u8, 32u8, 206u8, 228u8, 221u8, 192u8, 182u8, 77u8,
								147u8, 61u8, 1u8, 18u8, 211u8, 30u8, 212u8, 95u8, 17u8, 21u8,
								110u8, 247u8, 249u8, 27u8, 255u8, 35u8, 199u8, 66u8, 151u8, 35u8,
								38u8, 89u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " (port_identifier, channel_identifier) => Sequence"]
				pub fn next_sequence_recv(
					&self,
					_0: &'a [::core::primitive::u8],
					_1: &'a [::core::primitive::u8],
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<NextSequenceRecv>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								80u8, 41u8, 118u8, 188u8, 162u8, 6u8, 96u8, 13u8, 225u8, 7u8,
								106u8, 250u8, 6u8, 88u8, 54u8, 179u8, 0u8, 177u8, 51u8, 106u8,
								108u8, 215u8, 168u8, 112u8, 71u8, 116u8, 8u8, 206u8, 5u8, 229u8,
								9u8, 96u8,
							] {
							let entry = NextSequenceRecv(_0, _1);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " (port_identifier, channel_identifier) => Sequence"]
				pub fn next_sequence_recv_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, NextSequenceRecv<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<NextSequenceRecv>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								80u8, 41u8, 118u8, 188u8, 162u8, 6u8, 96u8, 13u8, 225u8, 7u8,
								106u8, 250u8, 6u8, 88u8, 54u8, 179u8, 0u8, 177u8, 51u8, 106u8,
								108u8, 215u8, 168u8, 112u8, 71u8, 116u8, 8u8, 206u8, 5u8, 229u8,
								9u8, 96u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " (port_identifier, channel_identifier) = Sequence"]
				pub fn next_sequence_ack(
					&self,
					_0: &'a [::core::primitive::u8],
					_1: &'a [::core::primitive::u8],
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<NextSequenceAck>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								147u8, 124u8, 181u8, 38u8, 195u8, 193u8, 149u8, 254u8, 197u8,
								131u8, 190u8, 11u8, 205u8, 208u8, 18u8, 157u8, 211u8, 200u8, 166u8,
								38u8, 15u8, 178u8, 151u8, 102u8, 207u8, 91u8, 254u8, 191u8, 182u8,
								106u8, 30u8, 86u8,
							] {
							let entry = NextSequenceAck(_0, _1);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " (port_identifier, channel_identifier) = Sequence"]
				pub fn next_sequence_ack_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, NextSequenceAck<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<NextSequenceAck>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								147u8, 124u8, 181u8, 38u8, 195u8, 193u8, 149u8, 254u8, 197u8,
								131u8, 190u8, 11u8, 205u8, 208u8, 18u8, 157u8, 211u8, 200u8, 166u8,
								38u8, 15u8, 178u8, 151u8, 102u8, 207u8, 91u8, 254u8, 191u8, 182u8,
								106u8, 30u8, 86u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " (port_identifier, channel_identifier, Sequence) => Hash"]
				pub fn acknowledgements(
					&self,
					_0: &'a [::core::primitive::u8],
					_1: &'a [::core::primitive::u8],
					_2: &'a ::core::primitive::u64,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::core::primitive::u8>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Acknowledgements>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								206u8, 197u8, 174u8, 169u8, 225u8, 242u8, 251u8, 0u8, 204u8, 76u8,
								22u8, 232u8, 107u8, 130u8, 134u8, 80u8, 241u8, 110u8, 82u8, 228u8,
								207u8, 47u8, 178u8, 44u8, 208u8, 6u8, 137u8, 185u8, 232u8, 154u8,
								234u8, 229u8,
							] {
							let entry = Acknowledgements(_0, _1, _2);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " (port_identifier, channel_identifier, Sequence) => Hash"]
				pub fn acknowledgements_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Acknowledgements<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Acknowledgements>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								206u8, 197u8, 174u8, 169u8, 225u8, 242u8, 251u8, 0u8, 204u8, 76u8,
								22u8, 232u8, 107u8, 130u8, 134u8, 80u8, 241u8, 110u8, 82u8, 228u8,
								207u8, 47u8, 178u8, 44u8, 208u8, 6u8, 137u8, 185u8, 232u8, 154u8,
								234u8, 229u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_acknowledgements(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<CounterForAcknowledgements>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								180u8, 21u8, 148u8, 199u8, 174u8, 127u8, 11u8, 153u8, 84u8, 28u8,
								25u8, 126u8, 126u8, 107u8, 175u8, 57u8, 195u8, 142u8, 99u8, 78u8,
								10u8, 175u8, 24u8, 71u8, 242u8, 228u8, 96u8, 156u8, 141u8, 104u8,
								125u8, 231u8,
							] {
							let entry = CounterForAcknowledgements;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " clientId => ClientType"]
				pub fn clients(
					&self,
					_0: &'a [::core::primitive::u8],
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::core::primitive::u8>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Clients>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								239u8, 211u8, 78u8, 91u8, 26u8, 160u8, 9u8, 221u8, 209u8, 43u8,
								118u8, 199u8, 130u8, 221u8, 246u8, 23u8, 153u8, 204u8, 137u8,
								253u8, 108u8, 38u8, 149u8, 191u8, 248u8, 65u8, 239u8, 43u8, 133u8,
								6u8, 153u8, 234u8,
							] {
							let entry = Clients(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " clientId => ClientType"]
				pub fn clients_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, Clients<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<Clients>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								239u8, 211u8, 78u8, 91u8, 26u8, 160u8, 9u8, 221u8, 209u8, 43u8,
								118u8, 199u8, 130u8, 221u8, 246u8, 23u8, 153u8, 204u8, 137u8,
								253u8, 108u8, 38u8, 149u8, 191u8, 248u8, 65u8, 239u8, 43u8, 133u8,
								6u8, 153u8, 234u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_clients(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<CounterForClients>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								75u8, 153u8, 189u8, 119u8, 57u8, 175u8, 105u8, 82u8, 201u8, 34u8,
								246u8, 162u8, 84u8, 150u8, 137u8, 106u8, 192u8, 206u8, 67u8, 221u8,
								49u8, 237u8, 106u8, 163u8, 29u8, 232u8, 19u8, 17u8, 127u8, 68u8,
								93u8, 21u8,
							] {
							let entry = CounterForClients;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " client_id => Vec<Connection_id>"]
				pub fn connection_client(
					&self,
					_0: &'a [::core::primitive::u8],
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ConnectionClient>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								134u8, 166u8, 43u8, 43u8, 142u8, 200u8, 83u8, 81u8, 252u8, 1u8,
								153u8, 167u8, 197u8, 170u8, 154u8, 242u8, 241u8, 178u8, 166u8,
								147u8, 223u8, 188u8, 118u8, 48u8, 40u8, 203u8, 29u8, 17u8, 120u8,
								250u8, 79u8, 111u8,
							] {
							let entry = ConnectionClient(_0);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " client_id => Vec<Connection_id>"]
				pub fn connection_client_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, ConnectionClient<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<ConnectionClient>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								134u8, 166u8, 43u8, 43u8, 142u8, 200u8, 83u8, 81u8, 252u8, 1u8,
								153u8, 167u8, 197u8, 170u8, 154u8, 242u8, 241u8, 178u8, 166u8,
								147u8, 223u8, 188u8, 118u8, 48u8, 40u8, 203u8, 29u8, 17u8, 120u8,
								250u8, 79u8, 111u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " (port_id, channel_id, sequence) => receipt"]
				pub fn packet_receipt(
					&self,
					_0: &'a [::core::primitive::u8],
					_1: &'a [::core::primitive::u8],
					_2: &'a ::core::primitive::u64,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::core::primitive::u8>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<PacketReceipt>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								22u8, 193u8, 92u8, 29u8, 149u8, 139u8, 131u8, 221u8, 44u8, 64u8,
								15u8, 202u8, 60u8, 120u8, 135u8, 36u8, 94u8, 167u8, 46u8, 215u8,
								253u8, 68u8, 58u8, 87u8, 241u8, 99u8, 233u8, 94u8, 231u8, 72u8,
								211u8, 114u8,
							] {
							let entry = PacketReceipt(_0, _1, _2);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " (port_id, channel_id, sequence) => receipt"]
				pub fn packet_receipt_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, PacketReceipt<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<PacketReceipt>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								22u8, 193u8, 92u8, 29u8, 149u8, 139u8, 131u8, 221u8, 44u8, 64u8,
								15u8, 202u8, 60u8, 120u8, 135u8, 36u8, 94u8, 167u8, 46u8, 215u8,
								253u8, 68u8, 58u8, 87u8, 241u8, 99u8, 233u8, 94u8, 231u8, 72u8,
								211u8, 114u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_packet_receipt(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<CounterForPacketReceipt>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								8u8, 59u8, 142u8, 186u8, 86u8, 151u8, 62u8, 114u8, 135u8, 146u8,
								192u8, 151u8, 34u8, 23u8, 87u8, 114u8, 110u8, 113u8, 241u8, 44u8,
								191u8, 50u8, 169u8, 15u8, 93u8, 236u8, 93u8, 96u8, 96u8, 56u8,
								42u8, 241u8,
							] {
							let entry = CounterForPacketReceipt;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " (port_id, channel_id, sequence) => hash"]
				pub fn packet_commitment(
					&self,
					_0: &'a [::core::primitive::u8],
					_1: &'a [::core::primitive::u8],
					_2: &'a ::core::primitive::u64,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::std::vec::Vec<::core::primitive::u8>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<PacketCommitment>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								165u8, 156u8, 236u8, 232u8, 108u8, 238u8, 229u8, 185u8, 34u8,
								133u8, 22u8, 21u8, 18u8, 49u8, 241u8, 95u8, 38u8, 231u8, 87u8,
								186u8, 144u8, 169u8, 189u8, 208u8, 215u8, 177u8, 13u8, 29u8, 190u8,
								42u8, 48u8, 87u8,
							] {
							let entry = PacketCommitment(_0, _1, _2);
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " (port_id, channel_id, sequence) => hash"]
				pub fn packet_commitment_iter(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						::subxt::KeyIter<'a, T, PacketCommitment<'a>>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<PacketCommitment>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								165u8, 156u8, 236u8, 232u8, 108u8, 238u8, 229u8, 185u8, 34u8,
								133u8, 22u8, 21u8, 18u8, 49u8, 241u8, 95u8, 38u8, 231u8, 87u8,
								186u8, 144u8, 169u8, 189u8, 208u8, 215u8, 177u8, 13u8, 29u8, 190u8,
								42u8, 48u8, 87u8,
							] {
							client.storage().iter(block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_packet_commitment(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<CounterForPacketCommitment>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								26u8, 245u8, 127u8, 121u8, 96u8, 97u8, 65u8, 88u8, 181u8, 176u8,
								136u8, 69u8, 190u8, 229u8, 186u8, 26u8, 43u8, 107u8, 13u8, 1u8,
								10u8, 198u8, 193u8, 164u8, 41u8, 249u8, 46u8, 214u8, 37u8, 64u8,
								164u8, 137u8,
							] {
							let entry = CounterForPacketCommitment;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
				#[doc = " height => IbcConsensusState"]
				pub fn host_consensus_states(
					&self,
					block_hash: ::core::option::Option<T::Hash>,
				) -> impl ::core::future::Future<
					Output = ::core::result::Result<
						runtime_types::frame_support::storage::bounded_btree_map::BoundedBTreeMap<
							::core::primitive::u64,
							runtime_types::pallet_ibc::IbcConsensusState,
						>,
						::subxt::BasicError,
					>,
				> + 'a {
					let client = self.client;
					async move {
						let runtime_storage_hash = {
							let locked_metadata = client.metadata();
							let metadata = locked_metadata.read();
							match metadata.storage_hash::<HostConsensusStates>() {
								Ok(hash) => hash,
								Err(e) => return Err(e.into()),
							}
						};
						if runtime_storage_hash ==
							[
								106u8, 124u8, 186u8, 112u8, 129u8, 40u8, 150u8, 167u8, 135u8,
								190u8, 19u8, 122u8, 163u8, 34u8, 175u8, 69u8, 66u8, 223u8, 92u8,
								93u8, 136u8, 75u8, 36u8, 231u8, 237u8, 71u8, 210u8, 80u8, 225u8,
								135u8, 18u8, 225u8,
							] {
							let entry = HostConsensusStates;
							client.storage().fetch_or_default(&entry, block_hash).await
						} else {
							Err(::subxt::MetadataError::IncompatibleMetadata.into())
						}
					}
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi<'a, T: ::subxt::Config> {
				client: &'a ::subxt::Client<T>,
			}
			impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
				pub fn new(client: &'a ::subxt::Client<T>) -> Self {
					Self { client }
				}
				pub fn expected_block_time(
					&self,
				) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
					let locked_metadata = self.client.metadata();
					let metadata = locked_metadata.read();
					if metadata.constant_hash("Ibc", "ExpectedBlockTime")? ==
						[
							61u8, 43u8, 178u8, 65u8, 44u8, 100u8, 107u8, 227u8, 245u8, 102u8, 35u8,
							84u8, 230u8, 84u8, 114u8, 184u8, 50u8, 117u8, 121u8, 145u8, 180u8,
							43u8, 211u8, 199u8, 19u8, 59u8, 219u8, 140u8, 251u8, 52u8, 152u8,
							199u8,
						] {
						let pallet = metadata.pallet("Ibc")?;
						let constant = pallet.constant("ExpectedBlockTime")?;
						let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
						Ok(value)
					} else {
						Err(::subxt::MetadataError::IncompatibleMetadata.into())
					}
				}
			}
		}
	}
	pub mod runtime_types {
		use super::runtime_types;
		pub mod common {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum MosaicRemoteAssetId {
					#[codec(index = 0)]
					EthereumTokenAddress([::core::primitive::u8; 20usize]),
				}
			}
		}
		pub mod composable_support {
			use super::runtime_types;
			pub mod collections {
				use super::runtime_types;
				pub mod vec {
					use super::runtime_types;
					pub mod bounded {
						use super::runtime_types;
						pub mod bi_bounded_vec {
							use super::runtime_types;
							#[derive(
								:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug,
							)]
							pub struct BiBoundedVec<_0> {
								pub inner: ::std::vec::Vec<_0>,
							}
						}
					}
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct EcdsaSignature(pub [::core::primitive::u8; 65usize]);
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct EthereumAddress(pub [::core::primitive::u8; 20usize]);
			}
		}
		pub mod composable_traits {
			use super::runtime_types;
			pub mod assets {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct BasicAssetMetadata { pub symbol : runtime_types :: composable_support :: collections :: vec :: bounded :: bi_bounded_vec :: BiBoundedVec < :: core :: primitive :: u8 > , pub name : runtime_types :: composable_support :: collections :: vec :: bounded :: bi_bounded_vec :: BiBoundedVec < :: core :: primitive :: u8 > , }
			}
			pub mod bonded_finance {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum BondDuration<_0> {
					#[codec(index = 0)]
					Finite { return_in: _0 },
					#[codec(index = 1)]
					Infinite,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct BondOffer<_0, _1, _2, _3> {
					pub beneficiary: _0,
					pub asset: _1,
					pub bond_price: _2,
					pub nb_of_bonds: _2,
					pub maturity:
						runtime_types::composable_traits::bonded_finance::BondDuration<_3>,
					pub reward: runtime_types::composable_traits::bonded_finance::BondOfferReward<
						_1,
						_2,
						_3,
					>,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct BondOfferReward<_0, _1, _2> {
					pub asset: _0,
					pub amount: _1,
					pub maturity: _2,
				}
			}
			pub mod call_filter {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct CallFilterEntry<_0> {
					pub pallet_name: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					pub function_name:
						runtime_types::frame_support::storage::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<_0>,
				}
			}
			pub mod defi {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct CurrencyPair<_0> {
					pub base: _0,
					pub quote: _0,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct Sell<_0, _1> {
					pub pair: runtime_types::composable_traits::defi::CurrencyPair<_0>,
					pub take: runtime_types::composable_traits::defi::Take<_0>,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct Take<_0> {
					pub amount: _0,
					pub limit: runtime_types::sp_arithmetic::fixed_point::FixedU128,
				}
			}
			pub mod dex {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct ConstantProductPoolInfo<_0, _1> {
					pub owner: _0,
					pub pair: runtime_types::composable_traits::defi::CurrencyPair<_1>,
					pub lp_token: _1,
					pub fee_config: runtime_types::composable_traits::dex::FeeConfig,
					pub base_weight: runtime_types::sp_arithmetic::per_things::Permill,
					pub quote_weight: runtime_types::sp_arithmetic::per_things::Permill,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum DexRoute<_0, _1> {
					#[codec(index = 0)]
					Direct(runtime_types::frame_support::storage::bounded_vec::BoundedVec<_0>),
					__Ignore(::core::marker::PhantomData<_1>),
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct Fee<_0, _1> {
					pub fee: _1,
					pub lp_fee: _1,
					pub owner_fee: _1,
					pub protocol_fee: _1,
					pub asset_id: _0,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct FeeConfig {
					pub fee_rate: runtime_types::sp_arithmetic::per_things::Permill,
					pub owner_fee_rate: runtime_types::sp_arithmetic::per_things::Permill,
					pub protocol_fee_rate: runtime_types::sp_arithmetic::per_things::Permill,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct LiquidityBootstrappingPoolInfo<_0, _1, _2> {
					pub owner: _0,
					pub pair: runtime_types::composable_traits::defi::CurrencyPair<_1>,
					pub sale: runtime_types::composable_traits::dex::Sale<_2>,
					pub fee_config: runtime_types::composable_traits::dex::FeeConfig,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct Sale<_0> {
					pub start: _0,
					pub end: _0,
					pub initial_weight: runtime_types::sp_arithmetic::per_things::Permill,
					pub final_weight: runtime_types::sp_arithmetic::per_things::Permill,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct StableSwapPoolInfo<_0, _1> {
					pub owner: _0,
					pub pair: runtime_types::composable_traits::defi::CurrencyPair<_1>,
					pub lp_token: _1,
					pub amplification_coefficient: ::core::primitive::u16,
					pub fee_config: runtime_types::composable_traits::dex::FeeConfig,
				}
			}
			pub mod governance {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum SignedRawOrigin<_0> {
					#[codec(index = 0)]
					Root,
					#[codec(index = 1)]
					Signed(_0),
				}
			}
			pub mod lending {
				use super::runtime_types;
				pub mod math {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct CurveModel {
						pub base_rate: runtime_types::sp_arithmetic::fixed_point::FixedU128,
					}
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct DoubleExponentModel {
						pub coefficients: [::core::primitive::u8; 16usize],
					}
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct DynamicPIDControllerModel {
						pub proportional_parameter:
							runtime_types::sp_arithmetic::fixed_point::FixedI128,
						pub integral_parameter:
							runtime_types::sp_arithmetic::fixed_point::FixedI128,
						pub derivative_parameter:
							runtime_types::sp_arithmetic::fixed_point::FixedI128,
						pub previous_error_value:
							runtime_types::sp_arithmetic::fixed_point::FixedI128,
						pub previous_integral_term:
							runtime_types::sp_arithmetic::fixed_point::FixedI128,
						pub previous_interest_rate:
							runtime_types::sp_arithmetic::fixed_point::FixedU128,
						pub target_utilization:
							runtime_types::sp_arithmetic::fixed_point::FixedU128,
					}
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum InterestRateModel {
						# [codec (index = 0)] Jump (runtime_types :: composable_traits :: lending :: math :: JumpModel ,) , # [codec (index = 1)] Curve (runtime_types :: composable_traits :: lending :: math :: CurveModel ,) , # [codec (index = 2)] DynamicPIDController (runtime_types :: composable_traits :: lending :: math :: DynamicPIDControllerModel ,) , # [codec (index = 3)] DoubleExponent (runtime_types :: composable_traits :: lending :: math :: DoubleExponentModel ,) , }
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct JumpModel {
						pub base_rate: runtime_types::sp_arithmetic::fixed_point::FixedU128,
						pub jump_rate: runtime_types::sp_arithmetic::fixed_point::FixedU128,
						pub full_rate: runtime_types::sp_arithmetic::fixed_point::FixedU128,
						pub target_utilization: runtime_types::sp_arithmetic::per_things::Percent,
					}
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct CreateInput<_0, _1, _2> {
					pub updatable: runtime_types::composable_traits::lending::UpdateInput<_0, _0>,
					pub currency_pair: runtime_types::composable_traits::defi::CurrencyPair<_1>,
					pub reserved_factor: runtime_types::sp_arithmetic::per_things::Perquintill,
					pub interest_rate_model:
						runtime_types::composable_traits::lending::math::InterestRateModel,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<_2>,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct MarketConfig<_0, _1, _2, _3, _4> {
					pub manager: _2,
					pub borrow_asset_vault: _0,
					pub collateral_asset: _1,
					pub max_price_age: _3,
					pub collateral_factor: runtime_types::sp_arithmetic::fixed_point::FixedU128,
					pub interest_rate_model:
						runtime_types::composable_traits::lending::math::InterestRateModel,
					pub under_collateralized_warn_percent:
						runtime_types::sp_arithmetic::per_things::Percent,
					pub liquidators: ::std::vec::Vec<_3>,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<_4>,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum RepayStrategy<_0> {
					#[codec(index = 0)]
					TotalDebt,
					#[codec(index = 1)]
					PartialAmount(_0),
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct UpdateInput<_0, _1> {
					pub collateral_factor: runtime_types::sp_arithmetic::fixed_point::FixedU128,
					pub under_collateralized_warn_percent:
						runtime_types::sp_arithmetic::per_things::Percent,
					pub liquidators: ::std::vec::Vec<_0>,
					pub max_price_age: _0,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
				}
			}
			pub mod oracle {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct Price<_0, _1> {
					pub price: _0,
					pub block: _1,
				}
			}
			pub mod time {
				use super::runtime_types;
				#[derive(
					:: subxt :: codec :: CompactAs,
					:: subxt :: codec :: Decode,
					:: subxt :: codec :: Encode,
					Debug,
				)]
				pub struct LinearDecrease {
					pub total: ::core::primitive::u64,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct StairstepExponentialDecrease {
					pub step: ::core::primitive::u64,
					pub cut: runtime_types::sp_arithmetic::per_things::Permill,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum TimeReleaseFunction {
					#[codec(index = 0)]
					LinearDecrease(runtime_types::composable_traits::time::LinearDecrease),
					#[codec(index = 1)]
					StairstepExponentialDecrease(
						runtime_types::composable_traits::time::StairstepExponentialDecrease,
					),
				}
			}
			pub mod vault {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum Deposit<_0, _1> {
					#[codec(index = 0)]
					Existential,
					#[codec(index = 1)]
					Rent { amount: _0, at: _1 },
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct VaultConfig<_0, _1> {
					pub asset_id: _1,
					pub reserved: runtime_types::sp_arithmetic::per_things::Perquintill,
					pub manager: _0,
					pub strategies: ::subxt::KeyedVec<
						_0,
						runtime_types::sp_arithmetic::per_things::Perquintill,
					>,
				}
			}
			pub mod vesting {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct VestingSchedule<_0, _1, _2> {
					pub window: runtime_types::composable_traits::vesting::VestingWindow<_0, _1>,
					pub period_count: _0,
					#[codec(compact)]
					pub per_period: _2,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum VestingWindow<_0, _1> {
					#[codec(index = 0)]
					MomentBased { start: _1, period: _1 },
					#[codec(index = 1)]
					BlockNumberBased { start: _0, period: _0 },
				}
			}
			pub mod xcm {
				use super::runtime_types;
				pub mod assets {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct ForeignMetadata<_0> {
						pub decimals: ::core::option::Option<::core::primitive::u32>,
						pub location: _0,
					}
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct XcmAssetLocation(
						pub runtime_types::xcm::v1::multilocation::MultiLocation,
					);
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct CumulusMethodId {
					pub pallet_instance: ::core::primitive::u8,
					pub method_id: ::core::primitive::u8,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct XcmSellRequest {
					pub order_id: ::core::primitive::u64,
					pub from_to: [::core::primitive::u8; 32usize],
					pub order: runtime_types::composable_traits::defi::Sell<
						::core::primitive::u128,
						::core::primitive::u128,
					>,
					pub configuration: ::core::primitive::u128,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct XcmSellRequestTransactConfiguration {
					pub location: runtime_types::composable_traits::xcm::XcmTransactConfiguration,
					pub configuration_id: ::core::primitive::u128,
					pub fee: ::core::primitive::u128,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct XcmTransactConfiguration {
					pub parachain_id: runtime_types::polkadot_parachain::primitives::Id,
					pub method_id: runtime_types::composable_traits::xcm::CumulusMethodId,
				}
			}
		}
		pub mod cumulus_pallet_dmp_queue {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Service a single overweight message."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `ExecuteOverweightOrigin`."]
					#[doc = "- `index`: The index of the overweight message to service."]
					#[doc = "- `weight_limit`: The amount of weight that message execution may take."]
					#[doc = ""]
					#[doc = "Errors:"]
					#[doc = "- `Unknown`: Message of `index` is unknown."]
					#[doc = "- `OverLimit`: Message execution may use greater than `weight_limit`."]
					#[doc = ""]
					#[doc = "Events:"]
					#[doc = "- `OverweightServiced`: On success."]
					service_overweight {
						index: ::core::primitive::u64,
						weight_limit: ::core::primitive::u64,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The message index given is unknown."]
					Unknown,
					#[codec(index = 1)]
					#[doc = "The amount of weight given is possibly not enough for executing the message."]
					OverLimit,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Downward message is invalid XCM."]
					#[doc = "\\[ id \\]"]
					InvalidFormat([::core::primitive::u8; 32usize]),
					#[codec(index = 1)]
					#[doc = "Downward message is unsupported version of XCM."]
					#[doc = "\\[ id \\]"]
					UnsupportedVersion([::core::primitive::u8; 32usize]),
					#[codec(index = 2)]
					#[doc = "Downward message executed with the given outcome."]
					#[doc = "\\[ id, outcome \\]"]
					ExecutedDownward(
						[::core::primitive::u8; 32usize],
						runtime_types::xcm::v2::traits::Outcome,
					),
					#[codec(index = 3)]
					#[doc = "The weight limit for handling downward messages was reached."]
					#[doc = "\\[ id, remaining, required \\]"]
					WeightExhausted(
						[::core::primitive::u8; 32usize],
						::core::primitive::u64,
						::core::primitive::u64,
					),
					#[codec(index = 4)]
					#[doc = "Downward message is overweight and was placed in the overweight queue."]
					#[doc = "\\[ id, index, required \\]"]
					OverweightEnqueued(
						[::core::primitive::u8; 32usize],
						::core::primitive::u64,
						::core::primitive::u64,
					),
					#[codec(index = 5)]
					#[doc = "Downward message from the overweight queue was executed."]
					#[doc = "\\[ index, used \\]"]
					OverweightServiced(::core::primitive::u64, ::core::primitive::u64),
				}
			}
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct ConfigData {
				pub max_individual: ::core::primitive::u64,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct PageIndexData {
				pub begin_used: ::core::primitive::u32,
				pub end_used: ::core::primitive::u32,
				pub overweight_count: ::core::primitive::u64,
			}
		}
		pub mod cumulus_pallet_parachain_system {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					# [codec (index = 0)] # [doc = "Set the current validation data."] # [doc = ""] # [doc = "This should be invoked exactly once per block. It will panic at the finalization"] # [doc = "phase if the call was not invoked."] # [doc = ""] # [doc = "The dispatch origin for this call must be `Inherent`"] # [doc = ""] # [doc = "As a side effect, this function upgrades the current validation function"] # [doc = "if the appropriate time has come."] set_validation_data { data : runtime_types :: cumulus_primitives_parachain_inherent :: ParachainInherentData , } , # [codec (index = 1)] sudo_send_upward_message { message : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , # [codec (index = 2)] authorize_upgrade { code_hash : :: subxt :: sp_core :: H256 , } , # [codec (index = 3)] enact_authorized_upgrade { code : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , }
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Attempt to upgrade validation function while existing upgrade pending"]
					OverlappingUpgrades,
					#[codec(index = 1)]
					#[doc = "Polkadot currently prohibits this parachain from upgrading its validation function"]
					ProhibitedByPolkadot,
					#[codec(index = 2)]
					#[doc = "The supplied validation function has compiled into a blob larger than Polkadot is"]
					#[doc = "willing to run"]
					TooBig,
					#[codec(index = 3)]
					#[doc = "The inherent which supplies the validation data did not run this block"]
					ValidationDataNotAvailable,
					#[codec(index = 4)]
					#[doc = "The inherent which supplies the host configuration did not run this block"]
					HostConfigurationNotAvailable,
					#[codec(index = 5)]
					#[doc = "No validation function upgrade is currently scheduled."]
					NotScheduled,
					#[codec(index = 6)]
					#[doc = "No code upgrade has been authorized."]
					NothingAuthorized,
					#[codec(index = 7)]
					#[doc = "The given code upgrade has not been authorized."]
					Unauthorized,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "The validation function has been scheduled to apply."]
					ValidationFunctionStored,
					#[codec(index = 1)]
					#[doc = "The validation function was applied as of the contained relay chain block number."]
					ValidationFunctionApplied(::core::primitive::u32),
					#[codec(index = 2)]
					#[doc = "The relay-chain aborted the upgrade process."]
					ValidationFunctionDiscarded,
					#[codec(index = 3)]
					#[doc = "An upgrade has been authorized."]
					UpgradeAuthorized(::subxt::sp_core::H256),
					#[codec(index = 4)]
					#[doc = "Some downward messages have been received and will be processed."]
					#[doc = "\\[ count \\]"]
					DownwardMessagesReceived(::core::primitive::u32),
					#[codec(index = 5)]
					#[doc = "Downward messages were processed using the given weight."]
					#[doc = "\\[ weight_used, result_mqc_head \\]"]
					DownwardMessagesProcessed(::core::primitive::u64, ::subxt::sp_core::H256),
				}
			}
			pub mod relay_state_snapshot {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct MessagingStateSnapshot {
					pub dmq_mqc_head: ::subxt::sp_core::H256,
					pub relay_dispatch_queue_size: (::core::primitive::u32, ::core::primitive::u32),
					pub ingress_channels: ::std::vec::Vec<(
						runtime_types::polkadot_parachain::primitives::Id,
						runtime_types::polkadot_primitives::v2::AbridgedHrmpChannel,
					)>,
					pub egress_channels: ::std::vec::Vec<(
						runtime_types::polkadot_parachain::primitives::Id,
						runtime_types::polkadot_primitives::v2::AbridgedHrmpChannel,
					)>,
				}
			}
		}
		pub mod cumulus_pallet_xcm {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Downward message is invalid XCM."]
					#[doc = "\\[ id \\]"]
					InvalidFormat([::core::primitive::u8; 8usize]),
					#[codec(index = 1)]
					#[doc = "Downward message is unsupported version of XCM."]
					#[doc = "\\[ id \\]"]
					UnsupportedVersion([::core::primitive::u8; 8usize]),
					#[codec(index = 2)]
					#[doc = "Downward message executed with the given outcome."]
					#[doc = "\\[ id, outcome \\]"]
					ExecutedDownward(
						[::core::primitive::u8; 8usize],
						runtime_types::xcm::v2::traits::Outcome,
					),
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum Origin {
					#[codec(index = 0)]
					Relay,
					#[codec(index = 1)]
					SiblingParachain(runtime_types::polkadot_parachain::primitives::Id),
				}
			}
		}
		pub mod cumulus_pallet_xcmp_queue {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Services a single overweight XCM."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `ExecuteOverweightOrigin`."]
					#[doc = "- `index`: The index of the overweight XCM to service"]
					#[doc = "- `weight_limit`: The amount of weight that XCM execution may take."]
					#[doc = ""]
					#[doc = "Errors:"]
					#[doc = "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map."]
					#[doc = "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format."]
					#[doc = "- `WeightOverLimit`: XCM execution may use greater `weight_limit`."]
					#[doc = ""]
					#[doc = "Events:"]
					#[doc = "- `OverweightServiced`: On success."]
					service_overweight {
						index: ::core::primitive::u64,
						weight_limit: ::core::primitive::u64,
					},
					#[codec(index = 1)]
					#[doc = "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `ControllerOrigin`."]
					suspend_xcm_execution,
					#[codec(index = 2)]
					#[doc = "Resumes all XCM executions for the XCMP queue."]
					#[doc = ""]
					#[doc = "Note that this function doesn't change the status of the in/out bound channels."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `ControllerOrigin`."]
					resume_xcm_execution,
					#[codec(index = 3)]
					#[doc = "Overwrites the number of pages of messages which must be in the queue for the other side to be told to"]
					#[doc = "suspend their sending."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `Root`."]
					#[doc = "- `new`: Desired value for `QueueConfigData.suspend_value`"]
					update_suspend_threshold { new: ::core::primitive::u32 },
					#[codec(index = 4)]
					#[doc = "Overwrites the number of pages of messages which must be in the queue after which we drop any further"]
					#[doc = "messages from the channel."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `Root`."]
					#[doc = "- `new`: Desired value for `QueueConfigData.drop_threshold`"]
					update_drop_threshold { new: ::core::primitive::u32 },
					#[codec(index = 5)]
					#[doc = "Overwrites the number of pages of messages which the queue must be reduced to before it signals that"]
					#[doc = "message sending may recommence after it has been suspended."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `Root`."]
					#[doc = "- `new`: Desired value for `QueueConfigData.resume_threshold`"]
					update_resume_threshold { new: ::core::primitive::u32 },
					#[codec(index = 6)]
					#[doc = "Overwrites the amount of remaining weight under which we stop processing messages."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `Root`."]
					#[doc = "- `new`: Desired value for `QueueConfigData.threshold_weight`"]
					update_threshold_weight { new: ::core::primitive::u64 },
					#[codec(index = 7)]
					#[doc = "Overwrites the speed to which the available weight approaches the maximum weight."]
					#[doc = "A lower number results in a faster progression. A value of 1 makes the entire weight available initially."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `Root`."]
					#[doc = "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."]
					update_weight_restrict_decay { new: ::core::primitive::u64 },
					#[codec(index = 8)]
					#[doc = "Overwrite the maximum amount of weight any individual message may consume."]
					#[doc = "Messages above this weight go into the overweight queue and may only be serviced explicitly."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `Root`."]
					#[doc = "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."]
					update_xcmp_max_individual_weight { new: ::core::primitive::u64 },
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Failed to send XCM message."]
					FailedToSend,
					#[codec(index = 1)]
					#[doc = "Bad XCM origin."]
					BadXcmOrigin,
					#[codec(index = 2)]
					#[doc = "Bad XCM data."]
					BadXcm,
					#[codec(index = 3)]
					#[doc = "Bad overweight index."]
					BadOverweightIndex,
					#[codec(index = 4)]
					#[doc = "Provided weight is possibly not enough to execute the message."]
					WeightOverLimit,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Some XCM was executed ok."]
					Success(::core::option::Option<::subxt::sp_core::H256>),
					#[codec(index = 1)]
					#[doc = "Some XCM failed."]
					Fail(
						::core::option::Option<::subxt::sp_core::H256>,
						runtime_types::xcm::v2::traits::Error,
					),
					#[codec(index = 2)]
					#[doc = "Bad XCM version used."]
					BadVersion(::core::option::Option<::subxt::sp_core::H256>),
					#[codec(index = 3)]
					#[doc = "Bad XCM format used."]
					BadFormat(::core::option::Option<::subxt::sp_core::H256>),
					#[codec(index = 4)]
					#[doc = "An upward message was sent to the relay chain."]
					UpwardMessageSent(::core::option::Option<::subxt::sp_core::H256>),
					#[codec(index = 5)]
					#[doc = "An HRMP message was sent to a sibling parachain."]
					XcmpMessageSent(::core::option::Option<::subxt::sp_core::H256>),
					#[codec(index = 6)]
					#[doc = "An XCM exceeded the individual message weight budget."]
					OverweightEnqueued(
						runtime_types::polkadot_parachain::primitives::Id,
						::core::primitive::u32,
						::core::primitive::u64,
						::core::primitive::u64,
					),
					#[codec(index = 7)]
					#[doc = "An XCM from the overweight queue was executed with the given actual weight used."]
					OverweightServiced(::core::primitive::u64, ::core::primitive::u64),
				}
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct InboundChannelDetails {
				pub sender: runtime_types::polkadot_parachain::primitives::Id,
				pub state: runtime_types::cumulus_pallet_xcmp_queue::InboundState,
				pub message_metadata: ::std::vec::Vec<(
					::core::primitive::u32,
					runtime_types::polkadot_parachain::primitives::XcmpMessageFormat,
				)>,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum InboundState {
				#[codec(index = 0)]
				Ok,
				#[codec(index = 1)]
				Suspended,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct OutboundChannelDetails {
				pub recipient: runtime_types::polkadot_parachain::primitives::Id,
				pub state: runtime_types::cumulus_pallet_xcmp_queue::OutboundState,
				pub signals_exist: ::core::primitive::bool,
				pub first_index: ::core::primitive::u16,
				pub last_index: ::core::primitive::u16,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum OutboundState {
				#[codec(index = 0)]
				Ok,
				#[codec(index = 1)]
				Suspended,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct QueueConfigData {
				pub suspend_threshold: ::core::primitive::u32,
				pub drop_threshold: ::core::primitive::u32,
				pub resume_threshold: ::core::primitive::u32,
				pub threshold_weight: ::core::primitive::u64,
				pub weight_restrict_decay: ::core::primitive::u64,
				pub xcmp_max_individual_weight: ::core::primitive::u64,
			}
		}
		pub mod cumulus_primitives_parachain_inherent {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct MessageQueueChain(pub ::subxt::sp_core::H256);
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ParachainInherentData {
				pub validation_data:
					runtime_types::polkadot_primitives::v2::PersistedValidationData<
						::subxt::sp_core::H256,
						::core::primitive::u32,
					>,
				pub relay_chain_state: runtime_types::sp_trie::storage_proof::StorageProof,
				pub downward_messages: ::std::vec::Vec<
					runtime_types::polkadot_core_primitives::InboundDownwardMessage<
						::core::primitive::u32,
					>,
				>,
				pub horizontal_messages: ::subxt::KeyedVec<
					runtime_types::polkadot_parachain::primitives::Id,
					::std::vec::Vec<
						runtime_types::polkadot_core_primitives::InboundHrmpMessage<
							::core::primitive::u32,
						>,
					>,
				>,
			}
		}
		pub mod dali_runtime {
			use super::runtime_types;
			pub mod opaque {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct SessionKeys {
					pub aura: runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
				}
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum Call {
				#[codec(index = 0)]
				System(runtime_types::frame_system::pallet::Call),
				#[codec(index = 1)]
				Timestamp(runtime_types::pallet_timestamp::pallet::Call),
				#[codec(index = 2)]
				Sudo(runtime_types::pallet_sudo::pallet::Call),
				#[codec(index = 5)]
				Indices(runtime_types::pallet_indices::pallet::Call),
				#[codec(index = 6)]
				Balances(runtime_types::pallet_balances::pallet::Call),
				#[codec(index = 7)]
				Identity(runtime_types::pallet_identity::pallet::Call),
				#[codec(index = 8)]
				Multisig(runtime_types::pallet_multisig::pallet::Call),
				#[codec(index = 10)]
				ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Call),
				#[codec(index = 20)]
				Authorship(runtime_types::pallet_authorship::pallet::Call),
				#[codec(index = 21)]
				CollatorSelection(runtime_types::pallet_collator_selection::pallet::Call),
				#[codec(index = 22)]
				Session(runtime_types::pallet_session::pallet::Call),
				#[codec(index = 30)]
				Council(runtime_types::pallet_collective::pallet::Call),
				#[codec(index = 31)]
				CouncilMembership(runtime_types::pallet_membership::pallet::Call),
				#[codec(index = 32)]
				Treasury(runtime_types::pallet_treasury::pallet::Call),
				#[codec(index = 33)]
				Democracy(runtime_types::pallet_democracy::pallet::Call),
				#[codec(index = 34)]
				Scheduler(runtime_types::pallet_scheduler::pallet::Call),
				#[codec(index = 35)]
				Utility(runtime_types::pallet_utility::pallet::Call),
				#[codec(index = 36)]
				Preimage(runtime_types::pallet_preimage::pallet::Call),
				#[codec(index = 37)]
				Proxy(runtime_types::pallet_proxy::pallet::Call),
				#[codec(index = 40)]
				XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Call),
				#[codec(index = 41)]
				RelayerXcm(runtime_types::pallet_xcm::pallet::Call),
				#[codec(index = 42)]
				CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Call),
				#[codec(index = 43)]
				DmpQueue(runtime_types::cumulus_pallet_dmp_queue::pallet::Call),
				#[codec(index = 44)]
				XTokens(runtime_types::orml_xtokens::module::Call),
				#[codec(index = 51)]
				Tokens(runtime_types::orml_tokens::module::Call),
				#[codec(index = 52)]
				Oracle(runtime_types::pallet_oracle::pallet::Call),
				#[codec(index = 54)]
				Vault(runtime_types::pallet_vault::pallet::Call),
				#[codec(index = 55)]
				AssetsRegistry(runtime_types::pallet_assets_registry::pallet::Call),
				#[codec(index = 56)]
				GovernanceRegistry(runtime_types::pallet_governance_registry::pallet::Call),
				#[codec(index = 57)]
				Assets(runtime_types::pallet_assets::pallet::Call),
				#[codec(index = 58)]
				CrowdloanRewards(runtime_types::pallet_crowdloan_rewards::pallet::Call),
				#[codec(index = 59)]
				Vesting(runtime_types::pallet_vesting::module::Call),
				#[codec(index = 60)]
				BondedFinance(runtime_types::pallet_bonded_finance::pallet::Call),
				#[codec(index = 61)]
				DutchAuction(runtime_types::pallet_dutch_auction::pallet::Call),
				#[codec(index = 62)]
				Mosaic(runtime_types::pallet_mosaic::pallet::Call),
				#[codec(index = 63)]
				Liquidations(runtime_types::pallet_liquidations::pallet::Call),
				#[codec(index = 64)]
				Lending(runtime_types::pallet_lending::pallet::Call),
				#[codec(index = 65)]
				Pablo(runtime_types::pallet_pablo::pallet::Call),
				#[codec(index = 66)]
				DexRouter(runtime_types::pallet_dex_router::pallet::Call),
				#[codec(index = 100)]
				CallFilter(runtime_types::pallet_call_filter::pallet::Call),
				#[codec(index = 101)]
				IbcPing(runtime_types::pallet_ibc_ping::pallet::Call),
				#[codec(index = 102)]
				Transfer(runtime_types::ibc_transfer::pallet::Call),
				#[codec(index = 103)]
				Ibc(runtime_types::pallet_ibc::pallet::Call),
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum Event {
				#[codec(index = 0)]
				System(runtime_types::frame_system::pallet::Event),
				#[codec(index = 2)]
				Sudo(runtime_types::pallet_sudo::pallet::Event),
				#[codec(index = 5)]
				Indices(runtime_types::pallet_indices::pallet::Event),
				#[codec(index = 6)]
				Balances(runtime_types::pallet_balances::pallet::Event),
				#[codec(index = 7)]
				Identity(runtime_types::pallet_identity::pallet::Event),
				#[codec(index = 8)]
				Multisig(runtime_types::pallet_multisig::pallet::Event),
				#[codec(index = 10)]
				ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Event),
				#[codec(index = 21)]
				CollatorSelection(runtime_types::pallet_collator_selection::pallet::Event),
				#[codec(index = 22)]
				Session(runtime_types::pallet_session::pallet::Event),
				#[codec(index = 30)]
				Council(runtime_types::pallet_collective::pallet::Event),
				#[codec(index = 31)]
				CouncilMembership(runtime_types::pallet_membership::pallet::Event),
				#[codec(index = 32)]
				Treasury(runtime_types::pallet_treasury::pallet::Event),
				#[codec(index = 33)]
				Democracy(runtime_types::pallet_democracy::pallet::Event),
				#[codec(index = 34)]
				Scheduler(runtime_types::pallet_scheduler::pallet::Event),
				#[codec(index = 35)]
				Utility(runtime_types::pallet_utility::pallet::Event),
				#[codec(index = 36)]
				Preimage(runtime_types::pallet_preimage::pallet::Event),
				#[codec(index = 37)]
				Proxy(runtime_types::pallet_proxy::pallet::Event),
				#[codec(index = 40)]
				XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Event),
				#[codec(index = 41)]
				RelayerXcm(runtime_types::pallet_xcm::pallet::Event),
				#[codec(index = 42)]
				CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Event),
				#[codec(index = 43)]
				DmpQueue(runtime_types::cumulus_pallet_dmp_queue::pallet::Event),
				#[codec(index = 44)]
				XTokens(runtime_types::orml_xtokens::module::Event),
				#[codec(index = 45)]
				UnknownTokens(runtime_types::orml_unknown_tokens::module::Event),
				#[codec(index = 51)]
				Tokens(runtime_types::orml_tokens::module::Event),
				#[codec(index = 52)]
				Oracle(runtime_types::pallet_oracle::pallet::Event),
				#[codec(index = 53)]
				CurrencyFactory(runtime_types::pallet_currency_factory::pallet::Event),
				#[codec(index = 54)]
				Vault(runtime_types::pallet_vault::pallet::Event),
				#[codec(index = 55)]
				AssetsRegistry(runtime_types::pallet_assets_registry::pallet::Event),
				#[codec(index = 56)]
				GovernanceRegistry(runtime_types::pallet_governance_registry::pallet::Event),
				#[codec(index = 58)]
				CrowdloanRewards(runtime_types::pallet_crowdloan_rewards::pallet::Event),
				#[codec(index = 59)]
				Vesting(runtime_types::pallet_vesting::module::Event),
				#[codec(index = 60)]
				BondedFinance(runtime_types::pallet_bonded_finance::pallet::Event),
				#[codec(index = 61)]
				DutchAuction(runtime_types::pallet_dutch_auction::pallet::Event),
				#[codec(index = 62)]
				Mosaic(runtime_types::pallet_mosaic::pallet::Event),
				#[codec(index = 63)]
				Liquidations(runtime_types::pallet_liquidations::pallet::Event),
				#[codec(index = 64)]
				Lending(runtime_types::pallet_lending::pallet::Event),
				#[codec(index = 65)]
				Pablo(runtime_types::pallet_pablo::pallet::Event),
				#[codec(index = 66)]
				DexRouter(runtime_types::pallet_dex_router::pallet::Event),
				#[codec(index = 67)]
				StakingRewards(runtime_types::pallet_staking_rewards::pallet::Event),
				#[codec(index = 100)]
				CallFilter(runtime_types::pallet_call_filter::pallet::Event),
				#[codec(index = 101)]
				IbcPing(runtime_types::pallet_ibc_ping::pallet::Event),
				#[codec(index = 102)]
				Transfer(runtime_types::ibc_transfer::pallet::Event),
				#[codec(index = 103)]
				Ibc(runtime_types::pallet_ibc::pallet::Event),
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct MaxHopsCount;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct MaxStringSize;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum OriginCaller {
				#[codec(index = 0)]
				system(
					runtime_types::frame_support::dispatch::RawOrigin<
						::subxt::sp_core::crypto::AccountId32,
					>,
				),
				#[codec(index = 30)]
				Council(
					runtime_types::pallet_collective::RawOrigin<
						::subxt::sp_core::crypto::AccountId32,
					>,
				),
				#[codec(index = 41)]
				RelayerXcm(runtime_types::pallet_xcm::pallet::Origin),
				#[codec(index = 42)]
				CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Origin),
				#[codec(index = 4)]
				Void(runtime_types::sp_core::Void),
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Runtime;
		}
		pub mod frame_support {
			use super::runtime_types;
			pub mod dispatch {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum RawOrigin<_0> {
					#[codec(index = 0)]
					Root,
					#[codec(index = 1)]
					Signed(_0),
					#[codec(index = 2)]
					None,
				}
			}
			pub mod storage {
				use super::runtime_types;
				pub mod bounded_btree_map {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct BoundedBTreeMap<_0, _1>(pub ::subxt::KeyedVec<_0, _1>);
				}
				pub mod bounded_vec {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct BoundedVec<_0>(pub ::std::vec::Vec<_0>);
				}
				pub mod weak_bounded_vec {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct WeakBoundedVec<_0>(pub ::std::vec::Vec<_0>);
				}
			}
			pub mod traits {
				use super::runtime_types;
				pub mod misc {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct WrapperKeepOpaque<_0>(
						#[codec(compact)] pub ::core::primitive::u32,
						pub _0,
					);
				}
				pub mod schedule {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum LookupError {
						#[codec(index = 0)]
						Unknown,
						#[codec(index = 1)]
						BadFormat,
					}
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum MaybeHashed<_0, _1> {
						#[codec(index = 0)]
						Value(_0),
						#[codec(index = 1)]
						Hash(_1),
					}
				}
				pub mod tokens {
					use super::runtime_types;
					pub mod misc {
						use super::runtime_types;
						#[derive(
							:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug,
						)]
						pub enum BalanceStatus {
							#[codec(index = 0)]
							Free,
							#[codec(index = 1)]
							Reserved,
						}
					}
				}
			}
			pub mod weights {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum DispatchClass {
					#[codec(index = 0)]
					Normal,
					#[codec(index = 1)]
					Operational,
					#[codec(index = 2)]
					Mandatory,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct DispatchInfo {
					pub weight: ::core::primitive::u64,
					pub class: runtime_types::frame_support::weights::DispatchClass,
					pub pays_fee: runtime_types::frame_support::weights::Pays,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum Pays {
					#[codec(index = 0)]
					Yes,
					#[codec(index = 1)]
					No,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct PerDispatchClass<_0> {
					pub normal: _0,
					pub operational: _0,
					pub mandatory: _0,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct RuntimeDbWeight {
					pub read: ::core::primitive::u64,
					pub write: ::core::primitive::u64,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct WeightToFeeCoefficient<_0> {
					pub coeff_integer: _0,
					pub coeff_frac: runtime_types::sp_arithmetic::per_things::Perbill,
					pub negative: ::core::primitive::bool,
					pub degree: ::core::primitive::u8,
				}
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct PalletId(pub [::core::primitive::u8; 8usize]);
		}
		pub mod frame_system {
			use super::runtime_types;
			pub mod extensions {
				use super::runtime_types;
				pub mod check_genesis {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct CheckGenesis;
				}
				pub mod check_mortality {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct CheckMortality(pub runtime_types::sp_runtime::generic::era::Era);
				}
				pub mod check_non_zero_sender {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct CheckNonZeroSender;
				}
				pub mod check_nonce {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct CheckNonce(#[codec(compact)] pub ::core::primitive::u32);
				}
				pub mod check_spec_version {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct CheckSpecVersion;
				}
				pub mod check_tx_version {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct CheckTxVersion;
				}
				pub mod check_weight {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct CheckWeight;
				}
			}
			pub mod limits {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct BlockLength {
					pub max: runtime_types::frame_support::weights::PerDispatchClass<
						::core::primitive::u32,
					>,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct BlockWeights {
					pub base_block: ::core::primitive::u64,
					pub max_block: ::core::primitive::u64,
					pub per_class: runtime_types::frame_support::weights::PerDispatchClass<
						runtime_types::frame_system::limits::WeightsPerClass,
					>,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct WeightsPerClass {
					pub base_extrinsic: ::core::primitive::u64,
					pub max_extrinsic: ::core::option::Option<::core::primitive::u64>,
					pub max_total: ::core::option::Option<::core::primitive::u64>,
					pub reserved: ::core::option::Option<::core::primitive::u64>,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "A dispatch that will fill the block weight up to the given ratio."]
					fill_block { ratio: runtime_types::sp_arithmetic::per_things::Perbill },
					#[codec(index = 1)]
					#[doc = "Make some on-chain remark."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(1)`"]
					#[doc = "# </weight>"]
					remark { remark: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 2)]
					#[doc = "Set the number of pages in the WebAssembly environment's heap."]
					set_heap_pages { pages: ::core::primitive::u64 },
					#[codec(index = 3)]
					#[doc = "Set the new runtime code."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"]
					#[doc = "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is"]
					#[doc = "  expensive)."]
					#[doc = "- 1 storage write (codec `O(C)`)."]
					#[doc = "- 1 digest item."]
					#[doc = "- 1 event."]
					#[doc = "The weight of this function is dependent on the runtime, but generally this is very"]
					#[doc = "expensive. We will treat this as a full block."]
					#[doc = "# </weight>"]
					set_code { code: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 4)]
					#[doc = "Set the new runtime code without doing any checks of the given `code`."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(C)` where `C` length of `code`"]
					#[doc = "- 1 storage write (codec `O(C)`)."]
					#[doc = "- 1 digest item."]
					#[doc = "- 1 event."]
					#[doc = "The weight of this function is dependent on the runtime. We will treat this as a full"]
					#[doc = "block. # </weight>"]
					set_code_without_checks { code: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 5)]
					#[doc = "Set some items of storage."]
					set_storage {
						items: ::std::vec::Vec<(
							::std::vec::Vec<::core::primitive::u8>,
							::std::vec::Vec<::core::primitive::u8>,
						)>,
					},
					#[codec(index = 6)]
					#[doc = "Kill some items from storage."]
					kill_storage { keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>> },
					#[codec(index = 7)]
					#[doc = "Kill all storage items with a key that starts with the given prefix."]
					#[doc = ""]
					#[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
					#[doc = "the prefix we are removing to accurately calculate the weight of this function."]
					kill_prefix {
						prefix: ::std::vec::Vec<::core::primitive::u8>,
						subkeys: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					#[doc = "Make some on-chain remark and emit event."]
					remark_with_event { remark: ::std::vec::Vec<::core::primitive::u8> },
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Error for the System pallet"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The name of specification does not match between the current runtime"]
					#[doc = "and the new runtime."]
					InvalidSpecName,
					#[codec(index = 1)]
					#[doc = "The specification version is not allowed to decrease between the current runtime"]
					#[doc = "and the new runtime."]
					SpecVersionNeedsToIncrease,
					#[codec(index = 2)]
					#[doc = "Failed to extract the runtime version from the new runtime."]
					#[doc = ""]
					#[doc = "Either calling `Core_version` or decoding `RuntimeVersion` failed."]
					FailedToExtractRuntimeVersion,
					#[codec(index = 3)]
					#[doc = "Suicide called when the account has non-default composite data."]
					NonDefaultComposite,
					#[codec(index = 4)]
					#[doc = "There is a non-zero reference count preventing the account from being purged."]
					NonZeroRefCount,
					#[codec(index = 5)]
					#[doc = "The origin filter prevent the call to be dispatched."]
					CallFiltered,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Event for the System pallet."]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "An extrinsic completed successfully."]
					ExtrinsicSuccess {
						dispatch_info: runtime_types::frame_support::weights::DispatchInfo,
					},
					#[codec(index = 1)]
					#[doc = "An extrinsic failed."]
					ExtrinsicFailed {
						dispatch_error: runtime_types::sp_runtime::DispatchError,
						dispatch_info: runtime_types::frame_support::weights::DispatchInfo,
					},
					#[codec(index = 2)]
					#[doc = "`:code` was updated."]
					CodeUpdated,
					#[codec(index = 3)]
					#[doc = "A new account was created."]
					NewAccount { account: ::subxt::sp_core::crypto::AccountId32 },
					#[codec(index = 4)]
					#[doc = "An account was reaped."]
					KilledAccount { account: ::subxt::sp_core::crypto::AccountId32 },
					#[codec(index = 5)]
					#[doc = "On on-chain remark happened."]
					Remarked {
						sender: ::subxt::sp_core::crypto::AccountId32,
						hash: ::subxt::sp_core::H256,
					},
				}
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AccountInfo<_0, _1> {
				pub nonce: _0,
				pub consumers: _0,
				pub providers: _0,
				pub sufficients: _0,
				pub data: _1,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct EventRecord<_0, _1> {
				pub phase: runtime_types::frame_system::Phase,
				pub event: _0,
				pub topics: ::std::vec::Vec<_1>,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct LastRuntimeUpgradeInfo {
				#[codec(compact)]
				pub spec_version: ::core::primitive::u32,
				pub spec_name: ::std::string::String,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum Phase {
				#[codec(index = 0)]
				ApplyExtrinsic(::core::primitive::u32),
				#[codec(index = 1)]
				Finalization,
				#[codec(index = 2)]
				Initialization,
			}
		}
		pub mod ibc_trait {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct OpenChannelParams {
				pub order: ::core::primitive::u8,
				pub connection_id: ::std::vec::Vec<::core::primitive::u8>,
				pub counterparty_port_id: ::std::vec::Vec<::core::primitive::u8>,
				pub version: ::std::vec::Vec<::core::primitive::u8>,
			}
		}
		pub mod ibc_transfer {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					transfer {
						params: runtime_types::ibc_transfer::pallet::TransferParams,
						asset_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					open_channel { params: runtime_types::ibc_trait::OpenChannelParams },
					#[codec(index = 2)]
					set_pallet_params { params: runtime_types::ibc_transfer::pallet::PalletParams },
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Errors inform users that something went wrong."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The interchain token transfer was not successfully initiated"]
					TransferFailed,
					#[codec(index = 1)]
					#[doc = "Error Decoding utf8 bytes"]
					Utf8Error,
					#[codec(index = 2)]
					#[doc = "Invalid asset id"]
					InvalidAssetId,
					#[codec(index = 3)]
					#[doc = "Invalid Ibc denom"]
					InvalidIbcDenom,
					#[codec(index = 4)]
					#[doc = "Invalid amount"]
					InvalidAmount,
					#[codec(index = 5)]
					#[doc = "Invalid timestamp"]
					InvalidTimestamp,
					#[codec(index = 6)]
					#[doc = "Unable to get client revision number"]
					FailedToGetRevisionNumber,
					#[codec(index = 7)]
					#[doc = "Invalid params passed"]
					InvalidParams,
					#[codec(index = 8)]
					#[doc = "Error opening channel"]
					ChannelInitError,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					TokenTransferInitiated {
						from: ::subxt::sp_core::crypto::AccountId32,
						to: ::std::vec::Vec<::core::primitive::u8>,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "A channel has been opened"]
					ChannelOpened {
						channel_id: ::std::vec::Vec<::core::primitive::u8>,
						port_id: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 2)]
					#[doc = "Pallet params updated"]
					PalletParamsUpdated {
						send_enabled: ::core::primitive::bool,
						receive_enabled: ::core::primitive::bool,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct PalletParams {
					pub send_enabled: ::core::primitive::bool,
					pub receive_enabled: ::core::primitive::bool,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct TransferParams {
					pub to: ::std::vec::Vec<::core::primitive::u8>,
					pub source_channel: ::std::vec::Vec<::core::primitive::u8>,
					pub timeout_timestamp: ::core::primitive::u64,
					pub timeout_height: ::core::primitive::u64,
					pub revision_number: ::core::option::Option<::core::primitive::u64>,
				}
			}
		}
		pub mod orml_tokens {
			use super::runtime_types;
			pub mod module {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Transfer some liquid free balance to another account."]
					#[doc = ""]
					#[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
					#[doc = "It will decrease the total issuance of the system by the"]
					#[doc = "`TransferFee`. If the sender's account is below the existential"]
					#[doc = "deposit as a result of the transfer, the account will be reaped."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be `Signed` by the"]
					#[doc = "transactor."]
					#[doc = ""]
					#[doc = "- `dest`: The recipient of the transfer."]
					#[doc = "- `currency_id`: currency type."]
					#[doc = "- `amount`: free balance amount to tranfer."]
					transfer {
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						currency_id: runtime_types::primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "Transfer all remaining balance to the given account."]
					#[doc = ""]
					#[doc = "NOTE: This function only attempts to transfer _transferable_"]
					#[doc = "balances. This means that any locked, reserved, or existential"]
					#[doc = "deposits (when `keep_alive` is `true`), will not be transferred by"]
					#[doc = "this function. To ensure that this function results in a killed"]
					#[doc = "account, you might need to prepare the account by removing any"]
					#[doc = "reference counters, storage deposits, etc..."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be `Signed` by the"]
					#[doc = "transactor."]
					#[doc = ""]
					#[doc = "- `dest`: The recipient of the transfer."]
					#[doc = "- `currency_id`: currency type."]
					#[doc = "- `keep_alive`: A boolean to determine if the `transfer_all`"]
					#[doc = "  operation should send all of the funds the account has, causing"]
					#[doc = "  the sender account to be killed (false), or transfer everything"]
					#[doc = "  except at least the existential deposit, which will guarantee to"]
					#[doc = "  keep the sender account alive (true)."]
					transfer_all {
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						currency_id: runtime_types::primitives::currency::CurrencyId,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					#[doc = "Same as the [`transfer`] call, but with a check that the transfer"]
					#[doc = "will not kill the origin account."]
					#[doc = ""]
					#[doc = "99% of the time you want [`transfer`] instead."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be `Signed` by the"]
					#[doc = "transactor."]
					#[doc = ""]
					#[doc = "- `dest`: The recipient of the transfer."]
					#[doc = "- `currency_id`: currency type."]
					#[doc = "- `amount`: free balance amount to tranfer."]
					transfer_keep_alive {
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						currency_id: runtime_types::primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "Exactly as `transfer`, except the origin must be root and the source"]
					#[doc = "account may be specified."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Root_."]
					#[doc = ""]
					#[doc = "- `source`: The sender of the transfer."]
					#[doc = "- `dest`: The recipient of the transfer."]
					#[doc = "- `currency_id`: currency type."]
					#[doc = "- `amount`: free balance amount to tranfer."]
					force_transfer {
						source: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						currency_id: runtime_types::primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Set the balances of a given account."]
					#[doc = ""]
					#[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it"]
					#[doc = "will also decrease the total issuance of the system"]
					#[doc = "(`TotalIssuance`). If the new free or reserved balance is below the"]
					#[doc = "existential deposit, it will reap the `AccountInfo`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call is `root`."]
					set_balance {
						who: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						currency_id: runtime_types::primitives::currency::CurrencyId,
						#[codec(compact)]
						new_free: ::core::primitive::u128,
						#[codec(compact)]
						new_reserved: ::core::primitive::u128,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The balance is too low"]
					BalanceTooLow,
					#[codec(index = 1)]
					#[doc = "Cannot convert Amount into Balance type"]
					AmountIntoBalanceFailed,
					#[codec(index = 2)]
					#[doc = "Failed because liquidity restrictions due to locking"]
					LiquidityRestrictions,
					#[codec(index = 3)]
					#[doc = "Failed because the maximum locks was exceeded"]
					MaxLocksExceeded,
					#[codec(index = 4)]
					#[doc = "Transfer/payment would kill account"]
					KeepAlive,
					#[codec(index = 5)]
					#[doc = "Value too low to create account due to existential deposit"]
					ExistentialDeposit,
					#[codec(index = 6)]
					#[doc = "Beneficiary account must pre-exist"]
					DeadAccount,
					#[codec(index = 7)]
					TooManyReserves,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "An account was created with some free balance."]
					Endowed {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "An account was removed whose balance was non-zero but below"]
					#[doc = "ExistentialDeposit, resulting in an outright loss."]
					DustLost {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "Transfer succeeded."]
					Transfer {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						from: ::subxt::sp_core::crypto::AccountId32,
						to: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "Some balance was reserved (moved from free to reserved)."]
					Reserved {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Some balance was unreserved (moved from reserved to free)."]
					Unreserved {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					#[doc = "Some reserved balance was repatriated (moved from reserved to"]
					#[doc = "another account)."]
					ReserveRepatriated {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						from: ::subxt::sp_core::crypto::AccountId32,
						to: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
						status: runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
					},
					#[codec(index = 6)]
					#[doc = "A balance was set by root."]
					BalanceSet {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::sp_core::crypto::AccountId32,
						free: ::core::primitive::u128,
						reserved: ::core::primitive::u128,
					},
					#[codec(index = 7)]
					#[doc = "The total issuance of an currency has been set"]
					TotalIssuanceSet {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					#[doc = "Some balances were withdrawn (e.g. pay for transaction fee)"]
					Withdrawn {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					#[doc = "Some balances were slashed (e.g. due to mis-behavior)"]
					Slashed {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::sp_core::crypto::AccountId32,
						free_amount: ::core::primitive::u128,
						reserved_amount: ::core::primitive::u128,
					},
					#[codec(index = 10)]
					#[doc = "Deposited some balance into an account"]
					Deposited {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 11)]
					#[doc = "Some funds are locked"]
					LockSet {
						lock_id: [::core::primitive::u8; 8usize],
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 12)]
					#[doc = "Some locked funds were unlocked"]
					LockRemoved {
						lock_id: [::core::primitive::u8; 8usize],
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::sp_core::crypto::AccountId32,
					},
				}
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AccountData<_0> {
				pub free: _0,
				pub reserved: _0,
				pub frozen: _0,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct BalanceLock<_0> {
				pub id: [::core::primitive::u8; 8usize],
				pub amount: _0,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ReserveData<_0, _1> {
				pub id: _0,
				pub amount: _1,
			}
		}
		pub mod orml_unknown_tokens {
			use super::runtime_types;
			pub mod module {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The balance is too low."]
					BalanceTooLow,
					#[codec(index = 1)]
					#[doc = "The operation will cause balance to overflow."]
					BalanceOverflow,
					#[codec(index = 2)]
					#[doc = "Unhandled asset."]
					UnhandledAsset,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Deposit success."]
					Deposited {
						asset: runtime_types::xcm::v1::multiasset::MultiAsset,
						who: runtime_types::xcm::v1::multilocation::MultiLocation,
					},
					#[codec(index = 1)]
					#[doc = "Withdraw success."]
					Withdrawn {
						asset: runtime_types::xcm::v1::multiasset::MultiAsset,
						who: runtime_types::xcm::v1::multilocation::MultiLocation,
					},
				}
			}
		}
		pub mod orml_xtokens {
			use super::runtime_types;
			pub mod module {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Transfer native currencies."]
					#[doc = ""]
					#[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
					#[doc = "it would be charged from the transferred assets. If set below"]
					#[doc = "requirements, the execution may fail and assets wouldn't be"]
					#[doc = "received."]
					#[doc = ""]
					#[doc = "It's a no-op if any error on local XCM execution or message sending."]
					#[doc = "Note sending assets out per se doesn't guarantee they would be"]
					#[doc = "received. Receiving depends on if the XCM message could be delivered"]
					#[doc = "by the network, and if the receiving chain would handle"]
					#[doc = "messages correctly."]
					transfer {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						dest_weight: ::core::primitive::u64,
					},
					#[codec(index = 1)]
					#[doc = "Transfer `MultiAsset`."]
					#[doc = ""]
					#[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
					#[doc = "it would be charged from the transferred assets. If set below"]
					#[doc = "requirements, the execution may fail and assets wouldn't be"]
					#[doc = "received."]
					#[doc = ""]
					#[doc = "It's a no-op if any error on local XCM execution or message sending."]
					#[doc = "Note sending assets out per se doesn't guarantee they would be"]
					#[doc = "received. Receiving depends on if the XCM message could be delivered"]
					#[doc = "by the network, and if the receiving chain would handle"]
					#[doc = "messages correctly."]
					transfer_multiasset {
						asset: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						dest_weight: ::core::primitive::u64,
					},
					#[codec(index = 2)]
					#[doc = "Transfer native currencies specifying the fee and amount as"]
					#[doc = "separate."]
					#[doc = ""]
					#[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
					#[doc = "it would be charged from the transferred assets. If set below"]
					#[doc = "requirements, the execution may fail and assets wouldn't be"]
					#[doc = "received."]
					#[doc = ""]
					#[doc = "`fee` is the amount to be spent to pay for execution in destination"]
					#[doc = "chain. Both fee and amount will be subtracted form the callers"]
					#[doc = "balance."]
					#[doc = ""]
					#[doc = "If `fee` is not high enough to cover for the execution costs in the"]
					#[doc = "destination chain, then the assets will be trapped in the"]
					#[doc = "destination chain"]
					#[doc = ""]
					#[doc = "It's a no-op if any error on local XCM execution or message sending."]
					#[doc = "Note sending assets out per se doesn't guarantee they would be"]
					#[doc = "received. Receiving depends on if the XCM message could be delivered"]
					#[doc = "by the network, and if the receiving chain would handle"]
					#[doc = "messages correctly."]
					transfer_with_fee {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
						fee: ::core::primitive::u128,
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						dest_weight: ::core::primitive::u64,
					},
					#[codec(index = 3)]
					#[doc = "Transfer `MultiAsset` specifying the fee and amount as separate."]
					#[doc = ""]
					#[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
					#[doc = "it would be charged from the transferred assets. If set below"]
					#[doc = "requirements, the execution may fail and assets wouldn't be"]
					#[doc = "received."]
					#[doc = ""]
					#[doc = "`fee` is the multiasset to be spent to pay for execution in"]
					#[doc = "destination chain. Both fee and amount will be subtracted form the"]
					#[doc = "callers balance For now we only accept fee and asset having the same"]
					#[doc = "`MultiLocation` id."]
					#[doc = ""]
					#[doc = "If `fee` is not high enough to cover for the execution costs in the"]
					#[doc = "destination chain, then the assets will be trapped in the"]
					#[doc = "destination chain"]
					#[doc = ""]
					#[doc = "It's a no-op if any error on local XCM execution or message sending."]
					#[doc = "Note sending assets out per se doesn't guarantee they would be"]
					#[doc = "received. Receiving depends on if the XCM message could be delivered"]
					#[doc = "by the network, and if the receiving chain would handle"]
					#[doc = "messages correctly."]
					transfer_multiasset_with_fee {
						asset: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
						fee: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						dest_weight: ::core::primitive::u64,
					},
					#[codec(index = 4)]
					#[doc = "Transfer several currencies specifying the item to be used as fee"]
					#[doc = ""]
					#[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
					#[doc = "it would be charged from the transferred assets. If set below"]
					#[doc = "requirements, the execution may fail and assets wouldn't be"]
					#[doc = "received."]
					#[doc = ""]
					#[doc = "`fee_item` is index of the currencies tuple that we want to use for"]
					#[doc = "payment"]
					#[doc = ""]
					#[doc = "It's a no-op if any error on local XCM execution or message sending."]
					#[doc = "Note sending assets out per se doesn't guarantee they would be"]
					#[doc = "received. Receiving depends on if the XCM message could be delivered"]
					#[doc = "by the network, and if the receiving chain would handle"]
					#[doc = "messages correctly."]
					transfer_multicurrencies {
						currencies: ::std::vec::Vec<(
							runtime_types::primitives::currency::CurrencyId,
							::core::primitive::u128,
						)>,
						fee_item: ::core::primitive::u32,
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						dest_weight: ::core::primitive::u64,
					},
					#[codec(index = 5)]
					#[doc = "Transfer several `MultiAsset` specifying the item to be used as fee"]
					#[doc = ""]
					#[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
					#[doc = "it would be charged from the transferred assets. If set below"]
					#[doc = "requirements, the execution may fail and assets wouldn't be"]
					#[doc = "received."]
					#[doc = ""]
					#[doc = "`fee_item` is index of the MultiAssets that we want to use for"]
					#[doc = "payment"]
					#[doc = ""]
					#[doc = "It's a no-op if any error on local XCM execution or message sending."]
					#[doc = "Note sending assets out per se doesn't guarantee they would be"]
					#[doc = "received. Receiving depends on if the XCM message could be delivered"]
					#[doc = "by the network, and if the receiving chain would handle"]
					#[doc = "messages correctly."]
					transfer_multiassets {
						assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
						fee_item: ::core::primitive::u32,
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						dest_weight: ::core::primitive::u64,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Asset has no reserve location."]
					AssetHasNoReserve,
					#[codec(index = 1)]
					#[doc = "Not cross-chain transfer."]
					NotCrossChainTransfer,
					#[codec(index = 2)]
					#[doc = "Invalid transfer destination."]
					InvalidDest,
					#[codec(index = 3)]
					#[doc = "Currency is not cross-chain transferable."]
					NotCrossChainTransferableCurrency,
					#[codec(index = 4)]
					#[doc = "The message's weight could not be determined."]
					UnweighableMessage,
					#[codec(index = 5)]
					#[doc = "XCM execution failed."]
					XcmExecutionFailed,
					#[codec(index = 6)]
					#[doc = "Could not re-anchor the assets to declare the fees for the"]
					#[doc = "destination chain."]
					CannotReanchor,
					#[codec(index = 7)]
					#[doc = "Could not get ancestry of asset reserve location."]
					InvalidAncestry,
					#[codec(index = 8)]
					#[doc = "The MultiAsset is invalid."]
					InvalidAsset,
					#[codec(index = 9)]
					#[doc = "The destination `MultiLocation` provided cannot be inverted."]
					DestinationNotInvertible,
					#[codec(index = 10)]
					#[doc = "The version of the `Versioned` value used is not able to be"]
					#[doc = "interpreted."]
					BadVersion,
					#[codec(index = 11)]
					#[doc = "We tried sending distinct asset and fee but they have different"]
					#[doc = "reserve chains."]
					DistinctReserveForAssetAndFee,
					#[codec(index = 12)]
					#[doc = "The fee is zero."]
					ZeroFee,
					#[codec(index = 13)]
					#[doc = "The transfering asset amount is zero."]
					ZeroAmount,
					#[codec(index = 14)]
					#[doc = "The number of assets to be sent is over the maximum."]
					TooManyAssetsBeingSent,
					#[codec(index = 15)]
					#[doc = "The specified index does not exist in a MultiAssets struct."]
					AssetIndexNonExistent,
					#[codec(index = 16)]
					#[doc = "Fee is not enough."]
					FeeNotEnough,
					#[codec(index = 17)]
					#[doc = "Not supported MultiLocation"]
					NotSupportedMultiLocation,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Transferred `MultiAsset` with fee."]
					TransferredMultiAssets {
						sender: ::subxt::sp_core::crypto::AccountId32,
						assets: runtime_types::xcm::v1::multiasset::MultiAssets,
						fee: runtime_types::xcm::v1::multiasset::MultiAsset,
						dest: runtime_types::xcm::v1::multilocation::MultiLocation,
					},
				}
			}
		}
		pub mod pallet_assets {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Transfer `amount` of `asset` from `origin` to `dest`."]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When `origin` is not signed."]
					#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
					#[doc = "   cannot be respected."]
					#[doc = " - If the `dest` cannot be looked up."]
					transfer {
						asset: runtime_types::primitives::currency::CurrencyId,
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 1)]
					#[doc = "Transfer `amount` of the native asset from `origin` to `dest`. This is slightly"]
					#[doc = "cheaper to call, as it avoids an asset lookup."]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When `origin` is not signed."]
					#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
					#[doc = "   cannot be respected."]
					#[doc = " - If the `dest` cannot be looked up."]
					transfer_native {
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					#[doc = "Transfer `amount` of the `asset` from `origin` to `dest`. This requires root."]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When `origin` is not root."]
					#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
					#[doc = "   cannot be respected."]
					#[doc = " - If the `dest` cannot be looked up."]
					force_transfer {
						asset: runtime_types::primitives::currency::CurrencyId,
						source: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 3)]
					#[doc = "Transfer `amount` of the the native asset from `origin` to `dest`. This requires root."]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When `origin` is not root."]
					#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
					#[doc = "   cannot be respected."]
					#[doc = " - If the `dest` cannot be looked up."]
					force_transfer_native {
						source: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 4)]
					#[doc = "Transfer all free balance of the `asset` from `origin` to `dest`."]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When `origin` is not signed."]
					#[doc = " - If the `dest` cannot be looked up."]
					transfer_all {
						asset: runtime_types::primitives::currency::CurrencyId,
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					#[doc = "Transfer all free balance of the native asset from `origin` to `dest`."]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When `origin` is not signed."]
					#[doc = " - If the `dest` cannot be looked up."]
					transfer_all_native {
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 6)]
					#[doc = "Creates a new asset, minting `amount` of funds into the `dest` account. Intented to be"]
					#[doc = "used for creating wrapped assets, not associated with any project."]
					mint_initialize {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 7)]
					#[doc = "Creates a new asset, minting `amount` of funds into the `dest` account. The `dest`"]
					#[doc = "account can use the democracy pallet to mint further assets, or if the governance_origin"]
					#[doc = "is set to an owned account, using signed transactions. In general the"]
					#[doc = "`governance_origin` should be generated from the pallet id."]
					mint_initialize_with_governance {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						governance_origin: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 8)]
					#[doc = "Mints `amount` of `asset_id` into the `dest` account."]
					mint_into {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					#[doc = "Mints `amount` of `asset_id` into the `dest` account."]
					burn_from {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					CannotSetNewCurrencyToRegistry,
					#[codec(index = 1)]
					InvalidCurrency,
				}
			}
		}
		pub mod pallet_assets_registry {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "creates asset using `CurrencyFactory`,"]
					#[doc = "raises `AssetRegistered` event"]
					register_asset {
						location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
						ed: ::core::primitive::u128,
						ratio: ::core::option::Option<
							runtime_types::sp_arithmetic::fixed_point::FixedU128,
						>,
						decimals: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 1)]
					#[doc = "Given well existing asset, update its remote information."]
					#[doc = "Use with caution as it allow reroute assets location."]
					update_asset {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
						ratio: ::core::option::Option<
							runtime_types::sp_arithmetic::fixed_point::FixedU128,
						>,
						decimals: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 2)]
					#[doc = "Minimal amount of asset_id required to send message to other network."]
					#[doc = "Target network may or may not accept payment."]
					#[doc = "Assumed this is maintained up to date by technical team."]
					#[doc = "Mostly UI hint and fail fast solution."]
					#[doc = "In theory can be updated by parachain sovereign account too."]
					#[doc = "If None, than it is well known cannot pay with that asset on target_parachain_id."]
					#[doc = "If Some(0), than price can be anything greater or equal to zero."]
					#[doc = "If Some(MAX), than actually it forbids transfers."]
					set_min_fee {
						target_parachain_id: runtime_types::polkadot_parachain::primitives::Id,
						foreign_asset_id:
							runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
						amount: ::core::option::Option<::core::primitive::u128>,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					AssetNotFound,
					#[codec(index = 1)]
					ForeignAssetAlreadyRegistered,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					AssetRegistered {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
					},
					#[codec(index = 1)]
					AssetUpdated {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
					},
					#[codec(index = 2)]
					MinFeeUpdated {
						target_parachain_id: runtime_types::polkadot_parachain::primitives::Id,
						foreign_asset_id:
							runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
						amount: ::core::option::Option<::core::primitive::u128>,
					},
				}
			}
		}
		pub mod pallet_authorship {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Provide a set of uncles."]
					set_uncles {
						new_uncles: ::std::vec::Vec<
							runtime_types::sp_runtime::generic::header::Header<
								::core::primitive::u32,
								runtime_types::sp_runtime::traits::BlakeTwo256,
							>,
						>,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The uncle parent not in the chain."]
					InvalidUncleParent,
					#[codec(index = 1)]
					#[doc = "Uncles already set in the block."]
					UnclesAlreadySet,
					#[codec(index = 2)]
					#[doc = "Too many uncles."]
					TooManyUncles,
					#[codec(index = 3)]
					#[doc = "The uncle is genesis."]
					GenesisUncle,
					#[codec(index = 4)]
					#[doc = "The uncle is too high in chain."]
					TooHighUncle,
					#[codec(index = 5)]
					#[doc = "The uncle is already included."]
					UncleAlreadyIncluded,
					#[codec(index = 6)]
					#[doc = "The uncle isn't recent enough to be included."]
					OldUncle,
				}
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum UncleEntryItem<_0, _1, _2> {
				#[codec(index = 0)]
				InclusionHeight(_0),
				#[codec(index = 1)]
				Uncle(_1, ::core::option::Option<_2>),
			}
		}
		pub mod pallet_balances {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Transfer some liquid free balance to another account."]
					#[doc = ""]
					#[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
					#[doc = "If the sender's account is below the existential deposit as a result"]
					#[doc = "of the transfer, the account will be reaped."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Dependent on arguments but not critical, given proper implementations for input config"]
					#[doc = "  types. See related functions below."]
					#[doc = "- It contains a limited number of reads and writes internally and no complex"]
					#[doc = "  computation."]
					#[doc = ""]
					#[doc = "Related functions:"]
					#[doc = ""]
					#[doc = "  - `ensure_can_withdraw` is always called internally but has a bounded complexity."]
					#[doc = "  - Transferring balances to accounts that did not exist before will cause"]
					#[doc = "    `T::OnNewAccount::on_new_account` to be called."]
					#[doc = "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`."]
					#[doc = "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check"]
					#[doc = "    that the transfer will not kill the origin account."]
					#[doc = "---------------------------------"]
					#[doc = "- Origin account is already in memory, so no DB operations for them."]
					#[doc = "# </weight>"]
					transfer {
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "Set the balances of a given account."]
					#[doc = ""]
					#[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it will"]
					#[doc = "also alter the total issuance of the system (`TotalIssuance`) appropriately."]
					#[doc = "If the new free or reserved balance is below the existential deposit,"]
					#[doc = "it will reset the account nonce (`frame_system::AccountNonce`)."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call is `root`."]
					set_balance {
						who: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						new_free: ::core::primitive::u128,
						#[codec(compact)]
						new_reserved: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "Exactly as `transfer`, except the origin must be root and the source account may be"]
					#[doc = "specified."]
					#[doc = "# <weight>"]
					#[doc = "- Same as transfer, but additional read and write because the source account is not"]
					#[doc = "  assumed to be in the overlay."]
					#[doc = "# </weight>"]
					force_transfer {
						source: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "Same as the [`transfer`] call, but with a check that the transfer will not kill the"]
					#[doc = "origin account."]
					#[doc = ""]
					#[doc = "99% of the time you want [`transfer`] instead."]
					#[doc = ""]
					#[doc = "[`transfer`]: struct.Pallet.html#method.transfer"]
					transfer_keep_alive {
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Transfer the entire transferable balance from the caller account."]
					#[doc = ""]
					#[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
					#[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
					#[doc = "transferred by this function. To ensure that this function results in a killed account,"]
					#[doc = "you might need to prepare the account by removing any reference counters, storage"]
					#[doc = "deposits, etc..."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be Signed."]
					#[doc = ""]
					#[doc = "- `dest`: The recipient of the transfer."]
					#[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
					#[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
					#[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
					#[doc = "  keep the sender account alive (true). # <weight>"]
					#[doc = "- O(1). Just like transfer, but reading the user's transferable balance first."]
					#[doc = "  #</weight>"]
					transfer_all {
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					#[doc = "Unreserve some balance from a user by force."]
					#[doc = ""]
					#[doc = "Can only be called by ROOT."]
					force_unreserve {
						who: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						amount: ::core::primitive::u128,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Vesting balance too high to send value"]
					VestingBalance,
					#[codec(index = 1)]
					#[doc = "Account liquidity restrictions prevent withdrawal"]
					LiquidityRestrictions,
					#[codec(index = 2)]
					#[doc = "Balance too low to send value"]
					InsufficientBalance,
					#[codec(index = 3)]
					#[doc = "Value too low to create account due to existential deposit"]
					ExistentialDeposit,
					#[codec(index = 4)]
					#[doc = "Transfer/payment would kill account"]
					KeepAlive,
					#[codec(index = 5)]
					#[doc = "A vesting schedule already exists for this account"]
					ExistingVestingSchedule,
					#[codec(index = 6)]
					#[doc = "Beneficiary account must pre-exist"]
					DeadAccount,
					#[codec(index = 7)]
					#[doc = "Number of named reserves exceed MaxReserves"]
					TooManyReserves,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "An account was created with some free balance."]
					Endowed {
						account: ::subxt::sp_core::crypto::AccountId32,
						free_balance: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
					#[doc = "resulting in an outright loss."]
					DustLost {
						account: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "Transfer succeeded."]
					Transfer {
						from: ::subxt::sp_core::crypto::AccountId32,
						to: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "A balance was set by root."]
					BalanceSet {
						who: ::subxt::sp_core::crypto::AccountId32,
						free: ::core::primitive::u128,
						reserved: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Some balance was reserved (moved from free to reserved)."]
					Reserved {
						who: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					#[doc = "Some balance was unreserved (moved from reserved to free)."]
					Unreserved {
						who: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					#[doc = "Some balance was moved from the reserve of the first account to the second account."]
					#[doc = "Final argument indicates the destination balance type."]
					ReserveRepatriated {
						from: ::subxt::sp_core::crypto::AccountId32,
						to: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
						destination_status:
							runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
					},
					#[codec(index = 7)]
					#[doc = "Some amount was deposited (e.g. for transaction fees)."]
					Deposit {
						who: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					#[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
					Withdraw {
						who: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					#[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
					Slashed {
						who: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
				}
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct AccountData<_0> {
				pub free: _0,
				pub reserved: _0,
				pub misc_frozen: _0,
				pub fee_frozen: _0,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct BalanceLock<_0> {
				pub id: [::core::primitive::u8; 8usize],
				pub amount: _0,
				pub reasons: runtime_types::pallet_balances::Reasons,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum Reasons {
				#[codec(index = 0)]
				Fee,
				#[codec(index = 1)]
				Misc,
				#[codec(index = 2)]
				All,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum Releases {
				#[codec(index = 0)]
				V1_0_0,
				#[codec(index = 1)]
				V2_0_0,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ReserveData<_0, _1> {
				pub id: _0,
				pub amount: _1,
			}
		}
		pub mod pallet_bonded_finance {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Create a new bond offer. To be `bond` to later."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have the"]
					#[doc = "appropriate funds to stake the offer."]
					#[doc = ""]
					#[doc = "Allows the issuer to ask for their account to be kept alive using the `keep_alive`"]
					#[doc = "parameter."]
					#[doc = ""]
					#[doc = "Emits a `NewOffer`."]
					offer {
						offer: runtime_types::composable_traits::bonded_finance::BondOffer<
							::subxt::sp_core::crypto::AccountId32,
							runtime_types::primitives::currency::CurrencyId,
							::core::primitive::u128,
							::core::primitive::u32,
						>,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 1)]
					#[doc = "Bond to an offer."]
					#[doc = ""]
					#[doc = "The issuer should provide the number of contracts they are willing to buy."]
					#[doc = "Once there are no more contracts available on the offer, the `stake` put by the"]
					#[doc = "offer creator is refunded."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have the"]
					#[doc = "appropriate funds to buy the desired number of contracts."]
					#[doc = ""]
					#[doc = "Allows the issuer to ask for their account to be kept alive using the `keep_alive`"]
					#[doc = "parameter."]
					#[doc = ""]
					#[doc = "Emits a `NewBond`."]
					#[doc = "Possibily Emits a `OfferCompleted`."]
					bond {
						offer_id: ::core::primitive::u128,
						nb_of_bonds: ::core::primitive::u128,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					#[doc = "Cancel a running offer."]
					#[doc = ""]
					#[doc = "Blocking further bonds but not cancelling the currently vested rewards. The `stake` put"]
					#[doc = "by the offer creator is refunded."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be `AdminOrigin`"]
					#[doc = ""]
					#[doc = "Emits a `OfferCancelled`."]
					cancel { offer_id: ::core::primitive::u128 },
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The offer could not be found."]
					BondOfferNotFound,
					#[codec(index = 1)]
					#[doc = "Someone tried  to submit an invalid offer."]
					InvalidBondOffer,
					#[codec(index = 2)]
					#[doc = "Someone tried to bond an already completed offer."]
					OfferCompleted,
					#[codec(index = 3)]
					#[doc = "Someone tried to bond with an invalid number of nb_of_bonds."]
					InvalidNumberOfBonds,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A new offer has been created."]
					NewOffer { offer_id: ::core::primitive::u128 },
					#[codec(index = 1)]
					#[doc = "A new bond has been registered."]
					NewBond {
						offer_id: ::core::primitive::u128,
						who: ::subxt::sp_core::crypto::AccountId32,
						nb_of_bonds: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "An offer has been cancelled by the `AdminOrigin`."]
					OfferCancelled { offer_id: ::core::primitive::u128 },
					#[codec(index = 3)]
					#[doc = "An offer has been completed."]
					OfferCompleted { offer_id: ::core::primitive::u128 },
				}
			}
		}
		pub mod pallet_call_filter {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Disable a pallet function."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be"]
					#[doc = "`UpdateOrigin`."]
					#[doc = ""]
					#[doc = "Possibly emits a `Disabled` event."]
					disable {
						entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
							runtime_types::dali_runtime::MaxStringSize,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Enable a previously disabled pallet function."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be"]
					#[doc = "`UpdateOrigin`."]
					#[doc = ""]
					#[doc = "Possibly emits an `Enabled` event."]
					enable {
						entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
							runtime_types::dali_runtime::MaxStringSize,
						>,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "We tried to disable an extrinsic that cannot be disabled."]
					CannotDisable,
					#[codec(index = 1)]
					#[doc = "The pallet name is not a valid UTF8 string."]
					InvalidString,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Paused transaction"]
					Disabled {
						entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
							runtime_types::dali_runtime::MaxStringSize,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Unpaused transaction"]
					Enabled {
						entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
							runtime_types::dali_runtime::MaxStringSize,
						>,
					},
				}
			}
		}
		pub mod pallet_collator_selection {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Set the list of invulnerable (fixed) collators."]
					set_invulnerables {
						new: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
					},
					#[codec(index = 1)]
					#[doc = "Set the ideal number of collators (not including the invulnerables)."]
					#[doc = "If lowering this number, then the number of running collators could be higher than this figure."]
					#[doc = "Aside from that edge case, there should be no other way to have more collators than the desired number."]
					set_desired_candidates { max: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "Set the candidacy bond amount."]
					set_candidacy_bond { bond: ::core::primitive::u128 },
					#[codec(index = 3)]
					#[doc = "Register this account as a collator candidate. The account must (a) already have"]
					#[doc = "registered session keys and (b) be able to reserve the `CandidacyBond`."]
					#[doc = ""]
					#[doc = "This call is not available to `Invulnerable` collators."]
					register_as_candidate,
					#[codec(index = 4)]
					#[doc = "Deregister `origin` as a collator candidate. Note that the collator can only leave on"]
					#[doc = "session change. The `CandidacyBond` will be unreserved immediately."]
					#[doc = ""]
					#[doc = "This call will fail if the total number of candidates would drop below `MinCandidates`."]
					#[doc = ""]
					#[doc = "This call is not available to `Invulnerable` collators."]
					leave_intent,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct CandidateInfo<_0, _1> {
					pub who: _0,
					pub deposit: _1,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Too many candidates"]
					TooManyCandidates,
					#[codec(index = 1)]
					#[doc = "Too few candidates"]
					TooFewCandidates,
					#[codec(index = 2)]
					#[doc = "Unknown error"]
					Unknown,
					#[codec(index = 3)]
					#[doc = "Permission issue"]
					Permission,
					#[codec(index = 4)]
					#[doc = "User is already a candidate"]
					AlreadyCandidate,
					#[codec(index = 5)]
					#[doc = "User is not a candidate"]
					NotCandidate,
					#[codec(index = 6)]
					#[doc = "User is already an Invulnerable"]
					AlreadyInvulnerable,
					#[codec(index = 7)]
					#[doc = "Account has no associated validator ID"]
					NoAssociatedValidatorId,
					#[codec(index = 8)]
					#[doc = "Validator ID is not yet registered"]
					ValidatorNotRegistered,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					NewInvulnerables(::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>),
					#[codec(index = 1)]
					NewDesiredCandidates(::core::primitive::u32),
					#[codec(index = 2)]
					NewCandidacyBond(::core::primitive::u128),
					#[codec(index = 3)]
					CandidateAdded(::subxt::sp_core::crypto::AccountId32, ::core::primitive::u128),
					#[codec(index = 4)]
					CandidateRemoved(::subxt::sp_core::crypto::AccountId32),
				}
			}
		}
		pub mod pallet_collective {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Set the collective's membership."]
					#[doc = ""]
					#[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
					#[doc = "- `prime`: The prime member whose vote sets the default."]
					#[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
					#[doc = "  weight estimation."]
					#[doc = ""]
					#[doc = "Requires root origin."]
					#[doc = ""]
					#[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
					#[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
					#[doc = ""]
					#[doc = "# WARNING:"]
					#[doc = ""]
					#[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
					#[doc = "implementation of the trait [`ChangeMembers`]."]
					#[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
					#[doc = "with other logic managing the member set."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "## Weight"]
					#[doc = "- `O(MP + N)` where:"]
					#[doc = "  - `M` old-members-count (code- and governance-bounded)"]
					#[doc = "  - `N` new-members-count (code- and governance-bounded)"]
					#[doc = "  - `P` proposals-count (code-bounded)"]
					#[doc = "- DB:"]
					#[doc = "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the"]
					#[doc = "    members"]
					#[doc = "  - 1 storage read (codec `O(P)`) for reading the proposals"]
					#[doc = "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal"]
					#[doc = "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one"]
					#[doc = "# </weight>"]
					set_members {
						new_members: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
						prime: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
						old_count: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					#[doc = "Dispatch a proposal from a member using the `Member` origin."]
					#[doc = ""]
					#[doc = "Origin must be a member of the collective."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "## Weight"]
					#[doc = "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching"]
					#[doc = "  `proposal`"]
					#[doc = "- DB: 1 read (codec `O(M)`) + DB access of `proposal`"]
					#[doc = "- 1 event"]
					#[doc = "# </weight>"]
					execute {
						proposal: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Add a new proposal to either be voted on or executed directly."]
					#[doc = ""]
					#[doc = "Requires the sender to be member."]
					#[doc = ""]
					#[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
					#[doc = "or put up for voting."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "## Weight"]
					#[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
					#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
					#[doc = "  - `M` is members-count (code- and governance-bounded)"]
					#[doc = "  - branching is influenced by `threshold` where:"]
					#[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
					#[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
					#[doc = "- DB:"]
					#[doc = "  - 1 storage read `is_member` (codec `O(M)`)"]
					#[doc = "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)"]
					#[doc = "  - DB accesses influenced by `threshold`:"]
					#[doc = "    - EITHER storage accesses done by `proposal` (`threshold < 2`)"]
					#[doc = "    - OR proposal insertion (`threshold <= 2`)"]
					#[doc = "      - 1 storage mutation `Proposals` (codec `O(P2)`)"]
					#[doc = "      - 1 storage mutation `ProposalCount` (codec `O(1)`)"]
					#[doc = "      - 1 storage write `ProposalOf` (codec `O(B)`)"]
					#[doc = "      - 1 storage write `Voting` (codec `O(M)`)"]
					#[doc = "  - 1 event"]
					#[doc = "# </weight>"]
					propose {
						#[codec(compact)]
						threshold: ::core::primitive::u32,
						proposal: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "Add an aye or nay vote for the sender to the given proposal."]
					#[doc = ""]
					#[doc = "Requires the sender to be a member."]
					#[doc = ""]
					#[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
					#[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
					#[doc = "fee."]
					#[doc = "# <weight>"]
					#[doc = "## Weight"]
					#[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
					#[doc = "- DB:"]
					#[doc = "  - 1 storage read `Members` (codec `O(M)`)"]
					#[doc = "  - 1 storage mutation `Voting` (codec `O(M)`)"]
					#[doc = "- 1 event"]
					#[doc = "# </weight>"]
					vote {
						proposal: ::subxt::sp_core::H256,
						#[codec(compact)]
						index: ::core::primitive::u32,
						approve: ::core::primitive::bool,
					},
					#[codec(index = 4)]
					#[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
					#[doc = ""]
					#[doc = "May be called by any signed account in order to finish voting and close the proposal."]
					#[doc = ""]
					#[doc = "If called before the end of the voting period it will only close the vote if it is"]
					#[doc = "has enough votes to be approved or disapproved."]
					#[doc = ""]
					#[doc = "If called after the end of the voting period abstentions are counted as rejections"]
					#[doc = "unless there is a prime member set and the prime member cast an approval."]
					#[doc = ""]
					#[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
					#[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
					#[doc = ""]
					#[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
					#[doc = "proposal."]
					#[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
					#[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "## Weight"]
					#[doc = "- `O(B + M + P1 + P2)` where:"]
					#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
					#[doc = "  - `M` is members-count (code- and governance-bounded)"]
					#[doc = "  - `P1` is the complexity of `proposal` preimage."]
					#[doc = "  - `P2` is proposal-count (code-bounded)"]
					#[doc = "- DB:"]
					#[doc = " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)"]
					#[doc = " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec"]
					#[doc = "   `O(P2)`)"]
					#[doc = " - any mutations done while executing `proposal` (`P1`)"]
					#[doc = "- up to 3 events"]
					#[doc = "# </weight>"]
					close {
						proposal_hash: ::subxt::sp_core::H256,
						#[codec(compact)]
						index: ::core::primitive::u32,
						#[codec(compact)]
						proposal_weight_bound: ::core::primitive::u64,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					#[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
					#[doc = "state."]
					#[doc = ""]
					#[doc = "Must be called by the Root origin."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Complexity: O(P) where P is the number of max proposals"]
					#[doc = "DB Weight:"]
					#[doc = "* Reads: Proposals"]
					#[doc = "* Writes: Voting, Proposals, ProposalOf"]
					#[doc = "# </weight>"]
					disapprove_proposal { proposal_hash: ::subxt::sp_core::H256 },
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Account is not a member"]
					NotMember,
					#[codec(index = 1)]
					#[doc = "Duplicate proposals not allowed"]
					DuplicateProposal,
					#[codec(index = 2)]
					#[doc = "Proposal must exist"]
					ProposalMissing,
					#[codec(index = 3)]
					#[doc = "Mismatched index"]
					WrongIndex,
					#[codec(index = 4)]
					#[doc = "Duplicate vote ignored"]
					DuplicateVote,
					#[codec(index = 5)]
					#[doc = "Members are already initialized!"]
					AlreadyInitialized,
					#[codec(index = 6)]
					#[doc = "The close call was made too early, before the end of the voting."]
					TooEarly,
					#[codec(index = 7)]
					#[doc = "There can only be a maximum of `MaxProposals` active proposals."]
					TooManyProposals,
					#[codec(index = 8)]
					#[doc = "The given weight bound for the proposal was too low."]
					WrongProposalWeight,
					#[codec(index = 9)]
					#[doc = "The given length bound for the proposal was too low."]
					WrongProposalLength,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
					#[doc = "`MemberCount`)."]
					Proposed {
						account: ::subxt::sp_core::crypto::AccountId32,
						proposal_index: ::core::primitive::u32,
						proposal_hash: ::subxt::sp_core::H256,
						threshold: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					#[doc = "A motion (given hash) has been voted on by given account, leaving"]
					#[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
					Voted {
						account: ::subxt::sp_core::crypto::AccountId32,
						proposal_hash: ::subxt::sp_core::H256,
						voted: ::core::primitive::bool,
						yes: ::core::primitive::u32,
						no: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "A motion was approved by the required threshold."]
					Approved { proposal_hash: ::subxt::sp_core::H256 },
					#[codec(index = 3)]
					#[doc = "A motion was not approved by the required threshold."]
					Disapproved { proposal_hash: ::subxt::sp_core::H256 },
					#[codec(index = 4)]
					#[doc = "A motion was executed; result will be `Ok` if it returned without error."]
					Executed {
						proposal_hash: ::subxt::sp_core::H256,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 5)]
					#[doc = "A single member did some action; result will be `Ok` if it returned without error."]
					MemberExecuted {
						proposal_hash: ::subxt::sp_core::H256,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 6)]
					#[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
					Closed {
						proposal_hash: ::subxt::sp_core::H256,
						yes: ::core::primitive::u32,
						no: ::core::primitive::u32,
					},
				}
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum RawOrigin<_0> {
				#[codec(index = 0)]
				Members(::core::primitive::u32, ::core::primitive::u32),
				#[codec(index = 1)]
				Member(_0),
				#[codec(index = 2)]
				_Phantom,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Votes<_0, _1> {
				pub index: _1,
				pub threshold: _1,
				pub ayes: ::std::vec::Vec<_0>,
				pub nays: ::std::vec::Vec<_0>,
				pub end: _1,
			}
		}
		pub mod pallet_crowdloan_rewards {
			use super::runtime_types;
			pub mod models {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum Proof<_0> {
					#[codec(index = 0)]
					RelayChain(_0, runtime_types::sp_runtime::MultiSignature),
					#[codec(index = 1)]
					Ethereum(runtime_types::composable_support::types::EcdsaSignature),
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum RemoteAccount<_0> {
					#[codec(index = 0)]
					RelayChain(_0),
					#[codec(index = 1)]
					Ethereum(runtime_types::composable_support::types::EthereumAddress),
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct Reward<_0, _1> {
					pub total: _0,
					pub claimed: _0,
					pub vesting_period: _1,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Initialize the pallet at the current transaction block."]
					initialize,
					#[codec(index = 1)]
					#[doc = "Initialize the pallet at the given transaction block."]
					initialize_at { at: ::core::primitive::u64 },
					#[codec(index = 2)]
					#[doc = "Populate pallet by adding more rewards."]
					#[doc = "Can be called multiple times. If an remote account already has a reward, it will be"]
					#[doc = "replaced by the new reward value."]
					#[doc = "Can only be called before `initialize`."]
					populate {
						rewards: ::std::vec::Vec<(
							runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
								::subxt::sp_core::crypto::AccountId32,
							>,
							::core::primitive::u128,
							::core::primitive::u64,
						)>,
					},
					#[codec(index = 3)]
					#[doc = "Associate a reward account. A valid proof has to be provided."]
					#[doc = "This call also claim the first reward (a.k.a. the first payment, which is a % of the"]
					#[doc = "vested reward)."]
					#[doc = "If logic gate pass, no fees are applied."]
					#[doc = ""]
					#[doc = "The proof should be:"]
					#[doc = "```haskell"]
					#[doc = "proof = sign (concat prefix (hex reward_account))"]
					#[doc = "```"]
					associate {
						reward_account: ::subxt::sp_core::crypto::AccountId32,
						proof: runtime_types::pallet_crowdloan_rewards::models::Proof<
							::subxt::sp_core::crypto::AccountId32,
						>,
					},
					#[codec(index = 4)]
					#[doc = "Claim a reward from the associated reward account."]
					#[doc = "A previous call to `associate` should have been made."]
					#[doc = "If logic gate pass, no fees are applied."]
					claim,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					NotInitialized,
					#[codec(index = 1)]
					AlreadyInitialized,
					#[codec(index = 2)]
					BackToTheFuture,
					#[codec(index = 3)]
					RewardsNotFunded,
					#[codec(index = 4)]
					InvalidProof,
					#[codec(index = 5)]
					InvalidClaim,
					#[codec(index = 6)]
					NothingToClaim,
					#[codec(index = 7)]
					NotAssociated,
					#[codec(index = 8)]
					AlreadyAssociated,
					#[codec(index = 9)]
					NotClaimableYet,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					Initialized { at: ::core::primitive::u64 },
					#[codec(index = 1)]
					Claimed {
						remote_account:
							runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
								::subxt::sp_core::crypto::AccountId32,
							>,
						reward_account: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					Associated {
						remote_account:
							runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
								::subxt::sp_core::crypto::AccountId32,
							>,
						reward_account: ::subxt::sp_core::crypto::AccountId32,
					},
				}
			}
		}
		pub mod pallet_currency_factory {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					AssetNotFound,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					RangeCreated {
						range: runtime_types::pallet_currency_factory::ranges::Range<
							runtime_types::primitives::currency::CurrencyId,
						>,
					},
				}
			}
			pub mod ranges {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct Range<_0> {
					pub current: _0,
					pub end: _0,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct Ranges<_0> {
					pub ranges: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
						runtime_types::pallet_currency_factory::ranges::Range<_0>,
					>,
				}
			}
		}
		pub mod pallet_democracy {
			use super::runtime_types;
			pub mod conviction {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum Conviction {
					#[codec(index = 0)]
					None,
					#[codec(index = 1)]
					Locked1x,
					#[codec(index = 2)]
					Locked2x,
					#[codec(index = 3)]
					Locked3x,
					#[codec(index = 4)]
					Locked4x,
					#[codec(index = 5)]
					Locked5x,
					#[codec(index = 6)]
					Locked6x,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Propose a sensitive action to be taken."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_ and the sender must"]
					#[doc = "have funds to cover the deposit."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The hash of the proposal preimage."]
					#[doc = "- `value`: The amount of deposit (must be at least `MinimumDeposit`)."]
					#[doc = ""]
					#[doc = "Emits `Proposed`."]
					#[doc = ""]
					#[doc = "Weight: `O(p)`"]
					propose {
						proposal_hash: ::subxt::sp_core::H256,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "Signals agreement with a particular proposal."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_ and the sender"]
					#[doc = "must have funds to cover the deposit, equal to the original deposit."]
					#[doc = ""]
					#[doc = "- `proposal`: The index of the proposal to second."]
					#[doc = "- `seconds_upper_bound`: an upper bound on the current number of seconds on this"]
					#[doc = "  proposal. Extrinsic is weighted according to this value with no refund."]
					#[doc = ""]
					#[doc = "Weight: `O(S)` where S is the number of seconds a proposal already has."]
					second {
						#[codec(compact)]
						proposal: ::core::primitive::u32,
						#[codec(compact)]
						seconds_upper_bound: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;"]
					#[doc = "otherwise it is a vote to keep the status quo."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `ref_index`: The index of the referendum to vote for."]
					#[doc = "- `vote`: The vote configuration."]
					#[doc = ""]
					#[doc = "Weight: `O(R)` where R is the number of referendums the voter has voted on."]
					vote {
						#[codec(compact)]
						ref_index: ::core::primitive::u32,
						vote: runtime_types::pallet_democracy::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 3)]
					#[doc = "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same"]
					#[doc = "referendum."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be `CancellationOrigin`."]
					#[doc = ""]
					#[doc = "-`ref_index`: The index of the referendum to cancel."]
					#[doc = ""]
					#[doc = "Weight: `O(1)`."]
					emergency_cancel { ref_index: ::core::primitive::u32 },
					#[codec(index = 4)]
					#[doc = "Schedule a referendum to be tabled once it is legal to schedule an external"]
					#[doc = "referendum."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be `ExternalOrigin`."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
					#[doc = ""]
					#[doc = "Weight: `O(V)` with V number of vetoers in the blacklist of proposal."]
					#[doc = "  Decoding vec of length V. Charged as maximum"]
					external_propose { proposal_hash: ::subxt::sp_core::H256 },
					#[codec(index = 5)]
					#[doc = "Schedule a majority-carries referendum to be tabled next once it is legal to schedule"]
					#[doc = "an external referendum."]
					#[doc = ""]
					#[doc = "The dispatch of this call must be `ExternalMajorityOrigin`."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
					#[doc = ""]
					#[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
					#[doc = "pre-scheduled `external_propose` call."]
					#[doc = ""]
					#[doc = "Weight: `O(1)`"]
					external_propose_majority { proposal_hash: ::subxt::sp_core::H256 },
					#[codec(index = 6)]
					#[doc = "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to"]
					#[doc = "schedule an external referendum."]
					#[doc = ""]
					#[doc = "The dispatch of this call must be `ExternalDefaultOrigin`."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
					#[doc = ""]
					#[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
					#[doc = "pre-scheduled `external_propose` call."]
					#[doc = ""]
					#[doc = "Weight: `O(1)`"]
					external_propose_default { proposal_hash: ::subxt::sp_core::H256 },
					#[codec(index = 7)]
					#[doc = "Schedule the currently externally-proposed majority-carries referendum to be tabled"]
					#[doc = "immediately. If there is no externally-proposed referendum currently, or if there is one"]
					#[doc = "but it is not a majority-carries referendum then it fails."]
					#[doc = ""]
					#[doc = "The dispatch of this call must be `FastTrackOrigin`."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The hash of the current external proposal."]
					#[doc = "- `voting_period`: The period that is allowed for voting on this proposal. Increased to"]
					#[doc = "  `FastTrackVotingPeriod` if too low."]
					#[doc = "- `delay`: The number of block after voting has ended in approval and this should be"]
					#[doc = "  enacted. This doesn't have a minimum amount."]
					#[doc = ""]
					#[doc = "Emits `Started`."]
					#[doc = ""]
					#[doc = "Weight: `O(1)`"]
					fast_track {
						proposal_hash: ::subxt::sp_core::H256,
						voting_period: ::core::primitive::u32,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					#[doc = "Veto and blacklist the external proposal hash."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be `VetoOrigin`."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist."]
					#[doc = ""]
					#[doc = "Emits `Vetoed`."]
					#[doc = ""]
					#[doc = "Weight: `O(V + log(V))` where V is number of `existing vetoers`"]
					veto_external { proposal_hash: ::subxt::sp_core::H256 },
					#[codec(index = 9)]
					#[doc = "Remove a referendum."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Root_."]
					#[doc = ""]
					#[doc = "- `ref_index`: The index of the referendum to cancel."]
					#[doc = ""]
					#[doc = "# Weight: `O(1)`."]
					cancel_referendum {
						#[codec(compact)]
						ref_index: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					#[doc = "Cancel a proposal queued for enactment."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Root_."]
					#[doc = ""]
					#[doc = "- `which`: The index of the referendum to cancel."]
					#[doc = ""]
					#[doc = "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."]
					cancel_queued { which: ::core::primitive::u32 },
					#[codec(index = 11)]
					#[doc = "Delegate the voting power (with some given conviction) of the sending account."]
					#[doc = ""]
					#[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
					#[doc = "time appropriate for the conviction's lock period."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
					#[doc = "  - be delegating already; or"]
					#[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
					#[doc = "    through `reap_vote` or `unvote`)."]
					#[doc = ""]
					#[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
					#[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
					#[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
					#[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
					#[doc = "  be more than the account's current balance."]
					#[doc = ""]
					#[doc = "Emits `Delegated`."]
					#[doc = ""]
					#[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
					#[doc = "  voted on. Weight is charged as if maximum votes."]
					delegate {
						to: ::subxt::sp_core::crypto::AccountId32,
						conviction: runtime_types::pallet_democracy::conviction::Conviction,
						balance: ::core::primitive::u128,
					},
					#[codec(index = 12)]
					#[doc = "Undelegate the voting power of the sending account."]
					#[doc = ""]
					#[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
					#[doc = "of the conviction with which the delegation was issued."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
					#[doc = "currently delegating."]
					#[doc = ""]
					#[doc = "Emits `Undelegated`."]
					#[doc = ""]
					#[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
					#[doc = "  voted on. Weight is charged as if maximum votes."]
					undelegate,
					#[codec(index = 13)]
					#[doc = "Clears all public proposals."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Root_."]
					#[doc = ""]
					#[doc = "Weight: `O(1)`."]
					clear_public_proposals,
					#[codec(index = 14)]
					#[doc = "Register the preimage for an upcoming proposal. This doesn't require the proposal to be"]
					#[doc = "in the dispatch queue but does require a deposit, returned once enacted."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `encoded_proposal`: The preimage of a proposal."]
					#[doc = ""]
					#[doc = "Emits `PreimageNoted`."]
					#[doc = ""]
					#[doc = "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."]
					note_preimage { encoded_proposal: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 15)]
					#[doc = "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."]
					note_preimage_operational {
						encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 16)]
					#[doc = "Register the preimage for an upcoming proposal. This requires the proposal to be"]
					#[doc = "in the dispatch queue. No deposit is needed. When this call is successful, i.e."]
					#[doc = "the preimage has not been uploaded before and matches some imminent proposal,"]
					#[doc = "no fee is paid."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `encoded_proposal`: The preimage of a proposal."]
					#[doc = ""]
					#[doc = "Emits `PreimageNoted`."]
					#[doc = ""]
					#[doc = "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."]
					note_imminent_preimage {
						encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 17)]
					#[doc = "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."]
					note_imminent_preimage_operational {
						encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 18)]
					#[doc = "Remove an expired proposal preimage and collect the deposit."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The preimage hash of a proposal."]
					#[doc = "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is"]
					#[doc = "  weighted according to this value with no refund."]
					#[doc = ""]
					#[doc = "This will only work after `VotingPeriod` blocks from the time that the preimage was"]
					#[doc = "noted, if it's the same account doing it. If it's a different account, then it'll only"]
					#[doc = "work an additional `EnactmentPeriod` later."]
					#[doc = ""]
					#[doc = "Emits `PreimageReaped`."]
					#[doc = ""]
					#[doc = "Weight: `O(D)` where D is length of proposal."]
					reap_preimage {
						proposal_hash: ::subxt::sp_core::H256,
						#[codec(compact)]
						proposal_len_upper_bound: ::core::primitive::u32,
					},
					#[codec(index = 19)]
					#[doc = "Unlock tokens that have an expired lock."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `target`: The account to remove the lock on."]
					#[doc = ""]
					#[doc = "Weight: `O(R)` with R number of vote of target."]
					unlock { target: ::subxt::sp_core::crypto::AccountId32 },
					#[codec(index = 20)]
					#[doc = "Remove a vote for a referendum."]
					#[doc = ""]
					#[doc = "If:"]
					#[doc = "- the referendum was cancelled, or"]
					#[doc = "- the referendum is ongoing, or"]
					#[doc = "- the referendum has ended such that"]
					#[doc = "  - the vote of the account was in opposition to the result; or"]
					#[doc = "  - there was no conviction to the account's vote; or"]
					#[doc = "  - the account made a split vote"]
					#[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
					#[doc = "funds being available."]
					#[doc = ""]
					#[doc = "If, however, the referendum has ended and:"]
					#[doc = "- it finished corresponding to the vote of the account, and"]
					#[doc = "- the account made a standard vote with conviction, and"]
					#[doc = "- the lock period of the conviction is not over"]
					#[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
					#[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
					#[doc = "of both the amount locked and the time is it locked for)."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
					#[doc = "registered for referendum `index`."]
					#[doc = ""]
					#[doc = "- `index`: The index of referendum of the vote to be removed."]
					#[doc = ""]
					#[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
					#[doc = "  Weight is calculated for the maximum number of vote."]
					remove_vote { index: ::core::primitive::u32 },
					#[codec(index = 21)]
					#[doc = "Remove a vote for a referendum."]
					#[doc = ""]
					#[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
					#[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
					#[doc = "either because the referendum was cancelled, because the voter lost the referendum or"]
					#[doc = "because the conviction period is over."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `target`: The account of the vote to be removed; this account must have voted for"]
					#[doc = "  referendum `index`."]
					#[doc = "- `index`: The index of referendum of the vote to be removed."]
					#[doc = ""]
					#[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
					#[doc = "  Weight is calculated for the maximum number of vote."]
					remove_other_vote {
						target: ::subxt::sp_core::crypto::AccountId32,
						index: ::core::primitive::u32,
					},
					#[codec(index = 22)]
					#[doc = "Enact a proposal from a referendum. For now we just make the weight be the maximum."]
					enact_proposal {
						proposal_hash: ::subxt::sp_core::H256,
						index: ::core::primitive::u32,
					},
					#[codec(index = 23)]
					#[doc = "Permanently place a proposal into the blacklist. This prevents it from ever being"]
					#[doc = "proposed again."]
					#[doc = ""]
					#[doc = "If called on a queued public or external proposal, then this will result in it being"]
					#[doc = "removed. If the `ref_index` supplied is an active referendum with the proposal hash,"]
					#[doc = "then it will be cancelled."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be `BlacklistOrigin`."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The proposal hash to blacklist permanently."]
					#[doc = "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be"]
					#[doc = "cancelled."]
					#[doc = ""]
					#[doc = "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a"]
					#[doc = "  reasonable value)."]
					blacklist {
						proposal_hash: ::subxt::sp_core::H256,
						maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 24)]
					#[doc = "Remove a proposal."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be `CancelProposalOrigin`."]
					#[doc = ""]
					#[doc = "- `prop_index`: The index of the proposal to cancel."]
					#[doc = ""]
					#[doc = "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"]
					cancel_proposal {
						#[codec(compact)]
						prop_index: ::core::primitive::u32,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Value too low"]
					ValueLow,
					#[codec(index = 1)]
					#[doc = "Proposal does not exist"]
					ProposalMissing,
					#[codec(index = 2)]
					#[doc = "Cannot cancel the same proposal twice"]
					AlreadyCanceled,
					#[codec(index = 3)]
					#[doc = "Proposal already made"]
					DuplicateProposal,
					#[codec(index = 4)]
					#[doc = "Proposal still blacklisted"]
					ProposalBlacklisted,
					#[codec(index = 5)]
					#[doc = "Next external proposal not simple majority"]
					NotSimpleMajority,
					#[codec(index = 6)]
					#[doc = "Invalid hash"]
					InvalidHash,
					#[codec(index = 7)]
					#[doc = "No external proposal"]
					NoProposal,
					#[codec(index = 8)]
					#[doc = "Identity may not veto a proposal twice"]
					AlreadyVetoed,
					#[codec(index = 9)]
					#[doc = "Preimage already noted"]
					DuplicatePreimage,
					#[codec(index = 10)]
					#[doc = "Not imminent"]
					NotImminent,
					#[codec(index = 11)]
					#[doc = "Too early"]
					TooEarly,
					#[codec(index = 12)]
					#[doc = "Imminent"]
					Imminent,
					#[codec(index = 13)]
					#[doc = "Preimage not found"]
					PreimageMissing,
					#[codec(index = 14)]
					#[doc = "Vote given for invalid referendum"]
					ReferendumInvalid,
					#[codec(index = 15)]
					#[doc = "Invalid preimage"]
					PreimageInvalid,
					#[codec(index = 16)]
					#[doc = "No proposals waiting"]
					NoneWaiting,
					#[codec(index = 17)]
					#[doc = "The given account did not vote on the referendum."]
					NotVoter,
					#[codec(index = 18)]
					#[doc = "The actor has no permission to conduct the action."]
					NoPermission,
					#[codec(index = 19)]
					#[doc = "The account is already delegating."]
					AlreadyDelegating,
					#[codec(index = 20)]
					#[doc = "Too high a balance was provided that the account cannot afford."]
					InsufficientFunds,
					#[codec(index = 21)]
					#[doc = "The account is not currently delegating."]
					NotDelegating,
					#[codec(index = 22)]
					#[doc = "The account currently has votes attached to it and the operation cannot succeed until"]
					#[doc = "these are removed, either through `unvote` or `reap_vote`."]
					VotesExist,
					#[codec(index = 23)]
					#[doc = "The instant referendum origin is currently disallowed."]
					InstantNotAllowed,
					#[codec(index = 24)]
					#[doc = "Delegation to oneself makes no sense."]
					Nonsense,
					#[codec(index = 25)]
					#[doc = "Invalid upper bound."]
					WrongUpperBound,
					#[codec(index = 26)]
					#[doc = "Maximum number of votes reached."]
					MaxVotesReached,
					#[codec(index = 27)]
					#[doc = "Maximum number of proposals reached."]
					TooManyProposals,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A motion has been proposed by a public account."]
					Proposed {
						proposal_index: ::core::primitive::u32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "A public proposal has been tabled for referendum vote."]
					Tabled {
						proposal_index: ::core::primitive::u32,
						deposit: ::core::primitive::u128,
						depositors: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
					},
					#[codec(index = 2)]
					#[doc = "An external proposal has been tabled."]
					ExternalTabled,
					#[codec(index = 3)]
					#[doc = "A referendum has begun."]
					Started {
						ref_index: ::core::primitive::u32,
						threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
					},
					#[codec(index = 4)]
					#[doc = "A proposal has been approved by referendum."]
					Passed { ref_index: ::core::primitive::u32 },
					#[codec(index = 5)]
					#[doc = "A proposal has been rejected by referendum."]
					NotPassed { ref_index: ::core::primitive::u32 },
					#[codec(index = 6)]
					#[doc = "A referendum has been cancelled."]
					Cancelled { ref_index: ::core::primitive::u32 },
					#[codec(index = 7)]
					#[doc = "A proposal has been enacted."]
					Executed {
						ref_index: ::core::primitive::u32,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 8)]
					#[doc = "An account has delegated their vote to another account."]
					Delegated {
						who: ::subxt::sp_core::crypto::AccountId32,
						target: ::subxt::sp_core::crypto::AccountId32,
					},
					#[codec(index = 9)]
					#[doc = "An account has cancelled a previous delegation operation."]
					Undelegated { account: ::subxt::sp_core::crypto::AccountId32 },
					#[codec(index = 10)]
					#[doc = "An external proposal has been vetoed."]
					Vetoed {
						who: ::subxt::sp_core::crypto::AccountId32,
						proposal_hash: ::subxt::sp_core::H256,
						until: ::core::primitive::u32,
					},
					#[codec(index = 11)]
					#[doc = "A proposal's preimage was noted, and the deposit taken."]
					PreimageNoted {
						proposal_hash: ::subxt::sp_core::H256,
						who: ::subxt::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 12)]
					#[doc = "A proposal preimage was removed and used (the deposit was returned)."]
					PreimageUsed {
						proposal_hash: ::subxt::sp_core::H256,
						provider: ::subxt::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 13)]
					#[doc = "A proposal could not be executed because its preimage was invalid."]
					PreimageInvalid {
						proposal_hash: ::subxt::sp_core::H256,
						ref_index: ::core::primitive::u32,
					},
					#[codec(index = 14)]
					#[doc = "A proposal could not be executed because its preimage was missing."]
					PreimageMissing {
						proposal_hash: ::subxt::sp_core::H256,
						ref_index: ::core::primitive::u32,
					},
					#[codec(index = 15)]
					#[doc = "A registered preimage was removed and the deposit collected by the reaper."]
					PreimageReaped {
						proposal_hash: ::subxt::sp_core::H256,
						provider: ::subxt::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
						reaper: ::subxt::sp_core::crypto::AccountId32,
					},
					#[codec(index = 16)]
					#[doc = "A proposal_hash has been blacklisted permanently."]
					Blacklisted { proposal_hash: ::subxt::sp_core::H256 },
					#[codec(index = 17)]
					#[doc = "An account has voted in a referendum"]
					Voted {
						voter: ::subxt::sp_core::crypto::AccountId32,
						ref_index: ::core::primitive::u32,
						vote: runtime_types::pallet_democracy::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 18)]
					#[doc = "An account has secconded a proposal"]
					Seconded {
						seconder: ::subxt::sp_core::crypto::AccountId32,
						prop_index: ::core::primitive::u32,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct Delegations<_0> {
					pub votes: _0,
					pub capital: _0,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum ReferendumInfo<_0, _1, _2> {
					#[codec(index = 0)]
					Ongoing(runtime_types::pallet_democracy::types::ReferendumStatus<_0, _1, _2>),
					#[codec(index = 1)]
					Finished { approved: ::core::primitive::bool, end: _0 },
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct ReferendumStatus<_0, _1, _2> {
					pub end: _0,
					pub proposal_hash: _1,
					pub threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
					pub delay: _0,
					pub tally: runtime_types::pallet_democracy::types::Tally<_2>,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct Tally<_0> {
					pub ayes: _0,
					pub nays: _0,
					pub turnout: _0,
				}
			}
			pub mod vote {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum AccountVote<_0> {
					#[codec(index = 0)]
					Standard { vote: runtime_types::pallet_democracy::vote::Vote, balance: _0 },
					#[codec(index = 1)]
					Split { aye: _0, nay: _0 },
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct PriorLock<_0, _1>(pub _0, pub _1);
				#[derive(
					:: subxt :: codec :: CompactAs,
					:: subxt :: codec :: Decode,
					:: subxt :: codec :: Encode,
					Debug,
				)]
				pub struct Vote(pub ::core::primitive::u8);
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum Voting<_0, _1, _2> {
					#[codec(index = 0)]
					Direct {
						votes: ::std::vec::Vec<(
							_2,
							runtime_types::pallet_democracy::vote::AccountVote<_0>,
						)>,
						delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
						prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
					},
					#[codec(index = 1)]
					Delegating {
						balance: _0,
						target: _1,
						conviction: runtime_types::pallet_democracy::conviction::Conviction,
						delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
						prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
					},
				}
			}
			pub mod vote_threshold {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum VoteThreshold {
					#[codec(index = 0)]
					SuperMajorityApprove,
					#[codec(index = 1)]
					SuperMajorityAgainst,
					#[codec(index = 2)]
					SimpleMajority,
				}
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum PreimageStatus<_0, _1, _2> {
				#[codec(index = 0)]
				Missing(_2),
				#[codec(index = 1)]
				Available {
					data: ::std::vec::Vec<::core::primitive::u8>,
					provider: _0,
					deposit: _1,
					since: _2,
					expiry: ::core::option::Option<_2>,
				},
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum Releases {
				#[codec(index = 0)]
				V1,
			}
		}
		pub mod pallet_dex_router {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Create, update or remove route."]
					#[doc = "On successful emits one of `RouteAdded`, `RouteUpdated` or `RouteDeleted`."]
					update_route {
						asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
							runtime_types::primitives::currency::CurrencyId,
						>,
						route: ::core::option::Option<
							runtime_types::frame_support::storage::bounded_vec::BoundedVec<
								::core::primitive::u128,
							>,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Exchange `amount` of quote asset for `asset_pair` via route found in router."]
					#[doc = "On successful underlying DEX pallets will emit appropriate event"]
					exchange {
						asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
							runtime_types::primitives::currency::CurrencyId,
						>,
						amount: ::core::primitive::u128,
						min_receive: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "Sell `amount` of quote asset for `asset_pair` via route found in router."]
					#[doc = "On successful underlying DEX pallets will emit appropriate event."]
					sell {
						asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
							runtime_types::primitives::currency::CurrencyId,
						>,
						amount: ::core::primitive::u128,
						min_receive: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "Buy `amount` of quote asset for `asset_pair` via route found in router."]
					#[doc = "On successful underlying DEX pallets will emit appropriate event."]
					buy {
						asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
							runtime_types::primitives::currency::CurrencyId,
						>,
						amount: ::core::primitive::u128,
						min_receive: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Add liquidity to the underlying pablo pool."]
					#[doc = "Works only for single pool route."]
					add_liquidity {
						asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
							runtime_types::primitives::currency::CurrencyId,
						>,
						base_amount: ::core::primitive::u128,
						quote_amount: ::core::primitive::u128,
						min_mint_amount: ::core::primitive::u128,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					#[doc = "Remove liquidity from the underlying pablo pool."]
					#[doc = "Works only for single pool route."]
					remove_liquidity {
						asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
							runtime_types::primitives::currency::CurrencyId,
						>,
						lp_amount: ::core::primitive::u128,
						min_base_amount: ::core::primitive::u128,
						min_quote_amount: ::core::primitive::u128,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Number of hops in route exceeded maximum limit."]
					MaxHopsExceeded,
					#[codec(index = 1)]
					#[doc = "For given asset pair no route found."]
					NoRouteFound,
					#[codec(index = 2)]
					#[doc = "Unexpected node found while route validation."]
					UnexpectedNodeFoundWhileValidation,
					#[codec(index = 3)]
					#[doc = "Can not respect minimum amount requested."]
					CanNotRespectMinAmountRequested,
					#[codec(index = 4)]
					#[doc = "Unsupported operation."]
					UnsupportedOperation,
					#[codec(index = 5)]
					#[doc = "Route with possible loop is not allowed."]
					LoopSuspectedInRouteUpdate,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					RouteAdded {
						x_asset_id: runtime_types::primitives::currency::CurrencyId,
						y_asset_id: runtime_types::primitives::currency::CurrencyId,
						route: ::std::vec::Vec<::core::primitive::u128>,
					},
					#[codec(index = 1)]
					RouteDeleted {
						x_asset_id: runtime_types::primitives::currency::CurrencyId,
						y_asset_id: runtime_types::primitives::currency::CurrencyId,
						route: ::std::vec::Vec<::core::primitive::u128>,
					},
					#[codec(index = 2)]
					RouteUpdated {
						x_asset_id: runtime_types::primitives::currency::CurrencyId,
						y_asset_id: runtime_types::primitives::currency::CurrencyId,
						old_route: ::std::vec::Vec<::core::primitive::u128>,
						updated_route: ::std::vec::Vec<::core::primitive::u128>,
					},
				}
			}
		}
		pub mod pallet_dutch_auction {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Inserts or replaces auction configuration."]
					#[doc = "Already running auctions are not updated."]
					add_configuration {
						configuration_id: ::core::primitive::u128,
						configuration: runtime_types::composable_traits::time::TimeReleaseFunction,
					},
					#[codec(index = 1)]
					#[doc = "sell `order` in auction with `configuration`"]
					#[doc = "some deposit is taken for storing sell order"]
					ask {
						order: runtime_types::composable_traits::defi::Sell<
							runtime_types::primitives::currency::CurrencyId,
							::core::primitive::u128,
						>,
						configuration: runtime_types::composable_traits::time::TimeReleaseFunction,
					},
					#[codec(index = 2)]
					#[doc = "adds take to list, does not execute take immediately"]
					take {
						order_id: ::core::primitive::u128,
						take: runtime_types::composable_traits::defi::Take<::core::primitive::u128>,
					},
					#[codec(index = 3)]
					#[doc = "allows to remove `order_id` from storage"]
					liquidate { order_id: ::core::primitive::u128 },
					#[codec(index = 4)]
					xcm_sell { request: runtime_types::composable_traits::xcm::XcmSellRequest },
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					RequestedOrderDoesNotExists,
					#[codec(index = 1)]
					OrderParametersIsInvalid,
					#[codec(index = 2)]
					TakeParametersIsInvalid,
					#[codec(index = 3)]
					TakeLimitDoesNotSatisfyOrder,
					#[codec(index = 4)]
					OrderNotFound,
					#[codec(index = 5)]
					TakeOrderDidNotHappen,
					#[codec(index = 6)]
					NotEnoughNativeCurrencyToPayForAuction,
					#[codec(index = 7)]
					#[doc = "errors trying to decode and parse XCM input"]
					XcmCannotDecodeRemoteParametersToLocalRepresentations,
					#[codec(index = 8)]
					XcmCannotFindLocalIdentifiersAsDecodedFromRemote,
					#[codec(index = 9)]
					XcmNotFoundConfigurationById,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					OrderAdded {
						order_id: ::core::primitive::u128,
						order: runtime_types::pallet_dutch_auction::types::SellOrder<
							runtime_types::primitives::currency::CurrencyId,
							::core::primitive::u128,
							::subxt::sp_core::crypto::AccountId32,
							runtime_types::pallet_dutch_auction::types::EDContext<
								::core::primitive::u128,
							>,
							runtime_types::composable_traits::time::TimeReleaseFunction,
						>,
					},
					#[codec(index = 1)]
					#[doc = "raised when part or whole order was taken with mentioned balance"]
					OrderTaken { order_id: ::core::primitive::u128, taken: ::core::primitive::u128 },
					#[codec(index = 2)]
					OrderRemoved { order_id: ::core::primitive::u128 },
					#[codec(index = 3)]
					CofigurationAdded {
						configuration_id: ::core::primitive::u128,
						configuration: runtime_types::composable_traits::time::TimeReleaseFunction,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct EDContext<_0> {
					pub added_at: ::core::primitive::u64,
					pub deposit: _0,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct SellOrder<_0, _1, _2, _3, _4> {
					pub from_to: _2,
					pub order: runtime_types::composable_traits::defi::Sell<_0, _1>,
					pub configuration: _4,
					pub context: _3,
					pub total_amount_received: _1,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct TakeOrder<_0, _1> {
					pub from_to: _1,
					pub take: runtime_types::composable_traits::defi::Take<_0>,
				}
			}
		}
		pub mod pallet_governance_registry {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Sets the value of an `asset_id` to the signed account id. Only callable by root."]
					set {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						value: ::subxt::sp_core::crypto::AccountId32,
					},
					#[codec(index = 1)]
					#[doc = "Sets the value of an `asset_id` to root. Only callable by root."]
					grant_root { asset_id: runtime_types::primitives::currency::CurrencyId },
					#[codec(index = 2)]
					#[doc = "Removes mapping of an `asset_id`. Only callable by root."]
					remove { asset_id: runtime_types::primitives::currency::CurrencyId },
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Not found"]
					NoneError,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					Set {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						value: ::subxt::sp_core::crypto::AccountId32,
					},
					#[codec(index = 1)]
					GrantRoot { asset_id: runtime_types::primitives::currency::CurrencyId },
					#[codec(index = 2)]
					Remove { asset_id: runtime_types::primitives::currency::CurrencyId },
				}
			}
		}
		pub mod pallet_ibc {
			use super::runtime_types;
			pub mod errors {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum IbcError {
					#[codec(index = 0)]
					Ics02Client { message: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 1)]
					Ics03Connection { message: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 2)]
					Ics04Channel { message: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 3)]
					Ics20FungibleTokenTransfer { message: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 4)]
					UnknownMessageTypeUrl { message: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 5)]
					MalformedMessageBytes { message: ::std::vec::Vec<::core::primitive::u8> },
				}
			}
			pub mod events {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum IbcEvent {
					#[codec(index = 0)]
					NewBlock {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
					},
					#[codec(index = 1)]
					CreateClient {
						client_id: ::std::vec::Vec<::core::primitive::u8>,
						client_type: ::std::vec::Vec<::core::primitive::u8>,
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
					},
					#[codec(index = 2)]
					UpdateClient {
						client_id: ::std::vec::Vec<::core::primitive::u8>,
						client_type: ::std::vec::Vec<::core::primitive::u8>,
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
					},
					#[codec(index = 3)]
					UpgradeClient {
						client_id: ::std::vec::Vec<::core::primitive::u8>,
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
					},
					#[codec(index = 4)]
					ClientMisbehaviour {
						client_id: ::std::vec::Vec<::core::primitive::u8>,
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
					},
					#[codec(index = 5)]
					OpenInitConnection {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						connection_id:
							::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
					},
					#[codec(index = 6)]
					OpenConfirmConnection {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						connection_id:
							::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
					},
					#[codec(index = 7)]
					OpenTryConnection {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						connection_id:
							::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
					},
					#[codec(index = 8)]
					OpenAckConnection {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						connection_id:
							::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
					},
					#[codec(index = 9)]
					OpenInitChannel {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::std::vec::Vec<::core::primitive::u8>,
						channel_id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
					},
					#[codec(index = 10)]
					OpenConfirmChannel {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::std::vec::Vec<::core::primitive::u8>,
						channel_id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
					},
					#[codec(index = 11)]
					OpenTryChannel {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::std::vec::Vec<::core::primitive::u8>,
						channel_id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
					},
					#[codec(index = 12)]
					OpenAckChannel {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::std::vec::Vec<::core::primitive::u8>,
						channel_id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
					},
					#[codec(index = 13)]
					CloseInitChannel {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::std::vec::Vec<::core::primitive::u8>,
						channel_id: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 14)]
					CloseConfirmChannel {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						channel_id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
					},
					#[codec(index = 15)]
					ReceivePacket {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::std::vec::Vec<::core::primitive::u8>,
						channel_id: ::std::vec::Vec<::core::primitive::u8>,
						dest_port: ::std::vec::Vec<::core::primitive::u8>,
						dest_channel: ::std::vec::Vec<::core::primitive::u8>,
						sequence: ::core::primitive::u64,
					},
					#[codec(index = 16)]
					SendPacket {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::std::vec::Vec<::core::primitive::u8>,
						channel_id: ::std::vec::Vec<::core::primitive::u8>,
						dest_port: ::std::vec::Vec<::core::primitive::u8>,
						dest_channel: ::std::vec::Vec<::core::primitive::u8>,
						sequence: ::core::primitive::u64,
					},
					#[codec(index = 17)]
					AcknowledgePacket {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::std::vec::Vec<::core::primitive::u8>,
						channel_id: ::std::vec::Vec<::core::primitive::u8>,
						sequence: ::core::primitive::u64,
					},
					#[codec(index = 18)]
					WriteAcknowledgement {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::std::vec::Vec<::core::primitive::u8>,
						channel_id: ::std::vec::Vec<::core::primitive::u8>,
						dest_port: ::std::vec::Vec<::core::primitive::u8>,
						dest_channel: ::std::vec::Vec<::core::primitive::u8>,
						sequence: ::core::primitive::u64,
					},
					#[codec(index = 19)]
					TimeoutPacket {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::std::vec::Vec<::core::primitive::u8>,
						channel_id: ::std::vec::Vec<::core::primitive::u8>,
						sequence: ::core::primitive::u64,
					},
					#[codec(index = 20)]
					TimeoutOnClosePacket {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::std::vec::Vec<::core::primitive::u8>,
						channel_id: ::std::vec::Vec<::core::primitive::u8>,
						sequence: ::core::primitive::u64,
					},
					#[codec(index = 21)]
					Empty,
					#[codec(index = 22)]
					ChainError,
					#[codec(index = 23)]
					AppModule,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					deliver { messages: ::std::vec::Vec<runtime_types::pallet_ibc::Any> },
					#[codec(index = 1)]
					create_client { msg: runtime_types::pallet_ibc::Any },
					#[codec(index = 2)]
					initiate_connection { params: runtime_types::pallet_ibc::ConnectionParams },
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Errors inform users that something went wrong."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Error processing ibc messages"]
					ProcessingError,
					#[codec(index = 1)]
					#[doc = "Error decoding some type"]
					DecodingError,
					#[codec(index = 2)]
					#[doc = "Error encoding some type"]
					EncodingError,
					#[codec(index = 3)]
					#[doc = "Error generating trie proof"]
					ProofGenerationError,
					#[codec(index = 4)]
					#[doc = "Client consensus state not found for height"]
					ConsensusStateNotFound,
					#[codec(index = 5)]
					#[doc = "Client state not found"]
					ClientStateNotFound,
					#[codec(index = 6)]
					#[doc = "Error constructing packet"]
					SendPacketError,
					#[codec(index = 7)]
					#[doc = "Other forms of errors"]
					Other,
					#[codec(index = 8)]
					#[doc = "Invalid route"]
					InvalidRoute,
					#[codec(index = 9)]
					#[doc = "Invalid message for extirnsic"]
					InvalidMessageType,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Processed incoming ibc messages"]
					ProcessedIBCMessages,
					#[codec(index = 1)]
					#[doc = "Initiated a new connection"]
					ConnectionInitiated,
					#[codec(index = 2)]
					#[doc = "Raw Ibc events"]
					IbcEvents {
						events: ::std::vec::Vec<runtime_types::pallet_ibc::events::IbcEvent>,
					},
					#[codec(index = 3)]
					#[doc = "Ibc errors"]
					IbcErrors {
						errors: ::std::vec::Vec<runtime_types::pallet_ibc::errors::IbcError>,
					},
				}
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Any {
				pub type_url: ::std::vec::Vec<::core::primitive::u8>,
				pub value: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ConnectionParams {
				pub version: (
					::std::vec::Vec<::core::primitive::u8>,
					::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
				),
				pub client_id: ::std::vec::Vec<::core::primitive::u8>,
				pub counterparty_client_id: ::std::vec::Vec<::core::primitive::u8>,
				pub commitment_prefix: ::std::vec::Vec<::core::primitive::u8>,
				pub delay_period: ::core::primitive::u64,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct IbcConsensusState {
				pub timestamp: ::core::primitive::u64,
				pub commitment_root: ::std::vec::Vec<::core::primitive::u8>,
			}
		}
		pub mod pallet_ibc_ping {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					open_channel { params: runtime_types::ibc_trait::OpenChannelParams },
					#[codec(index = 1)]
					send_ping { params: runtime_types::pallet_ibc_ping::SendPingParams },
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Invalid params passed"]
					InvalidParams,
					#[codec(index = 1)]
					#[doc = "Error opening channel"]
					ChannelInitError,
					#[codec(index = 2)]
					#[doc = "Error registering packet"]
					PacketSendError,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A send packet has been registered"]
					PacketSent,
					#[codec(index = 1)]
					#[doc = "A channel has been opened"]
					ChannelOpened {
						channel_id: ::std::vec::Vec<::core::primitive::u8>,
						port_id: ::std::vec::Vec<::core::primitive::u8>,
					},
				}
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct SendPingParams {
				pub data: ::std::vec::Vec<::core::primitive::u8>,
				pub timeout_height: ::core::primitive::u64,
				pub timeout_timestamp: ::core::primitive::u64,
				pub channel_id: ::std::vec::Vec<::core::primitive::u8>,
				pub dest_port_id: ::std::vec::Vec<::core::primitive::u8>,
				pub dest_channel_id: ::std::vec::Vec<::core::primitive::u8>,
			}
		}
		pub mod pallet_identity {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Identity pallet declaration."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Add a registrar to the system."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be `T::RegistrarOrigin`."]
					#[doc = ""]
					#[doc = "- `account`: the account of the registrar."]
					#[doc = ""]
					#[doc = "Emits `RegistrarAdded` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded)."]
					#[doc = "- One storage mutation (codec `O(R)`)."]
					#[doc = "- One event."]
					#[doc = "# </weight>"]
					add_registrar { account: ::subxt::sp_core::crypto::AccountId32 },
					#[codec(index = 1)]
					#[doc = "Set an account's identity information and reserve the appropriate deposit."]
					#[doc = ""]
					#[doc = "If the account already has identity information, the deposit is taken as part payment"]
					#[doc = "for the new deposit."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `info`: The identity information."]
					#[doc = ""]
					#[doc = "Emits `IdentitySet` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(X + X' + R)`"]
					#[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)"]
					#[doc = "  - where `R` judgements-count (registrar-count-bounded)"]
					#[doc = "- One balance reserve operation."]
					#[doc = "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`)."]
					#[doc = "- One event."]
					#[doc = "# </weight>"]
					set_identity {
						info:
							::std::boxed::Box<runtime_types::pallet_identity::types::IdentityInfo>,
					},
					#[codec(index = 2)]
					#[doc = "Set the sub-accounts of the sender."]
					#[doc = ""]
					#[doc = "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned"]
					#[doc = "and an amount `SubAccountDeposit` will be reserved for each item in `subs`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
					#[doc = "identity."]
					#[doc = ""]
					#[doc = "- `subs`: The identity's (new) sub-accounts."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(P + S)`"]
					#[doc = "  - where `P` old-subs-count (hard- and deposit-bounded)."]
					#[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
					#[doc = "- At most one balance operations."]
					#[doc = "- DB:"]
					#[doc = "  - `P + S` storage mutations (codec complexity `O(1)`)"]
					#[doc = "  - One storage read (codec complexity `O(P)`)."]
					#[doc = "  - One storage write (codec complexity `O(S)`)."]
					#[doc = "  - One storage-exists (`IdentityOf::contains_key`)."]
					#[doc = "# </weight>"]
					set_subs {
						subs: ::std::vec::Vec<(
							::subxt::sp_core::crypto::AccountId32,
							runtime_types::pallet_identity::types::Data,
						)>,
					},
					#[codec(index = 3)]
					#[doc = "Clear an account's identity info and all sub-accounts and return all deposits."]
					#[doc = ""]
					#[doc = "Payment: All reserved balances on the account are returned."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
					#[doc = "identity."]
					#[doc = ""]
					#[doc = "Emits `IdentityCleared` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(R + S + X)`"]
					#[doc = "  - where `R` registrar-count (governance-bounded)."]
					#[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
					#[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)."]
					#[doc = "- One balance-unreserve operation."]
					#[doc = "- `2` storage reads and `S + 2` storage deletions."]
					#[doc = "- One event."]
					#[doc = "# </weight>"]
					clear_identity,
					#[codec(index = 4)]
					#[doc = "Request a judgement from a registrar."]
					#[doc = ""]
					#[doc = "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement"]
					#[doc = "given."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
					#[doc = "registered identity."]
					#[doc = ""]
					#[doc = "- `reg_index`: The index of the registrar whose judgement is requested."]
					#[doc = "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:"]
					#[doc = ""]
					#[doc = "```nocompile"]
					#[doc = "Self::registrars().get(reg_index).unwrap().fee"]
					#[doc = "```"]
					#[doc = ""]
					#[doc = "Emits `JudgementRequested` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(R + X)`."]
					#[doc = "- One balance-reserve operation."]
					#[doc = "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`."]
					#[doc = "- One event."]
					#[doc = "# </weight>"]
					request_judgement {
						#[codec(compact)]
						reg_index: ::core::primitive::u32,
						#[codec(compact)]
						max_fee: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					#[doc = "Cancel a previous request."]
					#[doc = ""]
					#[doc = "Payment: A previously reserved deposit is returned on success."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
					#[doc = "registered identity."]
					#[doc = ""]
					#[doc = "- `reg_index`: The index of the registrar whose judgement is no longer requested."]
					#[doc = ""]
					#[doc = "Emits `JudgementUnrequested` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(R + X)`."]
					#[doc = "- One balance-reserve operation."]
					#[doc = "- One storage mutation `O(R + X)`."]
					#[doc = "- One event"]
					#[doc = "# </weight>"]
					cancel_request { reg_index: ::core::primitive::u32 },
					#[codec(index = 6)]
					#[doc = "Set the fee required for a judgement to be requested from a registrar."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
					#[doc = "of the registrar whose index is `index`."]
					#[doc = ""]
					#[doc = "- `index`: the index of the registrar whose fee is to be set."]
					#[doc = "- `fee`: the new fee."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(R)`."]
					#[doc = "- One storage mutation `O(R)`."]
					#[doc = "- Benchmark: 7.315 + R * 0.329 µs (min squares analysis)"]
					#[doc = "# </weight>"]
					set_fee {
						#[codec(compact)]
						index: ::core::primitive::u32,
						#[codec(compact)]
						fee: ::core::primitive::u128,
					},
					#[codec(index = 7)]
					#[doc = "Change the account associated with a registrar."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
					#[doc = "of the registrar whose index is `index`."]
					#[doc = ""]
					#[doc = "- `index`: the index of the registrar whose fee is to be set."]
					#[doc = "- `new`: the new account ID."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(R)`."]
					#[doc = "- One storage mutation `O(R)`."]
					#[doc = "- Benchmark: 8.823 + R * 0.32 µs (min squares analysis)"]
					#[doc = "# </weight>"]
					set_account_id {
						#[codec(compact)]
						index: ::core::primitive::u32,
						new: ::subxt::sp_core::crypto::AccountId32,
					},
					#[codec(index = 8)]
					#[doc = "Set the field information for a registrar."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
					#[doc = "of the registrar whose index is `index`."]
					#[doc = ""]
					#[doc = "- `index`: the index of the registrar whose fee is to be set."]
					#[doc = "- `fields`: the fields that the registrar concerns themselves with."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(R)`."]
					#[doc = "- One storage mutation `O(R)`."]
					#[doc = "- Benchmark: 7.464 + R * 0.325 µs (min squares analysis)"]
					#[doc = "# </weight>"]
					set_fields {
						#[codec(compact)]
						index: ::core::primitive::u32,
						fields: runtime_types::pallet_identity::types::BitFlags<
							runtime_types::pallet_identity::types::IdentityField,
						>,
					},
					#[codec(index = 9)]
					#[doc = "Provide a judgement for an account's identity."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
					#[doc = "of the registrar whose index is `reg_index`."]
					#[doc = ""]
					#[doc = "- `reg_index`: the index of the registrar whose judgement is being made."]
					#[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
					#[doc = "  with a registered identity."]
					#[doc = "- `judgement`: the judgement of the registrar of index `reg_index` about `target`."]
					#[doc = ""]
					#[doc = "Emits `JudgementGiven` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(R + X)`."]
					#[doc = "- One balance-transfer operation."]
					#[doc = "- Up to one account-lookup operation."]
					#[doc = "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`."]
					#[doc = "- One event."]
					#[doc = "# </weight>"]
					provide_judgement {
						#[codec(compact)]
						reg_index: ::core::primitive::u32,
						target: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						judgement: runtime_types::pallet_identity::types::Judgement<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 10)]
					#[doc = "Remove an account's identity and sub-account information and slash the deposits."]
					#[doc = ""]
					#[doc = "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by"]
					#[doc = "`Slash`. Verification request deposits are not returned; they should be cancelled"]
					#[doc = "manually using `cancel_request`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must match `T::ForceOrigin`."]
					#[doc = ""]
					#[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
					#[doc = "  with a registered identity."]
					#[doc = ""]
					#[doc = "Emits `IdentityKilled` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(R + S + X)`."]
					#[doc = "- One balance-reserve operation."]
					#[doc = "- `S + 2` storage mutations."]
					#[doc = "- One event."]
					#[doc = "# </weight>"]
					kill_identity {
						target: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 11)]
					#[doc = "Add the given account to the sender's subs."]
					#[doc = ""]
					#[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
					#[doc = "to the sender."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
					#[doc = "sub identity of `sub`."]
					add_sub {
						sub: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						data: runtime_types::pallet_identity::types::Data,
					},
					#[codec(index = 12)]
					#[doc = "Alter the associated name of the given sub-account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
					#[doc = "sub identity of `sub`."]
					rename_sub {
						sub: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						data: runtime_types::pallet_identity::types::Data,
					},
					#[codec(index = 13)]
					#[doc = "Remove the given account from the sender's subs."]
					#[doc = ""]
					#[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
					#[doc = "to the sender."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
					#[doc = "sub identity of `sub`."]
					remove_sub {
						sub: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 14)]
					#[doc = "Remove the sender as a sub-account."]
					#[doc = ""]
					#[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
					#[doc = "to the sender (*not* the original depositor)."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
					#[doc = "super-identity."]
					#[doc = ""]
					#[doc = "NOTE: This should not normally be used, but is provided in the case that the non-"]
					#[doc = "controller of an account is maliciously registered as a sub-account."]
					quit_sub,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Too many subs-accounts."]
					TooManySubAccounts,
					#[codec(index = 1)]
					#[doc = "Account isn't found."]
					NotFound,
					#[codec(index = 2)]
					#[doc = "Account isn't named."]
					NotNamed,
					#[codec(index = 3)]
					#[doc = "Empty index."]
					EmptyIndex,
					#[codec(index = 4)]
					#[doc = "Fee is changed."]
					FeeChanged,
					#[codec(index = 5)]
					#[doc = "No identity found."]
					NoIdentity,
					#[codec(index = 6)]
					#[doc = "Sticky judgement."]
					StickyJudgement,
					#[codec(index = 7)]
					#[doc = "Judgement given."]
					JudgementGiven,
					#[codec(index = 8)]
					#[doc = "Invalid judgement."]
					InvalidJudgement,
					#[codec(index = 9)]
					#[doc = "The index is invalid."]
					InvalidIndex,
					#[codec(index = 10)]
					#[doc = "The target is invalid."]
					InvalidTarget,
					#[codec(index = 11)]
					#[doc = "Too many additional fields."]
					TooManyFields,
					#[codec(index = 12)]
					#[doc = "Maximum amount of registrars reached. Cannot add any more."]
					TooManyRegistrars,
					#[codec(index = 13)]
					#[doc = "Account ID is already named."]
					AlreadyClaimed,
					#[codec(index = 14)]
					#[doc = "Sender is not a sub-account."]
					NotSub,
					#[codec(index = 15)]
					#[doc = "Sub-account isn't owned by sender."]
					NotOwned,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A name was set or reset (which will remove all judgements)."]
					IdentitySet { who: ::subxt::sp_core::crypto::AccountId32 },
					#[codec(index = 1)]
					#[doc = "A name was cleared, and the given balance returned."]
					IdentityCleared {
						who: ::subxt::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "A name was removed and the given balance slashed."]
					IdentityKilled {
						who: ::subxt::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "A judgement was asked from a registrar."]
					JudgementRequested {
						who: ::subxt::sp_core::crypto::AccountId32,
						registrar_index: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					#[doc = "A judgement request was retracted."]
					JudgementUnrequested {
						who: ::subxt::sp_core::crypto::AccountId32,
						registrar_index: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					#[doc = "A judgement was given by a registrar."]
					JudgementGiven {
						target: ::subxt::sp_core::crypto::AccountId32,
						registrar_index: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					#[doc = "A registrar was added."]
					RegistrarAdded { registrar_index: ::core::primitive::u32 },
					#[codec(index = 7)]
					#[doc = "A sub-identity was added to an identity and the deposit paid."]
					SubIdentityAdded {
						sub: ::subxt::sp_core::crypto::AccountId32,
						main: ::subxt::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					#[doc = "A sub-identity was removed from an identity and the deposit freed."]
					SubIdentityRemoved {
						sub: ::subxt::sp_core::crypto::AccountId32,
						main: ::subxt::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					#[doc = "A sub-identity was cleared, and the given deposit repatriated from the"]
					#[doc = "main identity account to the sub-identity account."]
					SubIdentityRevoked {
						sub: ::subxt::sp_core::crypto::AccountId32,
						main: ::subxt::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: codec :: CompactAs,
					:: subxt :: codec :: Decode,
					:: subxt :: codec :: Encode,
					Debug,
				)]
				pub struct BitFlags<_0>(
					pub ::core::primitive::u64,
					#[codec(skip)] pub ::core::marker::PhantomData<_0>,
				);
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum Data {
					#[codec(index = 0)]
					None,
					#[codec(index = 1)]
					Raw0([::core::primitive::u8; 0usize]),
					#[codec(index = 2)]
					Raw1([::core::primitive::u8; 1usize]),
					#[codec(index = 3)]
					Raw2([::core::primitive::u8; 2usize]),
					#[codec(index = 4)]
					Raw3([::core::primitive::u8; 3usize]),
					#[codec(index = 5)]
					Raw4([::core::primitive::u8; 4usize]),
					#[codec(index = 6)]
					Raw5([::core::primitive::u8; 5usize]),
					#[codec(index = 7)]
					Raw6([::core::primitive::u8; 6usize]),
					#[codec(index = 8)]
					Raw7([::core::primitive::u8; 7usize]),
					#[codec(index = 9)]
					Raw8([::core::primitive::u8; 8usize]),
					#[codec(index = 10)]
					Raw9([::core::primitive::u8; 9usize]),
					#[codec(index = 11)]
					Raw10([::core::primitive::u8; 10usize]),
					#[codec(index = 12)]
					Raw11([::core::primitive::u8; 11usize]),
					#[codec(index = 13)]
					Raw12([::core::primitive::u8; 12usize]),
					#[codec(index = 14)]
					Raw13([::core::primitive::u8; 13usize]),
					#[codec(index = 15)]
					Raw14([::core::primitive::u8; 14usize]),
					#[codec(index = 16)]
					Raw15([::core::primitive::u8; 15usize]),
					#[codec(index = 17)]
					Raw16([::core::primitive::u8; 16usize]),
					#[codec(index = 18)]
					Raw17([::core::primitive::u8; 17usize]),
					#[codec(index = 19)]
					Raw18([::core::primitive::u8; 18usize]),
					#[codec(index = 20)]
					Raw19([::core::primitive::u8; 19usize]),
					#[codec(index = 21)]
					Raw20([::core::primitive::u8; 20usize]),
					#[codec(index = 22)]
					Raw21([::core::primitive::u8; 21usize]),
					#[codec(index = 23)]
					Raw22([::core::primitive::u8; 22usize]),
					#[codec(index = 24)]
					Raw23([::core::primitive::u8; 23usize]),
					#[codec(index = 25)]
					Raw24([::core::primitive::u8; 24usize]),
					#[codec(index = 26)]
					Raw25([::core::primitive::u8; 25usize]),
					#[codec(index = 27)]
					Raw26([::core::primitive::u8; 26usize]),
					#[codec(index = 28)]
					Raw27([::core::primitive::u8; 27usize]),
					#[codec(index = 29)]
					Raw28([::core::primitive::u8; 28usize]),
					#[codec(index = 30)]
					Raw29([::core::primitive::u8; 29usize]),
					#[codec(index = 31)]
					Raw30([::core::primitive::u8; 30usize]),
					#[codec(index = 32)]
					Raw31([::core::primitive::u8; 31usize]),
					#[codec(index = 33)]
					Raw32([::core::primitive::u8; 32usize]),
					#[codec(index = 34)]
					BlakeTwo256([::core::primitive::u8; 32usize]),
					#[codec(index = 35)]
					Sha256([::core::primitive::u8; 32usize]),
					#[codec(index = 36)]
					Keccak256([::core::primitive::u8; 32usize]),
					#[codec(index = 37)]
					ShaThree256([::core::primitive::u8; 32usize]),
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum IdentityField {
					#[codec(index = 1)]
					Display,
					#[codec(index = 2)]
					Legal,
					#[codec(index = 4)]
					Web,
					#[codec(index = 8)]
					Riot,
					#[codec(index = 16)]
					Email,
					#[codec(index = 32)]
					PgpFingerprint,
					#[codec(index = 64)]
					Image,
					#[codec(index = 128)]
					Twitter,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct IdentityInfo {
					pub additional:
						runtime_types::frame_support::storage::bounded_vec::BoundedVec<(
							runtime_types::pallet_identity::types::Data,
							runtime_types::pallet_identity::types::Data,
						)>,
					pub display: runtime_types::pallet_identity::types::Data,
					pub legal: runtime_types::pallet_identity::types::Data,
					pub web: runtime_types::pallet_identity::types::Data,
					pub riot: runtime_types::pallet_identity::types::Data,
					pub email: runtime_types::pallet_identity::types::Data,
					pub pgp_fingerprint: ::core::option::Option<[::core::primitive::u8; 20usize]>,
					pub image: runtime_types::pallet_identity::types::Data,
					pub twitter: runtime_types::pallet_identity::types::Data,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum Judgement<_0> {
					#[codec(index = 0)]
					Unknown,
					#[codec(index = 1)]
					FeePaid(_0),
					#[codec(index = 2)]
					Reasonable,
					#[codec(index = 3)]
					KnownGood,
					#[codec(index = 4)]
					OutOfDate,
					#[codec(index = 5)]
					LowQuality,
					#[codec(index = 6)]
					Erroneous,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct RegistrarInfo<_0, _1> {
					pub account: _1,
					pub fee: _0,
					pub fields: runtime_types::pallet_identity::types::BitFlags<
						runtime_types::pallet_identity::types::IdentityField,
					>,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct Registration<_0> {
					pub judgements:
						runtime_types::frame_support::storage::bounded_vec::BoundedVec<(
							::core::primitive::u32,
							runtime_types::pallet_identity::types::Judgement<_0>,
						)>,
					pub deposit: _0,
					pub info: runtime_types::pallet_identity::types::IdentityInfo,
				}
			}
		}
		pub mod pallet_indices {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Assign an previously unassigned index."]
					#[doc = ""]
					#[doc = "Payment: `Deposit` is reserved from the sender account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `index`: the index to be claimed. This must not be in use."]
					#[doc = ""]
					#[doc = "Emits `IndexAssigned` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(1)`."]
					#[doc = "- One storage mutation (codec `O(1)`)."]
					#[doc = "- One reserve operation."]
					#[doc = "- One event."]
					#[doc = "-------------------"]
					#[doc = "- DB Weight: 1 Read/Write (Accounts)"]
					#[doc = "# </weight>"]
					claim { index: ::core::primitive::u32 },
					#[codec(index = 1)]
					#[doc = "Assign an index already owned by the sender to another account. The balance reservation"]
					#[doc = "is effectively transferred to the new account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `index`: the index to be re-assigned. This must be owned by the sender."]
					#[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
					#[doc = ""]
					#[doc = "Emits `IndexAssigned` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(1)`."]
					#[doc = "- One storage mutation (codec `O(1)`)."]
					#[doc = "- One transfer operation."]
					#[doc = "- One event."]
					#[doc = "-------------------"]
					#[doc = "- DB Weight:"]
					#[doc = "   - Reads: Indices Accounts, System Account (recipient)"]
					#[doc = "   - Writes: Indices Accounts, System Account (recipient)"]
					#[doc = "# </weight>"]
					transfer {
						new: ::subxt::sp_core::crypto::AccountId32,
						index: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Free up an index owned by the sender."]
					#[doc = ""]
					#[doc = "Payment: Any previous deposit placed for the index is unreserved in the sender account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must own the index."]
					#[doc = ""]
					#[doc = "- `index`: the index to be freed. This must be owned by the sender."]
					#[doc = ""]
					#[doc = "Emits `IndexFreed` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(1)`."]
					#[doc = "- One storage mutation (codec `O(1)`)."]
					#[doc = "- One reserve operation."]
					#[doc = "- One event."]
					#[doc = "-------------------"]
					#[doc = "- DB Weight: 1 Read/Write (Accounts)"]
					#[doc = "# </weight>"]
					free { index: ::core::primitive::u32 },
					#[codec(index = 3)]
					#[doc = "Force an index to an account. This doesn't require a deposit. If the index is already"]
					#[doc = "held, then any deposit is reimbursed to its current owner."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Root_."]
					#[doc = ""]
					#[doc = "- `index`: the index to be (re-)assigned."]
					#[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
					#[doc = "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred."]
					#[doc = ""]
					#[doc = "Emits `IndexAssigned` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(1)`."]
					#[doc = "- One storage mutation (codec `O(1)`)."]
					#[doc = "- Up to one reserve operation."]
					#[doc = "- One event."]
					#[doc = "-------------------"]
					#[doc = "- DB Weight:"]
					#[doc = "   - Reads: Indices Accounts, System Account (original owner)"]
					#[doc = "   - Writes: Indices Accounts, System Account (original owner)"]
					#[doc = "# </weight>"]
					force_transfer {
						new: ::subxt::sp_core::crypto::AccountId32,
						index: ::core::primitive::u32,
						freeze: ::core::primitive::bool,
					},
					#[codec(index = 4)]
					#[doc = "Freeze an index so it will always point to the sender account. This consumes the"]
					#[doc = "deposit."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the signing account must have a"]
					#[doc = "non-frozen account `index`."]
					#[doc = ""]
					#[doc = "- `index`: the index to be frozen in place."]
					#[doc = ""]
					#[doc = "Emits `IndexFrozen` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(1)`."]
					#[doc = "- One storage mutation (codec `O(1)`)."]
					#[doc = "- Up to one slash operation."]
					#[doc = "- One event."]
					#[doc = "-------------------"]
					#[doc = "- DB Weight: 1 Read/Write (Accounts)"]
					#[doc = "# </weight>"]
					freeze { index: ::core::primitive::u32 },
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The index was not already assigned."]
					NotAssigned,
					#[codec(index = 1)]
					#[doc = "The index is assigned to another account."]
					NotOwner,
					#[codec(index = 2)]
					#[doc = "The index was not available."]
					InUse,
					#[codec(index = 3)]
					#[doc = "The source and destination accounts are identical."]
					NotTransfer,
					#[codec(index = 4)]
					#[doc = "The index is permanent and may not be freed/changed."]
					Permanent,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A account index was assigned."]
					IndexAssigned {
						who: ::subxt::sp_core::crypto::AccountId32,
						index: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					#[doc = "A account index has been freed up (unassigned)."]
					IndexFreed { index: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "A account index has been frozen to its current account ID."]
					IndexFrozen {
						index: ::core::primitive::u32,
						who: ::subxt::sp_core::crypto::AccountId32,
					},
				}
			}
		}
		pub mod pallet_lending {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Create a new lending market."]
					#[doc = "- `origin` : Sender of this extrinsic. Manager for new market to be created. Can pause"]
					#[doc = "  borrow operations."]
					#[doc = "- `input`   : Borrow & deposits of assets, persentages."]
					#[doc = ""]
					#[doc = "`origin` irreversibly pays `T::OracleMarketCreationStake`."]
					create_market {
						input: runtime_types::composable_traits::lending::CreateInput<
							::core::primitive::u32,
							runtime_types::primitives::currency::CurrencyId,
							::core::primitive::u32,
						>,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 1)]
					#[doc = "owner must be very careful calling this"]
					update_market {
						market_id: runtime_types::pallet_lending::types::MarketIndex,
						input: runtime_types::composable_traits::lending::UpdateInput<
							::core::primitive::u32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 2)]
					#[doc = "Deposit collateral to market."]
					#[doc = "- `origin` : Sender of this extrinsic."]
					#[doc = "- `market` : Market index to which collateral will be deposited."]
					#[doc = "- `amount` : Amount of collateral to be deposited."]
					deposit_collateral {
						market_id: runtime_types::pallet_lending::types::MarketIndex,
						amount: ::core::primitive::u128,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 3)]
					#[doc = "Withdraw collateral from market."]
					#[doc = "- `origin` : Sender of this extrinsic."]
					#[doc = "- `market_id` : Market index from which collateral will be withdraw."]
					#[doc = "- `amount` : Amount of collateral to be withdrawn."]
					withdraw_collateral {
						market_id: runtime_types::pallet_lending::types::MarketIndex,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Borrow asset against deposited collateral."]
					#[doc = "- `origin` : Sender of this extrinsic. (Also the user who wants to borrow from market.)"]
					#[doc = "- `market_id` : Market index from which user wants to borrow."]
					#[doc = "- `amount_to_borrow` : Amount which user wants to borrow."]
					borrow {
						market_id: runtime_types::pallet_lending::types::MarketIndex,
						amount_to_borrow: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					#[doc = "Repay part or all of the borrow in the given market."]
					#[doc = ""]
					#[doc = "# Parameters"]
					#[doc = ""]
					#[doc = "- `origin` : Sender of this extrinsic. (Also the user who repays beneficiary's borrow.)"]
					#[doc = "- `market_id` : [`MarketIndex`] of the market being repaid."]
					#[doc = "- `beneficiary` : [`AccountId`] of the account who is in debt to (has borrowed assets"]
					#[doc = "  from) the market. This can be same or different from the `origin`, allowing one"]
					#[doc = "  account to pay off another's debts."]
					#[doc = "- `amount`: The amount to repay. See [`RepayStrategy`] for more information."]
					repay_borrow {
						market_id: runtime_types::pallet_lending::types::MarketIndex,
						beneficiary: ::subxt::sp_core::crypto::AccountId32,
						amount: runtime_types::composable_traits::lending::RepayStrategy<
							::core::primitive::u128,
						>,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 6)]
					#[doc = "Check if borrows for the `borrowers` accounts are required to be liquidated, initiate"]
					#[doc = "liquidation."]
					#[doc = "- `origin` : Sender of this extrinsic."]
					#[doc = "- `market_id` : Market index from which `borrower` has taken borrow."]
					#[doc = "- `borrowers` : Vector of borrowers accounts' ids."]
					liquidate {
						market_id: runtime_types::pallet_lending::types::MarketIndex,
						borrowers: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
							::subxt::sp_core::crypto::AccountId32,
						>,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					Overflow,
					#[codec(index = 1)]
					Underflow,
					#[codec(index = 2)]
					#[doc = "vault provided does not exist"]
					VaultNotFound,
					#[codec(index = 3)]
					#[doc = "Only assets that have a known price are supported."]
					BorrowAssetNotSupportedByOracle,
					#[codec(index = 4)]
					#[doc = "Only assets that have a known price are supported."]
					CollateralAssetNotSupportedByOracle,
					#[codec(index = 5)]
					AssetPriceNotFound,
					#[codec(index = 6)]
					#[doc = "The market could not be found"]
					MarketDoesNotExist,
					#[codec(index = 7)]
					CollateralDepositFailed,
					#[codec(index = 8)]
					MarketCollateralWasNotDepositedByAccount,
					#[codec(index = 9)]
					#[doc = "The collateral factor for a market must be more than one."]
					CollateralFactorMustBeMoreThanOne,
					#[codec(index = 10)]
					#[doc = "Can't allow amount 0 as collateral."]
					CannotDepositZeroCollateral,
					#[codec(index = 11)]
					MarketAndAccountPairNotFound,
					#[codec(index = 12)]
					MarketIsClosing,
					#[codec(index = 13)]
					InvalidTimestampOnBorrowRequest,
					#[codec(index = 14)]
					NotEnoughBorrowAsset,
					#[codec(index = 15)]
					#[doc = "Attempted to withdraw more collateral than the account has in the market."]
					NotEnoughCollateralToWithdraw,
					#[codec(index = 16)]
					#[doc = "The market would go under collateralized if the requested amount of collateral was"]
					#[doc = "withdrawn."]
					WouldGoUnderCollateralized,
					#[codec(index = 17)]
					NotEnoughCollateralToBorrow,
					#[codec(index = 18)]
					TransferFailed,
					#[codec(index = 19)]
					CannotWithdrawFromProvidedBorrowAccount,
					#[codec(index = 20)]
					BorrowRateDoesNotExist,
					#[codec(index = 21)]
					BorrowIndexDoesNotExist,
					#[codec(index = 22)]
					#[doc = "Borrow and repay in the same block (flashloans) are not allowed."]
					BorrowAndRepayInSameBlockIsNotSupported,
					#[codec(index = 23)]
					#[doc = "Repaying more than once in the same block is not allowed."]
					CannotRepayMoreThanOnceInSameBlock,
					#[codec(index = 24)]
					BorrowDoesNotExist,
					#[codec(index = 25)]
					RepayAmountMustBeGreaterThanZero,
					#[codec(index = 26)]
					CannotRepayMoreThanBorrowAmount,
					#[codec(index = 27)]
					ExceedLendingCount,
					#[codec(index = 28)]
					LiquidationFailed,
					#[codec(index = 29)]
					BorrowerDataCalculationFailed,
					#[codec(index = 30)]
					#[doc = "Attempted to update a market owned by someone else."]
					Unauthorized,
					#[codec(index = 31)]
					NotEnoughRent,
					#[codec(index = 32)]
					#[doc = "borrow assets should have enough value as per oracle"]
					PriceOfInitialBorrowVaultShouldBeGreaterThanZero,
					#[codec(index = 33)]
					#[doc = "A market with a borrow balance of `0` was attempted to be repaid."]
					CannotRepayZeroBalance,
					#[codec(index = 34)]
					#[doc = "Cannot repay the total amount of debt when partially repaying."]
					CannotRepayMoreThanTotalDebt,
					#[codec(index = 35)]
					BorrowRentDoesNotExist,
					#[codec(index = 36)]
					MaxLiquidationBatchSizeExceeded,
					#[codec(index = 37)]
					PriceTooOld,
					#[codec(index = 38)]
					CannotIncreaseCollateralFactorOfOpenMarket,
					#[codec(index = 39)]
					CannotBorrowFromMarketWithUnbalancedVault,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Event emitted when new lending market is created."]
					MarketCreated {
						market_id: runtime_types::pallet_lending::types::MarketIndex,
						vault_id: ::core::primitive::u64,
						manager: ::subxt::sp_core::crypto::AccountId32,
						currency_pair: runtime_types::composable_traits::defi::CurrencyPair<
							runtime_types::primitives::currency::CurrencyId,
						>,
					},
					#[codec(index = 1)]
					MarketUpdated {
						market_id: runtime_types::pallet_lending::types::MarketIndex,
						input: runtime_types::composable_traits::lending::UpdateInput<
							::core::primitive::u32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 2)]
					#[doc = "Event emitted when collateral is deposited."]
					CollateralDeposited {
						sender: ::subxt::sp_core::crypto::AccountId32,
						market_id: runtime_types::pallet_lending::types::MarketIndex,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "Event emitted when collateral is withdrawed."]
					CollateralWithdrawn {
						sender: ::subxt::sp_core::crypto::AccountId32,
						market_id: runtime_types::pallet_lending::types::MarketIndex,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Event emitted when user borrows from given market."]
					Borrowed {
						sender: ::subxt::sp_core::crypto::AccountId32,
						market_id: runtime_types::pallet_lending::types::MarketIndex,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					#[doc = "Event emitted when user repays borrow of beneficiary in given market."]
					BorrowRepaid {
						sender: ::subxt::sp_core::crypto::AccountId32,
						market_id: runtime_types::pallet_lending::types::MarketIndex,
						beneficiary: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					#[doc = "Event emitted when a liquidation is initiated for a loan."]
					LiquidationInitiated {
						market_id: runtime_types::pallet_lending::types::MarketIndex,
						borrowers: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
					},
					#[codec(index = 7)]
					#[doc = "Event emitted to warn that loan may go under collaterlized soon."]
					MayGoUnderCollateralizedSoon {
						market_id: runtime_types::pallet_lending::types::MarketIndex,
						account: ::subxt::sp_core::crypto::AccountId32,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: codec :: CompactAs,
					:: subxt :: codec :: Decode,
					:: subxt :: codec :: Encode,
					Debug,
				)]
				pub struct MarketIndex(pub ::core::primitive::u32);
			}
		}
		pub mod pallet_liquidations {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					# [codec (index = 0)] add_liquidation_strategy { configuraiton : runtime_types :: pallet_liquidations :: pallet :: LiquidationStrategyConfiguration , } , # [codec (index = 1)] sell { order : runtime_types :: composable_traits :: defi :: Sell < runtime_types :: primitives :: currency :: CurrencyId , :: core :: primitive :: u128 > , configuration : :: std :: vec :: Vec < :: core :: primitive :: u32 > , } , }
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					NoLiquidationEngineFound,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					PositionWasSentToLiquidation,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum LiquidationStrategyConfiguration {
					#[codec(index = 0)]
					DutchAuction(runtime_types::composable_traits::time::TimeReleaseFunction),
					#[codec(index = 1)]
					Pablo { slippage: runtime_types::sp_arithmetic::per_things::Perquintill },
					#[codec(index = 2)]
					Xcm(runtime_types::composable_traits::xcm::XcmSellRequestTransactConfiguration),
				}
			}
		}
		pub mod pallet_membership {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Add a member `who` to the set."]
					#[doc = ""]
					#[doc = "May only be called from `T::AddOrigin`."]
					add_member { who: ::subxt::sp_core::crypto::AccountId32 },
					#[codec(index = 1)]
					#[doc = "Remove a member `who` from the set."]
					#[doc = ""]
					#[doc = "May only be called from `T::RemoveOrigin`."]
					remove_member { who: ::subxt::sp_core::crypto::AccountId32 },
					#[codec(index = 2)]
					#[doc = "Swap out one member `remove` for another `add`."]
					#[doc = ""]
					#[doc = "May only be called from `T::SwapOrigin`."]
					#[doc = ""]
					#[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
					swap_member {
						remove: ::subxt::sp_core::crypto::AccountId32,
						add: ::subxt::sp_core::crypto::AccountId32,
					},
					#[codec(index = 3)]
					#[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
					#[doc = "pass `members` pre-sorted."]
					#[doc = ""]
					#[doc = "May only be called from `T::ResetOrigin`."]
					reset_members {
						members: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
					},
					#[codec(index = 4)]
					#[doc = "Swap out the sending member for some other key `new`."]
					#[doc = ""]
					#[doc = "May only be called from `Signed` origin of a current member."]
					#[doc = ""]
					#[doc = "Prime membership is passed from the origin account to `new`, if extant."]
					change_key { new: ::subxt::sp_core::crypto::AccountId32 },
					#[codec(index = 5)]
					#[doc = "Set the prime member. Must be a current member."]
					#[doc = ""]
					#[doc = "May only be called from `T::PrimeOrigin`."]
					set_prime { who: ::subxt::sp_core::crypto::AccountId32 },
					#[codec(index = 6)]
					#[doc = "Remove the prime member if it exists."]
					#[doc = ""]
					#[doc = "May only be called from `T::PrimeOrigin`."]
					clear_prime,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Already a member."]
					AlreadyMember,
					#[codec(index = 1)]
					#[doc = "Not a member."]
					NotMember,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "The given member was added; see the transaction for who."]
					MemberAdded,
					#[codec(index = 1)]
					#[doc = "The given member was removed; see the transaction for who."]
					MemberRemoved,
					#[codec(index = 2)]
					#[doc = "Two members were swapped; see the transaction for who."]
					MembersSwapped,
					#[codec(index = 3)]
					#[doc = "The membership was reset; see the transaction for who the new set is."]
					MembersReset,
					#[codec(index = 4)]
					#[doc = "One of the members' keys changed."]
					KeyChanged,
					#[codec(index = 5)]
					#[doc = "Phantom member, never used."]
					Dummy,
				}
			}
		}
		pub mod pallet_mosaic {
			use super::runtime_types;
			pub mod decay {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum BudgetPenaltyDecayer<_0, _1> {
					#[codec(index = 0)]
					Linear(runtime_types::pallet_mosaic::decay::LinearDecay<_0, _1>),
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct LinearDecay<_0, _1> {
					pub factor: _0,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct AmmSwapInfo<_0, _1> {
					pub destination_token_out_address:
						runtime_types::composable_support::types::EthereumAddress,
					pub destination_amm: runtime_types::pallet_mosaic::pallet::RemoteAmm<_0, _1>,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct AssetInfo<_0, _1, _2> {
					pub last_mint_block: _0,
					pub budget: _1,
					pub penalty: _1,
					pub penalty_decayer: _2,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Sets the current Relayer configuration."]
					#[doc = ""]
					#[doc = "This is enacted immediately and invalidates inflight/ incoming transactions from the"]
					#[doc = "previous Relayer. However, existing budgets remain in place."]
					#[doc = ""]
					#[doc = "This can only be called by the [`ControlOrigin`]."]
					#[doc = ""]
					#[doc = "[controlorigin]: https://dali.devnets.composablefinance.ninja/doc/pallet_mosaic/pallet/trait.Config.html#associatedtype.ControlOrigin"]
					set_relayer { relayer: ::subxt::sp_core::crypto::AccountId32 },
					#[codec(index = 1)]
					#[doc = "Rotates the Relayer Account"]
					#[doc = ""]
					#[doc = "# Restrictions"]
					#[doc = " - Only callable by the current Relayer."]
					#[doc = " - The Time To Live (TTL) must be greater than the [`MinimumTTL`](Config::MinimumTTL)"]
					rotate_relayer {
						new: ::subxt::sp_core::crypto::AccountId32,
						validated_ttl: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Sets supported networks and maximum transaction sizes accepted by the Relayer."]
					#[doc = ""]
					#[doc = "Only callable by the current Relayer"]
					set_network {
						network_id: ::core::primitive::u32,
						network_info: runtime_types::pallet_mosaic::pallet::NetworkInfo<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 3)]
					#[doc = "Sets the relayer budget for _incoming_ transactions for specific assets. Does not reset"]
					#[doc = "the current `penalty`."]
					#[doc = ""]
					#[doc = "# Restrictions"]
					#[doc = "- This can only be called by the [`ControlOrigin`](Config::ControlOrigin)"]
					set_budget {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
						decay: runtime_types::pallet_mosaic::decay::BudgetPenaltyDecayer<
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 4)]
					#[doc = "Creates an outgoing transaction request, locking the funds locally until picked up by"]
					#[doc = "the Relayer."]
					#[doc = ""]
					#[doc = "# Restrictions"]
					#[doc = "- Network must be supported."]
					#[doc = "- AssetId must be supported."]
					#[doc = "- Amount must be lower than the networks `max_transfer_size`."]
					#[doc = "- Origin must have sufficient funds."]
					#[doc = "- Transfers near Balance::max may result in overflows, which are caught and returned as"]
					#[doc = "  an error."]
					transfer_to {
						network_id: ::core::primitive::u32,
						asset_id: runtime_types::primitives::currency::CurrencyId,
						address: runtime_types::composable_support::types::EthereumAddress,
						amount: ::core::primitive::u128,
						swap_to_native: ::core::primitive::bool,
						source_user_account: ::subxt::sp_core::crypto::AccountId32,
						amm_swap_info: ::core::option::Option<
							runtime_types::pallet_mosaic::pallet::AmmSwapInfo<
								::core::primitive::u32,
								::core::primitive::u128,
							>,
						>,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					#[doc = "This is called by the Relayer to confirm that it will relay a transaction."]
					#[doc = ""]
					#[doc = "Once this is called, the sender will be unable to reclaim their tokens."]
					#[doc = ""]
					#[doc = "If all the funds are not removed, the reclaim period will not be reset. If the"]
					#[doc = "reclaim period is not reset, the Relayer will still attempt to pick up the"]
					#[doc = "remainder of the transaction."]
					#[doc = ""]
					#[doc = "# Restrictions"]
					#[doc = "- Only callable by the current Relayer"]
					#[doc = "- Outgoing transaction must exist for the user"]
					#[doc = "- Amount must be equal or lower than what the user has locked"]
					#[doc = ""]
					#[doc = "# Note"]
					#[doc = "- Reclaim period is not reset if not all the funds are moved; menaing that the clock"]
					#[doc = "  remains ticking for the relayer to pick up the rest of the transaction."]
					accept_transfer {
						from: ::subxt::sp_core::crypto::AccountId32,
						network_id: ::core::primitive::u32,
						remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					#[doc = "Claims user funds from the `OutgoingTransactions`, in case that the Relayer has not"]
					#[doc = "picked them up."]
					claim_stale_to {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						to: ::subxt::sp_core::crypto::AccountId32,
					},
					#[codec(index = 7)]
					#[doc = "Mints new tokens into the pallet's wallet, ready for the user to be picked up after"]
					#[doc = "`lock_time` blocks have expired."]
					#[doc = ""]
					#[doc = "Only callable by the current Relayer"]
					timelocked_mint {
						network_id: ::core::primitive::u32,
						remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
						to: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
						lock_time: ::core::primitive::u32,
						id: ::subxt::sp_core::H256,
					},
					#[codec(index = 8)]
					#[doc = "Sets the time lock, in blocks, on new transfers"]
					#[doc = ""]
					#[doc = "This can only be called by the [`ControlOrigin`](Config::ControlOrigin)"]
					set_timelock_duration { period: ::core::primitive::u32 },
					#[codec(index = 9)]
					#[doc = "Burns funds waiting in incoming_transactions that are still unclaimed."]
					#[doc = ""]
					#[doc = "May be used by the Relayer in case of finality issues on the other side of the bridge."]
					rescind_timelocked_mint {
						network_id: ::core::primitive::u32,
						remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
						account: ::subxt::sp_core::crypto::AccountId32,
						untrusted_amount: ::core::primitive::u128,
					},
					#[codec(index = 10)]
					#[doc = "Collects funds deposited by the Relayer into the owner's account"]
					claim_to {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						to: ::subxt::sp_core::crypto::AccountId32,
					},
					#[codec(index = 11)]
					#[doc = "Update a network asset mapping."]
					#[doc = ""]
					#[doc = "This can only be called by the [`ControlOrigin`](Config::ControlOrigin)"]
					#[doc = ""]
					#[doc = "Possibly emits one of:"]
					#[doc = "- `AssetMappingCreated`"]
					#[doc = "- `AssetMappingDeleted`"]
					#[doc = "- `AssetMappingUpdated`"]
					update_asset_mapping {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						network_id: ::core::primitive::u32,
						remote_asset_id: ::core::option::Option<
							runtime_types::common::types::MosaicRemoteAssetId,
						>,
					},
					#[codec(index = 12)]
					#[doc = "Adds a remote AMM for a specific Network"]
					add_remote_amm_id {
						network_id: ::core::primitive::u32,
						amm_id: ::core::primitive::u128,
					},
					#[codec(index = 13)]
					#[doc = "Removes a remote AMM for a specific Network"]
					remove_remote_amm_id {
						network_id: ::core::primitive::u32,
						amm_id: ::core::primitive::u128,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					RelayerNotSet,
					#[codec(index = 1)]
					BadTTL,
					#[codec(index = 2)]
					BadTimelockPeriod,
					#[codec(index = 3)]
					UnsupportedAsset,
					#[codec(index = 4)]
					NetworkDisabled,
					#[codec(index = 5)]
					UnsupportedNetwork,
					#[codec(index = 6)]
					Overflow,
					#[codec(index = 7)]
					NoStaleTransactions,
					#[codec(index = 8)]
					InsufficientBudget,
					#[codec(index = 9)]
					ExceedsMaxTransferSize,
					#[codec(index = 10)]
					BelowMinTransferSize,
					#[codec(index = 11)]
					NoClaimableTx,
					#[codec(index = 12)]
					TxStillLocked,
					#[codec(index = 13)]
					NoOutgoingTx,
					#[codec(index = 14)]
					AmountMismatch,
					#[codec(index = 15)]
					AssetNotMapped,
					#[codec(index = 16)]
					RemoteAmmIdNotFound,
					#[codec(index = 17)]
					RemoteAmmIdAlreadyExists,
					#[codec(index = 18)]
					DestinationAmmIdNotWhitelisted,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "The account of the relayer has been set."]
					RelayerSet { relayer: ::subxt::sp_core::crypto::AccountId32 },
					#[codec(index = 1)]
					#[doc = "The relayer has been rotated to `account_id`."]
					RelayerRotated {
						ttl: ::core::primitive::u32,
						account_id: ::subxt::sp_core::crypto::AccountId32,
					},
					#[codec(index = 2)]
					BudgetUpdated {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
						decay: runtime_types::pallet_mosaic::decay::BudgetPenaltyDecayer<
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 3)]
					#[doc = "The `NetworkInfos` `network_info` was updated for `network_id`."]
					NetworksUpdated {
						network_id: ::core::primitive::u32,
						network_info: runtime_types::pallet_mosaic::pallet::NetworkInfo<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 4)]
					#[doc = "An outgoing tx is created, and locked in the outgoing tx pool."]
					TransferOut {
						id: ::subxt::sp_core::H256,
						to: runtime_types::composable_support::types::EthereumAddress,
						asset_id: runtime_types::primitives::currency::CurrencyId,
						network_id: ::core::primitive::u32,
						remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
						amount: ::core::primitive::u128,
						swap_to_native: ::core::primitive::bool,
						source_user_account: ::subxt::sp_core::crypto::AccountId32,
						amm_swap_info: ::core::option::Option<
							runtime_types::pallet_mosaic::pallet::AmmSwapInfo<
								::core::primitive::u32,
								::core::primitive::u128,
							>,
						>,
					},
					#[codec(index = 5)]
					#[doc = "User claimed outgoing tx that was not (yet) picked up by the relayer"]
					StaleTxClaimed {
						to: ::subxt::sp_core::crypto::AccountId32,
						by: ::subxt::sp_core::crypto::AccountId32,
						asset_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					#[doc = "An incoming tx is created and waiting for the user to claim."]
					TransferInto {
						id: ::subxt::sp_core::H256,
						to: ::subxt::sp_core::crypto::AccountId32,
						network_id: ::core::primitive::u32,
						remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
						asset_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 7)]
					#[doc = "When we have finality issues occur on the Ethereum chain,"]
					#[doc = "we burn the locked `IncomingTransaction` for which we know that it is invalid."]
					TransferIntoRescined {
						account: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
						asset_id: runtime_types::primitives::currency::CurrencyId,
					},
					#[codec(index = 8)]
					#[doc = "The relayer partially accepted the user's `OutgoingTransaction`."]
					PartialTransferAccepted {
						from: ::subxt::sp_core::crypto::AccountId32,
						asset_id: runtime_types::primitives::currency::CurrencyId,
						network_id: ::core::primitive::u32,
						remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					#[doc = "The relayer accepted the user's `OutgoingTransaction`."]
					TransferAccepted {
						from: ::subxt::sp_core::crypto::AccountId32,
						asset_id: runtime_types::primitives::currency::CurrencyId,
						network_id: ::core::primitive::u32,
						remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 10)]
					#[doc = "The user claims his `IncomingTransaction` and unlocks the locked amount."]
					TransferClaimed {
						by: ::subxt::sp_core::crypto::AccountId32,
						to: ::subxt::sp_core::crypto::AccountId32,
						asset_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 11)]
					#[doc = "An asset mapping has been created."]
					AssetMappingCreated {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						network_id: ::core::primitive::u32,
						remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
					},
					#[codec(index = 12)]
					#[doc = "An existing asset mapping has been updated."]
					AssetMappingUpdated {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						network_id: ::core::primitive::u32,
						remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
					},
					#[codec(index = 13)]
					#[doc = "An existing asset mapping has been deleted."]
					AssetMappingDeleted {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						network_id: ::core::primitive::u32,
						remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct NetworkInfo<_0> {
					pub enabled: ::core::primitive::bool,
					pub min_transfer_size: _0,
					pub max_transfer_size: _0,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct RemoteAmm<_0, _1> {
					pub network_id: _0,
					pub amm_id: _1,
				}
			}
			pub mod relayer {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct Next<_0, _1> {
					pub ttl: _1,
					pub account: _0,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct RelayerConfig<_0, _1> {
					pub current: _0,
					pub next:
						::core::option::Option<runtime_types::pallet_mosaic::relayer::Next<_0, _1>>,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct StaleRelayer<_0, _1> {
					pub relayer: runtime_types::pallet_mosaic::relayer::RelayerConfig<_0, _1>,
				}
			}
		}
		pub mod pallet_multisig {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
					#[doc = "multi-signature, but do not participate in the approval process."]
					#[doc = "- `call`: The call to be executed."]
					#[doc = ""]
					#[doc = "Result is equivalent to the dispatched result."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
					#[doc = "-------------------------------"]
					#[doc = "- DB Weight: None"]
					#[doc = "- Plus Call Weight"]
					#[doc = "# </weight>"]
					as_multi_threshold_1 {
						other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
						call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
					},
					#[codec(index = 1)]
					#[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
					#[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
					#[doc = ""]
					#[doc = "If there are enough, then dispatch the call."]
					#[doc = ""]
					#[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
					#[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
					#[doc = "is cancelled."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
					#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
					#[doc = "dispatch. May not be empty."]
					#[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
					#[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
					#[doc = "transaction index) of the first approval transaction."]
					#[doc = "- `call`: The call to be executed."]
					#[doc = ""]
					#[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
					#[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
					#[doc = ""]
					#[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
					#[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
					#[doc = "may be found in the deposited `MultisigExecuted` event."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(S + Z + Call)`."]
					#[doc = "- Up to one balance-reserve or unreserve operation."]
					#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
					#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
					#[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
					#[doc = "- One encode & hash, both of complexity `O(S)`."]
					#[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
					#[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
					#[doc = "- One event."]
					#[doc = "- The weight of the `call`."]
					#[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
					#[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
					#[doc = "-------------------------------"]
					#[doc = "- DB Weight:"]
					#[doc = "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
					#[doc = "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
					#[doc = "- Plus Call Weight"]
					#[doc = "# </weight>"]
					as_multi {
						threshold: ::core::primitive::u16,
						other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
						maybe_timepoint: ::core::option::Option<
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						>,
						call: ::subxt::WrapperKeepOpaque<runtime_types::dali_runtime::Call>,
						store_call: ::core::primitive::bool,
						max_weight: ::core::primitive::u64,
					},
					#[codec(index = 2)]
					#[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
					#[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
					#[doc = ""]
					#[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
					#[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
					#[doc = "is cancelled."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
					#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
					#[doc = "dispatch. May not be empty."]
					#[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
					#[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
					#[doc = "transaction index) of the first approval transaction."]
					#[doc = "- `call_hash`: The hash of the call to be executed."]
					#[doc = ""]
					#[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(S)`."]
					#[doc = "- Up to one balance-reserve or unreserve operation."]
					#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
					#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
					#[doc = "- One encode & hash, both of complexity `O(S)`."]
					#[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
					#[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
					#[doc = "- One event."]
					#[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
					#[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
					#[doc = "----------------------------------"]
					#[doc = "- DB Weight:"]
					#[doc = "    - Read: Multisig Storage, [Caller Account]"]
					#[doc = "    - Write: Multisig Storage, [Caller Account]"]
					#[doc = "# </weight>"]
					approve_as_multi {
						threshold: ::core::primitive::u16,
						other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
						maybe_timepoint: ::core::option::Option<
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						>,
						call_hash: [::core::primitive::u8; 32usize],
						max_weight: ::core::primitive::u64,
					},
					#[codec(index = 3)]
					#[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
					#[doc = "for this operation will be unreserved on success."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
					#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
					#[doc = "dispatch. May not be empty."]
					#[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
					#[doc = "transaction for this dispatch."]
					#[doc = "- `call_hash`: The hash of the call to be executed."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(S)`."]
					#[doc = "- Up to one balance-reserve or unreserve operation."]
					#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
					#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
					#[doc = "- One encode & hash, both of complexity `O(S)`."]
					#[doc = "- One event."]
					#[doc = "- I/O: 1 read `O(S)`, one remove."]
					#[doc = "- Storage: removes one item."]
					#[doc = "----------------------------------"]
					#[doc = "- DB Weight:"]
					#[doc = "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls"]
					#[doc = "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls"]
					#[doc = "# </weight>"]
					cancel_as_multi {
						threshold: ::core::primitive::u16,
						other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						call_hash: [::core::primitive::u8; 32usize],
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Threshold must be 2 or greater."]
					MinimumThreshold,
					#[codec(index = 1)]
					#[doc = "Call is already approved by this signatory."]
					AlreadyApproved,
					#[codec(index = 2)]
					#[doc = "Call doesn't need any (more) approvals."]
					NoApprovalsNeeded,
					#[codec(index = 3)]
					#[doc = "There are too few signatories in the list."]
					TooFewSignatories,
					#[codec(index = 4)]
					#[doc = "There are too many signatories in the list."]
					TooManySignatories,
					#[codec(index = 5)]
					#[doc = "The signatories were provided out of order; they should be ordered."]
					SignatoriesOutOfOrder,
					#[codec(index = 6)]
					#[doc = "The sender was contained in the other signatories; it shouldn't be."]
					SenderInSignatories,
					#[codec(index = 7)]
					#[doc = "Multisig operation not found when attempting to cancel."]
					NotFound,
					#[codec(index = 8)]
					#[doc = "Only the account that originally created the multisig is able to cancel it."]
					NotOwner,
					#[codec(index = 9)]
					#[doc = "No timepoint was given, yet the multisig operation is already underway."]
					NoTimepoint,
					#[codec(index = 10)]
					#[doc = "A different timepoint was given to the multisig operation that is underway."]
					WrongTimepoint,
					#[codec(index = 11)]
					#[doc = "A timepoint was given, yet no multisig operation is underway."]
					UnexpectedTimepoint,
					#[codec(index = 12)]
					#[doc = "The maximum weight information provided was too low."]
					MaxWeightTooLow,
					#[codec(index = 13)]
					#[doc = "The data to be stored is already stored."]
					AlreadyStored,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A new multisig operation has begun."]
					NewMultisig {
						approving: ::subxt::sp_core::crypto::AccountId32,
						multisig: ::subxt::sp_core::crypto::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 1)]
					#[doc = "A multisig operation has been approved by someone."]
					MultisigApproval {
						approving: ::subxt::sp_core::crypto::AccountId32,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::subxt::sp_core::crypto::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 2)]
					#[doc = "A multisig operation has been executed."]
					MultisigExecuted {
						approving: ::subxt::sp_core::crypto::AccountId32,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::subxt::sp_core::crypto::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 3)]
					#[doc = "A multisig operation has been cancelled."]
					MultisigCancelled {
						cancelling: ::subxt::sp_core::crypto::AccountId32,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::subxt::sp_core::crypto::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
					},
				}
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Multisig<_0, _1, _2> {
				pub when: runtime_types::pallet_multisig::Timepoint<_0>,
				pub deposit: _1,
				pub depositor: _2,
				pub approvals: ::std::vec::Vec<_2>,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Timepoint<_0> {
				pub height: _0,
				pub index: _0,
			}
		}
		pub mod pallet_oracle {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct AssetInfo<_0, _1, _2> {
					pub threshold: _0,
					pub min_answers: _1,
					pub max_answers: _1,
					pub block_interval: _1,
					pub reward: _2,
					pub slash: _2,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Permissioned call to add an asset"]
					#[doc = ""]
					#[doc = "- `asset_id`: Id for the asset"]
					#[doc = "- `threshold`: Percent close to mean to be rewarded"]
					#[doc = "- `min_answers`: Min answers before aggregation"]
					#[doc = "- `max_answers`: Max answers to aggregate"]
					#[doc = "- `block_interval`: blocks until oracle triggered"]
					#[doc = "- `reward`: reward amount for correct answer"]
					#[doc = "- `slash`: slash amount for bad answer"]
					#[doc = ""]
					#[doc = "Emits `DepositEvent` event when successful."]
					add_asset_and_info {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						threshold: runtime_types::sp_arithmetic::per_things::Percent,
						min_answers: ::core::primitive::u32,
						max_answers: ::core::primitive::u32,
						block_interval: ::core::primitive::u32,
						reward: ::core::primitive::u128,
						slash: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "Call for a signer to be set, called from controller, adds stake."]
					#[doc = ""]
					#[doc = "- `signer`: signer to tie controller to"]
					#[doc = ""]
					#[doc = "Emits `SignerSet` and `StakeAdded` events when successful."]
					set_signer { signer: ::subxt::sp_core::crypto::AccountId32 },
					#[codec(index = 2)]
					#[doc = "call to add more stake from a controller"]
					#[doc = ""]
					#[doc = "- `stake`: amount to add to stake"]
					#[doc = ""]
					#[doc = "Emits `StakeAdded` event when successful."]
					add_stake { stake: ::core::primitive::u128 },
					#[codec(index = 3)]
					#[doc = "Call to put in a claim to remove stake, called from controller"]
					#[doc = ""]
					#[doc = "Emits `StakeRemoved` event when successful."]
					remove_stake,
					#[codec(index = 4)]
					#[doc = "Call to reclaim stake after proper time has passed, called from controller"]
					#[doc = ""]
					#[doc = "Emits `StakeReclaimed` event when successful."]
					reclaim_stake,
					#[codec(index = 5)]
					#[doc = "Call to submit a price, gas is returned if all logic gates passed"]
					#[doc = "Should be called from offchain worker but can be called manually too"]
					#[doc = "Operational transaction"]
					#[doc = ""]
					#[doc = "- `price`: price to submit"]
					#[doc = "- `asset_id`: Id for the asset"]
					#[doc = ""]
					#[doc = "Emits `PriceSubmitted` event when successful."]
					submit_price {
						price: ::core::primitive::u128,
						asset_id: runtime_types::primitives::currency::CurrencyId,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Unknown"]
					Unknown,
					#[codec(index = 1)]
					#[doc = "No Permission"]
					NoPermission,
					#[codec(index = 2)]
					#[doc = "No stake for oracle"]
					NoStake,
					#[codec(index = 3)]
					#[doc = "Stake is locked try again later"]
					StakeLocked,
					#[codec(index = 4)]
					#[doc = "Not enough oracle stake for action"]
					NotEnoughStake,
					#[codec(index = 5)]
					#[doc = "Not Enough Funds to complete action"]
					NotEnoughFunds,
					#[codec(index = 6)]
					#[doc = "Invalid asset id"]
					InvalidAssetId,
					#[codec(index = 7)]
					#[doc = "Price already submitted"]
					AlreadySubmitted,
					#[codec(index = 8)]
					#[doc = "Max prices already reached"]
					MaxPrices,
					#[codec(index = 9)]
					#[doc = "Price has not been requested"]
					PriceNotRequested,
					#[codec(index = 10)]
					#[doc = "Signer has not been set"]
					UnsetSigner,
					#[codec(index = 11)]
					#[doc = "Signer has already been set"]
					AlreadySet,
					#[codec(index = 12)]
					#[doc = "No controller has been set"]
					UnsetController,
					#[codec(index = 13)]
					#[doc = "This controller is already in use"]
					ControllerUsed,
					#[codec(index = 14)]
					#[doc = "This signer is already in use"]
					SignerUsed,
					#[codec(index = 15)]
					#[doc = "Error avoids a panic"]
					AvoidPanic,
					#[codec(index = 16)]
					#[doc = "Max answers have been exceeded"]
					ExceedMaxAnswers,
					#[codec(index = 17)]
					#[doc = "Invalid min answers"]
					InvalidMinAnswers,
					#[codec(index = 18)]
					MaxAnswersLessThanMinAnswers,
					#[codec(index = 19)]
					#[doc = "Threshold exceeded"]
					ExceedThreshold,
					#[codec(index = 20)]
					#[doc = "Asset count exceeded"]
					ExceedAssetsCount,
					#[codec(index = 21)]
					#[doc = "Price not found"]
					PriceNotFound,
					#[codec(index = 22)]
					#[doc = "Stake exceeded"]
					ExceedStake,
					#[codec(index = 23)]
					#[doc = "Too many weighted averages requested"]
					DepthTooLarge,
					#[codec(index = 24)]
					ArithmeticError,
					#[codec(index = 25)]
					#[doc = "Block interval is less then stale price"]
					BlockIntervalLength,
					#[codec(index = 26)]
					#[doc = "There was an error transferring"]
					TransferError,
					#[codec(index = 27)]
					MaxHistory,
					#[codec(index = 28)]
					MaxPrePrices,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Asset info created or changed. \\[asset_id, threshold, min_answers, max_answers,"]
					#[doc = "block_interval, reward, slash\\]"]
					AssetInfoChange(
						runtime_types::primitives::currency::CurrencyId,
						runtime_types::sp_arithmetic::per_things::Percent,
						::core::primitive::u32,
						::core::primitive::u32,
						::core::primitive::u32,
						::core::primitive::u128,
						::core::primitive::u128,
					),
					#[codec(index = 1)]
					#[doc = "Signer was set. \\[signer, controller\\]"]
					SignerSet(
						::subxt::sp_core::crypto::AccountId32,
						::subxt::sp_core::crypto::AccountId32,
					),
					#[codec(index = 2)]
					#[doc = "Stake was added. \\[added_by, amount_added, total_amount\\]"]
					StakeAdded(
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u128,
						::core::primitive::u128,
					),
					#[codec(index = 3)]
					#[doc = "Stake removed. \\[removed_by, amount, block_number\\]"]
					StakeRemoved(
						::subxt::sp_core::crypto::AccountId32,
						::core::primitive::u128,
						::core::primitive::u32,
					),
					#[codec(index = 4)]
					#[doc = "Stake reclaimed. \\[reclaimed_by, amount\\]"]
					StakeReclaimed(::subxt::sp_core::crypto::AccountId32, ::core::primitive::u128),
					#[codec(index = 5)]
					#[doc = "Price submitted by oracle. \\[oracle_address, asset_id, price\\]"]
					PriceSubmitted(
						::subxt::sp_core::crypto::AccountId32,
						runtime_types::primitives::currency::CurrencyId,
						::core::primitive::u128,
					),
					#[codec(index = 6)]
					#[doc = "Oracle slashed. \\[oracle_address, asset_id, amount\\]"]
					UserSlashed(
						::subxt::sp_core::crypto::AccountId32,
						runtime_types::primitives::currency::CurrencyId,
						::core::primitive::u128,
					),
					#[codec(index = 7)]
					#[doc = "Oracle rewarded. \\[oracle_address, asset_id, price\\]"]
					UserRewarded(
						::subxt::sp_core::crypto::AccountId32,
						runtime_types::primitives::currency::CurrencyId,
						::core::primitive::u128,
					),
					#[codec(index = 8)]
					#[doc = "Answer from oracle removed for staleness. \\[oracle_address, price\\]"]
					AnswerPruned(::subxt::sp_core::crypto::AccountId32, ::core::primitive::u128),
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct PrePrice<_0, _1, _2> {
					pub price: _0,
					pub block: _1,
					pub who: _2,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct Withdraw<_0, _1> {
					pub stake: _0,
					pub unlock_block: _1,
				}
			}
		}
		pub mod pallet_pablo {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Create a new pool."]
					#[doc = ""]
					#[doc = "Emits `PoolCreated` event when successful."]
					create {
						pool: runtime_types::pallet_pablo::pallet::PoolInitConfiguration<
							::subxt::sp_core::crypto::AccountId32,
							runtime_types::primitives::currency::CurrencyId,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Execute a buy order on pool."]
					#[doc = ""]
					#[doc = "Emits `Swapped` event when successful."]
					buy {
						pool_id: ::core::primitive::u128,
						asset_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
						min_receive: ::core::primitive::u128,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					#[doc = "Execute a sell order on pool."]
					#[doc = ""]
					#[doc = "Emits `Swapped` event when successful."]
					sell {
						pool_id: ::core::primitive::u128,
						asset_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
						min_receive: ::core::primitive::u128,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 3)]
					#[doc = "Execute a specific swap operation."]
					#[doc = ""]
					#[doc = "The `quote_amount` is always the quote asset amount (A/B => B), (B/A => A)."]
					#[doc = ""]
					#[doc = "Emits `Swapped` event when successful."]
					swap {
						pool_id: ::core::primitive::u128,
						pair: runtime_types::composable_traits::defi::CurrencyPair<
							runtime_types::primitives::currency::CurrencyId,
						>,
						quote_amount: ::core::primitive::u128,
						min_receive: ::core::primitive::u128,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 4)]
					#[doc = "Add liquidity to the given pool."]
					#[doc = ""]
					#[doc = "Emits `LiquidityAdded` event when successful."]
					add_liquidity {
						pool_id: ::core::primitive::u128,
						base_amount: ::core::primitive::u128,
						quote_amount: ::core::primitive::u128,
						min_mint_amount: ::core::primitive::u128,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					#[doc = "Remove liquidity from the given pool."]
					#[doc = ""]
					#[doc = "Emits `LiquidityRemoved` event when successful."]
					remove_liquidity {
						pool_id: ::core::primitive::u128,
						lp_amount: ::core::primitive::u128,
						min_base_amount: ::core::primitive::u128,
						min_quote_amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					enable_twap { pool_id: ::core::primitive::u128 },
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					PoolNotFound,
					#[codec(index = 1)]
					NotEnoughLiquidity,
					#[codec(index = 2)]
					PairMismatch,
					#[codec(index = 3)]
					MustBeOwner,
					#[codec(index = 4)]
					InvalidSaleState,
					#[codec(index = 5)]
					InvalidAmount,
					#[codec(index = 6)]
					InvalidAsset,
					#[codec(index = 7)]
					CannotRespectMinimumRequested,
					#[codec(index = 8)]
					AssetAmountMustBePositiveNumber,
					#[codec(index = 9)]
					InvalidPair,
					#[codec(index = 10)]
					InvalidFees,
					#[codec(index = 11)]
					AmpFactorMustBeGreaterThanZero,
					#[codec(index = 12)]
					MissingAmount,
					#[codec(index = 13)]
					NoLpTokenForLbp,
					#[codec(index = 14)]
					WeightsMustBeNonZero,
					#[codec(index = 15)]
					WeightsMustSumToOne,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Pool with specified id `T::PoolId` was created successfully by `T::AccountId`."]
					PoolCreated {
						pool_id: ::core::primitive::u128,
						owner: ::subxt::sp_core::crypto::AccountId32,
						assets: runtime_types::composable_traits::defi::CurrencyPair<
							runtime_types::primitives::currency::CurrencyId,
						>,
					},
					#[codec(index = 1)]
					#[doc = "The sale ended, the funds repatriated and the pool deleted."]
					PoolDeleted {
						pool_id: ::core::primitive::u128,
						base_amount: ::core::primitive::u128,
						quote_amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "Liquidity added into the pool `T::PoolId`."]
					LiquidityAdded {
						who: ::subxt::sp_core::crypto::AccountId32,
						pool_id: ::core::primitive::u128,
						base_amount: ::core::primitive::u128,
						quote_amount: ::core::primitive::u128,
						minted_lp: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "Liquidity removed from pool `T::PoolId` by `T::AccountId` in balanced way."]
					LiquidityRemoved {
						who: ::subxt::sp_core::crypto::AccountId32,
						pool_id: ::core::primitive::u128,
						base_amount: ::core::primitive::u128,
						quote_amount: ::core::primitive::u128,
						total_issuance: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Token exchange happened."]
					Swapped {
						pool_id: ::core::primitive::u128,
						who: ::subxt::sp_core::crypto::AccountId32,
						base_asset: runtime_types::primitives::currency::CurrencyId,
						quote_asset: runtime_types::primitives::currency::CurrencyId,
						base_amount: ::core::primitive::u128,
						quote_amount: ::core::primitive::u128,
						fee: runtime_types::composable_traits::dex::Fee<
							runtime_types::primitives::currency::CurrencyId,
							::core::primitive::u128,
						>,
					},
					#[codec(index = 5)]
					#[doc = "TWAP updated."]
					TwapUpdated {
						pool_id: ::core::primitive::u128,
						timestamp: ::core::primitive::u64,
						twaps: ::subxt::KeyedVec<
							runtime_types::primitives::currency::CurrencyId,
							runtime_types::sp_arithmetic::fixed_point::FixedU128,
						>,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum PoolConfiguration<_0, _1, _2> {
					#[codec(index = 0)]
					StableSwap(runtime_types::composable_traits::dex::StableSwapPoolInfo<_0, _1>),
					#[codec(index = 1)]
					ConstantProduct(
						runtime_types::composable_traits::dex::ConstantProductPoolInfo<_0, _1>,
					),
					#[codec(index = 2)]
					LiquidityBootstrapping(
						runtime_types::composable_traits::dex::LiquidityBootstrappingPoolInfo<
							_0,
							_1,
							_2,
						>,
					),
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum PoolInitConfiguration<_0, _1, _2> {
					#[codec(index = 0)]
					StableSwap {
						owner: _0,
						pair: runtime_types::composable_traits::defi::CurrencyPair<_1>,
						amplification_coefficient: ::core::primitive::u16,
						fee: runtime_types::sp_arithmetic::per_things::Permill,
					},
					#[codec(index = 1)]
					ConstantProduct {
						owner: _0,
						pair: runtime_types::composable_traits::defi::CurrencyPair<_1>,
						fee: runtime_types::sp_arithmetic::per_things::Permill,
						base_weight: runtime_types::sp_arithmetic::per_things::Permill,
					},
					#[codec(index = 2)]
					LiquidityBootstrapping(
						runtime_types::composable_traits::dex::LiquidityBootstrappingPoolInfo<
							_0,
							_1,
							_2,
						>,
					),
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct PriceCumulative<_0, _1> {
					pub timestamp: _0,
					pub base_price_cumulative: _1,
					pub quote_price_cumulative: _1,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct TimeWeightedAveragePrice<_0, _1> {
					pub timestamp: _0,
					pub base_price_cumulative: _1,
					pub quote_price_cumulative: _1,
					pub base_twap: runtime_types::sp_arithmetic::fixed_point::FixedU128,
					pub quote_twap: runtime_types::sp_arithmetic::fixed_point::FixedU128,
				}
			}
		}
		pub mod pallet_preimage {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Register a preimage on-chain."]
					#[doc = ""]
					#[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
					#[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
					note_preimage { bytes: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 1)]
					#[doc = "Clear an unrequested preimage from the runtime storage."]
					unnote_preimage { hash: ::subxt::sp_core::H256 },
					#[codec(index = 2)]
					#[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
					#[doc = ""]
					#[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
					#[doc = "a user may have paid, and take the control of the preimage out of their hands."]
					request_preimage { hash: ::subxt::sp_core::H256 },
					#[codec(index = 3)]
					#[doc = "Clear a previously made request for a preimage."]
					#[doc = ""]
					#[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
					unrequest_preimage { hash: ::subxt::sp_core::H256 },
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Preimage is too large to store on-chain."]
					TooLarge,
					#[codec(index = 1)]
					#[doc = "Preimage has already been noted on-chain."]
					AlreadyNoted,
					#[codec(index = 2)]
					#[doc = "The user is not authorized to perform this action."]
					NotAuthorized,
					#[codec(index = 3)]
					#[doc = "The preimage cannot be removed since it has not yet been noted."]
					NotNoted,
					#[codec(index = 4)]
					#[doc = "A preimage may not be removed when there are outstanding requests."]
					Requested,
					#[codec(index = 5)]
					#[doc = "The preimage request cannot be removed since no outstanding requests exist."]
					NotRequested,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A preimage has been noted."]
					Noted { hash: ::subxt::sp_core::H256 },
					#[codec(index = 1)]
					#[doc = "A preimage has been requested."]
					Requested { hash: ::subxt::sp_core::H256 },
					#[codec(index = 2)]
					#[doc = "A preimage has ben cleared."]
					Cleared { hash: ::subxt::sp_core::H256 },
				}
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum RequestStatus<_0, _1> {
				#[codec(index = 0)]
				Unrequested(::core::option::Option<(_0, _1)>),
				#[codec(index = 1)]
				Requested(::core::primitive::u32),
			}
		}
		pub mod pallet_proxy {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
					#[doc = "`add_proxy`."]
					#[doc = ""]
					#[doc = "Removes any corresponding announcement(s)."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
					#[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
					#[doc = "- `call`: The call to be made by the `real` account."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of the number of proxies the user has (P)."]
					#[doc = "# </weight>"]
					proxy {
						real: ::subxt::sp_core::crypto::AccountId32,
						force_proxy_type: ::core::option::Option<()>,
						call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
					},
					#[codec(index = 1)]
					#[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
					#[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
					#[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
					#[doc = "zero."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of the number of proxies the user has (P)."]
					#[doc = "# </weight>"]
					add_proxy {
						delegate: ::subxt::sp_core::crypto::AccountId32,
						proxy_type: (),
						delay: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Unregister a proxy account for the sender."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
					#[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of the number of proxies the user has (P)."]
					#[doc = "# </weight>"]
					remove_proxy {
						delegate: ::subxt::sp_core::crypto::AccountId32,
						proxy_type: (),
						delay: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "Unregister all proxy accounts for the sender."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "WARNING: This may be called on accounts created by `anonymous`, however if done, then"]
					#[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of the number of proxies the user has (P)."]
					#[doc = "# </weight>"]
					remove_proxies,
					#[codec(index = 4)]
					#[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
					#[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
					#[doc = ""]
					#[doc = "Requires a `Signed` origin."]
					#[doc = ""]
					#[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
					#[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
					#[doc = "allow for maximum flexibility."]
					#[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
					#[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
					#[doc = "want to use `0`."]
					#[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
					#[doc = "zero."]
					#[doc = ""]
					#[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
					#[doc = "same sender, with the same parameters."]
					#[doc = ""]
					#[doc = "Fails if there are insufficient funds to pay for deposit."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of the number of proxies the user has (P)."]
					#[doc = "# </weight>"]
					#[doc = "TODO: Might be over counting 1 read"]
					anonymous {
						proxy_type: (),
						delay: ::core::primitive::u32,
						index: ::core::primitive::u16,
					},
					#[codec(index = 5)]
					#[doc = "Removes a previously spawned anonymous proxy."]
					#[doc = ""]
					#[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
					#[doc = "inaccessible."]
					#[doc = ""]
					#[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
					#[doc = "`anonymous` with corresponding parameters."]
					#[doc = ""]
					#[doc = "- `spawner`: The account that originally called `anonymous` to create this account."]
					#[doc = "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`."]
					#[doc = "- `proxy_type`: The proxy type originally passed to `anonymous`."]
					#[doc = "- `height`: The height of the chain when the call to `anonymous` was processed."]
					#[doc = "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed."]
					#[doc = ""]
					#[doc = "Fails with `NoPermission` in case the caller is not a previously created anonymous"]
					#[doc = "account whose `anonymous` call has corresponding parameters."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of the number of proxies the user has (P)."]
					#[doc = "# </weight>"]
					kill_anonymous {
						spawner: ::subxt::sp_core::crypto::AccountId32,
						proxy_type: (),
						index: ::core::primitive::u16,
						#[codec(compact)]
						height: ::core::primitive::u32,
						#[codec(compact)]
						ext_index: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					#[doc = "Publish the hash of a proxy-call that will be made in the future."]
					#[doc = ""]
					#[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
					#[doc = "if the delay associated with the proxy relationship is greater than zero."]
					#[doc = ""]
					#[doc = "No more than `MaxPending` announcements may be made at any one time."]
					#[doc = ""]
					#[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
					#[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
					#[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of:"]
					#[doc = "- A: the number of announcements made."]
					#[doc = "- P: the number of proxies the user has."]
					#[doc = "# </weight>"]
					announce {
						real: ::subxt::sp_core::crypto::AccountId32,
						call_hash: ::subxt::sp_core::H256,
					},
					#[codec(index = 7)]
					#[doc = "Remove a given announcement."]
					#[doc = ""]
					#[doc = "May be called by a proxy account to remove a call they previously announced and return"]
					#[doc = "the deposit."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
					#[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of:"]
					#[doc = "- A: the number of announcements made."]
					#[doc = "- P: the number of proxies the user has."]
					#[doc = "# </weight>"]
					remove_announcement {
						real: ::subxt::sp_core::crypto::AccountId32,
						call_hash: ::subxt::sp_core::H256,
					},
					#[codec(index = 8)]
					#[doc = "Remove the given announcement of a delegate."]
					#[doc = ""]
					#[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
					#[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `delegate`: The account that previously announced the call."]
					#[doc = "- `call_hash`: The hash of the call to be made."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of:"]
					#[doc = "- A: the number of announcements made."]
					#[doc = "- P: the number of proxies the user has."]
					#[doc = "# </weight>"]
					reject_announcement {
						delegate: ::subxt::sp_core::crypto::AccountId32,
						call_hash: ::subxt::sp_core::H256,
					},
					#[codec(index = 9)]
					#[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
					#[doc = "`add_proxy`."]
					#[doc = ""]
					#[doc = "Removes any corresponding announcement(s)."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
					#[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
					#[doc = "- `call`: The call to be made by the `real` account."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of:"]
					#[doc = "- A: the number of announcements made."]
					#[doc = "- P: the number of proxies the user has."]
					#[doc = "# </weight>"]
					proxy_announced {
						delegate: ::subxt::sp_core::crypto::AccountId32,
						real: ::subxt::sp_core::crypto::AccountId32,
						force_proxy_type: ::core::option::Option<()>,
						call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "There are too many proxies registered or too many announcements pending."]
					TooMany,
					#[codec(index = 1)]
					#[doc = "Proxy registration not found."]
					NotFound,
					#[codec(index = 2)]
					#[doc = "Sender is not a proxy of the account to be proxied."]
					NotProxy,
					#[codec(index = 3)]
					#[doc = "A call which is incompatible with the proxy type's filter was attempted."]
					Unproxyable,
					#[codec(index = 4)]
					#[doc = "Account is already a proxy."]
					Duplicate,
					#[codec(index = 5)]
					#[doc = "Call may not be made by proxy because it may escalate its privileges."]
					NoPermission,
					#[codec(index = 6)]
					#[doc = "Announcement, if made at all, was made too recently."]
					Unannounced,
					#[codec(index = 7)]
					#[doc = "Cannot add self as proxy."]
					NoSelfProxy,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A proxy was executed correctly, with the given."]
					ProxyExecuted {
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 1)]
					#[doc = "Anonymous account has been created by new proxy with given"]
					#[doc = "disambiguation index and proxy type."]
					AnonymousCreated {
						anonymous: ::subxt::sp_core::crypto::AccountId32,
						who: ::subxt::sp_core::crypto::AccountId32,
						proxy_type: (),
						disambiguation_index: ::core::primitive::u16,
					},
					#[codec(index = 2)]
					#[doc = "An announcement was placed to make a call in the future."]
					Announced {
						real: ::subxt::sp_core::crypto::AccountId32,
						proxy: ::subxt::sp_core::crypto::AccountId32,
						call_hash: ::subxt::sp_core::H256,
					},
					#[codec(index = 3)]
					#[doc = "A proxy was added."]
					ProxyAdded {
						delegator: ::subxt::sp_core::crypto::AccountId32,
						delegatee: ::subxt::sp_core::crypto::AccountId32,
						proxy_type: (),
						delay: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					#[doc = "A proxy was removed."]
					ProxyRemoved {
						delegator: ::subxt::sp_core::crypto::AccountId32,
						delegatee: ::subxt::sp_core::crypto::AccountId32,
						proxy_type: (),
						delay: ::core::primitive::u32,
					},
				}
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Announcement<_0, _1, _2> {
				pub real: _0,
				pub call_hash: _1,
				pub height: _2,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ProxyDefinition<_0, _1, _2> {
				pub delegate: _0,
				pub proxy_type: _1,
				pub delay: _2,
			}
		}
		pub mod pallet_scheduler {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Anonymously schedule a task."]
					schedule {
						when: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<
							runtime_types::frame_support::traits::schedule::MaybeHashed<
								runtime_types::dali_runtime::Call,
								::subxt::sp_core::H256,
							>,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Cancel an anonymously scheduled task."]
					cancel { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "Schedule a named task."]
					schedule_named {
						id: ::std::vec::Vec<::core::primitive::u8>,
						when: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<
							runtime_types::frame_support::traits::schedule::MaybeHashed<
								runtime_types::dali_runtime::Call,
								::subxt::sp_core::H256,
							>,
						>,
					},
					#[codec(index = 3)]
					#[doc = "Cancel a named scheduled task."]
					cancel_named { id: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 4)]
					#[doc = "Anonymously schedule a task after a delay."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Same as [`schedule`]."]
					#[doc = "# </weight>"]
					schedule_after {
						after: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<
							runtime_types::frame_support::traits::schedule::MaybeHashed<
								runtime_types::dali_runtime::Call,
								::subxt::sp_core::H256,
							>,
						>,
					},
					#[codec(index = 5)]
					#[doc = "Schedule a named task after a delay."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Same as [`schedule_named`](Self::schedule_named)."]
					#[doc = "# </weight>"]
					schedule_named_after {
						id: ::std::vec::Vec<::core::primitive::u8>,
						after: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<
							runtime_types::frame_support::traits::schedule::MaybeHashed<
								runtime_types::dali_runtime::Call,
								::subxt::sp_core::H256,
							>,
						>,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Failed to schedule a call"]
					FailedToSchedule,
					#[codec(index = 1)]
					#[doc = "Cannot find the scheduled call."]
					NotFound,
					#[codec(index = 2)]
					#[doc = "Given target block number is in the past."]
					TargetBlockNumberInPast,
					#[codec(index = 3)]
					#[doc = "Reschedule failed because it does not change scheduled time."]
					RescheduleNoChange,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Events type."]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Scheduled some task."]
					Scheduled { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 1)]
					#[doc = "Canceled some task."]
					Canceled { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "Dispatched some task."]
					Dispatched {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 3)]
					#[doc = "The call for the provided hash was not found so the task has been aborted."]
					CallLookupFailed {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
						error: runtime_types::frame_support::traits::schedule::LookupError,
					},
				}
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ScheduledV3<_0, _1, _2, _3> {
				pub maybe_id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
				pub priority: ::core::primitive::u8,
				pub call: _0,
				pub maybe_periodic: ::core::option::Option<(_1, _1)>,
				pub origin: _2,
				#[codec(skip)]
				pub __subxt_unused_type_params: ::core::marker::PhantomData<_3>,
			}
		}
		pub mod pallet_session {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Sets the session key(s) of the function caller to `keys`."]
					#[doc = "Allows an account to set its session key prior to becoming a validator."]
					#[doc = "This doesn't take effect until the next session."]
					#[doc = ""]
					#[doc = "The dispatch origin of this function must be signed."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: `O(1)`. Actual cost depends on the number of length of"]
					#[doc = "  `T::Keys::key_ids()` which is fixed."]
					#[doc = "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`"]
					#[doc = "- DbWrites: `origin account`, `NextKeys`"]
					#[doc = "- DbReads per key id: `KeyOwner`"]
					#[doc = "- DbWrites per key id: `KeyOwner`"]
					#[doc = "# </weight>"]
					set_keys {
						keys: runtime_types::dali_runtime::opaque::SessionKeys,
						proof: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					#[doc = "Removes any session key(s) of the function caller."]
					#[doc = ""]
					#[doc = "This doesn't take effect until the next session."]
					#[doc = ""]
					#[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
					#[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
					#[doc = "means being a controller account) or directly convertible into a validator ID (which"]
					#[doc = "usually means being a stash account)."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length"]
					#[doc = "  of `T::Keys::key_ids()` which is fixed."]
					#[doc = "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`"]
					#[doc = "- DbWrites: `NextKeys`, `origin account`"]
					#[doc = "- DbWrites per key id: `KeyOwner`"]
					#[doc = "# </weight>"]
					purge_keys,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Error for the session pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Invalid ownership proof."]
					InvalidProof,
					#[codec(index = 1)]
					#[doc = "No associated validator ID for account."]
					NoAssociatedValidatorId,
					#[codec(index = 2)]
					#[doc = "Registered duplicate key."]
					DuplicatedKey,
					#[codec(index = 3)]
					#[doc = "No keys are associated with this account."]
					NoKeys,
					#[codec(index = 4)]
					#[doc = "Key setting account is not live, so it's impossible to associate keys."]
					NoAccount,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "New session has happened. Note that the argument is the session index, not the"]
					#[doc = "block number as the type might suggest."]
					NewSession { session_index: ::core::primitive::u32 },
				}
			}
		}
		pub mod pallet_staking_rewards {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {}
			}
		}
		pub mod pallet_sudo {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- O(1)."]
					#[doc = "- Limited storage reads."]
					#[doc = "- One DB write (event)."]
					#[doc = "- Weight of derivative `call` execution + 10,000."]
					#[doc = "# </weight>"]
					sudo { call: ::std::boxed::Box<runtime_types::dali_runtime::Call> },
					#[codec(index = 1)]
					#[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
					#[doc = "This function does not check the weight of the call, and instead allows the"]
					#[doc = "Sudo user to specify the weight of the call."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- O(1)."]
					#[doc = "- The weight of this call is defined by the caller."]
					#[doc = "# </weight>"]
					sudo_unchecked_weight {
						call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
						weight: ::core::primitive::u64,
					},
					#[codec(index = 2)]
					#[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
					#[doc = "key."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- O(1)."]
					#[doc = "- Limited storage reads."]
					#[doc = "- One DB change."]
					#[doc = "# </weight>"]
					set_key {
						new: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 3)]
					#[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
					#[doc = "a given account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- O(1)."]
					#[doc = "- Limited storage reads."]
					#[doc = "- One DB write (event)."]
					#[doc = "- Weight of derivative `call` execution + 10,000."]
					#[doc = "# </weight>"]
					sudo_as {
						who: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Error for the Sudo pallet"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Sender must be the Sudo account"]
					RequireSudo,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A sudo just took place. \\[result\\]"]
					Sudid {
						sudo_result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 1)]
					#[doc = "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."]
					KeyChanged {
						old_sudoer: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
					},
					#[codec(index = 2)]
					#[doc = "A sudo just took place. \\[result\\]"]
					SudoAsDone {
						sudo_result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
				}
			}
		}
		pub mod pallet_timestamp {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Set the current time."]
					#[doc = ""]
					#[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
					#[doc = "phase, if this call hasn't been invoked by that time."]
					#[doc = ""]
					#[doc = "The timestamp should be greater than the previous one by the amount specified by"]
					#[doc = "`MinimumPeriod`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be `Inherent`."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
					#[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
					#[doc = "  `on_finalize`)"]
					#[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
					#[doc = "# </weight>"]
					set {
						#[codec(compact)]
						now: ::core::primitive::u64,
					},
				}
			}
		}
		pub mod pallet_transaction_payment {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ChargeTransactionPayment(#[codec(compact)] pub ::core::primitive::u128);
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum Releases {
				#[codec(index = 0)]
				V1Ancient,
				#[codec(index = 1)]
				V2,
			}
		}
		pub mod pallet_treasury {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Put forward a suggestion for spending. A deposit proportional to the value"]
					#[doc = "is reserved and slashed if the proposal is rejected. It is returned once the"]
					#[doc = "proposal is awarded."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: O(1)"]
					#[doc = "- DbReads: `ProposalCount`, `origin account`"]
					#[doc = "- DbWrites: `ProposalCount`, `Proposals`, `origin account`"]
					#[doc = "# </weight>"]
					propose_spend {
						#[codec(compact)]
						value: ::core::primitive::u128,
						beneficiary: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Reject a proposed spend. The original deposit will be slashed."]
					#[doc = ""]
					#[doc = "May only be called from `T::RejectOrigin`."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: O(1)"]
					#[doc = "- DbReads: `Proposals`, `rejected proposer account`"]
					#[doc = "- DbWrites: `Proposals`, `rejected proposer account`"]
					#[doc = "# </weight>"]
					reject_proposal {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary"]
					#[doc = "and the original deposit will be returned."]
					#[doc = ""]
					#[doc = "May only be called from `T::ApproveOrigin`."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: O(1)."]
					#[doc = "- DbReads: `Proposals`, `Approvals`"]
					#[doc = "- DbWrite: `Approvals`"]
					#[doc = "# </weight>"]
					approve_proposal {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "Force a previously approved proposal to be removed from the approval queue."]
					#[doc = "The original deposit will no longer be returned."]
					#[doc = ""]
					#[doc = "May only be called from `T::RejectOrigin`."]
					#[doc = "- `proposal_id`: The index of a proposal"]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: O(A) where `A` is the number of approvals"]
					#[doc = "- Db reads and writes: `Approvals`"]
					#[doc = "# </weight>"]
					#[doc = ""]
					#[doc = "Errors:"]
					#[doc = "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,"]
					#[doc = "i.e., the proposal has not been approved. This could also mean the proposal does not"]
					#[doc = "exist altogether, thus there is no way it would have been approved in the first place."]
					remove_approval {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Error for the treasury pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Proposer's balance is too low."]
					InsufficientProposersBalance,
					#[codec(index = 1)]
					#[doc = "No proposal or bounty at that index."]
					InvalidIndex,
					#[codec(index = 2)]
					#[doc = "Too many approvals in the queue."]
					TooManyApprovals,
					#[codec(index = 3)]
					#[doc = "Proposal has not been approved."]
					ProposalNotApproved,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "New proposal."]
					Proposed { proposal_index: ::core::primitive::u32 },
					#[codec(index = 1)]
					#[doc = "We have ended a spend period and will now allocate funds."]
					Spending { budget_remaining: ::core::primitive::u128 },
					#[codec(index = 2)]
					#[doc = "Some funds have been allocated."]
					Awarded {
						proposal_index: ::core::primitive::u32,
						award: ::core::primitive::u128,
						account: ::subxt::sp_core::crypto::AccountId32,
					},
					#[codec(index = 3)]
					#[doc = "A proposal was rejected; funds were slashed."]
					Rejected {
						proposal_index: ::core::primitive::u32,
						slashed: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Some of our funds have been burnt."]
					Burnt { burnt_funds: ::core::primitive::u128 },
					#[codec(index = 5)]
					#[doc = "Spending has finished; this is the amount that rolls over until next spend."]
					Rollover { rollover_balance: ::core::primitive::u128 },
					#[codec(index = 6)]
					#[doc = "Some funds have been deposited."]
					Deposit { value: ::core::primitive::u128 },
				}
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct Proposal<_0, _1> {
				pub proposer: _0,
				pub value: _1,
				pub beneficiary: _0,
				pub bond: _1,
			}
		}
		pub mod pallet_utility {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Send a batch of dispatch calls."]
					#[doc = ""]
					#[doc = "May be called from any origin."]
					#[doc = ""]
					#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
					#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
					#[doc = ""]
					#[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
					#[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
					#[doc = "# </weight>"]
					#[doc = ""]
					#[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
					#[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
					#[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
					#[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
					#[doc = "event is deposited."]
					batch { calls: ::std::vec::Vec<runtime_types::dali_runtime::Call> },
					#[codec(index = 1)]
					#[doc = "Send a call through an indexed pseudonym of the sender."]
					#[doc = ""]
					#[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
					#[doc = "use the same filter as the origin of this call."]
					#[doc = ""]
					#[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
					#[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
					#[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
					#[doc = "in the Multisig pallet instead."]
					#[doc = ""]
					#[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					as_derivative {
						index: ::core::primitive::u16,
						call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
					},
					#[codec(index = 2)]
					#[doc = "Send a batch of dispatch calls and atomically execute them."]
					#[doc = "The whole transaction will rollback and fail if any of the calls failed."]
					#[doc = ""]
					#[doc = "May be called from any origin."]
					#[doc = ""]
					#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
					#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
					#[doc = ""]
					#[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
					#[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
					#[doc = "# </weight>"]
					batch_all { calls: ::std::vec::Vec<runtime_types::dali_runtime::Call> },
					#[codec(index = 3)]
					#[doc = "Dispatches a function call with a provided origin."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Root_."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- O(1)."]
					#[doc = "- Limited storage reads."]
					#[doc = "- One DB write (event)."]
					#[doc = "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as()."]
					#[doc = "# </weight>"]
					dispatch_as {
						as_origin: ::std::boxed::Box<runtime_types::dali_runtime::OriginCaller>,
						call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
					},
					#[codec(index = 4)]
					#[doc = "Send a batch of dispatch calls."]
					#[doc = "Unlike `batch`, it allows errors and won't interrupt."]
					#[doc = ""]
					#[doc = "May be called from any origin."]
					#[doc = ""]
					#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
					#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
					#[doc = ""]
					#[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
					#[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
					#[doc = "# </weight>"]
					force_batch { calls: ::std::vec::Vec<runtime_types::dali_runtime::Call> },
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Too many calls batched."]
					TooManyCalls,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
					#[doc = "well as the error."]
					BatchInterrupted {
						index: ::core::primitive::u32,
						error: runtime_types::sp_runtime::DispatchError,
					},
					#[codec(index = 1)]
					#[doc = "Batch of dispatches completed fully with no error."]
					BatchCompleted,
					#[codec(index = 2)]
					#[doc = "Batch of dispatches completed but has errors."]
					BatchCompletedWithErrors,
					#[codec(index = 3)]
					#[doc = "A single item within a Batch of dispatches has completed with no error."]
					ItemCompleted,
					#[codec(index = 4)]
					#[doc = "A single item within a Batch of dispatches has completed with error."]
					ItemFailed { error: runtime_types::sp_runtime::DispatchError },
					#[codec(index = 5)]
					#[doc = "A call was dispatched."]
					DispatchedAs {
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
				}
			}
		}
		pub mod pallet_vault {
			use super::runtime_types;
			pub mod capabilities {
				use super::runtime_types;
				#[derive(
					:: subxt :: codec :: CompactAs,
					:: subxt :: codec :: Decode,
					:: subxt :: codec :: Encode,
					Debug,
				)]
				pub struct Capabilities {
					pub bits: ::core::primitive::u32,
				}
			}
			pub mod models {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct StrategyOverview<_0> {
					pub allocation: runtime_types::sp_arithmetic::per_things::Perquintill,
					pub balance: _0,
					pub lifetime_withdrawn: _0,
					pub lifetime_deposited: _0,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct VaultInfo<_0, _1, _2, _3> {
					pub asset_id: _2,
					pub lp_token_id: _2,
					pub manager: _0,
					pub deposit: runtime_types::composable_traits::vault::Deposit<_1, _3>,
					pub capabilities: runtime_types::pallet_vault::capabilities::Capabilities,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Creates a new vault, locking up the deposit. If the deposit is greater than the"]
					#[doc = "`ExistentialDeposit` + `CreationDeposit`, the vault will remain alive forever, else it"]
					#[doc = "can be `tombstoned` after `deposit / RentPerBlock `. Accounts may deposit more funds to"]
					#[doc = "keep the vault alive."]
					#[doc = ""]
					#[doc = "# Emits"]
					#[doc = " - [`Event::VaultCreated`](Event::VaultCreated)"]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When the origin is not signed."]
					#[doc = " - When `deposit < CreationDeposit`."]
					#[doc = " - Origin has insufficient funds to lock the deposit."]
					create {
						vault: runtime_types::composable_traits::vault::VaultConfig<
							::subxt::sp_core::crypto::AccountId32,
							runtime_types::primitives::currency::CurrencyId,
						>,
						deposit_amount: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "Substracts rent from a vault, rewarding the caller if successful with a small fee and"]
					#[doc = "possibly tombstoning the vault."]
					#[doc = ""]
					#[doc = "A tombstoned vault still allows for withdrawals but blocks deposits, and requests all"]
					#[doc = "strategies to return their funds."]
					claim_surcharge {
						dest: ::core::primitive::u64,
						address: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
					},
					#[codec(index = 2)]
					add_surcharge { dest: ::core::primitive::u64, amount: ::core::primitive::u128 },
					#[codec(index = 3)]
					delete_tombstoned {
						dest: ::core::primitive::u64,
						address: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
					},
					#[codec(index = 4)]
					#[doc = "Deposit funds in the vault and receive LP tokens in return."]
					#[doc = "# Emits"]
					#[doc = " - Event::Deposited"]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When the origin is not signed."]
					#[doc = " - When `deposit < MinimumDeposit`."]
					deposit { vault: ::core::primitive::u64, asset_amount: ::core::primitive::u128 },
					#[codec(index = 5)]
					#[doc = "Withdraw funds"]
					#[doc = ""]
					#[doc = "# Emits"]
					#[doc = " - Event::Withdrawn"]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When the origin is not signed."]
					#[doc = " - When `lp_amount < MinimumWithdrawal`."]
					#[doc = " - When the vault has insufficient amounts reserved."]
					withdraw { vault: ::core::primitive::u64, lp_amount: ::core::primitive::u128 },
					#[codec(index = 6)]
					#[doc = "Stops a vault. To be used in case of severe protocol flaws."]
					#[doc = ""]
					#[doc = "# Emits"]
					#[doc = " - Event::EmergencyShutdown"]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When the origin is not root."]
					#[doc = " - When `vault` does not exist."]
					emergency_shutdown { vault: ::core::primitive::u64 },
					#[codec(index = 7)]
					#[doc = "(Re)starts a vault after emergency shutdown."]
					#[doc = ""]
					#[doc = "# Emits"]
					#[doc = " - Event::VaultStarted"]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When the origin is not root."]
					#[doc = " - When `vault` does not exist."]
					start { vault: ::core::primitive::u64 },
					#[codec(index = 8)]
					#[doc = "Turns an existent strategy account `strategy_account` of a vault determined by"]
					#[doc = "`vault_idx` into a liquidation state where withdrawn funds should be returned as soon"]
					#[doc = "as possible."]
					#[doc = ""]
					#[doc = "Only the vault's manager will be able to call this method."]
					#[doc = ""]
					#[doc = "# Emits"]
					#[doc = " - Event::LiquidateStrategy"]
					liquidate_strategy {
						vault_idx: ::core::primitive::u64,
						strategy_account_id: ::subxt::sp_core::crypto::AccountId32,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "It is not possible to perform a privileged action using an ordinary account"]
					AccountIsNotManager,
					#[codec(index = 1)]
					#[doc = "Failures in creating LP tokens during vault creation result in `CannotCreateAsset`."]
					CannotCreateAsset,
					#[codec(index = 2)]
					#[doc = "Failures to transfer funds from the vault to users or vice- versa result in"]
					#[doc = "`TransferFromFailed`."]
					TransferFromFailed,
					#[codec(index = 3)]
					#[doc = "Minting failures result in `MintFailed`. In general this should never occur."]
					MintFailed,
					#[codec(index = 4)]
					#[doc = "Requesting withdrawals for more LP tokens than available to the user result in"]
					#[doc = "`InsufficientLpTokens`"]
					InsufficientLpTokens,
					#[codec(index = 5)]
					#[doc = "Querying/operating on invalid vault id's result in `VaultDoesNotExist`."]
					VaultDoesNotExist,
					#[codec(index = 6)]
					#[doc = "If the vault contains too many assets (close to the `Balance::MAX`), it is considered"]
					#[doc = "full as arithmetic starts overflowing."]
					NoFreeVaultAllocation,
					#[codec(index = 7)]
					#[doc = "Vaults must allocate the proper ratio between reserved and strategies, so that the"]
					#[doc = "ratio sums up to one."]
					AllocationMustSumToOne,
					#[codec(index = 8)]
					#[doc = "Vaults may have up to [`MaxStrategies`](Config::MaxStrategies) strategies."]
					TooManyStrategies,
					#[codec(index = 9)]
					#[doc = "Vaults may have insufficient funds for withdrawals, as well as users wishing to deposit"]
					#[doc = "an incorrect amount."]
					InsufficientFunds,
					#[codec(index = 10)]
					#[doc = "Deposit amounts not exceeding [`MinimumDeposit`](Config::MinimumDeposit) are declined"]
					#[doc = "and result in `AmountMustGteMinimumDeposit`."]
					AmountMustGteMinimumDeposit,
					#[codec(index = 11)]
					#[doc = "Withdrawal amounts not exceeding [`MinimumWithdrawal`](Config::MinimumWithdrawal) are"]
					#[doc = "declined and result in `AmountMustGteMinimumWithdrawal`."]
					AmountMustGteMinimumWithdrawal,
					#[codec(index = 12)]
					#[doc = "When trying to withdraw too much from the vault, `NotEnoughLiquidity` is returned."]
					NotEnoughLiquidity,
					#[codec(index = 13)]
					#[doc = "Creating vaults with invalid creation deposits results in"]
					#[doc = "`InsufficientCreationDeposit`."]
					InsufficientCreationDeposit,
					#[codec(index = 14)]
					#[doc = "Attempting to tombstone a vault which has rent remaining results in"]
					#[doc = "`InvalidSurchargeClaim`."]
					InvalidSurchargeClaim,
					#[codec(index = 15)]
					#[doc = "Not all vaults have an associated LP token. Attempting to perform LP token related"]
					#[doc = "operations result in `NotVaultLpToken`."]
					NotVaultLpToken,
					#[codec(index = 16)]
					#[doc = "The vault has deposits halted, see [Capabilities](crate::capabilities::Capabilities)."]
					DepositsHalted,
					#[codec(index = 17)]
					#[doc = "The vault has withdrawals halted, see"]
					#[doc = "[Capabilities](crate::capabilities::Capabilities)."]
					WithdrawalsHalted,
					#[codec(index = 18)]
					OnlyManagerCanDoThisOperation,
					#[codec(index = 19)]
					InvalidDeletionClaim,
					#[codec(index = 20)]
					#[doc = "The vault could not be deleted, as it was not yet tombstoned."]
					VaultNotTombstoned,
					#[codec(index = 21)]
					#[doc = "The vault could not be deleted, as it was not tombstoned for long enough."]
					TombstoneDurationNotExceeded,
					#[codec(index = 22)]
					#[doc = "Existentially funded vaults do not require extra funds."]
					InvalidAddSurcharge,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Emitted after a vault has been successfully created."]
					VaultCreated { id: ::core::primitive::u64 },
					#[codec(index = 1)]
					#[doc = "Emitted after a user deposits funds into the vault."]
					Deposited {
						account: ::subxt::sp_core::crypto::AccountId32,
						asset_amount: ::core::primitive::u128,
						lp_amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					LiquidateStrategy {
						account: ::subxt::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "Emitted after a user exchanges LP tokens back for underlying assets"]
					Withdrawn {
						account: ::subxt::sp_core::crypto::AccountId32,
						lp_amount: ::core::primitive::u128,
						asset_amount: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Emitted after a succesful emergency shutdown."]
					EmergencyShutdown { vault: ::core::primitive::u64 },
					#[codec(index = 5)]
					#[doc = "Emitted after a vault is restarted."]
					VaultStarted { vault: ::core::primitive::u64 },
				}
			}
		}
		pub mod pallet_vesting {
			use super::runtime_types;
			pub mod module {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					claim { asset: runtime_types::primitives::currency::CurrencyId },
					#[codec(index = 1)]
					vested_transfer {
						from: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						beneficiary: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						asset: runtime_types::primitives::currency::CurrencyId,
						schedule: runtime_types::composable_traits::vesting::VestingSchedule<
							::core::primitive::u32,
							::core::primitive::u64,
							::core::primitive::u128,
						>,
					},
					#[codec(index = 2)]
					update_vesting_schedules {
						who: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						asset: runtime_types::primitives::currency::CurrencyId,
						vesting_schedules: ::std::vec::Vec<
							runtime_types::composable_traits::vesting::VestingSchedule<
								::core::primitive::u32,
								::core::primitive::u64,
								::core::primitive::u128,
							>,
						>,
					},
					#[codec(index = 3)]
					claim_for {
						dest: ::subxt::sp_runtime::MultiAddress<
							::subxt::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
						asset: runtime_types::primitives::currency::CurrencyId,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Vesting period is zero"]
					ZeroVestingPeriod,
					#[codec(index = 1)]
					#[doc = "Number of vests is zero"]
					ZeroVestingPeriodCount,
					#[codec(index = 2)]
					#[doc = "Insufficient amount of balance to lock"]
					InsufficientBalanceToLock,
					#[codec(index = 3)]
					#[doc = "This account have too many vesting schedules"]
					TooManyVestingSchedules,
					#[codec(index = 4)]
					#[doc = "The vested transfer amount is too low"]
					AmountLow,
					#[codec(index = 5)]
					#[doc = "Failed because the maximum vesting schedules was exceeded"]
					MaxVestingSchedulesExceeded,
					#[codec(index = 6)]
					#[doc = "Trying to vest to ourselves"]
					TryingToSelfVest,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Added new vesting schedule. \\[from, to, schedule\\]"]
					VestingScheduleAdded {
						from: ::subxt::sp_core::crypto::AccountId32,
						to: ::subxt::sp_core::crypto::AccountId32,
						asset: runtime_types::primitives::currency::CurrencyId,
						schedule: runtime_types::composable_traits::vesting::VestingSchedule<
							::core::primitive::u32,
							::core::primitive::u64,
							::core::primitive::u128,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Claimed vesting. \\[who, locked_amount\\]"]
					Claimed {
						who: ::subxt::sp_core::crypto::AccountId32,
						asset: runtime_types::primitives::currency::CurrencyId,
						locked_amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "Updated vesting schedules. \\[who\\]"]
					VestingSchedulesUpdated { who: ::subxt::sp_core::crypto::AccountId32 },
				}
			}
		}
		pub mod pallet_xcm {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					send {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
					},
					#[codec(index = 1)]
					#[doc = "Teleport some assets from the local chain to some destination chain."]
					#[doc = ""]
					#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
					#[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
					#[doc = "with all fees taken as needed from the asset."]
					#[doc = ""]
					#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
					#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
					#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
					#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
					#[doc = "  an `AccountId32` value."]
					#[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
					#[doc = "  `dest` side. May not be empty."]
					#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
					#[doc = "  fees."]
					teleport_assets {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
						fee_asset_item: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
					#[doc = "chain and forward a notification XCM."]
					#[doc = ""]
					#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
					#[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
					#[doc = "with all fees taken as needed from the asset."]
					#[doc = ""]
					#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
					#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
					#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
					#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
					#[doc = "  an `AccountId32` value."]
					#[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
					#[doc = "  `dest` side."]
					#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
					#[doc = "  fees."]
					reserve_transfer_assets {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
						fee_asset_item: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "Execute an XCM message from a local, signed, origin."]
					#[doc = ""]
					#[doc = "An event is deposited indicating whether `msg` could be executed completely or only"]
					#[doc = "partially."]
					#[doc = ""]
					#[doc = "No more than `max_weight` will be used in its attempted execution. If this is less than the"]
					#[doc = "maximum amount of weight that the message could take to be executed, then no execution"]
					#[doc = "attempt will be made."]
					#[doc = ""]
					#[doc = "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully"]
					#[doc = "to completion; only that *some* of it was executed."]
					execute {
						message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
						max_weight: ::core::primitive::u64,
					},
					#[codec(index = 4)]
					#[doc = "Extoll that a particular destination can be communicated with through a particular"]
					#[doc = "version of XCM."]
					#[doc = ""]
					#[doc = "- `origin`: Must be Root."]
					#[doc = "- `location`: The destination that is being described."]
					#[doc = "- `xcm_version`: The latest version of XCM that `location` supports."]
					force_xcm_version {
						location:
							::std::boxed::Box<runtime_types::xcm::v1::multilocation::MultiLocation>,
						xcm_version: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					#[doc = "Set a safe XCM version (the version that XCM should be encoded with if the most recent"]
					#[doc = "version a destination can accept is unknown)."]
					#[doc = ""]
					#[doc = "- `origin`: Must be Root."]
					#[doc = "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."]
					force_default_xcm_version {
						maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 6)]
					#[doc = "Ask a location to notify us regarding their XCM version and any changes to it."]
					#[doc = ""]
					#[doc = "- `origin`: Must be Root."]
					#[doc = "- `location`: The location to which we should subscribe for XCM version notifications."]
					force_subscribe_version_notify {
						location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
					},
					#[codec(index = 7)]
					#[doc = "Require that a particular destination should no longer notify us regarding any XCM"]
					#[doc = "version changes."]
					#[doc = ""]
					#[doc = "- `origin`: Must be Root."]
					#[doc = "- `location`: The location to which we are currently subscribed for XCM version"]
					#[doc = "  notifications which we no longer desire."]
					force_unsubscribe_version_notify {
						location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
					},
					#[codec(index = 8)]
					#[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
					#[doc = "chain and forward a notification XCM."]
					#[doc = ""]
					#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
					#[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
					#[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
					#[doc = "at risk."]
					#[doc = ""]
					#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
					#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
					#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
					#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
					#[doc = "  an `AccountId32` value."]
					#[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
					#[doc = "  `dest` side."]
					#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
					#[doc = "  fees."]
					#[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
					limited_reserve_transfer_assets {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
						fee_asset_item: ::core::primitive::u32,
						weight_limit: runtime_types::xcm::v2::WeightLimit,
					},
					#[codec(index = 9)]
					#[doc = "Teleport some assets from the local chain to some destination chain."]
					#[doc = ""]
					#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
					#[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
					#[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
					#[doc = "at risk."]
					#[doc = ""]
					#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
					#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
					#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
					#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
					#[doc = "  an `AccountId32` value."]
					#[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
					#[doc = "  `dest` side. May not be empty."]
					#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
					#[doc = "  fees."]
					#[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
					limited_teleport_assets {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
						fee_asset_item: ::core::primitive::u32,
						weight_limit: runtime_types::xcm::v2::WeightLimit,
					},
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The desired destination was unreachable, generally because there is a no way of routing"]
					#[doc = "to it."]
					Unreachable,
					#[codec(index = 1)]
					#[doc = "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps"]
					#[doc = "a lack of space for buffering the message."]
					SendFailure,
					#[codec(index = 2)]
					#[doc = "The message execution fails the filter."]
					Filtered,
					#[codec(index = 3)]
					#[doc = "The message's weight could not be determined."]
					UnweighableMessage,
					#[codec(index = 4)]
					#[doc = "The destination `MultiLocation` provided cannot be inverted."]
					DestinationNotInvertible,
					#[codec(index = 5)]
					#[doc = "The assets to be sent are empty."]
					Empty,
					#[codec(index = 6)]
					#[doc = "Could not re-anchor the assets to declare the fees for the destination chain."]
					CannotReanchor,
					#[codec(index = 7)]
					#[doc = "Too many assets have been attempted for transfer."]
					TooManyAssets,
					#[codec(index = 8)]
					#[doc = "Origin is invalid for sending."]
					InvalidOrigin,
					#[codec(index = 9)]
					#[doc = "The version of the `Versioned` value used is not able to be interpreted."]
					BadVersion,
					#[codec(index = 10)]
					#[doc = "The given location could not be used (e.g. because it cannot be expressed in the"]
					#[doc = "desired version of XCM)."]
					BadLocation,
					#[codec(index = 11)]
					#[doc = "The referenced subscription could not be found."]
					NoSubscription,
					#[codec(index = 12)]
					#[doc = "The location is invalid since it already has a subscription from us."]
					AlreadySubscribed,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Execution of an XCM message was attempted."]
					#[doc = ""]
					#[doc = "\\[ outcome \\]"]
					Attempted(runtime_types::xcm::v2::traits::Outcome),
					#[codec(index = 1)]
					#[doc = "A XCM message was sent."]
					#[doc = ""]
					#[doc = "\\[ origin, destination, message \\]"]
					Sent(
						runtime_types::xcm::v1::multilocation::MultiLocation,
						runtime_types::xcm::v1::multilocation::MultiLocation,
						runtime_types::xcm::v2::Xcm,
					),
					#[codec(index = 2)]
					#[doc = "Query response received which does not match a registered query. This may be because a"]
					#[doc = "matching query was never registered, it may be because it is a duplicate response, or"]
					#[doc = "because the query timed out."]
					#[doc = ""]
					#[doc = "\\[ origin location, id \\]"]
					UnexpectedResponse(
						runtime_types::xcm::v1::multilocation::MultiLocation,
						::core::primitive::u64,
					),
					#[codec(index = 3)]
					#[doc = "Query response has been received and is ready for taking with `take_response`. There is"]
					#[doc = "no registered notification call."]
					#[doc = ""]
					#[doc = "\\[ id, response \\]"]
					ResponseReady(::core::primitive::u64, runtime_types::xcm::v2::Response),
					#[codec(index = 4)]
					#[doc = "Query response has been received and query is removed. The registered notification has"]
					#[doc = "been dispatched and executed successfully."]
					#[doc = ""]
					#[doc = "\\[ id, pallet index, call index \\]"]
					Notified(::core::primitive::u64, ::core::primitive::u8, ::core::primitive::u8),
					#[codec(index = 5)]
					#[doc = "Query response has been received and query is removed. The registered notification could"]
					#[doc = "not be dispatched because the dispatch weight is greater than the maximum weight"]
					#[doc = "originally budgeted by this runtime for the query result."]
					#[doc = ""]
					#[doc = "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"]
					NotifyOverweight(
						::core::primitive::u64,
						::core::primitive::u8,
						::core::primitive::u8,
						::core::primitive::u64,
						::core::primitive::u64,
					),
					#[codec(index = 6)]
					#[doc = "Query response has been received and query is removed. There was a general error with"]
					#[doc = "dispatching the notification call."]
					#[doc = ""]
					#[doc = "\\[ id, pallet index, call index \\]"]
					NotifyDispatchError(
						::core::primitive::u64,
						::core::primitive::u8,
						::core::primitive::u8,
					),
					#[codec(index = 7)]
					#[doc = "Query response has been received and query is removed. The dispatch was unable to be"]
					#[doc = "decoded into a `Call`; this might be due to dispatch function having a signature which"]
					#[doc = "is not `(origin, QueryId, Response)`."]
					#[doc = ""]
					#[doc = "\\[ id, pallet index, call index \\]"]
					NotifyDecodeFailed(
						::core::primitive::u64,
						::core::primitive::u8,
						::core::primitive::u8,
					),
					#[codec(index = 8)]
					#[doc = "Expected query response has been received but the origin location of the response does"]
					#[doc = "not match that expected. The query remains registered for a later, valid, response to"]
					#[doc = "be received and acted upon."]
					#[doc = ""]
					#[doc = "\\[ origin location, id, expected location \\]"]
					InvalidResponder(
						runtime_types::xcm::v1::multilocation::MultiLocation,
						::core::primitive::u64,
						::core::option::Option<
							runtime_types::xcm::v1::multilocation::MultiLocation,
						>,
					),
					#[codec(index = 9)]
					#[doc = "Expected query response has been received but the expected origin location placed in"]
					#[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
					#[doc = ""]
					#[doc = "This is unexpected (since a location placed in storage in a previously executing"]
					#[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
					#[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
					#[doc = "needed."]
					#[doc = ""]
					#[doc = "\\[ origin location, id \\]"]
					InvalidResponderVersion(
						runtime_types::xcm::v1::multilocation::MultiLocation,
						::core::primitive::u64,
					),
					#[codec(index = 10)]
					#[doc = "Received query response has been read and removed."]
					#[doc = ""]
					#[doc = "\\[ id \\]"]
					ResponseTaken(::core::primitive::u64),
					#[codec(index = 11)]
					#[doc = "Some assets have been placed in an asset trap."]
					#[doc = ""]
					#[doc = "\\[ hash, origin, assets \\]"]
					AssetsTrapped(
						::subxt::sp_core::H256,
						runtime_types::xcm::v1::multilocation::MultiLocation,
						runtime_types::xcm::VersionedMultiAssets,
					),
					#[codec(index = 12)]
					#[doc = "An XCM version change notification message has been attempted to be sent."]
					#[doc = ""]
					#[doc = "\\[ destination, result \\]"]
					VersionChangeNotified(
						runtime_types::xcm::v1::multilocation::MultiLocation,
						::core::primitive::u32,
					),
					#[codec(index = 13)]
					#[doc = "The supported version of a location has been changed. This might be through an"]
					#[doc = "automatic notification or a manual intervention."]
					#[doc = ""]
					#[doc = "\\[ location, XCM version \\]"]
					SupportedVersionChanged(
						runtime_types::xcm::v1::multilocation::MultiLocation,
						::core::primitive::u32,
					),
					#[codec(index = 14)]
					#[doc = "A given location which had a version change subscription was dropped owing to an error"]
					#[doc = "sending the notification to it."]
					#[doc = ""]
					#[doc = "\\[ location, query ID, error \\]"]
					NotifyTargetSendFail(
						runtime_types::xcm::v1::multilocation::MultiLocation,
						::core::primitive::u64,
						runtime_types::xcm::v2::traits::Error,
					),
					#[codec(index = 15)]
					#[doc = "A given location which had a version change subscription was dropped owing to an error"]
					#[doc = "migrating the location to our new XCM format."]
					#[doc = ""]
					#[doc = "\\[ location, query ID \\]"]
					NotifyTargetMigrationFail(
						runtime_types::xcm::VersionedMultiLocation,
						::core::primitive::u64,
					),
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum Origin {
					#[codec(index = 0)]
					Xcm(runtime_types::xcm::v1::multilocation::MultiLocation),
					#[codec(index = 1)]
					Response(runtime_types::xcm::v1::multilocation::MultiLocation),
				}
			}
		}
		pub mod polkadot_core_primitives {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct InboundDownwardMessage<_0> {
				pub sent_at: _0,
				pub msg: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct InboundHrmpMessage<_0> {
				pub sent_at: _0,
				pub data: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct OutboundHrmpMessage<_0> {
				pub recipient: _0,
				pub data: ::std::vec::Vec<::core::primitive::u8>,
			}
		}
		pub mod polkadot_parachain {
			use super::runtime_types;
			pub mod primitives {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct HeadData(pub ::std::vec::Vec<::core::primitive::u8>);
				#[derive(
					:: subxt :: codec :: CompactAs,
					:: subxt :: codec :: Decode,
					:: subxt :: codec :: Encode,
					Debug,
				)]
				pub struct Id(pub ::core::primitive::u32);
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum XcmpMessageFormat {
					#[codec(index = 0)]
					ConcatenatedVersionedXcm,
					#[codec(index = 1)]
					ConcatenatedEncodedBlob,
					#[codec(index = 2)]
					Signals,
				}
			}
		}
		pub mod polkadot_primitives {
			use super::runtime_types;
			pub mod v2 {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct AbridgedHostConfiguration {
					pub max_code_size: ::core::primitive::u32,
					pub max_head_data_size: ::core::primitive::u32,
					pub max_upward_queue_count: ::core::primitive::u32,
					pub max_upward_queue_size: ::core::primitive::u32,
					pub max_upward_message_size: ::core::primitive::u32,
					pub max_upward_message_num_per_candidate: ::core::primitive::u32,
					pub hrmp_max_message_num_per_candidate: ::core::primitive::u32,
					pub validation_upgrade_cooldown: ::core::primitive::u32,
					pub validation_upgrade_delay: ::core::primitive::u32,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct AbridgedHrmpChannel {
					pub max_capacity: ::core::primitive::u32,
					pub max_total_size: ::core::primitive::u32,
					pub max_message_size: ::core::primitive::u32,
					pub msg_count: ::core::primitive::u32,
					pub total_size: ::core::primitive::u32,
					pub mqc_head: ::core::option::Option<::subxt::sp_core::H256>,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct PersistedValidationData<_0, _1> {
					pub parent_head: runtime_types::polkadot_parachain::primitives::HeadData,
					pub relay_parent_number: _1,
					pub relay_parent_storage_root: _0,
					pub max_pov_size: _1,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum UpgradeRestriction {
					#[codec(index = 0)]
					Present,
				}
			}
		}
		pub mod primitive_types {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct H256(pub [::core::primitive::u8; 32usize]);
		}
		pub mod primitives {
			use super::runtime_types;
			pub mod currency {
				use super::runtime_types;
				#[derive(
					:: subxt :: codec :: CompactAs,
					:: subxt :: codec :: Decode,
					:: subxt :: codec :: Encode,
					Debug,
				)]
				pub struct CurrencyId(pub ::core::primitive::u128);
			}
		}
		pub mod sp_arithmetic {
			use super::runtime_types;
			pub mod fixed_point {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct FixedI128(pub ::core::primitive::i128);
				#[derive(
					:: subxt :: codec :: CompactAs,
					:: subxt :: codec :: Decode,
					:: subxt :: codec :: Encode,
					Debug,
				)]
				pub struct FixedU128(pub ::core::primitive::u128);
			}
			pub mod per_things {
				use super::runtime_types;
				#[derive(
					:: subxt :: codec :: CompactAs,
					:: subxt :: codec :: Decode,
					:: subxt :: codec :: Encode,
					Debug,
				)]
				pub struct Perbill(pub ::core::primitive::u32);
				#[derive(
					:: subxt :: codec :: CompactAs,
					:: subxt :: codec :: Decode,
					:: subxt :: codec :: Encode,
					Debug,
				)]
				pub struct Percent(pub ::core::primitive::u8);
				#[derive(
					:: subxt :: codec :: CompactAs,
					:: subxt :: codec :: Decode,
					:: subxt :: codec :: Encode,
					Debug,
				)]
				pub struct Permill(pub ::core::primitive::u32);
				#[derive(
					:: subxt :: codec :: CompactAs,
					:: subxt :: codec :: Decode,
					:: subxt :: codec :: Encode,
					Debug,
				)]
				pub struct Perquintill(pub ::core::primitive::u64);
			}
		}
		pub mod sp_consensus_aura {
			use super::runtime_types;
			pub mod sr25519 {
				use super::runtime_types;
				pub mod app_sr25519 {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct Public(pub runtime_types::sp_core::sr25519::Public);
				}
			}
		}
		pub mod sp_consensus_slots {
			use super::runtime_types;
			#[derive(
				:: subxt :: codec :: CompactAs,
				:: subxt :: codec :: Decode,
				:: subxt :: codec :: Encode,
				Debug,
			)]
			pub struct Slot(pub ::core::primitive::u64);
		}
		pub mod sp_core {
			use super::runtime_types;
			pub mod crypto {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct AccountId32(pub [::core::primitive::u8; 32usize]);
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct KeyTypeId(pub [::core::primitive::u8; 4usize]);
			}
			pub mod ecdsa {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct Signature(pub [::core::primitive::u8; 65usize]);
			}
			pub mod ed25519 {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct Signature(pub [::core::primitive::u8; 64usize]);
			}
			pub mod sr25519 {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct Public(pub [::core::primitive::u8; 32usize]);
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct Signature(pub [::core::primitive::u8; 64usize]);
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum Void {}
		}
		pub mod sp_runtime {
			use super::runtime_types;
			pub mod generic {
				use super::runtime_types;
				pub mod digest {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct Digest {
						pub logs:
							::std::vec::Vec<runtime_types::sp_runtime::generic::digest::DigestItem>,
					}
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum DigestItem {
						#[codec(index = 6)]
						PreRuntime(
							[::core::primitive::u8; 4usize],
							::std::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 4)]
						Consensus(
							[::core::primitive::u8; 4usize],
							::std::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 5)]
						Seal(
							[::core::primitive::u8; 4usize],
							::std::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 0)]
						Other(::std::vec::Vec<::core::primitive::u8>),
						#[codec(index = 8)]
						RuntimeEnvironmentUpdated,
					}
				}
				pub mod era {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum Era {
						#[codec(index = 0)]
						Immortal,
						#[codec(index = 1)]
						Mortal1(::core::primitive::u8),
						#[codec(index = 2)]
						Mortal2(::core::primitive::u8),
						#[codec(index = 3)]
						Mortal3(::core::primitive::u8),
						#[codec(index = 4)]
						Mortal4(::core::primitive::u8),
						#[codec(index = 5)]
						Mortal5(::core::primitive::u8),
						#[codec(index = 6)]
						Mortal6(::core::primitive::u8),
						#[codec(index = 7)]
						Mortal7(::core::primitive::u8),
						#[codec(index = 8)]
						Mortal8(::core::primitive::u8),
						#[codec(index = 9)]
						Mortal9(::core::primitive::u8),
						#[codec(index = 10)]
						Mortal10(::core::primitive::u8),
						#[codec(index = 11)]
						Mortal11(::core::primitive::u8),
						#[codec(index = 12)]
						Mortal12(::core::primitive::u8),
						#[codec(index = 13)]
						Mortal13(::core::primitive::u8),
						#[codec(index = 14)]
						Mortal14(::core::primitive::u8),
						#[codec(index = 15)]
						Mortal15(::core::primitive::u8),
						#[codec(index = 16)]
						Mortal16(::core::primitive::u8),
						#[codec(index = 17)]
						Mortal17(::core::primitive::u8),
						#[codec(index = 18)]
						Mortal18(::core::primitive::u8),
						#[codec(index = 19)]
						Mortal19(::core::primitive::u8),
						#[codec(index = 20)]
						Mortal20(::core::primitive::u8),
						#[codec(index = 21)]
						Mortal21(::core::primitive::u8),
						#[codec(index = 22)]
						Mortal22(::core::primitive::u8),
						#[codec(index = 23)]
						Mortal23(::core::primitive::u8),
						#[codec(index = 24)]
						Mortal24(::core::primitive::u8),
						#[codec(index = 25)]
						Mortal25(::core::primitive::u8),
						#[codec(index = 26)]
						Mortal26(::core::primitive::u8),
						#[codec(index = 27)]
						Mortal27(::core::primitive::u8),
						#[codec(index = 28)]
						Mortal28(::core::primitive::u8),
						#[codec(index = 29)]
						Mortal29(::core::primitive::u8),
						#[codec(index = 30)]
						Mortal30(::core::primitive::u8),
						#[codec(index = 31)]
						Mortal31(::core::primitive::u8),
						#[codec(index = 32)]
						Mortal32(::core::primitive::u8),
						#[codec(index = 33)]
						Mortal33(::core::primitive::u8),
						#[codec(index = 34)]
						Mortal34(::core::primitive::u8),
						#[codec(index = 35)]
						Mortal35(::core::primitive::u8),
						#[codec(index = 36)]
						Mortal36(::core::primitive::u8),
						#[codec(index = 37)]
						Mortal37(::core::primitive::u8),
						#[codec(index = 38)]
						Mortal38(::core::primitive::u8),
						#[codec(index = 39)]
						Mortal39(::core::primitive::u8),
						#[codec(index = 40)]
						Mortal40(::core::primitive::u8),
						#[codec(index = 41)]
						Mortal41(::core::primitive::u8),
						#[codec(index = 42)]
						Mortal42(::core::primitive::u8),
						#[codec(index = 43)]
						Mortal43(::core::primitive::u8),
						#[codec(index = 44)]
						Mortal44(::core::primitive::u8),
						#[codec(index = 45)]
						Mortal45(::core::primitive::u8),
						#[codec(index = 46)]
						Mortal46(::core::primitive::u8),
						#[codec(index = 47)]
						Mortal47(::core::primitive::u8),
						#[codec(index = 48)]
						Mortal48(::core::primitive::u8),
						#[codec(index = 49)]
						Mortal49(::core::primitive::u8),
						#[codec(index = 50)]
						Mortal50(::core::primitive::u8),
						#[codec(index = 51)]
						Mortal51(::core::primitive::u8),
						#[codec(index = 52)]
						Mortal52(::core::primitive::u8),
						#[codec(index = 53)]
						Mortal53(::core::primitive::u8),
						#[codec(index = 54)]
						Mortal54(::core::primitive::u8),
						#[codec(index = 55)]
						Mortal55(::core::primitive::u8),
						#[codec(index = 56)]
						Mortal56(::core::primitive::u8),
						#[codec(index = 57)]
						Mortal57(::core::primitive::u8),
						#[codec(index = 58)]
						Mortal58(::core::primitive::u8),
						#[codec(index = 59)]
						Mortal59(::core::primitive::u8),
						#[codec(index = 60)]
						Mortal60(::core::primitive::u8),
						#[codec(index = 61)]
						Mortal61(::core::primitive::u8),
						#[codec(index = 62)]
						Mortal62(::core::primitive::u8),
						#[codec(index = 63)]
						Mortal63(::core::primitive::u8),
						#[codec(index = 64)]
						Mortal64(::core::primitive::u8),
						#[codec(index = 65)]
						Mortal65(::core::primitive::u8),
						#[codec(index = 66)]
						Mortal66(::core::primitive::u8),
						#[codec(index = 67)]
						Mortal67(::core::primitive::u8),
						#[codec(index = 68)]
						Mortal68(::core::primitive::u8),
						#[codec(index = 69)]
						Mortal69(::core::primitive::u8),
						#[codec(index = 70)]
						Mortal70(::core::primitive::u8),
						#[codec(index = 71)]
						Mortal71(::core::primitive::u8),
						#[codec(index = 72)]
						Mortal72(::core::primitive::u8),
						#[codec(index = 73)]
						Mortal73(::core::primitive::u8),
						#[codec(index = 74)]
						Mortal74(::core::primitive::u8),
						#[codec(index = 75)]
						Mortal75(::core::primitive::u8),
						#[codec(index = 76)]
						Mortal76(::core::primitive::u8),
						#[codec(index = 77)]
						Mortal77(::core::primitive::u8),
						#[codec(index = 78)]
						Mortal78(::core::primitive::u8),
						#[codec(index = 79)]
						Mortal79(::core::primitive::u8),
						#[codec(index = 80)]
						Mortal80(::core::primitive::u8),
						#[codec(index = 81)]
						Mortal81(::core::primitive::u8),
						#[codec(index = 82)]
						Mortal82(::core::primitive::u8),
						#[codec(index = 83)]
						Mortal83(::core::primitive::u8),
						#[codec(index = 84)]
						Mortal84(::core::primitive::u8),
						#[codec(index = 85)]
						Mortal85(::core::primitive::u8),
						#[codec(index = 86)]
						Mortal86(::core::primitive::u8),
						#[codec(index = 87)]
						Mortal87(::core::primitive::u8),
						#[codec(index = 88)]
						Mortal88(::core::primitive::u8),
						#[codec(index = 89)]
						Mortal89(::core::primitive::u8),
						#[codec(index = 90)]
						Mortal90(::core::primitive::u8),
						#[codec(index = 91)]
						Mortal91(::core::primitive::u8),
						#[codec(index = 92)]
						Mortal92(::core::primitive::u8),
						#[codec(index = 93)]
						Mortal93(::core::primitive::u8),
						#[codec(index = 94)]
						Mortal94(::core::primitive::u8),
						#[codec(index = 95)]
						Mortal95(::core::primitive::u8),
						#[codec(index = 96)]
						Mortal96(::core::primitive::u8),
						#[codec(index = 97)]
						Mortal97(::core::primitive::u8),
						#[codec(index = 98)]
						Mortal98(::core::primitive::u8),
						#[codec(index = 99)]
						Mortal99(::core::primitive::u8),
						#[codec(index = 100)]
						Mortal100(::core::primitive::u8),
						#[codec(index = 101)]
						Mortal101(::core::primitive::u8),
						#[codec(index = 102)]
						Mortal102(::core::primitive::u8),
						#[codec(index = 103)]
						Mortal103(::core::primitive::u8),
						#[codec(index = 104)]
						Mortal104(::core::primitive::u8),
						#[codec(index = 105)]
						Mortal105(::core::primitive::u8),
						#[codec(index = 106)]
						Mortal106(::core::primitive::u8),
						#[codec(index = 107)]
						Mortal107(::core::primitive::u8),
						#[codec(index = 108)]
						Mortal108(::core::primitive::u8),
						#[codec(index = 109)]
						Mortal109(::core::primitive::u8),
						#[codec(index = 110)]
						Mortal110(::core::primitive::u8),
						#[codec(index = 111)]
						Mortal111(::core::primitive::u8),
						#[codec(index = 112)]
						Mortal112(::core::primitive::u8),
						#[codec(index = 113)]
						Mortal113(::core::primitive::u8),
						#[codec(index = 114)]
						Mortal114(::core::primitive::u8),
						#[codec(index = 115)]
						Mortal115(::core::primitive::u8),
						#[codec(index = 116)]
						Mortal116(::core::primitive::u8),
						#[codec(index = 117)]
						Mortal117(::core::primitive::u8),
						#[codec(index = 118)]
						Mortal118(::core::primitive::u8),
						#[codec(index = 119)]
						Mortal119(::core::primitive::u8),
						#[codec(index = 120)]
						Mortal120(::core::primitive::u8),
						#[codec(index = 121)]
						Mortal121(::core::primitive::u8),
						#[codec(index = 122)]
						Mortal122(::core::primitive::u8),
						#[codec(index = 123)]
						Mortal123(::core::primitive::u8),
						#[codec(index = 124)]
						Mortal124(::core::primitive::u8),
						#[codec(index = 125)]
						Mortal125(::core::primitive::u8),
						#[codec(index = 126)]
						Mortal126(::core::primitive::u8),
						#[codec(index = 127)]
						Mortal127(::core::primitive::u8),
						#[codec(index = 128)]
						Mortal128(::core::primitive::u8),
						#[codec(index = 129)]
						Mortal129(::core::primitive::u8),
						#[codec(index = 130)]
						Mortal130(::core::primitive::u8),
						#[codec(index = 131)]
						Mortal131(::core::primitive::u8),
						#[codec(index = 132)]
						Mortal132(::core::primitive::u8),
						#[codec(index = 133)]
						Mortal133(::core::primitive::u8),
						#[codec(index = 134)]
						Mortal134(::core::primitive::u8),
						#[codec(index = 135)]
						Mortal135(::core::primitive::u8),
						#[codec(index = 136)]
						Mortal136(::core::primitive::u8),
						#[codec(index = 137)]
						Mortal137(::core::primitive::u8),
						#[codec(index = 138)]
						Mortal138(::core::primitive::u8),
						#[codec(index = 139)]
						Mortal139(::core::primitive::u8),
						#[codec(index = 140)]
						Mortal140(::core::primitive::u8),
						#[codec(index = 141)]
						Mortal141(::core::primitive::u8),
						#[codec(index = 142)]
						Mortal142(::core::primitive::u8),
						#[codec(index = 143)]
						Mortal143(::core::primitive::u8),
						#[codec(index = 144)]
						Mortal144(::core::primitive::u8),
						#[codec(index = 145)]
						Mortal145(::core::primitive::u8),
						#[codec(index = 146)]
						Mortal146(::core::primitive::u8),
						#[codec(index = 147)]
						Mortal147(::core::primitive::u8),
						#[codec(index = 148)]
						Mortal148(::core::primitive::u8),
						#[codec(index = 149)]
						Mortal149(::core::primitive::u8),
						#[codec(index = 150)]
						Mortal150(::core::primitive::u8),
						#[codec(index = 151)]
						Mortal151(::core::primitive::u8),
						#[codec(index = 152)]
						Mortal152(::core::primitive::u8),
						#[codec(index = 153)]
						Mortal153(::core::primitive::u8),
						#[codec(index = 154)]
						Mortal154(::core::primitive::u8),
						#[codec(index = 155)]
						Mortal155(::core::primitive::u8),
						#[codec(index = 156)]
						Mortal156(::core::primitive::u8),
						#[codec(index = 157)]
						Mortal157(::core::primitive::u8),
						#[codec(index = 158)]
						Mortal158(::core::primitive::u8),
						#[codec(index = 159)]
						Mortal159(::core::primitive::u8),
						#[codec(index = 160)]
						Mortal160(::core::primitive::u8),
						#[codec(index = 161)]
						Mortal161(::core::primitive::u8),
						#[codec(index = 162)]
						Mortal162(::core::primitive::u8),
						#[codec(index = 163)]
						Mortal163(::core::primitive::u8),
						#[codec(index = 164)]
						Mortal164(::core::primitive::u8),
						#[codec(index = 165)]
						Mortal165(::core::primitive::u8),
						#[codec(index = 166)]
						Mortal166(::core::primitive::u8),
						#[codec(index = 167)]
						Mortal167(::core::primitive::u8),
						#[codec(index = 168)]
						Mortal168(::core::primitive::u8),
						#[codec(index = 169)]
						Mortal169(::core::primitive::u8),
						#[codec(index = 170)]
						Mortal170(::core::primitive::u8),
						#[codec(index = 171)]
						Mortal171(::core::primitive::u8),
						#[codec(index = 172)]
						Mortal172(::core::primitive::u8),
						#[codec(index = 173)]
						Mortal173(::core::primitive::u8),
						#[codec(index = 174)]
						Mortal174(::core::primitive::u8),
						#[codec(index = 175)]
						Mortal175(::core::primitive::u8),
						#[codec(index = 176)]
						Mortal176(::core::primitive::u8),
						#[codec(index = 177)]
						Mortal177(::core::primitive::u8),
						#[codec(index = 178)]
						Mortal178(::core::primitive::u8),
						#[codec(index = 179)]
						Mortal179(::core::primitive::u8),
						#[codec(index = 180)]
						Mortal180(::core::primitive::u8),
						#[codec(index = 181)]
						Mortal181(::core::primitive::u8),
						#[codec(index = 182)]
						Mortal182(::core::primitive::u8),
						#[codec(index = 183)]
						Mortal183(::core::primitive::u8),
						#[codec(index = 184)]
						Mortal184(::core::primitive::u8),
						#[codec(index = 185)]
						Mortal185(::core::primitive::u8),
						#[codec(index = 186)]
						Mortal186(::core::primitive::u8),
						#[codec(index = 187)]
						Mortal187(::core::primitive::u8),
						#[codec(index = 188)]
						Mortal188(::core::primitive::u8),
						#[codec(index = 189)]
						Mortal189(::core::primitive::u8),
						#[codec(index = 190)]
						Mortal190(::core::primitive::u8),
						#[codec(index = 191)]
						Mortal191(::core::primitive::u8),
						#[codec(index = 192)]
						Mortal192(::core::primitive::u8),
						#[codec(index = 193)]
						Mortal193(::core::primitive::u8),
						#[codec(index = 194)]
						Mortal194(::core::primitive::u8),
						#[codec(index = 195)]
						Mortal195(::core::primitive::u8),
						#[codec(index = 196)]
						Mortal196(::core::primitive::u8),
						#[codec(index = 197)]
						Mortal197(::core::primitive::u8),
						#[codec(index = 198)]
						Mortal198(::core::primitive::u8),
						#[codec(index = 199)]
						Mortal199(::core::primitive::u8),
						#[codec(index = 200)]
						Mortal200(::core::primitive::u8),
						#[codec(index = 201)]
						Mortal201(::core::primitive::u8),
						#[codec(index = 202)]
						Mortal202(::core::primitive::u8),
						#[codec(index = 203)]
						Mortal203(::core::primitive::u8),
						#[codec(index = 204)]
						Mortal204(::core::primitive::u8),
						#[codec(index = 205)]
						Mortal205(::core::primitive::u8),
						#[codec(index = 206)]
						Mortal206(::core::primitive::u8),
						#[codec(index = 207)]
						Mortal207(::core::primitive::u8),
						#[codec(index = 208)]
						Mortal208(::core::primitive::u8),
						#[codec(index = 209)]
						Mortal209(::core::primitive::u8),
						#[codec(index = 210)]
						Mortal210(::core::primitive::u8),
						#[codec(index = 211)]
						Mortal211(::core::primitive::u8),
						#[codec(index = 212)]
						Mortal212(::core::primitive::u8),
						#[codec(index = 213)]
						Mortal213(::core::primitive::u8),
						#[codec(index = 214)]
						Mortal214(::core::primitive::u8),
						#[codec(index = 215)]
						Mortal215(::core::primitive::u8),
						#[codec(index = 216)]
						Mortal216(::core::primitive::u8),
						#[codec(index = 217)]
						Mortal217(::core::primitive::u8),
						#[codec(index = 218)]
						Mortal218(::core::primitive::u8),
						#[codec(index = 219)]
						Mortal219(::core::primitive::u8),
						#[codec(index = 220)]
						Mortal220(::core::primitive::u8),
						#[codec(index = 221)]
						Mortal221(::core::primitive::u8),
						#[codec(index = 222)]
						Mortal222(::core::primitive::u8),
						#[codec(index = 223)]
						Mortal223(::core::primitive::u8),
						#[codec(index = 224)]
						Mortal224(::core::primitive::u8),
						#[codec(index = 225)]
						Mortal225(::core::primitive::u8),
						#[codec(index = 226)]
						Mortal226(::core::primitive::u8),
						#[codec(index = 227)]
						Mortal227(::core::primitive::u8),
						#[codec(index = 228)]
						Mortal228(::core::primitive::u8),
						#[codec(index = 229)]
						Mortal229(::core::primitive::u8),
						#[codec(index = 230)]
						Mortal230(::core::primitive::u8),
						#[codec(index = 231)]
						Mortal231(::core::primitive::u8),
						#[codec(index = 232)]
						Mortal232(::core::primitive::u8),
						#[codec(index = 233)]
						Mortal233(::core::primitive::u8),
						#[codec(index = 234)]
						Mortal234(::core::primitive::u8),
						#[codec(index = 235)]
						Mortal235(::core::primitive::u8),
						#[codec(index = 236)]
						Mortal236(::core::primitive::u8),
						#[codec(index = 237)]
						Mortal237(::core::primitive::u8),
						#[codec(index = 238)]
						Mortal238(::core::primitive::u8),
						#[codec(index = 239)]
						Mortal239(::core::primitive::u8),
						#[codec(index = 240)]
						Mortal240(::core::primitive::u8),
						#[codec(index = 241)]
						Mortal241(::core::primitive::u8),
						#[codec(index = 242)]
						Mortal242(::core::primitive::u8),
						#[codec(index = 243)]
						Mortal243(::core::primitive::u8),
						#[codec(index = 244)]
						Mortal244(::core::primitive::u8),
						#[codec(index = 245)]
						Mortal245(::core::primitive::u8),
						#[codec(index = 246)]
						Mortal246(::core::primitive::u8),
						#[codec(index = 247)]
						Mortal247(::core::primitive::u8),
						#[codec(index = 248)]
						Mortal248(::core::primitive::u8),
						#[codec(index = 249)]
						Mortal249(::core::primitive::u8),
						#[codec(index = 250)]
						Mortal250(::core::primitive::u8),
						#[codec(index = 251)]
						Mortal251(::core::primitive::u8),
						#[codec(index = 252)]
						Mortal252(::core::primitive::u8),
						#[codec(index = 253)]
						Mortal253(::core::primitive::u8),
						#[codec(index = 254)]
						Mortal254(::core::primitive::u8),
						#[codec(index = 255)]
						Mortal255(::core::primitive::u8),
					}
				}
				pub mod header {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct Header<_0, _1> {
						pub parent_hash: ::subxt::sp_core::H256,
						#[codec(compact)]
						pub number: _0,
						pub state_root: ::subxt::sp_core::H256,
						pub extrinsics_root: ::subxt::sp_core::H256,
						pub digest: runtime_types::sp_runtime::generic::digest::Digest,
						#[codec(skip)]
						pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
					}
				}
				pub mod unchecked_extrinsic {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct UncheckedExtrinsic<_0, _1, _2, _3>(
						pub ::std::vec::Vec<::core::primitive::u8>,
						#[codec(skip)] pub ::core::marker::PhantomData<(_1, _0, _2, _3)>,
					);
				}
			}
			pub mod multiaddress {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum MultiAddress<_0, _1> {
					#[codec(index = 0)]
					Id(_0),
					#[codec(index = 1)]
					Index(#[codec(compact)] _1),
					#[codec(index = 2)]
					Raw(::std::vec::Vec<::core::primitive::u8>),
					#[codec(index = 3)]
					Address32([::core::primitive::u8; 32usize]),
					#[codec(index = 4)]
					Address20([::core::primitive::u8; 20usize]),
				}
			}
			pub mod traits {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct BlakeTwo256;
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum ArithmeticError {
				#[codec(index = 0)]
				Underflow,
				#[codec(index = 1)]
				Overflow,
				#[codec(index = 2)]
				DivisionByZero,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum DispatchError {
				#[codec(index = 0)]
				Other,
				#[codec(index = 1)]
				CannotLookup,
				#[codec(index = 2)]
				BadOrigin,
				#[codec(index = 3)]
				Module(runtime_types::sp_runtime::ModuleError),
				#[codec(index = 4)]
				ConsumerRemaining,
				#[codec(index = 5)]
				NoProviders,
				#[codec(index = 6)]
				TooManyConsumers,
				#[codec(index = 7)]
				Token(runtime_types::sp_runtime::TokenError),
				#[codec(index = 8)]
				Arithmetic(runtime_types::sp_runtime::ArithmeticError),
				#[codec(index = 9)]
				Transactional(runtime_types::sp_runtime::TransactionalError),
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct ModuleError {
				pub index: ::core::primitive::u8,
				pub error: [::core::primitive::u8; 4usize],
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum MultiSignature {
				#[codec(index = 0)]
				Ed25519(runtime_types::sp_core::ed25519::Signature),
				#[codec(index = 1)]
				Sr25519(runtime_types::sp_core::sr25519::Signature),
				#[codec(index = 2)]
				Ecdsa(runtime_types::sp_core::ecdsa::Signature),
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum TokenError {
				#[codec(index = 0)]
				NoFunds,
				#[codec(index = 1)]
				WouldDie,
				#[codec(index = 2)]
				BelowMinimum,
				#[codec(index = 3)]
				CannotCreate,
				#[codec(index = 4)]
				UnknownAsset,
				#[codec(index = 5)]
				Frozen,
				#[codec(index = 6)]
				Unsupported,
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum TransactionalError {
				#[codec(index = 0)]
				LimitReached,
				#[codec(index = 1)]
				NoLayer,
			}
		}
		pub mod sp_trie {
			use super::runtime_types;
			pub mod storage_proof {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct StorageProof {
					pub trie_nodes: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
				}
			}
		}
		pub mod sp_version {
			use super::runtime_types;
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub struct RuntimeVersion {
				pub spec_name: ::std::string::String,
				pub impl_name: ::std::string::String,
				pub authoring_version: ::core::primitive::u32,
				pub spec_version: ::core::primitive::u32,
				pub impl_version: ::core::primitive::u32,
				pub apis:
					::std::vec::Vec<([::core::primitive::u8; 8usize], ::core::primitive::u32)>,
				pub transaction_version: ::core::primitive::u32,
				pub state_version: ::core::primitive::u8,
			}
		}
		pub mod xcm {
			use super::runtime_types;
			pub mod double_encoded {
				use super::runtime_types;
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct DoubleEncoded {
					pub encoded: ::std::vec::Vec<::core::primitive::u8>,
				}
			}
			pub mod v0 {
				use super::runtime_types;
				pub mod junction {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum BodyId {
						#[codec(index = 0)]
						Unit,
						#[codec(index = 1)]
						Named(::std::vec::Vec<::core::primitive::u8>),
						#[codec(index = 2)]
						Index(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 3)]
						Executive,
						#[codec(index = 4)]
						Technical,
						#[codec(index = 5)]
						Legislative,
						#[codec(index = 6)]
						Judicial,
					}
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum BodyPart {
						#[codec(index = 0)]
						Voice,
						#[codec(index = 1)]
						Members {
							#[codec(compact)]
							count: ::core::primitive::u32,
						},
						#[codec(index = 2)]
						Fraction {
							#[codec(compact)]
							nom: ::core::primitive::u32,
							#[codec(compact)]
							denom: ::core::primitive::u32,
						},
						#[codec(index = 3)]
						AtLeastProportion {
							#[codec(compact)]
							nom: ::core::primitive::u32,
							#[codec(compact)]
							denom: ::core::primitive::u32,
						},
						#[codec(index = 4)]
						MoreThanProportion {
							#[codec(compact)]
							nom: ::core::primitive::u32,
							#[codec(compact)]
							denom: ::core::primitive::u32,
						},
					}
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum Junction {
						#[codec(index = 0)]
						Parent,
						#[codec(index = 1)]
						Parachain(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 2)]
						AccountId32 {
							network: runtime_types::xcm::v0::junction::NetworkId,
							id: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 3)]
						AccountIndex64 {
							network: runtime_types::xcm::v0::junction::NetworkId,
							#[codec(compact)]
							index: ::core::primitive::u64,
						},
						#[codec(index = 4)]
						AccountKey20 {
							network: runtime_types::xcm::v0::junction::NetworkId,
							key: [::core::primitive::u8; 20usize],
						},
						#[codec(index = 5)]
						PalletInstance(::core::primitive::u8),
						#[codec(index = 6)]
						GeneralIndex(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 7)]
						GeneralKey(::std::vec::Vec<::core::primitive::u8>),
						#[codec(index = 8)]
						OnlyChild,
						#[codec(index = 9)]
						Plurality {
							id: runtime_types::xcm::v0::junction::BodyId,
							part: runtime_types::xcm::v0::junction::BodyPart,
						},
					}
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum NetworkId {
						#[codec(index = 0)]
						Any,
						#[codec(index = 1)]
						Named(::std::vec::Vec<::core::primitive::u8>),
						#[codec(index = 2)]
						Polkadot,
						#[codec(index = 3)]
						Kusama,
					}
				}
				pub mod multi_asset {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum MultiAsset {
						#[codec(index = 0)]
						None,
						#[codec(index = 1)]
						All,
						#[codec(index = 2)]
						AllFungible,
						#[codec(index = 3)]
						AllNonFungible,
						#[codec(index = 4)]
						AllAbstractFungible { id: ::std::vec::Vec<::core::primitive::u8> },
						#[codec(index = 5)]
						AllAbstractNonFungible { class: ::std::vec::Vec<::core::primitive::u8> },
						#[codec(index = 6)]
						AllConcreteFungible {
							id: runtime_types::xcm::v0::multi_location::MultiLocation,
						},
						#[codec(index = 7)]
						AllConcreteNonFungible {
							class: runtime_types::xcm::v0::multi_location::MultiLocation,
						},
						#[codec(index = 8)]
						AbstractFungible {
							id: ::std::vec::Vec<::core::primitive::u8>,
							#[codec(compact)]
							amount: ::core::primitive::u128,
						},
						#[codec(index = 9)]
						AbstractNonFungible {
							class: ::std::vec::Vec<::core::primitive::u8>,
							instance: runtime_types::xcm::v1::multiasset::AssetInstance,
						},
						#[codec(index = 10)]
						ConcreteFungible {
							id: runtime_types::xcm::v0::multi_location::MultiLocation,
							#[codec(compact)]
							amount: ::core::primitive::u128,
						},
						#[codec(index = 11)]
						ConcreteNonFungible {
							class: runtime_types::xcm::v0::multi_location::MultiLocation,
							instance: runtime_types::xcm::v1::multiasset::AssetInstance,
						},
					}
				}
				pub mod multi_location {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum MultiLocation {
						#[codec(index = 0)]
						Null,
						#[codec(index = 1)]
						X1(runtime_types::xcm::v0::junction::Junction),
						#[codec(index = 2)]
						X2(
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
						),
						#[codec(index = 3)]
						X3(
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
						),
						#[codec(index = 4)]
						X4(
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
						),
						#[codec(index = 5)]
						X5(
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
						),
						#[codec(index = 6)]
						X6(
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
						),
						#[codec(index = 7)]
						X7(
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
						),
						#[codec(index = 8)]
						X8(
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
						),
					}
				}
				pub mod order {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum Order {
						#[codec(index = 0)]
						Null,
						#[codec(index = 1)]
						DepositAsset {
							assets:
								::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
							dest: runtime_types::xcm::v0::multi_location::MultiLocation,
						},
						#[codec(index = 2)]
						DepositReserveAsset {
							assets:
								::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
							dest: runtime_types::xcm::v0::multi_location::MultiLocation,
							effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
						},
						#[codec(index = 3)]
						ExchangeAsset {
							give: ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
							receive:
								::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
						},
						#[codec(index = 4)]
						InitiateReserveWithdraw {
							assets:
								::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
							reserve: runtime_types::xcm::v0::multi_location::MultiLocation,
							effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
						},
						#[codec(index = 5)]
						InitiateTeleport {
							assets:
								::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
							dest: runtime_types::xcm::v0::multi_location::MultiLocation,
							effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
						},
						#[codec(index = 6)]
						QueryHolding {
							#[codec(compact)]
							query_id: ::core::primitive::u64,
							dest: runtime_types::xcm::v0::multi_location::MultiLocation,
							assets:
								::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
						},
						#[codec(index = 7)]
						BuyExecution {
							fees: runtime_types::xcm::v0::multi_asset::MultiAsset,
							weight: ::core::primitive::u64,
							debt: ::core::primitive::u64,
							halt_on_error: ::core::primitive::bool,
							xcm: ::std::vec::Vec<runtime_types::xcm::v0::Xcm>,
						},
					}
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum OriginKind {
					#[codec(index = 0)]
					Native,
					#[codec(index = 1)]
					SovereignAccount,
					#[codec(index = 2)]
					Superuser,
					#[codec(index = 3)]
					Xcm,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum Response {
					#[codec(index = 0)]
					Assets(::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>),
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum Xcm {
					#[codec(index = 0)]
					WithdrawAsset {
						assets: ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
						effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
					},
					#[codec(index = 1)]
					ReserveAssetDeposit {
						assets: ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
						effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
					},
					#[codec(index = 2)]
					TeleportAsset {
						assets: ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
						effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
					},
					#[codec(index = 3)]
					QueryResponse {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v0::Response,
					},
					#[codec(index = 4)]
					TransferAsset {
						assets: ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
						dest: runtime_types::xcm::v0::multi_location::MultiLocation,
					},
					#[codec(index = 5)]
					TransferReserveAsset {
						assets: ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
						dest: runtime_types::xcm::v0::multi_location::MultiLocation,
						effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
					},
					#[codec(index = 6)]
					Transact {
						origin_type: runtime_types::xcm::v0::OriginKind,
						require_weight_at_most: ::core::primitive::u64,
						call: runtime_types::xcm::double_encoded::DoubleEncoded,
					},
					#[codec(index = 7)]
					HrmpNewChannelOpenRequest {
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						max_message_size: ::core::primitive::u32,
						#[codec(compact)]
						max_capacity: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					HrmpChannelAccepted {
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					HrmpChannelClosing {
						#[codec(compact)]
						initiator: ::core::primitive::u32,
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					RelayedFrom {
						who: runtime_types::xcm::v0::multi_location::MultiLocation,
						message: ::std::boxed::Box<runtime_types::xcm::v0::Xcm>,
					},
				}
			}
			pub mod v1 {
				use super::runtime_types;
				pub mod junction {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum Junction {
						#[codec(index = 0)]
						Parachain(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 1)]
						AccountId32 {
							network: runtime_types::xcm::v0::junction::NetworkId,
							id: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 2)]
						AccountIndex64 {
							network: runtime_types::xcm::v0::junction::NetworkId,
							#[codec(compact)]
							index: ::core::primitive::u64,
						},
						#[codec(index = 3)]
						AccountKey20 {
							network: runtime_types::xcm::v0::junction::NetworkId,
							key: [::core::primitive::u8; 20usize],
						},
						#[codec(index = 4)]
						PalletInstance(::core::primitive::u8),
						#[codec(index = 5)]
						GeneralIndex(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 6)]
						GeneralKey(::std::vec::Vec<::core::primitive::u8>),
						#[codec(index = 7)]
						OnlyChild,
						#[codec(index = 8)]
						Plurality {
							id: runtime_types::xcm::v0::junction::BodyId,
							part: runtime_types::xcm::v0::junction::BodyPart,
						},
					}
				}
				pub mod multiasset {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum AssetId {
						#[codec(index = 0)]
						Concrete(runtime_types::xcm::v1::multilocation::MultiLocation),
						#[codec(index = 1)]
						Abstract(::std::vec::Vec<::core::primitive::u8>),
					}
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum AssetInstance {
						#[codec(index = 0)]
						Undefined,
						#[codec(index = 1)]
						Index(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 2)]
						Array4([::core::primitive::u8; 4usize]),
						#[codec(index = 3)]
						Array8([::core::primitive::u8; 8usize]),
						#[codec(index = 4)]
						Array16([::core::primitive::u8; 16usize]),
						#[codec(index = 5)]
						Array32([::core::primitive::u8; 32usize]),
						#[codec(index = 6)]
						Blob(::std::vec::Vec<::core::primitive::u8>),
					}
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum Fungibility {
						#[codec(index = 0)]
						Fungible(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 1)]
						NonFungible(runtime_types::xcm::v1::multiasset::AssetInstance),
					}
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct MultiAsset {
						pub id: runtime_types::xcm::v1::multiasset::AssetId,
						pub fun: runtime_types::xcm::v1::multiasset::Fungibility,
					}
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum MultiAssetFilter {
						#[codec(index = 0)]
						Definite(runtime_types::xcm::v1::multiasset::MultiAssets),
						#[codec(index = 1)]
						Wild(runtime_types::xcm::v1::multiasset::WildMultiAsset),
					}
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct MultiAssets(
						pub ::std::vec::Vec<runtime_types::xcm::v1::multiasset::MultiAsset>,
					);
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum WildFungibility {
						#[codec(index = 0)]
						Fungible,
						#[codec(index = 1)]
						NonFungible,
					}
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum WildMultiAsset {
						#[codec(index = 0)]
						All,
						#[codec(index = 1)]
						AllOf {
							id: runtime_types::xcm::v1::multiasset::AssetId,
							fun: runtime_types::xcm::v1::multiasset::WildFungibility,
						},
					}
				}
				pub mod multilocation {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum Junctions {
						#[codec(index = 0)]
						Here,
						#[codec(index = 1)]
						X1(runtime_types::xcm::v1::junction::Junction),
						#[codec(index = 2)]
						X2(
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
						),
						#[codec(index = 3)]
						X3(
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
						),
						#[codec(index = 4)]
						X4(
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
						),
						#[codec(index = 5)]
						X5(
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
						),
						#[codec(index = 6)]
						X6(
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
						),
						#[codec(index = 7)]
						X7(
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
						),
						#[codec(index = 8)]
						X8(
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
						),
					}
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub struct MultiLocation {
						pub parents: ::core::primitive::u8,
						pub interior: runtime_types::xcm::v1::multilocation::Junctions,
					}
				}
				pub mod order {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum Order {
						#[codec(index = 0)]
						Noop,
						#[codec(index = 1)]
						DepositAsset {
							assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
							max_assets: ::core::primitive::u32,
							beneficiary: runtime_types::xcm::v1::multilocation::MultiLocation,
						},
						#[codec(index = 2)]
						DepositReserveAsset {
							assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
							max_assets: ::core::primitive::u32,
							dest: runtime_types::xcm::v1::multilocation::MultiLocation,
							effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
						},
						#[codec(index = 3)]
						ExchangeAsset {
							give: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
							receive: runtime_types::xcm::v1::multiasset::MultiAssets,
						},
						#[codec(index = 4)]
						InitiateReserveWithdraw {
							assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
							reserve: runtime_types::xcm::v1::multilocation::MultiLocation,
							effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
						},
						#[codec(index = 5)]
						InitiateTeleport {
							assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
							dest: runtime_types::xcm::v1::multilocation::MultiLocation,
							effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
						},
						#[codec(index = 6)]
						QueryHolding {
							#[codec(compact)]
							query_id: ::core::primitive::u64,
							dest: runtime_types::xcm::v1::multilocation::MultiLocation,
							assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
						},
						#[codec(index = 7)]
						BuyExecution {
							fees: runtime_types::xcm::v1::multiasset::MultiAsset,
							weight: ::core::primitive::u64,
							debt: ::core::primitive::u64,
							halt_on_error: ::core::primitive::bool,
							instructions: ::std::vec::Vec<runtime_types::xcm::v1::Xcm>,
						},
					}
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum Response {
					#[codec(index = 0)]
					Assets(runtime_types::xcm::v1::multiasset::MultiAssets),
					#[codec(index = 1)]
					Version(::core::primitive::u32),
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum Xcm {
					#[codec(index = 0)]
					WithdrawAsset {
						assets: runtime_types::xcm::v1::multiasset::MultiAssets,
						effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
					},
					#[codec(index = 1)]
					ReserveAssetDeposited {
						assets: runtime_types::xcm::v1::multiasset::MultiAssets,
						effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
					},
					#[codec(index = 2)]
					ReceiveTeleportedAsset {
						assets: runtime_types::xcm::v1::multiasset::MultiAssets,
						effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
					},
					#[codec(index = 3)]
					QueryResponse {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v1::Response,
					},
					#[codec(index = 4)]
					TransferAsset {
						assets: runtime_types::xcm::v1::multiasset::MultiAssets,
						beneficiary: runtime_types::xcm::v1::multilocation::MultiLocation,
					},
					#[codec(index = 5)]
					TransferReserveAsset {
						assets: runtime_types::xcm::v1::multiasset::MultiAssets,
						dest: runtime_types::xcm::v1::multilocation::MultiLocation,
						effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
					},
					#[codec(index = 6)]
					Transact {
						origin_type: runtime_types::xcm::v0::OriginKind,
						require_weight_at_most: ::core::primitive::u64,
						call: runtime_types::xcm::double_encoded::DoubleEncoded,
					},
					#[codec(index = 7)]
					HrmpNewChannelOpenRequest {
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						max_message_size: ::core::primitive::u32,
						#[codec(compact)]
						max_capacity: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					HrmpChannelAccepted {
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					HrmpChannelClosing {
						#[codec(compact)]
						initiator: ::core::primitive::u32,
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					RelayedFrom {
						who: runtime_types::xcm::v1::multilocation::Junctions,
						message: ::std::boxed::Box<runtime_types::xcm::v1::Xcm>,
					},
					#[codec(index = 11)]
					SubscribeVersion {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 12)]
					UnsubscribeVersion,
				}
			}
			pub mod v2 {
				use super::runtime_types;
				pub mod traits {
					use super::runtime_types;
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum Error {
						#[codec(index = 0)]
						Overflow,
						#[codec(index = 1)]
						Unimplemented,
						#[codec(index = 2)]
						UntrustedReserveLocation,
						#[codec(index = 3)]
						UntrustedTeleportLocation,
						#[codec(index = 4)]
						MultiLocationFull,
						#[codec(index = 5)]
						MultiLocationNotInvertible,
						#[codec(index = 6)]
						BadOrigin,
						#[codec(index = 7)]
						InvalidLocation,
						#[codec(index = 8)]
						AssetNotFound,
						#[codec(index = 9)]
						FailedToTransactAsset,
						#[codec(index = 10)]
						NotWithdrawable,
						#[codec(index = 11)]
						LocationCannotHold,
						#[codec(index = 12)]
						ExceedsMaxMessageSize,
						#[codec(index = 13)]
						DestinationUnsupported,
						#[codec(index = 14)]
						Transport,
						#[codec(index = 15)]
						Unroutable,
						#[codec(index = 16)]
						UnknownClaim,
						#[codec(index = 17)]
						FailedToDecode,
						#[codec(index = 18)]
						MaxWeightInvalid,
						#[codec(index = 19)]
						NotHoldingFees,
						#[codec(index = 20)]
						TooExpensive,
						#[codec(index = 21)]
						Trap(::core::primitive::u64),
						#[codec(index = 22)]
						UnhandledXcmVersion,
						#[codec(index = 23)]
						WeightLimitReached(::core::primitive::u64),
						#[codec(index = 24)]
						Barrier,
						#[codec(index = 25)]
						WeightNotComputable,
					}
					#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
					pub enum Outcome {
						#[codec(index = 0)]
						Complete(::core::primitive::u64),
						#[codec(index = 1)]
						Incomplete(::core::primitive::u64, runtime_types::xcm::v2::traits::Error),
						#[codec(index = 2)]
						Error(runtime_types::xcm::v2::traits::Error),
					}
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum Instruction {
					#[codec(index = 0)]
					WithdrawAsset(runtime_types::xcm::v1::multiasset::MultiAssets),
					#[codec(index = 1)]
					ReserveAssetDeposited(runtime_types::xcm::v1::multiasset::MultiAssets),
					#[codec(index = 2)]
					ReceiveTeleportedAsset(runtime_types::xcm::v1::multiasset::MultiAssets),
					#[codec(index = 3)]
					QueryResponse {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v2::Response,
						#[codec(compact)]
						max_weight: ::core::primitive::u64,
					},
					#[codec(index = 4)]
					TransferAsset {
						assets: runtime_types::xcm::v1::multiasset::MultiAssets,
						beneficiary: runtime_types::xcm::v1::multilocation::MultiLocation,
					},
					#[codec(index = 5)]
					TransferReserveAsset {
						assets: runtime_types::xcm::v1::multiasset::MultiAssets,
						dest: runtime_types::xcm::v1::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 6)]
					Transact {
						origin_type: runtime_types::xcm::v0::OriginKind,
						#[codec(compact)]
						require_weight_at_most: ::core::primitive::u64,
						call: runtime_types::xcm::double_encoded::DoubleEncoded,
					},
					#[codec(index = 7)]
					HrmpNewChannelOpenRequest {
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						max_message_size: ::core::primitive::u32,
						#[codec(compact)]
						max_capacity: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					HrmpChannelAccepted {
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					HrmpChannelClosing {
						#[codec(compact)]
						initiator: ::core::primitive::u32,
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					ClearOrigin,
					#[codec(index = 11)]
					DescendOrigin(runtime_types::xcm::v1::multilocation::Junctions),
					#[codec(index = 12)]
					ReportError {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						dest: runtime_types::xcm::v1::multilocation::MultiLocation,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 13)]
					DepositAsset {
						assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_assets: ::core::primitive::u32,
						beneficiary: runtime_types::xcm::v1::multilocation::MultiLocation,
					},
					#[codec(index = 14)]
					DepositReserveAsset {
						assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_assets: ::core::primitive::u32,
						dest: runtime_types::xcm::v1::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 15)]
					ExchangeAsset {
						give: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
						receive: runtime_types::xcm::v1::multiasset::MultiAssets,
					},
					#[codec(index = 16)]
					InitiateReserveWithdraw {
						assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
						reserve: runtime_types::xcm::v1::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 17)]
					InitiateTeleport {
						assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
						dest: runtime_types::xcm::v1::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 18)]
					QueryHolding {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						dest: runtime_types::xcm::v1::multilocation::MultiLocation,
						assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 19)]
					BuyExecution {
						fees: runtime_types::xcm::v1::multiasset::MultiAsset,
						weight_limit: runtime_types::xcm::v2::WeightLimit,
					},
					#[codec(index = 20)]
					RefundSurplus,
					#[codec(index = 21)]
					SetErrorHandler(runtime_types::xcm::v2::Xcm),
					#[codec(index = 22)]
					SetAppendix(runtime_types::xcm::v2::Xcm),
					#[codec(index = 23)]
					ClearError,
					#[codec(index = 24)]
					ClaimAsset {
						assets: runtime_types::xcm::v1::multiasset::MultiAssets,
						ticket: runtime_types::xcm::v1::multilocation::MultiLocation,
					},
					#[codec(index = 25)]
					Trap(#[codec(compact)] ::core::primitive::u64),
					#[codec(index = 26)]
					SubscribeVersion {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 27)]
					UnsubscribeVersion,
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum Response {
					#[codec(index = 0)]
					Null,
					#[codec(index = 1)]
					Assets(runtime_types::xcm::v1::multiasset::MultiAssets),
					#[codec(index = 2)]
					ExecutionResult(
						::core::option::Option<(
							::core::primitive::u32,
							runtime_types::xcm::v2::traits::Error,
						)>,
					),
					#[codec(index = 3)]
					Version(::core::primitive::u32),
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub enum WeightLimit {
					#[codec(index = 0)]
					Unlimited,
					#[codec(index = 1)]
					Limited(#[codec(compact)] ::core::primitive::u64),
				}
				#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
				pub struct Xcm(pub ::std::vec::Vec<runtime_types::xcm::v2::Instruction>);
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum VersionedMultiAsset {
				#[codec(index = 0)]
				V0(runtime_types::xcm::v0::multi_asset::MultiAsset),
				#[codec(index = 1)]
				V1(runtime_types::xcm::v1::multiasset::MultiAsset),
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum VersionedMultiAssets {
				#[codec(index = 0)]
				V0(::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>),
				#[codec(index = 1)]
				V1(runtime_types::xcm::v1::multiasset::MultiAssets),
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum VersionedMultiLocation {
				#[codec(index = 0)]
				V0(runtime_types::xcm::v0::multi_location::MultiLocation),
				#[codec(index = 1)]
				V1(runtime_types::xcm::v1::multilocation::MultiLocation),
			}
			#[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
			pub enum VersionedXcm {
				#[codec(index = 0)]
				V0(runtime_types::xcm::v0::Xcm),
				#[codec(index = 1)]
				V1(runtime_types::xcm::v1::Xcm),
				#[codec(index = 2)]
				V2(runtime_types::xcm::v2::Xcm),
			}
		}
	}
	#[doc = r" The default error type returned when there is a runtime issue."]
	pub type DispatchError = runtime_types::sp_runtime::DispatchError;
	impl ::subxt::HasModuleError for runtime_types::sp_runtime::DispatchError {
		fn module_error_data(&self) -> Option<::subxt::ModuleErrorData> {
			if let Self::Module(module_error) = self {
				Some(::subxt::ModuleErrorData {
					pallet_index: module_error.index,
					error: module_error.error,
				})
			} else {
				None
			}
		}
	}
	pub struct RuntimeApi<T: ::subxt::Config, X> {
		pub client: ::subxt::Client<T>,
		marker: ::core::marker::PhantomData<X>,
	}
	impl<T: ::subxt::Config, X> Clone for RuntimeApi<T, X> {
		fn clone(&self) -> Self {
			Self { client: self.client.clone(), marker: ::core::marker::PhantomData }
		}
	}
	impl<T, X> ::core::convert::From<::subxt::Client<T>> for RuntimeApi<T, X>
	where
		T: ::subxt::Config,
		X: ::subxt::extrinsic::ExtrinsicParams<T>,
	{
		fn from(client: ::subxt::Client<T>) -> Self {
			Self { client, marker: ::core::marker::PhantomData }
		}
	}
	impl<'a, T, X> RuntimeApi<T, X>
	where
		T: ::subxt::Config,
		X: ::subxt::extrinsic::ExtrinsicParams<T>,
	{
		pub fn validate_metadata(&'a self) -> Result<(), ::subxt::MetadataError> {
			let runtime_metadata_hash = {
				let locked_metadata = self.client.metadata();
				let metadata = locked_metadata.read();
				metadata.metadata_hash(&PALLETS)
			};
			if runtime_metadata_hash !=
				[
					112u8, 31u8, 169u8, 1u8, 125u8, 36u8, 115u8, 176u8, 56u8, 206u8, 68u8, 65u8,
					124u8, 210u8, 154u8, 181u8, 204u8, 194u8, 171u8, 26u8, 72u8, 124u8, 109u8,
					40u8, 176u8, 24u8, 201u8, 235u8, 51u8, 156u8, 171u8, 97u8,
				] {
				Err(::subxt::MetadataError::IncompatibleMetadata)
			} else {
				Ok(())
			}
		}
		pub fn constants(&'a self) -> ConstantsApi<'a, T> {
			ConstantsApi { client: &self.client }
		}
		pub fn storage(&'a self) -> StorageApi<'a, T> {
			StorageApi { client: &self.client }
		}
		pub fn tx(&'a self) -> TransactionApi<'a, T, X> {
			TransactionApi { client: &self.client, marker: ::core::marker::PhantomData }
		}
		pub fn events(&'a self) -> EventsApi<'a, T> {
			EventsApi { client: &self.client }
		}
	}
	pub struct EventsApi<'a, T: ::subxt::Config> {
		client: &'a ::subxt::Client<T>,
	}
	impl<'a, T: ::subxt::Config> EventsApi<'a, T> {
		pub async fn at(
			&self,
			block_hash: T::Hash,
		) -> Result<::subxt::events::Events<T, Event>, ::subxt::BasicError> {
			::subxt::events::at::<T, Event>(self.client, block_hash).await
		}
		pub async fn subscribe(
			&self,
		) -> Result<
			::subxt::events::EventSubscription<'a, ::subxt::events::EventSub<T::Header>, T, Event>,
			::subxt::BasicError,
		> {
			::subxt::events::subscribe::<T, Event>(self.client).await
		}
		pub async fn subscribe_finalized(
			&self,
		) -> Result<
			::subxt::events::EventSubscription<
				'a,
				::subxt::events::FinalizedEventSub<'a, T::Header>,
				T,
				Event,
			>,
			::subxt::BasicError,
		> {
			::subxt::events::subscribe_finalized::<T, Event>(self.client).await
		}
	}
	pub struct ConstantsApi<'a, T: ::subxt::Config> {
		client: &'a ::subxt::Client<T>,
	}
	impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
		pub fn system(&self) -> system::constants::ConstantsApi<'a, T> {
			system::constants::ConstantsApi::new(self.client)
		}
		pub fn timestamp(&self) -> timestamp::constants::ConstantsApi<'a, T> {
			timestamp::constants::ConstantsApi::new(self.client)
		}
		pub fn transaction_payment(&self) -> transaction_payment::constants::ConstantsApi<'a, T> {
			transaction_payment::constants::ConstantsApi::new(self.client)
		}
		pub fn indices(&self) -> indices::constants::ConstantsApi<'a, T> {
			indices::constants::ConstantsApi::new(self.client)
		}
		pub fn balances(&self) -> balances::constants::ConstantsApi<'a, T> {
			balances::constants::ConstantsApi::new(self.client)
		}
		pub fn identity(&self) -> identity::constants::ConstantsApi<'a, T> {
			identity::constants::ConstantsApi::new(self.client)
		}
		pub fn multisig(&self) -> multisig::constants::ConstantsApi<'a, T> {
			multisig::constants::ConstantsApi::new(self.client)
		}
		pub fn authorship(&self) -> authorship::constants::ConstantsApi<'a, T> {
			authorship::constants::ConstantsApi::new(self.client)
		}
		pub fn treasury(&self) -> treasury::constants::ConstantsApi<'a, T> {
			treasury::constants::ConstantsApi::new(self.client)
		}
		pub fn democracy(&self) -> democracy::constants::ConstantsApi<'a, T> {
			democracy::constants::ConstantsApi::new(self.client)
		}
		pub fn scheduler(&self) -> scheduler::constants::ConstantsApi<'a, T> {
			scheduler::constants::ConstantsApi::new(self.client)
		}
		pub fn utility(&self) -> utility::constants::ConstantsApi<'a, T> {
			utility::constants::ConstantsApi::new(self.client)
		}
		pub fn proxy(&self) -> proxy::constants::ConstantsApi<'a, T> {
			proxy::constants::ConstantsApi::new(self.client)
		}
		pub fn x_tokens(&self) -> x_tokens::constants::ConstantsApi<'a, T> {
			x_tokens::constants::ConstantsApi::new(self.client)
		}
		pub fn tokens(&self) -> tokens::constants::ConstantsApi<'a, T> {
			tokens::constants::ConstantsApi::new(self.client)
		}
		pub fn oracle(&self) -> oracle::constants::ConstantsApi<'a, T> {
			oracle::constants::ConstantsApi::new(self.client)
		}
		pub fn vault(&self) -> vault::constants::ConstantsApi<'a, T> {
			vault::constants::ConstantsApi::new(self.client)
		}
		pub fn assets(&self) -> assets::constants::ConstantsApi<'a, T> {
			assets::constants::ConstantsApi::new(self.client)
		}
		pub fn crowdloan_rewards(&self) -> crowdloan_rewards::constants::ConstantsApi<'a, T> {
			crowdloan_rewards::constants::ConstantsApi::new(self.client)
		}
		pub fn vesting(&self) -> vesting::constants::ConstantsApi<'a, T> {
			vesting::constants::ConstantsApi::new(self.client)
		}
		pub fn bonded_finance(&self) -> bonded_finance::constants::ConstantsApi<'a, T> {
			bonded_finance::constants::ConstantsApi::new(self.client)
		}
		pub fn dutch_auction(&self) -> dutch_auction::constants::ConstantsApi<'a, T> {
			dutch_auction::constants::ConstantsApi::new(self.client)
		}
		pub fn mosaic(&self) -> mosaic::constants::ConstantsApi<'a, T> {
			mosaic::constants::ConstantsApi::new(self.client)
		}
		pub fn liquidations(&self) -> liquidations::constants::ConstantsApi<'a, T> {
			liquidations::constants::ConstantsApi::new(self.client)
		}
		pub fn lending(&self) -> lending::constants::ConstantsApi<'a, T> {
			lending::constants::ConstantsApi::new(self.client)
		}
		pub fn pablo(&self) -> pablo::constants::ConstantsApi<'a, T> {
			pablo::constants::ConstantsApi::new(self.client)
		}
		pub fn dex_router(&self) -> dex_router::constants::ConstantsApi<'a, T> {
			dex_router::constants::ConstantsApi::new(self.client)
		}
		pub fn staking_rewards(&self) -> staking_rewards::constants::ConstantsApi<'a, T> {
			staking_rewards::constants::ConstantsApi::new(self.client)
		}
		pub fn call_filter(&self) -> call_filter::constants::ConstantsApi<'a, T> {
			call_filter::constants::ConstantsApi::new(self.client)
		}
		pub fn transfer(&self) -> transfer::constants::ConstantsApi<'a, T> {
			transfer::constants::ConstantsApi::new(self.client)
		}
		pub fn ibc(&self) -> ibc::constants::ConstantsApi<'a, T> {
			ibc::constants::ConstantsApi::new(self.client)
		}
	}
	pub struct StorageApi<'a, T: ::subxt::Config> {
		client: &'a ::subxt::Client<T>,
	}
	impl<'a, T> StorageApi<'a, T>
	where
		T: ::subxt::Config,
	{
		pub fn system(&self) -> system::storage::StorageApi<'a, T> {
			system::storage::StorageApi::new(self.client)
		}
		pub fn timestamp(&self) -> timestamp::storage::StorageApi<'a, T> {
			timestamp::storage::StorageApi::new(self.client)
		}
		pub fn sudo(&self) -> sudo::storage::StorageApi<'a, T> {
			sudo::storage::StorageApi::new(self.client)
		}
		pub fn randomness_collective_flip(
			&self,
		) -> randomness_collective_flip::storage::StorageApi<'a, T> {
			randomness_collective_flip::storage::StorageApi::new(self.client)
		}
		pub fn transaction_payment(&self) -> transaction_payment::storage::StorageApi<'a, T> {
			transaction_payment::storage::StorageApi::new(self.client)
		}
		pub fn indices(&self) -> indices::storage::StorageApi<'a, T> {
			indices::storage::StorageApi::new(self.client)
		}
		pub fn balances(&self) -> balances::storage::StorageApi<'a, T> {
			balances::storage::StorageApi::new(self.client)
		}
		pub fn identity(&self) -> identity::storage::StorageApi<'a, T> {
			identity::storage::StorageApi::new(self.client)
		}
		pub fn multisig(&self) -> multisig::storage::StorageApi<'a, T> {
			multisig::storage::StorageApi::new(self.client)
		}
		pub fn parachain_system(&self) -> parachain_system::storage::StorageApi<'a, T> {
			parachain_system::storage::StorageApi::new(self.client)
		}
		pub fn parachain_info(&self) -> parachain_info::storage::StorageApi<'a, T> {
			parachain_info::storage::StorageApi::new(self.client)
		}
		pub fn authorship(&self) -> authorship::storage::StorageApi<'a, T> {
			authorship::storage::StorageApi::new(self.client)
		}
		pub fn collator_selection(&self) -> collator_selection::storage::StorageApi<'a, T> {
			collator_selection::storage::StorageApi::new(self.client)
		}
		pub fn session(&self) -> session::storage::StorageApi<'a, T> {
			session::storage::StorageApi::new(self.client)
		}
		pub fn aura(&self) -> aura::storage::StorageApi<'a, T> {
			aura::storage::StorageApi::new(self.client)
		}
		pub fn council(&self) -> council::storage::StorageApi<'a, T> {
			council::storage::StorageApi::new(self.client)
		}
		pub fn council_membership(&self) -> council_membership::storage::StorageApi<'a, T> {
			council_membership::storage::StorageApi::new(self.client)
		}
		pub fn treasury(&self) -> treasury::storage::StorageApi<'a, T> {
			treasury::storage::StorageApi::new(self.client)
		}
		pub fn democracy(&self) -> democracy::storage::StorageApi<'a, T> {
			democracy::storage::StorageApi::new(self.client)
		}
		pub fn scheduler(&self) -> scheduler::storage::StorageApi<'a, T> {
			scheduler::storage::StorageApi::new(self.client)
		}
		pub fn preimage(&self) -> preimage::storage::StorageApi<'a, T> {
			preimage::storage::StorageApi::new(self.client)
		}
		pub fn proxy(&self) -> proxy::storage::StorageApi<'a, T> {
			proxy::storage::StorageApi::new(self.client)
		}
		pub fn xcmp_queue(&self) -> xcmp_queue::storage::StorageApi<'a, T> {
			xcmp_queue::storage::StorageApi::new(self.client)
		}
		pub fn dmp_queue(&self) -> dmp_queue::storage::StorageApi<'a, T> {
			dmp_queue::storage::StorageApi::new(self.client)
		}
		pub fn x_tokens(&self) -> x_tokens::storage::StorageApi<'a, T> {
			x_tokens::storage::StorageApi::new(self.client)
		}
		pub fn unknown_tokens(&self) -> unknown_tokens::storage::StorageApi<'a, T> {
			unknown_tokens::storage::StorageApi::new(self.client)
		}
		pub fn tokens(&self) -> tokens::storage::StorageApi<'a, T> {
			tokens::storage::StorageApi::new(self.client)
		}
		pub fn oracle(&self) -> oracle::storage::StorageApi<'a, T> {
			oracle::storage::StorageApi::new(self.client)
		}
		pub fn currency_factory(&self) -> currency_factory::storage::StorageApi<'a, T> {
			currency_factory::storage::StorageApi::new(self.client)
		}
		pub fn vault(&self) -> vault::storage::StorageApi<'a, T> {
			vault::storage::StorageApi::new(self.client)
		}
		pub fn assets_registry(&self) -> assets_registry::storage::StorageApi<'a, T> {
			assets_registry::storage::StorageApi::new(self.client)
		}
		pub fn governance_registry(&self) -> governance_registry::storage::StorageApi<'a, T> {
			governance_registry::storage::StorageApi::new(self.client)
		}
		pub fn assets(&self) -> assets::storage::StorageApi<'a, T> {
			assets::storage::StorageApi::new(self.client)
		}
		pub fn crowdloan_rewards(&self) -> crowdloan_rewards::storage::StorageApi<'a, T> {
			crowdloan_rewards::storage::StorageApi::new(self.client)
		}
		pub fn vesting(&self) -> vesting::storage::StorageApi<'a, T> {
			vesting::storage::StorageApi::new(self.client)
		}
		pub fn bonded_finance(&self) -> bonded_finance::storage::StorageApi<'a, T> {
			bonded_finance::storage::StorageApi::new(self.client)
		}
		pub fn dutch_auction(&self) -> dutch_auction::storage::StorageApi<'a, T> {
			dutch_auction::storage::StorageApi::new(self.client)
		}
		pub fn mosaic(&self) -> mosaic::storage::StorageApi<'a, T> {
			mosaic::storage::StorageApi::new(self.client)
		}
		pub fn liquidations(&self) -> liquidations::storage::StorageApi<'a, T> {
			liquidations::storage::StorageApi::new(self.client)
		}
		pub fn lending(&self) -> lending::storage::StorageApi<'a, T> {
			lending::storage::StorageApi::new(self.client)
		}
		pub fn pablo(&self) -> pablo::storage::StorageApi<'a, T> {
			pablo::storage::StorageApi::new(self.client)
		}
		pub fn dex_router(&self) -> dex_router::storage::StorageApi<'a, T> {
			dex_router::storage::StorageApi::new(self.client)
		}
		pub fn call_filter(&self) -> call_filter::storage::StorageApi<'a, T> {
			call_filter::storage::StorageApi::new(self.client)
		}
		pub fn ibc_ping(&self) -> ibc_ping::storage::StorageApi<'a, T> {
			ibc_ping::storage::StorageApi::new(self.client)
		}
		pub fn transfer(&self) -> transfer::storage::StorageApi<'a, T> {
			transfer::storage::StorageApi::new(self.client)
		}
		pub fn ibc(&self) -> ibc::storage::StorageApi<'a, T> {
			ibc::storage::StorageApi::new(self.client)
		}
	}
	pub struct TransactionApi<'a, T: ::subxt::Config, X> {
		client: &'a ::subxt::Client<T>,
		marker: ::core::marker::PhantomData<X>,
	}
	impl<'a, T, X> TransactionApi<'a, T, X>
	where
		T: ::subxt::Config,
		X: ::subxt::extrinsic::ExtrinsicParams<T>,
	{
		pub fn system(&self) -> system::calls::TransactionApi<'a, T, X> {
			system::calls::TransactionApi::new(self.client)
		}
		pub fn timestamp(&self) -> timestamp::calls::TransactionApi<'a, T, X> {
			timestamp::calls::TransactionApi::new(self.client)
		}
		pub fn sudo(&self) -> sudo::calls::TransactionApi<'a, T, X> {
			sudo::calls::TransactionApi::new(self.client)
		}
		pub fn indices(&self) -> indices::calls::TransactionApi<'a, T, X> {
			indices::calls::TransactionApi::new(self.client)
		}
		pub fn balances(&self) -> balances::calls::TransactionApi<'a, T, X> {
			balances::calls::TransactionApi::new(self.client)
		}
		pub fn identity(&self) -> identity::calls::TransactionApi<'a, T, X> {
			identity::calls::TransactionApi::new(self.client)
		}
		pub fn multisig(&self) -> multisig::calls::TransactionApi<'a, T, X> {
			multisig::calls::TransactionApi::new(self.client)
		}
		pub fn parachain_system(&self) -> parachain_system::calls::TransactionApi<'a, T, X> {
			parachain_system::calls::TransactionApi::new(self.client)
		}
		pub fn authorship(&self) -> authorship::calls::TransactionApi<'a, T, X> {
			authorship::calls::TransactionApi::new(self.client)
		}
		pub fn collator_selection(&self) -> collator_selection::calls::TransactionApi<'a, T, X> {
			collator_selection::calls::TransactionApi::new(self.client)
		}
		pub fn session(&self) -> session::calls::TransactionApi<'a, T, X> {
			session::calls::TransactionApi::new(self.client)
		}
		pub fn council(&self) -> council::calls::TransactionApi<'a, T, X> {
			council::calls::TransactionApi::new(self.client)
		}
		pub fn council_membership(&self) -> council_membership::calls::TransactionApi<'a, T, X> {
			council_membership::calls::TransactionApi::new(self.client)
		}
		pub fn treasury(&self) -> treasury::calls::TransactionApi<'a, T, X> {
			treasury::calls::TransactionApi::new(self.client)
		}
		pub fn democracy(&self) -> democracy::calls::TransactionApi<'a, T, X> {
			democracy::calls::TransactionApi::new(self.client)
		}
		pub fn scheduler(&self) -> scheduler::calls::TransactionApi<'a, T, X> {
			scheduler::calls::TransactionApi::new(self.client)
		}
		pub fn utility(&self) -> utility::calls::TransactionApi<'a, T, X> {
			utility::calls::TransactionApi::new(self.client)
		}
		pub fn preimage(&self) -> preimage::calls::TransactionApi<'a, T, X> {
			preimage::calls::TransactionApi::new(self.client)
		}
		pub fn proxy(&self) -> proxy::calls::TransactionApi<'a, T, X> {
			proxy::calls::TransactionApi::new(self.client)
		}
		pub fn xcmp_queue(&self) -> xcmp_queue::calls::TransactionApi<'a, T, X> {
			xcmp_queue::calls::TransactionApi::new(self.client)
		}
		pub fn relayer_xcm(&self) -> relayer_xcm::calls::TransactionApi<'a, T, X> {
			relayer_xcm::calls::TransactionApi::new(self.client)
		}
		pub fn cumulus_xcm(&self) -> cumulus_xcm::calls::TransactionApi<'a, T, X> {
			cumulus_xcm::calls::TransactionApi::new(self.client)
		}
		pub fn dmp_queue(&self) -> dmp_queue::calls::TransactionApi<'a, T, X> {
			dmp_queue::calls::TransactionApi::new(self.client)
		}
		pub fn x_tokens(&self) -> x_tokens::calls::TransactionApi<'a, T, X> {
			x_tokens::calls::TransactionApi::new(self.client)
		}
		pub fn tokens(&self) -> tokens::calls::TransactionApi<'a, T, X> {
			tokens::calls::TransactionApi::new(self.client)
		}
		pub fn oracle(&self) -> oracle::calls::TransactionApi<'a, T, X> {
			oracle::calls::TransactionApi::new(self.client)
		}
		pub fn vault(&self) -> vault::calls::TransactionApi<'a, T, X> {
			vault::calls::TransactionApi::new(self.client)
		}
		pub fn assets_registry(&self) -> assets_registry::calls::TransactionApi<'a, T, X> {
			assets_registry::calls::TransactionApi::new(self.client)
		}
		pub fn governance_registry(&self) -> governance_registry::calls::TransactionApi<'a, T, X> {
			governance_registry::calls::TransactionApi::new(self.client)
		}
		pub fn assets(&self) -> assets::calls::TransactionApi<'a, T, X> {
			assets::calls::TransactionApi::new(self.client)
		}
		pub fn crowdloan_rewards(&self) -> crowdloan_rewards::calls::TransactionApi<'a, T, X> {
			crowdloan_rewards::calls::TransactionApi::new(self.client)
		}
		pub fn vesting(&self) -> vesting::calls::TransactionApi<'a, T, X> {
			vesting::calls::TransactionApi::new(self.client)
		}
		pub fn bonded_finance(&self) -> bonded_finance::calls::TransactionApi<'a, T, X> {
			bonded_finance::calls::TransactionApi::new(self.client)
		}
		pub fn dutch_auction(&self) -> dutch_auction::calls::TransactionApi<'a, T, X> {
			dutch_auction::calls::TransactionApi::new(self.client)
		}
		pub fn mosaic(&self) -> mosaic::calls::TransactionApi<'a, T, X> {
			mosaic::calls::TransactionApi::new(self.client)
		}
		pub fn liquidations(&self) -> liquidations::calls::TransactionApi<'a, T, X> {
			liquidations::calls::TransactionApi::new(self.client)
		}
		pub fn lending(&self) -> lending::calls::TransactionApi<'a, T, X> {
			lending::calls::TransactionApi::new(self.client)
		}
		pub fn pablo(&self) -> pablo::calls::TransactionApi<'a, T, X> {
			pablo::calls::TransactionApi::new(self.client)
		}
		pub fn dex_router(&self) -> dex_router::calls::TransactionApi<'a, T, X> {
			dex_router::calls::TransactionApi::new(self.client)
		}
		pub fn call_filter(&self) -> call_filter::calls::TransactionApi<'a, T, X> {
			call_filter::calls::TransactionApi::new(self.client)
		}
		pub fn ibc_ping(&self) -> ibc_ping::calls::TransactionApi<'a, T, X> {
			ibc_ping::calls::TransactionApi::new(self.client)
		}
		pub fn transfer(&self) -> transfer::calls::TransactionApi<'a, T, X> {
			transfer::calls::TransactionApi::new(self.client)
		}
		pub fn ibc(&self) -> ibc::calls::TransactionApi<'a, T, X> {
			ibc::calls::TransactionApi::new(self.client)
		}
	}
}
