
//! Autogenerated weights for `pallet_ibc`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-25, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dali-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/composable
// benchmark
// --chain
// dali-dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet-ibc
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --json
// --output
// ./frame/ibc/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_ibc`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::weight::WeightInfo for WeightInfo<T> {
	// Storage: Ibc CounterForClients (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Ibc Clients (r:1 w:1)
	// Storage: Ibc ClientUpdateTime (r:0 w:1)
	// Storage: Ibc ClientUpdateHeight (r:0 w:1)
	// Storage: Ibc ConsensusStates (r:0 w:1)
	// Storage: Ibc ClientStates (r:0 w:1)
	fn create_client() -> Weight {
		(36_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Ibc Clients (r:1 w:0)
	// Storage: Ibc ClientStates (r:1 w:1)
	// Storage: Ibc ConsensusStates (r:3 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Ibc ClientUpdateTime (r:0 w:1)
	// Storage: Ibc ClientUpdateHeight (r:0 w:1)
	fn update_client() -> Weight {
		(473_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Ibc ClientStates (r:1 w:0)
	// Storage: Ibc CounterForConnections (r:1 w:1)
	// Storage: Ibc Connections (r:1 w:1)
	// Storage: Ibc ConnectionClient (r:1 w:1)
	fn connection_init() -> Weight {
		(34_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}

	// Storage: Ibc Capabilities (r:1 w:0)
	// Storage: Ibc Connections (r:1 w:0)
	// Storage: Ibc ChannelCounter (r:1 w:1)
	// Storage: Ibc ChannelsConnection (r:1 w:1)
	// Storage: Ibc NextSequenceAck (r:0 w:1)
	// Storage: Ibc NextSequenceSend (r:0 w:1)
	// Storage: Ibc Channels (r:0 w:1)
	// Storage: Ibc NextSequenceRecv (r:0 w:1)
	fn create_channel() -> Weight {
		(43_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Ibc Capabilities (r:1 w:0)
	// Storage: Ibc Channels (r:1 w:1)
	// Storage: Ibc Connections (r:1 w:0)
	// Storage: Ibc ClientStates (r:1 w:0)
	// Storage: Ibc ConsensusStates (r:1 w:0)
	fn channel_open_try() -> Weight {
		(88_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Ibc Capabilities (r:1 w:0)
	// Storage: Ibc Channels (r:1 w:1)
	// Storage: Ibc Connections (r:1 w:0)
	// Storage: Ibc ClientStates (r:1 w:0)
	// Storage: Ibc ConsensusStates (r:1 w:0)
	// Storage: IbcPing Channels (r:1 w:1)
	fn channel_open_ack() -> Weight {
		(91_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Ibc Capabilities (r:1 w:0)
	// Storage: Ibc Channels (r:1 w:1)
	// Storage: Ibc Connections (r:1 w:0)
	// Storage: Ibc ClientStates (r:1 w:0)
	// Storage: Ibc ConsensusStates (r:1 w:0)
	// Storage: IbcPing Channels (r:1 w:1)
	fn channel_open_confirm() -> Weight {
		(88_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
}
