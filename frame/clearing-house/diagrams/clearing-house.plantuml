@startuml clearing-house

<style>
.struct {
    BackgroundColor LightGreen
}
.Call {
    BackgroundColor LightBlue
}
.trait {
    BackgroundColor Cyan
}
</style>

package "pallet-clearing-house" {
    interface ClearingHouse <<Call>> {
        + open_position()
        + close_position()
        + add_margin()
        + remove_margin()
        + liquidate()
        + update_funding()
        # create_market()
        # stop_market()
    }

    interface "ClearingHouse" as CH <<trait>> {
        ~ add_margin()
        ~ remove_margin()
        ~ open_position()
        ~ close_position()
        ~ liquidate()
        ~ create_market()
        ~ stop_market()
        ~ update_funding()
    }
    
    interface "RiskEngine" as RETrait <<trait>> {
        ~ get_margin_ratio(AccountId)
        ~ above_initial_margin_ratio(AccountId)
        ~ above_maintenance_margin_ratio(AccountId)
        ~ risk_free_collateral(AccountId)
        '~ get_free_collateral()
    }
    
    interface "Instruments" as ITrait <<trait>> {
        ~ funding_owed(Position)
        ~ funding_rate(MarketId)
    }

    interface "FeeModel" as FTrait <<trait>> {
        ~ fee_for_trade()
    }

    database "Clearing House Storage" {
        map "AccountsMargin" as MarginAccounts <<StorageMap>> {
            AccountId => Balance collateral
        }

        map Positions <<StorageDoubleMap>> {
            AccountId, MarketId =>
        }

        map Markets <<StorageMap>> {
            MarketId =>
        }

        class Position <<struct>> {
            MarketId market_id
            Decimal base_asset_amount
            Decimal quote_asset_notional_amount
            Decimal last_cum_funding
        }

        class Market <<struct>> {
            AssetId asset_id
            VammId vamm_id
            Decimal margin_ratio_initial
            Decimal margin_ratio_maintenance
            Decimal cum_funding_rate
            Duration funding_rate_ts
            Duration funding_frequency
            Duration funding_period
        }
    }
}

package "pallet-virtual-amm" {
    interface "Vamm" as vAmm <<trait>> {
        ~ create(base_asset_amount: u128, quote_asset_amount: u128, peg_multiplier: u128)
        ~ deprecate(vamm: VammId, when: Timestamp)
        ~ get_price(vamm: VammId, asset: VammAsset)
        ~ get_twap(vamm: VammId)
        ~ swap_base_asset(vamm: VammId, amount: u128, direction: SwapDirection)
        ~ swap_quote_asset(vamm: VammId, amount: u128, direction: SwapDirection)
        ~ move_price(vamm: VammId, base_asset_amount: u128, quote_asset_amount: u128)
        ~ move_to_price(vamm: VammId, target_price: u128)
    }
    database "vAMM Storage" {
        map "Vamms" as vAmms <<StorageMap>> {
            VammId =>
        }
        class vAmmState <<struct>> {
            u128 base_asset_reserves
            u128 quote_asset_reserves
            u128 sqrt_k
            u128 peg_multiplier
            u128 mark_twap
            Option<Timestamp> is_deprecated
        }
    }
}

package "pallet-oracle" {
    interface Oracle <<trait>> {
        ~get_price(asset_id: AssetId, amount: Balance)
        ~get_twap(of: AssetId, weighting: Vec<Balance>)
    }
}

hide empty members
hide circle

'================== Storage relationships
Markets ..down> Market : maps
Market::vamm_id ..> vAmm : used in
Market::asset_id ..> Oracle : used in

Positions ..down> Position: maps
Position ..right> Markets : references

'================== Control flow relationships             
ClearingHouse -> CH : wraps

CH -[#blue]-> ITrait : calls

'add_margin
'remove_margin
CH -[#red]-> MarginAccounts : write

'create_market
'stop_market
CH -[#red]-> Markets : write

'remove_margin
CH -[#blue]-> RETrait : calls

'open_position
'close_position
'liquidate
CH -[#red]-> Positions : write
CH -[#blue]right> FTrait : calls

'open_position
'close_position
CH -[#blue]-> vAmm : calls

'update_funding
ITrait -[#green]-> Markets : read
ITrait -[#blue]-> Oracle : calls
ITrait -[#blue]-> vAmm : calls

'get_margin_ratio
RETrait -[#green]-> MarginAccounts : read
RETrait -[#green]-> Positions : read
RETrait -left[#blue]> ITrait : calls
RETrait -[#blue]-> vAmm : calls

'vAMM
vAmm -down[#red]-> vAmms : write
vAmms ..right> vAmmState : maps

@enduml
