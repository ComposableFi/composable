data: 
loan_config:
	loan_account_id
	market_account_id
	principal
	schedule: HashMap<date, rate>
	first_date: date
	last_date: date
---

loans_storage: 
	loan_account_id => loan_config
---

non_active_loans_storage:
	 Set<loan_account_id>
---

loan_schedule_storage: 
	date => Set<loan_account_id>	
___


logic:
+create():
	manager creates the loan config
	loan config placed in the loans_storage
	loan_account_id placed in the non_active_loan_storage.
---

//now borrower can activate the loan 
//he calls fn borrow()
+borrow():
	if loan !exists (exist = should be in non_active_loan_storage):
		return. 
	if loan can not be activated (today is the first payment day or larger):
		the loan is terminated via fn terminate_non_active_loan(loan_account_id) (just remove entry from loans_storage and non_active_loan_storage). 
		return.
	Collateral is deposited on the loans account and asset is withdrawed. 
	Debt tokens are minted to the loans account.
	Loans account_id revomed form the set of non_active_loans_storage.	
	loan schedule placed in the loan_schedule_storage.
---

fn each_block(): 
	we retrive entries from the loan_schedule_storage for the current date.
	we go trough this set: 
		withdraw money from loan account ids.
		money = loan principal (in terms of debt token) * rate.
		if payment is not succeded: 
			we liquidate() the loan 
		if it success and this is last payment:
			we terminate() the loan  

	we remove all entries for non-active loan storage whose first payment day = current date. 
---	

fn liquidate():
	call strikes_logic()
	we send loan to liquidation()
	call terminate()
___

+fn terminate_activated_loan():
	we remove information about loan from the loan_schedule storage:
		get loan schedule from loan_info -> loan_config()	
		go throw the dates in schedule, for each date: 
			get entry from loan_schedule_storage for particualr date.	
			remove loan_account_id from the set. 
	we remove entry form loans_storage
---

+fn terminate_non_active_loan():
	for each loan_account_id in the non_active_loans_storage:
			if first date <= current date:
			remove entry from loans_storage.
			collect loan_account_id
	remove collected ids from non_active_loans_storage.
					
---

+fn close_loan_contract():
	transfer collateral from loans account to borrowers account.
	fn terminate_activated_loan()
---


let today = Utc::today().naive_utc();


