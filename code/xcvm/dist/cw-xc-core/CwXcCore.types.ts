/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type InstantiateMsg = HereItem;
export type Addr = string;
export type NetworkId = number;
export interface HereItem {
  admin: Addr;
  network_id: NetworkId;
  [k: string]: unknown;
}
export type ExecuteMsg = {
  config: ConfigSubMsg;
} | {
  execute_program: {
    execute_program: ExecuteProgramMsg;
    tip: string;
    [k: string]: unknown;
  };
} | {
  execute_program_privileged: {
    call_origin: CallOrigin;
    execute_program: ExecuteProgramMsg;
    tip: Addr;
    [k: string]: unknown;
  };
} | {
  bridge_forward: BridgeForwardMsg;
} | {
  shortcut: ShortcutSubMsg;
} | {
  message_hook: XcMessageData;
};
export type ConfigSubMsg = {
  force_network: NetworkItem;
} | {
  force_network_to_network: ForceNetworkToNetworkMsg;
} | {
  force_asset: AssetItem;
} | {
  force_asset_to_network_map: {
    other_asset: AssetId;
    other_network: NetworkId;
    this_asset: AssetId;
    [k: string]: unknown;
  };
} | {
  force_exchange: ExchangeItem;
} | {
  force_remove_asset: {
    asset_id: AssetId;
    [k: string]: unknown;
  };
} | {
  force: ConfigSubMsg[];
} | {
  force_instantiate: {
    salt?: string;
    user_origin: Addr;
    [k: string]: unknown;
  };
};
export type Prefix = {
  s_s58: number;
} | {
  bech: string;
} | "eth_evm";
export type GatewayId = {
  cosm_wasm: {
    admin: Addr;
    contract: Addr;
    interpreter_code_id: number;
    [k: string]: unknown;
  };
} | {
  evm: {
    admin: XPrefixedHexString;
    contract: XPrefixedHexString;
    [k: string]: unknown;
  };
};
export type XPrefixedHexString = string;
export type IbcIcs20Sender = ("CosmosStargateIbcApplicationsTransferV1MsgTransfer" | "CosmWasmStd1_3") | {
  SubstratePrecompile: Addr;
};
export type RelativeTimeout = {
  seconds: number;
};
export type ChannelId = string;
export type ConnectionId = string;
export type AssetId = DisplayedForUint128;
export type DisplayedForUint128 = number;
export type ForeignAssetId = {
  ibc_ics20: PrefixedDenom;
};
export type AssetReference = {
  native: {
    denom: string;
    [k: string]: unknown;
  };
} | {
  cw20: {
    contract: Addr;
    [k: string]: unknown;
  };
} | {
  erc20: {
    contract: XPrefixedHexString;
    [k: string]: unknown;
  };
};
export type ExchangeType = {
  osmosis_cross_chain_swap: SwapAmountInRoute[];
};
export type FundsForDisplayedForUint128 = [AssetId, DisplayedForUint128][];
export type InstructionForArrayOfUint8AndXcAddrAndFundsForBalance = {
  transfer: {
    assets: FundsForBalance;
    to: DestinationForXcAddr;
    [k: string]: unknown;
  };
} | {
  call: {
    bindings: [number, BindingValue][];
    encoded: number[];
    [k: string]: unknown;
  };
} | {
  spawn: {
    assets: FundsForBalance;
    network_id: NetworkId;
    program: ProgramForArrayOfInstructionForArrayOfUint8AndXcAddrAndFundsForBalance;
    salt: string;
    [k: string]: unknown;
  };
} | {
  exchange: {
    exchange_id: DisplayedForUint128;
    give: FundsForBalance;
    want: FundsForBalance;
    [k: string]: unknown;
  };
};
export type DisplayedForUint64 = number;
export type FundsForBalance = [AssetId, Balance][];
export type DestinationForXcAddr = "tip" | {
  account: XcAddr;
};
export type XcAddr = CanonicalAddr;
export type CanonicalAddr = Binary;
export type Binary = string;
export type BindingValue = {
  register: Register;
} | {
  asset: AssetId;
} | {
  asset_amount: [AssetId, Balance];
};
export type Register = "ip" | "tip" | "this" | "result";
export type CallOrigin = {
  Remote: {
    user_origin: UserOrigin;
    [k: string]: unknown;
  };
} | {
  Local: {
    user: Addr;
    [k: string]: unknown;
  };
};
export type UserId = string;
export type ShortcutSubMsg = {
  transfer: {
    amount: Uint128;
    asset_id: AssetId;
    network: NetworkId;
    receiver?: string | null;
    [k: string]: unknown;
  };
};
export type Uint128 = string;
export interface NetworkItem {
  accounts?: Prefix | null;
  gateway?: GatewayId | null;
  ibc?: IbcEnabled | null;
  network_id: NetworkId;
  [k: string]: unknown;
}
export interface IbcEnabled {
  channels?: IbcChannels | null;
  [k: string]: unknown;
}
export interface IbcChannels {
  ics20?: Ics20Channel | null;
  [k: string]: unknown;
}
export interface Ics20Channel {
  features?: Ics20Features | null;
  sender: IbcIcs20Sender;
  [k: string]: unknown;
}
export interface Ics20Features {
  ibc_callbacks?: Adr08IbcCallbacks | null;
  pfm?: PFM | null;
  wasm_hooks?: OsmosisIbcHooks | null;
  [k: string]: unknown;
}
export interface Adr08IbcCallbacks {
  [k: string]: unknown;
}
export interface PFM {
  [k: string]: unknown;
}
export interface OsmosisIbcHooks {
  callback: boolean;
  [k: string]: unknown;
}
export interface ForceNetworkToNetworkMsg {
  from: NetworkId;
  other: OtherNetworkItem;
  to: NetworkId;
  [k: string]: unknown;
}
export interface OtherNetworkItem {
  counterparty_timeout: RelativeTimeout;
  ics_20?: IcsPair | null;
  use_shortcut?: boolean | null;
  xcvm_channel?: ChannelInfo | null;
  [k: string]: unknown;
}
export interface IcsPair {
  sink: ChannelId;
  source: ChannelId;
  [k: string]: unknown;
}
export interface ChannelInfo {
  connection_id: ConnectionId;
  counterparty_endpoint: IbcEndpoint;
  id: ChannelId;
  [k: string]: unknown;
}
export interface IbcEndpoint {
  channel_id: string;
  port_id: string;
  [k: string]: unknown;
}
export interface AssetItem {
  asset_id: AssetId;
  bridged?: BridgeAsset | null;
  local: AssetReference;
  network_id: NetworkId;
  [k: string]: unknown;
}
export interface BridgeAsset {
  location_on_network: ForeignAssetId;
  [k: string]: unknown;
}
export interface PrefixedDenom {
  base_denom: string;
  trace_path: string;
  [k: string]: unknown;
}
export interface ExchangeItem {
  exchange: ExchangeType;
  exchange_id: DisplayedForUint128;
  network_id: NetworkId;
  [k: string]: unknown;
}
export interface SwapAmountInRoute {
  pool_id: number;
  token_out_denom: string;
  [k: string]: unknown;
}
export interface ExecuteProgramMsg {
  assets: FundsForDisplayedForUint128;
  program: ProgramForArrayOfInstructionForArrayOfUint8AndXcAddrAndFundsForBalance;
  salt: string;
  [k: string]: unknown;
}
export interface ProgramForArrayOfInstructionForArrayOfUint8AndXcAddrAndFundsForBalance {
  instructions: InstructionForArrayOfUint8AndXcAddrAndFundsForBalance[];
  tag: string;
  [k: string]: unknown;
}
export interface Balance {
  amount: Amount;
  is_unit: boolean;
  [k: string]: unknown;
}
export interface Amount {
  intercept: DisplayedForUint128;
  slope: DisplayedForUint64;
  [k: string]: unknown;
}
export interface UserOrigin {
  network_id: NetworkId;
  user_id: UserId;
  [k: string]: unknown;
}
export interface BridgeForwardMsg {
  interpreter_origin: InterpreterOrigin;
  msg: ExecuteProgramMsg;
  to: NetworkId;
  [k: string]: unknown;
}
export interface InterpreterOrigin {
  salt: string;
  user_origin: UserOrigin;
  [k: string]: unknown;
}
export interface XcMessageData {
  from_network_id: NetworkId;
  packet: PacketForProgramForArrayOfInstructionForArrayOfUint8AndXcAddrAndFundsForBalance;
  [k: string]: unknown;
}
export interface PacketForProgramForArrayOfInstructionForArrayOfUint8AndXcAddrAndFundsForBalance {
  assets: FundsForDisplayedForUint128;
  interpreter: string;
  program: ProgramForArrayOfInstructionForArrayOfUint8AndXcAddrAndFundsForBalance;
  salt: string;
  user_origin: UserOrigin;
  [k: string]: unknown;
}
export type QueryMsg = {
  get_asset_by_id: {
    asset_id: AssetId;
    [k: string]: unknown;
  };
} | {
  get_local_asset_by_reference: {
    reference: AssetReference;
    [k: string]: unknown;
  };
} | {
  get_ibc_ics20_route: {
    for_asset: AssetId;
    to_network: NetworkId;
    [k: string]: unknown;
  };
} | {
  get_exchange_by_id: {
    exchange_id: DisplayedForUint128;
    [k: string]: unknown;
  };
};
export interface GetAssetResponse {
  asset: AssetItem;
  [k: string]: unknown;
}
export interface GetExchangeResponse {
  exchange: ExchangeItem;
  [k: string]: unknown;
}
export interface GetIbcIcs20RouteResponse {
  route: IbcIcs20ProgramRoute;
  [k: string]: unknown;
}
export interface IbcIcs20ProgramRoute {
  channel_to_send_over: ChannelId;
  counterparty_timeout: RelativeTimeout;
  from_network: NetworkId;
  gateway_to_send_to: GatewayId;
  ibc_ics_20_sender: IbcIcs20Sender;
  local_native_denom: string;
  on_remote_asset: AssetId;
  sender_gateway: Addr;
  [k: string]: unknown;
}