/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
export class CwMantisOrderQueryClient {
    client;
    contractAddress;
    constructor(client, contractAddress) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.getAssetById = this.getAssetById.bind(this);
        this.getLocalAssetByReference = this.getLocalAssetByReference.bind(this);
        this.getIbcIcs20Route = this.getIbcIcs20Route.bind(this);
        this.getExchangeById = this.getExchangeById.bind(this);
    }
    getAssetById = async ({ assetId }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            get_asset_by_id: {
                asset_id: assetId
            }
        });
    };
    getLocalAssetByReference = async ({ reference }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            get_local_asset_by_reference: {
                reference
            }
        });
    };
    getIbcIcs20Route = async ({ forAsset, toNetwork }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            get_ibc_ics20_route: {
                for_asset: forAsset,
                to_network: toNetwork
            }
        });
    };
    getExchangeById = async ({ exchangeId }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            get_exchange_by_id: {
                exchange_id: exchangeId
            }
        });
    };
}
export class CwMantisOrderClient extends CwMantisOrderQueryClient {
    client;
    sender;
    contractAddress;
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.config = this.config.bind(this);
        this.executeProgram = this.executeProgram.bind(this);
        this.executeProgramPrivileged = this.executeProgramPrivileged.bind(this);
        this.bridgeForward = this.bridgeForward.bind(this);
        this.shortcut = this.shortcut.bind(this);
        this.messageHook = this.messageHook.bind(this);
    }
    config = async (configSubMsg, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            config: configSubMsg
        }, fee, memo, _funds);
    };
    executeProgram = async ({ executeProgram, tip }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            execute_program: {
                execute_program: executeProgram,
                tip
            }
        }, fee, memo, _funds);
    };
    executeProgramPrivileged = async ({ callOrigin, executeProgram, tip }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            execute_program_privileged: {
                call_origin: callOrigin,
                execute_program: executeProgram,
                tip
            }
        }, fee, memo, _funds);
    };
    bridgeForward = async ({ interpreterOrigin, msg, to }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            bridge_forward: {
                interpreter_origin: interpreterOrigin,
                msg,
                to
            }
        }, fee, memo, _funds);
    };
    shortcut = async (shortcutSubMsg, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            shortcut: shortcutSubMsg
        }, fee, memo, _funds);
    };
    messageHook = async ({ fromNetworkId, packet }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            message_hook: {
                from_network_id: fromNetworkId,
                packet
            }
        }, fee, memo, _funds);
    };
}
