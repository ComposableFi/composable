{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Run an XCVM program on the XCVM interpreter instance Creates a new one if there is no instance.",
      "type": "object",
      "required": [
        "run"
      ],
      "properties": {
        "run": {
          "type": "object",
          "required": [
            "bridge",
            "funds",
            "interpreter_execute_msg",
            "network_id",
            "user_id"
          ],
          "properties": {
            "bridge": {
              "description": "The bridge that is used to call the router",
              "allOf": [
                {
                  "$ref": "#/definitions/Bridge"
                }
              ]
            },
            "funds": {
              "description": "Funds to fund the XCVM interpreter instance The interpreter is funded prior to execution",
              "allOf": [
                {
                  "$ref": "#/definitions/Funds_for_Displayed_for_uint128"
                }
              ]
            },
            "interpreter_execute_msg": {
              "description": "Message to execute in the XCVM interpreter instance",
              "allOf": [
                {
                  "$ref": "#/definitions/ExecuteMsg"
                }
              ]
            },
            "network_id": {
              "description": "Origin network ID",
              "allOf": [
                {
                  "$ref": "#/definitions/NetworkId"
                }
              ]
            },
            "user_id": {
              "description": "Origin user ID. (Caller)",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Set a certain bridge security requirement for a specific interpreter even it hasn't instantiated yet",
      "type": "object",
      "required": [
        "set_interpreter_security"
      ],
      "properties": {
        "set_interpreter_security": {
          "type": "object",
          "required": [
            "bridge_security",
            "network_id",
            "user_id"
          ],
          "properties": {
            "bridge_security": {
              "$ref": "#/definitions/BridgeSecurity"
            },
            "network_id": {
              "$ref": "#/definitions/NetworkId"
            },
            "user_id": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Register a bridge. The caller needs to be admin for this.",
      "type": "object",
      "required": [
        "register_bridge"
      ],
      "properties": {
        "register_bridge": {
          "type": "object",
          "required": [
            "bridge"
          ],
          "properties": {
            "bridge": {
              "$ref": "#/definitions/Bridge"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Unregister a bridge. The caller needs to be admin for this.",
      "type": "object",
      "required": [
        "unregister_bridge"
      ],
      "properties": {
        "unregister_bridge": {
          "type": "object",
          "required": [
            "bridge"
          ],
          "properties": {
            "bridge": {
              "$ref": "#/definitions/Bridge"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetId": {
      "description": "Newtype for XCVM assets ID. Must be unique for each asset and must never change. This ID is an opaque, arbitrary type from the XCVM protocol and no assumption must be made on how it is computed.",
      "type": "integer",
      "format": "uint128",
      "minimum": 0.0
    },
    "Bridge": {
      "type": "object",
      "required": [
        "protocol",
        "security"
      ],
      "properties": {
        "protocol": {
          "$ref": "#/definitions/BridgeProtocol"
        },
        "security": {
          "$ref": "#/definitions/BridgeSecurity"
        }
      }
    },
    "BridgeProtocol": {
      "type": "string",
      "enum": [
        "IBC",
        "XCM",
        "OTP"
      ]
    },
    "BridgeSecurity": {
      "description": "Newtype for XCVM networks ID. Must be unique for each network and must never change. This ID is an opaque, arbitrary type from the XCVM protocol and no assumption must be made on how it is computed.",
      "type": "string",
      "enum": [
        "Insecure",
        "Deterministic",
        "Probabilistic",
        "Optimistic"
      ]
    },
    "Displayed_for_uint128": {
      "type": "integer",
      "format": "uint128",
      "minimum": 0.0
    },
    "ExecuteMsg": {
      "oneOf": [
        {
          "description": "Execute an XCVM program",
          "type": "object",
          "required": [
            "execute"
          ],
          "properties": {
            "execute": {
              "type": "object",
              "required": [
                "program"
              ],
              "properties": {
                "program": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This is only meant to be used by the interpreter itself, otherwise it will return an error",
          "type": "object",
          "required": [
            "__self_execute"
          ],
          "properties": {
            "__self_execute": {
              "type": "object",
              "required": [
                "program"
              ],
              "properties": {
                "program": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Add owners of this contract",
          "type": "object",
          "required": [
            "add_owners"
          ],
          "properties": {
            "add_owners": {
              "type": "object",
              "required": [
                "owners"
              ],
              "properties": {
                "owners": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Addr"
                  }
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Remove owners from the contract",
          "type": "object",
          "required": [
            "remove_owners"
          ],
          "properties": {
            "remove_owners": {
              "type": "object",
              "required": [
                "owners"
              ],
              "properties": {
                "owners": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Addr"
                  }
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Funds_for_Displayed_for_uint128": {
      "type": "array",
      "items": {
        "type": "array",
        "items": [
          {
            "$ref": "#/definitions/AssetId"
          },
          {
            "$ref": "#/definitions/Displayed_for_uint128"
          }
        ],
        "maxItems": 2,
        "minItems": 2
      }
    },
    "NetworkId": {
      "description": "Newtype for XCVM networks ID. Must be unique for each network and must never change. This ID is an opaque, arbitrary type from the XCVM protocol and no assumption must be made on how it is computed.",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    }
  }
}
