#[allow(clippy::all)]
#[allow(dead_code, unused_imports, non_camel_case_types)]
pub mod api {
    use super::api as root_mod;
    pub static PALLETS: [&str; 55usize] = [
        "System",
        "Timestamp",
        "Sudo",
        "RandomnessCollectiveFlip",
        "TransactionPayment",
        "AssetTxPayment",
        "Indices",
        "Balances",
        "Identity",
        "Multisig",
        "ParachainSystem",
        "ParachainInfo",
        "Authorship",
        "CollatorSelection",
        "Session",
        "Aura",
        "AuraExt",
        "Council",
        "CouncilMembership",
        "Treasury",
        "Democracy",
        "TechnicalCommittee",
        "TechnicalCommitteeMembership",
        "Scheduler",
        "Utility",
        "Preimage",
        "Proxy",
        "XcmpQueue",
        "RelayerXcm",
        "CumulusXcm",
        "DmpQueue",
        "XTokens",
        "UnknownTokens",
        "Tokens",
        "Oracle",
        "CurrencyFactory",
        "Vault",
        "AssetsRegistry",
        "GovernanceRegistry",
        "Assets",
        "CrowdloanRewards",
        "Vesting",
        "BondedFinance",
        "DutchAuction",
        "Mosaic",
        "Liquidations",
        "Lending",
        "Pablo",
        "DexRouter",
        "Fnft",
        "StakingRewards",
        "CallFilter",
        "Cosmwasm",
        "Ibc",
        "IbcPing",
    ];
    #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
    pub enum Event {
        #[codec(index = 0)]
        System(system::Event),
        #[codec(index = 2)]
        Sudo(sudo::Event),
        #[codec(index = 4)]
        TransactionPayment(transaction_payment::Event),
        #[codec(index = 5)]
        Indices(indices::Event),
        #[codec(index = 6)]
        Balances(balances::Event),
        #[codec(index = 7)]
        Identity(identity::Event),
        #[codec(index = 8)]
        Multisig(multisig::Event),
        #[codec(index = 10)]
        ParachainSystem(parachain_system::Event),
        #[codec(index = 21)]
        CollatorSelection(collator_selection::Event),
        #[codec(index = 22)]
        Session(session::Event),
        #[codec(index = 30)]
        Council(council::Event),
        #[codec(index = 31)]
        CouncilMembership(council_membership::Event),
        #[codec(index = 32)]
        Treasury(treasury::Event),
        #[codec(index = 33)]
        Democracy(democracy::Event),
        #[codec(index = 70)]
        TechnicalCommittee(technical_committee::Event),
        #[codec(index = 71)]
        TechnicalCommitteeMembership(technical_committee_membership::Event),
        #[codec(index = 34)]
        Scheduler(scheduler::Event),
        #[codec(index = 35)]
        Utility(utility::Event),
        #[codec(index = 36)]
        Preimage(preimage::Event),
        #[codec(index = 37)]
        Proxy(proxy::Event),
        #[codec(index = 40)]
        XcmpQueue(xcmp_queue::Event),
        #[codec(index = 41)]
        RelayerXcm(relayer_xcm::Event),
        #[codec(index = 42)]
        CumulusXcm(cumulus_xcm::Event),
        #[codec(index = 43)]
        DmpQueue(dmp_queue::Event),
        #[codec(index = 44)]
        XTokens(x_tokens::Event),
        #[codec(index = 45)]
        UnknownTokens(unknown_tokens::Event),
        #[codec(index = 51)]
        Tokens(tokens::Event),
        #[codec(index = 52)]
        Oracle(oracle::Event),
        #[codec(index = 53)]
        CurrencyFactory(currency_factory::Event),
        #[codec(index = 54)]
        Vault(vault::Event),
        #[codec(index = 55)]
        AssetsRegistry(assets_registry::Event),
        #[codec(index = 56)]
        GovernanceRegistry(governance_registry::Event),
        #[codec(index = 58)]
        CrowdloanRewards(crowdloan_rewards::Event),
        #[codec(index = 59)]
        Vesting(vesting::Event),
        #[codec(index = 60)]
        BondedFinance(bonded_finance::Event),
        #[codec(index = 61)]
        DutchAuction(dutch_auction::Event),
        #[codec(index = 62)]
        Mosaic(mosaic::Event),
        #[codec(index = 63)]
        Liquidations(liquidations::Event),
        #[codec(index = 64)]
        Lending(lending::Event),
        #[codec(index = 65)]
        Pablo(pablo::Event),
        #[codec(index = 66)]
        DexRouter(dex_router::Event),
        #[codec(index = 67)]
        Fnft(fnft::Event),
        #[codec(index = 68)]
        StakingRewards(staking_rewards::Event),
        #[codec(index = 140)]
        CallFilter(call_filter::Event),
        #[codec(index = 180)]
        Cosmwasm(cosmwasm::Event),
        #[codec(index = 190)]
        Ibc(ibc::Event),
        #[codec(index = 191)]
        IbcPing(ibc_ping::Event),
    }
    pub mod system {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct FillBlock {
                pub ratio: runtime_types::sp_arithmetic::per_things::Perbill,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Remark {
                pub remark: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct SetHeapPages {
                pub pages: ::core::primitive::u64,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetCode {
                pub code: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetCodeWithoutChecks {
                pub code: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetStorage {
                pub items: ::std::vec::Vec<(
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::std::vec::Vec<::core::primitive::u8>,
                )>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct KillStorage {
                pub keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct KillPrefix {
                pub prefix: ::std::vec::Vec<::core::primitive::u8>,
                pub subkeys: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RemarkWithEvent {
                pub remark: ::std::vec::Vec<::core::primitive::u8>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "A dispatch that will fill the block weight up to the given ratio."]
                pub fn fill_block(
                    &self,
                    ratio: runtime_types::sp_arithmetic::per_things::Perbill,
                ) -> subxt::tx::StaticTxPayload<FillBlock> {
                    subxt::tx::StaticTxPayload::new(
                        "System",
                        "fill_block",
                        FillBlock { ratio },
                        [
                            48u8, 18u8, 205u8, 90u8, 222u8, 4u8, 20u8, 251u8, 173u8, 76u8, 167u8,
                            4u8, 83u8, 203u8, 160u8, 89u8, 132u8, 218u8, 191u8, 145u8, 130u8,
                            245u8, 177u8, 201u8, 169u8, 129u8, 173u8, 105u8, 88u8, 45u8, 136u8,
                            191u8,
                        ],
                    )
                }
                #[doc = "Make some on-chain remark."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(1)`"]
                #[doc = "# </weight>"]
                pub fn remark(
                    &self,
                    remark: ::std::vec::Vec<::core::primitive::u8>,
                ) -> subxt::tx::StaticTxPayload<Remark> {
                    subxt::tx::StaticTxPayload::new(
                        "System",
                        "remark",
                        Remark { remark },
                        [
                            101u8, 80u8, 195u8, 226u8, 224u8, 247u8, 60u8, 128u8, 3u8, 101u8, 51u8,
                            147u8, 96u8, 126u8, 76u8, 230u8, 194u8, 227u8, 191u8, 73u8, 160u8,
                            146u8, 87u8, 147u8, 243u8, 28u8, 228u8, 116u8, 224u8, 181u8, 129u8,
                            160u8,
                        ],
                    )
                }
                #[doc = "Set the number of pages in the WebAssembly environment's heap."]
                pub fn set_heap_pages(
                    &self,
                    pages: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<SetHeapPages> {
                    subxt::tx::StaticTxPayload::new(
                        "System",
                        "set_heap_pages",
                        SetHeapPages { pages },
                        [
                            43u8, 103u8, 128u8, 49u8, 156u8, 136u8, 11u8, 204u8, 80u8, 6u8, 244u8,
                            86u8, 171u8, 44u8, 140u8, 225u8, 142u8, 198u8, 43u8, 87u8, 26u8, 45u8,
                            125u8, 222u8, 165u8, 254u8, 172u8, 158u8, 39u8, 178u8, 86u8, 87u8,
                        ],
                    )
                }
                #[doc = "Set the new runtime code."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"]
                #[doc = "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is"]
                #[doc = "  expensive)."]
                #[doc = "- 1 storage write (codec `O(C)`)."]
                #[doc = "- 1 digest item."]
                #[doc = "- 1 event."]
                #[doc = "The weight of this function is dependent on the runtime, but generally this is very"]
                #[doc = "expensive. We will treat this as a full block."]
                #[doc = "# </weight>"]
                pub fn set_code(
                    &self,
                    code: ::std::vec::Vec<::core::primitive::u8>,
                ) -> subxt::tx::StaticTxPayload<SetCode> {
                    subxt::tx::StaticTxPayload::new(
                        "System",
                        "set_code",
                        SetCode { code },
                        [
                            27u8, 104u8, 244u8, 205u8, 188u8, 254u8, 121u8, 13u8, 106u8, 120u8,
                            244u8, 108u8, 97u8, 84u8, 100u8, 68u8, 26u8, 69u8, 93u8, 128u8, 107u8,
                            4u8, 3u8, 142u8, 13u8, 134u8, 196u8, 62u8, 113u8, 181u8, 14u8, 40u8,
                        ],
                    )
                }
                #[doc = "Set the new runtime code without doing any checks of the given `code`."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(C)` where `C` length of `code`"]
                #[doc = "- 1 storage write (codec `O(C)`)."]
                #[doc = "- 1 digest item."]
                #[doc = "- 1 event."]
                #[doc = "The weight of this function is dependent on the runtime. We will treat this as a full"]
                #[doc = "block. # </weight>"]
                pub fn set_code_without_checks(
                    &self,
                    code: ::std::vec::Vec<::core::primitive::u8>,
                ) -> subxt::tx::StaticTxPayload<SetCodeWithoutChecks> {
                    subxt::tx::StaticTxPayload::new(
                        "System",
                        "set_code_without_checks",
                        SetCodeWithoutChecks { code },
                        [
                            102u8, 160u8, 125u8, 235u8, 30u8, 23u8, 45u8, 239u8, 112u8, 148u8,
                            159u8, 158u8, 42u8, 93u8, 206u8, 94u8, 80u8, 250u8, 66u8, 195u8, 60u8,
                            40u8, 142u8, 169u8, 183u8, 80u8, 80u8, 96u8, 3u8, 231u8, 99u8, 216u8,
                        ],
                    )
                }
                #[doc = "Set some items of storage."]
                pub fn set_storage(
                    &self,
                    items: ::std::vec::Vec<(
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>,
                ) -> subxt::tx::StaticTxPayload<SetStorage> {
                    subxt::tx::StaticTxPayload::new(
                        "System",
                        "set_storage",
                        SetStorage { items },
                        [
                            74u8, 43u8, 106u8, 255u8, 50u8, 151u8, 192u8, 155u8, 14u8, 90u8, 19u8,
                            45u8, 165u8, 16u8, 235u8, 242u8, 21u8, 131u8, 33u8, 172u8, 119u8, 78u8,
                            140u8, 10u8, 107u8, 202u8, 122u8, 235u8, 181u8, 191u8, 22u8, 116u8,
                        ],
                    )
                }
                #[doc = "Kill some items from storage."]
                pub fn kill_storage(
                    &self,
                    keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                ) -> subxt::tx::StaticTxPayload<KillStorage> {
                    subxt::tx::StaticTxPayload::new(
                        "System",
                        "kill_storage",
                        KillStorage { keys },
                        [
                            174u8, 174u8, 13u8, 174u8, 75u8, 138u8, 128u8, 235u8, 222u8, 216u8,
                            85u8, 18u8, 198u8, 1u8, 138u8, 70u8, 19u8, 108u8, 209u8, 41u8, 228u8,
                            67u8, 130u8, 230u8, 160u8, 207u8, 11u8, 180u8, 139u8, 242u8, 41u8,
                            15u8,
                        ],
                    )
                }
                #[doc = "Kill all storage items with a key that starts with the given prefix."]
                #[doc = ""]
                #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
                #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
                pub fn kill_prefix(
                    &self,
                    prefix: ::std::vec::Vec<::core::primitive::u8>,
                    subkeys: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<KillPrefix> {
                    subxt::tx::StaticTxPayload::new(
                        "System",
                        "kill_prefix",
                        KillPrefix { prefix, subkeys },
                        [
                            203u8, 116u8, 217u8, 42u8, 154u8, 215u8, 77u8, 217u8, 13u8, 22u8,
                            193u8, 2u8, 128u8, 115u8, 179u8, 115u8, 187u8, 218u8, 129u8, 34u8,
                            80u8, 4u8, 173u8, 120u8, 92u8, 35u8, 237u8, 112u8, 201u8, 207u8, 200u8,
                            48u8,
                        ],
                    )
                }
                #[doc = "Make some on-chain remark and emit event."]
                pub fn remark_with_event(
                    &self,
                    remark: ::std::vec::Vec<::core::primitive::u8>,
                ) -> subxt::tx::StaticTxPayload<RemarkWithEvent> {
                    subxt::tx::StaticTxPayload::new(
                        "System",
                        "remark_with_event",
                        RemarkWithEvent { remark },
                        [
                            123u8, 225u8, 180u8, 179u8, 144u8, 74u8, 27u8, 85u8, 101u8, 75u8,
                            134u8, 44u8, 181u8, 25u8, 183u8, 158u8, 14u8, 213u8, 56u8, 225u8,
                            136u8, 88u8, 26u8, 114u8, 178u8, 43u8, 176u8, 43u8, 240u8, 84u8, 116u8,
                            46u8,
                        ],
                    )
                }
            }
        }
        #[doc = "Event for the System pallet."]
        pub type Event = runtime_types::frame_system::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An extrinsic completed successfully."]
            pub struct ExtrinsicSuccess {
                pub dispatch_info: runtime_types::frame_support::weights::DispatchInfo,
            }
            impl subxt::events::StaticEvent for ExtrinsicSuccess {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicSuccess";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An extrinsic failed."]
            pub struct ExtrinsicFailed {
                pub dispatch_error: runtime_types::sp_runtime::DispatchError,
                pub dispatch_info: runtime_types::frame_support::weights::DispatchInfo,
            }
            impl subxt::events::StaticEvent for ExtrinsicFailed {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicFailed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "`:code` was updated."]
            pub struct CodeUpdated;
            impl subxt::events::StaticEvent for CodeUpdated {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "CodeUpdated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A new account was created."]
            pub struct NewAccount {
                pub account: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for NewAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "NewAccount";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An account was reaped."]
            pub struct KilledAccount {
                pub account: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for KilledAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "KilledAccount";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "On on-chain remark happened."]
            pub struct Remarked {
                pub sender: subxt::ext::sp_core::crypto::AccountId32,
                pub hash: subxt::ext::sp_core::H256,
            }
            impl subxt::events::StaticEvent for Remarked {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "Remarked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The full account information for a particular account ID."]
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::frame_system::AccountInfo<
                            ::core::primitive::u32,
                            runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "Account",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            176u8, 187u8, 21u8, 220u8, 159u8, 204u8, 127u8, 14u8, 21u8, 69u8, 77u8,
                            114u8, 230u8, 141u8, 107u8, 79u8, 23u8, 16u8, 174u8, 243u8, 252u8,
                            42u8, 65u8, 120u8, 229u8, 38u8, 210u8, 255u8, 22u8, 40u8, 109u8, 223u8,
                        ],
                    )
                }
                #[doc = " The full account information for a particular account ID."]
                pub fn account_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::frame_system::AccountInfo<
                            ::core::primitive::u32,
                            runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
                        >,
                    >,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "Account",
                        Vec::new(),
                        [
                            176u8, 187u8, 21u8, 220u8, 159u8, 204u8, 127u8, 14u8, 21u8, 69u8, 77u8,
                            114u8, 230u8, 141u8, 107u8, 79u8, 23u8, 16u8, 174u8, 243u8, 252u8,
                            42u8, 65u8, 120u8, 229u8, 38u8, 210u8, 255u8, 22u8, 40u8, 109u8, 223u8,
                        ],
                    )
                }
                #[doc = " Total extrinsics count for the current block."]
                pub fn extrinsic_count(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "ExtrinsicCount",
                        vec![],
                        [
                            223u8, 60u8, 201u8, 120u8, 36u8, 44u8, 180u8, 210u8, 242u8, 53u8,
                            222u8, 154u8, 123u8, 176u8, 249u8, 8u8, 225u8, 28u8, 232u8, 4u8, 136u8,
                            41u8, 151u8, 82u8, 189u8, 149u8, 49u8, 166u8, 139u8, 9u8, 163u8, 231u8,
                        ],
                    )
                }
                #[doc = " The current weight for the block."]
                pub fn block_weight(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::frame_support::weights::PerDispatchClass<
                            ::core::primitive::u64,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "BlockWeight",
                        vec![],
                        [
                            91u8, 211u8, 177u8, 36u8, 147u8, 249u8, 55u8, 164u8, 48u8, 49u8, 55u8,
                            11u8, 121u8, 193u8, 103u8, 69u8, 38u8, 142u8, 148u8, 36u8, 137u8, 41u8,
                            115u8, 195u8, 31u8, 174u8, 163u8, 125u8, 69u8, 5u8, 94u8, 79u8,
                        ],
                    )
                }
                #[doc = " Total length (in bytes) for all extrinsics put together, for the current block."]
                pub fn all_extrinsics_len(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "AllExtrinsicsLen",
                        vec![],
                        [
                            202u8, 145u8, 209u8, 225u8, 40u8, 220u8, 174u8, 74u8, 93u8, 164u8,
                            254u8, 248u8, 254u8, 192u8, 32u8, 117u8, 96u8, 149u8, 53u8, 145u8,
                            219u8, 64u8, 234u8, 18u8, 217u8, 200u8, 203u8, 141u8, 145u8, 28u8,
                            134u8, 60u8,
                        ],
                    )
                }
                #[doc = " Map of block numbers to block hashes."]
                pub fn block_hash(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<subxt::ext::sp_core::H256>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "BlockHash",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            50u8, 112u8, 176u8, 239u8, 175u8, 18u8, 205u8, 20u8, 241u8, 195u8,
                            21u8, 228u8, 186u8, 57u8, 200u8, 25u8, 38u8, 44u8, 106u8, 20u8, 168u8,
                            80u8, 76u8, 235u8, 12u8, 51u8, 137u8, 149u8, 200u8, 4u8, 220u8, 237u8,
                        ],
                    )
                }
                #[doc = " Map of block numbers to block hashes."]
                pub fn block_hash_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<subxt::ext::sp_core::H256>,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "BlockHash",
                        Vec::new(),
                        [
                            50u8, 112u8, 176u8, 239u8, 175u8, 18u8, 205u8, 20u8, 241u8, 195u8,
                            21u8, 228u8, 186u8, 57u8, 200u8, 25u8, 38u8, 44u8, 106u8, 20u8, 168u8,
                            80u8, 76u8, 235u8, 12u8, 51u8, 137u8, 149u8, 200u8, 4u8, 220u8, 237u8,
                        ],
                    )
                }
                #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
                pub fn extrinsic_data(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "ExtrinsicData",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            210u8, 224u8, 211u8, 186u8, 118u8, 210u8, 185u8, 194u8, 238u8, 211u8,
                            254u8, 73u8, 67u8, 184u8, 31u8, 229u8, 168u8, 125u8, 98u8, 23u8, 241u8,
                            59u8, 49u8, 86u8, 126u8, 9u8, 114u8, 163u8, 160u8, 62u8, 50u8, 67u8,
                        ],
                    )
                }
                #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
                pub fn extrinsic_data_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "ExtrinsicData",
                        Vec::new(),
                        [
                            210u8, 224u8, 211u8, 186u8, 118u8, 210u8, 185u8, 194u8, 238u8, 211u8,
                            254u8, 73u8, 67u8, 184u8, 31u8, 229u8, 168u8, 125u8, 98u8, 23u8, 241u8,
                            59u8, 49u8, 86u8, 126u8, 9u8, 114u8, 163u8, 160u8, 62u8, 50u8, 67u8,
                        ],
                    )
                }
                #[doc = " The current block number being processed. Set by `execute_block`."]
                pub fn number(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "Number",
                        vec![],
                        [
                            228u8, 96u8, 102u8, 190u8, 252u8, 130u8, 239u8, 172u8, 126u8, 235u8,
                            246u8, 139u8, 208u8, 15u8, 88u8, 245u8, 141u8, 232u8, 43u8, 204u8,
                            36u8, 87u8, 211u8, 141u8, 187u8, 68u8, 236u8, 70u8, 193u8, 235u8,
                            164u8, 191u8,
                        ],
                    )
                }
                #[doc = " Hash of the previous block."]
                pub fn parent_hash(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<subxt::ext::sp_core::H256>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "ParentHash",
                        vec![],
                        [
                            232u8, 206u8, 177u8, 119u8, 38u8, 57u8, 233u8, 50u8, 225u8, 49u8,
                            169u8, 176u8, 210u8, 51u8, 231u8, 176u8, 234u8, 186u8, 188u8, 112u8,
                            15u8, 152u8, 195u8, 232u8, 201u8, 97u8, 208u8, 249u8, 9u8, 163u8, 69u8,
                            36u8,
                        ],
                    )
                }
                #[doc = " Digest of the current block, also part of the block header."]
                pub fn digest(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::generic::digest::Digest,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "Digest",
                        vec![],
                        [
                            83u8, 141u8, 200u8, 132u8, 182u8, 55u8, 197u8, 122u8, 13u8, 159u8,
                            31u8, 42u8, 60u8, 191u8, 89u8, 221u8, 242u8, 47u8, 199u8, 213u8, 48u8,
                            216u8, 131u8, 168u8, 245u8, 82u8, 56u8, 190u8, 62u8, 69u8, 96u8, 37u8,
                        ],
                    )
                }
                #[doc = " Events deposited for the current block."]
                #[doc = ""]
                #[doc = " NOTE: The item is unbound and should therefore never be read on chain."]
                #[doc = " It could otherwise inflate the PoV size of a block."]
                #[doc = ""]
                #[doc = " Events have a large in-memory size. Box the events to not go out-of-memory"]
                #[doc = " just in case someone still reads them from within the runtime."]
                pub fn events(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<
                            runtime_types::frame_system::EventRecord<
                                runtime_types::dali_runtime::Event,
                                subxt::ext::sp_core::H256,
                            >,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "Events",
                        vec![],
                        [
                            169u8, 96u8, 180u8, 255u8, 142u8, 73u8, 206u8, 76u8, 15u8, 96u8, 48u8,
                            20u8, 158u8, 171u8, 49u8, 190u8, 22u8, 147u8, 77u8, 154u8, 223u8,
                            223u8, 246u8, 179u8, 77u8, 110u8, 58u8, 62u8, 81u8, 207u8, 196u8, 3u8,
                        ],
                    )
                }
                #[doc = " The number of events in the `Events<T>` list."]
                pub fn event_count(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "EventCount",
                        vec![],
                        [
                            236u8, 93u8, 90u8, 177u8, 250u8, 211u8, 138u8, 187u8, 26u8, 208u8,
                            203u8, 113u8, 221u8, 233u8, 227u8, 9u8, 249u8, 25u8, 202u8, 185u8,
                            161u8, 144u8, 167u8, 104u8, 127u8, 187u8, 38u8, 18u8, 52u8, 61u8, 66u8,
                            112u8,
                        ],
                    )
                }
                #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
                #[doc = " of events in the `<Events<T>>` list."]
                #[doc = ""]
                #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
                #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
                #[doc = " in case of changes fetch the list of events of interest."]
                #[doc = ""]
                #[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
                #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
                #[doc = " no notification will be triggered thus the event might be lost."]
                pub fn event_topics(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::H256>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "EventTopics",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            205u8, 90u8, 142u8, 190u8, 176u8, 37u8, 94u8, 82u8, 98u8, 1u8, 129u8,
                            63u8, 246u8, 101u8, 130u8, 58u8, 216u8, 16u8, 139u8, 196u8, 154u8,
                            111u8, 110u8, 178u8, 24u8, 44u8, 183u8, 176u8, 232u8, 82u8, 223u8,
                            38u8,
                        ],
                    )
                }
                #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
                #[doc = " of events in the `<Events<T>>` list."]
                #[doc = ""]
                #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
                #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
                #[doc = " in case of changes fetch the list of events of interest."]
                #[doc = ""]
                #[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
                #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
                #[doc = " no notification will be triggered thus the event might be lost."]
                pub fn event_topics_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
                    >,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "EventTopics",
                        Vec::new(),
                        [
                            205u8, 90u8, 142u8, 190u8, 176u8, 37u8, 94u8, 82u8, 98u8, 1u8, 129u8,
                            63u8, 246u8, 101u8, 130u8, 58u8, 216u8, 16u8, 139u8, 196u8, 154u8,
                            111u8, 110u8, 178u8, 24u8, 44u8, 183u8, 176u8, 232u8, 82u8, 223u8,
                            38u8,
                        ],
                    )
                }
                #[doc = " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]
                pub fn last_runtime_upgrade(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::frame_system::LastRuntimeUpgradeInfo,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "LastRuntimeUpgrade",
                        vec![],
                        [
                            52u8, 37u8, 117u8, 111u8, 57u8, 130u8, 196u8, 14u8, 99u8, 77u8, 91u8,
                            126u8, 178u8, 249u8, 78u8, 34u8, 9u8, 194u8, 92u8, 105u8, 113u8, 81u8,
                            185u8, 127u8, 245u8, 184u8, 60u8, 29u8, 234u8, 182u8, 96u8, 196u8,
                        ],
                    )
                }
                #[doc = " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]
                pub fn upgraded_to_u32_ref_count(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::bool>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "UpgradedToU32RefCount",
                        vec![],
                        [
                            171u8, 88u8, 244u8, 92u8, 122u8, 67u8, 27u8, 18u8, 59u8, 175u8, 175u8,
                            178u8, 20u8, 150u8, 213u8, 59u8, 222u8, 141u8, 32u8, 107u8, 3u8, 114u8,
                            83u8, 250u8, 180u8, 233u8, 152u8, 54u8, 187u8, 99u8, 131u8, 204u8,
                        ],
                    )
                }
                #[doc = " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False"]
                #[doc = " (default) if not."]
                pub fn upgraded_to_triple_ref_count(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::bool>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "UpgradedToTripleRefCount",
                        vec![],
                        [
                            90u8, 33u8, 56u8, 86u8, 90u8, 101u8, 89u8, 133u8, 203u8, 56u8, 201u8,
                            210u8, 244u8, 232u8, 150u8, 18u8, 51u8, 105u8, 14u8, 230u8, 103u8,
                            155u8, 246u8, 99u8, 53u8, 207u8, 225u8, 128u8, 186u8, 76u8, 40u8,
                            185u8,
                        ],
                    )
                }
                #[doc = " The execution phase of the block."]
                pub fn execution_phase(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::frame_system::Phase>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "ExecutionPhase",
                        vec![],
                        [
                            230u8, 183u8, 221u8, 135u8, 226u8, 223u8, 55u8, 104u8, 138u8, 224u8,
                            103u8, 156u8, 222u8, 99u8, 203u8, 199u8, 164u8, 168u8, 193u8, 133u8,
                            201u8, 155u8, 63u8, 95u8, 17u8, 206u8, 165u8, 123u8, 161u8, 33u8,
                            172u8, 93u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Block & extrinsics weights: base values and limits."]
                pub fn block_weights(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::frame_system::limits::BlockWeights,
                    >,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "System",
                        "BlockWeights",
                        [
                            153u8, 164u8, 86u8, 79u8, 97u8, 114u8, 248u8, 181u8, 179u8, 186u8,
                            214u8, 124u8, 215u8, 96u8, 116u8, 109u8, 215u8, 182u8, 61u8, 10u8,
                            77u8, 74u8, 29u8, 125u8, 131u8, 111u8, 249u8, 208u8, 233u8, 170u8,
                            11u8, 14u8,
                        ],
                    )
                }
                #[doc = " The maximum length of a block (in bytes)."]
                pub fn block_length(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::frame_system::limits::BlockLength,
                    >,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "System",
                        "BlockLength",
                        [
                            116u8, 184u8, 225u8, 228u8, 207u8, 203u8, 4u8, 220u8, 234u8, 198u8,
                            150u8, 108u8, 205u8, 87u8, 194u8, 131u8, 229u8, 51u8, 140u8, 4u8, 47u8,
                            12u8, 200u8, 144u8, 153u8, 62u8, 51u8, 39u8, 138u8, 205u8, 203u8,
                            236u8,
                        ],
                    )
                }
                #[doc = " Maximum number of block number to block hash mappings to keep (oldest pruned first)."]
                pub fn block_hash_count(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "System",
                        "BlockHashCount",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The weight of runtime database operations the runtime can invoke."]
                pub fn db_weight(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::frame_support::weights::RuntimeDbWeight,
                    >,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "System",
                        "DbWeight",
                        [
                            124u8, 162u8, 190u8, 149u8, 49u8, 177u8, 162u8, 231u8, 62u8, 167u8,
                            199u8, 181u8, 43u8, 232u8, 185u8, 116u8, 195u8, 51u8, 233u8, 223u8,
                            20u8, 129u8, 246u8, 13u8, 65u8, 180u8, 64u8, 9u8, 157u8, 59u8, 245u8,
                            118u8,
                        ],
                    )
                }
                #[doc = " Get the chain's current version."]
                pub fn version(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::sp_version::RuntimeVersion>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "System",
                        "Version",
                        [
                            93u8, 98u8, 57u8, 243u8, 229u8, 8u8, 234u8, 231u8, 72u8, 230u8, 139u8,
                            47u8, 63u8, 181u8, 17u8, 2u8, 220u8, 231u8, 104u8, 237u8, 185u8, 143u8,
                            165u8, 253u8, 188u8, 76u8, 147u8, 12u8, 170u8, 26u8, 74u8, 200u8,
                        ],
                    )
                }
                #[doc = " The designated SS85 prefix of this chain."]
                #[doc = ""]
                #[doc = " This replaces the \"ss58Format\" property declared in the chain spec. Reason is"]
                #[doc = " that the runtime should know about the prefix in order to make use of it as"]
                #[doc = " an identifier of the chain."]
                pub fn ss58_prefix(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u16>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "System",
                        "SS58Prefix",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod timestamp {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Set {
                #[codec(compact)]
                pub now: ::core::primitive::u64,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the current time."]
                #[doc = ""]
                #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
                #[doc = "phase, if this call hasn't been invoked by that time."]
                #[doc = ""]
                #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
                #[doc = "`MinimumPeriod`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Inherent`."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
                #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
                #[doc = "  `on_finalize`)"]
                #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
                #[doc = "# </weight>"]
                pub fn set(&self, now: ::core::primitive::u64) -> subxt::tx::StaticTxPayload<Set> {
                    subxt::tx::StaticTxPayload::new(
                        "Timestamp",
                        "set",
                        Set { now },
                        [
                            6u8, 97u8, 172u8, 236u8, 118u8, 238u8, 228u8, 114u8, 15u8, 115u8,
                            102u8, 85u8, 66u8, 151u8, 16u8, 33u8, 187u8, 17u8, 166u8, 88u8, 127u8,
                            214u8, 182u8, 51u8, 168u8, 88u8, 43u8, 101u8, 185u8, 8u8, 1u8, 28u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Current time for the current block."]
                pub fn now(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Timestamp",
                        "Now",
                        vec![],
                        [
                            148u8, 53u8, 50u8, 54u8, 13u8, 161u8, 57u8, 150u8, 16u8, 83u8, 144u8,
                            221u8, 59u8, 75u8, 158u8, 130u8, 39u8, 123u8, 106u8, 134u8, 202u8,
                            185u8, 83u8, 85u8, 60u8, 41u8, 120u8, 96u8, 210u8, 34u8, 2u8, 250u8,
                        ],
                    )
                }
                #[doc = " Did the timestamp get updated in this block?"]
                pub fn did_update(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::bool>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Timestamp",
                        "DidUpdate",
                        vec![],
                        [
                            70u8, 13u8, 92u8, 186u8, 80u8, 151u8, 167u8, 90u8, 158u8, 232u8, 175u8,
                            13u8, 103u8, 135u8, 2u8, 78u8, 16u8, 6u8, 39u8, 158u8, 167u8, 85u8,
                            27u8, 47u8, 122u8, 73u8, 127u8, 26u8, 35u8, 168u8, 72u8, 204u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum period between blocks. Beware that this is different to the *expected*"]
                #[doc = " period that the block production apparatus provides. Your chosen consensus system will"]
                #[doc = " generally work with this to determine a sensible block time. e.g. For Aura, it will be"]
                #[doc = " double this period on default settings."]
                pub fn minimum_period(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Timestamp",
                        "MinimumPeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod sudo {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Sudo {
                pub call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SudoUncheckedWeight {
                pub call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
                pub weight: ::core::primitive::u64,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetKey {
                pub new: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SudoAs {
                pub who: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- Limited storage reads."]
                #[doc = "- One DB write (event)."]
                #[doc = "- Weight of derivative `call` execution + 10,000."]
                #[doc = "# </weight>"]
                pub fn sudo(
                    &self,
                    call: runtime_types::dali_runtime::Call,
                ) -> subxt::tx::StaticTxPayload<Sudo> {
                    subxt::tx::StaticTxPayload::new(
                        "Sudo",
                        "sudo",
                        Sudo {
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            4u8, 179u8, 204u8, 20u8, 4u8, 96u8, 60u8, 19u8, 180u8, 97u8, 106u8,
                            217u8, 85u8, 206u8, 134u8, 99u8, 27u8, 228u8, 84u8, 237u8, 213u8,
                            117u8, 51u8, 246u8, 58u8, 233u8, 248u8, 113u8, 156u8, 54u8, 226u8,
                            148u8,
                        ],
                    )
                }
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "Sudo user to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- The weight of this call is defined by the caller."]
                #[doc = "# </weight>"]
                pub fn sudo_unchecked_weight(
                    &self,
                    call: runtime_types::dali_runtime::Call,
                    weight: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<SudoUncheckedWeight> {
                    subxt::tx::StaticTxPayload::new(
                        "Sudo",
                        "sudo_unchecked_weight",
                        SudoUncheckedWeight {
                            call: ::std::boxed::Box::new(call),
                            weight,
                        },
                        [
                            253u8, 99u8, 98u8, 45u8, 91u8, 237u8, 251u8, 129u8, 70u8, 156u8, 250u8,
                            119u8, 132u8, 157u8, 166u8, 196u8, 27u8, 223u8, 253u8, 199u8, 185u8,
                            231u8, 118u8, 50u8, 160u8, 31u8, 32u8, 195u8, 115u8, 189u8, 88u8,
                            227u8,
                        ],
                    )
                }
                #[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
                #[doc = "key."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- Limited storage reads."]
                #[doc = "- One DB change."]
                #[doc = "# </weight>"]
                pub fn set_key(
                    &self,
                    new: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> subxt::tx::StaticTxPayload<SetKey> {
                    subxt::tx::StaticTxPayload::new(
                        "Sudo",
                        "set_key",
                        SetKey { new },
                        [
                            34u8, 116u8, 170u8, 18u8, 106u8, 17u8, 231u8, 159u8, 110u8, 246u8, 2u8,
                            27u8, 161u8, 155u8, 163u8, 41u8, 138u8, 7u8, 81u8, 98u8, 230u8, 182u8,
                            23u8, 222u8, 240u8, 117u8, 173u8, 232u8, 192u8, 55u8, 92u8, 208u8,
                        ],
                    )
                }
                #[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
                #[doc = "a given account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- Limited storage reads."]
                #[doc = "- One DB write (event)."]
                #[doc = "- Weight of derivative `call` execution + 10,000."]
                #[doc = "# </weight>"]
                pub fn sudo_as(
                    &self,
                    who: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    call: runtime_types::dali_runtime::Call,
                ) -> subxt::tx::StaticTxPayload<SudoAs> {
                    subxt::tx::StaticTxPayload::new(
                        "Sudo",
                        "sudo_as",
                        SudoAs {
                            who,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            94u8, 225u8, 186u8, 154u8, 190u8, 16u8, 91u8, 157u8, 128u8, 100u8,
                            40u8, 37u8, 43u8, 255u8, 187u8, 221u8, 168u8, 43u8, 77u8, 68u8, 218u8,
                            116u8, 250u8, 4u8, 28u8, 80u8, 169u8, 137u8, 232u8, 24u8, 117u8, 6u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_sudo::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A sudo just took place. \\[result\\]"]
            pub struct Sudid {
                pub sudo_result:
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl subxt::events::StaticEvent for Sudid {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "Sudid";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."]
            pub struct KeyChanged {
                pub old_sudoer: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
            }
            impl subxt::events::StaticEvent for KeyChanged {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "KeyChanged";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A sudo just took place. \\[result\\]"]
            pub struct SudoAsDone {
                pub sudo_result:
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl subxt::events::StaticEvent for SudoAsDone {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "SudoAsDone";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The `AccountId` of the sudo key."]
                pub fn key(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<subxt::ext::sp_core::crypto::AccountId32>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Sudo",
                        "Key",
                        vec![],
                        [
                            244u8, 73u8, 188u8, 136u8, 218u8, 163u8, 68u8, 179u8, 122u8, 173u8,
                            34u8, 108u8, 137u8, 28u8, 182u8, 16u8, 196u8, 92u8, 138u8, 34u8, 102u8,
                            80u8, 199u8, 88u8, 107u8, 207u8, 36u8, 22u8, 168u8, 167u8, 20u8, 142u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod randomness_collective_flip {
        use super::{root_mod, runtime_types};
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Series of block headers from the last 81 blocks that acts as random seed material. This"]
                #[doc = " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of"]
                #[doc = " the oldest hash."]
                pub fn random_material(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            subxt::ext::sp_core::H256,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "RandomnessCollectiveFlip",
                        "RandomMaterial",
                        vec![],
                        [
                            152u8, 126u8, 73u8, 88u8, 54u8, 147u8, 6u8, 19u8, 214u8, 40u8, 159u8,
                            30u8, 236u8, 61u8, 240u8, 65u8, 178u8, 94u8, 146u8, 152u8, 135u8,
                            252u8, 160u8, 86u8, 123u8, 114u8, 251u8, 140u8, 98u8, 143u8, 217u8,
                            242u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod transaction_payment {
        use super::{root_mod, runtime_types};
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_transaction_payment::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
            #[doc = "has been paid by `who`."]
            pub struct TransactionFeePaid {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub actual_fee: ::core::primitive::u128,
                pub tip: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for TransactionFeePaid {
                const PALLET: &'static str = "TransactionPayment";
                const EVENT: &'static str = "TransactionFeePaid";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn next_fee_multiplier(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "TransactionPayment",
                        "NextFeeMultiplier",
                        vec![],
                        [
                            210u8, 0u8, 206u8, 165u8, 183u8, 10u8, 206u8, 52u8, 14u8, 90u8, 218u8,
                            197u8, 189u8, 125u8, 113u8, 216u8, 52u8, 161u8, 45u8, 24u8, 245u8,
                            237u8, 121u8, 41u8, 106u8, 29u8, 45u8, 129u8, 250u8, 203u8, 206u8,
                            180u8,
                        ],
                    )
                }
                pub fn storage_version(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_transaction_payment::Releases,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "TransactionPayment",
                        "StorageVersion",
                        vec![],
                        [
                            219u8, 243u8, 82u8, 176u8, 65u8, 5u8, 132u8, 114u8, 8u8, 82u8, 176u8,
                            200u8, 97u8, 150u8, 177u8, 164u8, 166u8, 11u8, 34u8, 12u8, 12u8, 198u8,
                            58u8, 191u8, 186u8, 221u8, 221u8, 119u8, 181u8, 253u8, 154u8, 228u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their"]
                #[doc = " `priority`"]
                #[doc = ""]
                #[doc = " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later"]
                #[doc = " added to a tip component in regular `priority` calculations."]
                #[doc = " It means that a `Normal` transaction can front-run a similarly-sized `Operational`"]
                #[doc = " extrinsic (with no tip), by including a tip value greater than the virtual tip."]
                #[doc = ""]
                #[doc = " ```rust,ignore"]
                #[doc = " // For `Normal`"]
                #[doc = " let priority = priority_calc(tip);"]
                #[doc = ""]
                #[doc = " // For `Operational`"]
                #[doc = " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;"]
                #[doc = " let priority = priority_calc(tip + virtual_tip);"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " Note that since we use `final_fee` the multiplier applies also to the regular `tip`"]
                #[doc = " sent with the transaction. So, not only does the transaction get a priority bump based"]
                #[doc = " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`"]
                #[doc = " transactions."]
                pub fn operational_fee_multiplier(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u8>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "TransactionPayment",
                        "OperationalFeeMultiplier",
                        [
                            141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
                            28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
                            114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
                            165u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod asset_tx_payment {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetPaymentAsset {
                pub payer: subxt::ext::sp_core::crypto::AccountId32,
                pub asset_id:
                    ::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Sets or resets payment asset."]
                #[doc = ""]
                #[doc = "If `asset_id` is `None`, then native asset is used."]
                #[doc = "Else new asset is configured and ED is on hold."]
                pub fn set_payment_asset(
                    &self,
                    payer: subxt::ext::sp_core::crypto::AccountId32,
                    asset_id: ::core::option::Option<
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                ) -> subxt::tx::StaticTxPayload<SetPaymentAsset> {
                    subxt::tx::StaticTxPayload::new(
                        "AssetTxPayment",
                        "set_payment_asset",
                        SetPaymentAsset { payer, asset_id },
                        [
                            136u8, 228u8, 139u8, 140u8, 117u8, 3u8, 147u8, 49u8, 43u8, 230u8, 7u8,
                            37u8, 202u8, 138u8, 8u8, 109u8, 218u8, 91u8, 42u8, 61u8, 171u8, 147u8,
                            19u8, 6u8, 69u8, 224u8, 127u8, 220u8, 127u8, 132u8, 65u8, 138u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Stores default payment asset of user with ED locked."]
                pub fn payment_assets(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    )>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "AssetTxPayment",
                        "PaymentAssets",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            150u8, 228u8, 85u8, 159u8, 93u8, 176u8, 168u8, 224u8, 231u8, 60u8,
                            49u8, 69u8, 224u8, 78u8, 73u8, 237u8, 193u8, 21u8, 138u8, 57u8, 169u8,
                            254u8, 61u8, 212u8, 36u8, 88u8, 253u8, 109u8, 149u8, 229u8, 151u8,
                            232u8,
                        ],
                    )
                }
                #[doc = " Stores default payment asset of user with ED locked."]
                pub fn payment_assets_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    )>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "AssetTxPayment",
                        "PaymentAssets",
                        Vec::new(),
                        [
                            150u8, 228u8, 85u8, 159u8, 93u8, 176u8, 168u8, 224u8, 231u8, 60u8,
                            49u8, 69u8, 224u8, 78u8, 73u8, 237u8, 193u8, 21u8, 138u8, 57u8, 169u8,
                            254u8, 61u8, 212u8, 36u8, 88u8, 253u8, 109u8, 149u8, 229u8, 151u8,
                            232u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " where to allow configuring default asset per user"]
                pub fn use_user_configuration(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::bool>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "AssetTxPayment",
                        "UseUserConfiguration",
                        [
                            165u8, 28u8, 112u8, 190u8, 18u8, 129u8, 182u8, 206u8, 237u8, 1u8, 68u8,
                            252u8, 125u8, 234u8, 185u8, 50u8, 149u8, 164u8, 47u8, 126u8, 134u8,
                            100u8, 14u8, 86u8, 209u8, 39u8, 20u8, 4u8, 233u8, 115u8, 102u8, 131u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod indices {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct Claim {
                pub index: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Transfer {
                pub new: subxt::ext::sp_core::crypto::AccountId32,
                pub index: ::core::primitive::u32,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct Free {
                pub index: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ForceTransfer {
                pub new: subxt::ext::sp_core::crypto::AccountId32,
                pub index: ::core::primitive::u32,
                pub freeze: ::core::primitive::bool,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct Freeze {
                pub index: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Assign an previously unassigned index."]
                #[doc = ""]
                #[doc = "Payment: `Deposit` is reserved from the sender account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `index`: the index to be claimed. This must not be in use."]
                #[doc = ""]
                #[doc = "Emits `IndexAssigned` if successful."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(1)`."]
                #[doc = "- One storage mutation (codec `O(1)`)."]
                #[doc = "- One reserve operation."]
                #[doc = "- One event."]
                #[doc = "-------------------"]
                #[doc = "- DB Weight: 1 Read/Write (Accounts)"]
                #[doc = "# </weight>"]
                pub fn claim(
                    &self,
                    index: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<Claim> {
                    subxt::tx::StaticTxPayload::new(
                        "Indices",
                        "claim",
                        Claim { index },
                        [
                            5u8, 24u8, 11u8, 173u8, 226u8, 170u8, 0u8, 30u8, 193u8, 102u8, 214u8,
                            59u8, 252u8, 32u8, 221u8, 88u8, 196u8, 189u8, 244u8, 18u8, 233u8, 37u8,
                            228u8, 248u8, 76u8, 175u8, 212u8, 233u8, 238u8, 203u8, 162u8, 68u8,
                        ],
                    )
                }
                #[doc = "Assign an index already owned by the sender to another account. The balance reservation"]
                #[doc = "is effectively transferred to the new account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `index`: the index to be re-assigned. This must be owned by the sender."]
                #[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
                #[doc = ""]
                #[doc = "Emits `IndexAssigned` if successful."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(1)`."]
                #[doc = "- One storage mutation (codec `O(1)`)."]
                #[doc = "- One transfer operation."]
                #[doc = "- One event."]
                #[doc = "-------------------"]
                #[doc = "- DB Weight:"]
                #[doc = "   - Reads: Indices Accounts, System Account (recipient)"]
                #[doc = "   - Writes: Indices Accounts, System Account (recipient)"]
                #[doc = "# </weight>"]
                pub fn transfer(
                    &self,
                    new: subxt::ext::sp_core::crypto::AccountId32,
                    index: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<Transfer> {
                    subxt::tx::StaticTxPayload::new(
                        "Indices",
                        "transfer",
                        Transfer { new, index },
                        [
                            229u8, 48u8, 45u8, 2u8, 206u8, 24u8, 60u8, 43u8, 202u8, 99u8, 80u8,
                            172u8, 62u8, 134u8, 224u8, 128u8, 107u8, 219u8, 57u8, 87u8, 144u8,
                            220u8, 207u8, 79u8, 7u8, 89u8, 208u8, 75u8, 158u8, 75u8, 10u8, 113u8,
                        ],
                    )
                }
                #[doc = "Free up an index owned by the sender."]
                #[doc = ""]
                #[doc = "Payment: Any previous deposit placed for the index is unreserved in the sender account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must own the index."]
                #[doc = ""]
                #[doc = "- `index`: the index to be freed. This must be owned by the sender."]
                #[doc = ""]
                #[doc = "Emits `IndexFreed` if successful."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(1)`."]
                #[doc = "- One storage mutation (codec `O(1)`)."]
                #[doc = "- One reserve operation."]
                #[doc = "- One event."]
                #[doc = "-------------------"]
                #[doc = "- DB Weight: 1 Read/Write (Accounts)"]
                #[doc = "# </weight>"]
                pub fn free(
                    &self,
                    index: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<Free> {
                    subxt::tx::StaticTxPayload::new(
                        "Indices",
                        "free",
                        Free { index },
                        [
                            133u8, 202u8, 225u8, 127u8, 69u8, 145u8, 43u8, 13u8, 160u8, 248u8,
                            215u8, 243u8, 232u8, 166u8, 74u8, 203u8, 235u8, 138u8, 255u8, 27u8,
                            163u8, 71u8, 254u8, 217u8, 6u8, 208u8, 202u8, 204u8, 238u8, 70u8,
                            126u8, 252u8,
                        ],
                    )
                }
                #[doc = "Force an index to an account. This doesn't require a deposit. If the index is already"]
                #[doc = "held, then any deposit is reimbursed to its current owner."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `index`: the index to be (re-)assigned."]
                #[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
                #[doc = "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred."]
                #[doc = ""]
                #[doc = "Emits `IndexAssigned` if successful."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(1)`."]
                #[doc = "- One storage mutation (codec `O(1)`)."]
                #[doc = "- Up to one reserve operation."]
                #[doc = "- One event."]
                #[doc = "-------------------"]
                #[doc = "- DB Weight:"]
                #[doc = "   - Reads: Indices Accounts, System Account (original owner)"]
                #[doc = "   - Writes: Indices Accounts, System Account (original owner)"]
                #[doc = "# </weight>"]
                pub fn force_transfer(
                    &self,
                    new: subxt::ext::sp_core::crypto::AccountId32,
                    index: ::core::primitive::u32,
                    freeze: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<ForceTransfer> {
                    subxt::tx::StaticTxPayload::new(
                        "Indices",
                        "force_transfer",
                        ForceTransfer { new, index, freeze },
                        [
                            2u8, 134u8, 200u8, 233u8, 224u8, 80u8, 237u8, 130u8, 28u8, 159u8,
                            130u8, 223u8, 124u8, 205u8, 248u8, 70u8, 246u8, 77u8, 73u8, 193u8,
                            78u8, 85u8, 58u8, 29u8, 191u8, 217u8, 252u8, 178u8, 113u8, 255u8,
                            151u8, 49u8,
                        ],
                    )
                }
                #[doc = "Freeze an index so it will always point to the sender account. This consumes the"]
                #[doc = "deposit."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the signing account must have a"]
                #[doc = "non-frozen account `index`."]
                #[doc = ""]
                #[doc = "- `index`: the index to be frozen in place."]
                #[doc = ""]
                #[doc = "Emits `IndexFrozen` if successful."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(1)`."]
                #[doc = "- One storage mutation (codec `O(1)`)."]
                #[doc = "- Up to one slash operation."]
                #[doc = "- One event."]
                #[doc = "-------------------"]
                #[doc = "- DB Weight: 1 Read/Write (Accounts)"]
                #[doc = "# </weight>"]
                pub fn freeze(
                    &self,
                    index: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<Freeze> {
                    subxt::tx::StaticTxPayload::new(
                        "Indices",
                        "freeze",
                        Freeze { index },
                        [
                            121u8, 45u8, 118u8, 2u8, 72u8, 48u8, 38u8, 7u8, 234u8, 204u8, 68u8,
                            20u8, 76u8, 251u8, 205u8, 246u8, 149u8, 31u8, 168u8, 186u8, 208u8,
                            90u8, 40u8, 47u8, 100u8, 228u8, 188u8, 33u8, 79u8, 220u8, 105u8, 209u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_indices::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A account index was assigned."]
            pub struct IndexAssigned {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub index: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for IndexAssigned {
                const PALLET: &'static str = "Indices";
                const EVENT: &'static str = "IndexAssigned";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "A account index has been freed up (unassigned)."]
            pub struct IndexFreed {
                pub index: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for IndexFreed {
                const PALLET: &'static str = "Indices";
                const EVENT: &'static str = "IndexFreed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A account index has been frozen to its current account ID."]
            pub struct IndexFrozen {
                pub index: ::core::primitive::u32,
                pub who: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for IndexFrozen {
                const PALLET: &'static str = "Indices";
                const EVENT: &'static str = "IndexFrozen";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The lookup from index to account."]
                pub fn accounts(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::bool,
                    )>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Indices",
                        "Accounts",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            211u8, 169u8, 54u8, 254u8, 88u8, 57u8, 22u8, 223u8, 108u8, 27u8, 38u8,
                            9u8, 202u8, 209u8, 111u8, 209u8, 144u8, 13u8, 211u8, 114u8, 239u8,
                            127u8, 75u8, 166u8, 234u8, 222u8, 225u8, 35u8, 160u8, 163u8, 112u8,
                            242u8,
                        ],
                    )
                }
                #[doc = " The lookup from index to account."]
                pub fn accounts_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::bool,
                    )>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Indices",
                        "Accounts",
                        Vec::new(),
                        [
                            211u8, 169u8, 54u8, 254u8, 88u8, 57u8, 22u8, 223u8, 108u8, 27u8, 38u8,
                            9u8, 202u8, 209u8, 111u8, 209u8, 144u8, 13u8, 211u8, 114u8, 239u8,
                            127u8, 75u8, 166u8, 234u8, 222u8, 225u8, 35u8, 160u8, 163u8, 112u8,
                            242u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The deposit needed for reserving an index."]
                pub fn deposit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Indices",
                        "Deposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod balances {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Transfer {
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetBalance {
                pub who: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub new_free: ::core::primitive::u128,
                #[codec(compact)]
                pub new_reserved: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ForceTransfer {
                pub source: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct TransferKeepAlive {
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct TransferAll {
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ForceUnreserve {
                pub who: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub amount: ::core::primitive::u128,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Transfer some liquid free balance to another account."]
                #[doc = ""]
                #[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
                #[doc = "If the sender's account is below the existential deposit as a result"]
                #[doc = "of the transfer, the account will be reaped."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Dependent on arguments but not critical, given proper implementations for input config"]
                #[doc = "  types. See related functions below."]
                #[doc = "- It contains a limited number of reads and writes internally and no complex"]
                #[doc = "  computation."]
                #[doc = ""]
                #[doc = "Related functions:"]
                #[doc = ""]
                #[doc = "  - `ensure_can_withdraw` is always called internally but has a bounded complexity."]
                #[doc = "  - Transferring balances to accounts that did not exist before will cause"]
                #[doc = "    `T::OnNewAccount::on_new_account` to be called."]
                #[doc = "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`."]
                #[doc = "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check"]
                #[doc = "    that the transfer will not kill the origin account."]
                #[doc = "---------------------------------"]
                #[doc = "- Origin account is already in memory, so no DB operations for them."]
                #[doc = "# </weight>"]
                pub fn transfer(
                    &self,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    value: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<Transfer> {
                    subxt::tx::StaticTxPayload::new(
                        "Balances",
                        "transfer",
                        Transfer { dest, value },
                        [
                            255u8, 181u8, 144u8, 248u8, 64u8, 167u8, 5u8, 134u8, 208u8, 20u8,
                            223u8, 103u8, 235u8, 35u8, 66u8, 184u8, 27u8, 94u8, 176u8, 60u8, 233u8,
                            236u8, 145u8, 218u8, 44u8, 138u8, 240u8, 224u8, 16u8, 193u8, 220u8,
                            95u8,
                        ],
                    )
                }
                #[doc = "Set the balances of a given account."]
                #[doc = ""]
                #[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it will"]
                #[doc = "also alter the total issuance of the system (`TotalIssuance`) appropriately."]
                #[doc = "If the new free or reserved balance is below the existential deposit,"]
                #[doc = "it will reset the account nonce (`frame_system::AccountNonce`)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call is `root`."]
                pub fn set_balance(
                    &self,
                    who: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    new_free: ::core::primitive::u128,
                    new_reserved: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<SetBalance> {
                    subxt::tx::StaticTxPayload::new(
                        "Balances",
                        "set_balance",
                        SetBalance {
                            who,
                            new_free,
                            new_reserved,
                        },
                        [
                            174u8, 34u8, 80u8, 252u8, 193u8, 51u8, 228u8, 236u8, 234u8, 16u8,
                            173u8, 214u8, 122u8, 21u8, 254u8, 7u8, 49u8, 176u8, 18u8, 128u8, 122u8,
                            68u8, 72u8, 181u8, 119u8, 90u8, 167u8, 46u8, 203u8, 220u8, 109u8,
                            110u8,
                        ],
                    )
                }
                #[doc = "Exactly as `transfer`, except the origin must be root and the source account may be"]
                #[doc = "specified."]
                #[doc = "# <weight>"]
                #[doc = "- Same as transfer, but additional read and write because the source account is not"]
                #[doc = "  assumed to be in the overlay."]
                #[doc = "# </weight>"]
                pub fn force_transfer(
                    &self,
                    source: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    value: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<ForceTransfer> {
                    subxt::tx::StaticTxPayload::new(
                        "Balances",
                        "force_transfer",
                        ForceTransfer {
                            source,
                            dest,
                            value,
                        },
                        [
                            56u8, 80u8, 186u8, 45u8, 134u8, 147u8, 200u8, 19u8, 53u8, 221u8, 213u8,
                            32u8, 13u8, 51u8, 130u8, 42u8, 244u8, 85u8, 50u8, 246u8, 189u8, 51u8,
                            93u8, 1u8, 108u8, 142u8, 112u8, 245u8, 104u8, 255u8, 15u8, 62u8,
                        ],
                    )
                }
                #[doc = "Same as the [`transfer`] call, but with a check that the transfer will not kill the"]
                #[doc = "origin account."]
                #[doc = ""]
                #[doc = "99% of the time you want [`transfer`] instead."]
                #[doc = ""]
                #[doc = "[`transfer`]: struct.Pallet.html#method.transfer"]
                pub fn transfer_keep_alive(
                    &self,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    value: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<TransferKeepAlive> {
                    subxt::tx::StaticTxPayload::new(
                        "Balances",
                        "transfer_keep_alive",
                        TransferKeepAlive { dest, value },
                        [
                            202u8, 239u8, 204u8, 0u8, 52u8, 57u8, 158u8, 8u8, 252u8, 178u8, 91u8,
                            197u8, 238u8, 186u8, 205u8, 56u8, 217u8, 250u8, 21u8, 44u8, 239u8,
                            66u8, 79u8, 99u8, 25u8, 106u8, 70u8, 226u8, 50u8, 255u8, 176u8, 71u8,
                        ],
                    )
                }
                #[doc = "Transfer the entire transferable balance from the caller account."]
                #[doc = ""]
                #[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
                #[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
                #[doc = "transferred by this function. To ensure that this function results in a killed account,"]
                #[doc = "you might need to prepare the account by removing any reference counters, storage"]
                #[doc = "deposits, etc..."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be Signed."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
                #[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
                #[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
                #[doc = "  keep the sender account alive (true). # <weight>"]
                #[doc = "- O(1). Just like transfer, but reading the user's transferable balance first."]
                #[doc = "  #</weight>"]
                pub fn transfer_all(
                    &self,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<TransferAll> {
                    subxt::tx::StaticTxPayload::new(
                        "Balances",
                        "transfer_all",
                        TransferAll { dest, keep_alive },
                        [
                            118u8, 215u8, 198u8, 243u8, 4u8, 173u8, 108u8, 224u8, 113u8, 203u8,
                            149u8, 23u8, 130u8, 176u8, 53u8, 205u8, 112u8, 147u8, 88u8, 167u8,
                            197u8, 32u8, 104u8, 117u8, 201u8, 168u8, 144u8, 230u8, 120u8, 29u8,
                            122u8, 159u8,
                        ],
                    )
                }
                #[doc = "Unreserve some balance from a user by force."]
                #[doc = ""]
                #[doc = "Can only be called by ROOT."]
                pub fn force_unreserve(
                    &self,
                    who: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<ForceUnreserve> {
                    subxt::tx::StaticTxPayload::new(
                        "Balances",
                        "force_unreserve",
                        ForceUnreserve { who, amount },
                        [
                            39u8, 229u8, 111u8, 44u8, 147u8, 80u8, 7u8, 26u8, 185u8, 121u8, 149u8,
                            25u8, 151u8, 37u8, 124u8, 46u8, 108u8, 136u8, 167u8, 145u8, 103u8,
                            65u8, 33u8, 168u8, 36u8, 214u8, 126u8, 237u8, 180u8, 61u8, 108u8,
                            110u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_balances::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An account was created with some free balance."]
            pub struct Endowed {
                pub account: subxt::ext::sp_core::crypto::AccountId32,
                pub free_balance: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Endowed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Endowed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
            #[doc = "resulting in an outright loss."]
            pub struct DustLost {
                pub account: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for DustLost {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "DustLost";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Transfer succeeded."]
            pub struct Transfer {
                pub from: subxt::ext::sp_core::crypto::AccountId32,
                pub to: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Transfer {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Transfer";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A balance was set by root."]
            pub struct BalanceSet {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub free: ::core::primitive::u128,
                pub reserved: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for BalanceSet {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "BalanceSet";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Some balance was reserved (moved from free to reserved)."]
            pub struct Reserved {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Reserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Reserved";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Some balance was unreserved (moved from reserved to free)."]
            pub struct Unreserved {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Unreserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Unreserved";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Some balance was moved from the reserve of the first account to the second account."]
            #[doc = "Final argument indicates the destination balance type."]
            pub struct ReserveRepatriated {
                pub from: subxt::ext::sp_core::crypto::AccountId32,
                pub to: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
                pub destination_status:
                    runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
            }
            impl subxt::events::StaticEvent for ReserveRepatriated {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "ReserveRepatriated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Some amount was deposited (e.g. for transaction fees)."]
            pub struct Deposit {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
            pub struct Withdraw {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Withdraw {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Withdraw";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
            pub struct Slashed {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Slashed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The total units issued in the system."]
                pub fn total_issuance(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Balances",
                        "TotalIssuance",
                        vec![],
                        [
                            1u8, 206u8, 252u8, 237u8, 6u8, 30u8, 20u8, 232u8, 164u8, 115u8, 51u8,
                            156u8, 156u8, 206u8, 241u8, 187u8, 44u8, 84u8, 25u8, 164u8, 235u8,
                            20u8, 86u8, 242u8, 124u8, 23u8, 28u8, 140u8, 26u8, 73u8, 231u8, 51u8,
                        ],
                    )
                }
                #[doc = " The Balances pallet example of storing the balance of an account."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " You can also store the balance of an account in the `System` pallet."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "   type AccountStore = System"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
                #[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
                #[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
                #[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Balances",
                        "Account",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            246u8, 154u8, 253u8, 71u8, 192u8, 192u8, 192u8, 236u8, 128u8, 80u8,
                            40u8, 252u8, 201u8, 43u8, 3u8, 131u8, 19u8, 49u8, 141u8, 240u8, 172u8,
                            217u8, 215u8, 109u8, 87u8, 135u8, 248u8, 57u8, 98u8, 185u8, 22u8, 4u8,
                        ],
                    )
                }
                #[doc = " The Balances pallet example of storing the balance of an account."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " You can also store the balance of an account in the `System` pallet."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "   type AccountStore = System"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
                #[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
                #[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
                #[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
                pub fn account_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
                    >,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Balances",
                        "Account",
                        Vec::new(),
                        [
                            246u8, 154u8, 253u8, 71u8, 192u8, 192u8, 192u8, 236u8, 128u8, 80u8,
                            40u8, 252u8, 201u8, 43u8, 3u8, 131u8, 19u8, 49u8, 141u8, 240u8, 172u8,
                            217u8, 215u8, 109u8, 87u8, 135u8, 248u8, 57u8, 98u8, 185u8, 22u8, 4u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks on some account balances."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                pub fn locks(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<
                            runtime_types::pallet_balances::BalanceLock<::core::primitive::u128>,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Balances",
                        "Locks",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            216u8, 253u8, 87u8, 73u8, 24u8, 218u8, 35u8, 0u8, 244u8, 134u8, 195u8,
                            58u8, 255u8, 64u8, 153u8, 212u8, 210u8, 232u8, 4u8, 122u8, 90u8, 212u8,
                            136u8, 14u8, 127u8, 232u8, 8u8, 192u8, 40u8, 233u8, 18u8, 250u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks on some account balances."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                pub fn locks_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<
                            runtime_types::pallet_balances::BalanceLock<::core::primitive::u128>,
                        >,
                    >,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Balances",
                        "Locks",
                        Vec::new(),
                        [
                            216u8, 253u8, 87u8, 73u8, 24u8, 218u8, 35u8, 0u8, 244u8, 134u8, 195u8,
                            58u8, 255u8, 64u8, 153u8, 212u8, 210u8, 232u8, 4u8, 122u8, 90u8, 212u8,
                            136u8, 14u8, 127u8, 232u8, 8u8, 192u8, 40u8, 233u8, 18u8, 250u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]
                pub fn reserves(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            runtime_types::pallet_balances::ReserveData<
                                [::core::primitive::u8; 8usize],
                                ::core::primitive::u128,
                            >,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Balances",
                        "Reserves",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            17u8, 32u8, 191u8, 46u8, 76u8, 220u8, 101u8, 100u8, 42u8, 250u8, 128u8,
                            167u8, 117u8, 44u8, 85u8, 96u8, 105u8, 216u8, 16u8, 147u8, 74u8, 55u8,
                            183u8, 94u8, 160u8, 177u8, 26u8, 187u8, 71u8, 197u8, 187u8, 163u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]
                pub fn reserves_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            runtime_types::pallet_balances::ReserveData<
                                [::core::primitive::u8; 8usize],
                                ::core::primitive::u128,
                            >,
                        >,
                    >,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Balances",
                        "Reserves",
                        Vec::new(),
                        [
                            17u8, 32u8, 191u8, 46u8, 76u8, 220u8, 101u8, 100u8, 42u8, 250u8, 128u8,
                            167u8, 117u8, 44u8, 85u8, 96u8, 105u8, 216u8, 16u8, 147u8, 74u8, 55u8,
                            183u8, 94u8, 160u8, 177u8, 26u8, 187u8, 71u8, 197u8, 187u8, 163u8,
                        ],
                    )
                }
                #[doc = " Storage version of the pallet."]
                #[doc = ""]
                #[doc = " This is set to v2.0.0 for new networks."]
                pub fn storage_version(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::pallet_balances::Releases>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Balances",
                        "StorageVersion",
                        vec![],
                        [
                            135u8, 96u8, 28u8, 234u8, 124u8, 212u8, 56u8, 140u8, 40u8, 101u8,
                            235u8, 128u8, 136u8, 221u8, 182u8, 81u8, 17u8, 9u8, 184u8, 228u8,
                            174u8, 165u8, 200u8, 162u8, 214u8, 178u8, 227u8, 72u8, 34u8, 5u8,
                            173u8, 96u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum amount required to keep an account open."]
                pub fn existential_deposit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Balances",
                        "ExistentialDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum number of locks that should exist on an account."]
                #[doc = " Not strictly enforced, but used for weight estimation."]
                pub fn max_locks(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Balances",
                        "MaxLocks",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of named reserves that can exist on an account."]
                pub fn max_reserves(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Balances",
                        "MaxReserves",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod identity {
        use super::{root_mod, runtime_types};
        #[doc = "Identity pallet declaration."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AddRegistrar {
                pub account: subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetIdentity {
                pub info: ::std::boxed::Box<runtime_types::pallet_identity::types::IdentityInfo>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetSubs {
                pub subs: ::std::vec::Vec<(
                    subxt::ext::sp_core::crypto::AccountId32,
                    runtime_types::pallet_identity::types::Data,
                )>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ClearIdentity;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RequestJudgement {
                #[codec(compact)]
                pub reg_index: ::core::primitive::u32,
                #[codec(compact)]
                pub max_fee: ::core::primitive::u128,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct CancelRequest {
                pub reg_index: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetFee {
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                #[codec(compact)]
                pub fee: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetAccountId {
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                pub new: subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetFields {
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                pub fields: runtime_types::pallet_identity::types::BitFlags<
                    runtime_types::pallet_identity::types::IdentityField,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ProvideJudgement {
                #[codec(compact)]
                pub reg_index: ::core::primitive::u32,
                pub target: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub judgement:
                    runtime_types::pallet_identity::types::Judgement<::core::primitive::u128>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct KillIdentity {
                pub target: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AddSub {
                pub sub: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub data: runtime_types::pallet_identity::types::Data,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RenameSub {
                pub sub: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub data: runtime_types::pallet_identity::types::Data,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RemoveSub {
                pub sub: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct QuitSub;
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Add a registrar to the system."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `T::RegistrarOrigin`."]
                #[doc = ""]
                #[doc = "- `account`: the account of the registrar."]
                #[doc = ""]
                #[doc = "Emits `RegistrarAdded` if successful."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded)."]
                #[doc = "- One storage mutation (codec `O(R)`)."]
                #[doc = "- One event."]
                #[doc = "# </weight>"]
                pub fn add_registrar(
                    &self,
                    account: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<AddRegistrar> {
                    subxt::tx::StaticTxPayload::new(
                        "Identity",
                        "add_registrar",
                        AddRegistrar { account },
                        [
                            231u8, 221u8, 79u8, 233u8, 107u8, 34u8, 195u8, 186u8, 192u8, 129u8,
                            103u8, 159u8, 159u8, 83u8, 151u8, 161u8, 137u8, 164u8, 143u8, 31u8,
                            75u8, 42u8, 27u8, 203u8, 19u8, 70u8, 173u8, 11u8, 241u8, 189u8, 137u8,
                            127u8,
                        ],
                    )
                }
                #[doc = "Set an account's identity information and reserve the appropriate deposit."]
                #[doc = ""]
                #[doc = "If the account already has identity information, the deposit is taken as part payment"]
                #[doc = "for the new deposit."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `info`: The identity information."]
                #[doc = ""]
                #[doc = "Emits `IdentitySet` if successful."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(X + X' + R)`"]
                #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)"]
                #[doc = "  - where `R` judgements-count (registrar-count-bounded)"]
                #[doc = "- One balance reserve operation."]
                #[doc = "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`)."]
                #[doc = "- One event."]
                #[doc = "# </weight>"]
                pub fn set_identity(
                    &self,
                    info: runtime_types::pallet_identity::types::IdentityInfo,
                ) -> subxt::tx::StaticTxPayload<SetIdentity> {
                    subxt::tx::StaticTxPayload::new(
                        "Identity",
                        "set_identity",
                        SetIdentity {
                            info: ::std::boxed::Box::new(info),
                        },
                        [
                            130u8, 89u8, 118u8, 6u8, 134u8, 166u8, 35u8, 192u8, 73u8, 6u8, 171u8,
                            20u8, 225u8, 255u8, 152u8, 142u8, 111u8, 8u8, 206u8, 200u8, 64u8, 52u8,
                            110u8, 123u8, 42u8, 101u8, 191u8, 242u8, 133u8, 139u8, 154u8, 205u8,
                        ],
                    )
                }
                #[doc = "Set the sub-accounts of the sender."]
                #[doc = ""]
                #[doc = "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned"]
                #[doc = "and an amount `SubAccountDeposit` will be reserved for each item in `subs`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "identity."]
                #[doc = ""]
                #[doc = "- `subs`: The identity's (new) sub-accounts."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(P + S)`"]
                #[doc = "  - where `P` old-subs-count (hard- and deposit-bounded)."]
                #[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
                #[doc = "- At most one balance operations."]
                #[doc = "- DB:"]
                #[doc = "  - `P + S` storage mutations (codec complexity `O(1)`)"]
                #[doc = "  - One storage read (codec complexity `O(P)`)."]
                #[doc = "  - One storage write (codec complexity `O(S)`)."]
                #[doc = "  - One storage-exists (`IdentityOf::contains_key`)."]
                #[doc = "# </weight>"]
                pub fn set_subs(
                    &self,
                    subs: ::std::vec::Vec<(
                        subxt::ext::sp_core::crypto::AccountId32,
                        runtime_types::pallet_identity::types::Data,
                    )>,
                ) -> subxt::tx::StaticTxPayload<SetSubs> {
                    subxt::tx::StaticTxPayload::new(
                        "Identity",
                        "set_subs",
                        SetSubs { subs },
                        [
                            177u8, 219u8, 84u8, 183u8, 5u8, 32u8, 192u8, 82u8, 174u8, 68u8, 198u8,
                            224u8, 56u8, 85u8, 134u8, 171u8, 30u8, 132u8, 140u8, 236u8, 117u8,
                            24u8, 150u8, 218u8, 146u8, 194u8, 144u8, 92u8, 103u8, 206u8, 46u8,
                            90u8,
                        ],
                    )
                }
                #[doc = "Clear an account's identity info and all sub-accounts and return all deposits."]
                #[doc = ""]
                #[doc = "Payment: All reserved balances on the account are returned."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "identity."]
                #[doc = ""]
                #[doc = "Emits `IdentityCleared` if successful."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(R + S + X)`"]
                #[doc = "  - where `R` registrar-count (governance-bounded)."]
                #[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
                #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)."]
                #[doc = "- One balance-unreserve operation."]
                #[doc = "- `2` storage reads and `S + 2` storage deletions."]
                #[doc = "- One event."]
                #[doc = "# </weight>"]
                pub fn clear_identity(&self) -> subxt::tx::StaticTxPayload<ClearIdentity> {
                    subxt::tx::StaticTxPayload::new(
                        "Identity",
                        "clear_identity",
                        ClearIdentity {},
                        [
                            75u8, 44u8, 74u8, 122u8, 149u8, 202u8, 114u8, 230u8, 0u8, 255u8, 140u8,
                            122u8, 14u8, 196u8, 205u8, 249u8, 220u8, 94u8, 216u8, 34u8, 63u8, 14u8,
                            8u8, 205u8, 74u8, 23u8, 181u8, 129u8, 252u8, 110u8, 231u8, 114u8,
                        ],
                    )
                }
                #[doc = "Request a judgement from a registrar."]
                #[doc = ""]
                #[doc = "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement"]
                #[doc = "given."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
                #[doc = "registered identity."]
                #[doc = ""]
                #[doc = "- `reg_index`: The index of the registrar whose judgement is requested."]
                #[doc = "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:"]
                #[doc = ""]
                #[doc = "```nocompile"]
                #[doc = "Self::registrars().get(reg_index).unwrap().fee"]
                #[doc = "```"]
                #[doc = ""]
                #[doc = "Emits `JudgementRequested` if successful."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(R + X)`."]
                #[doc = "- One balance-reserve operation."]
                #[doc = "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`."]
                #[doc = "- One event."]
                #[doc = "# </weight>"]
                pub fn request_judgement(
                    &self,
                    reg_index: ::core::primitive::u32,
                    max_fee: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<RequestJudgement> {
                    subxt::tx::StaticTxPayload::new(
                        "Identity",
                        "request_judgement",
                        RequestJudgement { reg_index, max_fee },
                        [
                            186u8, 149u8, 61u8, 54u8, 159u8, 194u8, 77u8, 161u8, 220u8, 157u8, 3u8,
                            216u8, 23u8, 105u8, 119u8, 76u8, 144u8, 198u8, 157u8, 45u8, 235u8,
                            139u8, 87u8, 82u8, 81u8, 12u8, 25u8, 134u8, 225u8, 92u8, 182u8, 101u8,
                        ],
                    )
                }
                #[doc = "Cancel a previous request."]
                #[doc = ""]
                #[doc = "Payment: A previously reserved deposit is returned on success."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
                #[doc = "registered identity."]
                #[doc = ""]
                #[doc = "- `reg_index`: The index of the registrar whose judgement is no longer requested."]
                #[doc = ""]
                #[doc = "Emits `JudgementUnrequested` if successful."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(R + X)`."]
                #[doc = "- One balance-reserve operation."]
                #[doc = "- One storage mutation `O(R + X)`."]
                #[doc = "- One event"]
                #[doc = "# </weight>"]
                pub fn cancel_request(
                    &self,
                    reg_index: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<CancelRequest> {
                    subxt::tx::StaticTxPayload::new(
                        "Identity",
                        "cancel_request",
                        CancelRequest { reg_index },
                        [
                            83u8, 180u8, 239u8, 126u8, 32u8, 51u8, 17u8, 20u8, 180u8, 3u8, 59u8,
                            96u8, 24u8, 32u8, 136u8, 92u8, 58u8, 254u8, 68u8, 70u8, 50u8, 11u8,
                            51u8, 91u8, 180u8, 79u8, 81u8, 84u8, 216u8, 138u8, 6u8, 215u8,
                        ],
                    )
                }
                #[doc = "Set the fee required for a judgement to be requested from a registrar."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                #[doc = "of the registrar whose index is `index`."]
                #[doc = ""]
                #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                #[doc = "- `fee`: the new fee."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(R)`."]
                #[doc = "- One storage mutation `O(R)`."]
                #[doc = "- Benchmark: 7.315 + R * 0.329 µs (min squares analysis)"]
                #[doc = "# </weight>"]
                pub fn set_fee(
                    &self,
                    index: ::core::primitive::u32,
                    fee: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<SetFee> {
                    subxt::tx::StaticTxPayload::new(
                        "Identity",
                        "set_fee",
                        SetFee { index, fee },
                        [
                            21u8, 157u8, 123u8, 182u8, 160u8, 190u8, 117u8, 37u8, 136u8, 133u8,
                            104u8, 234u8, 31u8, 145u8, 115u8, 154u8, 125u8, 40u8, 2u8, 87u8, 118u8,
                            56u8, 247u8, 73u8, 89u8, 0u8, 251u8, 3u8, 58u8, 105u8, 239u8, 211u8,
                        ],
                    )
                }
                #[doc = "Change the account associated with a registrar."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                #[doc = "of the registrar whose index is `index`."]
                #[doc = ""]
                #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                #[doc = "- `new`: the new account ID."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(R)`."]
                #[doc = "- One storage mutation `O(R)`."]
                #[doc = "- Benchmark: 8.823 + R * 0.32 µs (min squares analysis)"]
                #[doc = "# </weight>"]
                pub fn set_account_id(
                    &self,
                    index: ::core::primitive::u32,
                    new: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<SetAccountId> {
                    subxt::tx::StaticTxPayload::new(
                        "Identity",
                        "set_account_id",
                        SetAccountId { index, new },
                        [
                            245u8, 76u8, 110u8, 237u8, 219u8, 246u8, 219u8, 136u8, 146u8, 42u8,
                            139u8, 60u8, 30u8, 188u8, 87u8, 10u8, 231u8, 89u8, 225u8, 24u8, 152u8,
                            188u8, 59u8, 194u8, 199u8, 78u8, 169u8, 90u8, 122u8, 29u8, 80u8, 42u8,
                        ],
                    )
                }
                #[doc = "Set the field information for a registrar."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                #[doc = "of the registrar whose index is `index`."]
                #[doc = ""]
                #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                #[doc = "- `fields`: the fields that the registrar concerns themselves with."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(R)`."]
                #[doc = "- One storage mutation `O(R)`."]
                #[doc = "- Benchmark: 7.464 + R * 0.325 µs (min squares analysis)"]
                #[doc = "# </weight>"]
                pub fn set_fields(
                    &self,
                    index: ::core::primitive::u32,
                    fields: runtime_types::pallet_identity::types::BitFlags<
                        runtime_types::pallet_identity::types::IdentityField,
                    >,
                ) -> subxt::tx::StaticTxPayload<SetFields> {
                    subxt::tx::StaticTxPayload::new(
                        "Identity",
                        "set_fields",
                        SetFields { index, fields },
                        [
                            50u8, 196u8, 179u8, 71u8, 66u8, 65u8, 235u8, 7u8, 51u8, 14u8, 81u8,
                            173u8, 201u8, 58u8, 6u8, 151u8, 174u8, 245u8, 102u8, 184u8, 28u8, 84u8,
                            125u8, 93u8, 126u8, 134u8, 92u8, 203u8, 200u8, 129u8, 240u8, 252u8,
                        ],
                    )
                }
                #[doc = "Provide a judgement for an account's identity."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                #[doc = "of the registrar whose index is `reg_index`."]
                #[doc = ""]
                #[doc = "- `reg_index`: the index of the registrar whose judgement is being made."]
                #[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
                #[doc = "  with a registered identity."]
                #[doc = "- `judgement`: the judgement of the registrar of index `reg_index` about `target`."]
                #[doc = ""]
                #[doc = "Emits `JudgementGiven` if successful."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(R + X)`."]
                #[doc = "- One balance-transfer operation."]
                #[doc = "- Up to one account-lookup operation."]
                #[doc = "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`."]
                #[doc = "- One event."]
                #[doc = "# </weight>"]
                pub fn provide_judgement(
                    &self,
                    reg_index: ::core::primitive::u32,
                    target: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    judgement: runtime_types::pallet_identity::types::Judgement<
                        ::core::primitive::u128,
                    >,
                ) -> subxt::tx::StaticTxPayload<ProvideJudgement> {
                    subxt::tx::StaticTxPayload::new(
                        "Identity",
                        "provide_judgement",
                        ProvideJudgement {
                            reg_index,
                            target,
                            judgement,
                        },
                        [
                            67u8, 13u8, 247u8, 43u8, 231u8, 236u8, 23u8, 196u8, 126u8, 243u8,
                            103u8, 7u8, 250u8, 57u8, 20u8, 210u8, 131u8, 213u8, 254u8, 103u8,
                            138u8, 242u8, 159u8, 227u8, 139u8, 180u8, 29u8, 47u8, 65u8, 175u8,
                            14u8, 153u8,
                        ],
                    )
                }
                #[doc = "Remove an account's identity and sub-account information and slash the deposits."]
                #[doc = ""]
                #[doc = "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by"]
                #[doc = "`Slash`. Verification request deposits are not returned; they should be cancelled"]
                #[doc = "manually using `cancel_request`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must match `T::ForceOrigin`."]
                #[doc = ""]
                #[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
                #[doc = "  with a registered identity."]
                #[doc = ""]
                #[doc = "Emits `IdentityKilled` if successful."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(R + S + X)`."]
                #[doc = "- One balance-reserve operation."]
                #[doc = "- `S + 2` storage mutations."]
                #[doc = "- One event."]
                #[doc = "# </weight>"]
                pub fn kill_identity(
                    &self,
                    target: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> subxt::tx::StaticTxPayload<KillIdentity> {
                    subxt::tx::StaticTxPayload::new(
                        "Identity",
                        "kill_identity",
                        KillIdentity { target },
                        [
                            65u8, 106u8, 116u8, 209u8, 219u8, 181u8, 185u8, 75u8, 146u8, 194u8,
                            187u8, 170u8, 7u8, 34u8, 140u8, 87u8, 107u8, 112u8, 229u8, 34u8, 65u8,
                            71u8, 58u8, 152u8, 74u8, 253u8, 137u8, 69u8, 149u8, 214u8, 158u8, 19u8,
                        ],
                    )
                }
                #[doc = "Add the given account to the sender's subs."]
                #[doc = ""]
                #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                #[doc = "to the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "sub identity of `sub`."]
                pub fn add_sub(
                    &self,
                    sub: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    data: runtime_types::pallet_identity::types::Data,
                ) -> subxt::tx::StaticTxPayload<AddSub> {
                    subxt::tx::StaticTxPayload::new(
                        "Identity",
                        "add_sub",
                        AddSub { sub, data },
                        [
                            206u8, 112u8, 143u8, 96u8, 152u8, 12u8, 174u8, 226u8, 23u8, 27u8,
                            154u8, 188u8, 195u8, 233u8, 185u8, 180u8, 246u8, 218u8, 154u8, 129u8,
                            138u8, 52u8, 212u8, 109u8, 54u8, 211u8, 219u8, 255u8, 39u8, 79u8,
                            154u8, 123u8,
                        ],
                    )
                }
                #[doc = "Alter the associated name of the given sub-account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "sub identity of `sub`."]
                pub fn rename_sub(
                    &self,
                    sub: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    data: runtime_types::pallet_identity::types::Data,
                ) -> subxt::tx::StaticTxPayload<RenameSub> {
                    subxt::tx::StaticTxPayload::new(
                        "Identity",
                        "rename_sub",
                        RenameSub { sub, data },
                        [
                            110u8, 28u8, 134u8, 225u8, 44u8, 242u8, 20u8, 22u8, 197u8, 49u8, 173u8,
                            178u8, 106u8, 181u8, 103u8, 90u8, 27u8, 73u8, 102u8, 130u8, 2u8, 216u8,
                            172u8, 186u8, 124u8, 244u8, 128u8, 6u8, 112u8, 128u8, 25u8, 245u8,
                        ],
                    )
                }
                #[doc = "Remove the given account from the sender's subs."]
                #[doc = ""]
                #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                #[doc = "to the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "sub identity of `sub`."]
                pub fn remove_sub(
                    &self,
                    sub: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> subxt::tx::StaticTxPayload<RemoveSub> {
                    subxt::tx::StaticTxPayload::new(
                        "Identity",
                        "remove_sub",
                        RemoveSub { sub },
                        [
                            92u8, 201u8, 70u8, 170u8, 248u8, 110u8, 179u8, 186u8, 213u8, 197u8,
                            150u8, 156u8, 156u8, 50u8, 19u8, 158u8, 186u8, 61u8, 106u8, 64u8, 84u8,
                            38u8, 73u8, 134u8, 132u8, 233u8, 50u8, 152u8, 40u8, 18u8, 212u8, 121u8,
                        ],
                    )
                }
                #[doc = "Remove the sender as a sub-account."]
                #[doc = ""]
                #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                #[doc = "to the sender (*not* the original depositor)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "super-identity."]
                #[doc = ""]
                #[doc = "NOTE: This should not normally be used, but is provided in the case that the non-"]
                #[doc = "controller of an account is maliciously registered as a sub-account."]
                pub fn quit_sub(&self) -> subxt::tx::StaticTxPayload<QuitSub> {
                    subxt::tx::StaticTxPayload::new(
                        "Identity",
                        "quit_sub",
                        QuitSub {},
                        [
                            62u8, 57u8, 73u8, 72u8, 119u8, 216u8, 250u8, 155u8, 57u8, 169u8, 157u8,
                            44u8, 87u8, 51u8, 63u8, 231u8, 77u8, 7u8, 0u8, 119u8, 244u8, 42u8,
                            179u8, 51u8, 254u8, 240u8, 55u8, 25u8, 142u8, 38u8, 87u8, 44u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_identity::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A name was set or reset (which will remove all judgements)."]
            pub struct IdentitySet {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for IdentitySet {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "IdentitySet";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A name was cleared, and the given balance returned."]
            pub struct IdentityCleared {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for IdentityCleared {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "IdentityCleared";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A name was removed and the given balance slashed."]
            pub struct IdentityKilled {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for IdentityKilled {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "IdentityKilled";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A judgement was asked from a registrar."]
            pub struct JudgementRequested {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub registrar_index: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for JudgementRequested {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "JudgementRequested";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A judgement request was retracted."]
            pub struct JudgementUnrequested {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub registrar_index: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for JudgementUnrequested {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "JudgementUnrequested";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A judgement was given by a registrar."]
            pub struct JudgementGiven {
                pub target: subxt::ext::sp_core::crypto::AccountId32,
                pub registrar_index: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for JudgementGiven {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "JudgementGiven";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "A registrar was added."]
            pub struct RegistrarAdded {
                pub registrar_index: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for RegistrarAdded {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "RegistrarAdded";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A sub-identity was added to an identity and the deposit paid."]
            pub struct SubIdentityAdded {
                pub sub: subxt::ext::sp_core::crypto::AccountId32,
                pub main: subxt::ext::sp_core::crypto::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for SubIdentityAdded {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "SubIdentityAdded";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A sub-identity was removed from an identity and the deposit freed."]
            pub struct SubIdentityRemoved {
                pub sub: subxt::ext::sp_core::crypto::AccountId32,
                pub main: subxt::ext::sp_core::crypto::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for SubIdentityRemoved {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "SubIdentityRemoved";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A sub-identity was cleared, and the given deposit repatriated from the"]
            #[doc = "main identity account to the sub-identity account."]
            pub struct SubIdentityRevoked {
                pub sub: subxt::ext::sp_core::crypto::AccountId32,
                pub main: subxt::ext::sp_core::crypto::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for SubIdentityRevoked {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "SubIdentityRevoked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Information that is pertinent to identify the entity behind an account."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
                pub fn identity_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_identity::types::Registration<
                            ::core::primitive::u128,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Identity",
                        "IdentityOf",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            193u8, 195u8, 180u8, 188u8, 129u8, 250u8, 180u8, 219u8, 22u8, 95u8,
                            175u8, 170u8, 143u8, 188u8, 80u8, 124u8, 234u8, 228u8, 245u8, 39u8,
                            72u8, 153u8, 107u8, 199u8, 23u8, 75u8, 47u8, 247u8, 104u8, 208u8,
                            171u8, 82u8,
                        ],
                    )
                }
                #[doc = " Information that is pertinent to identify the entity behind an account."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
                pub fn identity_of_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_identity::types::Registration<
                            ::core::primitive::u128,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Identity",
                        "IdentityOf",
                        Vec::new(),
                        [
                            193u8, 195u8, 180u8, 188u8, 129u8, 250u8, 180u8, 219u8, 22u8, 95u8,
                            175u8, 170u8, 143u8, 188u8, 80u8, 124u8, 234u8, 228u8, 245u8, 39u8,
                            72u8, 153u8, 107u8, 199u8, 23u8, 75u8, 47u8, 247u8, 104u8, 208u8,
                            171u8, 82u8,
                        ],
                    )
                }
                #[doc = " The super-identity of an alternative \"sub\" identity together with its name, within that"]
                #[doc = " context. If the account is not some other account's sub-identity, then just `None`."]
                pub fn super_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        subxt::ext::sp_core::crypto::AccountId32,
                        runtime_types::pallet_identity::types::Data,
                    )>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Identity",
                        "SuperOf",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            170u8, 249u8, 112u8, 249u8, 75u8, 176u8, 21u8, 29u8, 152u8, 149u8,
                            69u8, 113u8, 20u8, 92u8, 113u8, 130u8, 135u8, 62u8, 18u8, 204u8, 166u8,
                            193u8, 133u8, 167u8, 248u8, 117u8, 80u8, 137u8, 158u8, 111u8, 100u8,
                            137u8,
                        ],
                    )
                }
                #[doc = " The super-identity of an alternative \"sub\" identity together with its name, within that"]
                #[doc = " context. If the account is not some other account's sub-identity, then just `None`."]
                pub fn super_of_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        subxt::ext::sp_core::crypto::AccountId32,
                        runtime_types::pallet_identity::types::Data,
                    )>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Identity",
                        "SuperOf",
                        Vec::new(),
                        [
                            170u8, 249u8, 112u8, 249u8, 75u8, 176u8, 21u8, 29u8, 152u8, 149u8,
                            69u8, 113u8, 20u8, 92u8, 113u8, 130u8, 135u8, 62u8, 18u8, 204u8, 166u8,
                            193u8, 133u8, 167u8, 248u8, 117u8, 80u8, 137u8, 158u8, 111u8, 100u8,
                            137u8,
                        ],
                    )
                }
                #[doc = " Alternative \"sub\" identities of this account."]
                #[doc = ""]
                #[doc = " The first item is the deposit, the second is a vector of the accounts."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
                pub fn subs_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        ::core::primitive::u128,
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            subxt::ext::sp_core::crypto::AccountId32,
                        >,
                    )>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Identity",
                        "SubsOf",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            128u8, 15u8, 175u8, 155u8, 216u8, 225u8, 200u8, 169u8, 215u8, 206u8,
                            110u8, 22u8, 204u8, 89u8, 212u8, 210u8, 159u8, 169u8, 53u8, 7u8, 44u8,
                            164u8, 91u8, 151u8, 7u8, 227u8, 38u8, 230u8, 175u8, 84u8, 6u8, 4u8,
                        ],
                    )
                }
                #[doc = " Alternative \"sub\" identities of this account."]
                #[doc = ""]
                #[doc = " The first item is the deposit, the second is a vector of the accounts."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
                pub fn subs_of_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        ::core::primitive::u128,
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            subxt::ext::sp_core::crypto::AccountId32,
                        >,
                    )>,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Identity",
                        "SubsOf",
                        Vec::new(),
                        [
                            128u8, 15u8, 175u8, 155u8, 216u8, 225u8, 200u8, 169u8, 215u8, 206u8,
                            110u8, 22u8, 204u8, 89u8, 212u8, 210u8, 159u8, 169u8, 53u8, 7u8, 44u8,
                            164u8, 91u8, 151u8, 7u8, 227u8, 38u8, 230u8, 175u8, 84u8, 6u8, 4u8,
                        ],
                    )
                }
                #[doc = " The set of registrars. Not expected to get very big as can only be added through a"]
                #[doc = " special origin (likely a council motion)."]
                #[doc = ""]
                #[doc = " The index into this can be cast to `RegistrarIndex` to get a valid value."]
                pub fn registrars(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            ::core::option::Option<
                                runtime_types::pallet_identity::types::RegistrarInfo<
                                    ::core::primitive::u128,
                                    subxt::ext::sp_core::crypto::AccountId32,
                                >,
                            >,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Identity",
                        "Registrars",
                        vec![],
                        [
                            157u8, 87u8, 39u8, 240u8, 154u8, 54u8, 241u8, 229u8, 76u8, 9u8, 62u8,
                            252u8, 40u8, 143u8, 186u8, 182u8, 233u8, 187u8, 251u8, 61u8, 236u8,
                            229u8, 19u8, 55u8, 42u8, 36u8, 82u8, 173u8, 215u8, 155u8, 229u8, 111u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The amount held on deposit for a registered identity"]
                pub fn basic_deposit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Identity",
                        "BasicDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount held on deposit per additional field for a registered identity."]
                pub fn field_deposit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Identity",
                        "FieldDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount held on deposit for a registered subaccount. This should account for the fact"]
                #[doc = " that one storage item's value will increase by the size of an account ID, and there will"]
                #[doc = " be another trie item whose value is the size of an account ID plus 32 bytes."]
                pub fn sub_account_deposit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Identity",
                        "SubAccountDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum number of sub-accounts allowed per identified account."]
                pub fn max_sub_accounts(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Identity",
                        "MaxSubAccounts",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O"]
                #[doc = " required to access an identity, but can be pretty high."]
                pub fn max_additional_fields(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Identity",
                        "MaxAdditionalFields",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maxmimum number of registrars allowed in the system. Needed to bound the complexity"]
                #[doc = " of, e.g., updating judgements."]
                pub fn max_registrars(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Identity",
                        "MaxRegistrars",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod multisig {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AsMultiThreshold1 {
                pub other_signatories: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                pub call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AsMulti {
                pub threshold: ::core::primitive::u16,
                pub other_signatories: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                pub maybe_timepoint: ::core::option::Option<
                    runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                >,
                pub call: subxt::utils::WrapperKeepOpaque<runtime_types::dali_runtime::Call>,
                pub store_call: ::core::primitive::bool,
                pub max_weight: ::core::primitive::u64,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ApproveAsMulti {
                pub threshold: ::core::primitive::u16,
                pub other_signatories: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                pub maybe_timepoint: ::core::option::Option<
                    runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                >,
                pub call_hash: [::core::primitive::u8; 32usize],
                pub max_weight: ::core::primitive::u64,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct CancelAsMulti {
                pub threshold: ::core::primitive::u16,
                pub other_signatories: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
                #[doc = "multi-signature, but do not participate in the approval process."]
                #[doc = "- `call`: The call to be executed."]
                #[doc = ""]
                #[doc = "Result is equivalent to the dispatched result."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
                #[doc = "-------------------------------"]
                #[doc = "- DB Weight: None"]
                #[doc = "- Plus Call Weight"]
                #[doc = "# </weight>"]
                pub fn as_multi_threshold_1(
                    &self,
                    other_signatories: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                    call: runtime_types::dali_runtime::Call,
                ) -> subxt::tx::StaticTxPayload<AsMultiThreshold1> {
                    subxt::tx::StaticTxPayload::new(
                        "Multisig",
                        "as_multi_threshold_1",
                        AsMultiThreshold1 {
                            other_signatories,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            57u8, 101u8, 180u8, 118u8, 198u8, 99u8, 114u8, 46u8, 77u8, 92u8, 47u8,
                            254u8, 1u8, 123u8, 214u8, 116u8, 20u8, 123u8, 197u8, 247u8, 20u8,
                            104u8, 47u8, 162u8, 103u8, 152u8, 58u8, 177u8, 188u8, 101u8, 68u8,
                            227u8,
                        ],
                    )
                }
                #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                #[doc = ""]
                #[doc = "If there are enough, then dispatch the call."]
                #[doc = ""]
                #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                #[doc = "is cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                #[doc = "transaction index) of the first approval transaction."]
                #[doc = "- `call`: The call to be executed."]
                #[doc = ""]
                #[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
                #[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
                #[doc = ""]
                #[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
                #[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
                #[doc = "may be found in the deposited `MultisigExecuted` event."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(S + Z + Call)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                #[doc = "- One event."]
                #[doc = "- The weight of the `call`."]
                #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                #[doc = "-------------------------------"]
                #[doc = "- DB Weight:"]
                #[doc = "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
                #[doc = "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
                #[doc = "- Plus Call Weight"]
                #[doc = "# </weight>"]
                pub fn as_multi(
                    &self,
                    threshold: ::core::primitive::u16,
                    other_signatories: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                    maybe_timepoint: ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >,
                    call: subxt::utils::WrapperKeepOpaque<runtime_types::dali_runtime::Call>,
                    store_call: ::core::primitive::bool,
                    max_weight: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<AsMulti> {
                    subxt::tx::StaticTxPayload::new(
                        "Multisig",
                        "as_multi",
                        AsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call,
                            store_call,
                            max_weight,
                        },
                        [
                            160u8, 66u8, 63u8, 227u8, 212u8, 162u8, 77u8, 28u8, 254u8, 86u8, 30u8,
                            41u8, 4u8, 13u8, 204u8, 65u8, 53u8, 62u8, 93u8, 195u8, 138u8, 139u8,
                            79u8, 210u8, 164u8, 246u8, 9u8, 13u8, 21u8, 19u8, 174u8, 15u8,
                        ],
                    )
                }
                #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                #[doc = ""]
                #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                #[doc = "is cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                #[doc = "transaction index) of the first approval transaction."]
                #[doc = "- `call_hash`: The hash of the call to be executed."]
                #[doc = ""]
                #[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(S)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                #[doc = "- One event."]
                #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                #[doc = "----------------------------------"]
                #[doc = "- DB Weight:"]
                #[doc = "    - Read: Multisig Storage, [Caller Account]"]
                #[doc = "    - Write: Multisig Storage, [Caller Account]"]
                #[doc = "# </weight>"]
                pub fn approve_as_multi(
                    &self,
                    threshold: ::core::primitive::u16,
                    other_signatories: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                    maybe_timepoint: ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >,
                    call_hash: [::core::primitive::u8; 32usize],
                    max_weight: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<ApproveAsMulti> {
                    subxt::tx::StaticTxPayload::new(
                        "Multisig",
                        "approve_as_multi",
                        ApproveAsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call_hash,
                            max_weight,
                        },
                        [
                            55u8, 94u8, 230u8, 217u8, 37u8, 143u8, 44u8, 108u8, 123u8, 250u8, 26u8,
                            44u8, 236u8, 69u8, 63u8, 90u8, 126u8, 15u8, 233u8, 142u8, 213u8, 11u8,
                            141u8, 147u8, 151u8, 24u8, 167u8, 62u8, 96u8, 227u8, 181u8, 140u8,
                        ],
                    )
                }
                #[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
                #[doc = "for this operation will be unreserved on success."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
                #[doc = "transaction for this dispatch."]
                #[doc = "- `call_hash`: The hash of the call to be executed."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(S)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- One event."]
                #[doc = "- I/O: 1 read `O(S)`, one remove."]
                #[doc = "- Storage: removes one item."]
                #[doc = "----------------------------------"]
                #[doc = "- DB Weight:"]
                #[doc = "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls"]
                #[doc = "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls"]
                #[doc = "# </weight>"]
                pub fn cancel_as_multi(
                    &self,
                    threshold: ::core::primitive::u16,
                    other_signatories: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                    timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    call_hash: [::core::primitive::u8; 32usize],
                ) -> subxt::tx::StaticTxPayload<CancelAsMulti> {
                    subxt::tx::StaticTxPayload::new(
                        "Multisig",
                        "cancel_as_multi",
                        CancelAsMulti {
                            threshold,
                            other_signatories,
                            timepoint,
                            call_hash,
                        },
                        [
                            30u8, 25u8, 186u8, 142u8, 168u8, 81u8, 235u8, 164u8, 82u8, 209u8, 66u8,
                            129u8, 209u8, 78u8, 172u8, 9u8, 163u8, 222u8, 125u8, 57u8, 2u8, 43u8,
                            169u8, 174u8, 159u8, 167u8, 25u8, 226u8, 254u8, 110u8, 80u8, 216u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_multisig::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A new multisig operation has begun."]
            pub struct NewMultisig {
                pub approving: subxt::ext::sp_core::crypto::AccountId32,
                pub multisig: subxt::ext::sp_core::crypto::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl subxt::events::StaticEvent for NewMultisig {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "NewMultisig";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A multisig operation has been approved by someone."]
            pub struct MultisigApproval {
                pub approving: subxt::ext::sp_core::crypto::AccountId32,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                pub multisig: subxt::ext::sp_core::crypto::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl subxt::events::StaticEvent for MultisigApproval {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigApproval";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A multisig operation has been executed."]
            pub struct MultisigExecuted {
                pub approving: subxt::ext::sp_core::crypto::AccountId32,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                pub multisig: subxt::ext::sp_core::crypto::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl subxt::events::StaticEvent for MultisigExecuted {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigExecuted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A multisig operation has been cancelled."]
            pub struct MultisigCancelled {
                pub cancelling: subxt::ext::sp_core::crypto::AccountId32,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                pub multisig: subxt::ext::sp_core::crypto::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl subxt::events::StaticEvent for MultisigCancelled {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigCancelled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The set of open multisig operations."]
                pub fn multisigs(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                    _1: impl ::std::borrow::Borrow<[::core::primitive::u8; 32usize]>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_multisig::Multisig<
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                            subxt::ext::sp_core::crypto::AccountId32,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Multisig",
                        "Multisigs",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Twox64Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            145u8, 78u8, 57u8, 171u8, 199u8, 158u8, 226u8, 250u8, 224u8, 133u8,
                            45u8, 251u8, 202u8, 22u8, 171u8, 132u8, 229u8, 110u8, 248u8, 233u8,
                            38u8, 2u8, 247u8, 140u8, 150u8, 103u8, 211u8, 209u8, 160u8, 158u8,
                            23u8, 215u8,
                        ],
                    )
                }
                #[doc = " The set of open multisig operations."]
                pub fn multisigs_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_multisig::Multisig<
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                            subxt::ext::sp_core::crypto::AccountId32,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Multisig",
                        "Multisigs",
                        Vec::new(),
                        [
                            145u8, 78u8, 57u8, 171u8, 199u8, 158u8, 226u8, 250u8, 224u8, 133u8,
                            45u8, 251u8, 202u8, 22u8, 171u8, 132u8, 229u8, 110u8, 248u8, 233u8,
                            38u8, 2u8, 247u8, 140u8, 150u8, 103u8, 211u8, 209u8, 160u8, 158u8,
                            23u8, 215u8,
                        ],
                    )
                }
                pub fn calls(
                    &self,
                    _0: impl ::std::borrow::Borrow<[::core::primitive::u8; 32usize]>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        subxt::utils::WrapperKeepOpaque<runtime_types::dali_runtime::Call>,
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u128,
                    )>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Multisig",
                        "Calls",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            73u8, 100u8, 191u8, 204u8, 126u8, 175u8, 26u8, 68u8, 221u8, 0u8, 98u8,
                            91u8, 111u8, 75u8, 65u8, 94u8, 42u8, 135u8, 49u8, 130u8, 220u8, 123u8,
                            237u8, 211u8, 255u8, 53u8, 203u8, 232u8, 249u8, 176u8, 34u8, 189u8,
                        ],
                    )
                }
                pub fn calls_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        subxt::utils::WrapperKeepOpaque<runtime_types::dali_runtime::Call>,
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u128,
                    )>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Multisig",
                        "Calls",
                        Vec::new(),
                        [
                            73u8, 100u8, 191u8, 204u8, 126u8, 175u8, 26u8, 68u8, 221u8, 0u8, 98u8,
                            91u8, 111u8, 75u8, 65u8, 94u8, 42u8, 135u8, 49u8, 130u8, 220u8, 123u8,
                            237u8, 211u8, 255u8, 53u8, 203u8, 232u8, 249u8, 176u8, 34u8, 189u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The base amount of currency needed to reserve for creating a multisig execution or to"]
                #[doc = " store a dispatch call for later."]
                #[doc = ""]
                #[doc = " This is held for an additional storage item whose value size is"]
                #[doc = " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is"]
                #[doc = " `32 + sizeof(AccountId)` bytes."]
                pub fn deposit_base(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Multisig",
                        "DepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per unit threshold when creating a multisig execution."]
                #[doc = ""]
                #[doc = " This is held for adding 32 bytes more into a pre-existing storage value."]
                pub fn deposit_factor(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Multisig",
                        "DepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of signatories allowed in the multisig."]
                pub fn max_signatories(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u16>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Multisig",
                        "MaxSignatories",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod parachain_system {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetValidationData {
                pub data:
                    runtime_types::cumulus_primitives_parachain_inherent::ParachainInherentData,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SudoSendUpwardMessage {
                pub message: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AuthorizeUpgrade {
                pub code_hash: subxt::ext::sp_core::H256,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct EnactAuthorizedUpgrade {
                pub code: ::std::vec::Vec<::core::primitive::u8>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the current validation data."]
                #[doc = ""]
                #[doc = "This should be invoked exactly once per block. It will panic at the finalization"]
                #[doc = "phase if the call was not invoked."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Inherent`"]
                #[doc = ""]
                #[doc = "As a side effect, this function upgrades the current validation function"]
                #[doc = "if the appropriate time has come."]
                pub fn set_validation_data(
                    &self,
                    data : runtime_types :: cumulus_primitives_parachain_inherent :: ParachainInherentData,
                ) -> subxt::tx::StaticTxPayload<SetValidationData> {
                    subxt::tx::StaticTxPayload::new(
                        "ParachainSystem",
                        "set_validation_data",
                        SetValidationData { data },
                        [
                            200u8, 80u8, 163u8, 177u8, 184u8, 117u8, 61u8, 203u8, 244u8, 214u8,
                            106u8, 151u8, 128u8, 131u8, 254u8, 120u8, 254u8, 76u8, 104u8, 39u8,
                            215u8, 227u8, 233u8, 254u8, 26u8, 62u8, 17u8, 42u8, 19u8, 127u8, 108u8,
                            242u8,
                        ],
                    )
                }
                pub fn sudo_send_upward_message(
                    &self,
                    message: ::std::vec::Vec<::core::primitive::u8>,
                ) -> subxt::tx::StaticTxPayload<SudoSendUpwardMessage> {
                    subxt::tx::StaticTxPayload::new(
                        "ParachainSystem",
                        "sudo_send_upward_message",
                        SudoSendUpwardMessage { message },
                        [
                            127u8, 79u8, 45u8, 183u8, 190u8, 205u8, 184u8, 169u8, 255u8, 191u8,
                            86u8, 154u8, 134u8, 25u8, 249u8, 63u8, 47u8, 194u8, 108u8, 62u8, 60u8,
                            170u8, 81u8, 240u8, 113u8, 48u8, 181u8, 171u8, 95u8, 63u8, 26u8, 222u8,
                        ],
                    )
                }
                pub fn authorize_upgrade(
                    &self,
                    code_hash: subxt::ext::sp_core::H256,
                ) -> subxt::tx::StaticTxPayload<AuthorizeUpgrade> {
                    subxt::tx::StaticTxPayload::new(
                        "ParachainSystem",
                        "authorize_upgrade",
                        AuthorizeUpgrade { code_hash },
                        [
                            52u8, 152u8, 69u8, 207u8, 143u8, 113u8, 163u8, 11u8, 181u8, 182u8,
                            124u8, 101u8, 207u8, 19u8, 59u8, 81u8, 129u8, 29u8, 79u8, 115u8, 90u8,
                            83u8, 225u8, 124u8, 21u8, 108u8, 99u8, 194u8, 78u8, 83u8, 252u8, 163u8,
                        ],
                    )
                }
                pub fn enact_authorized_upgrade(
                    &self,
                    code: ::std::vec::Vec<::core::primitive::u8>,
                ) -> subxt::tx::StaticTxPayload<EnactAuthorizedUpgrade> {
                    subxt::tx::StaticTxPayload::new(
                        "ParachainSystem",
                        "enact_authorized_upgrade",
                        EnactAuthorizedUpgrade { code },
                        [
                            43u8, 157u8, 1u8, 230u8, 134u8, 72u8, 230u8, 35u8, 159u8, 13u8, 201u8,
                            134u8, 184u8, 94u8, 167u8, 13u8, 108u8, 157u8, 145u8, 166u8, 119u8,
                            37u8, 51u8, 121u8, 252u8, 255u8, 48u8, 251u8, 126u8, 152u8, 247u8, 5u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::cumulus_pallet_parachain_system::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The validation function has been scheduled to apply."]
            pub struct ValidationFunctionStored;
            impl subxt::events::StaticEvent for ValidationFunctionStored {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "ValidationFunctionStored";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "The validation function was applied as of the contained relay chain block number."]
            pub struct ValidationFunctionApplied {
                pub relay_chain_block_num: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for ValidationFunctionApplied {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "ValidationFunctionApplied";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The relay-chain aborted the upgrade process."]
            pub struct ValidationFunctionDiscarded;
            impl subxt::events::StaticEvent for ValidationFunctionDiscarded {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "ValidationFunctionDiscarded";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An upgrade has been authorized."]
            pub struct UpgradeAuthorized {
                pub code_hash: subxt::ext::sp_core::H256,
            }
            impl subxt::events::StaticEvent for UpgradeAuthorized {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "UpgradeAuthorized";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "Some downward messages have been received and will be processed."]
            pub struct DownwardMessagesReceived {
                pub count: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for DownwardMessagesReceived {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "DownwardMessagesReceived";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Downward messages were processed using the given weight."]
            pub struct DownwardMessagesProcessed {
                pub weight_used: ::core::primitive::u64,
                pub dmq_head: subxt::ext::sp_core::H256,
            }
            impl subxt::events::StaticEvent for DownwardMessagesProcessed {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "DownwardMessagesProcessed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " In case of a scheduled upgrade, this storage field contains the validation code to be applied."]
                #[doc = ""]
                #[doc = " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]"]
                #[doc = " which will result the next block process with the new validation code. This concludes the upgrade process."]
                #[doc = ""]
                #[doc = " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"]
                pub fn pending_validation_code(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "PendingValidationCode",
                        vec![],
                        [
                            162u8, 35u8, 108u8, 76u8, 160u8, 93u8, 215u8, 84u8, 20u8, 249u8, 57u8,
                            187u8, 88u8, 161u8, 15u8, 131u8, 213u8, 89u8, 140u8, 20u8, 227u8,
                            204u8, 79u8, 176u8, 114u8, 119u8, 8u8, 7u8, 64u8, 15u8, 90u8, 92u8,
                        ],
                    )
                }
                #[doc = " Validation code that is set by the parachain and is to be communicated to collator and"]
                #[doc = " consequently the relay-chain."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block if no other pallet already set"]
                #[doc = " the value."]
                pub fn new_validation_code(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "NewValidationCode",
                        vec![],
                        [
                            224u8, 174u8, 53u8, 106u8, 240u8, 49u8, 48u8, 79u8, 219u8, 74u8, 142u8,
                            166u8, 92u8, 204u8, 244u8, 200u8, 43u8, 169u8, 177u8, 207u8, 190u8,
                            106u8, 180u8, 65u8, 245u8, 131u8, 134u8, 4u8, 53u8, 45u8, 76u8, 3u8,
                        ],
                    )
                }
                #[doc = " The [`PersistedValidationData`] set for this block."]
                #[doc = " This value is expected to be set only once per block and it's never stored"]
                #[doc = " in the trie."]
                pub fn validation_data(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::polkadot_primitives::v2::PersistedValidationData<
                            subxt::ext::sp_core::H256,
                            ::core::primitive::u32,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "ValidationData",
                        vec![],
                        [
                            112u8, 58u8, 240u8, 81u8, 219u8, 110u8, 244u8, 186u8, 251u8, 90u8,
                            195u8, 217u8, 229u8, 102u8, 233u8, 24u8, 109u8, 96u8, 219u8, 72u8,
                            139u8, 93u8, 58u8, 140u8, 40u8, 110u8, 167u8, 98u8, 199u8, 12u8, 138u8,
                            131u8,
                        ],
                    )
                }
                #[doc = " Were the validation data set to notify the relay chain?"]
                pub fn did_set_validation_code(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::bool>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "DidSetValidationCode",
                        vec![],
                        [
                            89u8, 83u8, 74u8, 174u8, 234u8, 188u8, 149u8, 78u8, 140u8, 17u8, 92u8,
                            165u8, 243u8, 87u8, 59u8, 97u8, 135u8, 81u8, 192u8, 86u8, 193u8, 187u8,
                            113u8, 22u8, 108u8, 83u8, 242u8, 208u8, 174u8, 40u8, 49u8, 245u8,
                        ],
                    )
                }
                #[doc = " The relay chain block number associated with the last parachain block."]
                pub fn last_relay_chain_block_number(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "LastRelayChainBlockNumber",
                        vec![],
                        [
                            68u8, 121u8, 6u8, 159u8, 181u8, 94u8, 151u8, 215u8, 225u8, 244u8, 4u8,
                            158u8, 216u8, 85u8, 55u8, 228u8, 197u8, 35u8, 200u8, 33u8, 29u8, 182u8,
                            17u8, 83u8, 59u8, 63u8, 25u8, 180u8, 132u8, 23u8, 97u8, 252u8,
                        ],
                    )
                }
                #[doc = " An option which indicates if the relay-chain restricts signalling a validation code upgrade."]
                #[doc = " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced"]
                #[doc = " candidate will be invalid."]
                #[doc = ""]
                #[doc = " This storage item is a mirror of the corresponding value for the current parachain from the"]
                #[doc = " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is"]
                #[doc = " set after the inherent."]
                pub fn upgrade_restriction_signal(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::core::option::Option<
                            runtime_types::polkadot_primitives::v2::UpgradeRestriction,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "UpgradeRestrictionSignal",
                        vec![],
                        [
                            61u8, 3u8, 26u8, 6u8, 88u8, 114u8, 109u8, 63u8, 7u8, 115u8, 245u8,
                            198u8, 73u8, 234u8, 28u8, 228u8, 126u8, 27u8, 151u8, 18u8, 133u8, 54u8,
                            144u8, 149u8, 246u8, 43u8, 83u8, 47u8, 77u8, 238u8, 10u8, 196u8,
                        ],
                    )
                }
                #[doc = " The state proof for the last relay parent block."]
                #[doc = ""]
                #[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
                #[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
                #[doc = ""]
                #[doc = " This data is also absent from the genesis."]
                pub fn relay_state_proof(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_trie::storage_proof::StorageProof,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "RelayStateProof",
                        vec![],
                        [
                            35u8, 124u8, 167u8, 221u8, 162u8, 145u8, 158u8, 186u8, 57u8, 154u8,
                            225u8, 6u8, 176u8, 13u8, 178u8, 195u8, 209u8, 122u8, 221u8, 26u8,
                            155u8, 126u8, 153u8, 246u8, 101u8, 221u8, 61u8, 145u8, 211u8, 236u8,
                            48u8, 130u8,
                        ],
                    )
                }
                #[doc = " The snapshot of some state related to messaging relevant to the current parachain as per"]
                #[doc = " the relay parent."]
                #[doc = ""]
                #[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
                #[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
                #[doc = ""]
                #[doc = " This data is also absent from the genesis."]                pub fn relevant_messaging_state (& self ,) -> subxt :: storage :: address :: StaticStorageAddress :: < subxt :: metadata :: DecodeStaticType < runtime_types :: cumulus_pallet_parachain_system :: relay_state_snapshot :: MessagingStateSnapshot > , subxt :: storage :: address :: Yes , () , () >{
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "RelevantMessagingState",
                        vec![],
                        [
                            68u8, 241u8, 114u8, 83u8, 200u8, 99u8, 8u8, 244u8, 110u8, 134u8, 106u8,
                            153u8, 17u8, 90u8, 184u8, 157u8, 100u8, 140u8, 157u8, 83u8, 25u8,
                            166u8, 173u8, 31u8, 221u8, 24u8, 236u8, 85u8, 176u8, 223u8, 237u8,
                            65u8,
                        ],
                    )
                }
                #[doc = " The parachain host configuration that was obtained from the relay parent."]
                #[doc = ""]
                #[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
                #[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
                #[doc = ""]
                #[doc = " This data is also absent from the genesis."]
                pub fn host_configuration(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::polkadot_primitives::v2::AbridgedHostConfiguration,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "HostConfiguration",
                        vec![],
                        [
                            104u8, 200u8, 30u8, 202u8, 119u8, 204u8, 233u8, 20u8, 67u8, 199u8,
                            47u8, 166u8, 254u8, 152u8, 10u8, 187u8, 240u8, 255u8, 148u8, 201u8,
                            134u8, 41u8, 130u8, 201u8, 112u8, 65u8, 68u8, 103u8, 56u8, 123u8,
                            178u8, 113u8,
                        ],
                    )
                }
                #[doc = " The last downward message queue chain head we have observed."]
                #[doc = ""]
                #[doc = " This value is loaded before and saved after processing inbound downward messages carried"]
                #[doc = " by the system inherent."]
                pub fn last_dmq_mqc_head(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::cumulus_primitives_parachain_inherent::MessageQueueChain,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "LastDmqMqcHead",
                        vec![],
                        [
                            176u8, 255u8, 246u8, 125u8, 36u8, 120u8, 24u8, 44u8, 26u8, 64u8, 236u8,
                            210u8, 189u8, 237u8, 50u8, 78u8, 45u8, 139u8, 58u8, 141u8, 112u8,
                            253u8, 178u8, 198u8, 87u8, 71u8, 77u8, 248u8, 21u8, 145u8, 187u8, 52u8,
                        ],
                    )
                }
                #[doc = " The message queue chain heads we have observed per each channel incoming channel."]
                #[doc = ""]
                #[doc = " This value is loaded before and saved after processing inbound downward messages carried"]
                #[doc = " by the system inherent."]
                pub fn last_hrmp_mqc_heads(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        subxt::utils::KeyedVec<
                            runtime_types::polkadot_parachain::primitives::Id,
                            runtime_types::cumulus_primitives_parachain_inherent::MessageQueueChain,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "LastHrmpMqcHeads",
                        vec![],
                        [
                            55u8, 179u8, 35u8, 16u8, 173u8, 0u8, 122u8, 179u8, 236u8, 98u8, 9u8,
                            112u8, 11u8, 219u8, 241u8, 89u8, 131u8, 198u8, 64u8, 139u8, 103u8,
                            158u8, 77u8, 107u8, 83u8, 236u8, 255u8, 208u8, 47u8, 61u8, 219u8,
                            240u8,
                        ],
                    )
                }
                #[doc = " Number of downward messages processed in a block."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block."]
                pub fn processed_downward_messages(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "ProcessedDownwardMessages",
                        vec![],
                        [
                            48u8, 177u8, 84u8, 228u8, 101u8, 235u8, 181u8, 27u8, 66u8, 55u8, 50u8,
                            146u8, 245u8, 223u8, 77u8, 132u8, 178u8, 80u8, 74u8, 90u8, 166u8, 81u8,
                            109u8, 25u8, 91u8, 69u8, 5u8, 69u8, 123u8, 197u8, 160u8, 146u8,
                        ],
                    )
                }
                #[doc = " HRMP watermark that was set in a block."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block."]
                pub fn hrmp_watermark(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "HrmpWatermark",
                        vec![],
                        [
                            189u8, 59u8, 183u8, 195u8, 69u8, 185u8, 241u8, 226u8, 62u8, 204u8,
                            230u8, 77u8, 102u8, 75u8, 86u8, 157u8, 249u8, 140u8, 219u8, 72u8, 94u8,
                            64u8, 176u8, 72u8, 34u8, 205u8, 114u8, 103u8, 231u8, 233u8, 206u8,
                            111u8,
                        ],
                    )
                }
                #[doc = " HRMP messages that were sent in a block."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block."]
                pub fn hrmp_outbound_messages(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<
                            runtime_types::polkadot_core_primitives::OutboundHrmpMessage<
                                runtime_types::polkadot_parachain::primitives::Id,
                            >,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "HrmpOutboundMessages",
                        vec![],
                        [
                            74u8, 86u8, 173u8, 248u8, 90u8, 230u8, 71u8, 225u8, 127u8, 164u8,
                            221u8, 62u8, 146u8, 13u8, 73u8, 9u8, 98u8, 168u8, 6u8, 14u8, 97u8,
                            166u8, 45u8, 70u8, 62u8, 210u8, 9u8, 32u8, 83u8, 18u8, 4u8, 201u8,
                        ],
                    )
                }
                #[doc = " Upward messages that were sent in a block."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block."]
                pub fn upward_messages(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "UpwardMessages",
                        vec![],
                        [
                            129u8, 208u8, 187u8, 36u8, 48u8, 108u8, 135u8, 56u8, 204u8, 60u8,
                            100u8, 158u8, 113u8, 238u8, 46u8, 92u8, 228u8, 41u8, 178u8, 177u8,
                            208u8, 195u8, 148u8, 149u8, 127u8, 21u8, 93u8, 92u8, 29u8, 115u8, 10u8,
                            248u8,
                        ],
                    )
                }
                #[doc = " Upward messages that are still pending and not yet send to the relay chain."]
                pub fn pending_upward_messages(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "PendingUpwardMessages",
                        vec![],
                        [
                            223u8, 46u8, 224u8, 227u8, 222u8, 119u8, 225u8, 244u8, 59u8, 87u8,
                            127u8, 19u8, 217u8, 237u8, 103u8, 61u8, 6u8, 210u8, 107u8, 201u8,
                            117u8, 25u8, 85u8, 248u8, 36u8, 231u8, 28u8, 202u8, 41u8, 140u8, 208u8,
                            254u8,
                        ],
                    )
                }
                #[doc = " The number of HRMP messages we observed in `on_initialize` and thus used that number for"]
                #[doc = " announcing the weight of `on_initialize` and `on_finalize`."]
                pub fn announced_hrmp_messages_per_candidate(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "AnnouncedHrmpMessagesPerCandidate",
                        vec![],
                        [
                            132u8, 61u8, 162u8, 129u8, 251u8, 243u8, 20u8, 144u8, 162u8, 73u8,
                            237u8, 51u8, 248u8, 41u8, 127u8, 171u8, 180u8, 79u8, 137u8, 23u8, 66u8,
                            134u8, 106u8, 222u8, 182u8, 154u8, 0u8, 145u8, 184u8, 156u8, 36u8,
                            97u8,
                        ],
                    )
                }
                #[doc = " The weight we reserve at the beginning of the block for processing XCMP messages. This"]
                #[doc = " overrides the amount set in the Config trait."]
                pub fn reserved_xcmp_weight_override(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "ReservedXcmpWeightOverride",
                        vec![],
                        [
                            250u8, 177u8, 18u8, 183u8, 23u8, 84u8, 14u8, 178u8, 92u8, 60u8, 210u8,
                            155u8, 63u8, 58u8, 105u8, 196u8, 184u8, 235u8, 145u8, 11u8, 215u8,
                            121u8, 60u8, 140u8, 14u8, 50u8, 185u8, 101u8, 210u8, 230u8, 180u8,
                            250u8,
                        ],
                    )
                }
                #[doc = " The weight we reserve at the beginning of the block for processing DMP messages. This"]
                #[doc = " overrides the amount set in the Config trait."]
                pub fn reserved_dmp_weight_override(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "ReservedDmpWeightOverride",
                        vec![],
                        [
                            20u8, 145u8, 152u8, 245u8, 73u8, 101u8, 125u8, 190u8, 151u8, 180u8,
                            22u8, 157u8, 58u8, 115u8, 165u8, 167u8, 117u8, 166u8, 201u8, 10u8,
                            206u8, 255u8, 206u8, 40u8, 40u8, 63u8, 228u8, 53u8, 58u8, 47u8, 121u8,
                            76u8,
                        ],
                    )
                }
                #[doc = " The next authorized upgrade, if there is one."]
                pub fn authorized_upgrade(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<subxt::ext::sp_core::H256>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "AuthorizedUpgrade",
                        vec![],
                        [
                            136u8, 238u8, 241u8, 144u8, 252u8, 61u8, 101u8, 171u8, 234u8, 160u8,
                            145u8, 210u8, 69u8, 29u8, 204u8, 166u8, 250u8, 101u8, 254u8, 32u8,
                            96u8, 197u8, 222u8, 212u8, 50u8, 189u8, 25u8, 7u8, 48u8, 183u8, 234u8,
                            95u8,
                        ],
                    )
                }
                #[doc = " A custom head data that should be returned as result of `validate_block`."]
                #[doc = ""]
                #[doc = " See [`Pallet::set_custom_validation_head_data`] for more information."]
                pub fn custom_validation_head_data(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainSystem",
                        "CustomValidationHeadData",
                        vec![],
                        [
                            189u8, 150u8, 234u8, 128u8, 111u8, 27u8, 173u8, 92u8, 109u8, 4u8, 98u8,
                            103u8, 158u8, 19u8, 16u8, 5u8, 107u8, 135u8, 126u8, 170u8, 62u8, 64u8,
                            149u8, 80u8, 33u8, 17u8, 83u8, 22u8, 176u8, 118u8, 26u8, 223u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod parachain_info {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub struct TransactionApi;
            impl TransactionApi {}
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn parachain_id(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::polkadot_parachain::primitives::Id,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "ParachainInfo",
                        "ParachainId",
                        vec![],
                        [
                            151u8, 191u8, 241u8, 118u8, 192u8, 47u8, 166u8, 151u8, 217u8, 240u8,
                            165u8, 232u8, 51u8, 113u8, 243u8, 1u8, 89u8, 240u8, 11u8, 1u8, 77u8,
                            104u8, 12u8, 56u8, 17u8, 135u8, 214u8, 19u8, 114u8, 135u8, 66u8, 76u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod authorship {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetUncles {
                pub new_uncles: ::std::vec::Vec<
                    runtime_types::sp_runtime::generic::header::Header<
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::traits::BlakeTwo256,
                    >,
                >,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Provide a set of uncles."]
                pub fn set_uncles(
                    &self,
                    new_uncles: ::std::vec::Vec<
                        runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u32,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                    >,
                ) -> subxt::tx::StaticTxPayload<SetUncles> {
                    subxt::tx::StaticTxPayload::new(
                        "Authorship",
                        "set_uncles",
                        SetUncles { new_uncles },
                        [
                            181u8, 70u8, 222u8, 83u8, 154u8, 215u8, 200u8, 64u8, 154u8, 228u8,
                            115u8, 247u8, 117u8, 89u8, 229u8, 102u8, 128u8, 189u8, 90u8, 60u8,
                            223u8, 19u8, 111u8, 172u8, 5u8, 223u8, 132u8, 37u8, 235u8, 119u8, 42u8,
                            64u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Uncles"]
                pub fn uncles(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            runtime_types::pallet_authorship::UncleEntryItem<
                                ::core::primitive::u32,
                                subxt::ext::sp_core::H256,
                                subxt::ext::sp_core::crypto::AccountId32,
                            >,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Authorship",
                        "Uncles",
                        vec![],
                        [
                            193u8, 226u8, 196u8, 151u8, 233u8, 82u8, 60u8, 164u8, 27u8, 156u8,
                            231u8, 51u8, 79u8, 134u8, 170u8, 166u8, 71u8, 120u8, 250u8, 255u8,
                            52u8, 168u8, 74u8, 199u8, 122u8, 253u8, 248u8, 178u8, 39u8, 233u8,
                            132u8, 67u8,
                        ],
                    )
                }
                #[doc = " Author of current block."]
                pub fn author(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<subxt::ext::sp_core::crypto::AccountId32>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Authorship",
                        "Author",
                        vec![],
                        [
                            149u8, 42u8, 33u8, 147u8, 190u8, 207u8, 174u8, 227u8, 190u8, 110u8,
                            25u8, 131u8, 5u8, 167u8, 237u8, 188u8, 188u8, 33u8, 177u8, 126u8,
                            181u8, 49u8, 126u8, 118u8, 46u8, 128u8, 154u8, 95u8, 15u8, 91u8, 103u8,
                            113u8,
                        ],
                    )
                }
                #[doc = " Whether uncles were already set in this block."]
                pub fn did_set_uncles(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::bool>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Authorship",
                        "DidSetUncles",
                        vec![],
                        [
                            64u8, 3u8, 208u8, 187u8, 50u8, 45u8, 37u8, 88u8, 163u8, 226u8, 37u8,
                            126u8, 232u8, 107u8, 156u8, 187u8, 29u8, 15u8, 53u8, 46u8, 28u8, 73u8,
                            83u8, 123u8, 14u8, 244u8, 243u8, 43u8, 245u8, 143u8, 15u8, 115u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The number of blocks back we should accept uncles."]
                #[doc = " This means that we will deal with uncle-parents that are"]
                #[doc = " `UncleGenerations + 1` before `now`."]
                pub fn uncle_generations(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Authorship",
                        "UncleGenerations",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod collator_selection {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetInvulnerables {
                pub new: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct SetDesiredCandidates {
                pub max: ::core::primitive::u32,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct SetCandidacyBond {
                pub bond: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RegisterAsCandidate;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct LeaveIntent;
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the list of invulnerable (fixed) collators."]
                pub fn set_invulnerables(
                    &self,
                    new: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::tx::StaticTxPayload<SetInvulnerables> {
                    subxt::tx::StaticTxPayload::new(
                        "CollatorSelection",
                        "set_invulnerables",
                        SetInvulnerables { new },
                        [
                            120u8, 177u8, 166u8, 239u8, 2u8, 102u8, 76u8, 143u8, 218u8, 130u8,
                            168u8, 152u8, 200u8, 107u8, 221u8, 30u8, 252u8, 18u8, 108u8, 147u8,
                            81u8, 251u8, 183u8, 185u8, 0u8, 184u8, 100u8, 251u8, 95u8, 168u8, 26u8,
                            142u8,
                        ],
                    )
                }
                #[doc = "Set the ideal number of collators (not including the invulnerables)."]
                #[doc = "If lowering this number, then the number of running collators could be higher than this figure."]
                #[doc = "Aside from that edge case, there should be no other way to have more collators than the desired number."]
                pub fn set_desired_candidates(
                    &self,
                    max: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<SetDesiredCandidates> {
                    subxt::tx::StaticTxPayload::new(
                        "CollatorSelection",
                        "set_desired_candidates",
                        SetDesiredCandidates { max },
                        [
                            181u8, 32u8, 138u8, 37u8, 254u8, 213u8, 197u8, 224u8, 82u8, 26u8, 3u8,
                            113u8, 11u8, 146u8, 251u8, 35u8, 250u8, 202u8, 209u8, 2u8, 231u8,
                            176u8, 216u8, 124u8, 125u8, 43u8, 52u8, 126u8, 150u8, 140u8, 20u8,
                            113u8,
                        ],
                    )
                }
                #[doc = "Set the candidacy bond amount."]
                pub fn set_candidacy_bond(
                    &self,
                    bond: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<SetCandidacyBond> {
                    subxt::tx::StaticTxPayload::new(
                        "CollatorSelection",
                        "set_candidacy_bond",
                        SetCandidacyBond { bond },
                        [
                            42u8, 173u8, 79u8, 226u8, 224u8, 202u8, 70u8, 185u8, 125u8, 17u8,
                            123u8, 99u8, 107u8, 163u8, 67u8, 75u8, 110u8, 65u8, 248u8, 179u8, 39u8,
                            177u8, 135u8, 186u8, 66u8, 237u8, 30u8, 73u8, 163u8, 98u8, 81u8, 152u8,
                        ],
                    )
                }
                #[doc = "Register this account as a collator candidate. The account must (a) already have"]
                #[doc = "registered session keys and (b) be able to reserve the `CandidacyBond`."]
                #[doc = ""]
                #[doc = "This call is not available to `Invulnerable` collators."]
                pub fn register_as_candidate(
                    &self,
                ) -> subxt::tx::StaticTxPayload<RegisterAsCandidate> {
                    subxt::tx::StaticTxPayload::new(
                        "CollatorSelection",
                        "register_as_candidate",
                        RegisterAsCandidate {},
                        [
                            63u8, 11u8, 114u8, 142u8, 89u8, 78u8, 120u8, 214u8, 22u8, 215u8, 125u8,
                            60u8, 203u8, 89u8, 141u8, 126u8, 124u8, 167u8, 70u8, 240u8, 85u8,
                            253u8, 34u8, 245u8, 67u8, 46u8, 240u8, 195u8, 57u8, 81u8, 138u8, 69u8,
                        ],
                    )
                }
                #[doc = "Deregister `origin` as a collator candidate. Note that the collator can only leave on"]
                #[doc = "session change. The `CandidacyBond` will be unreserved immediately."]
                #[doc = ""]
                #[doc = "This call will fail if the total number of candidates would drop below `MinCandidates`."]
                #[doc = ""]
                #[doc = "This call is not available to `Invulnerable` collators."]
                pub fn leave_intent(&self) -> subxt::tx::StaticTxPayload<LeaveIntent> {
                    subxt::tx::StaticTxPayload::new(
                        "CollatorSelection",
                        "leave_intent",
                        LeaveIntent {},
                        [
                            217u8, 3u8, 35u8, 71u8, 152u8, 203u8, 203u8, 212u8, 25u8, 113u8, 158u8,
                            124u8, 161u8, 154u8, 32u8, 47u8, 116u8, 134u8, 11u8, 201u8, 154u8,
                            40u8, 138u8, 163u8, 184u8, 188u8, 33u8, 237u8, 219u8, 40u8, 63u8,
                            221u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_collator_selection::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct NewInvulnerables {
                pub invulnerables: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
            }
            impl subxt::events::StaticEvent for NewInvulnerables {
                const PALLET: &'static str = "CollatorSelection";
                const EVENT: &'static str = "NewInvulnerables";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct NewDesiredCandidates {
                pub desired_candidates: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for NewDesiredCandidates {
                const PALLET: &'static str = "CollatorSelection";
                const EVENT: &'static str = "NewDesiredCandidates";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct NewCandidacyBond {
                pub bond_amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for NewCandidacyBond {
                const PALLET: &'static str = "CollatorSelection";
                const EVENT: &'static str = "NewCandidacyBond";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct CandidateAdded {
                pub account_id: subxt::ext::sp_core::crypto::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for CandidateAdded {
                const PALLET: &'static str = "CollatorSelection";
                const EVENT: &'static str = "CandidateAdded";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct CandidateRemoved {
                pub account_id: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for CandidateRemoved {
                const PALLET: &'static str = "CollatorSelection";
                const EVENT: &'static str = "CandidateRemoved";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The invulnerable, fixed collators."]
                pub fn invulnerables(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            subxt::ext::sp_core::crypto::AccountId32,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CollatorSelection",
                        "Invulnerables",
                        vec![],
                        [
                            215u8, 62u8, 140u8, 81u8, 0u8, 189u8, 182u8, 139u8, 32u8, 42u8, 20u8,
                            223u8, 81u8, 212u8, 100u8, 97u8, 146u8, 253u8, 75u8, 123u8, 240u8,
                            125u8, 249u8, 62u8, 226u8, 70u8, 57u8, 206u8, 16u8, 74u8, 52u8, 72u8,
                        ],
                    )
                }
                #[doc = " The (community, limited) collation candidates."]
                pub fn candidates(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            runtime_types::pallet_collator_selection::pallet::CandidateInfo<
                                subxt::ext::sp_core::crypto::AccountId32,
                                ::core::primitive::u128,
                            >,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CollatorSelection",
                        "Candidates",
                        vec![],
                        [
                            28u8, 116u8, 232u8, 94u8, 147u8, 216u8, 214u8, 30u8, 26u8, 241u8, 68u8,
                            108u8, 165u8, 107u8, 89u8, 136u8, 111u8, 239u8, 150u8, 42u8, 210u8,
                            214u8, 192u8, 234u8, 29u8, 41u8, 157u8, 169u8, 120u8, 126u8, 192u8,
                            32u8,
                        ],
                    )
                }
                #[doc = " Last block authored by collator."]
                pub fn last_authored_block(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CollatorSelection",
                        "LastAuthoredBlock",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            53u8, 30u8, 243u8, 31u8, 228u8, 231u8, 175u8, 153u8, 204u8, 241u8,
                            76u8, 147u8, 6u8, 202u8, 255u8, 89u8, 30u8, 129u8, 85u8, 92u8, 10u8,
                            97u8, 177u8, 129u8, 88u8, 196u8, 7u8, 255u8, 74u8, 52u8, 28u8, 0u8,
                        ],
                    )
                }
                #[doc = " Last block authored by collator."]
                pub fn last_authored_block_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CollatorSelection",
                        "LastAuthoredBlock",
                        Vec::new(),
                        [
                            53u8, 30u8, 243u8, 31u8, 228u8, 231u8, 175u8, 153u8, 204u8, 241u8,
                            76u8, 147u8, 6u8, 202u8, 255u8, 89u8, 30u8, 129u8, 85u8, 92u8, 10u8,
                            97u8, 177u8, 129u8, 88u8, 196u8, 7u8, 255u8, 74u8, 52u8, 28u8, 0u8,
                        ],
                    )
                }
                #[doc = " Desired number of candidates."]
                #[doc = ""]
                #[doc = " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."]
                pub fn desired_candidates(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CollatorSelection",
                        "DesiredCandidates",
                        vec![],
                        [
                            161u8, 170u8, 254u8, 76u8, 112u8, 146u8, 144u8, 7u8, 177u8, 152u8,
                            146u8, 60u8, 143u8, 237u8, 1u8, 168u8, 176u8, 33u8, 103u8, 35u8, 39u8,
                            233u8, 107u8, 253u8, 47u8, 183u8, 11u8, 86u8, 230u8, 13u8, 127u8,
                            133u8,
                        ],
                    )
                }
                #[doc = " Fixed amount to deposit to become a collator."]
                #[doc = ""]
                #[doc = " When a collator calls `leave_intent` they immediately receive the deposit back."]
                pub fn candidacy_bond(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CollatorSelection",
                        "CandidacyBond",
                        vec![],
                        [
                            1u8, 153u8, 211u8, 74u8, 138u8, 178u8, 81u8, 9u8, 205u8, 117u8, 102u8,
                            182u8, 56u8, 184u8, 56u8, 62u8, 193u8, 82u8, 224u8, 218u8, 253u8,
                            194u8, 250u8, 55u8, 220u8, 107u8, 157u8, 175u8, 62u8, 35u8, 224u8,
                            183u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod session {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetKeys {
                pub keys: runtime_types::dali_runtime::opaque::SessionKeys,
                pub proof: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct PurgeKeys;
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Sets the session key(s) of the function caller to `keys`."]
                #[doc = "Allows an account to set its session key prior to becoming a validator."]
                #[doc = "This doesn't take effect until the next session."]
                #[doc = ""]
                #[doc = "The dispatch origin of this function must be signed."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: `O(1)`. Actual cost depends on the number of length of"]
                #[doc = "  `T::Keys::key_ids()` which is fixed."]
                #[doc = "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`"]
                #[doc = "- DbWrites: `origin account`, `NextKeys`"]
                #[doc = "- DbReads per key id: `KeyOwner`"]
                #[doc = "- DbWrites per key id: `KeyOwner`"]
                #[doc = "# </weight>"]
                pub fn set_keys(
                    &self,
                    keys: runtime_types::dali_runtime::opaque::SessionKeys,
                    proof: ::std::vec::Vec<::core::primitive::u8>,
                ) -> subxt::tx::StaticTxPayload<SetKeys> {
                    subxt::tx::StaticTxPayload::new(
                        "Session",
                        "set_keys",
                        SetKeys { keys, proof },
                        [
                            199u8, 56u8, 39u8, 236u8, 44u8, 88u8, 207u8, 0u8, 187u8, 195u8, 218u8,
                            94u8, 126u8, 128u8, 37u8, 162u8, 216u8, 223u8, 36u8, 165u8, 18u8, 37u8,
                            16u8, 72u8, 136u8, 28u8, 134u8, 230u8, 231u8, 48u8, 230u8, 122u8,
                        ],
                    )
                }
                #[doc = "Removes any session key(s) of the function caller."]
                #[doc = ""]
                #[doc = "This doesn't take effect until the next session."]
                #[doc = ""]
                #[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
                #[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
                #[doc = "means being a controller account) or directly convertible into a validator ID (which"]
                #[doc = "usually means being a stash account)."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length"]
                #[doc = "  of `T::Keys::key_ids()` which is fixed."]
                #[doc = "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`"]
                #[doc = "- DbWrites: `NextKeys`, `origin account`"]
                #[doc = "- DbWrites per key id: `KeyOwner`"]
                #[doc = "# </weight>"]
                pub fn purge_keys(&self) -> subxt::tx::StaticTxPayload<PurgeKeys> {
                    subxt::tx::StaticTxPayload::new(
                        "Session",
                        "purge_keys",
                        PurgeKeys {},
                        [
                            200u8, 255u8, 4u8, 213u8, 188u8, 92u8, 99u8, 116u8, 163u8, 152u8, 29u8,
                            35u8, 133u8, 119u8, 246u8, 44u8, 91u8, 31u8, 145u8, 23u8, 213u8, 64u8,
                            71u8, 242u8, 207u8, 239u8, 231u8, 37u8, 61u8, 63u8, 190u8, 35u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_session::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "New session has happened. Note that the argument is the session index, not the"]
            #[doc = "block number as the type might suggest."]
            pub struct NewSession {
                pub session_index: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for NewSession {
                const PALLET: &'static str = "Session";
                const EVENT: &'static str = "NewSession";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current set of validators."]
                pub fn validators(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Session",
                        "Validators",
                        vec![],
                        [
                            144u8, 235u8, 200u8, 43u8, 151u8, 57u8, 147u8, 172u8, 201u8, 202u8,
                            242u8, 96u8, 57u8, 76u8, 124u8, 77u8, 42u8, 113u8, 218u8, 220u8, 230u8,
                            32u8, 151u8, 152u8, 172u8, 106u8, 60u8, 227u8, 122u8, 118u8, 137u8,
                            68u8,
                        ],
                    )
                }
                #[doc = " Current index of the session."]
                pub fn current_index(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Session",
                        "CurrentIndex",
                        vec![],
                        [
                            148u8, 179u8, 159u8, 15u8, 197u8, 95u8, 214u8, 30u8, 209u8, 251u8,
                            183u8, 231u8, 91u8, 25u8, 181u8, 191u8, 143u8, 252u8, 227u8, 80u8,
                            159u8, 66u8, 194u8, 67u8, 113u8, 74u8, 111u8, 91u8, 218u8, 187u8,
                            130u8, 40u8,
                        ],
                    )
                }
                #[doc = " True if the underlying economic identities or weighting behind the validators"]
                #[doc = " has changed in the queued validator set."]
                pub fn queued_changed(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::bool>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Session",
                        "QueuedChanged",
                        vec![],
                        [
                            105u8, 140u8, 235u8, 218u8, 96u8, 100u8, 252u8, 10u8, 58u8, 221u8,
                            244u8, 251u8, 67u8, 91u8, 80u8, 202u8, 152u8, 42u8, 50u8, 113u8, 200u8,
                            247u8, 59u8, 213u8, 77u8, 195u8, 1u8, 150u8, 220u8, 18u8, 245u8, 46u8,
                        ],
                    )
                }
                #[doc = " The queued keys for the next session. When the next session begins, these keys"]
                #[doc = " will be used to determine the validator's session keys."]
                pub fn queued_keys(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<(
                            subxt::ext::sp_core::crypto::AccountId32,
                            runtime_types::dali_runtime::opaque::SessionKeys,
                        )>,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Session",
                        "QueuedKeys",
                        vec![],
                        [
                            42u8, 134u8, 252u8, 233u8, 29u8, 69u8, 168u8, 107u8, 77u8, 70u8, 80u8,
                            189u8, 149u8, 227u8, 77u8, 74u8, 100u8, 175u8, 10u8, 162u8, 145u8,
                            105u8, 85u8, 196u8, 169u8, 195u8, 116u8, 255u8, 112u8, 122u8, 112u8,
                            133u8,
                        ],
                    )
                }
                #[doc = " Indices of disabled validators."]
                #[doc = ""]
                #[doc = " The vec is always kept sorted so that we can find whether a given validator is"]
                #[doc = " disabled using binary search. It gets cleared when `on_session_ending` returns"]
                #[doc = " a new set of identities."]
                pub fn disabled_validators(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u32>>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Session",
                        "DisabledValidators",
                        vec![],
                        [
                            135u8, 22u8, 22u8, 97u8, 82u8, 217u8, 144u8, 141u8, 121u8, 240u8,
                            189u8, 16u8, 176u8, 88u8, 177u8, 31u8, 20u8, 242u8, 73u8, 104u8, 11u8,
                            110u8, 214u8, 34u8, 52u8, 217u8, 106u8, 33u8, 174u8, 174u8, 198u8,
                            84u8,
                        ],
                    )
                }
                #[doc = " The next session keys for a validator."]
                pub fn next_keys(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::dali_runtime::opaque::SessionKeys,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Session",
                        "NextKeys",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            21u8, 0u8, 237u8, 42u8, 156u8, 77u8, 229u8, 211u8, 105u8, 8u8, 231u8,
                            5u8, 246u8, 188u8, 69u8, 143u8, 202u8, 240u8, 252u8, 253u8, 106u8,
                            37u8, 51u8, 244u8, 206u8, 199u8, 249u8, 37u8, 17u8, 102u8, 20u8, 246u8,
                        ],
                    )
                }
                #[doc = " The next session keys for a validator."]
                pub fn next_keys_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::dali_runtime::opaque::SessionKeys,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Session",
                        "NextKeys",
                        Vec::new(),
                        [
                            21u8, 0u8, 237u8, 42u8, 156u8, 77u8, 229u8, 211u8, 105u8, 8u8, 231u8,
                            5u8, 246u8, 188u8, 69u8, 143u8, 202u8, 240u8, 252u8, 253u8, 106u8,
                            37u8, 51u8, 244u8, 206u8, 199u8, 249u8, 37u8, 17u8, 102u8, 20u8, 246u8,
                        ],
                    )
                }
                #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
                pub fn key_owner(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::sp_core::crypto::KeyTypeId>,
                    _1: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<subxt::ext::sp_core::crypto::AccountId32>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Session",
                        "KeyOwner",
                        vec![subxt::storage::address::StorageMapKey::new(
                            &(_0.borrow(), _1.borrow()),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            4u8, 91u8, 25u8, 84u8, 250u8, 201u8, 174u8, 129u8, 201u8, 58u8, 197u8,
                            199u8, 137u8, 240u8, 118u8, 33u8, 99u8, 2u8, 195u8, 57u8, 53u8, 172u8,
                            0u8, 148u8, 203u8, 144u8, 149u8, 64u8, 135u8, 254u8, 242u8, 215u8,
                        ],
                    )
                }
                #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
                pub fn key_owner_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<subxt::ext::sp_core::crypto::AccountId32>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Session",
                        "KeyOwner",
                        Vec::new(),
                        [
                            4u8, 91u8, 25u8, 84u8, 250u8, 201u8, 174u8, 129u8, 201u8, 58u8, 197u8,
                            199u8, 137u8, 240u8, 118u8, 33u8, 99u8, 2u8, 195u8, 57u8, 53u8, 172u8,
                            0u8, 148u8, 203u8, 144u8, 149u8, 64u8, 135u8, 254u8, 242u8, 215u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod aura {
        use super::{root_mod, runtime_types};
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current authority set."]
                pub fn authorities(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Aura",
                        "Authorities",
                        vec![],
                        [
                            199u8, 89u8, 94u8, 48u8, 249u8, 35u8, 105u8, 90u8, 15u8, 86u8, 218u8,
                            85u8, 22u8, 236u8, 228u8, 36u8, 137u8, 64u8, 236u8, 171u8, 242u8,
                            217u8, 91u8, 240u8, 205u8, 205u8, 226u8, 16u8, 147u8, 235u8, 181u8,
                            41u8,
                        ],
                    )
                }
                #[doc = " The current slot of this block."]
                #[doc = ""]
                #[doc = " This will be set in `on_initialize`."]
                pub fn current_slot(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::sp_consensus_slots::Slot>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Aura",
                        "CurrentSlot",
                        vec![],
                        [
                            139u8, 237u8, 185u8, 137u8, 251u8, 179u8, 69u8, 167u8, 133u8, 168u8,
                            204u8, 64u8, 178u8, 123u8, 92u8, 250u8, 119u8, 190u8, 208u8, 178u8,
                            208u8, 176u8, 124u8, 187u8, 74u8, 165u8, 33u8, 78u8, 161u8, 206u8, 8u8,
                            108u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod aura_ext {
        use super::{root_mod, runtime_types};
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Serves as cache for the authorities."]
                #[doc = ""]
                #[doc = " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,"]
                #[doc = " but we require the old authorities to verify the seal when validating a PoV. This will always"]
                #[doc = " be updated to the latest AuRa authorities in `on_finalize`."]
                pub fn authorities(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "AuraExt",
                        "Authorities",
                        vec![],
                        [
                            199u8, 89u8, 94u8, 48u8, 249u8, 35u8, 105u8, 90u8, 15u8, 86u8, 218u8,
                            85u8, 22u8, 236u8, 228u8, 36u8, 137u8, 64u8, 236u8, 171u8, 242u8,
                            217u8, 91u8, 240u8, 205u8, 205u8, 226u8, 16u8, 147u8, 235u8, 181u8,
                            41u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod council {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetMembers {
                pub new_members: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                pub prime: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
                pub old_count: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Execute {
                pub proposal: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
                #[codec(compact)]
                pub length_bound: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Propose {
                #[codec(compact)]
                pub threshold: ::core::primitive::u32,
                pub proposal: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
                #[codec(compact)]
                pub length_bound: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Vote {
                pub proposal: subxt::ext::sp_core::H256,
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                pub approve: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Close {
                pub proposal_hash: subxt::ext::sp_core::H256,
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                #[codec(compact)]
                pub proposal_weight_bound: ::core::primitive::u64,
                #[codec(compact)]
                pub length_bound: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct DisapproveProposal {
                pub proposal_hash: subxt::ext::sp_core::H256,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the collective's membership."]
                #[doc = ""]
                #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                #[doc = "- `prime`: The prime member whose vote sets the default."]
                #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                #[doc = "  weight estimation."]
                #[doc = ""]
                #[doc = "Requires root origin."]
                #[doc = ""]
                #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                #[doc = ""]
                #[doc = "# WARNING:"]
                #[doc = ""]
                #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                #[doc = "implementation of the trait [`ChangeMembers`]."]
                #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                #[doc = "with other logic managing the member set."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "## Weight"]
                #[doc = "- `O(MP + N)` where:"]
                #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                #[doc = "  - `P` proposals-count (code-bounded)"]
                #[doc = "- DB:"]
                #[doc = "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the"]
                #[doc = "    members"]
                #[doc = "  - 1 storage read (codec `O(P)`) for reading the proposals"]
                #[doc = "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal"]
                #[doc = "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one"]
                #[doc = "# </weight>"]
                pub fn set_members(
                    &self,
                    new_members: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                    prime: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
                    old_count: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<SetMembers> {
                    subxt::tx::StaticTxPayload::new(
                        "Council",
                        "set_members",
                        SetMembers {
                            new_members,
                            prime,
                            old_count,
                        },
                        [
                            196u8, 103u8, 123u8, 125u8, 226u8, 177u8, 126u8, 37u8, 160u8, 114u8,
                            34u8, 136u8, 219u8, 84u8, 199u8, 94u8, 242u8, 20u8, 126u8, 126u8,
                            166u8, 190u8, 198u8, 33u8, 162u8, 113u8, 237u8, 222u8, 90u8, 1u8, 2u8,
                            234u8,
                        ],
                    )
                }
                #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                #[doc = ""]
                #[doc = "Origin must be a member of the collective."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "## Weight"]
                #[doc = "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching"]
                #[doc = "  `proposal`"]
                #[doc = "- DB: 1 read (codec `O(M)`) + DB access of `proposal`"]
                #[doc = "- 1 event"]
                #[doc = "# </weight>"]
                pub fn execute(
                    &self,
                    proposal: runtime_types::dali_runtime::Call,
                    length_bound: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<Execute> {
                    subxt::tx::StaticTxPayload::new(
                        "Council",
                        "execute",
                        Execute {
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            179u8, 155u8, 29u8, 184u8, 7u8, 239u8, 51u8, 241u8, 190u8, 104u8,
                            160u8, 200u8, 193u8, 174u8, 125u8, 221u8, 84u8, 25u8, 213u8, 172u8,
                            219u8, 174u8, 6u8, 124u8, 72u8, 26u8, 199u8, 1u8, 228u8, 82u8, 75u8,
                            149u8,
                        ],
                    )
                }
                #[doc = "Add a new proposal to either be voted on or executed directly."]
                #[doc = ""]
                #[doc = "Requires the sender to be member."]
                #[doc = ""]
                #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                #[doc = "or put up for voting."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "## Weight"]
                #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - branching is influenced by `threshold` where:"]
                #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                #[doc = "- DB:"]
                #[doc = "  - 1 storage read `is_member` (codec `O(M)`)"]
                #[doc = "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)"]
                #[doc = "  - DB accesses influenced by `threshold`:"]
                #[doc = "    - EITHER storage accesses done by `proposal` (`threshold < 2`)"]
                #[doc = "    - OR proposal insertion (`threshold <= 2`)"]
                #[doc = "      - 1 storage mutation `Proposals` (codec `O(P2)`)"]
                #[doc = "      - 1 storage mutation `ProposalCount` (codec `O(1)`)"]
                #[doc = "      - 1 storage write `ProposalOf` (codec `O(B)`)"]
                #[doc = "      - 1 storage write `Voting` (codec `O(M)`)"]
                #[doc = "  - 1 event"]
                #[doc = "# </weight>"]
                pub fn propose(
                    &self,
                    threshold: ::core::primitive::u32,
                    proposal: runtime_types::dali_runtime::Call,
                    length_bound: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<Propose> {
                    subxt::tx::StaticTxPayload::new(
                        "Council",
                        "propose",
                        Propose {
                            threshold,
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            218u8, 245u8, 101u8, 241u8, 58u8, 99u8, 174u8, 98u8, 39u8, 72u8, 196u8,
                            228u8, 199u8, 113u8, 249u8, 136u8, 129u8, 119u8, 93u8, 98u8, 162u8,
                            97u8, 82u8, 53u8, 238u8, 93u8, 222u8, 173u8, 71u8, 180u8, 181u8, 213u8,
                        ],
                    )
                }
                #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                #[doc = ""]
                #[doc = "Requires the sender to be a member."]
                #[doc = ""]
                #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                #[doc = "fee."]
                #[doc = "# <weight>"]
                #[doc = "## Weight"]
                #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                #[doc = "- DB:"]
                #[doc = "  - 1 storage read `Members` (codec `O(M)`)"]
                #[doc = "  - 1 storage mutation `Voting` (codec `O(M)`)"]
                #[doc = "- 1 event"]
                #[doc = "# </weight>"]
                pub fn vote(
                    &self,
                    proposal: subxt::ext::sp_core::H256,
                    index: ::core::primitive::u32,
                    approve: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<Vote> {
                    subxt::tx::StaticTxPayload::new(
                        "Council",
                        "vote",
                        Vote {
                            proposal,
                            index,
                            approve,
                        },
                        [
                            108u8, 46u8, 180u8, 148u8, 145u8, 24u8, 173u8, 56u8, 36u8, 100u8,
                            216u8, 43u8, 178u8, 202u8, 26u8, 136u8, 93u8, 84u8, 80u8, 134u8, 14u8,
                            42u8, 248u8, 205u8, 68u8, 92u8, 79u8, 11u8, 113u8, 115u8, 157u8, 100u8,
                        ],
                    )
                }
                #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                #[doc = ""]
                #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                #[doc = ""]
                #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                #[doc = "has enough votes to be approved or disapproved."]
                #[doc = ""]
                #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                #[doc = "unless there is a prime member set and the prime member cast an approval."]
                #[doc = ""]
                #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                #[doc = ""]
                #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                #[doc = "proposal."]
                #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "## Weight"]
                #[doc = "- `O(B + M + P1 + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                #[doc = "  - `P2` is proposal-count (code-bounded)"]
                #[doc = "- DB:"]
                #[doc = " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)"]
                #[doc = " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec"]
                #[doc = "   `O(P2)`)"]
                #[doc = " - any mutations done while executing `proposal` (`P1`)"]
                #[doc = "- up to 3 events"]
                #[doc = "# </weight>"]
                pub fn close(
                    &self,
                    proposal_hash: subxt::ext::sp_core::H256,
                    index: ::core::primitive::u32,
                    proposal_weight_bound: ::core::primitive::u64,
                    length_bound: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<Close> {
                    subxt::tx::StaticTxPayload::new(
                        "Council",
                        "close",
                        Close {
                            proposal_hash,
                            index,
                            proposal_weight_bound,
                            length_bound,
                        },
                        [
                            88u8, 8u8, 33u8, 184u8, 4u8, 97u8, 120u8, 237u8, 43u8, 183u8, 130u8,
                            139u8, 65u8, 74u8, 166u8, 119u8, 246u8, 65u8, 132u8, 219u8, 118u8,
                            69u8, 182u8, 195u8, 111u8, 204u8, 107u8, 78u8, 152u8, 218u8, 181u8,
                            208u8,
                        ],
                    )
                }
                #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                #[doc = "state."]
                #[doc = ""]
                #[doc = "Must be called by the Root origin."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Complexity: O(P) where P is the number of max proposals"]
                #[doc = "DB Weight:"]
                #[doc = "* Reads: Proposals"]
                #[doc = "* Writes: Voting, Proposals, ProposalOf"]
                #[doc = "# </weight>"]
                pub fn disapprove_proposal(
                    &self,
                    proposal_hash: subxt::ext::sp_core::H256,
                ) -> subxt::tx::StaticTxPayload<DisapproveProposal> {
                    subxt::tx::StaticTxPayload::new(
                        "Council",
                        "disapprove_proposal",
                        DisapproveProposal { proposal_hash },
                        [
                            25u8, 123u8, 1u8, 8u8, 74u8, 37u8, 3u8, 40u8, 97u8, 37u8, 175u8, 224u8,
                            72u8, 155u8, 123u8, 109u8, 104u8, 43u8, 91u8, 125u8, 199u8, 51u8, 17u8,
                            225u8, 133u8, 38u8, 120u8, 76u8, 164u8, 5u8, 194u8, 201u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_collective::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
            #[doc = "`MemberCount`)."]
            pub struct Proposed {
                pub account: subxt::ext::sp_core::crypto::AccountId32,
                pub proposal_index: ::core::primitive::u32,
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub threshold: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A motion (given hash) has been voted on by given account, leaving"]
            #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
            pub struct Voted {
                pub account: subxt::ext::sp_core::crypto::AccountId32,
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub voted: ::core::primitive::bool,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Voted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A motion was approved by the required threshold."]
            pub struct Approved {
                pub proposal_hash: subxt::ext::sp_core::H256,
            }
            impl subxt::events::StaticEvent for Approved {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Approved";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A motion was not approved by the required threshold."]
            pub struct Disapproved {
                pub proposal_hash: subxt::ext::sp_core::H256,
            }
            impl subxt::events::StaticEvent for Disapproved {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Disapproved";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
            pub struct Executed {
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Executed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
            pub struct MemberExecuted {
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl subxt::events::StaticEvent for MemberExecuted {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "MemberExecuted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
            pub struct Closed {
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for Closed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Closed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The hashes of the active proposals."]
                pub fn proposals(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            subxt::ext::sp_core::H256,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Council",
                        "Proposals",
                        vec![],
                        [
                            10u8, 133u8, 82u8, 54u8, 193u8, 41u8, 253u8, 159u8, 56u8, 96u8, 249u8,
                            148u8, 43u8, 57u8, 116u8, 43u8, 222u8, 243u8, 237u8, 231u8, 238u8,
                            60u8, 26u8, 225u8, 19u8, 203u8, 213u8, 220u8, 114u8, 217u8, 100u8,
                            27u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::H256>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::dali_runtime::Call>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Council",
                        "ProposalOf",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            219u8, 179u8, 153u8, 101u8, 39u8, 234u8, 139u8, 212u8, 44u8, 135u8,
                            10u8, 234u8, 106u8, 4u8, 136u8, 106u8, 94u8, 150u8, 35u8, 56u8, 155u8,
                            242u8, 208u8, 29u8, 173u8, 76u8, 170u8, 202u8, 110u8, 130u8, 244u8,
                            253u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::dali_runtime::Call>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Council",
                        "ProposalOf",
                        Vec::new(),
                        [
                            219u8, 179u8, 153u8, 101u8, 39u8, 234u8, 139u8, 212u8, 44u8, 135u8,
                            10u8, 234u8, 106u8, 4u8, 136u8, 106u8, 94u8, 150u8, 35u8, 56u8, 155u8,
                            242u8, 208u8, 29u8, 173u8, 76u8, 170u8, 202u8, 110u8, 130u8, 244u8,
                            253u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::H256>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_collective::Votes<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Council",
                        "Voting",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            89u8, 108u8, 65u8, 58u8, 60u8, 116u8, 54u8, 68u8, 179u8, 73u8, 161u8,
                            168u8, 78u8, 213u8, 208u8, 54u8, 244u8, 58u8, 70u8, 209u8, 170u8,
                            136u8, 215u8, 3u8, 2u8, 105u8, 229u8, 217u8, 240u8, 230u8, 107u8,
                            221u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_collective::Votes<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Council",
                        "Voting",
                        Vec::new(),
                        [
                            89u8, 108u8, 65u8, 58u8, 60u8, 116u8, 54u8, 68u8, 179u8, 73u8, 161u8,
                            168u8, 78u8, 213u8, 208u8, 54u8, 244u8, 58u8, 70u8, 209u8, 170u8,
                            136u8, 215u8, 3u8, 2u8, 105u8, 229u8, 217u8, 240u8, 230u8, 107u8,
                            221u8,
                        ],
                    )
                }
                #[doc = " Proposals so far."]
                pub fn proposal_count(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Council",
                        "ProposalCount",
                        vec![],
                        [
                            132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8, 172u8, 143u8, 33u8,
                            140u8, 99u8, 124u8, 208u8, 57u8, 232u8, 154u8, 110u8, 32u8, 142u8,
                            24u8, 149u8, 109u8, 105u8, 30u8, 83u8, 39u8, 177u8, 127u8, 160u8, 34u8,
                            70u8,
                        ],
                    )
                }
                #[doc = " The current members of the collective. This is stored sorted (just by value)."]
                pub fn members(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Council",
                        "Members",
                        vec![],
                        [
                            162u8, 72u8, 174u8, 204u8, 140u8, 105u8, 205u8, 176u8, 197u8, 117u8,
                            206u8, 134u8, 157u8, 110u8, 139u8, 54u8, 43u8, 233u8, 25u8, 51u8, 36u8,
                            238u8, 94u8, 124u8, 221u8, 52u8, 237u8, 71u8, 125u8, 56u8, 129u8,
                            222u8,
                        ],
                    )
                }
                #[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
                pub fn prime(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<subxt::ext::sp_core::crypto::AccountId32>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Council",
                        "Prime",
                        vec![],
                        [
                            108u8, 118u8, 54u8, 193u8, 207u8, 227u8, 119u8, 97u8, 23u8, 239u8,
                            157u8, 69u8, 56u8, 142u8, 106u8, 17u8, 215u8, 159u8, 48u8, 42u8, 185u8,
                            209u8, 49u8, 159u8, 32u8, 168u8, 111u8, 158u8, 159u8, 217u8, 244u8,
                            158u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod council_membership {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AddMember {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RemoveMember {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SwapMember {
                pub remove: subxt::ext::sp_core::crypto::AccountId32,
                pub add: subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ResetMembers {
                pub members: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ChangeKey {
                pub new: subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetPrime {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ClearPrime;
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Add a member `who` to the set."]
                #[doc = ""]
                #[doc = "May only be called from `T::AddOrigin`."]
                pub fn add_member(
                    &self,
                    who: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<AddMember> {
                    subxt::tx::StaticTxPayload::new(
                        "CouncilMembership",
                        "add_member",
                        AddMember { who },
                        [
                            106u8, 33u8, 171u8, 114u8, 223u8, 105u8, 71u8, 15u8, 77u8, 253u8, 40u8,
                            204u8, 244u8, 142u8, 103u8, 177u8, 200u8, 243u8, 114u8, 241u8, 36u8,
                            135u8, 175u8, 255u8, 124u8, 193u8, 30u8, 46u8, 186u8, 172u8, 176u8,
                            98u8,
                        ],
                    )
                }
                #[doc = "Remove a member `who` from the set."]
                #[doc = ""]
                #[doc = "May only be called from `T::RemoveOrigin`."]
                pub fn remove_member(
                    &self,
                    who: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<RemoveMember> {
                    subxt::tx::StaticTxPayload::new(
                        "CouncilMembership",
                        "remove_member",
                        RemoveMember { who },
                        [
                            100u8, 17u8, 75u8, 92u8, 58u8, 100u8, 34u8, 187u8, 41u8, 160u8, 137u8,
                            58u8, 78u8, 166u8, 161u8, 116u8, 1u8, 67u8, 201u8, 144u8, 103u8, 84u8,
                            55u8, 246u8, 133u8, 180u8, 148u8, 86u8, 175u8, 175u8, 70u8, 73u8,
                        ],
                    )
                }
                #[doc = "Swap out one member `remove` for another `add`."]
                #[doc = ""]
                #[doc = "May only be called from `T::SwapOrigin`."]
                #[doc = ""]
                #[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
                pub fn swap_member(
                    &self,
                    remove: subxt::ext::sp_core::crypto::AccountId32,
                    add: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<SwapMember> {
                    subxt::tx::StaticTxPayload::new(
                        "CouncilMembership",
                        "swap_member",
                        SwapMember { remove, add },
                        [
                            66u8, 84u8, 183u8, 29u8, 104u8, 163u8, 220u8, 217u8, 103u8, 234u8,
                            233u8, 138u8, 191u8, 147u8, 51u8, 98u8, 46u8, 51u8, 179u8, 200u8, 23u8,
                            59u8, 112u8, 53u8, 8u8, 75u8, 135u8, 232u8, 116u8, 201u8, 60u8, 249u8,
                        ],
                    )
                }
                #[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
                #[doc = "pass `members` pre-sorted."]
                #[doc = ""]
                #[doc = "May only be called from `T::ResetOrigin`."]
                pub fn reset_members(
                    &self,
                    members: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::tx::StaticTxPayload<ResetMembers> {
                    subxt::tx::StaticTxPayload::new(
                        "CouncilMembership",
                        "reset_members",
                        ResetMembers { members },
                        [
                            9u8, 35u8, 28u8, 59u8, 158u8, 232u8, 89u8, 78u8, 101u8, 53u8, 240u8,
                            98u8, 13u8, 104u8, 235u8, 161u8, 201u8, 150u8, 117u8, 32u8, 75u8,
                            209u8, 166u8, 252u8, 57u8, 131u8, 96u8, 215u8, 51u8, 81u8, 42u8, 123u8,
                        ],
                    )
                }
                #[doc = "Swap out the sending member for some other key `new`."]
                #[doc = ""]
                #[doc = "May only be called from `Signed` origin of a current member."]
                #[doc = ""]
                #[doc = "Prime membership is passed from the origin account to `new`, if extant."]
                pub fn change_key(
                    &self,
                    new: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<ChangeKey> {
                    subxt::tx::StaticTxPayload::new(
                        "CouncilMembership",
                        "change_key",
                        ChangeKey { new },
                        [
                            53u8, 60u8, 54u8, 231u8, 151u8, 0u8, 27u8, 175u8, 250u8, 80u8, 74u8,
                            184u8, 184u8, 63u8, 90u8, 216u8, 186u8, 136u8, 74u8, 214u8, 111u8,
                            186u8, 137u8, 140u8, 108u8, 194u8, 128u8, 97u8, 168u8, 184u8, 112u8,
                            60u8,
                        ],
                    )
                }
                #[doc = "Set the prime member. Must be a current member."]
                #[doc = ""]
                #[doc = "May only be called from `T::PrimeOrigin`."]
                pub fn set_prime(
                    &self,
                    who: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<SetPrime> {
                    subxt::tx::StaticTxPayload::new(
                        "CouncilMembership",
                        "set_prime",
                        SetPrime { who },
                        [
                            123u8, 95u8, 75u8, 129u8, 19u8, 34u8, 192u8, 65u8, 169u8, 47u8, 184u8,
                            246u8, 55u8, 250u8, 31u8, 158u8, 57u8, 197u8, 22u8, 112u8, 167u8,
                            198u8, 136u8, 17u8, 15u8, 203u8, 101u8, 149u8, 15u8, 39u8, 16u8, 232u8,
                        ],
                    )
                }
                #[doc = "Remove the prime member if it exists."]
                #[doc = ""]
                #[doc = "May only be called from `T::PrimeOrigin`."]
                pub fn clear_prime(&self) -> subxt::tx::StaticTxPayload<ClearPrime> {
                    subxt::tx::StaticTxPayload::new(
                        "CouncilMembership",
                        "clear_prime",
                        ClearPrime {},
                        [
                            186u8, 182u8, 225u8, 90u8, 71u8, 124u8, 69u8, 100u8, 234u8, 25u8, 53u8,
                            23u8, 182u8, 32u8, 176u8, 81u8, 54u8, 140u8, 235u8, 126u8, 247u8, 7u8,
                            155u8, 62u8, 35u8, 135u8, 48u8, 61u8, 88u8, 160u8, 183u8, 72u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_membership::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The given member was added; see the transaction for who."]
            pub struct MemberAdded;
            impl subxt::events::StaticEvent for MemberAdded {
                const PALLET: &'static str = "CouncilMembership";
                const EVENT: &'static str = "MemberAdded";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The given member was removed; see the transaction for who."]
            pub struct MemberRemoved;
            impl subxt::events::StaticEvent for MemberRemoved {
                const PALLET: &'static str = "CouncilMembership";
                const EVENT: &'static str = "MemberRemoved";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Two members were swapped; see the transaction for who."]
            pub struct MembersSwapped;
            impl subxt::events::StaticEvent for MembersSwapped {
                const PALLET: &'static str = "CouncilMembership";
                const EVENT: &'static str = "MembersSwapped";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The membership was reset; see the transaction for who the new set is."]
            pub struct MembersReset;
            impl subxt::events::StaticEvent for MembersReset {
                const PALLET: &'static str = "CouncilMembership";
                const EVENT: &'static str = "MembersReset";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "One of the members' keys changed."]
            pub struct KeyChanged;
            impl subxt::events::StaticEvent for KeyChanged {
                const PALLET: &'static str = "CouncilMembership";
                const EVENT: &'static str = "KeyChanged";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Phantom member, never used."]
            pub struct Dummy;
            impl subxt::events::StaticEvent for Dummy {
                const PALLET: &'static str = "CouncilMembership";
                const EVENT: &'static str = "Dummy";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current membership, stored as an ordered Vec."]
                pub fn members(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            subxt::ext::sp_core::crypto::AccountId32,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CouncilMembership",
                        "Members",
                        vec![],
                        [
                            56u8, 56u8, 29u8, 90u8, 26u8, 115u8, 252u8, 185u8, 37u8, 108u8, 16u8,
                            46u8, 136u8, 139u8, 30u8, 19u8, 235u8, 78u8, 176u8, 129u8, 180u8, 57u8,
                            178u8, 239u8, 211u8, 6u8, 64u8, 129u8, 195u8, 46u8, 178u8, 157u8,
                        ],
                    )
                }
                #[doc = " The current prime member, if one exists."]
                pub fn prime(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<subxt::ext::sp_core::crypto::AccountId32>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CouncilMembership",
                        "Prime",
                        vec![],
                        [
                            108u8, 118u8, 54u8, 193u8, 207u8, 227u8, 119u8, 97u8, 23u8, 239u8,
                            157u8, 69u8, 56u8, 142u8, 106u8, 17u8, 215u8, 159u8, 48u8, 42u8, 185u8,
                            209u8, 49u8, 159u8, 32u8, 168u8, 111u8, 158u8, 159u8, 217u8, 244u8,
                            158u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod treasury {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ProposeSpend {
                #[codec(compact)]
                pub value: ::core::primitive::u128,
                pub beneficiary: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RejectProposal {
                #[codec(compact)]
                pub proposal_id: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ApproveProposal {
                #[codec(compact)]
                pub proposal_id: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Spend {
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
                pub beneficiary: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RemoveApproval {
                #[codec(compact)]
                pub proposal_id: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Put forward a suggestion for spending. A deposit proportional to the value"]
                #[doc = "is reserved and slashed if the proposal is rejected. It is returned once the"]
                #[doc = "proposal is awarded."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: O(1)"]
                #[doc = "- DbReads: `ProposalCount`, `origin account`"]
                #[doc = "- DbWrites: `ProposalCount`, `Proposals`, `origin account`"]
                #[doc = "# </weight>"]
                pub fn propose_spend(
                    &self,
                    value: ::core::primitive::u128,
                    beneficiary: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> subxt::tx::StaticTxPayload<ProposeSpend> {
                    subxt::tx::StaticTxPayload::new(
                        "Treasury",
                        "propose_spend",
                        ProposeSpend { value, beneficiary },
                        [
                            124u8, 32u8, 83u8, 127u8, 240u8, 169u8, 3u8, 190u8, 235u8, 163u8, 23u8,
                            29u8, 88u8, 242u8, 238u8, 187u8, 136u8, 75u8, 193u8, 192u8, 239u8, 2u8,
                            54u8, 238u8, 147u8, 42u8, 91u8, 14u8, 244u8, 175u8, 41u8, 14u8,
                        ],
                    )
                }
                #[doc = "Reject a proposed spend. The original deposit will be slashed."]
                #[doc = ""]
                #[doc = "May only be called from `T::RejectOrigin`."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: O(1)"]
                #[doc = "- DbReads: `Proposals`, `rejected proposer account`"]
                #[doc = "- DbWrites: `Proposals`, `rejected proposer account`"]
                #[doc = "# </weight>"]
                pub fn reject_proposal(
                    &self,
                    proposal_id: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<RejectProposal> {
                    subxt::tx::StaticTxPayload::new(
                        "Treasury",
                        "reject_proposal",
                        RejectProposal { proposal_id },
                        [
                            106u8, 223u8, 97u8, 22u8, 111u8, 208u8, 128u8, 26u8, 198u8, 140u8,
                            118u8, 126u8, 187u8, 51u8, 193u8, 50u8, 193u8, 68u8, 143u8, 144u8,
                            34u8, 132u8, 44u8, 244u8, 105u8, 186u8, 223u8, 234u8, 17u8, 145u8,
                            209u8, 145u8,
                        ],
                    )
                }
                #[doc = "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary"]
                #[doc = "and the original deposit will be returned."]
                #[doc = ""]
                #[doc = "May only be called from `T::ApproveOrigin`."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: O(1)."]
                #[doc = "- DbReads: `Proposals`, `Approvals`"]
                #[doc = "- DbWrite: `Approvals`"]
                #[doc = "# </weight>"]
                pub fn approve_proposal(
                    &self,
                    proposal_id: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<ApproveProposal> {
                    subxt::tx::StaticTxPayload::new(
                        "Treasury",
                        "approve_proposal",
                        ApproveProposal { proposal_id },
                        [
                            164u8, 229u8, 172u8, 98u8, 129u8, 62u8, 84u8, 128u8, 47u8, 108u8, 33u8,
                            120u8, 89u8, 79u8, 57u8, 121u8, 4u8, 197u8, 170u8, 153u8, 156u8, 17u8,
                            59u8, 164u8, 123u8, 227u8, 175u8, 195u8, 220u8, 160u8, 60u8, 186u8,
                        ],
                    )
                }
                #[doc = "Propose and approve a spend of treasury funds."]
                #[doc = ""]
                #[doc = "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`."]
                #[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
                #[doc = "- `beneficiary`: The destination account for the transfer."]
                #[doc = ""]
                #[doc = "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the"]
                #[doc = "beneficiary."]
                pub fn spend(
                    &self,
                    amount: ::core::primitive::u128,
                    beneficiary: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> subxt::tx::StaticTxPayload<Spend> {
                    subxt::tx::StaticTxPayload::new(
                        "Treasury",
                        "spend",
                        Spend {
                            amount,
                            beneficiary,
                        },
                        [
                            208u8, 79u8, 96u8, 218u8, 205u8, 209u8, 165u8, 119u8, 92u8, 208u8,
                            54u8, 168u8, 83u8, 190u8, 98u8, 97u8, 6u8, 2u8, 35u8, 249u8, 18u8,
                            88u8, 193u8, 51u8, 130u8, 33u8, 28u8, 99u8, 49u8, 194u8, 34u8, 77u8,
                        ],
                    )
                }
                #[doc = "Force a previously approved proposal to be removed from the approval queue."]
                #[doc = "The original deposit will no longer be returned."]
                #[doc = ""]
                #[doc = "May only be called from `T::RejectOrigin`."]
                #[doc = "- `proposal_id`: The index of a proposal"]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: O(A) where `A` is the number of approvals"]
                #[doc = "- Db reads and writes: `Approvals`"]
                #[doc = "# </weight>"]
                #[doc = ""]
                #[doc = "Errors:"]
                #[doc = "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,"]
                #[doc = "i.e., the proposal has not been approved. This could also mean the proposal does not"]
                #[doc = "exist altogether, thus there is no way it would have been approved in the first place."]
                pub fn remove_approval(
                    &self,
                    proposal_id: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<RemoveApproval> {
                    subxt::tx::StaticTxPayload::new(
                        "Treasury",
                        "remove_approval",
                        RemoveApproval { proposal_id },
                        [
                            133u8, 126u8, 181u8, 47u8, 196u8, 243u8, 7u8, 46u8, 25u8, 251u8, 154u8,
                            125u8, 217u8, 77u8, 54u8, 245u8, 240u8, 180u8, 97u8, 34u8, 186u8, 53u8,
                            225u8, 144u8, 155u8, 107u8, 172u8, 54u8, 250u8, 184u8, 178u8, 86u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_treasury::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "New proposal."]
            pub struct Proposed {
                pub proposal_index: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "We have ended a spend period and will now allocate funds."]
            pub struct Spending {
                pub budget_remaining: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Spending {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Spending";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Some funds have been allocated."]
            pub struct Awarded {
                pub proposal_index: ::core::primitive::u32,
                pub award: ::core::primitive::u128,
                pub account: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for Awarded {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Awarded";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A proposal was rejected; funds were slashed."]
            pub struct Rejected {
                pub proposal_index: ::core::primitive::u32,
                pub slashed: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Rejected {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Rejected";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "Some of our funds have been burnt."]
            pub struct Burnt {
                pub burnt_funds: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Burnt {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Burnt";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "Spending has finished; this is the amount that rolls over until next spend."]
            pub struct Rollover {
                pub rollover_balance: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Rollover {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Rollover";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "Some funds have been deposited."]
            pub struct Deposit {
                pub value: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A new spend proposal has been approved."]
            pub struct SpendApproved {
                pub proposal_index: ::core::primitive::u32,
                pub amount: ::core::primitive::u128,
                pub beneficiary: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for SpendApproved {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "SpendApproved";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Number of proposals that have been made."]
                pub fn proposal_count(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Treasury",
                        "ProposalCount",
                        vec![],
                        [
                            132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8, 172u8, 143u8, 33u8,
                            140u8, 99u8, 124u8, 208u8, 57u8, 232u8, 154u8, 110u8, 32u8, 142u8,
                            24u8, 149u8, 109u8, 105u8, 30u8, 83u8, 39u8, 177u8, 127u8, 160u8, 34u8,
                            70u8,
                        ],
                    )
                }
                #[doc = " Proposals that have been made."]
                pub fn proposals(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_treasury::Proposal<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Treasury",
                        "Proposals",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            62u8, 223u8, 55u8, 209u8, 151u8, 134u8, 122u8, 65u8, 207u8, 38u8,
                            113u8, 213u8, 237u8, 48u8, 129u8, 32u8, 91u8, 228u8, 108u8, 91u8, 37u8,
                            49u8, 94u8, 4u8, 75u8, 122u8, 25u8, 34u8, 198u8, 224u8, 246u8, 160u8,
                        ],
                    )
                }
                #[doc = " Proposals that have been made."]
                pub fn proposals_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_treasury::Proposal<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Treasury",
                        "Proposals",
                        Vec::new(),
                        [
                            62u8, 223u8, 55u8, 209u8, 151u8, 134u8, 122u8, 65u8, 207u8, 38u8,
                            113u8, 213u8, 237u8, 48u8, 129u8, 32u8, 91u8, 228u8, 108u8, 91u8, 37u8,
                            49u8, 94u8, 4u8, 75u8, 122u8, 25u8, 34u8, 198u8, 224u8, 246u8, 160u8,
                        ],
                    )
                }
                #[doc = " Proposal indices that have been approved but not yet awarded."]
                pub fn approvals(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            ::core::primitive::u32,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Treasury",
                        "Approvals",
                        vec![],
                        [
                            202u8, 106u8, 189u8, 40u8, 127u8, 172u8, 108u8, 50u8, 193u8, 4u8,
                            248u8, 226u8, 176u8, 101u8, 212u8, 222u8, 64u8, 206u8, 244u8, 175u8,
                            111u8, 106u8, 86u8, 96u8, 19u8, 109u8, 218u8, 152u8, 30u8, 59u8, 96u8,
                            1u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Fraction of a proposal's value that should be bonded in order to place the proposal."]
                #[doc = " An accepted proposal gets these back. A rejected proposal does not."]
                pub fn proposal_bond(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_arithmetic::per_things::Permill,
                    >,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Treasury",
                        "ProposalBond",
                        [
                            225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8, 192u8, 254u8, 19u8, 87u8,
                            80u8, 16u8, 62u8, 42u8, 204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
                            177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8, 86u8, 227u8,
                        ],
                    )
                }
                #[doc = " Minimum amount of funds that should be placed in a deposit for making a proposal."]
                pub fn proposal_bond_minimum(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Treasury",
                        "ProposalBondMinimum",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Maximum amount of funds that should be placed in a deposit for making a proposal."]
                pub fn proposal_bond_maximum(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<
                        ::core::option::Option<::core::primitive::u128>,
                    >,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Treasury",
                        "ProposalBondMaximum",
                        [
                            84u8, 154u8, 218u8, 83u8, 84u8, 189u8, 32u8, 20u8, 120u8, 194u8, 88u8,
                            205u8, 109u8, 216u8, 114u8, 193u8, 120u8, 198u8, 154u8, 237u8, 134u8,
                            204u8, 102u8, 247u8, 52u8, 103u8, 231u8, 43u8, 243u8, 122u8, 60u8,
                            216u8,
                        ],
                    )
                }
                #[doc = " Period between successive spends."]
                pub fn spend_period(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Treasury",
                        "SpendPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Percentage of spare funds (if any) that are burnt per spend period."]
                pub fn burn(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_arithmetic::per_things::Permill,
                    >,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Treasury",
                        "Burn",
                        [
                            225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8, 192u8, 254u8, 19u8, 87u8,
                            80u8, 16u8, 62u8, 42u8, 204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
                            177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8, 86u8, 227u8,
                        ],
                    )
                }
                #[doc = " The treasury's pallet id, used for deriving its sovereign account ID."]
                pub fn pallet_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::frame_support::PalletId>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Treasury",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
                            174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
                            9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
                        ],
                    )
                }
                #[doc = " The maximum number of approvals that can wait in the spending queue."]
                #[doc = ""]
                #[doc = " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."]
                pub fn max_approvals(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Treasury",
                        "MaxApprovals",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod democracy {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Propose {
                pub proposal_hash: subxt::ext::sp_core::H256,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Second {
                #[codec(compact)]
                pub proposal: ::core::primitive::u32,
                #[codec(compact)]
                pub seconds_upper_bound: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Vote {
                #[codec(compact)]
                pub ref_index: ::core::primitive::u32,
                pub vote:
                    runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct EmergencyCancel {
                pub ref_index: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ExternalPropose {
                pub proposal_hash: subxt::ext::sp_core::H256,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ExternalProposeMajority {
                pub proposal_hash: subxt::ext::sp_core::H256,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ExternalProposeDefault {
                pub proposal_hash: subxt::ext::sp_core::H256,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct FastTrack {
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub voting_period: ::core::primitive::u32,
                pub delay: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct VetoExternal {
                pub proposal_hash: subxt::ext::sp_core::H256,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct CancelReferendum {
                #[codec(compact)]
                pub ref_index: ::core::primitive::u32,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct CancelQueued {
                pub which: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Delegate {
                pub to: subxt::ext::sp_core::crypto::AccountId32,
                pub conviction: runtime_types::pallet_democracy::conviction::Conviction,
                pub balance: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Undelegate;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ClearPublicProposals;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct NotePreimage {
                pub encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct NotePreimageOperational {
                pub encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct NoteImminentPreimage {
                pub encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct NoteImminentPreimageOperational {
                pub encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ReapPreimage {
                pub proposal_hash: subxt::ext::sp_core::H256,
                #[codec(compact)]
                pub proposal_len_upper_bound: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Unlock {
                pub target: subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct RemoveVote {
                pub index: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RemoveOtherVote {
                pub target: subxt::ext::sp_core::crypto::AccountId32,
                pub index: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct EnactProposal {
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub index: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Blacklist {
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct CancelProposal {
                #[codec(compact)]
                pub prop_index: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Propose a sensitive action to be taken."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_ and the sender must"]
                #[doc = "have funds to cover the deposit."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The hash of the proposal preimage."]
                #[doc = "- `value`: The amount of deposit (must be at least `MinimumDeposit`)."]
                #[doc = ""]
                #[doc = "Emits `Proposed`."]
                #[doc = ""]
                #[doc = "Weight: `O(p)`"]
                pub fn propose(
                    &self,
                    proposal_hash: subxt::ext::sp_core::H256,
                    value: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<Propose> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "propose",
                        Propose {
                            proposal_hash,
                            value,
                        },
                        [
                            151u8, 2u8, 117u8, 57u8, 201u8, 246u8, 181u8, 198u8, 83u8, 74u8, 99u8,
                            211u8, 237u8, 53u8, 90u8, 173u8, 161u8, 250u8, 139u8, 253u8, 223u8,
                            251u8, 39u8, 108u8, 254u8, 192u8, 233u8, 23u8, 9u8, 99u8, 169u8, 195u8,
                        ],
                    )
                }
                #[doc = "Signals agreement with a particular proposal."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_ and the sender"]
                #[doc = "must have funds to cover the deposit, equal to the original deposit."]
                #[doc = ""]
                #[doc = "- `proposal`: The index of the proposal to second."]
                #[doc = "- `seconds_upper_bound`: an upper bound on the current number of seconds on this"]
                #[doc = "  proposal. Extrinsic is weighted according to this value with no refund."]
                #[doc = ""]
                #[doc = "Weight: `O(S)` where S is the number of seconds a proposal already has."]
                pub fn second(
                    &self,
                    proposal: ::core::primitive::u32,
                    seconds_upper_bound: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<Second> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "second",
                        Second {
                            proposal,
                            seconds_upper_bound,
                        },
                        [
                            152u8, 56u8, 134u8, 181u8, 88u8, 224u8, 68u8, 238u8, 231u8, 78u8,
                            237u8, 142u8, 133u8, 16u8, 93u8, 63u8, 253u8, 81u8, 96u8, 200u8, 43u8,
                            21u8, 249u8, 92u8, 78u8, 24u8, 101u8, 217u8, 143u8, 16u8, 213u8, 244u8,
                        ],
                    )
                }
                #[doc = "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;"]
                #[doc = "otherwise it is a vote to keep the status quo."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `ref_index`: The index of the referendum to vote for."]
                #[doc = "- `vote`: The vote configuration."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` where R is the number of referendums the voter has voted on."]
                pub fn vote(
                    &self,
                    ref_index: ::core::primitive::u32,
                    vote: runtime_types::pallet_democracy::vote::AccountVote<
                        ::core::primitive::u128,
                    >,
                ) -> subxt::tx::StaticTxPayload<Vote> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "vote",
                        Vote { ref_index, vote },
                        [
                            138u8, 213u8, 229u8, 111u8, 1u8, 191u8, 73u8, 3u8, 145u8, 28u8, 44u8,
                            88u8, 163u8, 188u8, 129u8, 188u8, 64u8, 15u8, 64u8, 103u8, 250u8, 97u8,
                            234u8, 188u8, 29u8, 205u8, 51u8, 6u8, 116u8, 58u8, 156u8, 201u8,
                        ],
                    )
                }
                #[doc = "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same"]
                #[doc = "referendum."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `CancellationOrigin`."]
                #[doc = ""]
                #[doc = "-`ref_index`: The index of the referendum to cancel."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`."]
                pub fn emergency_cancel(
                    &self,
                    ref_index: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<EmergencyCancel> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "emergency_cancel",
                        EmergencyCancel { ref_index },
                        [
                            139u8, 213u8, 133u8, 75u8, 34u8, 206u8, 124u8, 245u8, 35u8, 237u8,
                            132u8, 92u8, 49u8, 167u8, 117u8, 80u8, 188u8, 93u8, 198u8, 237u8,
                            132u8, 77u8, 195u8, 65u8, 29u8, 37u8, 86u8, 74u8, 214u8, 119u8, 71u8,
                            204u8,
                        ],
                    )
                }
                #[doc = "Schedule a referendum to be tabled once it is legal to schedule an external"]
                #[doc = "referendum."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `ExternalOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                #[doc = ""]
                #[doc = "Weight: `O(V)` with V number of vetoers in the blacklist of proposal."]
                #[doc = "  Decoding vec of length V. Charged as maximum"]
                pub fn external_propose(
                    &self,
                    proposal_hash: subxt::ext::sp_core::H256,
                ) -> subxt::tx::StaticTxPayload<ExternalPropose> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "external_propose",
                        ExternalPropose { proposal_hash },
                        [
                            8u8, 206u8, 229u8, 218u8, 203u8, 208u8, 253u8, 113u8, 43u8, 62u8,
                            110u8, 155u8, 123u8, 35u8, 187u8, 211u8, 180u8, 225u8, 41u8, 30u8,
                            204u8, 110u8, 202u8, 210u8, 143u8, 84u8, 117u8, 20u8, 215u8, 110u8,
                            211u8, 89u8,
                        ],
                    )
                }
                #[doc = "Schedule a majority-carries referendum to be tabled next once it is legal to schedule"]
                #[doc = "an external referendum."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `ExternalMajorityOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                #[doc = ""]
                #[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
                #[doc = "pre-scheduled `external_propose` call."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn external_propose_majority(
                    &self,
                    proposal_hash: subxt::ext::sp_core::H256,
                ) -> subxt::tx::StaticTxPayload<ExternalProposeMajority> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "external_propose_majority",
                        ExternalProposeMajority { proposal_hash },
                        [
                            36u8, 47u8, 192u8, 177u8, 164u8, 82u8, 109u8, 215u8, 98u8, 28u8, 47u8,
                            237u8, 159u8, 233u8, 53u8, 9u8, 158u8, 134u8, 232u8, 249u8, 55u8,
                            189u8, 48u8, 133u8, 201u8, 46u8, 237u8, 158u8, 181u8, 163u8, 166u8,
                            213u8,
                        ],
                    )
                }
                #[doc = "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to"]
                #[doc = "schedule an external referendum."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `ExternalDefaultOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                #[doc = ""]
                #[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
                #[doc = "pre-scheduled `external_propose` call."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn external_propose_default(
                    &self,
                    proposal_hash: subxt::ext::sp_core::H256,
                ) -> subxt::tx::StaticTxPayload<ExternalProposeDefault> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "external_propose_default",
                        ExternalProposeDefault { proposal_hash },
                        [
                            32u8, 100u8, 249u8, 175u8, 187u8, 77u8, 30u8, 65u8, 90u8, 103u8, 251u8,
                            21u8, 21u8, 220u8, 8u8, 118u8, 97u8, 160u8, 152u8, 122u8, 71u8, 140u8,
                            96u8, 8u8, 245u8, 74u8, 112u8, 164u8, 55u8, 130u8, 38u8, 14u8,
                        ],
                    )
                }
                #[doc = "Schedule the currently externally-proposed majority-carries referendum to be tabled"]
                #[doc = "immediately. If there is no externally-proposed referendum currently, or if there is one"]
                #[doc = "but it is not a majority-carries referendum then it fails."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `FastTrackOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The hash of the current external proposal."]
                #[doc = "- `voting_period`: The period that is allowed for voting on this proposal."]
                #[doc = "\tMust be always greater than zero."]
                #[doc = "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`."]
                #[doc = "- `delay`: The number of block after voting has ended in approval and this should be"]
                #[doc = "  enacted. This doesn't have a minimum amount."]
                #[doc = ""]
                #[doc = "Emits `Started`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn fast_track(
                    &self,
                    proposal_hash: subxt::ext::sp_core::H256,
                    voting_period: ::core::primitive::u32,
                    delay: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<FastTrack> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "fast_track",
                        FastTrack {
                            proposal_hash,
                            voting_period,
                            delay,
                        },
                        [
                            125u8, 209u8, 107u8, 120u8, 93u8, 205u8, 129u8, 147u8, 254u8, 126u8,
                            45u8, 126u8, 39u8, 0u8, 56u8, 14u8, 233u8, 49u8, 245u8, 220u8, 156u8,
                            10u8, 252u8, 31u8, 102u8, 90u8, 163u8, 236u8, 178u8, 85u8, 13u8, 24u8,
                        ],
                    )
                }
                #[doc = "Veto and blacklist the external proposal hash."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `VetoOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist."]
                #[doc = ""]
                #[doc = "Emits `Vetoed`."]
                #[doc = ""]
                #[doc = "Weight: `O(V + log(V))` where V is number of `existing vetoers`"]
                pub fn veto_external(
                    &self,
                    proposal_hash: subxt::ext::sp_core::H256,
                ) -> subxt::tx::StaticTxPayload<VetoExternal> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "veto_external",
                        VetoExternal { proposal_hash },
                        [
                            209u8, 18u8, 18u8, 103u8, 186u8, 160u8, 214u8, 124u8, 150u8, 207u8,
                            112u8, 90u8, 84u8, 197u8, 95u8, 157u8, 165u8, 65u8, 109u8, 101u8, 75u8,
                            201u8, 41u8, 149u8, 75u8, 154u8, 37u8, 178u8, 239u8, 121u8, 124u8,
                            23u8,
                        ],
                    )
                }
                #[doc = "Remove a referendum."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `ref_index`: The index of the referendum to cancel."]
                #[doc = ""]
                #[doc = "# Weight: `O(1)`."]
                pub fn cancel_referendum(
                    &self,
                    ref_index: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<CancelReferendum> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "cancel_referendum",
                        CancelReferendum { ref_index },
                        [
                            51u8, 25u8, 25u8, 251u8, 236u8, 115u8, 130u8, 230u8, 72u8, 186u8,
                            119u8, 71u8, 165u8, 137u8, 55u8, 167u8, 187u8, 128u8, 55u8, 8u8, 212u8,
                            139u8, 245u8, 232u8, 103u8, 136u8, 229u8, 113u8, 125u8, 36u8, 1u8,
                            149u8,
                        ],
                    )
                }
                #[doc = "Cancel a proposal queued for enactment."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `which`: The index of the referendum to cancel."]
                #[doc = ""]
                #[doc = "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."]
                pub fn cancel_queued(
                    &self,
                    which: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<CancelQueued> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "cancel_queued",
                        CancelQueued { which },
                        [
                            6u8, 97u8, 182u8, 142u8, 165u8, 206u8, 218u8, 245u8, 206u8, 224u8,
                            143u8, 164u8, 232u8, 129u8, 202u8, 141u8, 78u8, 65u8, 79u8, 206u8, 3u8,
                            195u8, 151u8, 36u8, 8u8, 220u8, 184u8, 239u8, 28u8, 187u8, 208u8,
                            174u8,
                        ],
                    )
                }
                #[doc = "Delegate the voting power (with some given conviction) of the sending account."]
                #[doc = ""]
                #[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
                #[doc = "time appropriate for the conviction's lock period."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
                #[doc = "  - be delegating already; or"]
                #[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
                #[doc = "    through `reap_vote` or `unvote`)."]
                #[doc = ""]
                #[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
                #[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
                #[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
                #[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
                #[doc = "  be more than the account's current balance."]
                #[doc = ""]
                #[doc = "Emits `Delegated`."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
                #[doc = "  voted on. Weight is charged as if maximum votes."]
                pub fn delegate(
                    &self,
                    to: subxt::ext::sp_core::crypto::AccountId32,
                    conviction: runtime_types::pallet_democracy::conviction::Conviction,
                    balance: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<Delegate> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "delegate",
                        Delegate {
                            to,
                            conviction,
                            balance,
                        },
                        [
                            190u8, 241u8, 243u8, 105u8, 114u8, 112u8, 169u8, 52u8, 119u8, 174u8,
                            61u8, 72u8, 165u8, 161u8, 192u8, 234u8, 32u8, 144u8, 89u8, 214u8,
                            178u8, 227u8, 251u8, 198u8, 129u8, 21u8, 244u8, 183u8, 135u8, 33u8,
                            1u8, 224u8,
                        ],
                    )
                }
                #[doc = "Undelegate the voting power of the sending account."]
                #[doc = ""]
                #[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
                #[doc = "of the conviction with which the delegation was issued."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
                #[doc = "currently delegating."]
                #[doc = ""]
                #[doc = "Emits `Undelegated`."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
                #[doc = "  voted on. Weight is charged as if maximum votes."]
                pub fn undelegate(&self) -> subxt::tx::StaticTxPayload<Undelegate> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "undelegate",
                        Undelegate {},
                        [
                            165u8, 40u8, 183u8, 209u8, 57u8, 153u8, 111u8, 29u8, 114u8, 109u8,
                            107u8, 235u8, 97u8, 61u8, 53u8, 155u8, 44u8, 245u8, 28u8, 220u8, 56u8,
                            134u8, 43u8, 122u8, 248u8, 156u8, 191u8, 154u8, 4u8, 121u8, 152u8,
                            153u8,
                        ],
                    )
                }
                #[doc = "Clears all public proposals."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Root_."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`."]
                pub fn clear_public_proposals(
                    &self,
                ) -> subxt::tx::StaticTxPayload<ClearPublicProposals> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "clear_public_proposals",
                        ClearPublicProposals {},
                        [
                            59u8, 126u8, 254u8, 223u8, 252u8, 225u8, 75u8, 185u8, 188u8, 181u8,
                            42u8, 179u8, 211u8, 73u8, 12u8, 141u8, 243u8, 197u8, 46u8, 130u8,
                            215u8, 196u8, 225u8, 88u8, 48u8, 199u8, 231u8, 249u8, 195u8, 53u8,
                            184u8, 204u8,
                        ],
                    )
                }
                #[doc = "Register the preimage for an upcoming proposal. This doesn't require the proposal to be"]
                #[doc = "in the dispatch queue but does require a deposit, returned once enacted."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `encoded_proposal`: The preimage of a proposal."]
                #[doc = ""]
                #[doc = "Emits `PreimageNoted`."]
                #[doc = ""]
                #[doc = "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."]
                pub fn note_preimage(
                    &self,
                    encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
                ) -> subxt::tx::StaticTxPayload<NotePreimage> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "note_preimage",
                        NotePreimage { encoded_proposal },
                        [
                            31u8, 252u8, 248u8, 238u8, 103u8, 1u8, 82u8, 84u8, 135u8, 152u8, 246u8,
                            234u8, 251u8, 124u8, 193u8, 73u8, 52u8, 255u8, 88u8, 31u8, 112u8, 99u8,
                            191u8, 245u8, 251u8, 202u8, 51u8, 130u8, 136u8, 114u8, 177u8, 241u8,
                        ],
                    )
                }
                #[doc = "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."]
                pub fn note_preimage_operational(
                    &self,
                    encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
                ) -> subxt::tx::StaticTxPayload<NotePreimageOperational> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "note_preimage_operational",
                        NotePreimageOperational { encoded_proposal },
                        [
                            184u8, 81u8, 31u8, 172u8, 81u8, 113u8, 84u8, 246u8, 189u8, 219u8,
                            167u8, 32u8, 191u8, 126u8, 165u8, 250u8, 147u8, 199u8, 241u8, 196u8,
                            253u8, 34u8, 51u8, 158u8, 2u8, 157u8, 16u8, 122u8, 210u8, 66u8, 110u8,
                            234u8,
                        ],
                    )
                }
                #[doc = "Register the preimage for an upcoming proposal. This requires the proposal to be"]
                #[doc = "in the dispatch queue. No deposit is needed. When this call is successful, i.e."]
                #[doc = "the preimage has not been uploaded before and matches some imminent proposal,"]
                #[doc = "no fee is paid."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `encoded_proposal`: The preimage of a proposal."]
                #[doc = ""]
                #[doc = "Emits `PreimageNoted`."]
                #[doc = ""]
                #[doc = "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."]
                pub fn note_imminent_preimage(
                    &self,
                    encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
                ) -> subxt::tx::StaticTxPayload<NoteImminentPreimage> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "note_imminent_preimage",
                        NoteImminentPreimage { encoded_proposal },
                        [
                            32u8, 188u8, 10u8, 215u8, 245u8, 132u8, 234u8, 124u8, 19u8, 90u8,
                            225u8, 216u8, 169u8, 105u8, 95u8, 231u8, 12u8, 109u8, 16u8, 91u8,
                            153u8, 134u8, 240u8, 82u8, 80u8, 254u8, 117u8, 230u8, 88u8, 203u8,
                            68u8, 42u8,
                        ],
                    )
                }
                #[doc = "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."]
                pub fn note_imminent_preimage_operational(
                    &self,
                    encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
                ) -> subxt::tx::StaticTxPayload<NoteImminentPreimageOperational> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "note_imminent_preimage_operational",
                        NoteImminentPreimageOperational { encoded_proposal },
                        [
                            7u8, 31u8, 49u8, 238u8, 155u8, 234u8, 187u8, 147u8, 123u8, 84u8, 50u8,
                            98u8, 221u8, 39u8, 218u8, 204u8, 175u8, 136u8, 44u8, 93u8, 140u8,
                            172u8, 73u8, 98u8, 168u8, 110u8, 31u8, 82u8, 22u8, 1u8, 205u8, 84u8,
                        ],
                    )
                }
                #[doc = "Remove an expired proposal preimage and collect the deposit."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of a proposal."]
                #[doc = "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is"]
                #[doc = "  weighted according to this value with no refund."]
                #[doc = ""]
                #[doc = "This will only work after `VotingPeriod` blocks from the time that the preimage was"]
                #[doc = "noted, if it's the same account doing it. If it's a different account, then it'll only"]
                #[doc = "work an additional `EnactmentPeriod` later."]
                #[doc = ""]
                #[doc = "Emits `PreimageReaped`."]
                #[doc = ""]
                #[doc = "Weight: `O(D)` where D is length of proposal."]
                pub fn reap_preimage(
                    &self,
                    proposal_hash: subxt::ext::sp_core::H256,
                    proposal_len_upper_bound: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<ReapPreimage> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "reap_preimage",
                        ReapPreimage {
                            proposal_hash,
                            proposal_len_upper_bound,
                        },
                        [
                            135u8, 43u8, 115u8, 154u8, 93u8, 121u8, 112u8, 65u8, 145u8, 141u8,
                            236u8, 252u8, 203u8, 155u8, 63u8, 130u8, 120u8, 221u8, 13u8, 105u8,
                            81u8, 179u8, 167u8, 254u8, 213u8, 117u8, 146u8, 232u8, 18u8, 104u8,
                            196u8, 112u8,
                        ],
                    )
                }
                #[doc = "Unlock tokens that have an expired lock."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `target`: The account to remove the lock on."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` with R number of vote of target."]
                pub fn unlock(
                    &self,
                    target: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<Unlock> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "unlock",
                        Unlock { target },
                        [
                            137u8, 93u8, 240u8, 75u8, 142u8, 148u8, 51u8, 55u8, 88u8, 159u8, 2u8,
                            57u8, 24u8, 169u8, 120u8, 121u8, 115u8, 53u8, 225u8, 176u8, 67u8,
                            156u8, 20u8, 132u8, 39u8, 54u8, 125u8, 203u8, 199u8, 85u8, 60u8, 211u8,
                        ],
                    )
                }
                #[doc = "Remove a vote for a referendum."]
                #[doc = ""]
                #[doc = "If:"]
                #[doc = "- the referendum was cancelled, or"]
                #[doc = "- the referendum is ongoing, or"]
                #[doc = "- the referendum has ended such that"]
                #[doc = "  - the vote of the account was in opposition to the result; or"]
                #[doc = "  - there was no conviction to the account's vote; or"]
                #[doc = "  - the account made a split vote"]
                #[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
                #[doc = "funds being available."]
                #[doc = ""]
                #[doc = "If, however, the referendum has ended and:"]
                #[doc = "- it finished corresponding to the vote of the account, and"]
                #[doc = "- the account made a standard vote with conviction, and"]
                #[doc = "- the lock period of the conviction is not over"]
                #[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
                #[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
                #[doc = "of both the amount locked and the time is it locked for)."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
                #[doc = "registered for referendum `index`."]
                #[doc = ""]
                #[doc = "- `index`: The index of referendum of the vote to be removed."]
                #[doc = ""]
                #[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
                #[doc = "  Weight is calculated for the maximum number of vote."]
                pub fn remove_vote(
                    &self,
                    index: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<RemoveVote> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "remove_vote",
                        RemoveVote { index },
                        [
                            148u8, 120u8, 14u8, 172u8, 81u8, 152u8, 159u8, 178u8, 106u8, 244u8,
                            36u8, 98u8, 120u8, 189u8, 213u8, 93u8, 119u8, 156u8, 112u8, 34u8,
                            241u8, 72u8, 206u8, 113u8, 212u8, 161u8, 164u8, 126u8, 122u8, 82u8,
                            160u8, 74u8,
                        ],
                    )
                }
                #[doc = "Remove a vote for a referendum."]
                #[doc = ""]
                #[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
                #[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
                #[doc = "either because the referendum was cancelled, because the voter lost the referendum or"]
                #[doc = "because the conviction period is over."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `target`: The account of the vote to be removed; this account must have voted for"]
                #[doc = "  referendum `index`."]
                #[doc = "- `index`: The index of referendum of the vote to be removed."]
                #[doc = ""]
                #[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
                #[doc = "  Weight is calculated for the maximum number of vote."]
                pub fn remove_other_vote(
                    &self,
                    target: subxt::ext::sp_core::crypto::AccountId32,
                    index: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<RemoveOtherVote> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "remove_other_vote",
                        RemoveOtherVote { target, index },
                        [
                            137u8, 59u8, 51u8, 72u8, 97u8, 181u8, 74u8, 123u8, 65u8, 147u8, 63u8,
                            23u8, 14u8, 6u8, 66u8, 186u8, 105u8, 72u8, 112u8, 120u8, 51u8, 229u8,
                            247u8, 96u8, 218u8, 137u8, 220u8, 65u8, 95u8, 109u8, 253u8, 45u8,
                        ],
                    )
                }
                #[doc = "Enact a proposal from a referendum. For now we just make the weight be the maximum."]
                pub fn enact_proposal(
                    &self,
                    proposal_hash: subxt::ext::sp_core::H256,
                    index: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<EnactProposal> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "enact_proposal",
                        EnactProposal {
                            proposal_hash,
                            index,
                        },
                        [
                            191u8, 244u8, 244u8, 174u8, 95u8, 86u8, 132u8, 63u8, 2u8, 94u8, 3u8,
                            117u8, 96u8, 54u8, 100u8, 89u8, 124u8, 117u8, 205u8, 142u8, 214u8,
                            192u8, 137u8, 141u8, 178u8, 145u8, 241u8, 167u8, 163u8, 76u8, 61u8,
                            31u8,
                        ],
                    )
                }
                #[doc = "Permanently place a proposal into the blacklist. This prevents it from ever being"]
                #[doc = "proposed again."]
                #[doc = ""]
                #[doc = "If called on a queued public or external proposal, then this will result in it being"]
                #[doc = "removed. If the `ref_index` supplied is an active referendum with the proposal hash,"]
                #[doc = "then it will be cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `BlacklistOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The proposal hash to blacklist permanently."]
                #[doc = "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be"]
                #[doc = "cancelled."]
                #[doc = ""]
                #[doc = "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a"]
                #[doc = "  reasonable value)."]
                pub fn blacklist(
                    &self,
                    proposal_hash: subxt::ext::sp_core::H256,
                    maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
                ) -> subxt::tx::StaticTxPayload<Blacklist> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "blacklist",
                        Blacklist {
                            proposal_hash,
                            maybe_ref_index,
                        },
                        [
                            48u8, 144u8, 81u8, 164u8, 54u8, 111u8, 197u8, 134u8, 6u8, 98u8, 121u8,
                            179u8, 254u8, 191u8, 204u8, 212u8, 84u8, 255u8, 86u8, 110u8, 225u8,
                            130u8, 26u8, 65u8, 133u8, 56u8, 231u8, 15u8, 245u8, 137u8, 146u8,
                            242u8,
                        ],
                    )
                }
                #[doc = "Remove a proposal."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `CancelProposalOrigin`."]
                #[doc = ""]
                #[doc = "- `prop_index`: The index of the proposal to cancel."]
                #[doc = ""]
                #[doc = "Weight: `O(p)` where `p = PublicProps::<T, I>::decode_len()`"]
                pub fn cancel_proposal(
                    &self,
                    prop_index: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<CancelProposal> {
                    subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "cancel_proposal",
                        CancelProposal { prop_index },
                        [
                            179u8, 3u8, 198u8, 244u8, 241u8, 124u8, 205u8, 58u8, 100u8, 80u8,
                            177u8, 254u8, 98u8, 220u8, 189u8, 63u8, 229u8, 60u8, 157u8, 83u8,
                            142u8, 6u8, 236u8, 183u8, 193u8, 235u8, 253u8, 126u8, 153u8, 185u8,
                            74u8, 117u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_democracy::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A motion has been proposed by a public account."]
            pub struct Proposed {
                pub proposal_index: ::core::primitive::u32,
                pub deposit: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A public proposal has been tabled for referendum vote."]
            pub struct Tabled {
                pub proposal_index: ::core::primitive::u32,
                pub deposit: ::core::primitive::u128,
                pub depositors: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
            }
            impl subxt::events::StaticEvent for Tabled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Tabled";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An external proposal has been tabled."]
            pub struct ExternalTabled;
            impl subxt::events::StaticEvent for ExternalTabled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "ExternalTabled";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A referendum has begun."]
            pub struct Started {
                pub ref_index: ::core::primitive::u32,
                pub threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
            }
            impl subxt::events::StaticEvent for Started {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Started";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "A proposal has been approved by referendum."]
            pub struct Passed {
                pub ref_index: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for Passed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Passed";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "A proposal has been rejected by referendum."]
            pub struct NotPassed {
                pub ref_index: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for NotPassed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "NotPassed";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "A referendum has been cancelled."]
            pub struct Cancelled {
                pub ref_index: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for Cancelled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Cancelled";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A proposal has been enacted."]
            pub struct Executed {
                pub ref_index: ::core::primitive::u32,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Executed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An account has delegated their vote to another account."]
            pub struct Delegated {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub target: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for Delegated {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Delegated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An account has cancelled a previous delegation operation."]
            pub struct Undelegated {
                pub account: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for Undelegated {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Undelegated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An external proposal has been vetoed."]
            pub struct Vetoed {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub until: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for Vetoed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Vetoed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A proposal's preimage was noted, and the deposit taken."]
            pub struct PreimageNoted {
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for PreimageNoted {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "PreimageNoted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A proposal preimage was removed and used (the deposit was returned)."]
            pub struct PreimageUsed {
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub provider: subxt::ext::sp_core::crypto::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for PreimageUsed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "PreimageUsed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A proposal could not be executed because its preimage was invalid."]
            pub struct PreimageInvalid {
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub ref_index: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for PreimageInvalid {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "PreimageInvalid";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A proposal could not be executed because its preimage was missing."]
            pub struct PreimageMissing {
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub ref_index: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for PreimageMissing {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "PreimageMissing";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A registered preimage was removed and the deposit collected by the reaper."]
            pub struct PreimageReaped {
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub provider: subxt::ext::sp_core::crypto::AccountId32,
                pub deposit: ::core::primitive::u128,
                pub reaper: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for PreimageReaped {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "PreimageReaped";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A proposal_hash has been blacklisted permanently."]
            pub struct Blacklisted {
                pub proposal_hash: subxt::ext::sp_core::H256,
            }
            impl subxt::events::StaticEvent for Blacklisted {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Blacklisted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An account has voted in a referendum"]
            pub struct Voted {
                pub voter: subxt::ext::sp_core::crypto::AccountId32,
                pub ref_index: ::core::primitive::u32,
                pub vote:
                    runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>,
            }
            impl subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Voted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An account has secconded a proposal"]
            pub struct Seconded {
                pub seconder: subxt::ext::sp_core::crypto::AccountId32,
                pub prop_index: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for Seconded {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Seconded";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "A proposal got canceled."]
            pub struct ProposalCanceled {
                pub prop_index: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for ProposalCanceled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "ProposalCanceled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The number of (public) proposals that have been made so far."]
                pub fn public_prop_count(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "PublicPropCount",
                        vec![],
                        [
                            91u8, 14u8, 171u8, 94u8, 37u8, 157u8, 46u8, 157u8, 254u8, 13u8, 68u8,
                            144u8, 23u8, 146u8, 128u8, 159u8, 9u8, 174u8, 74u8, 174u8, 218u8,
                            197u8, 23u8, 235u8, 152u8, 226u8, 216u8, 4u8, 120u8, 121u8, 27u8,
                            138u8,
                        ],
                    )
                }
                #[doc = " The public proposals. Unsorted. The second item is the proposal's hash."]
                pub fn public_props(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<(
                            ::core::primitive::u32,
                            subxt::ext::sp_core::H256,
                            subxt::ext::sp_core::crypto::AccountId32,
                        )>,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "PublicProps",
                        vec![],
                        [
                            151u8, 247u8, 196u8, 97u8, 171u8, 230u8, 55u8, 45u8, 220u8, 16u8, 12u8,
                            28u8, 22u8, 58u8, 127u8, 179u8, 130u8, 192u8, 115u8, 165u8, 5u8, 173u8,
                            87u8, 104u8, 7u8, 186u8, 114u8, 47u8, 162u8, 182u8, 252u8, 154u8,
                        ],
                    )
                }
                #[doc = " Those who have locked a deposit."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: Safe, as increasing integer keys are safe."]
                pub fn deposit_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                        ::core::primitive::u128,
                    )>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "DepositOf",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            153u8, 236u8, 152u8, 224u8, 221u8, 90u8, 204u8, 183u8, 222u8, 160u8,
                            227u8, 26u8, 8u8, 110u8, 230u8, 102u8, 133u8, 186u8, 66u8, 2u8, 84u8,
                            31u8, 236u8, 228u8, 202u8, 75u8, 17u8, 97u8, 133u8, 232u8, 64u8, 7u8,
                        ],
                    )
                }
                #[doc = " Those who have locked a deposit."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: Safe, as increasing integer keys are safe."]
                pub fn deposit_of_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                        ::core::primitive::u128,
                    )>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "DepositOf",
                        Vec::new(),
                        [
                            153u8, 236u8, 152u8, 224u8, 221u8, 90u8, 204u8, 183u8, 222u8, 160u8,
                            227u8, 26u8, 8u8, 110u8, 230u8, 102u8, 133u8, 186u8, 66u8, 2u8, 84u8,
                            31u8, 236u8, 228u8, 202u8, 75u8, 17u8, 97u8, 133u8, 232u8, 64u8, 7u8,
                        ],
                    )
                }
                #[doc = " Map of hashes to the proposal preimage, along with who registered it and their deposit."]
                #[doc = " The block number is the block at which it was deposited."]
                pub fn preimages(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::H256>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_democracy::PreimageStatus<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "Preimages",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            206u8, 131u8, 7u8, 129u8, 172u8, 231u8, 164u8, 220u8, 129u8, 0u8,
                            204u8, 227u8, 231u8, 244u8, 61u8, 145u8, 144u8, 146u8, 173u8, 215u8,
                            174u8, 218u8, 192u8, 83u8, 174u8, 99u8, 87u8, 102u8, 98u8, 235u8,
                            138u8, 127u8,
                        ],
                    )
                }
                #[doc = " Map of hashes to the proposal preimage, along with who registered it and their deposit."]
                #[doc = " The block number is the block at which it was deposited."]
                pub fn preimages_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_democracy::PreimageStatus<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "Preimages",
                        Vec::new(),
                        [
                            206u8, 131u8, 7u8, 129u8, 172u8, 231u8, 164u8, 220u8, 129u8, 0u8,
                            204u8, 227u8, 231u8, 244u8, 61u8, 145u8, 144u8, 146u8, 173u8, 215u8,
                            174u8, 218u8, 192u8, 83u8, 174u8, 99u8, 87u8, 102u8, 98u8, 235u8,
                            138u8, 127u8,
                        ],
                    )
                }
                #[doc = " The next free referendum index, aka the number of referenda started so far."]
                pub fn referendum_count(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "ReferendumCount",
                        vec![],
                        [
                            153u8, 210u8, 106u8, 244u8, 156u8, 70u8, 124u8, 251u8, 123u8, 75u8,
                            7u8, 189u8, 199u8, 145u8, 95u8, 119u8, 137u8, 11u8, 240u8, 160u8,
                            151u8, 248u8, 229u8, 231u8, 89u8, 222u8, 18u8, 237u8, 144u8, 78u8,
                            99u8, 58u8,
                        ],
                    )
                }
                #[doc = " The lowest referendum index representing an unbaked referendum. Equal to"]
                #[doc = " `ReferendumCount` if there isn't a unbaked referendum."]
                pub fn lowest_unbaked(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "LowestUnbaked",
                        vec![],
                        [
                            4u8, 51u8, 108u8, 11u8, 48u8, 165u8, 19u8, 251u8, 182u8, 76u8, 163u8,
                            73u8, 227u8, 2u8, 212u8, 74u8, 128u8, 27u8, 165u8, 164u8, 111u8, 22u8,
                            209u8, 190u8, 103u8, 7u8, 116u8, 16u8, 160u8, 144u8, 123u8, 64u8,
                        ],
                    )
                }
                #[doc = " Information concerning any given referendum."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]
                pub fn referendum_info_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_democracy::types::ReferendumInfo<
                            ::core::primitive::u32,
                            subxt::ext::sp_core::H256,
                            ::core::primitive::u128,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "ReferendumInfoOf",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            132u8, 4u8, 108u8, 126u8, 91u8, 168u8, 18u8, 17u8, 86u8, 79u8, 219u8,
                            222u8, 195u8, 137u8, 149u8, 177u8, 101u8, 134u8, 130u8, 41u8, 217u8,
                            109u8, 18u8, 18u8, 33u8, 206u8, 117u8, 131u8, 98u8, 26u8, 51u8, 8u8,
                        ],
                    )
                }
                #[doc = " Information concerning any given referendum."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]
                pub fn referendum_info_of_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_democracy::types::ReferendumInfo<
                            ::core::primitive::u32,
                            subxt::ext::sp_core::H256,
                            ::core::primitive::u128,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "ReferendumInfoOf",
                        Vec::new(),
                        [
                            132u8, 4u8, 108u8, 126u8, 91u8, 168u8, 18u8, 17u8, 86u8, 79u8, 219u8,
                            222u8, 195u8, 137u8, 149u8, 177u8, 101u8, 134u8, 130u8, 41u8, 217u8,
                            109u8, 18u8, 18u8, 33u8, 206u8, 117u8, 131u8, 98u8, 26u8, 51u8, 8u8,
                        ],
                    )
                }
                #[doc = " All votes for a particular voter. We store the balance for the number of votes that we"]
                #[doc = " have recorded. The second item is the total amount of delegations, that will be added."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]
                pub fn voting_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_democracy::vote::Voting<
                            ::core::primitive::u128,
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "VotingOf",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            211u8, 38u8, 232u8, 65u8, 215u8, 97u8, 157u8, 208u8, 177u8, 150u8,
                            250u8, 226u8, 72u8, 185u8, 187u8, 162u8, 80u8, 67u8, 195u8, 87u8,
                            190u8, 180u8, 167u8, 137u8, 253u8, 142u8, 34u8, 158u8, 249u8, 168u8,
                            209u8, 18u8,
                        ],
                    )
                }
                #[doc = " All votes for a particular voter. We store the balance for the number of votes that we"]
                #[doc = " have recorded. The second item is the total amount of delegations, that will be added."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]
                pub fn voting_of_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_democracy::vote::Voting<
                            ::core::primitive::u128,
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "VotingOf",
                        Vec::new(),
                        [
                            211u8, 38u8, 232u8, 65u8, 215u8, 97u8, 157u8, 208u8, 177u8, 150u8,
                            250u8, 226u8, 72u8, 185u8, 187u8, 162u8, 80u8, 67u8, 195u8, 87u8,
                            190u8, 180u8, 167u8, 137u8, 253u8, 142u8, 34u8, 158u8, 249u8, 168u8,
                            209u8, 18u8,
                        ],
                    )
                }
                #[doc = " True if the last referendum tabled was submitted externally. False if it was a public"]
                #[doc = " proposal."]
                pub fn last_tabled_was_external(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::bool>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "LastTabledWasExternal",
                        vec![],
                        [
                            3u8, 67u8, 106u8, 1u8, 89u8, 204u8, 4u8, 145u8, 121u8, 44u8, 34u8,
                            76u8, 18u8, 206u8, 65u8, 214u8, 222u8, 82u8, 31u8, 223u8, 144u8, 169u8,
                            17u8, 6u8, 138u8, 36u8, 113u8, 155u8, 241u8, 106u8, 189u8, 218u8,
                        ],
                    )
                }
                #[doc = " The referendum to be tabled whenever it would be valid to table an external proposal."]
                #[doc = " This happens when a referendum needs to be tabled and one of two conditions are met:"]
                #[doc = " - `LastTabledWasExternal` is `false`; or"]
                #[doc = " - `PublicProps` is empty."]
                pub fn next_external(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        subxt::ext::sp_core::H256,
                        runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
                    )>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "NextExternal",
                        vec![],
                        [
                            123u8, 49u8, 252u8, 184u8, 75u8, 204u8, 16u8, 130u8, 43u8, 109u8, 62u8,
                            113u8, 95u8, 0u8, 20u8, 163u8, 186u8, 210u8, 253u8, 33u8, 58u8, 121u8,
                            36u8, 80u8, 9u8, 242u8, 180u8, 230u8, 167u8, 250u8, 32u8, 180u8,
                        ],
                    )
                }
                #[doc = " A record of who vetoed what. Maps proposal hash to a possible existent block number"]
                #[doc = " (until when it may not be resubmitted) and who vetoed it."]
                pub fn blacklist(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::H256>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        ::core::primitive::u32,
                        ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                    )>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "Blacklist",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            93u8, 165u8, 219u8, 135u8, 41u8, 114u8, 144u8, 133u8, 171u8, 83u8,
                            153u8, 157u8, 79u8, 14u8, 170u8, 29u8, 179u8, 23u8, 222u8, 124u8,
                            237u8, 253u8, 122u8, 21u8, 186u8, 209u8, 184u8, 89u8, 197u8, 5u8,
                            178u8, 255u8,
                        ],
                    )
                }
                #[doc = " A record of who vetoed what. Maps proposal hash to a possible existent block number"]
                #[doc = " (until when it may not be resubmitted) and who vetoed it."]
                pub fn blacklist_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        ::core::primitive::u32,
                        ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                    )>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "Blacklist",
                        Vec::new(),
                        [
                            93u8, 165u8, 219u8, 135u8, 41u8, 114u8, 144u8, 133u8, 171u8, 83u8,
                            153u8, 157u8, 79u8, 14u8, 170u8, 29u8, 179u8, 23u8, 222u8, 124u8,
                            237u8, 253u8, 122u8, 21u8, 186u8, 209u8, 184u8, 89u8, 197u8, 5u8,
                            178u8, 255u8,
                        ],
                    )
                }
                #[doc = " Record of all proposals that have been subject to emergency cancellation."]
                pub fn cancellations(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::H256>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::bool>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "Cancellations",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            154u8, 36u8, 172u8, 46u8, 65u8, 218u8, 30u8, 151u8, 173u8, 186u8,
                            166u8, 79u8, 35u8, 226u8, 94u8, 200u8, 67u8, 44u8, 47u8, 7u8, 17u8,
                            89u8, 169u8, 166u8, 236u8, 101u8, 68u8, 54u8, 114u8, 141u8, 177u8,
                            135u8,
                        ],
                    )
                }
                #[doc = " Record of all proposals that have been subject to emergency cancellation."]
                pub fn cancellations_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::bool>,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "Cancellations",
                        Vec::new(),
                        [
                            154u8, 36u8, 172u8, 46u8, 65u8, 218u8, 30u8, 151u8, 173u8, 186u8,
                            166u8, 79u8, 35u8, 226u8, 94u8, 200u8, 67u8, 44u8, 47u8, 7u8, 17u8,
                            89u8, 169u8, 166u8, 236u8, 101u8, 68u8, 54u8, 114u8, 141u8, 177u8,
                            135u8,
                        ],
                    )
                }
                #[doc = " Storage version of the pallet."]
                #[doc = ""]
                #[doc = " New networks start with last version."]
                pub fn storage_version(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::pallet_democracy::Releases>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "StorageVersion",
                        vec![],
                        [
                            39u8, 219u8, 134u8, 64u8, 250u8, 96u8, 95u8, 156u8, 100u8, 236u8, 18u8,
                            78u8, 59u8, 146u8, 5u8, 245u8, 113u8, 125u8, 220u8, 140u8, 125u8, 5u8,
                            194u8, 134u8, 248u8, 95u8, 250u8, 108u8, 142u8, 230u8, 21u8, 120u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The period between a proposal being approved and enacted."]
                #[doc = ""]
                #[doc = " It should generally be a little more than the unstake period to ensure that"]
                #[doc = " voting stakers have an opportunity to remove themselves from the system in the case"]
                #[doc = " where they are on the losing side of a vote."]
                pub fn enactment_period(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "EnactmentPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " How often (in blocks) new public referenda are launched."]
                pub fn launch_period(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "LaunchPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " How often (in blocks) to check for new votes."]
                pub fn voting_period(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "VotingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The minimum period of vote locking."]
                #[doc = ""]
                #[doc = " It should be no shorter than enactment period to ensure that in the case of an approval,"]
                #[doc = " those successful voters are locked into the consequences that their votes entail."]
                pub fn vote_locking_period(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "VoteLockingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The minimum amount to be used as a deposit for a public referendum proposal."]
                pub fn minimum_deposit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "MinimumDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Indicator for whether an emergency origin is even allowed to happen. Some chains may"]
                #[doc = " want to set this permanently to `false`, others may want to condition it on things such"]
                #[doc = " as an upgrade having happened recently."]
                pub fn instant_allowed(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::bool>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "InstantAllowed",
                        [
                            165u8, 28u8, 112u8, 190u8, 18u8, 129u8, 182u8, 206u8, 237u8, 1u8, 68u8,
                            252u8, 125u8, 234u8, 185u8, 50u8, 149u8, 164u8, 47u8, 126u8, 134u8,
                            100u8, 14u8, 86u8, 209u8, 39u8, 20u8, 4u8, 233u8, 115u8, 102u8, 131u8,
                        ],
                    )
                }
                #[doc = " Minimum voting period allowed for a fast-track referendum."]
                pub fn fast_track_voting_period(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "FastTrackVotingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Period in blocks where an external proposal may not be re-submitted after being vetoed."]
                pub fn cooloff_period(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "CooloffPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The amount of balance that must be deposited per byte of preimage stored."]
                pub fn preimage_byte_deposit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "PreimageByteDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum number of votes for an account."]
                #[doc = ""]
                #[doc = " Also used to compute weight, an overly big value can"]
                #[doc = " lead to extrinsic with very big weight: see `delegate` for instance."]
                pub fn max_votes(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "MaxVotes",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of public proposals that can exist at any time."]
                pub fn max_proposals(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "MaxProposals",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Runtime unique identifier for locking currency."]
                #[doc = " May be equivalent to PalletId."]
                pub fn democracy_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<[::core::primitive::u8; 8usize]>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "DemocracyId",
                        [
                            224u8, 197u8, 247u8, 125u8, 62u8, 180u8, 69u8, 91u8, 226u8, 36u8, 82u8,
                            148u8, 70u8, 147u8, 209u8, 40u8, 210u8, 229u8, 181u8, 191u8, 170u8,
                            205u8, 138u8, 97u8, 127u8, 59u8, 124u8, 244u8, 252u8, 30u8, 213u8,
                            179u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod technical_committee {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetMembers {
                pub new_members: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                pub prime: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
                pub old_count: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Execute {
                pub proposal: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
                #[codec(compact)]
                pub length_bound: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Propose {
                #[codec(compact)]
                pub threshold: ::core::primitive::u32,
                pub proposal: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
                #[codec(compact)]
                pub length_bound: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Vote {
                pub proposal: subxt::ext::sp_core::H256,
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                pub approve: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Close {
                pub proposal_hash: subxt::ext::sp_core::H256,
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                #[codec(compact)]
                pub proposal_weight_bound: ::core::primitive::u64,
                #[codec(compact)]
                pub length_bound: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct DisapproveProposal {
                pub proposal_hash: subxt::ext::sp_core::H256,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the collective's membership."]
                #[doc = ""]
                #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                #[doc = "- `prime`: The prime member whose vote sets the default."]
                #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                #[doc = "  weight estimation."]
                #[doc = ""]
                #[doc = "Requires root origin."]
                #[doc = ""]
                #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                #[doc = ""]
                #[doc = "# WARNING:"]
                #[doc = ""]
                #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                #[doc = "implementation of the trait [`ChangeMembers`]."]
                #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                #[doc = "with other logic managing the member set."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "## Weight"]
                #[doc = "- `O(MP + N)` where:"]
                #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                #[doc = "  - `P` proposals-count (code-bounded)"]
                #[doc = "- DB:"]
                #[doc = "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the"]
                #[doc = "    members"]
                #[doc = "  - 1 storage read (codec `O(P)`) for reading the proposals"]
                #[doc = "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal"]
                #[doc = "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one"]
                #[doc = "# </weight>"]
                pub fn set_members(
                    &self,
                    new_members: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                    prime: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
                    old_count: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<SetMembers> {
                    subxt::tx::StaticTxPayload::new(
                        "TechnicalCommittee",
                        "set_members",
                        SetMembers {
                            new_members,
                            prime,
                            old_count,
                        },
                        [
                            196u8, 103u8, 123u8, 125u8, 226u8, 177u8, 126u8, 37u8, 160u8, 114u8,
                            34u8, 136u8, 219u8, 84u8, 199u8, 94u8, 242u8, 20u8, 126u8, 126u8,
                            166u8, 190u8, 198u8, 33u8, 162u8, 113u8, 237u8, 222u8, 90u8, 1u8, 2u8,
                            234u8,
                        ],
                    )
                }
                #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                #[doc = ""]
                #[doc = "Origin must be a member of the collective."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "## Weight"]
                #[doc = "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching"]
                #[doc = "  `proposal`"]
                #[doc = "- DB: 1 read (codec `O(M)`) + DB access of `proposal`"]
                #[doc = "- 1 event"]
                #[doc = "# </weight>"]
                pub fn execute(
                    &self,
                    proposal: runtime_types::dali_runtime::Call,
                    length_bound: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<Execute> {
                    subxt::tx::StaticTxPayload::new(
                        "TechnicalCommittee",
                        "execute",
                        Execute {
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            179u8, 155u8, 29u8, 184u8, 7u8, 239u8, 51u8, 241u8, 190u8, 104u8,
                            160u8, 200u8, 193u8, 174u8, 125u8, 221u8, 84u8, 25u8, 213u8, 172u8,
                            219u8, 174u8, 6u8, 124u8, 72u8, 26u8, 199u8, 1u8, 228u8, 82u8, 75u8,
                            149u8,
                        ],
                    )
                }
                #[doc = "Add a new proposal to either be voted on or executed directly."]
                #[doc = ""]
                #[doc = "Requires the sender to be member."]
                #[doc = ""]
                #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                #[doc = "or put up for voting."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "## Weight"]
                #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - branching is influenced by `threshold` where:"]
                #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                #[doc = "- DB:"]
                #[doc = "  - 1 storage read `is_member` (codec `O(M)`)"]
                #[doc = "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)"]
                #[doc = "  - DB accesses influenced by `threshold`:"]
                #[doc = "    - EITHER storage accesses done by `proposal` (`threshold < 2`)"]
                #[doc = "    - OR proposal insertion (`threshold <= 2`)"]
                #[doc = "      - 1 storage mutation `Proposals` (codec `O(P2)`)"]
                #[doc = "      - 1 storage mutation `ProposalCount` (codec `O(1)`)"]
                #[doc = "      - 1 storage write `ProposalOf` (codec `O(B)`)"]
                #[doc = "      - 1 storage write `Voting` (codec `O(M)`)"]
                #[doc = "  - 1 event"]
                #[doc = "# </weight>"]
                pub fn propose(
                    &self,
                    threshold: ::core::primitive::u32,
                    proposal: runtime_types::dali_runtime::Call,
                    length_bound: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<Propose> {
                    subxt::tx::StaticTxPayload::new(
                        "TechnicalCommittee",
                        "propose",
                        Propose {
                            threshold,
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            218u8, 245u8, 101u8, 241u8, 58u8, 99u8, 174u8, 98u8, 39u8, 72u8, 196u8,
                            228u8, 199u8, 113u8, 249u8, 136u8, 129u8, 119u8, 93u8, 98u8, 162u8,
                            97u8, 82u8, 53u8, 238u8, 93u8, 222u8, 173u8, 71u8, 180u8, 181u8, 213u8,
                        ],
                    )
                }
                #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                #[doc = ""]
                #[doc = "Requires the sender to be a member."]
                #[doc = ""]
                #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                #[doc = "fee."]
                #[doc = "# <weight>"]
                #[doc = "## Weight"]
                #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                #[doc = "- DB:"]
                #[doc = "  - 1 storage read `Members` (codec `O(M)`)"]
                #[doc = "  - 1 storage mutation `Voting` (codec `O(M)`)"]
                #[doc = "- 1 event"]
                #[doc = "# </weight>"]
                pub fn vote(
                    &self,
                    proposal: subxt::ext::sp_core::H256,
                    index: ::core::primitive::u32,
                    approve: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<Vote> {
                    subxt::tx::StaticTxPayload::new(
                        "TechnicalCommittee",
                        "vote",
                        Vote {
                            proposal,
                            index,
                            approve,
                        },
                        [
                            108u8, 46u8, 180u8, 148u8, 145u8, 24u8, 173u8, 56u8, 36u8, 100u8,
                            216u8, 43u8, 178u8, 202u8, 26u8, 136u8, 93u8, 84u8, 80u8, 134u8, 14u8,
                            42u8, 248u8, 205u8, 68u8, 92u8, 79u8, 11u8, 113u8, 115u8, 157u8, 100u8,
                        ],
                    )
                }
                #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                #[doc = ""]
                #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                #[doc = ""]
                #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                #[doc = "has enough votes to be approved or disapproved."]
                #[doc = ""]
                #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                #[doc = "unless there is a prime member set and the prime member cast an approval."]
                #[doc = ""]
                #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                #[doc = ""]
                #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                #[doc = "proposal."]
                #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "## Weight"]
                #[doc = "- `O(B + M + P1 + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                #[doc = "  - `P2` is proposal-count (code-bounded)"]
                #[doc = "- DB:"]
                #[doc = " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)"]
                #[doc = " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec"]
                #[doc = "   `O(P2)`)"]
                #[doc = " - any mutations done while executing `proposal` (`P1`)"]
                #[doc = "- up to 3 events"]
                #[doc = "# </weight>"]
                pub fn close(
                    &self,
                    proposal_hash: subxt::ext::sp_core::H256,
                    index: ::core::primitive::u32,
                    proposal_weight_bound: ::core::primitive::u64,
                    length_bound: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<Close> {
                    subxt::tx::StaticTxPayload::new(
                        "TechnicalCommittee",
                        "close",
                        Close {
                            proposal_hash,
                            index,
                            proposal_weight_bound,
                            length_bound,
                        },
                        [
                            88u8, 8u8, 33u8, 184u8, 4u8, 97u8, 120u8, 237u8, 43u8, 183u8, 130u8,
                            139u8, 65u8, 74u8, 166u8, 119u8, 246u8, 65u8, 132u8, 219u8, 118u8,
                            69u8, 182u8, 195u8, 111u8, 204u8, 107u8, 78u8, 152u8, 218u8, 181u8,
                            208u8,
                        ],
                    )
                }
                #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                #[doc = "state."]
                #[doc = ""]
                #[doc = "Must be called by the Root origin."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Complexity: O(P) where P is the number of max proposals"]
                #[doc = "DB Weight:"]
                #[doc = "* Reads: Proposals"]
                #[doc = "* Writes: Voting, Proposals, ProposalOf"]
                #[doc = "# </weight>"]
                pub fn disapprove_proposal(
                    &self,
                    proposal_hash: subxt::ext::sp_core::H256,
                ) -> subxt::tx::StaticTxPayload<DisapproveProposal> {
                    subxt::tx::StaticTxPayload::new(
                        "TechnicalCommittee",
                        "disapprove_proposal",
                        DisapproveProposal { proposal_hash },
                        [
                            25u8, 123u8, 1u8, 8u8, 74u8, 37u8, 3u8, 40u8, 97u8, 37u8, 175u8, 224u8,
                            72u8, 155u8, 123u8, 109u8, 104u8, 43u8, 91u8, 125u8, 199u8, 51u8, 17u8,
                            225u8, 133u8, 38u8, 120u8, 76u8, 164u8, 5u8, 194u8, 201u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_collective::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
            #[doc = "`MemberCount`)."]
            pub struct Proposed {
                pub account: subxt::ext::sp_core::crypto::AccountId32,
                pub proposal_index: ::core::primitive::u32,
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub threshold: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A motion (given hash) has been voted on by given account, leaving"]
            #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
            pub struct Voted {
                pub account: subxt::ext::sp_core::crypto::AccountId32,
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub voted: ::core::primitive::bool,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "Voted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A motion was approved by the required threshold."]
            pub struct Approved {
                pub proposal_hash: subxt::ext::sp_core::H256,
            }
            impl subxt::events::StaticEvent for Approved {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "Approved";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A motion was not approved by the required threshold."]
            pub struct Disapproved {
                pub proposal_hash: subxt::ext::sp_core::H256,
            }
            impl subxt::events::StaticEvent for Disapproved {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "Disapproved";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
            pub struct Executed {
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "Executed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
            pub struct MemberExecuted {
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl subxt::events::StaticEvent for MemberExecuted {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "MemberExecuted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
            pub struct Closed {
                pub proposal_hash: subxt::ext::sp_core::H256,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for Closed {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "Closed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The hashes of the active proposals."]
                pub fn proposals(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            subxt::ext::sp_core::H256,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "TechnicalCommittee",
                        "Proposals",
                        vec![],
                        [
                            10u8, 133u8, 82u8, 54u8, 193u8, 41u8, 253u8, 159u8, 56u8, 96u8, 249u8,
                            148u8, 43u8, 57u8, 116u8, 43u8, 222u8, 243u8, 237u8, 231u8, 238u8,
                            60u8, 26u8, 225u8, 19u8, 203u8, 213u8, 220u8, 114u8, 217u8, 100u8,
                            27u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::H256>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::dali_runtime::Call>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "TechnicalCommittee",
                        "ProposalOf",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            219u8, 179u8, 153u8, 101u8, 39u8, 234u8, 139u8, 212u8, 44u8, 135u8,
                            10u8, 234u8, 106u8, 4u8, 136u8, 106u8, 94u8, 150u8, 35u8, 56u8, 155u8,
                            242u8, 208u8, 29u8, 173u8, 76u8, 170u8, 202u8, 110u8, 130u8, 244u8,
                            253u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::dali_runtime::Call>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "TechnicalCommittee",
                        "ProposalOf",
                        Vec::new(),
                        [
                            219u8, 179u8, 153u8, 101u8, 39u8, 234u8, 139u8, 212u8, 44u8, 135u8,
                            10u8, 234u8, 106u8, 4u8, 136u8, 106u8, 94u8, 150u8, 35u8, 56u8, 155u8,
                            242u8, 208u8, 29u8, 173u8, 76u8, 170u8, 202u8, 110u8, 130u8, 244u8,
                            253u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::H256>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_collective::Votes<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "TechnicalCommittee",
                        "Voting",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            89u8, 108u8, 65u8, 58u8, 60u8, 116u8, 54u8, 68u8, 179u8, 73u8, 161u8,
                            168u8, 78u8, 213u8, 208u8, 54u8, 244u8, 58u8, 70u8, 209u8, 170u8,
                            136u8, 215u8, 3u8, 2u8, 105u8, 229u8, 217u8, 240u8, 230u8, 107u8,
                            221u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_collective::Votes<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "TechnicalCommittee",
                        "Voting",
                        Vec::new(),
                        [
                            89u8, 108u8, 65u8, 58u8, 60u8, 116u8, 54u8, 68u8, 179u8, 73u8, 161u8,
                            168u8, 78u8, 213u8, 208u8, 54u8, 244u8, 58u8, 70u8, 209u8, 170u8,
                            136u8, 215u8, 3u8, 2u8, 105u8, 229u8, 217u8, 240u8, 230u8, 107u8,
                            221u8,
                        ],
                    )
                }
                #[doc = " Proposals so far."]
                pub fn proposal_count(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "TechnicalCommittee",
                        "ProposalCount",
                        vec![],
                        [
                            132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8, 172u8, 143u8, 33u8,
                            140u8, 99u8, 124u8, 208u8, 57u8, 232u8, 154u8, 110u8, 32u8, 142u8,
                            24u8, 149u8, 109u8, 105u8, 30u8, 83u8, 39u8, 177u8, 127u8, 160u8, 34u8,
                            70u8,
                        ],
                    )
                }
                #[doc = " The current members of the collective. This is stored sorted (just by value)."]
                pub fn members(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "TechnicalCommittee",
                        "Members",
                        vec![],
                        [
                            162u8, 72u8, 174u8, 204u8, 140u8, 105u8, 205u8, 176u8, 197u8, 117u8,
                            206u8, 134u8, 157u8, 110u8, 139u8, 54u8, 43u8, 233u8, 25u8, 51u8, 36u8,
                            238u8, 94u8, 124u8, 221u8, 52u8, 237u8, 71u8, 125u8, 56u8, 129u8,
                            222u8,
                        ],
                    )
                }
                #[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
                pub fn prime(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<subxt::ext::sp_core::crypto::AccountId32>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "TechnicalCommittee",
                        "Prime",
                        vec![],
                        [
                            108u8, 118u8, 54u8, 193u8, 207u8, 227u8, 119u8, 97u8, 23u8, 239u8,
                            157u8, 69u8, 56u8, 142u8, 106u8, 17u8, 215u8, 159u8, 48u8, 42u8, 185u8,
                            209u8, 49u8, 159u8, 32u8, 168u8, 111u8, 158u8, 159u8, 217u8, 244u8,
                            158u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod technical_committee_membership {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AddMember {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RemoveMember {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SwapMember {
                pub remove: subxt::ext::sp_core::crypto::AccountId32,
                pub add: subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ResetMembers {
                pub members: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ChangeKey {
                pub new: subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetPrime {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ClearPrime;
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Add a member `who` to the set."]
                #[doc = ""]
                #[doc = "May only be called from `T::AddOrigin`."]
                pub fn add_member(
                    &self,
                    who: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<AddMember> {
                    subxt::tx::StaticTxPayload::new(
                        "TechnicalCommitteeMembership",
                        "add_member",
                        AddMember { who },
                        [
                            106u8, 33u8, 171u8, 114u8, 223u8, 105u8, 71u8, 15u8, 77u8, 253u8, 40u8,
                            204u8, 244u8, 142u8, 103u8, 177u8, 200u8, 243u8, 114u8, 241u8, 36u8,
                            135u8, 175u8, 255u8, 124u8, 193u8, 30u8, 46u8, 186u8, 172u8, 176u8,
                            98u8,
                        ],
                    )
                }
                #[doc = "Remove a member `who` from the set."]
                #[doc = ""]
                #[doc = "May only be called from `T::RemoveOrigin`."]
                pub fn remove_member(
                    &self,
                    who: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<RemoveMember> {
                    subxt::tx::StaticTxPayload::new(
                        "TechnicalCommitteeMembership",
                        "remove_member",
                        RemoveMember { who },
                        [
                            100u8, 17u8, 75u8, 92u8, 58u8, 100u8, 34u8, 187u8, 41u8, 160u8, 137u8,
                            58u8, 78u8, 166u8, 161u8, 116u8, 1u8, 67u8, 201u8, 144u8, 103u8, 84u8,
                            55u8, 246u8, 133u8, 180u8, 148u8, 86u8, 175u8, 175u8, 70u8, 73u8,
                        ],
                    )
                }
                #[doc = "Swap out one member `remove` for another `add`."]
                #[doc = ""]
                #[doc = "May only be called from `T::SwapOrigin`."]
                #[doc = ""]
                #[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
                pub fn swap_member(
                    &self,
                    remove: subxt::ext::sp_core::crypto::AccountId32,
                    add: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<SwapMember> {
                    subxt::tx::StaticTxPayload::new(
                        "TechnicalCommitteeMembership",
                        "swap_member",
                        SwapMember { remove, add },
                        [
                            66u8, 84u8, 183u8, 29u8, 104u8, 163u8, 220u8, 217u8, 103u8, 234u8,
                            233u8, 138u8, 191u8, 147u8, 51u8, 98u8, 46u8, 51u8, 179u8, 200u8, 23u8,
                            59u8, 112u8, 53u8, 8u8, 75u8, 135u8, 232u8, 116u8, 201u8, 60u8, 249u8,
                        ],
                    )
                }
                #[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
                #[doc = "pass `members` pre-sorted."]
                #[doc = ""]
                #[doc = "May only be called from `T::ResetOrigin`."]
                pub fn reset_members(
                    &self,
                    members: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::tx::StaticTxPayload<ResetMembers> {
                    subxt::tx::StaticTxPayload::new(
                        "TechnicalCommitteeMembership",
                        "reset_members",
                        ResetMembers { members },
                        [
                            9u8, 35u8, 28u8, 59u8, 158u8, 232u8, 89u8, 78u8, 101u8, 53u8, 240u8,
                            98u8, 13u8, 104u8, 235u8, 161u8, 201u8, 150u8, 117u8, 32u8, 75u8,
                            209u8, 166u8, 252u8, 57u8, 131u8, 96u8, 215u8, 51u8, 81u8, 42u8, 123u8,
                        ],
                    )
                }
                #[doc = "Swap out the sending member for some other key `new`."]
                #[doc = ""]
                #[doc = "May only be called from `Signed` origin of a current member."]
                #[doc = ""]
                #[doc = "Prime membership is passed from the origin account to `new`, if extant."]
                pub fn change_key(
                    &self,
                    new: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<ChangeKey> {
                    subxt::tx::StaticTxPayload::new(
                        "TechnicalCommitteeMembership",
                        "change_key",
                        ChangeKey { new },
                        [
                            53u8, 60u8, 54u8, 231u8, 151u8, 0u8, 27u8, 175u8, 250u8, 80u8, 74u8,
                            184u8, 184u8, 63u8, 90u8, 216u8, 186u8, 136u8, 74u8, 214u8, 111u8,
                            186u8, 137u8, 140u8, 108u8, 194u8, 128u8, 97u8, 168u8, 184u8, 112u8,
                            60u8,
                        ],
                    )
                }
                #[doc = "Set the prime member. Must be a current member."]
                #[doc = ""]
                #[doc = "May only be called from `T::PrimeOrigin`."]
                pub fn set_prime(
                    &self,
                    who: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<SetPrime> {
                    subxt::tx::StaticTxPayload::new(
                        "TechnicalCommitteeMembership",
                        "set_prime",
                        SetPrime { who },
                        [
                            123u8, 95u8, 75u8, 129u8, 19u8, 34u8, 192u8, 65u8, 169u8, 47u8, 184u8,
                            246u8, 55u8, 250u8, 31u8, 158u8, 57u8, 197u8, 22u8, 112u8, 167u8,
                            198u8, 136u8, 17u8, 15u8, 203u8, 101u8, 149u8, 15u8, 39u8, 16u8, 232u8,
                        ],
                    )
                }
                #[doc = "Remove the prime member if it exists."]
                #[doc = ""]
                #[doc = "May only be called from `T::PrimeOrigin`."]
                pub fn clear_prime(&self) -> subxt::tx::StaticTxPayload<ClearPrime> {
                    subxt::tx::StaticTxPayload::new(
                        "TechnicalCommitteeMembership",
                        "clear_prime",
                        ClearPrime {},
                        [
                            186u8, 182u8, 225u8, 90u8, 71u8, 124u8, 69u8, 100u8, 234u8, 25u8, 53u8,
                            23u8, 182u8, 32u8, 176u8, 81u8, 54u8, 140u8, 235u8, 126u8, 247u8, 7u8,
                            155u8, 62u8, 35u8, 135u8, 48u8, 61u8, 88u8, 160u8, 183u8, 72u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_membership::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The given member was added; see the transaction for who."]
            pub struct MemberAdded;
            impl subxt::events::StaticEvent for MemberAdded {
                const PALLET: &'static str = "TechnicalCommitteeMembership";
                const EVENT: &'static str = "MemberAdded";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The given member was removed; see the transaction for who."]
            pub struct MemberRemoved;
            impl subxt::events::StaticEvent for MemberRemoved {
                const PALLET: &'static str = "TechnicalCommitteeMembership";
                const EVENT: &'static str = "MemberRemoved";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Two members were swapped; see the transaction for who."]
            pub struct MembersSwapped;
            impl subxt::events::StaticEvent for MembersSwapped {
                const PALLET: &'static str = "TechnicalCommitteeMembership";
                const EVENT: &'static str = "MembersSwapped";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The membership was reset; see the transaction for who the new set is."]
            pub struct MembersReset;
            impl subxt::events::StaticEvent for MembersReset {
                const PALLET: &'static str = "TechnicalCommitteeMembership";
                const EVENT: &'static str = "MembersReset";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "One of the members' keys changed."]
            pub struct KeyChanged;
            impl subxt::events::StaticEvent for KeyChanged {
                const PALLET: &'static str = "TechnicalCommitteeMembership";
                const EVENT: &'static str = "KeyChanged";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Phantom member, never used."]
            pub struct Dummy;
            impl subxt::events::StaticEvent for Dummy {
                const PALLET: &'static str = "TechnicalCommitteeMembership";
                const EVENT: &'static str = "Dummy";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current membership, stored as an ordered Vec."]
                pub fn members(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            subxt::ext::sp_core::crypto::AccountId32,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "TechnicalCommitteeMembership",
                        "Members",
                        vec![],
                        [
                            56u8, 56u8, 29u8, 90u8, 26u8, 115u8, 252u8, 185u8, 37u8, 108u8, 16u8,
                            46u8, 136u8, 139u8, 30u8, 19u8, 235u8, 78u8, 176u8, 129u8, 180u8, 57u8,
                            178u8, 239u8, 211u8, 6u8, 64u8, 129u8, 195u8, 46u8, 178u8, 157u8,
                        ],
                    )
                }
                #[doc = " The current prime member, if one exists."]
                pub fn prime(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<subxt::ext::sp_core::crypto::AccountId32>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "TechnicalCommitteeMembership",
                        "Prime",
                        vec![],
                        [
                            108u8, 118u8, 54u8, 193u8, 207u8, 227u8, 119u8, 97u8, 23u8, 239u8,
                            157u8, 69u8, 56u8, 142u8, 106u8, 17u8, 215u8, 159u8, 48u8, 42u8, 185u8,
                            209u8, 49u8, 159u8, 32u8, 168u8, 111u8, 158u8, 159u8, 217u8, 244u8,
                            158u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod scheduler {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Schedule {
                pub when: ::core::primitive::u32,
                pub maybe_periodic:
                    ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
                pub priority: ::core::primitive::u8,
                pub call: ::std::boxed::Box<
                    runtime_types::frame_support::traits::schedule::MaybeHashed<
                        runtime_types::dali_runtime::Call,
                        subxt::ext::sp_core::H256,
                    >,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Cancel {
                pub when: ::core::primitive::u32,
                pub index: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ScheduleNamed {
                pub id: ::std::vec::Vec<::core::primitive::u8>,
                pub when: ::core::primitive::u32,
                pub maybe_periodic:
                    ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
                pub priority: ::core::primitive::u8,
                pub call: ::std::boxed::Box<
                    runtime_types::frame_support::traits::schedule::MaybeHashed<
                        runtime_types::dali_runtime::Call,
                        subxt::ext::sp_core::H256,
                    >,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct CancelNamed {
                pub id: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ScheduleAfter {
                pub after: ::core::primitive::u32,
                pub maybe_periodic:
                    ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
                pub priority: ::core::primitive::u8,
                pub call: ::std::boxed::Box<
                    runtime_types::frame_support::traits::schedule::MaybeHashed<
                        runtime_types::dali_runtime::Call,
                        subxt::ext::sp_core::H256,
                    >,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ScheduleNamedAfter {
                pub id: ::std::vec::Vec<::core::primitive::u8>,
                pub after: ::core::primitive::u32,
                pub maybe_periodic:
                    ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
                pub priority: ::core::primitive::u8,
                pub call: ::std::boxed::Box<
                    runtime_types::frame_support::traits::schedule::MaybeHashed<
                        runtime_types::dali_runtime::Call,
                        subxt::ext::sp_core::H256,
                    >,
                >,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Anonymously schedule a task."]
                pub fn schedule(
                    &self,
                    when: ::core::primitive::u32,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call: runtime_types::frame_support::traits::schedule::MaybeHashed<
                        runtime_types::dali_runtime::Call,
                        subxt::ext::sp_core::H256,
                    >,
                ) -> subxt::tx::StaticTxPayload<Schedule> {
                    subxt::tx::StaticTxPayload::new(
                        "Scheduler",
                        "schedule",
                        Schedule {
                            when,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            79u8, 79u8, 212u8, 234u8, 91u8, 193u8, 178u8, 111u8, 104u8, 65u8, 2u8,
                            127u8, 111u8, 133u8, 13u8, 180u8, 104u8, 44u8, 220u8, 238u8, 153u8,
                            97u8, 190u8, 184u8, 12u8, 111u8, 111u8, 18u8, 82u8, 103u8, 18u8, 39u8,
                        ],
                    )
                }
                #[doc = "Cancel an anonymously scheduled task."]
                pub fn cancel(
                    &self,
                    when: ::core::primitive::u32,
                    index: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<Cancel> {
                    subxt::tx::StaticTxPayload::new(
                        "Scheduler",
                        "cancel",
                        Cancel { when, index },
                        [
                            81u8, 251u8, 234u8, 17u8, 214u8, 75u8, 19u8, 59u8, 19u8, 30u8, 89u8,
                            74u8, 6u8, 216u8, 238u8, 165u8, 7u8, 19u8, 153u8, 253u8, 161u8, 103u8,
                            178u8, 227u8, 152u8, 180u8, 80u8, 156u8, 82u8, 126u8, 132u8, 120u8,
                        ],
                    )
                }
                #[doc = "Schedule a named task."]
                pub fn schedule_named(
                    &self,
                    id: ::std::vec::Vec<::core::primitive::u8>,
                    when: ::core::primitive::u32,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call: runtime_types::frame_support::traits::schedule::MaybeHashed<
                        runtime_types::dali_runtime::Call,
                        subxt::ext::sp_core::H256,
                    >,
                ) -> subxt::tx::StaticTxPayload<ScheduleNamed> {
                    subxt::tx::StaticTxPayload::new(
                        "Scheduler",
                        "schedule_named",
                        ScheduleNamed {
                            id,
                            when,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            153u8, 248u8, 49u8, 203u8, 254u8, 81u8, 124u8, 212u8, 1u8, 176u8,
                            139u8, 96u8, 181u8, 130u8, 113u8, 106u8, 188u8, 218u8, 191u8, 167u8,
                            188u8, 189u8, 131u8, 242u8, 40u8, 233u8, 223u8, 169u8, 138u8, 60u8,
                            25u8, 67u8,
                        ],
                    )
                }
                #[doc = "Cancel a named scheduled task."]
                pub fn cancel_named(
                    &self,
                    id: ::std::vec::Vec<::core::primitive::u8>,
                ) -> subxt::tx::StaticTxPayload<CancelNamed> {
                    subxt::tx::StaticTxPayload::new(
                        "Scheduler",
                        "cancel_named",
                        CancelNamed { id },
                        [
                            42u8, 232u8, 92u8, 167u8, 113u8, 136u8, 7u8, 215u8, 88u8, 117u8, 74u8,
                            26u8, 225u8, 230u8, 244u8, 106u8, 150u8, 112u8, 46u8, 228u8, 96u8,
                            252u8, 78u8, 126u8, 39u8, 207u8, 36u8, 110u8, 83u8, 62u8, 84u8, 241u8,
                        ],
                    )
                }
                #[doc = "Anonymously schedule a task after a delay."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Same as [`schedule`]."]
                #[doc = "# </weight>"]
                pub fn schedule_after(
                    &self,
                    after: ::core::primitive::u32,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call: runtime_types::frame_support::traits::schedule::MaybeHashed<
                        runtime_types::dali_runtime::Call,
                        subxt::ext::sp_core::H256,
                    >,
                ) -> subxt::tx::StaticTxPayload<ScheduleAfter> {
                    subxt::tx::StaticTxPayload::new(
                        "Scheduler",
                        "schedule_after",
                        ScheduleAfter {
                            after,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            165u8, 98u8, 192u8, 177u8, 116u8, 78u8, 133u8, 209u8, 199u8, 39u8,
                            118u8, 85u8, 22u8, 128u8, 99u8, 19u8, 134u8, 237u8, 123u8, 34u8, 138u8,
                            99u8, 46u8, 151u8, 245u8, 21u8, 166u8, 145u8, 60u8, 229u8, 248u8,
                            152u8,
                        ],
                    )
                }
                #[doc = "Schedule a named task after a delay."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Same as [`schedule_named`](Self::schedule_named)."]
                #[doc = "# </weight>"]
                pub fn schedule_named_after(
                    &self,
                    id: ::std::vec::Vec<::core::primitive::u8>,
                    after: ::core::primitive::u32,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call: runtime_types::frame_support::traits::schedule::MaybeHashed<
                        runtime_types::dali_runtime::Call,
                        subxt::ext::sp_core::H256,
                    >,
                ) -> subxt::tx::StaticTxPayload<ScheduleNamedAfter> {
                    subxt::tx::StaticTxPayload::new(
                        "Scheduler",
                        "schedule_named_after",
                        ScheduleNamedAfter {
                            id,
                            after,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            191u8, 52u8, 158u8, 77u8, 166u8, 174u8, 62u8, 111u8, 24u8, 86u8, 182u8,
                            176u8, 121u8, 2u8, 89u8, 214u8, 133u8, 16u8, 226u8, 227u8, 188u8, 6u8,
                            91u8, 206u8, 247u8, 22u8, 188u8, 114u8, 85u8, 1u8, 8u8, 14u8,
                        ],
                    )
                }
            }
        }
        #[doc = "Events type."]
        pub type Event = runtime_types::pallet_scheduler::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Scheduled some task."]
            pub struct Scheduled {
                pub when: ::core::primitive::u32,
                pub index: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for Scheduled {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Scheduled";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Canceled some task."]
            pub struct Canceled {
                pub when: ::core::primitive::u32,
                pub index: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for Canceled {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Canceled";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Dispatched some task."]
            pub struct Dispatched {
                pub task: (::core::primitive::u32, ::core::primitive::u32),
                pub id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl subxt::events::StaticEvent for Dispatched {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Dispatched";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The call for the provided hash was not found so the task has been aborted."]
            pub struct CallLookupFailed {
                pub task: (::core::primitive::u32, ::core::primitive::u32),
                pub id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                pub error: runtime_types::frame_support::traits::schedule::LookupError,
            }
            impl subxt::events::StaticEvent for CallLookupFailed {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "CallLookupFailed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Items to be executed, indexed by the block number that they should be executed on."]
                pub fn agenda(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<
                            ::core::option::Option<
                                runtime_types::pallet_scheduler::ScheduledV3<
                                    runtime_types::frame_support::traits::schedule::MaybeHashed<
                                        runtime_types::dali_runtime::Call,
                                        subxt::ext::sp_core::H256,
                                    >,
                                    ::core::primitive::u32,
                                    runtime_types::dali_runtime::OriginCaller,
                                    subxt::ext::sp_core::crypto::AccountId32,
                                >,
                            >,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Scheduler",
                        "Agenda",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            226u8, 218u8, 204u8, 223u8, 85u8, 61u8, 27u8, 181u8, 116u8, 1u8, 252u8,
                            67u8, 188u8, 248u8, 148u8, 27u8, 138u8, 203u8, 29u8, 235u8, 175u8,
                            149u8, 137u8, 226u8, 185u8, 215u8, 110u8, 157u8, 138u8, 13u8, 59u8,
                            182u8,
                        ],
                    )
                }
                #[doc = " Items to be executed, indexed by the block number that they should be executed on."]
                pub fn agenda_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<
                            ::core::option::Option<
                                runtime_types::pallet_scheduler::ScheduledV3<
                                    runtime_types::frame_support::traits::schedule::MaybeHashed<
                                        runtime_types::dali_runtime::Call,
                                        subxt::ext::sp_core::H256,
                                    >,
                                    ::core::primitive::u32,
                                    runtime_types::dali_runtime::OriginCaller,
                                    subxt::ext::sp_core::crypto::AccountId32,
                                >,
                            >,
                        >,
                    >,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Scheduler",
                        "Agenda",
                        Vec::new(),
                        [
                            226u8, 218u8, 204u8, 223u8, 85u8, 61u8, 27u8, 181u8, 116u8, 1u8, 252u8,
                            67u8, 188u8, 248u8, 148u8, 27u8, 138u8, 203u8, 29u8, 235u8, 175u8,
                            149u8, 137u8, 226u8, 185u8, 215u8, 110u8, 157u8, 138u8, 13u8, 59u8,
                            182u8,
                        ],
                    )
                }
                #[doc = " Lookup from identity to the block number and index of the task."]
                pub fn lookup(
                    &self,
                    _0: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Scheduler",
                        "Lookup",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            56u8, 105u8, 156u8, 110u8, 251u8, 141u8, 219u8, 56u8, 131u8, 57u8,
                            180u8, 33u8, 48u8, 30u8, 193u8, 194u8, 169u8, 182u8, 168u8, 43u8, 36u8,
                            202u8, 222u8, 182u8, 41u8, 216u8, 222u8, 1u8, 72u8, 165u8, 62u8, 166u8,
                        ],
                    )
                }
                #[doc = " Lookup from identity to the block number and index of the task."]
                pub fn lookup_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Scheduler",
                        "Lookup",
                        Vec::new(),
                        [
                            56u8, 105u8, 156u8, 110u8, 251u8, 141u8, 219u8, 56u8, 131u8, 57u8,
                            180u8, 33u8, 48u8, 30u8, 193u8, 194u8, 169u8, 182u8, 168u8, 43u8, 36u8,
                            202u8, 222u8, 182u8, 41u8, 216u8, 222u8, 1u8, 72u8, 165u8, 62u8, 166u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum weight that may be scheduled per block for any dispatchables of less"]
                #[doc = " priority than `schedule::HARD_DEADLINE`."]
                pub fn maximum_weight(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Scheduler",
                        "MaximumWeight",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                #[doc = " The maximum number of scheduled calls in the queue for a single block."]
                #[doc = " Not strictly enforced, but used for weight estimation."]
                pub fn max_scheduled_per_block(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Scheduler",
                        "MaxScheduledPerBlock",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod utility {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Batch {
                pub calls: ::std::vec::Vec<runtime_types::dali_runtime::Call>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AsDerivative {
                pub index: ::core::primitive::u16,
                pub call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct BatchAll {
                pub calls: ::std::vec::Vec<runtime_types::dali_runtime::Call>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct DispatchAs {
                pub as_origin: ::std::boxed::Box<runtime_types::dali_runtime::OriginCaller>,
                pub call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ForceBatch {
                pub calls: ::std::vec::Vec<runtime_types::dali_runtime::Call>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Send a batch of dispatch calls."]
                #[doc = ""]
                #[doc = "May be called from any origin."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
                #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
                #[doc = "# </weight>"]
                #[doc = ""]
                #[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
                #[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
                #[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
                #[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
                #[doc = "event is deposited."]
                pub fn batch(
                    &self,
                    calls: ::std::vec::Vec<runtime_types::dali_runtime::Call>,
                ) -> subxt::tx::StaticTxPayload<Batch> {
                    subxt::tx::StaticTxPayload::new(
                        "Utility",
                        "batch",
                        Batch { calls },
                        [
                            249u8, 245u8, 43u8, 220u8, 83u8, 38u8, 202u8, 70u8, 249u8, 57u8, 105u8,
                            44u8, 167u8, 97u8, 210u8, 28u8, 129u8, 84u8, 28u8, 118u8, 123u8, 12u8,
                            142u8, 19u8, 227u8, 131u8, 119u8, 160u8, 183u8, 149u8, 178u8, 189u8,
                        ],
                    )
                }
                #[doc = "Send a call through an indexed pseudonym of the sender."]
                #[doc = ""]
                #[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
                #[doc = "use the same filter as the origin of this call."]
                #[doc = ""]
                #[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
                #[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
                #[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
                #[doc = "in the Multisig pallet instead."]
                #[doc = ""]
                #[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                pub fn as_derivative(
                    &self,
                    index: ::core::primitive::u16,
                    call: runtime_types::dali_runtime::Call,
                ) -> subxt::tx::StaticTxPayload<AsDerivative> {
                    subxt::tx::StaticTxPayload::new(
                        "Utility",
                        "as_derivative",
                        AsDerivative {
                            index,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            91u8, 5u8, 51u8, 217u8, 107u8, 20u8, 150u8, 46u8, 158u8, 212u8, 224u8,
                            52u8, 17u8, 108u8, 197u8, 84u8, 44u8, 128u8, 10u8, 94u8, 243u8, 152u8,
                            41u8, 136u8, 151u8, 105u8, 169u8, 7u8, 70u8, 242u8, 203u8, 150u8,
                        ],
                    )
                }
                #[doc = "Send a batch of dispatch calls and atomically execute them."]
                #[doc = "The whole transaction will rollback and fail if any of the calls failed."]
                #[doc = ""]
                #[doc = "May be called from any origin."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
                #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
                #[doc = "# </weight>"]
                pub fn batch_all(
                    &self,
                    calls: ::std::vec::Vec<runtime_types::dali_runtime::Call>,
                ) -> subxt::tx::StaticTxPayload<BatchAll> {
                    subxt::tx::StaticTxPayload::new(
                        "Utility",
                        "batch_all",
                        BatchAll { calls },
                        [
                            47u8, 172u8, 60u8, 67u8, 231u8, 59u8, 216u8, 97u8, 216u8, 146u8, 203u8,
                            131u8, 224u8, 251u8, 12u8, 53u8, 20u8, 113u8, 28u8, 11u8, 178u8, 176u8,
                            145u8, 163u8, 199u8, 127u8, 86u8, 181u8, 14u8, 248u8, 249u8, 144u8,
                        ],
                    )
                }
                #[doc = "Dispatches a function call with a provided origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- Limited storage reads."]
                #[doc = "- One DB write (event)."]
                #[doc = "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as()."]
                #[doc = "# </weight>"]
                pub fn dispatch_as(
                    &self,
                    as_origin: runtime_types::dali_runtime::OriginCaller,
                    call: runtime_types::dali_runtime::Call,
                ) -> subxt::tx::StaticTxPayload<DispatchAs> {
                    subxt::tx::StaticTxPayload::new(
                        "Utility",
                        "dispatch_as",
                        DispatchAs {
                            as_origin: ::std::boxed::Box::new(as_origin),
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            15u8, 245u8, 177u8, 4u8, 179u8, 30u8, 122u8, 57u8, 211u8, 222u8, 38u8,
                            32u8, 43u8, 35u8, 101u8, 119u8, 174u8, 193u8, 115u8, 150u8, 37u8, 52u8,
                            168u8, 87u8, 41u8, 123u8, 73u8, 218u8, 40u8, 146u8, 87u8, 70u8,
                        ],
                    )
                }
                #[doc = "Send a batch of dispatch calls."]
                #[doc = "Unlike `batch`, it allows errors and won't interrupt."]
                #[doc = ""]
                #[doc = "May be called from any origin."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
                #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
                #[doc = "# </weight>"]
                pub fn force_batch(
                    &self,
                    calls: ::std::vec::Vec<runtime_types::dali_runtime::Call>,
                ) -> subxt::tx::StaticTxPayload<ForceBatch> {
                    subxt::tx::StaticTxPayload::new(
                        "Utility",
                        "force_batch",
                        ForceBatch { calls },
                        [
                            35u8, 250u8, 19u8, 83u8, 46u8, 128u8, 173u8, 65u8, 195u8, 251u8, 130u8,
                            64u8, 171u8, 147u8, 164u8, 205u8, 204u8, 10u8, 202u8, 74u8, 131u8,
                            215u8, 70u8, 200u8, 121u8, 254u8, 7u8, 230u8, 63u8, 228u8, 244u8,
                            220u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_utility::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
            #[doc = "well as the error."]
            pub struct BatchInterrupted {
                pub index: ::core::primitive::u32,
                pub error: runtime_types::sp_runtime::DispatchError,
            }
            impl subxt::events::StaticEvent for BatchInterrupted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchInterrupted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Batch of dispatches completed fully with no error."]
            pub struct BatchCompleted;
            impl subxt::events::StaticEvent for BatchCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompleted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Batch of dispatches completed but has errors."]
            pub struct BatchCompletedWithErrors;
            impl subxt::events::StaticEvent for BatchCompletedWithErrors {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompletedWithErrors";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A single item within a Batch of dispatches has completed with no error."]
            pub struct ItemCompleted;
            impl subxt::events::StaticEvent for ItemCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemCompleted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A single item within a Batch of dispatches has completed with error."]
            pub struct ItemFailed {
                pub error: runtime_types::sp_runtime::DispatchError,
            }
            impl subxt::events::StaticEvent for ItemFailed {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemFailed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A call was dispatched."]
            pub struct DispatchedAs {
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl subxt::events::StaticEvent for DispatchedAs {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "DispatchedAs";
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The limit on the number of batched calls."]
                pub fn batched_calls_limit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Utility",
                        "batched_calls_limit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod preimage {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct NotePreimage {
                pub bytes: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct UnnotePreimage {
                pub hash: subxt::ext::sp_core::H256,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RequestPreimage {
                pub hash: subxt::ext::sp_core::H256,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct UnrequestPreimage {
                pub hash: subxt::ext::sp_core::H256,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Register a preimage on-chain."]
                #[doc = ""]
                #[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
                #[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
                pub fn note_preimage(
                    &self,
                    bytes: ::std::vec::Vec<::core::primitive::u8>,
                ) -> subxt::tx::StaticTxPayload<NotePreimage> {
                    subxt::tx::StaticTxPayload::new(
                        "Preimage",
                        "note_preimage",
                        NotePreimage { bytes },
                        [
                            77u8, 48u8, 104u8, 3u8, 254u8, 65u8, 106u8, 95u8, 204u8, 89u8, 149u8,
                            29u8, 144u8, 188u8, 99u8, 23u8, 146u8, 142u8, 35u8, 17u8, 125u8, 130u8,
                            31u8, 206u8, 106u8, 83u8, 163u8, 192u8, 81u8, 23u8, 232u8, 230u8,
                        ],
                    )
                }
                #[doc = "Clear an unrequested preimage from the runtime storage."]
                pub fn unnote_preimage(
                    &self,
                    hash: subxt::ext::sp_core::H256,
                ) -> subxt::tx::StaticTxPayload<UnnotePreimage> {
                    subxt::tx::StaticTxPayload::new(
                        "Preimage",
                        "unnote_preimage",
                        UnnotePreimage { hash },
                        [
                            211u8, 204u8, 205u8, 58u8, 33u8, 179u8, 68u8, 74u8, 149u8, 138u8,
                            213u8, 45u8, 140u8, 27u8, 106u8, 81u8, 68u8, 212u8, 147u8, 116u8, 27u8,
                            130u8, 84u8, 34u8, 231u8, 197u8, 135u8, 8u8, 19u8, 242u8, 207u8, 17u8,
                        ],
                    )
                }
                #[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
                #[doc = ""]
                #[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
                #[doc = "a user may have paid, and take the control of the preimage out of their hands."]
                pub fn request_preimage(
                    &self,
                    hash: subxt::ext::sp_core::H256,
                ) -> subxt::tx::StaticTxPayload<RequestPreimage> {
                    subxt::tx::StaticTxPayload::new(
                        "Preimage",
                        "request_preimage",
                        RequestPreimage { hash },
                        [
                            195u8, 26u8, 146u8, 255u8, 79u8, 43u8, 73u8, 60u8, 115u8, 78u8, 99u8,
                            197u8, 137u8, 95u8, 139u8, 141u8, 79u8, 213u8, 170u8, 169u8, 127u8,
                            30u8, 236u8, 65u8, 38u8, 16u8, 118u8, 228u8, 141u8, 83u8, 162u8, 233u8,
                        ],
                    )
                }
                #[doc = "Clear a previously made request for a preimage."]
                #[doc = ""]
                #[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
                pub fn unrequest_preimage(
                    &self,
                    hash: subxt::ext::sp_core::H256,
                ) -> subxt::tx::StaticTxPayload<UnrequestPreimage> {
                    subxt::tx::StaticTxPayload::new(
                        "Preimage",
                        "unrequest_preimage",
                        UnrequestPreimage { hash },
                        [
                            143u8, 225u8, 239u8, 44u8, 237u8, 83u8, 18u8, 105u8, 101u8, 68u8,
                            111u8, 116u8, 66u8, 212u8, 63u8, 190u8, 38u8, 32u8, 105u8, 152u8, 69u8,
                            177u8, 193u8, 15u8, 60u8, 26u8, 95u8, 130u8, 11u8, 113u8, 187u8, 108u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_preimage::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A preimage has been noted."]
            pub struct Noted {
                pub hash: subxt::ext::sp_core::H256,
            }
            impl subxt::events::StaticEvent for Noted {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Noted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A preimage has been requested."]
            pub struct Requested {
                pub hash: subxt::ext::sp_core::H256,
            }
            impl subxt::events::StaticEvent for Requested {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Requested";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A preimage has ben cleared."]
            pub struct Cleared {
                pub hash: subxt::ext::sp_core::H256,
            }
            impl subxt::events::StaticEvent for Cleared {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Cleared";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The request status of a given hash."]
                pub fn status_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::H256>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_preimage::RequestStatus<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Preimage",
                        "StatusFor",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            244u8, 6u8, 120u8, 75u8, 164u8, 32u8, 39u8, 15u8, 107u8, 127u8, 19u8,
                            242u8, 80u8, 121u8, 18u8, 219u8, 253u8, 174u8, 138u8, 9u8, 76u8, 219u8,
                            156u8, 229u8, 78u8, 155u8, 233u8, 162u8, 215u8, 237u8, 23u8, 123u8,
                        ],
                    )
                }
                #[doc = " The request status of a given hash."]
                pub fn status_for_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_preimage::RequestStatus<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Preimage",
                        "StatusFor",
                        Vec::new(),
                        [
                            244u8, 6u8, 120u8, 75u8, 164u8, 32u8, 39u8, 15u8, 107u8, 127u8, 19u8,
                            242u8, 80u8, 121u8, 18u8, 219u8, 253u8, 174u8, 138u8, 9u8, 76u8, 219u8,
                            156u8, 229u8, 78u8, 155u8, 233u8, 162u8, 215u8, 237u8, 23u8, 123u8,
                        ],
                    )
                }
                #[doc = " The preimages stored by this pallet."]
                pub fn preimage_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::H256>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Preimage",
                        "PreimageFor",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            82u8, 216u8, 233u8, 5u8, 102u8, 206u8, 96u8, 64u8, 133u8, 179u8, 63u8,
                            45u8, 53u8, 42u8, 190u8, 95u8, 77u8, 197u8, 60u8, 11u8, 59u8, 231u8,
                            190u8, 219u8, 87u8, 149u8, 112u8, 196u8, 33u8, 238u8, 247u8, 117u8,
                        ],
                    )
                }
                #[doc = " The preimages stored by this pallet."]
                pub fn preimage_for_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Preimage",
                        "PreimageFor",
                        Vec::new(),
                        [
                            82u8, 216u8, 233u8, 5u8, 102u8, 206u8, 96u8, 64u8, 133u8, 179u8, 63u8,
                            45u8, 53u8, 42u8, 190u8, 95u8, 77u8, 197u8, 60u8, 11u8, 59u8, 231u8,
                            190u8, 219u8, 87u8, 149u8, 112u8, 196u8, 33u8, 238u8, 247u8, 117u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod proxy {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Proxy {
                pub real: subxt::ext::sp_core::crypto::AccountId32,
                pub force_proxy_type: ::core::option::Option<
                    runtime_types::composable_traits::account_proxy::ProxyType,
                >,
                pub call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AddProxy {
                pub delegate: subxt::ext::sp_core::crypto::AccountId32,
                pub proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
                pub delay: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RemoveProxy {
                pub delegate: subxt::ext::sp_core::crypto::AccountId32,
                pub proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
                pub delay: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RemoveProxies;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Anonymous {
                pub proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
                pub delay: ::core::primitive::u32,
                pub index: ::core::primitive::u16,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct KillAnonymous {
                pub spawner: subxt::ext::sp_core::crypto::AccountId32,
                pub proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
                pub index: ::core::primitive::u16,
                #[codec(compact)]
                pub height: ::core::primitive::u32,
                #[codec(compact)]
                pub ext_index: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Announce {
                pub real: subxt::ext::sp_core::crypto::AccountId32,
                pub call_hash: subxt::ext::sp_core::H256,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RemoveAnnouncement {
                pub real: subxt::ext::sp_core::crypto::AccountId32,
                pub call_hash: subxt::ext::sp_core::H256,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RejectAnnouncement {
                pub delegate: subxt::ext::sp_core::crypto::AccountId32,
                pub call_hash: subxt::ext::sp_core::H256,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ProxyAnnounced {
                pub delegate: subxt::ext::sp_core::crypto::AccountId32,
                pub real: subxt::ext::sp_core::crypto::AccountId32,
                pub force_proxy_type: ::core::option::Option<
                    runtime_types::composable_traits::account_proxy::ProxyType,
                >,
                pub call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
                #[doc = "`add_proxy`."]
                #[doc = ""]
                #[doc = "Removes any corresponding announcement(s)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                #[doc = "- `call`: The call to be made by the `real` account."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of the number of proxies the user has (P)."]
                #[doc = "# </weight>"]
                pub fn proxy(
                    &self,
                    real: subxt::ext::sp_core::crypto::AccountId32,
                    force_proxy_type: ::core::option::Option<
                        runtime_types::composable_traits::account_proxy::ProxyType,
                    >,
                    call: runtime_types::dali_runtime::Call,
                ) -> subxt::tx::StaticTxPayload<Proxy> {
                    subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "proxy",
                        Proxy {
                            real,
                            force_proxy_type,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            112u8, 247u8, 113u8, 38u8, 165u8, 12u8, 91u8, 241u8, 186u8, 190u8,
                            154u8, 85u8, 17u8, 231u8, 82u8, 67u8, 66u8, 39u8, 198u8, 166u8, 1u8,
                            90u8, 96u8, 26u8, 80u8, 98u8, 214u8, 37u8, 8u8, 13u8, 57u8, 212u8,
                        ],
                    )
                }
                #[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
                #[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
                #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                #[doc = "zero."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of the number of proxies the user has (P)."]
                #[doc = "# </weight>"]
                pub fn add_proxy(
                    &self,
                    delegate: subxt::ext::sp_core::crypto::AccountId32,
                    proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
                    delay: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<AddProxy> {
                    subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "add_proxy",
                        AddProxy {
                            delegate,
                            proxy_type,
                            delay,
                        },
                        [
                            39u8, 218u8, 24u8, 124u8, 241u8, 247u8, 154u8, 191u8, 27u8, 172u8,
                            93u8, 128u8, 186u8, 86u8, 222u8, 219u8, 138u8, 98u8, 203u8, 74u8,
                            199u8, 103u8, 220u8, 208u8, 0u8, 236u8, 98u8, 61u8, 248u8, 69u8, 172u8,
                            47u8,
                        ],
                    )
                }
                #[doc = "Unregister a proxy account for the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
                #[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of the number of proxies the user has (P)."]
                #[doc = "# </weight>"]
                pub fn remove_proxy(
                    &self,
                    delegate: subxt::ext::sp_core::crypto::AccountId32,
                    proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
                    delay: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<RemoveProxy> {
                    subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "remove_proxy",
                        RemoveProxy {
                            delegate,
                            proxy_type,
                            delay,
                        },
                        [
                            237u8, 206u8, 42u8, 26u8, 196u8, 6u8, 210u8, 125u8, 95u8, 142u8, 107u8,
                            135u8, 185u8, 241u8, 92u8, 87u8, 53u8, 104u8, 11u8, 140u8, 143u8,
                            142u8, 10u8, 11u8, 27u8, 189u8, 30u8, 147u8, 93u8, 89u8, 163u8, 210u8,
                        ],
                    )
                }
                #[doc = "Unregister all proxy accounts for the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "WARNING: This may be called on accounts created by `anonymous`, however if done, then"]
                #[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of the number of proxies the user has (P)."]
                #[doc = "# </weight>"]
                pub fn remove_proxies(&self) -> subxt::tx::StaticTxPayload<RemoveProxies> {
                    subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "remove_proxies",
                        RemoveProxies {},
                        [
                            15u8, 237u8, 27u8, 166u8, 254u8, 218u8, 92u8, 5u8, 213u8, 239u8, 99u8,
                            59u8, 1u8, 26u8, 73u8, 252u8, 81u8, 94u8, 214u8, 227u8, 169u8, 58u8,
                            40u8, 253u8, 187u8, 225u8, 192u8, 26u8, 19u8, 23u8, 121u8, 129u8,
                        ],
                    )
                }
                #[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
                #[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
                #[doc = ""]
                #[doc = "Requires a `Signed` origin."]
                #[doc = ""]
                #[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
                #[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
                #[doc = "allow for maximum flexibility."]
                #[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
                #[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
                #[doc = "want to use `0`."]
                #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                #[doc = "zero."]
                #[doc = ""]
                #[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
                #[doc = "same sender, with the same parameters."]
                #[doc = ""]
                #[doc = "Fails if there are insufficient funds to pay for deposit."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of the number of proxies the user has (P)."]
                #[doc = "# </weight>"]
                #[doc = "TODO: Might be over counting 1 read"]
                pub fn anonymous(
                    &self,
                    proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
                    delay: ::core::primitive::u32,
                    index: ::core::primitive::u16,
                ) -> subxt::tx::StaticTxPayload<Anonymous> {
                    subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "anonymous",
                        Anonymous {
                            proxy_type,
                            delay,
                            index,
                        },
                        [
                            111u8, 102u8, 86u8, 186u8, 189u8, 114u8, 67u8, 237u8, 29u8, 233u8,
                            242u8, 143u8, 84u8, 172u8, 177u8, 167u8, 94u8, 17u8, 83u8, 116u8,
                            139u8, 25u8, 54u8, 123u8, 58u8, 206u8, 242u8, 182u8, 89u8, 252u8, 19u8,
                            184u8,
                        ],
                    )
                }
                #[doc = "Removes a previously spawned anonymous proxy."]
                #[doc = ""]
                #[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
                #[doc = "inaccessible."]
                #[doc = ""]
                #[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
                #[doc = "`anonymous` with corresponding parameters."]
                #[doc = ""]
                #[doc = "- `spawner`: The account that originally called `anonymous` to create this account."]
                #[doc = "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`."]
                #[doc = "- `proxy_type`: The proxy type originally passed to `anonymous`."]
                #[doc = "- `height`: The height of the chain when the call to `anonymous` was processed."]
                #[doc = "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed."]
                #[doc = ""]
                #[doc = "Fails with `NoPermission` in case the caller is not a previously created anonymous"]
                #[doc = "account whose `anonymous` call has corresponding parameters."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of the number of proxies the user has (P)."]
                #[doc = "# </weight>"]
                pub fn kill_anonymous(
                    &self,
                    spawner: subxt::ext::sp_core::crypto::AccountId32,
                    proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
                    index: ::core::primitive::u16,
                    height: ::core::primitive::u32,
                    ext_index: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<KillAnonymous> {
                    subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "kill_anonymous",
                        KillAnonymous {
                            spawner,
                            proxy_type,
                            index,
                            height,
                            ext_index,
                        },
                        [
                            91u8, 25u8, 147u8, 142u8, 196u8, 66u8, 32u8, 133u8, 106u8, 233u8,
                            186u8, 249u8, 197u8, 169u8, 182u8, 136u8, 179u8, 185u8, 229u8, 195u8,
                            149u8, 40u8, 76u8, 22u8, 157u8, 62u8, 157u8, 200u8, 111u8, 119u8, 2u8,
                            31u8,
                        ],
                    )
                }
                #[doc = "Publish the hash of a proxy-call that will be made in the future."]
                #[doc = ""]
                #[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
                #[doc = "if the delay associated with the proxy relationship is greater than zero."]
                #[doc = ""]
                #[doc = "No more than `MaxPending` announcements may be made at any one time."]
                #[doc = ""]
                #[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
                #[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of:"]
                #[doc = "- A: the number of announcements made."]
                #[doc = "- P: the number of proxies the user has."]
                #[doc = "# </weight>"]
                pub fn announce(
                    &self,
                    real: subxt::ext::sp_core::crypto::AccountId32,
                    call_hash: subxt::ext::sp_core::H256,
                ) -> subxt::tx::StaticTxPayload<Announce> {
                    subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "announce",
                        Announce { real, call_hash },
                        [
                            99u8, 237u8, 158u8, 131u8, 185u8, 119u8, 88u8, 167u8, 253u8, 29u8,
                            82u8, 216u8, 225u8, 33u8, 181u8, 244u8, 85u8, 176u8, 106u8, 66u8,
                            166u8, 174u8, 218u8, 98u8, 119u8, 86u8, 218u8, 89u8, 150u8, 255u8,
                            86u8, 40u8,
                        ],
                    )
                }
                #[doc = "Remove a given announcement."]
                #[doc = ""]
                #[doc = "May be called by a proxy account to remove a call they previously announced and return"]
                #[doc = "the deposit."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of:"]
                #[doc = "- A: the number of announcements made."]
                #[doc = "- P: the number of proxies the user has."]
                #[doc = "# </weight>"]
                pub fn remove_announcement(
                    &self,
                    real: subxt::ext::sp_core::crypto::AccountId32,
                    call_hash: subxt::ext::sp_core::H256,
                ) -> subxt::tx::StaticTxPayload<RemoveAnnouncement> {
                    subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "remove_announcement",
                        RemoveAnnouncement { real, call_hash },
                        [
                            197u8, 54u8, 240u8, 51u8, 65u8, 218u8, 154u8, 165u8, 24u8, 54u8, 157u8,
                            30u8, 144u8, 22u8, 247u8, 177u8, 105u8, 38u8, 9u8, 25u8, 127u8, 36u8,
                            97u8, 84u8, 18u8, 3u8, 246u8, 238u8, 60u8, 17u8, 236u8, 69u8,
                        ],
                    )
                }
                #[doc = "Remove the given announcement of a delegate."]
                #[doc = ""]
                #[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
                #[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `delegate`: The account that previously announced the call."]
                #[doc = "- `call_hash`: The hash of the call to be made."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of:"]
                #[doc = "- A: the number of announcements made."]
                #[doc = "- P: the number of proxies the user has."]
                #[doc = "# </weight>"]
                pub fn reject_announcement(
                    &self,
                    delegate: subxt::ext::sp_core::crypto::AccountId32,
                    call_hash: subxt::ext::sp_core::H256,
                ) -> subxt::tx::StaticTxPayload<RejectAnnouncement> {
                    subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "reject_announcement",
                        RejectAnnouncement {
                            delegate,
                            call_hash,
                        },
                        [
                            205u8, 123u8, 102u8, 30u8, 196u8, 250u8, 247u8, 50u8, 243u8, 55u8,
                            67u8, 66u8, 160u8, 147u8, 92u8, 204u8, 75u8, 69u8, 68u8, 140u8, 40u8,
                            250u8, 53u8, 203u8, 228u8, 239u8, 62u8, 66u8, 254u8, 30u8, 126u8,
                            206u8,
                        ],
                    )
                }
                #[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
                #[doc = "`add_proxy`."]
                #[doc = ""]
                #[doc = "Removes any corresponding announcement(s)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                #[doc = "- `call`: The call to be made by the `real` account."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of:"]
                #[doc = "- A: the number of announcements made."]
                #[doc = "- P: the number of proxies the user has."]
                #[doc = "# </weight>"]
                pub fn proxy_announced(
                    &self,
                    delegate: subxt::ext::sp_core::crypto::AccountId32,
                    real: subxt::ext::sp_core::crypto::AccountId32,
                    force_proxy_type: ::core::option::Option<
                        runtime_types::composable_traits::account_proxy::ProxyType,
                    >,
                    call: runtime_types::dali_runtime::Call,
                ) -> subxt::tx::StaticTxPayload<ProxyAnnounced> {
                    subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "proxy_announced",
                        ProxyAnnounced {
                            delegate,
                            real,
                            force_proxy_type,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            56u8, 121u8, 208u8, 200u8, 19u8, 62u8, 210u8, 136u8, 67u8, 176u8,
                            113u8, 118u8, 107u8, 232u8, 19u8, 251u8, 251u8, 95u8, 250u8, 226u8,
                            99u8, 55u8, 233u8, 6u8, 176u8, 146u8, 23u8, 121u8, 11u8, 34u8, 179u8,
                            248u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_proxy::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A proxy was executed correctly, with the given."]
            pub struct ProxyExecuted {
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl subxt::events::StaticEvent for ProxyExecuted {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyExecuted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Anonymous account has been created by new proxy with given"]
            #[doc = "disambiguation index and proxy type."]
            pub struct AnonymousCreated {
                pub anonymous: subxt::ext::sp_core::crypto::AccountId32,
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
                pub disambiguation_index: ::core::primitive::u16,
            }
            impl subxt::events::StaticEvent for AnonymousCreated {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "AnonymousCreated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An announcement was placed to make a call in the future."]
            pub struct Announced {
                pub real: subxt::ext::sp_core::crypto::AccountId32,
                pub proxy: subxt::ext::sp_core::crypto::AccountId32,
                pub call_hash: subxt::ext::sp_core::H256,
            }
            impl subxt::events::StaticEvent for Announced {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "Announced";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A proxy was added."]
            pub struct ProxyAdded {
                pub delegator: subxt::ext::sp_core::crypto::AccountId32,
                pub delegatee: subxt::ext::sp_core::crypto::AccountId32,
                pub proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
                pub delay: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for ProxyAdded {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyAdded";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A proxy was removed."]
            pub struct ProxyRemoved {
                pub delegator: subxt::ext::sp_core::crypto::AccountId32,
                pub delegatee: subxt::ext::sp_core::crypto::AccountId32,
                pub proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
                pub delay: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for ProxyRemoved {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyRemoved";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
                #[doc = " which are being delegated to, together with the amount held on deposit."]
                pub fn proxies(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::ProxyDefinition<
                                subxt::ext::sp_core::crypto::AccountId32,
                                runtime_types::composable_traits::account_proxy::ProxyType,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    )>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Proxy",
                        "Proxies",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            76u8, 31u8, 129u8, 228u8, 130u8, 201u8, 134u8, 170u8, 189u8, 155u8,
                            77u8, 38u8, 48u8, 227u8, 51u8, 50u8, 10u8, 218u8, 25u8, 176u8, 138u8,
                            85u8, 76u8, 23u8, 36u8, 225u8, 18u8, 67u8, 31u8, 107u8, 189u8, 35u8,
                        ],
                    )
                }
                #[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
                #[doc = " which are being delegated to, together with the amount held on deposit."]
                pub fn proxies_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::ProxyDefinition<
                                subxt::ext::sp_core::crypto::AccountId32,
                                runtime_types::composable_traits::account_proxy::ProxyType,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    )>,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Proxy",
                        "Proxies",
                        Vec::new(),
                        [
                            76u8, 31u8, 129u8, 228u8, 130u8, 201u8, 134u8, 170u8, 189u8, 155u8,
                            77u8, 38u8, 48u8, 227u8, 51u8, 50u8, 10u8, 218u8, 25u8, 176u8, 138u8,
                            85u8, 76u8, 23u8, 36u8, 225u8, 18u8, 67u8, 31u8, 107u8, 189u8, 35u8,
                        ],
                    )
                }
                #[doc = " The announcements made by the proxy (key)."]
                pub fn announcements(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::Announcement<
                                subxt::ext::sp_core::crypto::AccountId32,
                                subxt::ext::sp_core::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    )>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Proxy",
                        "Announcements",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            233u8, 38u8, 249u8, 89u8, 103u8, 87u8, 64u8, 52u8, 140u8, 228u8, 110u8,
                            37u8, 8u8, 92u8, 48u8, 7u8, 46u8, 99u8, 179u8, 83u8, 232u8, 171u8,
                            160u8, 45u8, 37u8, 23u8, 151u8, 198u8, 237u8, 103u8, 217u8, 53u8,
                        ],
                    )
                }
                #[doc = " The announcements made by the proxy (key)."]
                pub fn announcements_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::Announcement<
                                subxt::ext::sp_core::crypto::AccountId32,
                                subxt::ext::sp_core::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    )>,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Proxy",
                        "Announcements",
                        Vec::new(),
                        [
                            233u8, 38u8, 249u8, 89u8, 103u8, 87u8, 64u8, 52u8, 140u8, 228u8, 110u8,
                            37u8, 8u8, 92u8, 48u8, 7u8, 46u8, 99u8, 179u8, 83u8, 232u8, 171u8,
                            160u8, 45u8, 37u8, 23u8, 151u8, 198u8, 237u8, 103u8, 217u8, 53u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The base amount of currency needed to reserve for creating a proxy."]
                #[doc = ""]
                #[doc = " This is held for an additional storage item whose value size is"]
                #[doc = " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."]
                pub fn proxy_deposit_base(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Proxy",
                        "ProxyDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per proxy added."]
                #[doc = ""]
                #[doc = " This is held for adding 32 bytes plus an instance of `ProxyType` more into a"]
                #[doc = " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take"]
                #[doc = " into account `32 + proxy_type.encode().len()` bytes of data."]
                pub fn proxy_deposit_factor(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Proxy",
                        "ProxyDepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of proxies allowed for a single account."]
                pub fn max_proxies(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Proxy",
                        "MaxProxies",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of time-delayed announcements that are allowed to be pending."]
                pub fn max_pending(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Proxy",
                        "MaxPending",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The base amount of currency needed to reserve for creating an announcement."]
                #[doc = ""]
                #[doc = " This is held when a new storage item holding a `Balance` is created (typically 16"]
                #[doc = " bytes)."]
                pub fn announcement_deposit_base(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Proxy",
                        "AnnouncementDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per announcement made."]
                #[doc = ""]
                #[doc = " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)"]
                #[doc = " into a pre-existing storage value."]
                pub fn announcement_deposit_factor(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Proxy",
                        "AnnouncementDepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod xcmp_queue {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ServiceOverweight {
                pub index: ::core::primitive::u64,
                pub weight_limit: ::core::primitive::u64,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SuspendXcmExecution;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ResumeXcmExecution;
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct UpdateSuspendThreshold {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct UpdateDropThreshold {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct UpdateResumeThreshold {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct UpdateThresholdWeight {
                pub new: ::core::primitive::u64,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct UpdateWeightRestrictDecay {
                pub new: ::core::primitive::u64,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct UpdateXcmpMaxIndividualWeight {
                pub new: ::core::primitive::u64,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Services a single overweight XCM."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `ExecuteOverweightOrigin`."]
                #[doc = "- `index`: The index of the overweight XCM to service"]
                #[doc = "- `weight_limit`: The amount of weight that XCM execution may take."]
                #[doc = ""]
                #[doc = "Errors:"]
                #[doc = "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map."]
                #[doc = "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format."]
                #[doc = "- `WeightOverLimit`: XCM execution may use greater `weight_limit`."]
                #[doc = ""]
                #[doc = "Events:"]
                #[doc = "- `OverweightServiced`: On success."]
                pub fn service_overweight(
                    &self,
                    index: ::core::primitive::u64,
                    weight_limit: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<ServiceOverweight> {
                    subxt::tx::StaticTxPayload::new(
                        "XcmpQueue",
                        "service_overweight",
                        ServiceOverweight {
                            index,
                            weight_limit,
                        },
                        [
                            225u8, 41u8, 132u8, 91u8, 28u8, 116u8, 89u8, 197u8, 194u8, 131u8, 28u8,
                            217u8, 102u8, 241u8, 122u8, 230u8, 242u8, 75u8, 83u8, 67u8, 104u8,
                            55u8, 133u8, 129u8, 91u8, 25u8, 185u8, 131u8, 22u8, 253u8, 84u8, 221u8,
                        ],
                    )
                }
                #[doc = "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `ControllerOrigin`."]
                pub fn suspend_xcm_execution(
                    &self,
                ) -> subxt::tx::StaticTxPayload<SuspendXcmExecution> {
                    subxt::tx::StaticTxPayload::new(
                        "XcmpQueue",
                        "suspend_xcm_execution",
                        SuspendXcmExecution {},
                        [
                            139u8, 76u8, 166u8, 86u8, 106u8, 144u8, 16u8, 47u8, 105u8, 185u8, 7u8,
                            7u8, 63u8, 14u8, 250u8, 236u8, 99u8, 121u8, 101u8, 143u8, 28u8, 175u8,
                            108u8, 197u8, 226u8, 43u8, 103u8, 92u8, 186u8, 12u8, 51u8, 153u8,
                        ],
                    )
                }
                #[doc = "Resumes all XCM executions for the XCMP queue."]
                #[doc = ""]
                #[doc = "Note that this function doesn't change the status of the in/out bound channels."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `ControllerOrigin`."]
                pub fn resume_xcm_execution(
                    &self,
                ) -> subxt::tx::StaticTxPayload<ResumeXcmExecution> {
                    subxt::tx::StaticTxPayload::new(
                        "XcmpQueue",
                        "resume_xcm_execution",
                        ResumeXcmExecution {},
                        [
                            67u8, 111u8, 47u8, 237u8, 79u8, 42u8, 90u8, 56u8, 245u8, 2u8, 20u8,
                            23u8, 33u8, 121u8, 135u8, 50u8, 204u8, 147u8, 195u8, 80u8, 177u8,
                            202u8, 8u8, 160u8, 164u8, 138u8, 64u8, 252u8, 178u8, 63u8, 102u8,
                            245u8,
                        ],
                    )
                }
                #[doc = "Overwrites the number of pages of messages which must be in the queue for the other side to be told to"]
                #[doc = "suspend their sending."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `Root`."]
                #[doc = "- `new`: Desired value for `QueueConfigData.suspend_value`"]
                pub fn update_suspend_threshold(
                    &self,
                    new: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<UpdateSuspendThreshold> {
                    subxt::tx::StaticTxPayload::new(
                        "XcmpQueue",
                        "update_suspend_threshold",
                        UpdateSuspendThreshold { new },
                        [
                            155u8, 120u8, 9u8, 228u8, 110u8, 62u8, 233u8, 36u8, 57u8, 85u8, 19u8,
                            67u8, 246u8, 88u8, 81u8, 116u8, 243u8, 236u8, 174u8, 130u8, 8u8, 246u8,
                            254u8, 97u8, 155u8, 207u8, 123u8, 60u8, 164u8, 14u8, 196u8, 97u8,
                        ],
                    )
                }
                #[doc = "Overwrites the number of pages of messages which must be in the queue after which we drop any further"]
                #[doc = "messages from the channel."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `Root`."]
                #[doc = "- `new`: Desired value for `QueueConfigData.drop_threshold`"]
                pub fn update_drop_threshold(
                    &self,
                    new: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<UpdateDropThreshold> {
                    subxt::tx::StaticTxPayload::new(
                        "XcmpQueue",
                        "update_drop_threshold",
                        UpdateDropThreshold { new },
                        [
                            146u8, 177u8, 164u8, 96u8, 247u8, 182u8, 229u8, 175u8, 194u8, 101u8,
                            186u8, 168u8, 94u8, 114u8, 172u8, 119u8, 35u8, 222u8, 175u8, 21u8,
                            67u8, 61u8, 216u8, 144u8, 194u8, 10u8, 181u8, 62u8, 166u8, 198u8,
                            138u8, 243u8,
                        ],
                    )
                }
                #[doc = "Overwrites the number of pages of messages which the queue must be reduced to before it signals that"]
                #[doc = "message sending may recommence after it has been suspended."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `Root`."]
                #[doc = "- `new`: Desired value for `QueueConfigData.resume_threshold`"]
                pub fn update_resume_threshold(
                    &self,
                    new: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<UpdateResumeThreshold> {
                    subxt::tx::StaticTxPayload::new(
                        "XcmpQueue",
                        "update_resume_threshold",
                        UpdateResumeThreshold { new },
                        [
                            231u8, 128u8, 80u8, 179u8, 61u8, 50u8, 103u8, 209u8, 103u8, 55u8,
                            101u8, 113u8, 150u8, 10u8, 202u8, 7u8, 0u8, 77u8, 58u8, 4u8, 227u8,
                            17u8, 225u8, 112u8, 121u8, 203u8, 184u8, 113u8, 231u8, 156u8, 174u8,
                            154u8,
                        ],
                    )
                }
                #[doc = "Overwrites the amount of remaining weight under which we stop processing messages."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `Root`."]
                #[doc = "- `new`: Desired value for `QueueConfigData.threshold_weight`"]
                pub fn update_threshold_weight(
                    &self,
                    new: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<UpdateThresholdWeight> {
                    subxt::tx::StaticTxPayload::new(
                        "XcmpQueue",
                        "update_threshold_weight",
                        UpdateThresholdWeight { new },
                        [
                            129u8, 208u8, 93u8, 179u8, 45u8, 236u8, 84u8, 209u8, 37u8, 226u8, 88u8,
                            123u8, 156u8, 101u8, 93u8, 84u8, 110u8, 61u8, 56u8, 45u8, 14u8, 120u8,
                            181u8, 71u8, 174u8, 104u8, 225u8, 36u8, 17u8, 74u8, 94u8, 59u8,
                        ],
                    )
                }
                #[doc = "Overwrites the speed to which the available weight approaches the maximum weight."]
                #[doc = "A lower number results in a faster progression. A value of 1 makes the entire weight available initially."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `Root`."]
                #[doc = "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."]
                pub fn update_weight_restrict_decay(
                    &self,
                    new: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<UpdateWeightRestrictDecay> {
                    subxt::tx::StaticTxPayload::new(
                        "XcmpQueue",
                        "update_weight_restrict_decay",
                        UpdateWeightRestrictDecay { new },
                        [
                            73u8, 98u8, 189u8, 10u8, 137u8, 162u8, 71u8, 54u8, 24u8, 117u8, 15u8,
                            137u8, 251u8, 121u8, 86u8, 5u8, 123u8, 42u8, 151u8, 244u8, 200u8,
                            140u8, 104u8, 149u8, 101u8, 14u8, 58u8, 163u8, 208u8, 205u8, 177u8,
                            142u8,
                        ],
                    )
                }
                #[doc = "Overwrite the maximum amount of weight any individual message may consume."]
                #[doc = "Messages above this weight go into the overweight queue and may only be serviced explicitly."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `Root`."]
                #[doc = "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."]
                pub fn update_xcmp_max_individual_weight(
                    &self,
                    new: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<UpdateXcmpMaxIndividualWeight> {
                    subxt::tx::StaticTxPayload::new(
                        "XcmpQueue",
                        "update_xcmp_max_individual_weight",
                        UpdateXcmpMaxIndividualWeight { new },
                        [
                            52u8, 93u8, 25u8, 215u8, 36u8, 235u8, 88u8, 49u8, 142u8, 132u8, 57u8,
                            2u8, 204u8, 195u8, 166u8, 254u8, 235u8, 247u8, 142u8, 207u8, 224u8,
                            43u8, 7u8, 106u8, 142u8, 3u8, 188u8, 101u8, 9u8, 75u8, 57u8, 39u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::cumulus_pallet_xcmp_queue::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Some XCM was executed ok."]
            pub struct Success {
                pub message_hash: ::core::option::Option<subxt::ext::sp_core::H256>,
                pub weight: ::core::primitive::u64,
            }
            impl subxt::events::StaticEvent for Success {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "Success";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Some XCM failed."]
            pub struct Fail {
                pub message_hash: ::core::option::Option<subxt::ext::sp_core::H256>,
                pub error: runtime_types::xcm::v2::traits::Error,
                pub weight: ::core::primitive::u64,
            }
            impl subxt::events::StaticEvent for Fail {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "Fail";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Bad XCM version used."]
            pub struct BadVersion {
                pub message_hash: ::core::option::Option<subxt::ext::sp_core::H256>,
            }
            impl subxt::events::StaticEvent for BadVersion {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "BadVersion";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Bad XCM format used."]
            pub struct BadFormat {
                pub message_hash: ::core::option::Option<subxt::ext::sp_core::H256>,
            }
            impl subxt::events::StaticEvent for BadFormat {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "BadFormat";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An upward message was sent to the relay chain."]
            pub struct UpwardMessageSent {
                pub message_hash: ::core::option::Option<subxt::ext::sp_core::H256>,
            }
            impl subxt::events::StaticEvent for UpwardMessageSent {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "UpwardMessageSent";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An HRMP message was sent to a sibling parachain."]
            pub struct XcmpMessageSent {
                pub message_hash: ::core::option::Option<subxt::ext::sp_core::H256>,
            }
            impl subxt::events::StaticEvent for XcmpMessageSent {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "XcmpMessageSent";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An XCM exceeded the individual message weight budget."]
            pub struct OverweightEnqueued {
                pub sender: runtime_types::polkadot_parachain::primitives::Id,
                pub sent_at: ::core::primitive::u32,
                pub index: ::core::primitive::u64,
                pub required: ::core::primitive::u64,
            }
            impl subxt::events::StaticEvent for OverweightEnqueued {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "OverweightEnqueued";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An XCM from the overweight queue was executed with the given actual weight used."]
            pub struct OverweightServiced {
                pub index: ::core::primitive::u64,
                pub used: ::core::primitive::u64,
            }
            impl subxt::events::StaticEvent for OverweightServiced {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "OverweightServiced";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Status of the inbound XCMP channels."]
                pub fn inbound_xcmp_status(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<
                            runtime_types::cumulus_pallet_xcmp_queue::InboundChannelDetails,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "XcmpQueue",
                        "InboundXcmpStatus",
                        vec![],
                        [
                            183u8, 198u8, 237u8, 153u8, 132u8, 201u8, 87u8, 182u8, 121u8, 164u8,
                            129u8, 241u8, 58u8, 192u8, 115u8, 152u8, 7u8, 33u8, 95u8, 51u8, 2u8,
                            176u8, 144u8, 12u8, 125u8, 83u8, 92u8, 198u8, 211u8, 101u8, 28u8, 50u8,
                        ],
                    )
                }
                #[doc = " Inbound aggregate XCMP messages. It can only be one per ParaId/block."]
                pub fn inbound_xcmp_messages(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "XcmpQueue",
                        "InboundXcmpMessages",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Twox64Concat,
                            ),
                        ],
                        [
                            157u8, 232u8, 222u8, 97u8, 218u8, 96u8, 96u8, 90u8, 216u8, 205u8, 39u8,
                            130u8, 109u8, 152u8, 127u8, 57u8, 54u8, 63u8, 104u8, 135u8, 33u8,
                            175u8, 197u8, 166u8, 238u8, 22u8, 137u8, 162u8, 226u8, 199u8, 87u8,
                            25u8,
                        ],
                    )
                }
                #[doc = " Inbound aggregate XCMP messages. It can only be one per ParaId/block."]
                pub fn inbound_xcmp_messages_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "XcmpQueue",
                        "InboundXcmpMessages",
                        Vec::new(),
                        [
                            157u8, 232u8, 222u8, 97u8, 218u8, 96u8, 96u8, 90u8, 216u8, 205u8, 39u8,
                            130u8, 109u8, 152u8, 127u8, 57u8, 54u8, 63u8, 104u8, 135u8, 33u8,
                            175u8, 197u8, 166u8, 238u8, 22u8, 137u8, 162u8, 226u8, 199u8, 87u8,
                            25u8,
                        ],
                    )
                }
                #[doc = " The non-empty XCMP channels in order of becoming non-empty, and the index of the first"]
                #[doc = " and last outbound message. If the two indices are equal, then it indicates an empty"]
                #[doc = " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater"]
                #[doc = " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in"]
                #[doc = " case of the need to send a high-priority signal message this block."]
                #[doc = " The bool is true if there is a signal message waiting to be sent."]
                pub fn outbound_xcmp_status(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<
                            runtime_types::cumulus_pallet_xcmp_queue::OutboundChannelDetails,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "XcmpQueue",
                        "OutboundXcmpStatus",
                        vec![],
                        [
                            238u8, 120u8, 185u8, 141u8, 82u8, 159u8, 41u8, 68u8, 204u8, 15u8, 46u8,
                            152u8, 144u8, 74u8, 250u8, 83u8, 71u8, 105u8, 54u8, 53u8, 226u8, 87u8,
                            14u8, 202u8, 58u8, 160u8, 54u8, 162u8, 239u8, 248u8, 227u8, 116u8,
                        ],
                    )
                }
                #[doc = " The messages outbound in a given XCMP channel."]
                pub fn outbound_xcmp_messages(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u16>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "XcmpQueue",
                        "OutboundXcmpMessages",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Twox64Concat,
                            ),
                        ],
                        [
                            50u8, 182u8, 237u8, 191u8, 106u8, 67u8, 54u8, 1u8, 17u8, 107u8, 70u8,
                            90u8, 202u8, 8u8, 63u8, 184u8, 171u8, 111u8, 192u8, 196u8, 7u8, 31u8,
                            186u8, 68u8, 31u8, 63u8, 71u8, 61u8, 83u8, 223u8, 79u8, 200u8,
                        ],
                    )
                }
                #[doc = " The messages outbound in a given XCMP channel."]
                pub fn outbound_xcmp_messages_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "XcmpQueue",
                        "OutboundXcmpMessages",
                        Vec::new(),
                        [
                            50u8, 182u8, 237u8, 191u8, 106u8, 67u8, 54u8, 1u8, 17u8, 107u8, 70u8,
                            90u8, 202u8, 8u8, 63u8, 184u8, 171u8, 111u8, 192u8, 196u8, 7u8, 31u8,
                            186u8, 68u8, 31u8, 63u8, 71u8, 61u8, 83u8, 223u8, 79u8, 200u8,
                        ],
                    )
                }
                #[doc = " Any signal messages waiting to be sent."]
                pub fn signal_messages(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "XcmpQueue",
                        "SignalMessages",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            156u8, 242u8, 186u8, 89u8, 177u8, 195u8, 90u8, 121u8, 94u8, 106u8,
                            222u8, 78u8, 19u8, 162u8, 179u8, 96u8, 38u8, 113u8, 209u8, 148u8, 29u8,
                            110u8, 106u8, 167u8, 162u8, 96u8, 221u8, 20u8, 33u8, 179u8, 168u8,
                            142u8,
                        ],
                    )
                }
                #[doc = " Any signal messages waiting to be sent."]
                pub fn signal_messages_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "XcmpQueue",
                        "SignalMessages",
                        Vec::new(),
                        [
                            156u8, 242u8, 186u8, 89u8, 177u8, 195u8, 90u8, 121u8, 94u8, 106u8,
                            222u8, 78u8, 19u8, 162u8, 179u8, 96u8, 38u8, 113u8, 209u8, 148u8, 29u8,
                            110u8, 106u8, 167u8, 162u8, 96u8, 221u8, 20u8, 33u8, 179u8, 168u8,
                            142u8,
                        ],
                    )
                }
                #[doc = " The configuration which controls the dynamics of the outbound queue."]
                pub fn queue_config(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::cumulus_pallet_xcmp_queue::QueueConfigData,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "XcmpQueue",
                        "QueueConfig",
                        vec![],
                        [
                            19u8, 251u8, 183u8, 11u8, 104u8, 50u8, 57u8, 111u8, 143u8, 89u8, 220u8,
                            164u8, 171u8, 188u8, 161u8, 46u8, 70u8, 6u8, 12u8, 88u8, 151u8, 92u8,
                            140u8, 28u8, 113u8, 51u8, 147u8, 57u8, 150u8, 206u8, 179u8, 152u8,
                        ],
                    )
                }
                #[doc = " The messages that exceeded max individual message weight budget."]
                #[doc = ""]
                #[doc = " These message stay in this storage map until they are manually dispatched via"]
                #[doc = " `service_overweight`."]
                pub fn overweight(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        runtime_types::polkadot_parachain::primitives::Id,
                        ::core::primitive::u32,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "XcmpQueue",
                        "Overweight",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            222u8, 249u8, 232u8, 110u8, 117u8, 229u8, 165u8, 164u8, 219u8, 219u8,
                            149u8, 204u8, 25u8, 78u8, 204u8, 116u8, 111u8, 114u8, 120u8, 222u8,
                            56u8, 77u8, 122u8, 147u8, 108u8, 15u8, 94u8, 161u8, 212u8, 50u8, 7u8,
                            7u8,
                        ],
                    )
                }
                #[doc = " The messages that exceeded max individual message weight budget."]
                #[doc = ""]
                #[doc = " These message stay in this storage map until they are manually dispatched via"]
                #[doc = " `service_overweight`."]
                pub fn overweight_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        runtime_types::polkadot_parachain::primitives::Id,
                        ::core::primitive::u32,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "XcmpQueue",
                        "Overweight",
                        Vec::new(),
                        [
                            222u8, 249u8, 232u8, 110u8, 117u8, 229u8, 165u8, 164u8, 219u8, 219u8,
                            149u8, 204u8, 25u8, 78u8, 204u8, 116u8, 111u8, 114u8, 120u8, 222u8,
                            56u8, 77u8, 122u8, 147u8, 108u8, 15u8, 94u8, 161u8, 212u8, 50u8, 7u8,
                            7u8,
                        ],
                    )
                }
                #[doc = " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next"]
                #[doc = " available free overweight index."]
                pub fn overweight_count(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "XcmpQueue",
                        "OverweightCount",
                        vec![],
                        [
                            102u8, 180u8, 196u8, 148u8, 115u8, 62u8, 46u8, 238u8, 97u8, 116u8,
                            117u8, 42u8, 14u8, 5u8, 72u8, 237u8, 230u8, 46u8, 150u8, 126u8, 89u8,
                            64u8, 233u8, 166u8, 180u8, 137u8, 52u8, 233u8, 252u8, 255u8, 36u8,
                            20u8,
                        ],
                    )
                }
                #[doc = " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."]
                pub fn queue_suspended(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::bool>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "XcmpQueue",
                        "QueueSuspended",
                        vec![],
                        [
                            23u8, 37u8, 48u8, 112u8, 222u8, 17u8, 252u8, 65u8, 160u8, 217u8, 218u8,
                            30u8, 2u8, 1u8, 204u8, 0u8, 251u8, 17u8, 138u8, 197u8, 164u8, 50u8,
                            122u8, 0u8, 31u8, 238u8, 147u8, 213u8, 30u8, 132u8, 184u8, 215u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod relayer_xcm {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Send {
                pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct TeleportAssets {
                pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                pub fee_asset_item: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ReserveTransferAssets {
                pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                pub fee_asset_item: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Execute {
                pub message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
                pub max_weight: ::core::primitive::u64,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ForceXcmVersion {
                pub location:
                    ::std::boxed::Box<runtime_types::xcm::v1::multilocation::MultiLocation>,
                pub xcm_version: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ForceDefaultXcmVersion {
                pub maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ForceSubscribeVersionNotify {
                pub location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ForceUnsubscribeVersionNotify {
                pub location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct LimitedReserveTransferAssets {
                pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                pub fee_asset_item: ::core::primitive::u32,
                pub weight_limit: runtime_types::xcm::v2::WeightLimit,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct LimitedTeleportAssets {
                pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                pub fee_asset_item: ::core::primitive::u32,
                pub weight_limit: runtime_types::xcm::v2::WeightLimit,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn send(
                    &self,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    message: runtime_types::xcm::VersionedXcm,
                ) -> subxt::tx::StaticTxPayload<Send> {
                    subxt::tx::StaticTxPayload::new(
                        "RelayerXcm",
                        "send",
                        Send {
                            dest: ::std::boxed::Box::new(dest),
                            message: ::std::boxed::Box::new(message),
                        },
                        [
                            190u8, 88u8, 197u8, 248u8, 111u8, 198u8, 199u8, 206u8, 39u8, 121u8,
                            23u8, 121u8, 93u8, 82u8, 22u8, 61u8, 96u8, 210u8, 142u8, 249u8, 195u8,
                            78u8, 44u8, 8u8, 118u8, 120u8, 113u8, 168u8, 99u8, 94u8, 232u8, 4u8,
                        ],
                    )
                }
                #[doc = "Teleport some assets from the local chain to some destination chain."]
                #[doc = ""]
                #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                #[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
                #[doc = "with all fees taken as needed from the asset."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
                #[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
                #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
                #[doc = "  an `AccountId32` value."]
                #[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
                #[doc = "  `dest` side. May not be empty."]
                #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                #[doc = "  fees."]
                pub fn teleport_assets(
                    &self,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    beneficiary: runtime_types::xcm::VersionedMultiLocation,
                    assets: runtime_types::xcm::VersionedMultiAssets,
                    fee_asset_item: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<TeleportAssets> {
                    subxt::tx::StaticTxPayload::new(
                        "RelayerXcm",
                        "teleport_assets",
                        TeleportAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                        },
                        [
                            255u8, 5u8, 68u8, 38u8, 44u8, 181u8, 75u8, 221u8, 239u8, 103u8, 88u8,
                            47u8, 136u8, 90u8, 253u8, 55u8, 0u8, 122u8, 217u8, 126u8, 13u8, 77u8,
                            209u8, 41u8, 7u8, 35u8, 235u8, 171u8, 150u8, 235u8, 202u8, 240u8,
                        ],
                    )
                }
                #[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
                #[doc = "chain and forward a notification XCM."]
                #[doc = ""]
                #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                #[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
                #[doc = "with all fees taken as needed from the asset."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
                #[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
                #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
                #[doc = "  an `AccountId32` value."]
                #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
                #[doc = "  `dest` side."]
                #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                #[doc = "  fees."]
                pub fn reserve_transfer_assets(
                    &self,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    beneficiary: runtime_types::xcm::VersionedMultiLocation,
                    assets: runtime_types::xcm::VersionedMultiAssets,
                    fee_asset_item: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<ReserveTransferAssets> {
                    subxt::tx::StaticTxPayload::new(
                        "RelayerXcm",
                        "reserve_transfer_assets",
                        ReserveTransferAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                        },
                        [
                            177u8, 160u8, 188u8, 106u8, 153u8, 135u8, 121u8, 12u8, 83u8, 233u8,
                            43u8, 161u8, 133u8, 26u8, 104u8, 79u8, 113u8, 8u8, 33u8, 128u8, 82u8,
                            62u8, 30u8, 46u8, 203u8, 199u8, 175u8, 193u8, 55u8, 130u8, 206u8, 28u8,
                        ],
                    )
                }
                #[doc = "Execute an XCM message from a local, signed, origin."]
                #[doc = ""]
                #[doc = "An event is deposited indicating whether `msg` could be executed completely or only"]
                #[doc = "partially."]
                #[doc = ""]
                #[doc = "No more than `max_weight` will be used in its attempted execution. If this is less than the"]
                #[doc = "maximum amount of weight that the message could take to be executed, then no execution"]
                #[doc = "attempt will be made."]
                #[doc = ""]
                #[doc = "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully"]
                #[doc = "to completion; only that *some* of it was executed."]
                pub fn execute(
                    &self,
                    message: runtime_types::xcm::VersionedXcm,
                    max_weight: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<Execute> {
                    subxt::tx::StaticTxPayload::new(
                        "RelayerXcm",
                        "execute",
                        Execute {
                            message: ::std::boxed::Box::new(message),
                            max_weight,
                        },
                        [
                            191u8, 177u8, 39u8, 21u8, 1u8, 110u8, 39u8, 58u8, 94u8, 27u8, 44u8,
                            18u8, 253u8, 135u8, 100u8, 205u8, 0u8, 231u8, 68u8, 247u8, 5u8, 140u8,
                            131u8, 184u8, 251u8, 197u8, 100u8, 113u8, 253u8, 255u8, 120u8, 206u8,
                        ],
                    )
                }
                #[doc = "Extoll that a particular destination can be communicated with through a particular"]
                #[doc = "version of XCM."]
                #[doc = ""]
                #[doc = "- `origin`: Must be Root."]
                #[doc = "- `location`: The destination that is being described."]
                #[doc = "- `xcm_version`: The latest version of XCM that `location` supports."]
                pub fn force_xcm_version(
                    &self,
                    location: runtime_types::xcm::v1::multilocation::MultiLocation,
                    xcm_version: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<ForceXcmVersion> {
                    subxt::tx::StaticTxPayload::new(
                        "RelayerXcm",
                        "force_xcm_version",
                        ForceXcmVersion {
                            location: ::std::boxed::Box::new(location),
                            xcm_version,
                        },
                        [
                            231u8, 106u8, 60u8, 226u8, 31u8, 25u8, 20u8, 115u8, 107u8, 246u8,
                            248u8, 11u8, 71u8, 183u8, 93u8, 3u8, 219u8, 21u8, 97u8, 188u8, 119u8,
                            121u8, 239u8, 72u8, 200u8, 81u8, 6u8, 177u8, 111u8, 188u8, 168u8, 86u8,
                        ],
                    )
                }
                #[doc = "Set a safe XCM version (the version that XCM should be encoded with if the most recent"]
                #[doc = "version a destination can accept is unknown)."]
                #[doc = ""]
                #[doc = "- `origin`: Must be Root."]
                #[doc = "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."]
                pub fn force_default_xcm_version(
                    &self,
                    maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
                ) -> subxt::tx::StaticTxPayload<ForceDefaultXcmVersion> {
                    subxt::tx::StaticTxPayload::new(
                        "RelayerXcm",
                        "force_default_xcm_version",
                        ForceDefaultXcmVersion { maybe_xcm_version },
                        [
                            38u8, 36u8, 59u8, 231u8, 18u8, 79u8, 76u8, 9u8, 200u8, 125u8, 214u8,
                            166u8, 37u8, 99u8, 111u8, 161u8, 135u8, 2u8, 133u8, 157u8, 165u8, 18u8,
                            152u8, 81u8, 209u8, 255u8, 137u8, 237u8, 28u8, 126u8, 224u8, 141u8,
                        ],
                    )
                }
                #[doc = "Ask a location to notify us regarding their XCM version and any changes to it."]
                #[doc = ""]
                #[doc = "- `origin`: Must be Root."]
                #[doc = "- `location`: The location to which we should subscribe for XCM version notifications."]
                pub fn force_subscribe_version_notify(
                    &self,
                    location: runtime_types::xcm::VersionedMultiLocation,
                ) -> subxt::tx::StaticTxPayload<ForceSubscribeVersionNotify> {
                    subxt::tx::StaticTxPayload::new(
                        "RelayerXcm",
                        "force_subscribe_version_notify",
                        ForceSubscribeVersionNotify {
                            location: ::std::boxed::Box::new(location),
                        },
                        [
                            136u8, 216u8, 207u8, 51u8, 42u8, 153u8, 92u8, 70u8, 140u8, 169u8,
                            172u8, 89u8, 69u8, 28u8, 200u8, 100u8, 209u8, 226u8, 194u8, 240u8,
                            71u8, 38u8, 18u8, 6u8, 6u8, 83u8, 103u8, 254u8, 248u8, 241u8, 62u8,
                            189u8,
                        ],
                    )
                }
                #[doc = "Require that a particular destination should no longer notify us regarding any XCM"]
                #[doc = "version changes."]
                #[doc = ""]
                #[doc = "- `origin`: Must be Root."]
                #[doc = "- `location`: The location to which we are currently subscribed for XCM version"]
                #[doc = "  notifications which we no longer desire."]
                pub fn force_unsubscribe_version_notify(
                    &self,
                    location: runtime_types::xcm::VersionedMultiLocation,
                ) -> subxt::tx::StaticTxPayload<ForceUnsubscribeVersionNotify> {
                    subxt::tx::StaticTxPayload::new(
                        "RelayerXcm",
                        "force_unsubscribe_version_notify",
                        ForceUnsubscribeVersionNotify {
                            location: ::std::boxed::Box::new(location),
                        },
                        [
                            51u8, 72u8, 5u8, 227u8, 251u8, 243u8, 199u8, 9u8, 8u8, 213u8, 191u8,
                            52u8, 21u8, 215u8, 170u8, 6u8, 53u8, 242u8, 225u8, 89u8, 150u8, 142u8,
                            104u8, 249u8, 225u8, 209u8, 142u8, 234u8, 161u8, 100u8, 153u8, 120u8,
                        ],
                    )
                }
                #[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
                #[doc = "chain and forward a notification XCM."]
                #[doc = ""]
                #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                #[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
                #[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
                #[doc = "at risk."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
                #[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
                #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
                #[doc = "  an `AccountId32` value."]
                #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
                #[doc = "  `dest` side."]
                #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                #[doc = "  fees."]
                #[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
                pub fn limited_reserve_transfer_assets(
                    &self,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    beneficiary: runtime_types::xcm::VersionedMultiLocation,
                    assets: runtime_types::xcm::VersionedMultiAssets,
                    fee_asset_item: ::core::primitive::u32,
                    weight_limit: runtime_types::xcm::v2::WeightLimit,
                ) -> subxt::tx::StaticTxPayload<LimitedReserveTransferAssets> {
                    subxt::tx::StaticTxPayload::new(
                        "RelayerXcm",
                        "limited_reserve_transfer_assets",
                        LimitedReserveTransferAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                            weight_limit,
                        },
                        [
                            191u8, 81u8, 68u8, 116u8, 196u8, 125u8, 226u8, 154u8, 144u8, 126u8,
                            159u8, 149u8, 17u8, 124u8, 205u8, 60u8, 249u8, 106u8, 38u8, 251u8,
                            136u8, 128u8, 81u8, 201u8, 164u8, 242u8, 216u8, 80u8, 21u8, 234u8,
                            20u8, 70u8,
                        ],
                    )
                }
                #[doc = "Teleport some assets from the local chain to some destination chain."]
                #[doc = ""]
                #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                #[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
                #[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
                #[doc = "at risk."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
                #[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
                #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
                #[doc = "  an `AccountId32` value."]
                #[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
                #[doc = "  `dest` side. May not be empty."]
                #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                #[doc = "  fees."]
                #[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
                pub fn limited_teleport_assets(
                    &self,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    beneficiary: runtime_types::xcm::VersionedMultiLocation,
                    assets: runtime_types::xcm::VersionedMultiAssets,
                    fee_asset_item: ::core::primitive::u32,
                    weight_limit: runtime_types::xcm::v2::WeightLimit,
                ) -> subxt::tx::StaticTxPayload<LimitedTeleportAssets> {
                    subxt::tx::StaticTxPayload::new(
                        "RelayerXcm",
                        "limited_teleport_assets",
                        LimitedTeleportAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                            weight_limit,
                        },
                        [
                            29u8, 31u8, 229u8, 83u8, 40u8, 60u8, 36u8, 185u8, 169u8, 74u8, 30u8,
                            47u8, 118u8, 118u8, 22u8, 15u8, 246u8, 220u8, 169u8, 135u8, 72u8,
                            154u8, 109u8, 192u8, 195u8, 58u8, 121u8, 240u8, 166u8, 243u8, 29u8,
                            29u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_xcm::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Execution of an XCM message was attempted."]
            #[doc = ""]
            #[doc = "\\[ outcome \\]"]
            pub struct Attempted(pub runtime_types::xcm::v2::traits::Outcome);
            impl subxt::events::StaticEvent for Attempted {
                const PALLET: &'static str = "RelayerXcm";
                const EVENT: &'static str = "Attempted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A XCM message was sent."]
            #[doc = ""]
            #[doc = "\\[ origin, destination, message \\]"]
            pub struct Sent(
                pub runtime_types::xcm::v1::multilocation::MultiLocation,
                pub runtime_types::xcm::v1::multilocation::MultiLocation,
                pub runtime_types::xcm::v2::Xcm,
            );
            impl subxt::events::StaticEvent for Sent {
                const PALLET: &'static str = "RelayerXcm";
                const EVENT: &'static str = "Sent";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Query response received which does not match a registered query. This may be because a"]
            #[doc = "matching query was never registered, it may be because it is a duplicate response, or"]
            #[doc = "because the query timed out."]
            #[doc = ""]
            #[doc = "\\[ origin location, id \\]"]
            pub struct UnexpectedResponse(
                pub runtime_types::xcm::v1::multilocation::MultiLocation,
                pub ::core::primitive::u64,
            );
            impl subxt::events::StaticEvent for UnexpectedResponse {
                const PALLET: &'static str = "RelayerXcm";
                const EVENT: &'static str = "UnexpectedResponse";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Query response has been received and is ready for taking with `take_response`. There is"]
            #[doc = "no registered notification call."]
            #[doc = ""]
            #[doc = "\\[ id, response \\]"]
            pub struct ResponseReady(
                pub ::core::primitive::u64,
                pub runtime_types::xcm::v2::Response,
            );
            impl subxt::events::StaticEvent for ResponseReady {
                const PALLET: &'static str = "RelayerXcm";
                const EVENT: &'static str = "ResponseReady";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Query response has been received and query is removed. The registered notification has"]
            #[doc = "been dispatched and executed successfully."]
            #[doc = ""]
            #[doc = "\\[ id, pallet index, call index \\]"]
            pub struct Notified(
                pub ::core::primitive::u64,
                pub ::core::primitive::u8,
                pub ::core::primitive::u8,
            );
            impl subxt::events::StaticEvent for Notified {
                const PALLET: &'static str = "RelayerXcm";
                const EVENT: &'static str = "Notified";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Query response has been received and query is removed. The registered notification could"]
            #[doc = "not be dispatched because the dispatch weight is greater than the maximum weight"]
            #[doc = "originally budgeted by this runtime for the query result."]
            #[doc = ""]
            #[doc = "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"]
            pub struct NotifyOverweight(
                pub ::core::primitive::u64,
                pub ::core::primitive::u8,
                pub ::core::primitive::u8,
                pub ::core::primitive::u64,
                pub ::core::primitive::u64,
            );
            impl subxt::events::StaticEvent for NotifyOverweight {
                const PALLET: &'static str = "RelayerXcm";
                const EVENT: &'static str = "NotifyOverweight";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Query response has been received and query is removed. There was a general error with"]
            #[doc = "dispatching the notification call."]
            #[doc = ""]
            #[doc = "\\[ id, pallet index, call index \\]"]
            pub struct NotifyDispatchError(
                pub ::core::primitive::u64,
                pub ::core::primitive::u8,
                pub ::core::primitive::u8,
            );
            impl subxt::events::StaticEvent for NotifyDispatchError {
                const PALLET: &'static str = "RelayerXcm";
                const EVENT: &'static str = "NotifyDispatchError";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Query response has been received and query is removed. The dispatch was unable to be"]
            #[doc = "decoded into a `Call`; this might be due to dispatch function having a signature which"]
            #[doc = "is not `(origin, QueryId, Response)`."]
            #[doc = ""]
            #[doc = "\\[ id, pallet index, call index \\]"]
            pub struct NotifyDecodeFailed(
                pub ::core::primitive::u64,
                pub ::core::primitive::u8,
                pub ::core::primitive::u8,
            );
            impl subxt::events::StaticEvent for NotifyDecodeFailed {
                const PALLET: &'static str = "RelayerXcm";
                const EVENT: &'static str = "NotifyDecodeFailed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Expected query response has been received but the origin location of the response does"]
            #[doc = "not match that expected. The query remains registered for a later, valid, response to"]
            #[doc = "be received and acted upon."]
            #[doc = ""]
            #[doc = "\\[ origin location, id, expected location \\]"]
            pub struct InvalidResponder(
                pub runtime_types::xcm::v1::multilocation::MultiLocation,
                pub ::core::primitive::u64,
                pub ::core::option::Option<runtime_types::xcm::v1::multilocation::MultiLocation>,
            );
            impl subxt::events::StaticEvent for InvalidResponder {
                const PALLET: &'static str = "RelayerXcm";
                const EVENT: &'static str = "InvalidResponder";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Expected query response has been received but the expected origin location placed in"]
            #[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
            #[doc = ""]
            #[doc = "This is unexpected (since a location placed in storage in a previously executing"]
            #[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
            #[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
            #[doc = "needed."]
            #[doc = ""]
            #[doc = "\\[ origin location, id \\]"]
            pub struct InvalidResponderVersion(
                pub runtime_types::xcm::v1::multilocation::MultiLocation,
                pub ::core::primitive::u64,
            );
            impl subxt::events::StaticEvent for InvalidResponderVersion {
                const PALLET: &'static str = "RelayerXcm";
                const EVENT: &'static str = "InvalidResponderVersion";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "Received query response has been read and removed."]
            #[doc = ""]
            #[doc = "\\[ id \\]"]
            pub struct ResponseTaken(pub ::core::primitive::u64);
            impl subxt::events::StaticEvent for ResponseTaken {
                const PALLET: &'static str = "RelayerXcm";
                const EVENT: &'static str = "ResponseTaken";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Some assets have been placed in an asset trap."]
            #[doc = ""]
            #[doc = "\\[ hash, origin, assets \\]"]
            pub struct AssetsTrapped(
                pub subxt::ext::sp_core::H256,
                pub runtime_types::xcm::v1::multilocation::MultiLocation,
                pub runtime_types::xcm::VersionedMultiAssets,
            );
            impl subxt::events::StaticEvent for AssetsTrapped {
                const PALLET: &'static str = "RelayerXcm";
                const EVENT: &'static str = "AssetsTrapped";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An XCM version change notification message has been attempted to be sent."]
            #[doc = ""]
            #[doc = "\\[ destination, result \\]"]
            pub struct VersionChangeNotified(
                pub runtime_types::xcm::v1::multilocation::MultiLocation,
                pub ::core::primitive::u32,
            );
            impl subxt::events::StaticEvent for VersionChangeNotified {
                const PALLET: &'static str = "RelayerXcm";
                const EVENT: &'static str = "VersionChangeNotified";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The supported version of a location has been changed. This might be through an"]
            #[doc = "automatic notification or a manual intervention."]
            #[doc = ""]
            #[doc = "\\[ location, XCM version \\]"]
            pub struct SupportedVersionChanged(
                pub runtime_types::xcm::v1::multilocation::MultiLocation,
                pub ::core::primitive::u32,
            );
            impl subxt::events::StaticEvent for SupportedVersionChanged {
                const PALLET: &'static str = "RelayerXcm";
                const EVENT: &'static str = "SupportedVersionChanged";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A given location which had a version change subscription was dropped owing to an error"]
            #[doc = "sending the notification to it."]
            #[doc = ""]
            #[doc = "\\[ location, query ID, error \\]"]
            pub struct NotifyTargetSendFail(
                pub runtime_types::xcm::v1::multilocation::MultiLocation,
                pub ::core::primitive::u64,
                pub runtime_types::xcm::v2::traits::Error,
            );
            impl subxt::events::StaticEvent for NotifyTargetSendFail {
                const PALLET: &'static str = "RelayerXcm";
                const EVENT: &'static str = "NotifyTargetSendFail";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A given location which had a version change subscription was dropped owing to an error"]
            #[doc = "migrating the location to our new XCM format."]
            #[doc = ""]
            #[doc = "\\[ location, query ID \\]"]
            pub struct NotifyTargetMigrationFail(
                pub runtime_types::xcm::VersionedMultiLocation,
                pub ::core::primitive::u64,
            );
            impl subxt::events::StaticEvent for NotifyTargetMigrationFail {
                const PALLET: &'static str = "RelayerXcm";
                const EVENT: &'static str = "NotifyTargetMigrationFail";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The latest available query index."]
                pub fn query_counter(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "RelayerXcm",
                        "QueryCounter",
                        vec![],
                        [
                            137u8, 58u8, 184u8, 88u8, 247u8, 22u8, 151u8, 64u8, 50u8, 77u8, 49u8,
                            10u8, 234u8, 84u8, 213u8, 156u8, 26u8, 200u8, 214u8, 225u8, 125u8,
                            231u8, 42u8, 93u8, 159u8, 168u8, 86u8, 201u8, 116u8, 153u8, 41u8,
                            127u8,
                        ],
                    )
                }
                #[doc = " The ongoing queries."]
                pub fn queries(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_xcm::pallet::QueryStatus<::core::primitive::u32>,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "RelayerXcm",
                        "Queries",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            251u8, 97u8, 131u8, 135u8, 93u8, 68u8, 156u8, 25u8, 181u8, 231u8,
                            124u8, 93u8, 170u8, 114u8, 250u8, 177u8, 172u8, 51u8, 59u8, 44u8,
                            148u8, 189u8, 199u8, 62u8, 118u8, 89u8, 75u8, 29u8, 71u8, 49u8, 248u8,
                            48u8,
                        ],
                    )
                }
                #[doc = " The ongoing queries."]
                pub fn queries_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_xcm::pallet::QueryStatus<::core::primitive::u32>,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "RelayerXcm",
                        "Queries",
                        Vec::new(),
                        [
                            251u8, 97u8, 131u8, 135u8, 93u8, 68u8, 156u8, 25u8, 181u8, 231u8,
                            124u8, 93u8, 170u8, 114u8, 250u8, 177u8, 172u8, 51u8, 59u8, 44u8,
                            148u8, 189u8, 199u8, 62u8, 118u8, 89u8, 75u8, 29u8, 71u8, 49u8, 248u8,
                            48u8,
                        ],
                    )
                }
                #[doc = " The existing asset traps."]
                #[doc = ""]
                #[doc = " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of"]
                #[doc = " times this pair has been trapped (usually just 1 if it exists at all)."]
                pub fn asset_traps(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::H256>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "RelayerXcm",
                        "AssetTraps",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            4u8, 185u8, 92u8, 4u8, 7u8, 71u8, 214u8, 1u8, 141u8, 59u8, 87u8, 55u8,
                            149u8, 26u8, 125u8, 8u8, 88u8, 31u8, 240u8, 138u8, 133u8, 28u8, 37u8,
                            131u8, 107u8, 218u8, 86u8, 152u8, 147u8, 44u8, 19u8, 239u8,
                        ],
                    )
                }
                #[doc = " The existing asset traps."]
                #[doc = ""]
                #[doc = " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of"]
                #[doc = " times this pair has been trapped (usually just 1 if it exists at all)."]
                pub fn asset_traps_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "RelayerXcm",
                        "AssetTraps",
                        Vec::new(),
                        [
                            4u8, 185u8, 92u8, 4u8, 7u8, 71u8, 214u8, 1u8, 141u8, 59u8, 87u8, 55u8,
                            149u8, 26u8, 125u8, 8u8, 88u8, 31u8, 240u8, 138u8, 133u8, 28u8, 37u8,
                            131u8, 107u8, 218u8, 86u8, 152u8, 147u8, 44u8, 19u8, 239u8,
                        ],
                    )
                }
                #[doc = " Default version to encode XCM when latest version of destination is unknown. If `None`,"]
                #[doc = " then the destinations whose XCM version is unknown are considered unreachable."]
                pub fn safe_xcm_version(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "RelayerXcm",
                        "SafeXcmVersion",
                        vec![],
                        [
                            1u8, 223u8, 218u8, 204u8, 222u8, 129u8, 137u8, 237u8, 197u8, 142u8,
                            233u8, 66u8, 229u8, 153u8, 138u8, 222u8, 113u8, 164u8, 135u8, 213u8,
                            233u8, 34u8, 24u8, 23u8, 215u8, 59u8, 40u8, 188u8, 45u8, 244u8, 205u8,
                            199u8,
                        ],
                    )
                }
                #[doc = " The Latest versions that we know various locations support."]
                pub fn supported_version(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::xcm::VersionedMultiLocation>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "RelayerXcm",
                        "SupportedVersion",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Twox64Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            112u8, 34u8, 251u8, 179u8, 217u8, 54u8, 125u8, 242u8, 190u8, 8u8, 44u8,
                            14u8, 138u8, 76u8, 241u8, 95u8, 233u8, 96u8, 141u8, 26u8, 151u8, 196u8,
                            219u8, 137u8, 165u8, 27u8, 87u8, 128u8, 19u8, 35u8, 222u8, 202u8,
                        ],
                    )
                }
                #[doc = " The Latest versions that we know various locations support."]
                pub fn supported_version_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "RelayerXcm",
                        "SupportedVersion",
                        Vec::new(),
                        [
                            112u8, 34u8, 251u8, 179u8, 217u8, 54u8, 125u8, 242u8, 190u8, 8u8, 44u8,
                            14u8, 138u8, 76u8, 241u8, 95u8, 233u8, 96u8, 141u8, 26u8, 151u8, 196u8,
                            219u8, 137u8, 165u8, 27u8, 87u8, 128u8, 19u8, 35u8, 222u8, 202u8,
                        ],
                    )
                }
                #[doc = " All locations that we have requested version notifications from."]
                pub fn version_notifiers(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::xcm::VersionedMultiLocation>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "RelayerXcm",
                        "VersionNotifiers",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Twox64Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            233u8, 217u8, 119u8, 102u8, 41u8, 77u8, 198u8, 24u8, 161u8, 22u8,
                            104u8, 149u8, 204u8, 128u8, 123u8, 166u8, 17u8, 36u8, 202u8, 92u8,
                            190u8, 44u8, 73u8, 239u8, 88u8, 17u8, 92u8, 41u8, 236u8, 80u8, 154u8,
                            10u8,
                        ],
                    )
                }
                #[doc = " All locations that we have requested version notifications from."]
                pub fn version_notifiers_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "RelayerXcm",
                        "VersionNotifiers",
                        Vec::new(),
                        [
                            233u8, 217u8, 119u8, 102u8, 41u8, 77u8, 198u8, 24u8, 161u8, 22u8,
                            104u8, 149u8, 204u8, 128u8, 123u8, 166u8, 17u8, 36u8, 202u8, 92u8,
                            190u8, 44u8, 73u8, 239u8, 88u8, 17u8, 92u8, 41u8, 236u8, 80u8, 154u8,
                            10u8,
                        ],
                    )
                }
                #[doc = " The target locations that are subscribed to our version changes, as well as the most recent"]
                #[doc = " of our versions we informed them of."]
                pub fn version_notify_targets(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::xcm::VersionedMultiLocation>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        ::core::primitive::u64,
                        ::core::primitive::u64,
                        ::core::primitive::u32,
                    )>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "RelayerXcm",
                        "VersionNotifyTargets",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Twox64Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            108u8, 104u8, 137u8, 191u8, 2u8, 2u8, 240u8, 174u8, 32u8, 174u8, 150u8,
                            136u8, 33u8, 84u8, 30u8, 74u8, 95u8, 94u8, 20u8, 112u8, 101u8, 204u8,
                            15u8, 47u8, 136u8, 56u8, 40u8, 66u8, 1u8, 42u8, 16u8, 247u8,
                        ],
                    )
                }
                #[doc = " The target locations that are subscribed to our version changes, as well as the most recent"]
                #[doc = " of our versions we informed them of."]
                pub fn version_notify_targets_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        ::core::primitive::u64,
                        ::core::primitive::u64,
                        ::core::primitive::u32,
                    )>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "RelayerXcm",
                        "VersionNotifyTargets",
                        Vec::new(),
                        [
                            108u8, 104u8, 137u8, 191u8, 2u8, 2u8, 240u8, 174u8, 32u8, 174u8, 150u8,
                            136u8, 33u8, 84u8, 30u8, 74u8, 95u8, 94u8, 20u8, 112u8, 101u8, 204u8,
                            15u8, 47u8, 136u8, 56u8, 40u8, 66u8, 1u8, 42u8, 16u8, 247u8,
                        ],
                    )
                }
                #[doc = " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and"]
                #[doc = " the `u32` counter is the number of times that a send to the destination has been attempted,"]
                #[doc = " which is used as a prioritization."]
                pub fn version_discovery_queue(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<(
                            runtime_types::xcm::VersionedMultiLocation,
                            ::core::primitive::u32,
                        )>,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "RelayerXcm",
                        "VersionDiscoveryQueue",
                        vec![],
                        [
                            30u8, 163u8, 210u8, 133u8, 30u8, 63u8, 36u8, 9u8, 162u8, 133u8, 99u8,
                            170u8, 34u8, 205u8, 27u8, 41u8, 226u8, 141u8, 165u8, 151u8, 46u8,
                            140u8, 150u8, 242u8, 178u8, 88u8, 164u8, 12u8, 129u8, 118u8, 25u8,
                            79u8,
                        ],
                    )
                }
                #[doc = " The current migration's stage, if any."]
                pub fn current_migration(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_xcm::pallet::VersionMigrationStage,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "RelayerXcm",
                        "CurrentMigration",
                        vec![],
                        [
                            137u8, 144u8, 168u8, 185u8, 158u8, 90u8, 127u8, 243u8, 227u8, 134u8,
                            150u8, 73u8, 15u8, 99u8, 23u8, 47u8, 68u8, 18u8, 39u8, 16u8, 24u8,
                            43u8, 161u8, 56u8, 66u8, 111u8, 16u8, 7u8, 252u8, 125u8, 100u8, 225u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod cumulus_xcm {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub struct TransactionApi;
            impl TransactionApi {}
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::cumulus_pallet_xcm::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Downward message is invalid XCM."]
            #[doc = "\\[ id \\]"]
            pub struct InvalidFormat(pub [::core::primitive::u8; 8usize]);
            impl subxt::events::StaticEvent for InvalidFormat {
                const PALLET: &'static str = "CumulusXcm";
                const EVENT: &'static str = "InvalidFormat";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Downward message is unsupported version of XCM."]
            #[doc = "\\[ id \\]"]
            pub struct UnsupportedVersion(pub [::core::primitive::u8; 8usize]);
            impl subxt::events::StaticEvent for UnsupportedVersion {
                const PALLET: &'static str = "CumulusXcm";
                const EVENT: &'static str = "UnsupportedVersion";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Downward message executed with the given outcome."]
            #[doc = "\\[ id, outcome \\]"]
            pub struct ExecutedDownward(
                pub [::core::primitive::u8; 8usize],
                pub runtime_types::xcm::v2::traits::Outcome,
            );
            impl subxt::events::StaticEvent for ExecutedDownward {
                const PALLET: &'static str = "CumulusXcm";
                const EVENT: &'static str = "ExecutedDownward";
            }
        }
    }
    pub mod dmp_queue {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ServiceOverweight {
                pub index: ::core::primitive::u64,
                pub weight_limit: ::core::primitive::u64,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Service a single overweight message."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `ExecuteOverweightOrigin`."]
                #[doc = "- `index`: The index of the overweight message to service."]
                #[doc = "- `weight_limit`: The amount of weight that message execution may take."]
                #[doc = ""]
                #[doc = "Errors:"]
                #[doc = "- `Unknown`: Message of `index` is unknown."]
                #[doc = "- `OverLimit`: Message execution may use greater than `weight_limit`."]
                #[doc = ""]
                #[doc = "Events:"]
                #[doc = "- `OverweightServiced`: On success."]
                pub fn service_overweight(
                    &self,
                    index: ::core::primitive::u64,
                    weight_limit: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<ServiceOverweight> {
                    subxt::tx::StaticTxPayload::new(
                        "DmpQueue",
                        "service_overweight",
                        ServiceOverweight {
                            index,
                            weight_limit,
                        },
                        [
                            225u8, 41u8, 132u8, 91u8, 28u8, 116u8, 89u8, 197u8, 194u8, 131u8, 28u8,
                            217u8, 102u8, 241u8, 122u8, 230u8, 242u8, 75u8, 83u8, 67u8, 104u8,
                            55u8, 133u8, 129u8, 91u8, 25u8, 185u8, 131u8, 22u8, 253u8, 84u8, 221u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::cumulus_pallet_dmp_queue::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Downward message is invalid XCM."]
            pub struct InvalidFormat {
                pub message_id: [::core::primitive::u8; 32usize],
            }
            impl subxt::events::StaticEvent for InvalidFormat {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "InvalidFormat";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Downward message is unsupported version of XCM."]
            pub struct UnsupportedVersion {
                pub message_id: [::core::primitive::u8; 32usize],
            }
            impl subxt::events::StaticEvent for UnsupportedVersion {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "UnsupportedVersion";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Downward message executed with the given outcome."]
            pub struct ExecutedDownward {
                pub message_id: [::core::primitive::u8; 32usize],
                pub outcome: runtime_types::xcm::v2::traits::Outcome,
            }
            impl subxt::events::StaticEvent for ExecutedDownward {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "ExecutedDownward";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The weight limit for handling downward messages was reached."]
            pub struct WeightExhausted {
                pub message_id: [::core::primitive::u8; 32usize],
                pub remaining_weight: ::core::primitive::u64,
                pub required_weight: ::core::primitive::u64,
            }
            impl subxt::events::StaticEvent for WeightExhausted {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "WeightExhausted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Downward message is overweight and was placed in the overweight queue."]
            pub struct OverweightEnqueued {
                pub message_id: [::core::primitive::u8; 32usize],
                pub overweight_index: ::core::primitive::u64,
                pub required_weight: ::core::primitive::u64,
            }
            impl subxt::events::StaticEvent for OverweightEnqueued {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "OverweightEnqueued";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Downward message from the overweight queue was executed."]
            pub struct OverweightServiced {
                pub overweight_index: ::core::primitive::u64,
                pub weight_used: ::core::primitive::u64,
            }
            impl subxt::events::StaticEvent for OverweightServiced {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "OverweightServiced";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The configuration."]
                pub fn configuration(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::cumulus_pallet_dmp_queue::ConfigData,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DmpQueue",
                        "Configuration",
                        vec![],
                        [
                            1u8, 54u8, 187u8, 187u8, 248u8, 220u8, 44u8, 119u8, 173u8, 91u8, 236u8,
                            102u8, 123u8, 199u8, 153u8, 26u8, 188u8, 102u8, 123u8, 180u8, 149u8,
                            239u8, 184u8, 96u8, 100u8, 52u8, 150u8, 23u8, 26u8, 144u8, 0u8, 224u8,
                        ],
                    )
                }
                #[doc = " The page index."]
                pub fn page_index(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::cumulus_pallet_dmp_queue::PageIndexData,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DmpQueue",
                        "PageIndex",
                        vec![],
                        [
                            94u8, 132u8, 34u8, 67u8, 10u8, 22u8, 235u8, 96u8, 168u8, 26u8, 57u8,
                            200u8, 130u8, 218u8, 37u8, 71u8, 28u8, 119u8, 78u8, 107u8, 209u8,
                            120u8, 190u8, 2u8, 101u8, 215u8, 122u8, 187u8, 94u8, 38u8, 255u8,
                            234u8,
                        ],
                    )
                }
                #[doc = " The queue pages."]
                pub fn pages(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<(
                            ::core::primitive::u32,
                            ::std::vec::Vec<::core::primitive::u8>,
                        )>,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DmpQueue",
                        "Pages",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            228u8, 86u8, 33u8, 107u8, 248u8, 4u8, 223u8, 175u8, 222u8, 25u8, 204u8,
                            42u8, 235u8, 21u8, 215u8, 91u8, 167u8, 14u8, 133u8, 151u8, 190u8, 57u8,
                            138u8, 208u8, 79u8, 244u8, 132u8, 14u8, 48u8, 247u8, 171u8, 108u8,
                        ],
                    )
                }
                #[doc = " The queue pages."]
                pub fn pages_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<(
                            ::core::primitive::u32,
                            ::std::vec::Vec<::core::primitive::u8>,
                        )>,
                    >,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DmpQueue",
                        "Pages",
                        Vec::new(),
                        [
                            228u8, 86u8, 33u8, 107u8, 248u8, 4u8, 223u8, 175u8, 222u8, 25u8, 204u8,
                            42u8, 235u8, 21u8, 215u8, 91u8, 167u8, 14u8, 133u8, 151u8, 190u8, 57u8,
                            138u8, 208u8, 79u8, 244u8, 132u8, 14u8, 48u8, 247u8, 171u8, 108u8,
                        ],
                    )
                }
                #[doc = " The overweight messages."]
                pub fn overweight(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        ::core::primitive::u32,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DmpQueue",
                        "Overweight",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            222u8, 85u8, 143u8, 49u8, 42u8, 248u8, 138u8, 163u8, 46u8, 199u8,
                            188u8, 61u8, 137u8, 135u8, 127u8, 146u8, 210u8, 254u8, 121u8, 42u8,
                            112u8, 114u8, 22u8, 228u8, 207u8, 207u8, 245u8, 175u8, 152u8, 140u8,
                            225u8, 237u8,
                        ],
                    )
                }
                #[doc = " The overweight messages."]
                pub fn overweight_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        ::core::primitive::u32,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DmpQueue",
                        "Overweight",
                        Vec::new(),
                        [
                            222u8, 85u8, 143u8, 49u8, 42u8, 248u8, 138u8, 163u8, 46u8, 199u8,
                            188u8, 61u8, 137u8, 135u8, 127u8, 146u8, 210u8, 254u8, 121u8, 42u8,
                            112u8, 114u8, 22u8, 228u8, 207u8, 207u8, 245u8, 175u8, 152u8, 140u8,
                            225u8, 237u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod x_tokens {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Transfer {
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                pub amount: ::core::primitive::u128,
                pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub dest_weight: ::core::primitive::u64,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct TransferMultiasset {
                pub asset: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
                pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub dest_weight: ::core::primitive::u64,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct TransferWithFee {
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                pub amount: ::core::primitive::u128,
                pub fee: ::core::primitive::u128,
                pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub dest_weight: ::core::primitive::u64,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct TransferMultiassetWithFee {
                pub asset: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
                pub fee: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
                pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub dest_weight: ::core::primitive::u64,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct TransferMulticurrencies {
                pub currencies: ::std::vec::Vec<(
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                )>,
                pub fee_item: ::core::primitive::u32,
                pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub dest_weight: ::core::primitive::u64,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct TransferMultiassets {
                pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                pub fee_item: ::core::primitive::u32,
                pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub dest_weight: ::core::primitive::u64,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Transfer native currencies."]
                #[doc = ""]
                #[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
                #[doc = "it would be charged from the transferred assets. If set below"]
                #[doc = "requirements, the execution may fail and assets wouldn't be"]
                #[doc = "received."]
                #[doc = ""]
                #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                #[doc = "by the network, and if the receiving chain would handle"]
                #[doc = "messages correctly."]
                pub fn transfer(
                    &self,
                    currency_id: runtime_types::primitives::currency::CurrencyId,
                    amount: ::core::primitive::u128,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    dest_weight: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<Transfer> {
                    subxt::tx::StaticTxPayload::new(
                        "XTokens",
                        "transfer",
                        Transfer {
                            currency_id,
                            amount,
                            dest: ::std::boxed::Box::new(dest),
                            dest_weight,
                        },
                        [
                            138u8, 56u8, 41u8, 42u8, 28u8, 176u8, 160u8, 79u8, 165u8, 70u8, 142u8,
                            113u8, 10u8, 56u8, 47u8, 219u8, 105u8, 25u8, 231u8, 109u8, 134u8,
                            217u8, 41u8, 216u8, 22u8, 123u8, 223u8, 224u8, 227u8, 157u8, 152u8,
                            173u8,
                        ],
                    )
                }
                #[doc = "Transfer `MultiAsset`."]
                #[doc = ""]
                #[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
                #[doc = "it would be charged from the transferred assets. If set below"]
                #[doc = "requirements, the execution may fail and assets wouldn't be"]
                #[doc = "received."]
                #[doc = ""]
                #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                #[doc = "by the network, and if the receiving chain would handle"]
                #[doc = "messages correctly."]
                pub fn transfer_multiasset(
                    &self,
                    asset: runtime_types::xcm::VersionedMultiAsset,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    dest_weight: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<TransferMultiasset> {
                    subxt::tx::StaticTxPayload::new(
                        "XTokens",
                        "transfer_multiasset",
                        TransferMultiasset {
                            asset: ::std::boxed::Box::new(asset),
                            dest: ::std::boxed::Box::new(dest),
                            dest_weight,
                        },
                        [
                            190u8, 144u8, 69u8, 7u8, 190u8, 198u8, 215u8, 249u8, 227u8, 121u8,
                            239u8, 206u8, 29u8, 216u8, 228u8, 45u8, 173u8, 7u8, 45u8, 45u8, 237u8,
                            167u8, 221u8, 203u8, 55u8, 168u8, 220u8, 250u8, 214u8, 117u8, 189u8,
                            25u8,
                        ],
                    )
                }
                #[doc = "Transfer native currencies specifying the fee and amount as"]
                #[doc = "separate."]
                #[doc = ""]
                #[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
                #[doc = "it would be charged from the transferred assets. If set below"]
                #[doc = "requirements, the execution may fail and assets wouldn't be"]
                #[doc = "received."]
                #[doc = ""]
                #[doc = "`fee` is the amount to be spent to pay for execution in destination"]
                #[doc = "chain. Both fee and amount will be subtracted form the callers"]
                #[doc = "balance."]
                #[doc = ""]
                #[doc = "If `fee` is not high enough to cover for the execution costs in the"]
                #[doc = "destination chain, then the assets will be trapped in the"]
                #[doc = "destination chain"]
                #[doc = ""]
                #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                #[doc = "by the network, and if the receiving chain would handle"]
                #[doc = "messages correctly."]
                pub fn transfer_with_fee(
                    &self,
                    currency_id: runtime_types::primitives::currency::CurrencyId,
                    amount: ::core::primitive::u128,
                    fee: ::core::primitive::u128,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    dest_weight: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<TransferWithFee> {
                    subxt::tx::StaticTxPayload::new(
                        "XTokens",
                        "transfer_with_fee",
                        TransferWithFee {
                            currency_id,
                            amount,
                            fee,
                            dest: ::std::boxed::Box::new(dest),
                            dest_weight,
                        },
                        [
                            145u8, 130u8, 151u8, 32u8, 20u8, 145u8, 194u8, 47u8, 244u8, 20u8, 95u8,
                            162u8, 236u8, 99u8, 210u8, 175u8, 205u8, 75u8, 214u8, 100u8, 91u8,
                            36u8, 153u8, 129u8, 255u8, 110u8, 87u8, 65u8, 101u8, 190u8, 154u8,
                            128u8,
                        ],
                    )
                }
                #[doc = "Transfer `MultiAsset` specifying the fee and amount as separate."]
                #[doc = ""]
                #[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
                #[doc = "it would be charged from the transferred assets. If set below"]
                #[doc = "requirements, the execution may fail and assets wouldn't be"]
                #[doc = "received."]
                #[doc = ""]
                #[doc = "`fee` is the multiasset to be spent to pay for execution in"]
                #[doc = "destination chain. Both fee and amount will be subtracted form the"]
                #[doc = "callers balance For now we only accept fee and asset having the same"]
                #[doc = "`MultiLocation` id."]
                #[doc = ""]
                #[doc = "If `fee` is not high enough to cover for the execution costs in the"]
                #[doc = "destination chain, then the assets will be trapped in the"]
                #[doc = "destination chain"]
                #[doc = ""]
                #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                #[doc = "by the network, and if the receiving chain would handle"]
                #[doc = "messages correctly."]
                pub fn transfer_multiasset_with_fee(
                    &self,
                    asset: runtime_types::xcm::VersionedMultiAsset,
                    fee: runtime_types::xcm::VersionedMultiAsset,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    dest_weight: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<TransferMultiassetWithFee> {
                    subxt::tx::StaticTxPayload::new(
                        "XTokens",
                        "transfer_multiasset_with_fee",
                        TransferMultiassetWithFee {
                            asset: ::std::boxed::Box::new(asset),
                            fee: ::std::boxed::Box::new(fee),
                            dest: ::std::boxed::Box::new(dest),
                            dest_weight,
                        },
                        [
                            9u8, 156u8, 205u8, 226u8, 183u8, 104u8, 122u8, 236u8, 199u8, 154u8,
                            151u8, 9u8, 240u8, 208u8, 42u8, 149u8, 9u8, 125u8, 131u8, 188u8, 159u8,
                            244u8, 139u8, 176u8, 143u8, 156u8, 206u8, 228u8, 207u8, 185u8, 144u8,
                            186u8,
                        ],
                    )
                }
                #[doc = "Transfer several currencies specifying the item to be used as fee"]
                #[doc = ""]
                #[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
                #[doc = "it would be charged from the transferred assets. If set below"]
                #[doc = "requirements, the execution may fail and assets wouldn't be"]
                #[doc = "received."]
                #[doc = ""]
                #[doc = "`fee_item` is index of the currencies tuple that we want to use for"]
                #[doc = "payment"]
                #[doc = ""]
                #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                #[doc = "by the network, and if the receiving chain would handle"]
                #[doc = "messages correctly."]
                pub fn transfer_multicurrencies(
                    &self,
                    currencies: ::std::vec::Vec<(
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    )>,
                    fee_item: ::core::primitive::u32,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    dest_weight: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<TransferMulticurrencies> {
                    subxt::tx::StaticTxPayload::new(
                        "XTokens",
                        "transfer_multicurrencies",
                        TransferMulticurrencies {
                            currencies,
                            fee_item,
                            dest: ::std::boxed::Box::new(dest),
                            dest_weight,
                        },
                        [
                            34u8, 166u8, 225u8, 113u8, 242u8, 162u8, 201u8, 89u8, 51u8, 28u8,
                            128u8, 193u8, 175u8, 189u8, 148u8, 55u8, 74u8, 234u8, 132u8, 122u8,
                            180u8, 123u8, 0u8, 151u8, 192u8, 88u8, 36u8, 81u8, 2u8, 130u8, 90u8,
                            28u8,
                        ],
                    )
                }
                #[doc = "Transfer several `MultiAsset` specifying the item to be used as fee"]
                #[doc = ""]
                #[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
                #[doc = "it would be charged from the transferred assets. If set below"]
                #[doc = "requirements, the execution may fail and assets wouldn't be"]
                #[doc = "received."]
                #[doc = ""]
                #[doc = "`fee_item` is index of the MultiAssets that we want to use for"]
                #[doc = "payment"]
                #[doc = ""]
                #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                #[doc = "by the network, and if the receiving chain would handle"]
                #[doc = "messages correctly."]
                pub fn transfer_multiassets(
                    &self,
                    assets: runtime_types::xcm::VersionedMultiAssets,
                    fee_item: ::core::primitive::u32,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    dest_weight: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<TransferMultiassets> {
                    subxt::tx::StaticTxPayload::new(
                        "XTokens",
                        "transfer_multiassets",
                        TransferMultiassets {
                            assets: ::std::boxed::Box::new(assets),
                            fee_item,
                            dest: ::std::boxed::Box::new(dest),
                            dest_weight,
                        },
                        [
                            27u8, 176u8, 242u8, 79u8, 118u8, 167u8, 231u8, 33u8, 233u8, 195u8,
                            178u8, 53u8, 190u8, 183u8, 157u8, 39u8, 137u8, 31u8, 42u8, 171u8,
                            250u8, 9u8, 14u8, 197u8, 98u8, 168u8, 82u8, 39u8, 133u8, 77u8, 223u8,
                            35u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::orml_xtokens::module::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Transferred `MultiAsset` with fee."]
            pub struct TransferredMultiAssets {
                pub sender: subxt::ext::sp_core::crypto::AccountId32,
                pub assets: runtime_types::xcm::v1::multiasset::MultiAssets,
                pub fee: runtime_types::xcm::v1::multiasset::MultiAsset,
                pub dest: runtime_types::xcm::v1::multilocation::MultiLocation,
            }
            impl subxt::events::StaticEvent for TransferredMultiAssets {
                const PALLET: &'static str = "XTokens";
                const EVENT: &'static str = "TransferredMultiAssets";
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Self chain location."]
                pub fn self_location(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::xcm::v1::multilocation::MultiLocation,
                    >,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "XTokens",
                        "SelfLocation",
                        [
                            17u8, 25u8, 246u8, 131u8, 96u8, 96u8, 11u8, 104u8, 167u8, 145u8, 236u8,
                            252u8, 208u8, 71u8, 76u8, 167u8, 110u8, 207u8, 172u8, 152u8, 131u8,
                            71u8, 116u8, 5u8, 227u8, 226u8, 68u8, 98u8, 156u8, 138u8, 180u8, 32u8,
                        ],
                    )
                }
                #[doc = " Base XCM weight."]
                #[doc = ""]
                #[doc = " The actually weight for an XCM message is `T::BaseXcmWeight +"]
                #[doc = " T::Weigher::weight(&msg)`."]
                pub fn base_xcm_weight(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "XTokens",
                        "BaseXcmWeight",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod unknown_tokens {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub struct TransactionApi;
            impl TransactionApi {}
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::orml_unknown_tokens::module::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Deposit success."]
            pub struct Deposited {
                pub asset: runtime_types::xcm::v1::multiasset::MultiAsset,
                pub who: runtime_types::xcm::v1::multilocation::MultiLocation,
            }
            impl subxt::events::StaticEvent for Deposited {
                const PALLET: &'static str = "UnknownTokens";
                const EVENT: &'static str = "Deposited";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Withdraw success."]
            pub struct Withdrawn {
                pub asset: runtime_types::xcm::v1::multiasset::MultiAsset,
                pub who: runtime_types::xcm::v1::multilocation::MultiLocation,
            }
            impl subxt::events::StaticEvent for Withdrawn {
                const PALLET: &'static str = "UnknownTokens";
                const EVENT: &'static str = "Withdrawn";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Concrete fungible balances under a given location and a concrete"]
                #[doc = " fungible id."]
                #[doc = ""]
                #[doc = " double_map: who, asset_id => u128"]
                pub fn concrete_fungible_balances(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::xcm::v1::multilocation::MultiLocation>,
                    _1: impl ::std::borrow::Borrow<runtime_types::xcm::v1::multilocation::MultiLocation>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "UnknownTokens",
                        "ConcreteFungibleBalances",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            209u8, 108u8, 116u8, 241u8, 240u8, 48u8, 22u8, 142u8, 204u8, 254u8,
                            45u8, 213u8, 98u8, 254u8, 240u8, 178u8, 77u8, 175u8, 106u8, 110u8,
                            109u8, 42u8, 239u8, 127u8, 79u8, 229u8, 178u8, 232u8, 251u8, 0u8,
                            235u8, 245u8,
                        ],
                    )
                }
                #[doc = " Concrete fungible balances under a given location and a concrete"]
                #[doc = " fungible id."]
                #[doc = ""]
                #[doc = " double_map: who, asset_id => u128"]
                pub fn concrete_fungible_balances_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "UnknownTokens",
                        "ConcreteFungibleBalances",
                        Vec::new(),
                        [
                            209u8, 108u8, 116u8, 241u8, 240u8, 48u8, 22u8, 142u8, 204u8, 254u8,
                            45u8, 213u8, 98u8, 254u8, 240u8, 178u8, 77u8, 175u8, 106u8, 110u8,
                            109u8, 42u8, 239u8, 127u8, 79u8, 229u8, 178u8, 232u8, 251u8, 0u8,
                            235u8, 245u8,
                        ],
                    )
                }
                #[doc = " Abstract fungible balances under a given location and a abstract"]
                #[doc = " fungible id."]
                #[doc = ""]
                #[doc = " double_map: who, asset_id => u128"]
                pub fn abstract_fungible_balances(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::xcm::v1::multilocation::MultiLocation>,
                    _1: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "UnknownTokens",
                        "AbstractFungibleBalances",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            167u8, 134u8, 51u8, 219u8, 157u8, 244u8, 11u8, 193u8, 209u8, 133u8,
                            106u8, 27u8, 229u8, 7u8, 164u8, 57u8, 82u8, 212u8, 149u8, 108u8, 69u8,
                            132u8, 98u8, 213u8, 126u8, 122u8, 126u8, 21u8, 70u8, 220u8, 51u8,
                            249u8,
                        ],
                    )
                }
                #[doc = " Abstract fungible balances under a given location and a abstract"]
                #[doc = " fungible id."]
                #[doc = ""]
                #[doc = " double_map: who, asset_id => u128"]
                pub fn abstract_fungible_balances_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "UnknownTokens",
                        "AbstractFungibleBalances",
                        Vec::new(),
                        [
                            167u8, 134u8, 51u8, 219u8, 157u8, 244u8, 11u8, 193u8, 209u8, 133u8,
                            106u8, 27u8, 229u8, 7u8, 164u8, 57u8, 82u8, 212u8, 149u8, 108u8, 69u8,
                            132u8, 98u8, 213u8, 126u8, 122u8, 126u8, 21u8, 70u8, 220u8, 51u8,
                            249u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod tokens {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Transfer {
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct TransferAll {
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct TransferKeepAlive {
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ForceTransfer {
                pub source: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetBalance {
                pub who: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                #[codec(compact)]
                pub new_free: ::core::primitive::u128,
                #[codec(compact)]
                pub new_reserved: ::core::primitive::u128,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Transfer some liquid free balance to another account."]
                #[doc = ""]
                #[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
                #[doc = "It will decrease the total issuance of the system by the"]
                #[doc = "`TransferFee`. If the sender's account is below the existential"]
                #[doc = "deposit as a result of the transfer, the account will be reaped."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the"]
                #[doc = "transactor."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `currency_id`: currency type."]
                #[doc = "- `amount`: free balance amount to tranfer."]
                pub fn transfer(
                    &self,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    currency_id: runtime_types::primitives::currency::CurrencyId,
                    amount: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<Transfer> {
                    subxt::tx::StaticTxPayload::new(
                        "Tokens",
                        "transfer",
                        Transfer {
                            dest,
                            currency_id,
                            amount,
                        },
                        [
                            206u8, 83u8, 17u8, 48u8, 58u8, 130u8, 54u8, 103u8, 110u8, 163u8, 160u8,
                            138u8, 162u8, 221u8, 65u8, 125u8, 126u8, 44u8, 210u8, 48u8, 212u8,
                            83u8, 229u8, 173u8, 146u8, 129u8, 21u8, 111u8, 45u8, 85u8, 160u8,
                            167u8,
                        ],
                    )
                }
                #[doc = "Transfer all remaining balance to the given account."]
                #[doc = ""]
                #[doc = "NOTE: This function only attempts to transfer _transferable_"]
                #[doc = "balances. This means that any locked, reserved, or existential"]
                #[doc = "deposits (when `keep_alive` is `true`), will not be transferred by"]
                #[doc = "this function. To ensure that this function results in a killed"]
                #[doc = "account, you might need to prepare the account by removing any"]
                #[doc = "reference counters, storage deposits, etc..."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the"]
                #[doc = "transactor."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `currency_id`: currency type."]
                #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all`"]
                #[doc = "  operation should send all of the funds the account has, causing"]
                #[doc = "  the sender account to be killed (false), or transfer everything"]
                #[doc = "  except at least the existential deposit, which will guarantee to"]
                #[doc = "  keep the sender account alive (true)."]
                pub fn transfer_all(
                    &self,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    currency_id: runtime_types::primitives::currency::CurrencyId,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<TransferAll> {
                    subxt::tx::StaticTxPayload::new(
                        "Tokens",
                        "transfer_all",
                        TransferAll {
                            dest,
                            currency_id,
                            keep_alive,
                        },
                        [
                            3u8, 187u8, 164u8, 247u8, 255u8, 219u8, 96u8, 91u8, 177u8, 2u8, 216u8,
                            236u8, 119u8, 10u8, 114u8, 150u8, 166u8, 218u8, 88u8, 232u8, 119u8,
                            132u8, 9u8, 185u8, 181u8, 40u8, 54u8, 107u8, 162u8, 201u8, 100u8,
                            116u8,
                        ],
                    )
                }
                #[doc = "Same as the [`transfer`] call, but with a check that the transfer"]
                #[doc = "will not kill the origin account."]
                #[doc = ""]
                #[doc = "99% of the time you want [`transfer`] instead."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the"]
                #[doc = "transactor."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `currency_id`: currency type."]
                #[doc = "- `amount`: free balance amount to tranfer."]
                pub fn transfer_keep_alive(
                    &self,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    currency_id: runtime_types::primitives::currency::CurrencyId,
                    amount: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<TransferKeepAlive> {
                    subxt::tx::StaticTxPayload::new(
                        "Tokens",
                        "transfer_keep_alive",
                        TransferKeepAlive {
                            dest,
                            currency_id,
                            amount,
                        },
                        [
                            220u8, 153u8, 159u8, 112u8, 205u8, 69u8, 215u8, 153u8, 140u8, 202u8,
                            205u8, 131u8, 61u8, 239u8, 33u8, 15u8, 133u8, 230u8, 2u8, 31u8, 61u8,
                            4u8, 103u8, 190u8, 69u8, 89u8, 171u8, 57u8, 136u8, 54u8, 112u8, 194u8,
                        ],
                    )
                }
                #[doc = "Exactly as `transfer`, except the origin must be root and the source"]
                #[doc = "account may be specified."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `source`: The sender of the transfer."]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `currency_id`: currency type."]
                #[doc = "- `amount`: free balance amount to tranfer."]
                pub fn force_transfer(
                    &self,
                    source: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    currency_id: runtime_types::primitives::currency::CurrencyId,
                    amount: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<ForceTransfer> {
                    subxt::tx::StaticTxPayload::new(
                        "Tokens",
                        "force_transfer",
                        ForceTransfer {
                            source,
                            dest,
                            currency_id,
                            amount,
                        },
                        [
                            201u8, 63u8, 141u8, 47u8, 68u8, 174u8, 30u8, 110u8, 86u8, 85u8, 129u8,
                            234u8, 133u8, 0u8, 122u8, 248u8, 80u8, 160u8, 1u8, 5u8, 194u8, 197u8,
                            125u8, 162u8, 45u8, 116u8, 198u8, 249u8, 200u8, 108u8, 175u8, 22u8,
                        ],
                    )
                }
                #[doc = "Set the balances of a given account."]
                #[doc = ""]
                #[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it"]
                #[doc = "will also decrease the total issuance of the system"]
                #[doc = "(`TotalIssuance`). If the new free or reserved balance is below the"]
                #[doc = "existential deposit, it will reap the `AccountInfo`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call is `root`."]
                pub fn set_balance(
                    &self,
                    who: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    currency_id: runtime_types::primitives::currency::CurrencyId,
                    new_free: ::core::primitive::u128,
                    new_reserved: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<SetBalance> {
                    subxt::tx::StaticTxPayload::new(
                        "Tokens",
                        "set_balance",
                        SetBalance {
                            who,
                            currency_id,
                            new_free,
                            new_reserved,
                        },
                        [
                            163u8, 191u8, 141u8, 39u8, 221u8, 176u8, 17u8, 59u8, 148u8, 120u8,
                            11u8, 122u8, 195u8, 81u8, 44u8, 216u8, 33u8, 205u8, 119u8, 59u8, 77u8,
                            92u8, 1u8, 107u8, 206u8, 78u8, 100u8, 51u8, 155u8, 122u8, 228u8, 24u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::orml_tokens::module::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An account was created with some free balance."]
            pub struct Endowed {
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Endowed {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Endowed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An account was removed whose balance was non-zero but below"]
            #[doc = "ExistentialDeposit, resulting in an outright loss."]
            pub struct DustLost {
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for DustLost {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "DustLost";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Transfer succeeded."]
            pub struct Transfer {
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                pub from: subxt::ext::sp_core::crypto::AccountId32,
                pub to: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Transfer {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Transfer";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Some balance was reserved (moved from free to reserved)."]
            pub struct Reserved {
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Reserved {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Reserved";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Some balance was unreserved (moved from reserved to free)."]
            pub struct Unreserved {
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Unreserved {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Unreserved";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Some reserved balance was repatriated (moved from reserved to"]
            #[doc = "another account)."]
            pub struct ReserveRepatriated {
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                pub from: subxt::ext::sp_core::crypto::AccountId32,
                pub to: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
                pub status: runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
            }
            impl subxt::events::StaticEvent for ReserveRepatriated {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "ReserveRepatriated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A balance was set by root."]
            pub struct BalanceSet {
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub free: ::core::primitive::u128,
                pub reserved: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for BalanceSet {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "BalanceSet";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The total issuance of an currency has been set"]
            pub struct TotalIssuanceSet {
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for TotalIssuanceSet {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "TotalIssuanceSet";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Some balances were withdrawn (e.g. pay for transaction fee)"]
            pub struct Withdrawn {
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Withdrawn {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Withdrawn";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Some balances were slashed (e.g. due to mis-behavior)"]
            pub struct Slashed {
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub free_amount: ::core::primitive::u128,
                pub reserved_amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Slashed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Deposited some balance into an account"]
            pub struct Deposited {
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Deposited {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Deposited";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Some funds are locked"]
            pub struct LockSet {
                pub lock_id: [::core::primitive::u8; 8usize],
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for LockSet {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "LockSet";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Some locked funds were unlocked"]
            pub struct LockRemoved {
                pub lock_id: [::core::primitive::u8; 8usize],
                pub currency_id: runtime_types::primitives::currency::CurrencyId,
                pub who: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for LockRemoved {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "LockRemoved";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The total issuance of a token type."]
                pub fn total_issuance(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Tokens",
                        "TotalIssuance",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            203u8, 177u8, 143u8, 200u8, 190u8, 210u8, 147u8, 46u8, 47u8, 202u8,
                            42u8, 57u8, 168u8, 246u8, 168u8, 203u8, 190u8, 234u8, 253u8, 130u8,
                            72u8, 19u8, 2u8, 227u8, 115u8, 21u8, 106u8, 71u8, 239u8, 148u8, 192u8,
                            106u8,
                        ],
                    )
                }
                #[doc = " The total issuance of a token type."]
                pub fn total_issuance_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Tokens",
                        "TotalIssuance",
                        Vec::new(),
                        [
                            203u8, 177u8, 143u8, 200u8, 190u8, 210u8, 147u8, 46u8, 47u8, 202u8,
                            42u8, 57u8, 168u8, 246u8, 168u8, 203u8, 190u8, 234u8, 253u8, 130u8,
                            72u8, 19u8, 2u8, 227u8, 115u8, 21u8, 106u8, 71u8, 239u8, 148u8, 192u8,
                            106u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks of a token type under an account."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                pub fn locks(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            runtime_types::orml_tokens::BalanceLock<::core::primitive::u128>,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Tokens",
                        "Locks",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Twox64Concat,
                            ),
                        ],
                        [
                            102u8, 209u8, 145u8, 141u8, 113u8, 97u8, 120u8, 28u8, 130u8, 122u8,
                            139u8, 193u8, 38u8, 34u8, 146u8, 166u8, 222u8, 97u8, 193u8, 137u8,
                            116u8, 56u8, 3u8, 118u8, 192u8, 249u8, 74u8, 17u8, 224u8, 53u8, 209u8,
                            195u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks of a token type under an account."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                pub fn locks_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            runtime_types::orml_tokens::BalanceLock<::core::primitive::u128>,
                        >,
                    >,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Tokens",
                        "Locks",
                        Vec::new(),
                        [
                            102u8, 209u8, 145u8, 141u8, 113u8, 97u8, 120u8, 28u8, 130u8, 122u8,
                            139u8, 193u8, 38u8, 34u8, 146u8, 166u8, 222u8, 97u8, 193u8, 137u8,
                            116u8, 56u8, 3u8, 118u8, 192u8, 249u8, 74u8, 17u8, 224u8, 53u8, 209u8,
                            195u8,
                        ],
                    )
                }
                #[doc = " The balance of a token type under an account."]
                #[doc = ""]
                #[doc = " NOTE: If the total is ever zero, decrease account ref account."]
                #[doc = ""]
                #[doc = " NOTE: This is only used in the case that this module is used to store"]
                #[doc = " balances."]
                pub fn accounts(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::orml_tokens::AccountData<::core::primitive::u128>,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Tokens",
                        "Accounts",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Twox64Concat,
                            ),
                        ],
                        [
                            80u8, 235u8, 135u8, 10u8, 123u8, 40u8, 79u8, 225u8, 219u8, 128u8,
                            105u8, 19u8, 7u8, 57u8, 131u8, 239u8, 221u8, 8u8, 122u8, 212u8, 191u8,
                            186u8, 232u8, 221u8, 196u8, 10u8, 150u8, 219u8, 132u8, 161u8, 60u8,
                            247u8,
                        ],
                    )
                }
                #[doc = " The balance of a token type under an account."]
                #[doc = ""]
                #[doc = " NOTE: If the total is ever zero, decrease account ref account."]
                #[doc = ""]
                #[doc = " NOTE: This is only used in the case that this module is used to store"]
                #[doc = " balances."]
                pub fn accounts_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::orml_tokens::AccountData<::core::primitive::u128>,
                    >,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Tokens",
                        "Accounts",
                        Vec::new(),
                        [
                            80u8, 235u8, 135u8, 10u8, 123u8, 40u8, 79u8, 225u8, 219u8, 128u8,
                            105u8, 19u8, 7u8, 57u8, 131u8, 239u8, 221u8, 8u8, 122u8, 212u8, 191u8,
                            186u8, 232u8, 221u8, 196u8, 10u8, 150u8, 219u8, 132u8, 161u8, 60u8,
                            247u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]
                pub fn reserves(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            runtime_types::orml_tokens::ReserveData<
                                [::core::primitive::u8; 8usize],
                                ::core::primitive::u128,
                            >,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Tokens",
                        "Reserves",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Twox64Concat,
                            ),
                        ],
                        [
                            68u8, 199u8, 14u8, 150u8, 65u8, 10u8, 132u8, 26u8, 235u8, 92u8, 5u8,
                            96u8, 117u8, 28u8, 179u8, 113u8, 214u8, 210u8, 136u8, 183u8, 137u8,
                            23u8, 64u8, 12u8, 181u8, 8u8, 239u8, 215u8, 57u8, 78u8, 237u8, 94u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]
                pub fn reserves_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            runtime_types::orml_tokens::ReserveData<
                                [::core::primitive::u8; 8usize],
                                ::core::primitive::u128,
                            >,
                        >,
                    >,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Tokens",
                        "Reserves",
                        Vec::new(),
                        [
                            68u8, 199u8, 14u8, 150u8, 65u8, 10u8, 132u8, 26u8, 235u8, 92u8, 5u8,
                            96u8, 117u8, 28u8, 179u8, 113u8, 214u8, 210u8, 136u8, 183u8, 137u8,
                            23u8, 64u8, 12u8, 181u8, 8u8, 239u8, 215u8, 57u8, 78u8, 237u8, 94u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn max_locks(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Tokens",
                        "MaxLocks",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of named reserves that can exist on an account."]
                pub fn max_reserves(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Tokens",
                        "MaxReserves",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod oracle {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AddAssetAndInfo {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub threshold: runtime_types::sp_arithmetic::per_things::Percent,
                pub min_answers: ::core::primitive::u32,
                pub max_answers: ::core::primitive::u32,
                pub block_interval: ::core::primitive::u32,
                pub reward_weight: ::core::primitive::u128,
                pub slash: ::core::primitive::u128,
                pub emit_price_changes: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetSigner {
                pub signer: subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AdjustRewards {
                pub annual_cost_per_oracle: ::core::primitive::u128,
                pub num_ideal_oracles: ::core::primitive::u8,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct AddStake {
                pub stake: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RemoveStake;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ReclaimStake;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SubmitPrice {
                pub price: ::core::primitive::u128,
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Permissioned call to add an asset"]
                #[doc = ""]
                #[doc = "- `asset_id`: Id for the asset"]
                #[doc = "- `threshold`: Percent close to mean to be rewarded"]
                #[doc = "- `min_answers`: Min answers before aggregation"]
                #[doc = "- `max_answers`: Max answers to aggregate"]
                #[doc = "- `block_interval`: blocks until oracle triggered"]
                #[doc = "- `reward`: reward amount for correct answer"]
                #[doc = "- `slash`: slash amount for bad answer"]
                #[doc = "- `emit_price_changes`: emit PriceChanged event when asset price changes"]
                #[doc = ""]
                #[doc = "Emits `DepositEvent` event when successful."]
                pub fn add_asset_and_info(
                    &self,
                    asset_id: runtime_types::primitives::currency::CurrencyId,
                    threshold: runtime_types::sp_arithmetic::per_things::Percent,
                    min_answers: ::core::primitive::u32,
                    max_answers: ::core::primitive::u32,
                    block_interval: ::core::primitive::u32,
                    reward_weight: ::core::primitive::u128,
                    slash: ::core::primitive::u128,
                    emit_price_changes: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<AddAssetAndInfo> {
                    subxt::tx::StaticTxPayload::new(
                        "Oracle",
                        "add_asset_and_info",
                        AddAssetAndInfo {
                            asset_id,
                            threshold,
                            min_answers,
                            max_answers,
                            block_interval,
                            reward_weight,
                            slash,
                            emit_price_changes,
                        },
                        [
                            41u8, 201u8, 103u8, 209u8, 101u8, 39u8, 254u8, 245u8, 188u8, 0u8, 5u8,
                            182u8, 148u8, 116u8, 55u8, 234u8, 155u8, 245u8, 49u8, 232u8, 125u8,
                            2u8, 9u8, 208u8, 121u8, 206u8, 112u8, 224u8, 174u8, 77u8, 130u8, 100u8,
                        ],
                    )
                }
                #[doc = "Call for a signer to be set, called from controller, adds stake."]
                #[doc = ""]
                #[doc = "- `signer`: signer to tie controller to"]
                #[doc = ""]
                #[doc = "Emits `SignerSet` and `StakeAdded` events when successful."]
                pub fn set_signer(
                    &self,
                    signer: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<SetSigner> {
                    subxt::tx::StaticTxPayload::new(
                        "Oracle",
                        "set_signer",
                        SetSigner { signer },
                        [
                            73u8, 228u8, 199u8, 211u8, 100u8, 63u8, 140u8, 6u8, 161u8, 1u8, 34u8,
                            191u8, 159u8, 173u8, 241u8, 217u8, 29u8, 185u8, 67u8, 187u8, 126u8,
                            88u8, 214u8, 207u8, 147u8, 70u8, 66u8, 237u8, 233u8, 97u8, 108u8, 44u8,
                        ],
                    )
                }
                #[doc = "Call to start rewarding Oracles."]
                #[doc = "- `annual_cost_per_oracle`: Annual cost of an Oracle."]
                #[doc = "- `num_ideal_oracles`: Number of ideal Oracles. This in fact should be higher than the"]
                #[doc = "  actual ideal number so that the Oracles make a profit under ideal conditions."]
                #[doc = ""]
                #[doc = "Emits `RewardRateSet` event when successful."]
                pub fn adjust_rewards(
                    &self,
                    annual_cost_per_oracle: ::core::primitive::u128,
                    num_ideal_oracles: ::core::primitive::u8,
                ) -> subxt::tx::StaticTxPayload<AdjustRewards> {
                    subxt::tx::StaticTxPayload::new(
                        "Oracle",
                        "adjust_rewards",
                        AdjustRewards {
                            annual_cost_per_oracle,
                            num_ideal_oracles,
                        },
                        [
                            199u8, 115u8, 9u8, 130u8, 73u8, 207u8, 189u8, 99u8, 79u8, 167u8, 51u8,
                            166u8, 192u8, 176u8, 178u8, 41u8, 170u8, 139u8, 147u8, 221u8, 142u8,
                            28u8, 0u8, 201u8, 215u8, 227u8, 36u8, 12u8, 185u8, 121u8, 103u8, 115u8,
                        ],
                    )
                }
                #[doc = "call to add more stake from a controller"]
                #[doc = ""]
                #[doc = "- `stake`: amount to add to stake"]
                #[doc = ""]
                #[doc = "Emits `StakeAdded` event when successful."]
                pub fn add_stake(
                    &self,
                    stake: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<AddStake> {
                    subxt::tx::StaticTxPayload::new(
                        "Oracle",
                        "add_stake",
                        AddStake { stake },
                        [
                            220u8, 69u8, 184u8, 4u8, 205u8, 132u8, 198u8, 237u8, 233u8, 244u8,
                            60u8, 140u8, 91u8, 114u8, 20u8, 161u8, 123u8, 197u8, 237u8, 194u8,
                            110u8, 163u8, 3u8, 230u8, 164u8, 58u8, 62u8, 55u8, 19u8, 65u8, 134u8,
                            18u8,
                        ],
                    )
                }
                #[doc = "Call to put in a claim to remove stake, called from controller"]
                #[doc = ""]
                #[doc = "Emits `StakeRemoved` event when successful."]
                pub fn remove_stake(&self) -> subxt::tx::StaticTxPayload<RemoveStake> {
                    subxt::tx::StaticTxPayload::new(
                        "Oracle",
                        "remove_stake",
                        RemoveStake {},
                        [
                            109u8, 215u8, 126u8, 241u8, 3u8, 34u8, 227u8, 110u8, 116u8, 160u8,
                            101u8, 240u8, 73u8, 57u8, 225u8, 212u8, 100u8, 41u8, 126u8, 120u8,
                            206u8, 201u8, 191u8, 156u8, 142u8, 110u8, 62u8, 19u8, 226u8, 239u8,
                            93u8, 80u8,
                        ],
                    )
                }
                #[doc = "Call to reclaim stake after proper time has passed, called from controller"]
                #[doc = ""]
                #[doc = "Emits `StakeReclaimed` event when successful."]
                pub fn reclaim_stake(&self) -> subxt::tx::StaticTxPayload<ReclaimStake> {
                    subxt::tx::StaticTxPayload::new(
                        "Oracle",
                        "reclaim_stake",
                        ReclaimStake {},
                        [
                            214u8, 66u8, 83u8, 162u8, 26u8, 140u8, 190u8, 228u8, 234u8, 121u8,
                            54u8, 75u8, 1u8, 193u8, 237u8, 149u8, 168u8, 46u8, 93u8, 146u8, 50u8,
                            64u8, 72u8, 217u8, 183u8, 6u8, 185u8, 103u8, 176u8, 54u8, 188u8, 149u8,
                        ],
                    )
                }
                #[doc = "Call to submit a price, gas is returned if extrinsic is successful."]
                #[doc = "Should be called from offchain worker but can be called manually too."]
                #[doc = ""]
                #[doc = "This is an operational transaction."]
                #[doc = ""]
                #[doc = "- `price`: price to submit, normalized to 12 decimals"]
                #[doc = "- `asset_id`: id for the asset"]
                #[doc = ""]
                #[doc = "Emits `PriceSubmitted` event when successful."]
                pub fn submit_price(
                    &self,
                    price: ::core::primitive::u128,
                    asset_id: runtime_types::primitives::currency::CurrencyId,
                ) -> subxt::tx::StaticTxPayload<SubmitPrice> {
                    subxt::tx::StaticTxPayload::new(
                        "Oracle",
                        "submit_price",
                        SubmitPrice { price, asset_id },
                        [
                            70u8, 129u8, 251u8, 66u8, 231u8, 96u8, 152u8, 177u8, 223u8, 166u8,
                            233u8, 69u8, 71u8, 146u8, 181u8, 107u8, 174u8, 193u8, 253u8, 189u8,
                            4u8, 95u8, 157u8, 203u8, 220u8, 170u8, 192u8, 162u8, 252u8, 182u8,
                            244u8, 175u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_oracle::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Asset info created or changed. \\[asset_id, threshold, min_answers, max_answers,"]
            #[doc = "block_interval, reward, slash\\]"]
            pub struct AssetInfoChange(
                pub runtime_types::primitives::currency::CurrencyId,
                pub runtime_types::sp_arithmetic::per_things::Percent,
                pub ::core::primitive::u32,
                pub ::core::primitive::u32,
                pub ::core::primitive::u32,
                pub ::core::primitive::u128,
                pub ::core::primitive::u128,
            );
            impl subxt::events::StaticEvent for AssetInfoChange {
                const PALLET: &'static str = "Oracle";
                const EVENT: &'static str = "AssetInfoChange";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Signer was set. \\[signer, controller\\]"]
            pub struct SignerSet(
                pub subxt::ext::sp_core::crypto::AccountId32,
                pub subxt::ext::sp_core::crypto::AccountId32,
            );
            impl subxt::events::StaticEvent for SignerSet {
                const PALLET: &'static str = "Oracle";
                const EVENT: &'static str = "SignerSet";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Stake was added. \\[added_by, amount_added, total_amount\\]"]
            pub struct StakeAdded(
                pub subxt::ext::sp_core::crypto::AccountId32,
                pub ::core::primitive::u128,
                pub ::core::primitive::u128,
            );
            impl subxt::events::StaticEvent for StakeAdded {
                const PALLET: &'static str = "Oracle";
                const EVENT: &'static str = "StakeAdded";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Stake removed. \\[removed_by, amount, block_number\\]"]
            pub struct StakeRemoved(
                pub subxt::ext::sp_core::crypto::AccountId32,
                pub ::core::primitive::u128,
                pub ::core::primitive::u32,
            );
            impl subxt::events::StaticEvent for StakeRemoved {
                const PALLET: &'static str = "Oracle";
                const EVENT: &'static str = "StakeRemoved";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Stake reclaimed. \\[reclaimed_by, amount\\]"]
            pub struct StakeReclaimed(
                pub subxt::ext::sp_core::crypto::AccountId32,
                pub ::core::primitive::u128,
            );
            impl subxt::events::StaticEvent for StakeReclaimed {
                const PALLET: &'static str = "Oracle";
                const EVENT: &'static str = "StakeReclaimed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Price submitted by oracle. \\[oracle_address, asset_id, price\\]"]
            pub struct PriceSubmitted(
                pub subxt::ext::sp_core::crypto::AccountId32,
                pub runtime_types::primitives::currency::CurrencyId,
                pub ::core::primitive::u128,
            );
            impl subxt::events::StaticEvent for PriceSubmitted {
                const PALLET: &'static str = "Oracle";
                const EVENT: &'static str = "PriceSubmitted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Oracle slashed. \\[oracle_address, asset_id, amount\\]"]
            pub struct UserSlashed(
                pub subxt::ext::sp_core::crypto::AccountId32,
                pub runtime_types::primitives::currency::CurrencyId,
                pub ::core::primitive::u128,
            );
            impl subxt::events::StaticEvent for UserSlashed {
                const PALLET: &'static str = "Oracle";
                const EVENT: &'static str = "UserSlashed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Oracle rewarded. \\[oracle_address, asset_id, price\\]"]
            pub struct OracleRewarded(
                pub subxt::ext::sp_core::crypto::AccountId32,
                pub runtime_types::primitives::currency::CurrencyId,
                pub ::core::primitive::u128,
            );
            impl subxt::events::StaticEvent for OracleRewarded {
                const PALLET: &'static str = "Oracle";
                const EVENT: &'static str = "OracleRewarded";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "Rewarding Started \\[rewarding start timestamp]"]
            pub struct RewardingAdjustment(pub ::core::primitive::u64);
            impl subxt::events::StaticEvent for RewardingAdjustment {
                const PALLET: &'static str = "Oracle";
                const EVENT: &'static str = "RewardingAdjustment";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Answer from oracle removed for staleness. \\[oracle_address, price\\]"]
            pub struct AnswerPruned(
                pub subxt::ext::sp_core::crypto::AccountId32,
                pub ::core::primitive::u128,
            );
            impl subxt::events::StaticEvent for AnswerPruned {
                const PALLET: &'static str = "Oracle";
                const EVENT: &'static str = "AnswerPruned";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Price changed by oracle \\[asset_id, price\\]"]
            pub struct PriceChanged(
                pub runtime_types::primitives::currency::CurrencyId,
                pub ::core::primitive::u128,
            );
            impl subxt::events::StaticEvent for PriceChanged {
                const PALLET: &'static str = "Oracle";
                const EVENT: &'static str = "PriceChanged";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Total amount of assets"]
                pub fn assets_count(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "AssetsCount",
                        vec![],
                        [
                            215u8, 70u8, 33u8, 171u8, 12u8, 49u8, 202u8, 86u8, 73u8, 211u8, 199u8,
                            120u8, 212u8, 27u8, 233u8, 0u8, 13u8, 97u8, 179u8, 132u8, 34u8, 70u8,
                            211u8, 86u8, 135u8, 179u8, 68u8, 39u8, 64u8, 79u8, 26u8, 211u8,
                        ],
                    )
                }
                #[doc = " Rewarding history for Oracles. Used for calculating the current block reward."]
                pub fn reward_tracker_store(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::oracle::RewardTracker<
                            ::core::primitive::u128,
                            ::core::primitive::u64,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "RewardTrackerStore",
                        vec![],
                        [
                            138u8, 225u8, 5u8, 227u8, 163u8, 131u8, 161u8, 5u8, 55u8, 131u8, 183u8,
                            12u8, 221u8, 80u8, 29u8, 132u8, 175u8, 96u8, 195u8, 102u8, 221u8, 42u8,
                            163u8, 201u8, 191u8, 24u8, 147u8, 191u8, 222u8, 207u8, 161u8, 242u8,
                        ],
                    )
                }
                #[doc = " Mapping signing key to controller key"]
                pub fn signer_to_controller(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<subxt::ext::sp_core::crypto::AccountId32>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "SignerToController",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            170u8, 46u8, 103u8, 168u8, 186u8, 147u8, 69u8, 246u8, 17u8, 21u8,
                            183u8, 165u8, 202u8, 24u8, 10u8, 141u8, 79u8, 131u8, 178u8, 131u8,
                            90u8, 15u8, 47u8, 104u8, 4u8, 117u8, 95u8, 112u8, 180u8, 184u8, 152u8,
                            125u8,
                        ],
                    )
                }
                #[doc = " Mapping signing key to controller key"]
                pub fn signer_to_controller_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<subxt::ext::sp_core::crypto::AccountId32>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "SignerToController",
                        Vec::new(),
                        [
                            170u8, 46u8, 103u8, 168u8, 186u8, 147u8, 69u8, 246u8, 17u8, 21u8,
                            183u8, 165u8, 202u8, 24u8, 10u8, 141u8, 79u8, 131u8, 178u8, 131u8,
                            90u8, 15u8, 47u8, 104u8, 4u8, 117u8, 95u8, 112u8, 180u8, 184u8, 152u8,
                            125u8,
                        ],
                    )
                }
                #[doc = " Mapping Controller key to signer key"]
                pub fn controller_to_signer(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<subxt::ext::sp_core::crypto::AccountId32>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "ControllerToSigner",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            254u8, 58u8, 117u8, 78u8, 93u8, 95u8, 74u8, 45u8, 170u8, 190u8, 136u8,
                            50u8, 125u8, 222u8, 31u8, 92u8, 91u8, 189u8, 157u8, 60u8, 124u8, 236u8,
                            144u8, 53u8, 182u8, 12u8, 101u8, 28u8, 236u8, 130u8, 25u8, 250u8,
                        ],
                    )
                }
                #[doc = " Mapping Controller key to signer key"]
                pub fn controller_to_signer_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<subxt::ext::sp_core::crypto::AccountId32>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "ControllerToSigner",
                        Vec::new(),
                        [
                            254u8, 58u8, 117u8, 78u8, 93u8, 95u8, 74u8, 45u8, 170u8, 190u8, 136u8,
                            50u8, 125u8, 222u8, 31u8, 92u8, 91u8, 189u8, 157u8, 60u8, 124u8, 236u8,
                            144u8, 53u8, 182u8, 12u8, 101u8, 28u8, 236u8, 130u8, 25u8, 250u8,
                        ],
                    )
                }
                #[doc = " Tracking withdrawal requests"]
                pub fn declared_withdraws(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_oracle::pallet::Withdraw<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "DeclaredWithdraws",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            19u8, 75u8, 148u8, 165u8, 117u8, 216u8, 35u8, 131u8, 84u8, 176u8,
                            128u8, 85u8, 105u8, 179u8, 203u8, 30u8, 91u8, 86u8, 74u8, 165u8, 57u8,
                            96u8, 245u8, 237u8, 145u8, 205u8, 254u8, 37u8, 139u8, 39u8, 214u8,
                            178u8,
                        ],
                    )
                }
                #[doc = " Tracking withdrawal requests"]
                pub fn declared_withdraws_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_oracle::pallet::Withdraw<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "DeclaredWithdraws",
                        Vec::new(),
                        [
                            19u8, 75u8, 148u8, 165u8, 117u8, 216u8, 35u8, 131u8, 84u8, 176u8,
                            128u8, 85u8, 105u8, 179u8, 203u8, 30u8, 91u8, 86u8, 74u8, 165u8, 57u8,
                            96u8, 245u8, 237u8, 145u8, 205u8, 254u8, 37u8, 139u8, 39u8, 214u8,
                            178u8,
                        ],
                    )
                }
                #[doc = " Mapping of signing key to stake"]
                pub fn oracle_stake(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "OracleStake",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            101u8, 206u8, 86u8, 58u8, 134u8, 90u8, 48u8, 199u8, 183u8, 254u8,
                            225u8, 172u8, 78u8, 228u8, 57u8, 80u8, 203u8, 243u8, 65u8, 30u8, 134u8,
                            61u8, 12u8, 221u8, 225u8, 135u8, 110u8, 108u8, 42u8, 104u8, 44u8,
                            226u8,
                        ],
                    )
                }
                #[doc = " Mapping of signing key to stake"]
                pub fn oracle_stake_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "OracleStake",
                        Vec::new(),
                        [
                            101u8, 206u8, 86u8, 58u8, 134u8, 90u8, 48u8, 199u8, 183u8, 254u8,
                            225u8, 172u8, 78u8, 228u8, 57u8, 80u8, 203u8, 243u8, 65u8, 30u8, 134u8,
                            61u8, 12u8, 221u8, 225u8, 135u8, 110u8, 108u8, 42u8, 104u8, 44u8,
                            226u8,
                        ],
                    )
                }
                #[doc = " Mapping of slash amounts currently in transit"]
                pub fn answer_in_transit(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "AnswerInTransit",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            92u8, 230u8, 213u8, 86u8, 216u8, 139u8, 55u8, 59u8, 218u8, 78u8, 99u8,
                            241u8, 118u8, 101u8, 224u8, 146u8, 209u8, 154u8, 236u8, 212u8, 117u8,
                            177u8, 128u8, 98u8, 226u8, 54u8, 102u8, 247u8, 136u8, 201u8, 174u8,
                            72u8,
                        ],
                    )
                }
                #[doc = " Mapping of slash amounts currently in transit"]
                pub fn answer_in_transit_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "AnswerInTransit",
                        Vec::new(),
                        [
                            92u8, 230u8, 213u8, 86u8, 216u8, 139u8, 55u8, 59u8, 218u8, 78u8, 99u8,
                            241u8, 118u8, 101u8, 224u8, 146u8, 209u8, 154u8, 236u8, 212u8, 117u8,
                            177u8, 128u8, 98u8, 226u8, 54u8, 102u8, 247u8, 136u8, 201u8, 174u8,
                            72u8,
                        ],
                    )
                }
                #[doc = " Price for an asset and blocknumber asset was updated at"]
                pub fn prices(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::oracle::Price<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "Prices",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            4u8, 80u8, 102u8, 113u8, 107u8, 40u8, 145u8, 121u8, 49u8, 31u8, 22u8,
                            89u8, 162u8, 136u8, 215u8, 67u8, 138u8, 155u8, 58u8, 34u8, 173u8,
                            232u8, 102u8, 234u8, 158u8, 85u8, 143u8, 158u8, 175u8, 220u8, 131u8,
                            247u8,
                        ],
                    )
                }
                #[doc = " Price for an asset and blocknumber asset was updated at"]
                pub fn prices_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::oracle::Price<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    >,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "Prices",
                        Vec::new(),
                        [
                            4u8, 80u8, 102u8, 113u8, 107u8, 40u8, 145u8, 121u8, 49u8, 31u8, 22u8,
                            89u8, 162u8, 136u8, 215u8, 67u8, 138u8, 155u8, 58u8, 34u8, 173u8,
                            232u8, 102u8, 234u8, 158u8, 85u8, 143u8, 158u8, 175u8, 220u8, 131u8,
                            247u8,
                        ],
                    )
                }
                #[doc = " Price for an asset and blocknumber asset was updated at"]
                pub fn price_history(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            runtime_types::composable_traits::oracle::Price<
                                ::core::primitive::u128,
                                ::core::primitive::u32,
                            >,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "PriceHistory",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            131u8, 141u8, 57u8, 31u8, 157u8, 216u8, 64u8, 237u8, 65u8, 106u8,
                            255u8, 249u8, 140u8, 190u8, 155u8, 88u8, 121u8, 68u8, 250u8, 79u8,
                            213u8, 141u8, 157u8, 76u8, 41u8, 53u8, 68u8, 154u8, 170u8, 143u8,
                            236u8, 40u8,
                        ],
                    )
                }
                #[doc = " Price for an asset and blocknumber asset was updated at"]
                pub fn price_history_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            runtime_types::composable_traits::oracle::Price<
                                ::core::primitive::u128,
                                ::core::primitive::u32,
                            >,
                        >,
                    >,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "PriceHistory",
                        Vec::new(),
                        [
                            131u8, 141u8, 57u8, 31u8, 157u8, 216u8, 64u8, 237u8, 65u8, 106u8,
                            255u8, 249u8, 140u8, 190u8, 155u8, 88u8, 121u8, 68u8, 250u8, 79u8,
                            213u8, 141u8, 157u8, 76u8, 41u8, 53u8, 68u8, 154u8, 170u8, 143u8,
                            236u8, 40u8,
                        ],
                    )
                }
                #[doc = " Temporary prices before aggregated"]
                pub fn pre_prices(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            runtime_types::pallet_oracle::pallet::PrePrice<
                                ::core::primitive::u128,
                                ::core::primitive::u32,
                                subxt::ext::sp_core::crypto::AccountId32,
                            >,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "PrePrices",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            246u8, 156u8, 113u8, 22u8, 13u8, 231u8, 195u8, 151u8, 233u8, 97u8,
                            197u8, 167u8, 139u8, 179u8, 155u8, 6u8, 212u8, 153u8, 40u8, 84u8, 3u8,
                            38u8, 221u8, 206u8, 254u8, 41u8, 73u8, 25u8, 121u8, 147u8, 15u8, 214u8,
                        ],
                    )
                }
                #[doc = " Temporary prices before aggregated"]
                pub fn pre_prices_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            runtime_types::pallet_oracle::pallet::PrePrice<
                                ::core::primitive::u128,
                                ::core::primitive::u32,
                                subxt::ext::sp_core::crypto::AccountId32,
                            >,
                        >,
                    >,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "PrePrices",
                        Vec::new(),
                        [
                            246u8, 156u8, 113u8, 22u8, 13u8, 231u8, 195u8, 151u8, 233u8, 97u8,
                            197u8, 167u8, 139u8, 179u8, 155u8, 6u8, 212u8, 153u8, 40u8, 84u8, 3u8,
                            38u8, 221u8, 206u8, 254u8, 41u8, 73u8, 25u8, 121u8, 147u8, 15u8, 214u8,
                        ],
                    )
                }
                #[doc = " Information about asset, including precision threshold and max/min answers"]
                pub fn assets_info(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_oracle::pallet::AssetInfo<
                            runtime_types::sp_arithmetic::per_things::Percent,
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "AssetsInfo",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            41u8, 47u8, 99u8, 224u8, 72u8, 196u8, 28u8, 159u8, 34u8, 84u8, 157u8,
                            69u8, 143u8, 116u8, 20u8, 132u8, 121u8, 73u8, 48u8, 162u8, 67u8, 60u8,
                            28u8, 180u8, 113u8, 91u8, 181u8, 18u8, 55u8, 57u8, 244u8, 2u8,
                        ],
                    )
                }
                #[doc = " Information about asset, including precision threshold and max/min answers"]
                pub fn assets_info_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_oracle::pallet::AssetInfo<
                            runtime_types::sp_arithmetic::per_things::Percent,
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Oracle",
                        "AssetsInfo",
                        Vec::new(),
                        [
                            41u8, 47u8, 99u8, 224u8, 72u8, 196u8, 28u8, 159u8, 34u8, 84u8, 157u8,
                            69u8, 143u8, 116u8, 20u8, 132u8, 121u8, 73u8, 48u8, 162u8, 67u8, 60u8,
                            28u8, 180u8, 113u8, 91u8, 181u8, 18u8, 55u8, 57u8, 244u8, 2u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn max_history(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Oracle",
                        "MaxHistory",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn twap_window(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u16>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Oracle",
                        "TwapWindow",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn max_pre_prices(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Oracle",
                        "MaxPrePrices",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn ms_per_block(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Oracle",
                        "MsPerBlock",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn pallet_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::frame_support::PalletId>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Oracle",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
                            174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
                            9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod currency_factory {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct AddRange {
                pub length: ::core::primitive::u64,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetMetadata {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub metadata: runtime_types::composable_traits::assets::BasicAssetMetadata,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn add_range(
                    &self,
                    length: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<AddRange> {
                    subxt::tx::StaticTxPayload::new(
                        "CurrencyFactory",
                        "add_range",
                        AddRange { length },
                        [
                            239u8, 242u8, 170u8, 252u8, 41u8, 195u8, 156u8, 238u8, 196u8, 166u8,
                            6u8, 228u8, 202u8, 48u8, 230u8, 140u8, 228u8, 214u8, 157u8, 67u8, 81u8,
                            9u8, 215u8, 113u8, 199u8, 238u8, 2u8, 163u8, 239u8, 192u8, 155u8, 38u8,
                        ],
                    )
                }
                #[doc = "Sets metadata"]
                pub fn set_metadata(
                    &self,
                    asset_id: runtime_types::primitives::currency::CurrencyId,
                    metadata: runtime_types::composable_traits::assets::BasicAssetMetadata,
                ) -> subxt::tx::StaticTxPayload<SetMetadata> {
                    subxt::tx::StaticTxPayload::new(
                        "CurrencyFactory",
                        "set_metadata",
                        SetMetadata { asset_id, metadata },
                        [
                            247u8, 186u8, 131u8, 92u8, 172u8, 202u8, 106u8, 118u8, 77u8, 255u8,
                            150u8, 218u8, 247u8, 1u8, 131u8, 42u8, 160u8, 162u8, 191u8, 154u8,
                            150u8, 65u8, 23u8, 188u8, 183u8, 58u8, 102u8, 64u8, 16u8, 229u8, 234u8,
                            32u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_currency_factory::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RangeCreated {
                pub range: runtime_types::pallet_currency_factory::ranges::Range<
                    runtime_types::primitives::currency::CurrencyId,
                >,
            }
            impl subxt::events::StaticEvent for RangeCreated {
                const PALLET: &'static str = "CurrencyFactory";
                const EVENT: &'static str = "RangeCreated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn asset_id_ranges(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_currency_factory::ranges::Ranges<
                            runtime_types::primitives::currency::CurrencyId,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CurrencyFactory",
                        "AssetIdRanges",
                        vec![],
                        [
                            22u8, 227u8, 15u8, 251u8, 150u8, 72u8, 61u8, 107u8, 142u8, 193u8,
                            253u8, 199u8, 241u8, 219u8, 138u8, 28u8, 59u8, 177u8, 155u8, 80u8,
                            26u8, 245u8, 85u8, 141u8, 122u8, 161u8, 215u8, 147u8, 202u8, 168u8,
                            149u8, 156u8,
                        ],
                    )
                }
                pub fn asset_ed(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CurrencyFactory",
                        "AssetEd",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox128,
                        )],
                        [
                            157u8, 246u8, 89u8, 3u8, 170u8, 111u8, 221u8, 215u8, 106u8, 78u8, 11u8,
                            245u8, 15u8, 218u8, 143u8, 173u8, 188u8, 148u8, 224u8, 153u8, 82u8,
                            54u8, 242u8, 102u8, 164u8, 129u8, 100u8, 119u8, 69u8, 227u8, 144u8,
                            62u8,
                        ],
                    )
                }
                pub fn asset_ed_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CurrencyFactory",
                        "AssetEd",
                        Vec::new(),
                        [
                            157u8, 246u8, 89u8, 3u8, 170u8, 111u8, 221u8, 215u8, 106u8, 78u8, 11u8,
                            245u8, 15u8, 218u8, 143u8, 173u8, 188u8, 148u8, 224u8, 153u8, 82u8,
                            54u8, 242u8, 102u8, 164u8, 129u8, 100u8, 119u8, 69u8, 227u8, 144u8,
                            62u8,
                        ],
                    )
                }
                pub fn asset_metadata(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::assets::BasicAssetMetadata,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CurrencyFactory",
                        "AssetMetadata",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox128,
                        )],
                        [
                            185u8, 114u8, 217u8, 111u8, 55u8, 241u8, 125u8, 51u8, 95u8, 89u8, 39u8,
                            166u8, 183u8, 208u8, 129u8, 214u8, 56u8, 6u8, 0u8, 44u8, 134u8, 242u8,
                            45u8, 238u8, 61u8, 41u8, 155u8, 137u8, 166u8, 53u8, 130u8, 28u8,
                        ],
                    )
                }
                pub fn asset_metadata_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::assets::BasicAssetMetadata,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CurrencyFactory",
                        "AssetMetadata",
                        Vec::new(),
                        [
                            185u8, 114u8, 217u8, 111u8, 55u8, 241u8, 125u8, 51u8, 95u8, 89u8, 39u8,
                            166u8, 183u8, 208u8, 129u8, 214u8, 56u8, 6u8, 0u8, 44u8, 134u8, 242u8,
                            45u8, 238u8, 61u8, 41u8, 155u8, 137u8, 166u8, 53u8, 130u8, 28u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod vault {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Create {
                pub vault: runtime_types::composable_traits::vault::VaultConfig<
                    subxt::ext::sp_core::crypto::AccountId32,
                    runtime_types::primitives::currency::CurrencyId,
                >,
                pub deposit_amount: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ClaimSurcharge {
                pub dest: ::core::primitive::u64,
                pub address: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AddSurcharge {
                pub dest: ::core::primitive::u64,
                pub amount: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct DeleteTombstoned {
                pub dest: ::core::primitive::u64,
                pub address: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Deposit {
                pub vault: ::core::primitive::u64,
                pub asset_amount: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Withdraw {
                pub vault: ::core::primitive::u64,
                pub lp_amount: ::core::primitive::u128,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct EmergencyShutdown {
                pub vault: ::core::primitive::u64,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct Start {
                pub vault: ::core::primitive::u64,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct LiquidateStrategy {
                pub vault_idx: ::core::primitive::u64,
                pub strategy_account_id: subxt::ext::sp_core::crypto::AccountId32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Creates a new vault, locking up the deposit. If the deposit is greater than the"]
                #[doc = "`ExistentialDeposit` + `CreationDeposit`, the vault will remain alive forever, else it"]
                #[doc = "can be `tombstoned` after `deposit / RentPerBlock `. Accounts may deposit more funds to"]
                #[doc = "keep the vault alive."]
                #[doc = ""]
                #[doc = "# Emits"]
                #[doc = " - [`Event::VaultCreated`](Event::VaultCreated)"]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = " - When the origin is not signed."]
                #[doc = " - When `deposit < CreationDeposit`."]
                #[doc = " - Origin has insufficient funds to lock the deposit."]
                pub fn create(
                    &self,
                    vault: runtime_types::composable_traits::vault::VaultConfig<
                        subxt::ext::sp_core::crypto::AccountId32,
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                    deposit_amount: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<Create> {
                    subxt::tx::StaticTxPayload::new(
                        "Vault",
                        "create",
                        Create {
                            vault,
                            deposit_amount,
                        },
                        [
                            24u8, 138u8, 143u8, 12u8, 245u8, 16u8, 14u8, 238u8, 12u8, 82u8, 132u8,
                            218u8, 240u8, 194u8, 231u8, 188u8, 240u8, 59u8, 35u8, 182u8, 33u8,
                            175u8, 62u8, 5u8, 157u8, 72u8, 196u8, 227u8, 34u8, 114u8, 157u8, 249u8,
                        ],
                    )
                }
                #[doc = "Subtracts rent from a vault, rewarding the caller if successful with a small fee and"]
                #[doc = "possibly tombstoning the vault."]
                #[doc = ""]
                #[doc = "A tombstoned vault still allows for withdrawals but blocks deposits, and requests all"]
                #[doc = "strategies to return their funds."]
                pub fn claim_surcharge(
                    &self,
                    dest: ::core::primitive::u64,
                    address: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::tx::StaticTxPayload<ClaimSurcharge> {
                    subxt::tx::StaticTxPayload::new(
                        "Vault",
                        "claim_surcharge",
                        ClaimSurcharge { dest, address },
                        [
                            217u8, 76u8, 245u8, 75u8, 150u8, 77u8, 57u8, 231u8, 59u8, 135u8, 11u8,
                            99u8, 107u8, 149u8, 247u8, 75u8, 250u8, 133u8, 41u8, 115u8, 42u8,
                            213u8, 239u8, 195u8, 67u8, 227u8, 150u8, 21u8, 251u8, 57u8, 118u8,
                            77u8,
                        ],
                    )
                }
                pub fn add_surcharge(
                    &self,
                    dest: ::core::primitive::u64,
                    amount: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<AddSurcharge> {
                    subxt::tx::StaticTxPayload::new(
                        "Vault",
                        "add_surcharge",
                        AddSurcharge { dest, amount },
                        [
                            210u8, 255u8, 37u8, 61u8, 68u8, 136u8, 220u8, 237u8, 188u8, 254u8,
                            65u8, 138u8, 31u8, 93u8, 33u8, 148u8, 50u8, 170u8, 58u8, 252u8, 66u8,
                            186u8, 137u8, 132u8, 39u8, 219u8, 105u8, 158u8, 123u8, 214u8, 219u8,
                            18u8,
                        ],
                    )
                }
                pub fn delete_tombstoned(
                    &self,
                    dest: ::core::primitive::u64,
                    address: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::tx::StaticTxPayload<DeleteTombstoned> {
                    subxt::tx::StaticTxPayload::new(
                        "Vault",
                        "delete_tombstoned",
                        DeleteTombstoned { dest, address },
                        [
                            197u8, 37u8, 227u8, 136u8, 133u8, 236u8, 55u8, 221u8, 213u8, 195u8,
                            85u8, 125u8, 2u8, 48u8, 80u8, 166u8, 48u8, 250u8, 53u8, 124u8, 112u8,
                            252u8, 175u8, 220u8, 3u8, 102u8, 199u8, 129u8, 124u8, 74u8, 106u8,
                            121u8,
                        ],
                    )
                }
                #[doc = "Deposit funds in the vault and receive LP tokens in return."]
                #[doc = "# Emits"]
                #[doc = " - Event::Deposited"]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = " - When the origin is not signed."]
                #[doc = " - When `deposit < MinimumDeposit`."]
                pub fn deposit(
                    &self,
                    vault: ::core::primitive::u64,
                    asset_amount: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<Deposit> {
                    subxt::tx::StaticTxPayload::new(
                        "Vault",
                        "deposit",
                        Deposit {
                            vault,
                            asset_amount,
                        },
                        [
                            189u8, 106u8, 101u8, 193u8, 34u8, 112u8, 136u8, 172u8, 38u8, 91u8,
                            203u8, 37u8, 220u8, 216u8, 169u8, 64u8, 149u8, 149u8, 54u8, 196u8,
                            102u8, 194u8, 104u8, 106u8, 37u8, 7u8, 10u8, 71u8, 137u8, 105u8, 124u8,
                            172u8,
                        ],
                    )
                }
                #[doc = "Withdraw funds"]
                #[doc = ""]
                #[doc = "# Emits"]
                #[doc = " - Event::Withdrawn"]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = " - When the origin is not signed."]
                #[doc = " - When `lp_amount < MinimumWithdrawal`."]
                #[doc = " - When the vault has insufficient amounts reserved."]
                pub fn withdraw(
                    &self,
                    vault: ::core::primitive::u64,
                    lp_amount: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<Withdraw> {
                    subxt::tx::StaticTxPayload::new(
                        "Vault",
                        "withdraw",
                        Withdraw { vault, lp_amount },
                        [
                            46u8, 58u8, 138u8, 217u8, 185u8, 146u8, 183u8, 91u8, 119u8, 231u8,
                            72u8, 142u8, 118u8, 159u8, 8u8, 198u8, 50u8, 179u8, 32u8, 236u8, 142u8,
                            0u8, 52u8, 4u8, 29u8, 136u8, 38u8, 125u8, 182u8, 109u8, 69u8, 209u8,
                        ],
                    )
                }
                #[doc = "Stops a vault. To be used in case of severe protocol flaws."]
                #[doc = ""]
                #[doc = "# Emits"]
                #[doc = " - Event::EmergencyShutdown"]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = " - When the origin is not root."]
                #[doc = " - When `vault` does not exist."]
                pub fn emergency_shutdown(
                    &self,
                    vault: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<EmergencyShutdown> {
                    subxt::tx::StaticTxPayload::new(
                        "Vault",
                        "emergency_shutdown",
                        EmergencyShutdown { vault },
                        [
                            92u8, 225u8, 115u8, 25u8, 71u8, 26u8, 171u8, 116u8, 56u8, 32u8, 214u8,
                            16u8, 7u8, 146u8, 125u8, 143u8, 53u8, 181u8, 91u8, 131u8, 234u8, 162u8,
                            29u8, 82u8, 189u8, 19u8, 58u8, 131u8, 239u8, 37u8, 220u8, 8u8,
                        ],
                    )
                }
                #[doc = "(Re)starts a vault after emergency shutdown."]
                #[doc = ""]
                #[doc = "# Emits"]
                #[doc = " - Event::VaultStarted"]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = " - When the origin is not root."]
                #[doc = " - When `vault` does not exist."]
                pub fn start(
                    &self,
                    vault: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<Start> {
                    subxt::tx::StaticTxPayload::new(
                        "Vault",
                        "start",
                        Start { vault },
                        [
                            173u8, 73u8, 59u8, 172u8, 144u8, 8u8, 8u8, 242u8, 135u8, 82u8, 219u8,
                            244u8, 242u8, 150u8, 54u8, 219u8, 108u8, 181u8, 65u8, 160u8, 243u8,
                            252u8, 124u8, 17u8, 153u8, 13u8, 206u8, 255u8, 234u8, 171u8, 104u8,
                            170u8,
                        ],
                    )
                }
                #[doc = "Turns an existent strategy account `strategy_account` of a vault determined by"]
                #[doc = "`vault_idx` into a liquidation state where withdrawn funds should be returned as soon"]
                #[doc = "as possible."]
                #[doc = ""]
                #[doc = "Only the vault's manager will be able to call this method."]
                #[doc = ""]
                #[doc = "# Emits"]
                #[doc = " - Event::LiquidateStrategy"]
                pub fn liquidate_strategy(
                    &self,
                    vault_idx: ::core::primitive::u64,
                    strategy_account_id: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<LiquidateStrategy> {
                    subxt::tx::StaticTxPayload::new(
                        "Vault",
                        "liquidate_strategy",
                        LiquidateStrategy {
                            vault_idx,
                            strategy_account_id,
                        },
                        [
                            255u8, 8u8, 100u8, 45u8, 129u8, 126u8, 219u8, 203u8, 168u8, 157u8,
                            81u8, 211u8, 134u8, 217u8, 160u8, 155u8, 60u8, 250u8, 243u8, 6u8,
                            193u8, 164u8, 101u8, 72u8, 183u8, 150u8, 41u8, 78u8, 154u8, 231u8,
                            238u8, 3u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_vault::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "Emitted after a vault has been successfully created."]
            pub struct VaultCreated {
                pub id: ::core::primitive::u64,
            }
            impl subxt::events::StaticEvent for VaultCreated {
                const PALLET: &'static str = "Vault";
                const EVENT: &'static str = "VaultCreated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Emitted after a user deposits funds into the vault."]
            pub struct Deposited {
                pub account: subxt::ext::sp_core::crypto::AccountId32,
                pub asset_amount: ::core::primitive::u128,
                pub lp_amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Deposited {
                const PALLET: &'static str = "Vault";
                const EVENT: &'static str = "Deposited";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct LiquidateStrategy {
                pub account: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for LiquidateStrategy {
                const PALLET: &'static str = "Vault";
                const EVENT: &'static str = "LiquidateStrategy";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Emitted after a user exchanges LP tokens back for underlying assets"]
            pub struct Withdrawn {
                pub account: subxt::ext::sp_core::crypto::AccountId32,
                pub lp_amount: ::core::primitive::u128,
                pub asset_amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Withdrawn {
                const PALLET: &'static str = "Vault";
                const EVENT: &'static str = "Withdrawn";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "Emitted after a successful emergency shutdown."]
            pub struct EmergencyShutdown {
                pub vault: ::core::primitive::u64,
            }
            impl subxt::events::StaticEvent for EmergencyShutdown {
                const PALLET: &'static str = "Vault";
                const EVENT: &'static str = "EmergencyShutdown";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "Emitted after a vault is restarted."]
            pub struct VaultStarted {
                pub vault: ::core::primitive::u64,
            }
            impl subxt::events::StaticEvent for VaultStarted {
                const PALLET: &'static str = "Vault";
                const EVENT: &'static str = "VaultStarted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The number of vaults, also used to generate the next vault identifier."]
                #[doc = ""]
                #[doc = " # Note"]
                #[doc = ""]
                #[doc = " Cleaned up vaults do not decrement the counter."]
                pub fn vault_count(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Vault",
                        "VaultCount",
                        vec![],
                        [
                            136u8, 131u8, 155u8, 183u8, 229u8, 122u8, 109u8, 220u8, 197u8, 100u8,
                            180u8, 166u8, 110u8, 47u8, 86u8, 165u8, 37u8, 191u8, 132u8, 224u8,
                            147u8, 13u8, 99u8, 63u8, 71u8, 238u8, 7u8, 34u8, 56u8, 43u8, 19u8,
                            212u8,
                        ],
                    )
                }
                #[doc = " Info for each specific vaults."]
                pub fn vaults(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_vault::models::VaultInfo<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u32,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Vault",
                        "Vaults",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            113u8, 86u8, 103u8, 9u8, 138u8, 239u8, 63u8, 167u8, 220u8, 163u8,
                            175u8, 68u8, 141u8, 191u8, 196u8, 210u8, 105u8, 57u8, 11u8, 97u8,
                            106u8, 174u8, 145u8, 118u8, 87u8, 97u8, 28u8, 215u8, 186u8, 207u8,
                            142u8, 232u8,
                        ],
                    )
                }
                #[doc = " Info for each specific vaults."]
                pub fn vaults_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_vault::models::VaultInfo<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u32,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Vault",
                        "Vaults",
                        Vec::new(),
                        [
                            113u8, 86u8, 103u8, 9u8, 138u8, 239u8, 63u8, 167u8, 220u8, 163u8,
                            175u8, 68u8, 141u8, 191u8, 196u8, 210u8, 105u8, 57u8, 11u8, 97u8,
                            106u8, 174u8, 145u8, 118u8, 87u8, 97u8, 28u8, 215u8, 186u8, 207u8,
                            142u8, 232u8,
                        ],
                    )
                }
                #[doc = " Associated LP token for each vault."]
                pub fn lp_tokens_to_vaults(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Vault",
                        "LpTokensToVaults",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            65u8, 19u8, 125u8, 160u8, 195u8, 177u8, 119u8, 42u8, 215u8, 31u8, 56u8,
                            24u8, 6u8, 39u8, 155u8, 133u8, 234u8, 20u8, 63u8, 187u8, 101u8, 182u8,
                            116u8, 64u8, 192u8, 163u8, 13u8, 124u8, 64u8, 29u8, 71u8, 241u8,
                        ],
                    )
                }
                #[doc = " Associated LP token for each vault."]
                pub fn lp_tokens_to_vaults_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Vault",
                        "LpTokensToVaults",
                        Vec::new(),
                        [
                            65u8, 19u8, 125u8, 160u8, 195u8, 177u8, 119u8, 42u8, 215u8, 31u8, 56u8,
                            24u8, 6u8, 39u8, 155u8, 133u8, 234u8, 20u8, 63u8, 187u8, 101u8, 182u8,
                            116u8, 64u8, 192u8, 163u8, 13u8, 124u8, 64u8, 29u8, 71u8, 241u8,
                        ],
                    )
                }
                #[doc = " Overview of the allocation & balances at each strategy. Does not contain the balance held by"]
                #[doc = " the vault itself."]
                pub fn capital_structure(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                    _1: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_vault::models::StrategyOverview<
                            ::core::primitive::u128,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Vault",
                        "CapitalStructure",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            149u8, 62u8, 111u8, 103u8, 216u8, 162u8, 227u8, 31u8, 16u8, 39u8, 16u8,
                            228u8, 59u8, 243u8, 41u8, 157u8, 7u8, 204u8, 182u8, 33u8, 38u8, 198u8,
                            96u8, 69u8, 131u8, 212u8, 216u8, 68u8, 62u8, 142u8, 242u8, 187u8,
                        ],
                    )
                }
                #[doc = " Overview of the allocation & balances at each strategy. Does not contain the balance held by"]
                #[doc = " the vault itself."]
                pub fn capital_structure_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_vault::models::StrategyOverview<
                            ::core::primitive::u128,
                        >,
                    >,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Vault",
                        "CapitalStructure",
                        Vec::new(),
                        [
                            149u8, 62u8, 111u8, 103u8, 216u8, 162u8, 227u8, 31u8, 16u8, 39u8, 16u8,
                            228u8, 59u8, 243u8, 41u8, 157u8, 7u8, 204u8, 182u8, 33u8, 38u8, 198u8,
                            96u8, 69u8, 131u8, 212u8, 216u8, 68u8, 62u8, 142u8, 242u8, 187u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum amount needed to deposit in a vault and receive LP tokens."]
                pub fn minimum_deposit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Vault",
                        "MinimumDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The minimum amount of LP tokens to withdraw funds from a vault."]
                pub fn minimum_withdrawal(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Vault",
                        "MinimumWithdrawal",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The minimum native asset needed to create a vault."]
                pub fn creation_deposit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Vault",
                        "CreationDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The deposit needed for a vault to never be cleaned up. Should be significantly higher"]
                #[doc = " than the rent."]
                pub fn existential_deposit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Vault",
                        "ExistentialDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The duration that a vault may remain tombstoned before it can be deleted."]
                pub fn tombstone_duration(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Vault",
                        "TombstoneDuration",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The rent being charged per block for vaults which have not committed the"]
                #[doc = " `ExistentialDeposit`."]
                pub fn rent_per_block(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Vault",
                        "RentPerBlock",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The id used as the `AccountId` of the vault. This should be unique across all pallets to"]
                #[doc = " avoid name collisions with other pallets and vaults."]
                pub fn pallet_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::frame_support::PalletId>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Vault",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
                            174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
                            9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod assets_registry {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RegisterAsset {
                pub location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
                pub ratio: runtime_types::composable_traits::currency::Rational64,
                pub decimals: ::core::option::Option<::core::primitive::u8>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct UpdateAsset {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
                pub ratio: runtime_types::composable_traits::currency::Rational64,
                pub decimals: ::core::option::Option<::core::primitive::u8>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetMinFee {
                pub target_parachain_id: runtime_types::polkadot_parachain::primitives::Id,
                pub foreign_asset_id:
                    runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
                pub amount: ::core::option::Option<::core::primitive::u128>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Creates asset using `CurrencyFactory`."]
                #[doc = "Raises `AssetRegistered` event"]
                #[doc = ""]
                #[doc = "Sets only required fields by `CurrencyFactory`, to upsert metadata use referenced"]
                #[doc = "pallet."]
                #[doc = ""]
                #[doc = "# Parameters:"]
                #[doc = ""]
                #[doc = "`ratio` -  "]
                #[doc = "Allows `bring you own gas` fees."]
                #[doc = "Set to `None` to prevent payment in this asset, only transferring."]
                #[doc = "Setting to some will NOT start minting tokens with specified ratio."]
                #[doc = ""]
                #[doc = "```python"]
                #[doc = " ratio = foreign_token / native_token"]
                #[doc = " amount_of_foreign_asset = amount_of_native_asset * ratio"]
                #[doc = "```"]
                #[doc = ""]
                #[doc = "`decimals` - `human` number of decimals"]
                #[doc = ""]
                #[doc = "`ed` - same meaning as in for foreign asset account (if None, then asset is not"]
                #[doc = "sufficient)"]
                pub fn register_asset(
                    &self,
                    location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
                    ratio: runtime_types::composable_traits::currency::Rational64,
                    decimals: ::core::option::Option<::core::primitive::u8>,
                ) -> subxt::tx::StaticTxPayload<RegisterAsset> {
                    subxt::tx::StaticTxPayload::new(
                        "AssetsRegistry",
                        "register_asset",
                        RegisterAsset {
                            location,
                            ratio,
                            decimals,
                        },
                        [
                            84u8, 186u8, 134u8, 212u8, 249u8, 192u8, 184u8, 69u8, 218u8, 212u8,
                            97u8, 173u8, 91u8, 36u8, 92u8, 56u8, 90u8, 242u8, 39u8, 216u8, 91u8,
                            139u8, 53u8, 249u8, 193u8, 227u8, 139u8, 133u8, 128u8, 244u8, 61u8,
                            63u8,
                        ],
                    )
                }
                #[doc = "Given well existing asset, update its remote information."]
                #[doc = "Use with caution as it allow reroute assets location."]
                #[doc = "See `register_asset` for parameters meaning."]
                pub fn update_asset(
                    &self,
                    asset_id: runtime_types::primitives::currency::CurrencyId,
                    location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
                    ratio: runtime_types::composable_traits::currency::Rational64,
                    decimals: ::core::option::Option<::core::primitive::u8>,
                ) -> subxt::tx::StaticTxPayload<UpdateAsset> {
                    subxt::tx::StaticTxPayload::new(
                        "AssetsRegistry",
                        "update_asset",
                        UpdateAsset {
                            asset_id,
                            location,
                            ratio,
                            decimals,
                        },
                        [
                            110u8, 1u8, 57u8, 36u8, 214u8, 118u8, 56u8, 240u8, 93u8, 134u8, 237u8,
                            99u8, 172u8, 27u8, 208u8, 158u8, 149u8, 156u8, 116u8, 0u8, 89u8, 103u8,
                            160u8, 43u8, 226u8, 216u8, 158u8, 142u8, 179u8, 158u8, 98u8, 239u8,
                        ],
                    )
                }
                #[doc = "Minimal amount of `foreign_asset_id` required to send message to other network."]
                #[doc = "Target network may or may not accept payment `amount`."]
                #[doc = "Assumed this is maintained up to date by technical team."]
                #[doc = "Mostly UI hint and fail fast solution."]
                #[doc = "Messages sending smaller fee will not be sent."]
                #[doc = "In theory can be updated by parachain sovereign account too."]
                #[doc = "If None, than it is well known cannot pay with that asset on target_parachain_id."]
                #[doc = "If Some(0), than price can be anything greater or equal to zero."]
                #[doc = "If Some(MAX), than actually it forbids transfers."]
                pub fn set_min_fee(
                    &self,
                    target_parachain_id: runtime_types::polkadot_parachain::primitives::Id,
                    foreign_asset_id : runtime_types :: composable_traits :: xcm :: assets :: XcmAssetLocation,
                    amount: ::core::option::Option<::core::primitive::u128>,
                ) -> subxt::tx::StaticTxPayload<SetMinFee> {
                    subxt::tx::StaticTxPayload::new(
                        "AssetsRegistry",
                        "set_min_fee",
                        SetMinFee {
                            target_parachain_id,
                            foreign_asset_id,
                            amount,
                        },
                        [
                            31u8, 190u8, 208u8, 102u8, 158u8, 215u8, 151u8, 219u8, 163u8, 144u8,
                            92u8, 54u8, 18u8, 96u8, 5u8, 129u8, 233u8, 154u8, 85u8, 52u8, 154u8,
                            172u8, 181u8, 151u8, 147u8, 128u8, 12u8, 230u8, 29u8, 151u8, 78u8,
                            95u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_assets_registry::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AssetRegistered {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
                pub decimals: ::core::option::Option<::core::primitive::u8>,
            }
            impl subxt::events::StaticEvent for AssetRegistered {
                const PALLET: &'static str = "AssetsRegistry";
                const EVENT: &'static str = "AssetRegistered";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AssetUpdated {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
                pub decimals: ::core::option::Option<::core::primitive::u8>,
            }
            impl subxt::events::StaticEvent for AssetUpdated {
                const PALLET: &'static str = "AssetsRegistry";
                const EVENT: &'static str = "AssetUpdated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct MinFeeUpdated {
                pub target_parachain_id: runtime_types::polkadot_parachain::primitives::Id,
                pub foreign_asset_id:
                    runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
                pub amount: ::core::option::Option<::core::primitive::u128>,
            }
            impl subxt::events::StaticEvent for MinFeeUpdated {
                const PALLET: &'static str = "AssetsRegistry";
                const EVENT: &'static str = "MinFeeUpdated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Mapping local asset to foreign asset."]
                pub fn local_to_foreign(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::xcm::assets::ForeignMetadata<
                            runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "AssetsRegistry",
                        "LocalToForeign",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox128,
                        )],
                        [
                            86u8, 30u8, 0u8, 53u8, 229u8, 168u8, 103u8, 164u8, 113u8, 80u8, 67u8,
                            8u8, 254u8, 45u8, 66u8, 216u8, 151u8, 183u8, 169u8, 172u8, 210u8,
                            136u8, 234u8, 117u8, 240u8, 43u8, 227u8, 102u8, 182u8, 225u8, 205u8,
                            228u8,
                        ],
                    )
                }
                #[doc = " Mapping local asset to foreign asset."]
                pub fn local_to_foreign_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::xcm::assets::ForeignMetadata<
                            runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "AssetsRegistry",
                        "LocalToForeign",
                        Vec::new(),
                        [
                            86u8, 30u8, 0u8, 53u8, 229u8, 168u8, 103u8, 164u8, 113u8, 80u8, 67u8,
                            8u8, 254u8, 45u8, 66u8, 216u8, 151u8, 183u8, 169u8, 172u8, 210u8,
                            136u8, 234u8, 117u8, 240u8, 43u8, 227u8, 102u8, 182u8, 225u8, 205u8,
                            228u8,
                        ],
                    )
                }
                #[doc = " Mapping foreign asset to local asset."]
                pub fn foreign_to_local(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
                    >,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "AssetsRegistry",
                        "ForeignToLocal",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            201u8, 111u8, 125u8, 255u8, 72u8, 118u8, 131u8, 187u8, 219u8, 168u8,
                            165u8, 3u8, 235u8, 125u8, 147u8, 223u8, 154u8, 248u8, 211u8, 36u8,
                            186u8, 160u8, 129u8, 9u8, 215u8, 74u8, 187u8, 205u8, 68u8, 230u8, 76u8,
                            1u8,
                        ],
                    )
                }
                #[doc = " Mapping foreign asset to local asset."]
                pub fn foreign_to_local_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "AssetsRegistry",
                        "ForeignToLocal",
                        Vec::new(),
                        [
                            201u8, 111u8, 125u8, 255u8, 72u8, 118u8, 131u8, 187u8, 219u8, 168u8,
                            165u8, 3u8, 235u8, 125u8, 147u8, 223u8, 154u8, 248u8, 211u8, 36u8,
                            186u8, 160u8, 129u8, 9u8, 215u8, 74u8, 187u8, 205u8, 68u8, 230u8, 76u8,
                            1u8,
                        ],
                    )
                }
                pub fn min_fee_amounts(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                    _1: impl ::std::borrow::Borrow<
                        runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
                    >,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "AssetsRegistry",
                        "MinFeeAmounts",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            201u8, 61u8, 93u8, 242u8, 53u8, 145u8, 46u8, 65u8, 24u8, 153u8, 31u8,
                            63u8, 242u8, 206u8, 82u8, 210u8, 251u8, 216u8, 213u8, 46u8, 62u8,
                            207u8, 54u8, 196u8, 105u8, 18u8, 160u8, 187u8, 8u8, 143u8, 133u8,
                            126u8,
                        ],
                    )
                }
                pub fn min_fee_amounts_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "AssetsRegistry",
                        "MinFeeAmounts",
                        Vec::new(),
                        [
                            201u8, 61u8, 93u8, 242u8, 53u8, 145u8, 46u8, 65u8, 24u8, 153u8, 31u8,
                            63u8, 242u8, 206u8, 82u8, 210u8, 251u8, 216u8, 213u8, 46u8, 62u8,
                            207u8, 54u8, 196u8, 105u8, 18u8, 160u8, 187u8, 8u8, 143u8, 133u8,
                            126u8,
                        ],
                    )
                }
                #[doc = " How much of asset amount is needed to pay for one unit of native token."]
                pub fn asset_ratio(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::currency::Rational64,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "AssetsRegistry",
                        "AssetRatio",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox128,
                        )],
                        [
                            87u8, 249u8, 21u8, 188u8, 120u8, 247u8, 11u8, 188u8, 151u8, 94u8, 63u8,
                            123u8, 252u8, 49u8, 162u8, 99u8, 247u8, 246u8, 250u8, 107u8, 86u8,
                            194u8, 28u8, 61u8, 226u8, 202u8, 45u8, 212u8, 146u8, 203u8, 156u8,
                            43u8,
                        ],
                    )
                }
                #[doc = " How much of asset amount is needed to pay for one unit of native token."]
                pub fn asset_ratio_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::currency::Rational64,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "AssetsRegistry",
                        "AssetRatio",
                        Vec::new(),
                        [
                            87u8, 249u8, 21u8, 188u8, 120u8, 247u8, 11u8, 188u8, 151u8, 94u8, 63u8,
                            123u8, 252u8, 49u8, 162u8, 99u8, 247u8, 246u8, 250u8, 107u8, 86u8,
                            194u8, 28u8, 61u8, 226u8, 202u8, 45u8, 212u8, 146u8, 203u8, 156u8,
                            43u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod governance_registry {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Set {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub value: subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct GrantRoot {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Remove {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Sets the value of an `asset_id` to the signed account id. Only callable by root."]
                pub fn set(
                    &self,
                    asset_id: runtime_types::primitives::currency::CurrencyId,
                    value: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<Set> {
                    subxt::tx::StaticTxPayload::new(
                        "GovernanceRegistry",
                        "set",
                        Set { asset_id, value },
                        [
                            38u8, 114u8, 100u8, 157u8, 78u8, 228u8, 102u8, 210u8, 55u8, 88u8, 52u8,
                            18u8, 121u8, 34u8, 119u8, 225u8, 203u8, 174u8, 141u8, 25u8, 51u8,
                            148u8, 40u8, 130u8, 222u8, 173u8, 49u8, 174u8, 41u8, 106u8, 3u8, 4u8,
                        ],
                    )
                }
                #[doc = "Sets the value of an `asset_id` to root. Only callable by root."]
                pub fn grant_root(
                    &self,
                    asset_id: runtime_types::primitives::currency::CurrencyId,
                ) -> subxt::tx::StaticTxPayload<GrantRoot> {
                    subxt::tx::StaticTxPayload::new(
                        "GovernanceRegistry",
                        "grant_root",
                        GrantRoot { asset_id },
                        [
                            108u8, 52u8, 102u8, 38u8, 197u8, 192u8, 164u8, 84u8, 15u8, 112u8,
                            103u8, 138u8, 152u8, 15u8, 42u8, 241u8, 242u8, 96u8, 189u8, 37u8, 49u8,
                            133u8, 70u8, 97u8, 144u8, 98u8, 115u8, 78u8, 151u8, 73u8, 45u8, 71u8,
                        ],
                    )
                }
                #[doc = "Removes mapping of an `asset_id`. Only callable by root."]
                pub fn remove(
                    &self,
                    asset_id: runtime_types::primitives::currency::CurrencyId,
                ) -> subxt::tx::StaticTxPayload<Remove> {
                    subxt::tx::StaticTxPayload::new(
                        "GovernanceRegistry",
                        "remove",
                        Remove { asset_id },
                        [
                            44u8, 136u8, 86u8, 109u8, 250u8, 117u8, 227u8, 246u8, 40u8, 114u8,
                            204u8, 219u8, 208u8, 23u8, 103u8, 113u8, 249u8, 99u8, 199u8, 86u8,
                            25u8, 165u8, 160u8, 59u8, 187u8, 67u8, 192u8, 111u8, 177u8, 80u8,
                            254u8, 69u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_governance_registry::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Set {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub value: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for Set {
                const PALLET: &'static str = "GovernanceRegistry";
                const EVENT: &'static str = "Set";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct GrantRoot {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
            }
            impl subxt::events::StaticEvent for GrantRoot {
                const PALLET: &'static str = "GovernanceRegistry";
                const EVENT: &'static str = "GrantRoot";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Remove {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
            }
            impl subxt::events::StaticEvent for Remove {
                const PALLET: &'static str = "GovernanceRegistry";
                const EVENT: &'static str = "Remove";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn origins_by_asset_id(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::governance::SignedRawOrigin<
                            subxt::ext::sp_core::crypto::AccountId32,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "GovernanceRegistry",
                        "OriginsByAssetId",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            188u8, 140u8, 55u8, 118u8, 91u8, 24u8, 34u8, 167u8, 239u8, 89u8, 100u8,
                            77u8, 158u8, 53u8, 227u8, 26u8, 137u8, 42u8, 189u8, 220u8, 210u8, 52u8,
                            4u8, 178u8, 33u8, 226u8, 30u8, 231u8, 168u8, 115u8, 189u8, 238u8,
                        ],
                    )
                }
                pub fn origins_by_asset_id_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::governance::SignedRawOrigin<
                            subxt::ext::sp_core::crypto::AccountId32,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "GovernanceRegistry",
                        "OriginsByAssetId",
                        Vec::new(),
                        [
                            188u8, 140u8, 55u8, 118u8, 91u8, 24u8, 34u8, 167u8, 239u8, 89u8, 100u8,
                            77u8, 158u8, 53u8, 227u8, 26u8, 137u8, 42u8, 189u8, 220u8, 210u8, 52u8,
                            4u8, 178u8, 33u8, 226u8, 30u8, 231u8, 168u8, 115u8, 189u8, 238u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod assets {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Transfer {
                pub asset: runtime_types::primitives::currency::CurrencyId,
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct TransferNative {
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ForceTransfer {
                pub asset: runtime_types::primitives::currency::CurrencyId,
                pub source: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ForceTransferNative {
                pub source: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct TransferAll {
                pub asset: runtime_types::primitives::currency::CurrencyId,
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct TransferAllNative {
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct MintInitialize {
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct MintInitializeWithGovernance {
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
                pub governance_origin: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct MintInto {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct BurnFrom {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Transfer `amount` of `asset` from `origin` to `dest`."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = " - When `origin` is not signed."]
                #[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
                #[doc = "   cannot be respected."]
                #[doc = " - If the `dest` cannot be looked up."]
                pub fn transfer(
                    &self,
                    asset: runtime_types::primitives::currency::CurrencyId,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<Transfer> {
                    subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "transfer",
                        Transfer {
                            asset,
                            dest,
                            amount,
                            keep_alive,
                        },
                        [
                            191u8, 249u8, 227u8, 177u8, 227u8, 30u8, 137u8, 210u8, 170u8, 186u8,
                            138u8, 181u8, 23u8, 51u8, 178u8, 172u8, 107u8, 134u8, 163u8, 172u8,
                            190u8, 202u8, 127u8, 160u8, 205u8, 98u8, 205u8, 39u8, 15u8, 68u8,
                            165u8, 80u8,
                        ],
                    )
                }
                #[doc = "Transfer `amount` of the native asset from `origin` to `dest`. This is slightly"]
                #[doc = "cheaper to call, as it avoids an asset lookup."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = " - When `origin` is not signed."]
                #[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
                #[doc = "   cannot be respected."]
                #[doc = " - If the `dest` cannot be looked up."]
                pub fn transfer_native(
                    &self,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    value: ::core::primitive::u128,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<TransferNative> {
                    subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "transfer_native",
                        TransferNative {
                            dest,
                            value,
                            keep_alive,
                        },
                        [
                            203u8, 255u8, 186u8, 102u8, 209u8, 83u8, 227u8, 118u8, 11u8, 209u8,
                            70u8, 190u8, 67u8, 158u8, 173u8, 231u8, 41u8, 137u8, 127u8, 209u8,
                            160u8, 160u8, 59u8, 226u8, 154u8, 116u8, 108u8, 210u8, 87u8, 108u8,
                            141u8, 18u8,
                        ],
                    )
                }
                #[doc = "Transfer `amount` of the `asset` from `origin` to `dest`. This requires root."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = " - When `origin` is not root."]
                #[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
                #[doc = "   cannot be respected."]
                #[doc = " - If the `dest` cannot be looked up."]
                pub fn force_transfer(
                    &self,
                    asset: runtime_types::primitives::currency::CurrencyId,
                    source: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    value: ::core::primitive::u128,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<ForceTransfer> {
                    subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "force_transfer",
                        ForceTransfer {
                            asset,
                            source,
                            dest,
                            value,
                            keep_alive,
                        },
                        [
                            123u8, 143u8, 36u8, 52u8, 57u8, 12u8, 209u8, 44u8, 106u8, 69u8, 200u8,
                            38u8, 79u8, 3u8, 59u8, 128u8, 242u8, 132u8, 83u8, 22u8, 13u8, 7u8,
                            185u8, 221u8, 193u8, 73u8, 242u8, 55u8, 109u8, 194u8, 15u8, 163u8,
                        ],
                    )
                }
                #[doc = "Transfer `amount` of the the native asset from `origin` to `dest`. This requires root."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = " - When `origin` is not root."]
                #[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
                #[doc = "   cannot be respected."]
                #[doc = " - If the `dest` cannot be looked up."]
                pub fn force_transfer_native(
                    &self,
                    source: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    value: ::core::primitive::u128,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<ForceTransferNative> {
                    subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "force_transfer_native",
                        ForceTransferNative {
                            source,
                            dest,
                            value,
                            keep_alive,
                        },
                        [
                            109u8, 219u8, 2u8, 9u8, 154u8, 57u8, 173u8, 220u8, 132u8, 248u8, 31u8,
                            203u8, 185u8, 230u8, 252u8, 89u8, 92u8, 152u8, 87u8, 44u8, 21u8, 209u8,
                            202u8, 159u8, 229u8, 5u8, 156u8, 252u8, 219u8, 9u8, 138u8, 135u8,
                        ],
                    )
                }
                #[doc = "Transfer all free balance of the `asset` from `origin` to `dest`."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = " - When `origin` is not signed."]
                #[doc = " - If the `dest` cannot be looked up."]
                pub fn transfer_all(
                    &self,
                    asset: runtime_types::primitives::currency::CurrencyId,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<TransferAll> {
                    subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "transfer_all",
                        TransferAll {
                            asset,
                            dest,
                            keep_alive,
                        },
                        [
                            252u8, 242u8, 56u8, 229u8, 110u8, 245u8, 215u8, 78u8, 248u8, 237u8,
                            202u8, 143u8, 219u8, 104u8, 121u8, 75u8, 53u8, 234u8, 134u8, 214u8,
                            73u8, 250u8, 151u8, 124u8, 247u8, 60u8, 230u8, 36u8, 26u8, 222u8,
                            240u8, 108u8,
                        ],
                    )
                }
                #[doc = "Transfer all free balance of the native asset from `origin` to `dest`."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = " - When `origin` is not signed."]
                #[doc = " - If the `dest` cannot be looked up."]
                pub fn transfer_all_native(
                    &self,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<TransferAllNative> {
                    subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "transfer_all_native",
                        TransferAllNative { dest, keep_alive },
                        [
                            199u8, 166u8, 244u8, 2u8, 74u8, 109u8, 252u8, 7u8, 251u8, 242u8, 80u8,
                            154u8, 164u8, 73u8, 144u8, 79u8, 83u8, 188u8, 208u8, 23u8, 127u8, 19u8,
                            234u8, 226u8, 111u8, 93u8, 176u8, 171u8, 178u8, 132u8, 74u8, 63u8,
                        ],
                    )
                }
                #[doc = "Creates a new asset, minting `amount` of funds into the `dest` account. Intended to be"]
                #[doc = "used for creating wrapped assets, not associated with any project."]
                pub fn mint_initialize(
                    &self,
                    amount: ::core::primitive::u128,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> subxt::tx::StaticTxPayload<MintInitialize> {
                    subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "mint_initialize",
                        MintInitialize { amount, dest },
                        [
                            46u8, 118u8, 244u8, 196u8, 195u8, 185u8, 222u8, 58u8, 151u8, 155u8,
                            118u8, 131u8, 134u8, 226u8, 8u8, 155u8, 76u8, 98u8, 92u8, 157u8, 133u8,
                            62u8, 166u8, 172u8, 200u8, 39u8, 11u8, 184u8, 87u8, 73u8, 62u8, 36u8,
                        ],
                    )
                }
                #[doc = "Creates a new asset, minting `amount` of funds into the `dest` account. The `dest`"]
                #[doc = "account can use the democracy pallet to mint further assets, or if the governance_origin"]
                #[doc = "is set to an owned account, using signed transactions. In general the"]
                #[doc = "`governance_origin` should be generated from the pallet id."]
                pub fn mint_initialize_with_governance(
                    &self,
                    amount: ::core::primitive::u128,
                    governance_origin: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> subxt::tx::StaticTxPayload<MintInitializeWithGovernance> {
                    subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "mint_initialize_with_governance",
                        MintInitializeWithGovernance {
                            amount,
                            governance_origin,
                            dest,
                        },
                        [
                            112u8, 237u8, 174u8, 228u8, 234u8, 128u8, 152u8, 223u8, 18u8, 220u8,
                            251u8, 233u8, 136u8, 177u8, 214u8, 237u8, 151u8, 115u8, 86u8, 68u8,
                            220u8, 98u8, 98u8, 101u8, 94u8, 55u8, 195u8, 248u8, 233u8, 20u8, 186u8,
                            45u8,
                        ],
                    )
                }
                #[doc = "Mints `amount` of `asset_id` into the `dest` account."]
                pub fn mint_into(
                    &self,
                    asset_id: runtime_types::primitives::currency::CurrencyId,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<MintInto> {
                    subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "mint_into",
                        MintInto {
                            asset_id,
                            dest,
                            amount,
                        },
                        [
                            67u8, 51u8, 185u8, 110u8, 243u8, 173u8, 151u8, 175u8, 141u8, 214u8,
                            194u8, 139u8, 176u8, 25u8, 49u8, 248u8, 121u8, 103u8, 178u8, 128u8,
                            5u8, 52u8, 66u8, 232u8, 182u8, 57u8, 192u8, 55u8, 136u8, 90u8, 60u8,
                            32u8,
                        ],
                    )
                }
                #[doc = "Burns `amount` of `asset_id` into the `dest` account."]
                pub fn burn_from(
                    &self,
                    asset_id: runtime_types::primitives::currency::CurrencyId,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<BurnFrom> {
                    subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "burn_from",
                        BurnFrom {
                            asset_id,
                            dest,
                            amount,
                        },
                        [
                            97u8, 142u8, 84u8, 209u8, 163u8, 111u8, 93u8, 46u8, 152u8, 84u8, 142u8,
                            82u8, 3u8, 128u8, 43u8, 26u8, 148u8, 160u8, 230u8, 48u8, 239u8, 34u8,
                            174u8, 88u8, 52u8, 149u8, 146u8, 77u8, 139u8, 31u8, 225u8, 102u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn native_asset_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Assets",
                        "NativeAssetId",
                        [
                            150u8, 207u8, 49u8, 178u8, 254u8, 209u8, 81u8, 36u8, 235u8, 117u8,
                            62u8, 166u8, 4u8, 173u8, 64u8, 189u8, 19u8, 182u8, 131u8, 166u8, 234u8,
                            145u8, 83u8, 23u8, 246u8, 20u8, 47u8, 34u8, 66u8, 162u8, 146u8, 49u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod crowdloan_rewards {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Initialize;
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct InitializeAt {
                pub at: ::core::primitive::u64,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Populate {
                pub rewards: ::std::vec::Vec<(
                    runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
                        subxt::ext::sp_core::crypto::AccountId32,
                    >,
                    ::core::primitive::u128,
                    ::core::primitive::u64,
                )>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Associate {
                pub reward_account: subxt::ext::sp_core::crypto::AccountId32,
                pub proof: runtime_types::pallet_crowdloan_rewards::models::Proof<
                    subxt::ext::sp_core::crypto::AccountId32,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Claim;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct UnlockRewardsFor {
                pub reward_accounts: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Add {
                pub additions: ::std::vec::Vec<(
                    runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
                        subxt::ext::sp_core::crypto::AccountId32,
                    >,
                    ::core::primitive::u128,
                    ::core::primitive::u64,
                )>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Initialize the pallet at the current timestamp."]
                pub fn initialize(&self) -> subxt::tx::StaticTxPayload<Initialize> {
                    subxt::tx::StaticTxPayload::new(
                        "CrowdloanRewards",
                        "initialize",
                        Initialize {},
                        [
                            210u8, 6u8, 171u8, 194u8, 188u8, 76u8, 163u8, 192u8, 223u8, 241u8,
                            194u8, 189u8, 221u8, 190u8, 28u8, 191u8, 208u8, 85u8, 140u8, 167u8,
                            160u8, 29u8, 155u8, 216u8, 185u8, 27u8, 109u8, 39u8, 4u8, 82u8, 50u8,
                            180u8,
                        ],
                    )
                }
                #[doc = "Initialize the pallet at the given timestamp."]
                pub fn initialize_at(
                    &self,
                    at: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<InitializeAt> {
                    subxt::tx::StaticTxPayload::new(
                        "CrowdloanRewards",
                        "initialize_at",
                        InitializeAt { at },
                        [
                            213u8, 36u8, 13u8, 147u8, 34u8, 81u8, 248u8, 154u8, 70u8, 189u8, 57u8,
                            225u8, 107u8, 84u8, 25u8, 18u8, 160u8, 135u8, 118u8, 251u8, 223u8,
                            204u8, 43u8, 65u8, 50u8, 130u8, 31u8, 80u8, 16u8, 158u8, 173u8, 20u8,
                        ],
                    )
                }
                #[doc = "Populate pallet by adding more rewards."]
                #[doc = ""]
                #[doc = "Each index in the rewards vector should contain: `remote_account`, `reward_account`,"]
                #[doc = "`vesting_period`."]
                #[doc = ""]
                #[doc = "Can be called multiple times. If an remote account"]
                #[doc = "already has a reward, it will be replaced by the new reward value."]
                #[doc = ""]
                #[doc = "Can only be called before `initialize`."]
                pub fn populate(
                    &self,
                    rewards: ::std::vec::Vec<(
                        runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
                            subxt::ext::sp_core::crypto::AccountId32,
                        >,
                        ::core::primitive::u128,
                        ::core::primitive::u64,
                    )>,
                ) -> subxt::tx::StaticTxPayload<Populate> {
                    subxt::tx::StaticTxPayload::new(
                        "CrowdloanRewards",
                        "populate",
                        Populate { rewards },
                        [
                            216u8, 166u8, 103u8, 132u8, 191u8, 229u8, 187u8, 209u8, 218u8, 72u8,
                            104u8, 134u8, 42u8, 241u8, 178u8, 94u8, 19u8, 197u8, 28u8, 171u8, 72u8,
                            248u8, 228u8, 247u8, 176u8, 93u8, 30u8, 234u8, 95u8, 23u8, 136u8,
                            140u8,
                        ],
                    )
                }
                #[doc = "Associate a reward account. A valid proof has to be provided."]
                #[doc = "This call also claim the first reward (a.k.a. the first payment, which is a % of the"]
                #[doc = "vested reward)."]
                #[doc = "If logic gate pass, no fees are applied."]
                #[doc = ""]
                #[doc = "The proof should be:"]
                #[doc = "```haskell"]
                #[doc = "proof = sign (concat prefix (hex reward_account))"]
                #[doc = "```"]
                pub fn associate(
                    &self,
                    reward_account: subxt::ext::sp_core::crypto::AccountId32,
                    proof: runtime_types::pallet_crowdloan_rewards::models::Proof<
                        subxt::ext::sp_core::crypto::AccountId32,
                    >,
                ) -> subxt::tx::StaticTxPayload<Associate> {
                    subxt::tx::StaticTxPayload::new(
                        "CrowdloanRewards",
                        "associate",
                        Associate {
                            reward_account,
                            proof,
                        },
                        [
                            172u8, 177u8, 98u8, 224u8, 100u8, 149u8, 103u8, 198u8, 237u8, 49u8,
                            31u8, 231u8, 222u8, 173u8, 28u8, 233u8, 20u8, 109u8, 135u8, 134u8,
                            170u8, 40u8, 244u8, 28u8, 174u8, 139u8, 51u8, 229u8, 120u8, 251u8,
                            73u8, 5u8,
                        ],
                    )
                }
                #[doc = "Claim a reward from the associated reward account."]
                #[doc = "A previous call to `associate` should have been made."]
                #[doc = "If logic gate pass, no fees are applied."]
                pub fn claim(&self) -> subxt::tx::StaticTxPayload<Claim> {
                    subxt::tx::StaticTxPayload::new(
                        "CrowdloanRewards",
                        "claim",
                        Claim {},
                        [
                            45u8, 97u8, 229u8, 222u8, 255u8, 43u8, 179u8, 22u8, 163u8, 231u8, 33u8,
                            96u8, 167u8, 206u8, 213u8, 116u8, 80u8, 254u8, 184u8, 3u8, 96u8, 5u8,
                            160u8, 81u8, 148u8, 30u8, 117u8, 255u8, 107u8, 177u8, 200u8, 78u8,
                        ],
                    )
                }
                pub fn unlock_rewards_for(
                    &self,
                    reward_accounts: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::tx::StaticTxPayload<UnlockRewardsFor> {
                    subxt::tx::StaticTxPayload::new(
                        "CrowdloanRewards",
                        "unlock_rewards_for",
                        UnlockRewardsFor { reward_accounts },
                        [
                            116u8, 71u8, 22u8, 93u8, 198u8, 85u8, 61u8, 147u8, 75u8, 125u8, 232u8,
                            122u8, 54u8, 186u8, 142u8, 244u8, 235u8, 65u8, 164u8, 187u8, 11u8,
                            90u8, 72u8, 111u8, 104u8, 109u8, 239u8, 164u8, 148u8, 43u8, 248u8,
                            187u8,
                        ],
                    )
                }
                #[doc = "Adds all accounts in the `additions` vector. Add may be called even if the pallet has"]
                #[doc = "been initialized."]
                pub fn add(
                    &self,
                    additions: ::std::vec::Vec<(
                        runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
                            subxt::ext::sp_core::crypto::AccountId32,
                        >,
                        ::core::primitive::u128,
                        ::core::primitive::u64,
                    )>,
                ) -> subxt::tx::StaticTxPayload<Add> {
                    subxt::tx::StaticTxPayload::new(
                        "CrowdloanRewards",
                        "add",
                        Add { additions },
                        [
                            124u8, 149u8, 199u8, 140u8, 93u8, 212u8, 169u8, 146u8, 29u8, 88u8,
                            113u8, 119u8, 254u8, 20u8, 66u8, 67u8, 9u8, 2u8, 58u8, 178u8, 231u8,
                            139u8, 126u8, 235u8, 91u8, 81u8, 81u8, 126u8, 152u8, 239u8, 170u8,
                            136u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_crowdloan_rewards::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "The crowdloan has been initialized or set to initialize at some time."]
            pub struct Initialized {
                pub at: ::core::primitive::u64,
            }
            impl subxt::events::StaticEvent for Initialized {
                const PALLET: &'static str = "CrowdloanRewards";
                const EVENT: &'static str = "Initialized";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A claim has been made."]
            pub struct Claimed {
                pub remote_account: runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
                    subxt::ext::sp_core::crypto::AccountId32,
                >,
                pub reward_account: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Claimed {
                const PALLET: &'static str = "CrowdloanRewards";
                const EVENT: &'static str = "Claimed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A remote account has been associated with a reward account."]
            pub struct Associated {
                pub remote_account: runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
                    subxt::ext::sp_core::crypto::AccountId32,
                >,
                pub reward_account: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for Associated {
                const PALLET: &'static str = "CrowdloanRewards";
                const EVENT: &'static str = "Associated";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "The crowdloan was successfully initialized, but with excess funds that won't be"]
            #[doc = "claimed."]
            pub struct OverFunded {
                pub excess_funds: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for OverFunded {
                const PALLET: &'static str = "CrowdloanRewards";
                const EVENT: &'static str = "OverFunded";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "A portion of rewards have been unlocked and future claims will not have locks"]
            pub struct RewardsUnlocked {
                pub at: ::core::primitive::u64,
            }
            impl subxt::events::StaticEvent for RewardsUnlocked {
                const PALLET: &'static str = "CrowdloanRewards";
                const EVENT: &'static str = "RewardsUnlocked";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Called after rewards have been added through the `add` extrinsic."]
            pub struct RewardsAdded {
                pub additions: ::std::vec::Vec<(
                    runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
                        subxt::ext::sp_core::crypto::AccountId32,
                    >,
                    ::core::primitive::u128,
                    ::core::primitive::u64,
                )>,
            }
            impl subxt::events::StaticEvent for RewardsAdded {
                const PALLET: &'static str = "CrowdloanRewards";
                const EVENT: &'static str = "RewardsAdded";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Called after rewards have been deleted through the `delete` extrinsic."]
            pub struct RewardsDeleted {
                pub deletions: ::std::vec::Vec<
                    runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
                        subxt::ext::sp_core::crypto::AccountId32,
                    >,
                >,
            }
            impl subxt::events::StaticEvent for RewardsDeleted {
                const PALLET: &'static str = "CrowdloanRewards";
                const EVENT: &'static str = "RewardsDeleted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn rewards(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
                            subxt::ext::sp_core::crypto::AccountId32,
                        >,
                    >,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_crowdloan_rewards::models::Reward<
                            ::core::primitive::u128,
                            ::core::primitive::u64,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CrowdloanRewards",
                        "Rewards",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            91u8, 1u8, 241u8, 157u8, 93u8, 103u8, 62u8, 57u8, 204u8, 139u8, 245u8,
                            240u8, 38u8, 94u8, 18u8, 217u8, 217u8, 212u8, 57u8, 158u8, 254u8,
                            159u8, 82u8, 11u8, 160u8, 97u8, 110u8, 115u8, 167u8, 103u8, 125u8, 1u8,
                        ],
                    )
                }
                pub fn rewards_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_crowdloan_rewards::models::Reward<
                            ::core::primitive::u128,
                            ::core::primitive::u64,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CrowdloanRewards",
                        "Rewards",
                        Vec::new(),
                        [
                            91u8, 1u8, 241u8, 157u8, 93u8, 103u8, 62u8, 57u8, 204u8, 139u8, 245u8,
                            240u8, 38u8, 94u8, 18u8, 217u8, 217u8, 212u8, 57u8, 158u8, 254u8,
                            159u8, 82u8, 11u8, 160u8, 97u8, 110u8, 115u8, 167u8, 103u8, 125u8, 1u8,
                        ],
                    )
                }
                #[doc = " The total amount of rewards to be claimed."]
                pub fn total_rewards(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CrowdloanRewards",
                        "TotalRewards",
                        vec![],
                        [
                            37u8, 36u8, 124u8, 79u8, 45u8, 126u8, 177u8, 179u8, 118u8, 125u8,
                            178u8, 245u8, 125u8, 208u8, 201u8, 248u8, 51u8, 5u8, 202u8, 199u8,
                            82u8, 75u8, 64u8, 150u8, 40u8, 196u8, 223u8, 17u8, 32u8, 105u8, 208u8,
                            126u8,
                        ],
                    )
                }
                #[doc = " The rewards claimed so far."]
                pub fn claimed_rewards(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CrowdloanRewards",
                        "ClaimedRewards",
                        vec![],
                        [
                            250u8, 96u8, 206u8, 11u8, 109u8, 190u8, 255u8, 1u8, 24u8, 244u8, 7u8,
                            255u8, 93u8, 85u8, 138u8, 87u8, 165u8, 25u8, 154u8, 246u8, 135u8,
                            210u8, 89u8, 170u8, 227u8, 236u8, 123u8, 161u8, 77u8, 214u8, 44u8,
                            240u8,
                        ],
                    )
                }
                #[doc = " The total number of contributors."]
                pub fn total_contributors(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CrowdloanRewards",
                        "TotalContributors",
                        vec![],
                        [
                            236u8, 88u8, 207u8, 169u8, 18u8, 55u8, 31u8, 213u8, 140u8, 154u8,
                            142u8, 214u8, 66u8, 114u8, 157u8, 35u8, 172u8, 205u8, 122u8, 169u8,
                            45u8, 64u8, 132u8, 177u8, 180u8, 21u8, 208u8, 12u8, 20u8, 23u8, 13u8,
                            30u8,
                        ],
                    )
                }
                #[doc = " The timestamp at which the users are able to claim their rewards."]
                pub fn vesting_time_start(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CrowdloanRewards",
                        "VestingTimeStart",
                        vec![],
                        [
                            93u8, 101u8, 112u8, 233u8, 17u8, 239u8, 82u8, 207u8, 167u8, 62u8,
                            181u8, 104u8, 114u8, 195u8, 132u8, 255u8, 106u8, 152u8, 75u8, 200u8,
                            76u8, 193u8, 89u8, 137u8, 224u8, 62u8, 225u8, 206u8, 157u8, 28u8,
                            126u8, 48u8,
                        ],
                    )
                }
                #[doc = " Associations of reward accounts to remote accounts."]
                pub fn associations(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
                            subxt::ext::sp_core::crypto::AccountId32,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CrowdloanRewards",
                        "Associations",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            85u8, 12u8, 50u8, 120u8, 143u8, 116u8, 152u8, 188u8, 100u8, 72u8, 80u8,
                            64u8, 16u8, 169u8, 122u8, 10u8, 221u8, 178u8, 231u8, 78u8, 151u8, 31u8,
                            216u8, 254u8, 118u8, 243u8, 237u8, 37u8, 127u8, 238u8, 206u8, 101u8,
                        ],
                    )
                }
                #[doc = " Associations of reward accounts to remote accounts."]
                pub fn associations_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
                            subxt::ext::sp_core::crypto::AccountId32,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CrowdloanRewards",
                        "Associations",
                        Vec::new(),
                        [
                            85u8, 12u8, 50u8, 120u8, 143u8, 116u8, 152u8, 188u8, 100u8, 72u8, 80u8,
                            64u8, 16u8, 169u8, 122u8, 10u8, 221u8, 178u8, 231u8, 78u8, 151u8, 31u8,
                            216u8, 254u8, 118u8, 243u8, 237u8, 37u8, 127u8, 238u8, 206u8, 101u8,
                        ],
                    )
                }
                #[doc = " If set, new locks will not be added to claims"]
                pub fn remove_reward_locks(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<()>,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CrowdloanRewards",
                        "RemoveRewardLocks",
                        vec![],
                        [
                            88u8, 210u8, 233u8, 161u8, 138u8, 199u8, 210u8, 0u8, 71u8, 237u8,
                            189u8, 204u8, 252u8, 44u8, 191u8, 207u8, 81u8, 76u8, 220u8, 222u8,
                            13u8, 236u8, 71u8, 55u8, 224u8, 246u8, 57u8, 31u8, 58u8, 191u8, 158u8,
                            13u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The upfront liquidity unlocked at first claim."]
                pub fn initial_payment(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_arithmetic::per_things::Perbill,
                    >,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "CrowdloanRewards",
                        "InitialPayment",
                        [
                            225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8, 192u8, 254u8, 19u8, 87u8,
                            80u8, 16u8, 62u8, 42u8, 204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
                            177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8, 86u8, 227u8,
                        ],
                    )
                }
                #[doc = " The percentage of excess funds required to trigger the `OverFunded` event."]
                pub fn over_funded_threshold(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_arithmetic::per_things::Perbill,
                    >,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "CrowdloanRewards",
                        "OverFundedThreshold",
                        [
                            225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8, 192u8, 254u8, 19u8, 87u8,
                            80u8, 16u8, 62u8, 42u8, 204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
                            177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8, 86u8, 227u8,
                        ],
                    )
                }
                #[doc = " The time you have to wait to unlock another part of your reward."]
                pub fn vesting_step(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "CrowdloanRewards",
                        "VestingStep",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                #[doc = " The arbitrary prefix used for the proof."]
                pub fn prefix(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "CrowdloanRewards",
                        "Prefix",
                        [
                            106u8, 50u8, 57u8, 116u8, 43u8, 202u8, 37u8, 248u8, 102u8, 22u8, 62u8,
                            22u8, 242u8, 54u8, 152u8, 168u8, 107u8, 64u8, 72u8, 172u8, 124u8, 40u8,
                            42u8, 110u8, 104u8, 145u8, 31u8, 144u8, 242u8, 189u8, 145u8, 208u8,
                        ],
                    )
                }
                #[doc = " The unique identifier of this pallet."]
                pub fn pallet_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::frame_support::PalletId>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "CrowdloanRewards",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
                            174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
                            9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
                        ],
                    )
                }
                #[doc = " The unique identifier for locks maintained by this pallet."]
                pub fn lock_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<[::core::primitive::u8; 8usize]>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "CrowdloanRewards",
                        "LockId",
                        [
                            224u8, 197u8, 247u8, 125u8, 62u8, 180u8, 69u8, 91u8, 226u8, 36u8, 82u8,
                            148u8, 70u8, 147u8, 209u8, 40u8, 210u8, 229u8, 181u8, 191u8, 170u8,
                            205u8, 138u8, 97u8, 127u8, 59u8, 124u8, 244u8, 252u8, 30u8, 213u8,
                            179u8,
                        ],
                    )
                }
                #[doc = " If claimed amounts should be locked by the pallet"]
                pub fn lock_by_default(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::bool>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "CrowdloanRewards",
                        "LockByDefault",
                        [
                            165u8, 28u8, 112u8, 190u8, 18u8, 129u8, 182u8, 206u8, 237u8, 1u8, 68u8,
                            252u8, 125u8, 234u8, 185u8, 50u8, 149u8, 164u8, 47u8, 126u8, 134u8,
                            100u8, 14u8, 86u8, 209u8, 39u8, 20u8, 4u8, 233u8, 115u8, 102u8, 131u8,
                        ],
                    )
                }
                #[doc = " The AccountId of this pallet."]
                pub fn account_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<subxt::ext::sp_core::crypto::AccountId32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "CrowdloanRewards",
                        "account_id",
                        [
                            167u8, 71u8, 0u8, 47u8, 217u8, 107u8, 29u8, 163u8, 157u8, 187u8, 110u8,
                            219u8, 88u8, 213u8, 82u8, 107u8, 46u8, 199u8, 41u8, 110u8, 102u8,
                            187u8, 45u8, 201u8, 247u8, 66u8, 33u8, 228u8, 33u8, 99u8, 242u8, 80u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod vesting {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Claim {
                pub asset: runtime_types::primitives::currency::CurrencyId,
                pub vesting_schedule_ids:
                    runtime_types::composable_traits::vesting::VestingScheduleIdSet<
                        ::core::primitive::u128,
                    >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct VestedTransfer {
                pub from: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub beneficiary: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub asset: runtime_types::primitives::currency::CurrencyId,
                pub schedule_info: runtime_types::composable_traits::vesting::VestingScheduleInfo<
                    ::core::primitive::u32,
                    ::core::primitive::u64,
                    ::core::primitive::u128,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct UpdateVestingSchedules {
                pub who: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub asset: runtime_types::primitives::currency::CurrencyId,
                pub vesting_schedules: ::std::vec::Vec<
                    runtime_types::composable_traits::vesting::VestingScheduleInfo<
                        ::core::primitive::u32,
                        ::core::primitive::u64,
                        ::core::primitive::u128,
                    >,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ClaimFor {
                pub dest: subxt::ext::sp_runtime::MultiAddress<
                    subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub asset: runtime_types::primitives::currency::CurrencyId,
                pub vesting_schedule_ids:
                    runtime_types::composable_traits::vesting::VestingScheduleIdSet<
                        ::core::primitive::u128,
                    >,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Unlock any vested funds of the origin account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have funds still"]
                #[doc = "locked under this pallet."]
                #[doc = ""]
                #[doc = "- `asset`: The asset associated with the vesting schedule"]
                #[doc = "- `vesting_schedule_ids`: The ids of the vesting schedules to be claimed"]
                #[doc = ""]
                #[doc = "Emits `Claimed`."]
                pub fn claim(
                    &self,
                    asset: runtime_types::primitives::currency::CurrencyId,
                    vesting_schedule_ids : runtime_types :: composable_traits :: vesting :: VestingScheduleIdSet < :: core :: primitive :: u128 >,
                ) -> subxt::tx::StaticTxPayload<Claim> {
                    subxt::tx::StaticTxPayload::new(
                        "Vesting",
                        "claim",
                        Claim {
                            asset,
                            vesting_schedule_ids,
                        },
                        [
                            84u8, 8u8, 236u8, 145u8, 71u8, 87u8, 132u8, 247u8, 119u8, 140u8, 81u8,
                            102u8, 81u8, 108u8, 70u8, 142u8, 225u8, 44u8, 252u8, 109u8, 180u8,
                            85u8, 152u8, 166u8, 240u8, 78u8, 22u8, 206u8, 223u8, 235u8, 153u8,
                            172u8,
                        ],
                    )
                }
                #[doc = "Create a vested transfer."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_ or Democracy."]
                #[doc = ""]
                #[doc = "- `from`: The account sending the vested funds."]
                #[doc = "- `beneficiary`: The account receiving the vested funds."]
                #[doc = "- `asset`: The asset associated with this vesting schedule."]
                #[doc = "- `schedule_info`: The vesting schedule data attached to the transfer."]
                #[doc = ""]
                #[doc = "Emits `VestingScheduleAdded`."]
                #[doc = ""]
                #[doc = "NOTE: This will unlock all schedules through the current block."]
                pub fn vested_transfer(
                    &self,
                    from: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    beneficiary: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    asset: runtime_types::primitives::currency::CurrencyId,
                    schedule_info: runtime_types::composable_traits::vesting::VestingScheduleInfo<
                        ::core::primitive::u32,
                        ::core::primitive::u64,
                        ::core::primitive::u128,
                    >,
                ) -> subxt::tx::StaticTxPayload<VestedTransfer> {
                    subxt::tx::StaticTxPayload::new(
                        "Vesting",
                        "vested_transfer",
                        VestedTransfer {
                            from,
                            beneficiary,
                            asset,
                            schedule_info,
                        },
                        [
                            255u8, 5u8, 211u8, 163u8, 224u8, 205u8, 206u8, 135u8, 239u8, 229u8,
                            74u8, 241u8, 82u8, 4u8, 187u8, 86u8, 229u8, 199u8, 104u8, 66u8, 32u8,
                            126u8, 237u8, 251u8, 123u8, 75u8, 115u8, 175u8, 12u8, 38u8, 76u8, 5u8,
                        ],
                    )
                }
                #[doc = "Update vesting schedules"]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_ or democracy."]
                #[doc = ""]
                #[doc = "- `who`: The account whose vested funds should be updated."]
                #[doc = "- `asset`: The asset associated with the vesting schedules."]
                #[doc = "- `vesting_schedules`: The updated vesting schedules."]
                #[doc = ""]
                #[doc = "Emits `VestingSchedulesUpdated`."]
                pub fn update_vesting_schedules(
                    &self,
                    who: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    asset: runtime_types::primitives::currency::CurrencyId,
                    vesting_schedules: ::std::vec::Vec<
                        runtime_types::composable_traits::vesting::VestingScheduleInfo<
                            ::core::primitive::u32,
                            ::core::primitive::u64,
                            ::core::primitive::u128,
                        >,
                    >,
                ) -> subxt::tx::StaticTxPayload<UpdateVestingSchedules> {
                    subxt::tx::StaticTxPayload::new(
                        "Vesting",
                        "update_vesting_schedules",
                        UpdateVestingSchedules {
                            who,
                            asset,
                            vesting_schedules,
                        },
                        [
                            221u8, 177u8, 113u8, 190u8, 53u8, 104u8, 87u8, 76u8, 193u8, 88u8, 34u8,
                            92u8, 208u8, 84u8, 215u8, 43u8, 180u8, 188u8, 64u8, 243u8, 149u8,
                            127u8, 65u8, 30u8, 13u8, 58u8, 211u8, 238u8, 229u8, 171u8, 98u8, 110u8,
                        ],
                    )
                }
                #[doc = "Unlock any vested funds of a `target` account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `dest`: The account whose vested funds should be unlocked. Must have funds still"]
                #[doc = "locked under this pallet."]
                #[doc = "- `asset`: The asset associated with the vesting schedule."]
                #[doc = "- `vesting_schedule_ids`: The ids of the vesting schedules to be claimed."]
                #[doc = ""]
                #[doc = "Emits `Claimed`."]
                pub fn claim_for(
                    &self,
                    dest: subxt::ext::sp_runtime::MultiAddress<
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    asset: runtime_types::primitives::currency::CurrencyId,
                    vesting_schedule_ids : runtime_types :: composable_traits :: vesting :: VestingScheduleIdSet < :: core :: primitive :: u128 >,
                ) -> subxt::tx::StaticTxPayload<ClaimFor> {
                    subxt::tx::StaticTxPayload::new(
                        "Vesting",
                        "claim_for",
                        ClaimFor {
                            dest,
                            asset,
                            vesting_schedule_ids,
                        },
                        [
                            245u8, 248u8, 124u8, 210u8, 190u8, 244u8, 52u8, 90u8, 52u8, 237u8,
                            175u8, 72u8, 95u8, 160u8, 45u8, 8u8, 130u8, 242u8, 247u8, 10u8, 152u8,
                            31u8, 172u8, 77u8, 42u8, 134u8, 206u8, 183u8, 157u8, 182u8, 142u8,
                            228u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_vesting::module::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Added new vesting schedule."]
            pub struct VestingScheduleAdded {
                pub from: subxt::ext::sp_core::crypto::AccountId32,
                pub to: subxt::ext::sp_core::crypto::AccountId32,
                pub asset: runtime_types::primitives::currency::CurrencyId,
                pub vesting_schedule_id: ::core::primitive::u128,
                pub schedule: runtime_types::composable_traits::vesting::VestingSchedule<
                    ::core::primitive::u128,
                    ::core::primitive::u32,
                    ::core::primitive::u64,
                    ::core::primitive::u128,
                >,
                pub schedule_amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for VestingScheduleAdded {
                const PALLET: &'static str = "Vesting";
                const EVENT: &'static str = "VestingScheduleAdded";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Claimed vesting."]
            pub struct Claimed {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub asset: runtime_types::primitives::currency::CurrencyId,
                pub vesting_schedule_ids:
                    runtime_types::composable_traits::vesting::VestingScheduleIdSet<
                        ::core::primitive::u128,
                    >,
                pub locked_amount: ::core::primitive::u128,
                pub claimed_amount_per_schedule:
                    runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    >,
            }
            impl subxt::events::StaticEvent for Claimed {
                const PALLET: &'static str = "Vesting";
                const EVENT: &'static str = "Claimed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Updated vesting schedules."]
            pub struct VestingSchedulesUpdated {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for VestingSchedulesUpdated {
                const PALLET: &'static str = "Vesting";
                const EVENT: &'static str = "VestingSchedulesUpdated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Vesting schedules of an account."]
                #[doc = ""]
                #[doc = " VestingSchedules: map AccountId => Vec<VestingSchedule>"]
                pub fn vesting_schedules(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
                            ::core::primitive::u128,
                            runtime_types::composable_traits::vesting::VestingSchedule<
                                ::core::primitive::u128,
                                ::core::primitive::u32,
                                ::core::primitive::u64,
                                ::core::primitive::u128,
                            >,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Vesting",
                        "VestingSchedules",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            111u8, 174u8, 220u8, 219u8, 141u8, 5u8, 135u8, 146u8, 42u8, 42u8,
                            192u8, 30u8, 65u8, 100u8, 163u8, 71u8, 57u8, 193u8, 112u8, 129u8, 80u8,
                            81u8, 23u8, 235u8, 179u8, 21u8, 135u8, 99u8, 255u8, 119u8, 187u8,
                            102u8,
                        ],
                    )
                }
                #[doc = " Vesting schedules of an account."]
                #[doc = ""]
                #[doc = " VestingSchedules: map AccountId => Vec<VestingSchedule>"]
                pub fn vesting_schedules_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
                            ::core::primitive::u128,
                            runtime_types::composable_traits::vesting::VestingSchedule<
                                ::core::primitive::u128,
                                ::core::primitive::u32,
                                ::core::primitive::u64,
                                ::core::primitive::u128,
                            >,
                        >,
                    >,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Vesting",
                        "VestingSchedules",
                        Vec::new(),
                        [
                            111u8, 174u8, 220u8, 219u8, 141u8, 5u8, 135u8, 146u8, 42u8, 42u8,
                            192u8, 30u8, 65u8, 100u8, 163u8, 71u8, 57u8, 193u8, 112u8, 129u8, 80u8,
                            81u8, 23u8, 235u8, 179u8, 21u8, 135u8, 99u8, 255u8, 119u8, 187u8,
                            102u8,
                        ],
                    )
                }
                #[doc = " Counter used to uniquely identify vesting schedules within this pallet."]
                pub fn vesting_schedule_nonce(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Vesting",
                        "VestingScheduleNonce",
                        vec![],
                        [
                            151u8, 129u8, 23u8, 29u8, 177u8, 25u8, 130u8, 50u8, 74u8, 78u8, 15u8,
                            227u8, 61u8, 112u8, 91u8, 125u8, 243u8, 91u8, 82u8, 126u8, 108u8, 4u8,
                            114u8, 22u8, 125u8, 76u8, 123u8, 170u8, 67u8, 3u8, 177u8, 128u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum amount transferred to call `vested_transfer`."]
                pub fn min_vested_transfer(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Vesting",
                        "MinVestedTransfer",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod bonded_finance {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Offer {
                pub offer: runtime_types::composable_traits::bonded_finance::BondOffer<
                    subxt::ext::sp_core::crypto::AccountId32,
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                    ::core::primitive::u32,
                >,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Bond {
                pub offer_id: ::core::primitive::u128,
                pub nb_of_bonds: ::core::primitive::u128,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct Cancel {
                pub offer_id: ::core::primitive::u128,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Create a new bond offer. To be `bond` to later."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have the"]
                #[doc = "appropriate funds to stake the offer."]
                #[doc = ""]
                #[doc = "Allows the issuer to ask for their account to be kept alive using the `keep_alive`"]
                #[doc = "parameter."]
                #[doc = ""]
                #[doc = "Emits a `NewOffer`."]
                pub fn offer(
                    &self,
                    offer: runtime_types::composable_traits::bonded_finance::BondOffer<
                        subxt::ext::sp_core::crypto::AccountId32,
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<Offer> {
                    subxt::tx::StaticTxPayload::new(
                        "BondedFinance",
                        "offer",
                        Offer { offer, keep_alive },
                        [
                            107u8, 231u8, 53u8, 12u8, 149u8, 46u8, 175u8, 102u8, 216u8, 101u8,
                            58u8, 58u8, 73u8, 139u8, 173u8, 22u8, 9u8, 105u8, 32u8, 3u8, 11u8,
                            231u8, 190u8, 239u8, 222u8, 88u8, 30u8, 19u8, 177u8, 79u8, 84u8, 80u8,
                        ],
                    )
                }
                #[doc = "Bond to an offer."]
                #[doc = ""]
                #[doc = "The issuer should provide the number of contracts they are willing to buy."]
                #[doc = "Once there are no more contracts available on the offer, the `stake` put by the"]
                #[doc = "offer creator is refunded."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have the"]
                #[doc = "appropriate funds to buy the desired number of contracts."]
                #[doc = ""]
                #[doc = "Allows the issuer to ask for their account to be kept alive using the `keep_alive`"]
                #[doc = "parameter."]
                #[doc = ""]
                #[doc = "Emits a `NewBond`."]
                #[doc = "Possibly Emits a `OfferCompleted`."]
                pub fn bond(
                    &self,
                    offer_id: ::core::primitive::u128,
                    nb_of_bonds: ::core::primitive::u128,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<Bond> {
                    subxt::tx::StaticTxPayload::new(
                        "BondedFinance",
                        "bond",
                        Bond {
                            offer_id,
                            nb_of_bonds,
                            keep_alive,
                        },
                        [
                            179u8, 159u8, 159u8, 31u8, 189u8, 122u8, 28u8, 149u8, 50u8, 80u8, 22u8,
                            119u8, 221u8, 62u8, 7u8, 185u8, 52u8, 44u8, 26u8, 22u8, 123u8, 150u8,
                            94u8, 182u8, 28u8, 77u8, 116u8, 68u8, 75u8, 34u8, 196u8, 102u8,
                        ],
                    )
                }
                #[doc = "Cancel a running offer."]
                #[doc = ""]
                #[doc = "Blocking further bonds but not cancelling the currently vested rewards. The `stake` put"]
                #[doc = "by the offer creator is refunded."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be `AdminOrigin`"]
                #[doc = ""]
                #[doc = "Emits a `OfferCancelled`."]
                pub fn cancel(
                    &self,
                    offer_id: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<Cancel> {
                    subxt::tx::StaticTxPayload::new(
                        "BondedFinance",
                        "cancel",
                        Cancel { offer_id },
                        [
                            13u8, 45u8, 139u8, 195u8, 21u8, 169u8, 2u8, 179u8, 135u8, 46u8, 118u8,
                            54u8, 171u8, 130u8, 24u8, 241u8, 201u8, 25u8, 113u8, 107u8, 183u8,
                            89u8, 141u8, 197u8, 236u8, 79u8, 9u8, 195u8, 41u8, 231u8, 120u8, 96u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_bonded_finance::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A new offer has been created."]
            pub struct NewOffer {
                pub offer_id: ::core::primitive::u128,
                pub beneficiary: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for NewOffer {
                const PALLET: &'static str = "BondedFinance";
                const EVENT: &'static str = "NewOffer";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A new bond has been registered."]
            pub struct NewBond {
                pub offer_id: ::core::primitive::u128,
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub nb_of_bonds: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for NewBond {
                const PALLET: &'static str = "BondedFinance";
                const EVENT: &'static str = "NewBond";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "An offer has been cancelled by the `AdminOrigin`."]
            pub struct OfferCancelled {
                pub offer_id: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for OfferCancelled {
                const PALLET: &'static str = "BondedFinance";
                const EVENT: &'static str = "OfferCancelled";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            #[doc = "An offer has been completed."]
            pub struct OfferCompleted {
                pub offer_id: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for OfferCompleted {
                const PALLET: &'static str = "BondedFinance";
                const EVENT: &'static str = "OfferCompleted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The counter used to uniquely identify bond offers within this pallet."]
                pub fn bond_offer_count(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "BondedFinance",
                        "BondOfferCount",
                        vec![],
                        [
                            2u8, 219u8, 28u8, 115u8, 157u8, 78u8, 81u8, 57u8, 26u8, 136u8, 186u8,
                            15u8, 179u8, 229u8, 113u8, 56u8, 68u8, 46u8, 68u8, 85u8, 211u8, 130u8,
                            188u8, 231u8, 201u8, 154u8, 3u8, 63u8, 39u8, 39u8, 157u8, 203u8,
                        ],
                    )
                }
                #[doc = " A mapping from offer ID to the pair: (issuer, offer)"]
                pub fn bond_offers(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u128>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        subxt::ext::sp_core::crypto::AccountId32,
                        runtime_types::composable_traits::bonded_finance::BondOffer<
                            subxt::ext::sp_core::crypto::AccountId32,
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    )>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "BondedFinance",
                        "BondOffers",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            156u8, 177u8, 253u8, 134u8, 174u8, 165u8, 95u8, 149u8, 50u8, 36u8,
                            175u8, 70u8, 1u8, 170u8, 88u8, 232u8, 186u8, 68u8, 155u8, 198u8, 113u8,
                            57u8, 17u8, 123u8, 164u8, 145u8, 128u8, 217u8, 251u8, 110u8, 187u8,
                            90u8,
                        ],
                    )
                }
                #[doc = " A mapping from offer ID to the pair: (issuer, offer)"]
                pub fn bond_offers_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        subxt::ext::sp_core::crypto::AccountId32,
                        runtime_types::composable_traits::bonded_finance::BondOffer<
                            subxt::ext::sp_core::crypto::AccountId32,
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    )>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "BondedFinance",
                        "BondOffers",
                        Vec::new(),
                        [
                            156u8, 177u8, 253u8, 134u8, 174u8, 165u8, 95u8, 149u8, 50u8, 36u8,
                            175u8, 70u8, 1u8, 170u8, 88u8, 232u8, 186u8, 68u8, 155u8, 198u8, 113u8,
                            57u8, 17u8, 123u8, 164u8, 145u8, 128u8, 217u8, 251u8, 110u8, 187u8,
                            90u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The pallet ID, required to create sub-accounts used by offers."]
                pub fn pallet_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::frame_support::PalletId>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "BondedFinance",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
                            174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
                            9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
                        ],
                    )
                }
                #[doc = " The stake a user has to put to create an offer."]
                pub fn stake(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "BondedFinance",
                        "Stake",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The minimum reward for an offer."]
                #[doc = ""]
                #[doc = " Must be > T::Vesting::MinVestedTransfer."]
                pub fn min_reward(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "BondedFinance",
                        "MinReward",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod dutch_auction {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AddConfiguration {
                pub configuration_id: ::core::primitive::u128,
                pub configuration: runtime_types::composable_traits::time::TimeReleaseFunction,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Ask {
                pub order: runtime_types::composable_traits::defi::Sell<
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                >,
                pub configuration: runtime_types::composable_traits::time::TimeReleaseFunction,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Take {
                pub order_id: ::core::primitive::u128,
                pub take: runtime_types::composable_traits::defi::Take<::core::primitive::u128>,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct Liquidate {
                pub order_id: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct XcmSell {
                pub request: runtime_types::composable_traits::xcm::XcmSellRequest,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Inserts or replaces auction configuration."]
                #[doc = "Already running auctions are not updated."]
                pub fn add_configuration(
                    &self,
                    configuration_id: ::core::primitive::u128,
                    configuration: runtime_types::composable_traits::time::TimeReleaseFunction,
                ) -> subxt::tx::StaticTxPayload<AddConfiguration> {
                    subxt::tx::StaticTxPayload::new(
                        "DutchAuction",
                        "add_configuration",
                        AddConfiguration {
                            configuration_id,
                            configuration,
                        },
                        [
                            86u8, 67u8, 60u8, 88u8, 24u8, 59u8, 171u8, 89u8, 24u8, 209u8, 156u8,
                            143u8, 111u8, 29u8, 27u8, 227u8, 131u8, 248u8, 170u8, 253u8, 187u8,
                            57u8, 121u8, 4u8, 108u8, 46u8, 5u8, 134u8, 16u8, 202u8, 251u8, 55u8,
                        ],
                    )
                }
                #[doc = "sell `order` in auction with `configuration`"]
                #[doc = "some deposit is taken for storing sell order"]
                pub fn ask(
                    &self,
                    order: runtime_types::composable_traits::defi::Sell<
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    >,
                    configuration: runtime_types::composable_traits::time::TimeReleaseFunction,
                ) -> subxt::tx::StaticTxPayload<Ask> {
                    subxt::tx::StaticTxPayload::new(
                        "DutchAuction",
                        "ask",
                        Ask {
                            order,
                            configuration,
                        },
                        [
                            135u8, 61u8, 214u8, 95u8, 45u8, 220u8, 221u8, 251u8, 85u8, 169u8,
                            167u8, 88u8, 42u8, 159u8, 127u8, 252u8, 81u8, 190u8, 7u8, 187u8, 28u8,
                            160u8, 219u8, 238u8, 90u8, 110u8, 66u8, 98u8, 239u8, 24u8, 137u8, 1u8,
                        ],
                    )
                }
                #[doc = "adds take to list, does not execute take immediately"]
                pub fn take(
                    &self,
                    order_id: ::core::primitive::u128,
                    take: runtime_types::composable_traits::defi::Take<::core::primitive::u128>,
                ) -> subxt::tx::StaticTxPayload<Take> {
                    subxt::tx::StaticTxPayload::new(
                        "DutchAuction",
                        "take",
                        Take { order_id, take },
                        [
                            87u8, 155u8, 111u8, 107u8, 36u8, 111u8, 14u8, 35u8, 130u8, 22u8, 246u8,
                            238u8, 255u8, 134u8, 87u8, 219u8, 74u8, 79u8, 73u8, 215u8, 26u8, 212u8,
                            149u8, 87u8, 89u8, 236u8, 137u8, 219u8, 137u8, 46u8, 153u8, 133u8,
                        ],
                    )
                }
                #[doc = "allows to remove `order_id` from storage"]
                pub fn liquidate(
                    &self,
                    order_id: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<Liquidate> {
                    subxt::tx::StaticTxPayload::new(
                        "DutchAuction",
                        "liquidate",
                        Liquidate { order_id },
                        [
                            32u8, 129u8, 51u8, 210u8, 219u8, 247u8, 179u8, 25u8, 233u8, 45u8,
                            198u8, 199u8, 128u8, 29u8, 2u8, 20u8, 185u8, 201u8, 37u8, 252u8, 191u8,
                            247u8, 248u8, 116u8, 92u8, 75u8, 222u8, 138u8, 130u8, 90u8, 98u8, 96u8,
                        ],
                    )
                }
                pub fn xcm_sell(
                    &self,
                    request: runtime_types::composable_traits::xcm::XcmSellRequest,
                ) -> subxt::tx::StaticTxPayload<XcmSell> {
                    subxt::tx::StaticTxPayload::new(
                        "DutchAuction",
                        "xcm_sell",
                        XcmSell { request },
                        [
                            157u8, 10u8, 28u8, 112u8, 66u8, 134u8, 14u8, 201u8, 221u8, 106u8,
                            209u8, 138u8, 158u8, 221u8, 103u8, 94u8, 87u8, 197u8, 87u8, 69u8,
                            199u8, 230u8, 31u8, 27u8, 78u8, 253u8, 157u8, 248u8, 231u8, 210u8,
                            140u8, 66u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_dutch_auction::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct OrderAdded {
                pub order_id: ::core::primitive::u128,
                pub order: runtime_types::pallet_dutch_auction::types::SellOrder<
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                    subxt::ext::sp_core::crypto::AccountId32,
                    runtime_types::pallet_dutch_auction::types::EDContext<::core::primitive::u128>,
                    runtime_types::composable_traits::time::TimeReleaseFunction,
                >,
            }
            impl subxt::events::StaticEvent for OrderAdded {
                const PALLET: &'static str = "DutchAuction";
                const EVENT: &'static str = "OrderAdded";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "raised when part or whole order was taken with mentioned balance"]
            pub struct OrderTaken {
                pub order_id: ::core::primitive::u128,
                pub taken: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for OrderTaken {
                const PALLET: &'static str = "DutchAuction";
                const EVENT: &'static str = "OrderTaken";
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct OrderRemoved {
                pub order_id: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for OrderRemoved {
                const PALLET: &'static str = "DutchAuction";
                const EVENT: &'static str = "OrderRemoved";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ConfigurationAdded {
                pub configuration_id: ::core::primitive::u128,
                pub configuration: runtime_types::composable_traits::time::TimeReleaseFunction,
            }
            impl subxt::events::StaticEvent for ConfigurationAdded {
                const PALLET: &'static str = "DutchAuction";
                const EVENT: &'static str = "ConfigurationAdded";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn orders_index(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DutchAuction",
                        "OrdersIndex",
                        vec![],
                        [
                            33u8, 214u8, 151u8, 4u8, 55u8, 106u8, 106u8, 35u8, 123u8, 123u8, 216u8,
                            230u8, 28u8, 248u8, 255u8, 191u8, 198u8, 37u8, 217u8, 70u8, 130u8,
                            35u8, 94u8, 231u8, 60u8, 86u8, 99u8, 123u8, 51u8, 104u8, 142u8, 175u8,
                        ],
                    )
                }
                pub fn sell_orders(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u128>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_dutch_auction::types::SellOrder<
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                            subxt::ext::sp_core::crypto::AccountId32,
                            runtime_types::pallet_dutch_auction::types::EDContext<
                                ::core::primitive::u128,
                            >,
                            runtime_types::composable_traits::time::TimeReleaseFunction,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DutchAuction",
                        "SellOrders",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            150u8, 137u8, 66u8, 11u8, 79u8, 82u8, 167u8, 130u8, 115u8, 168u8, 76u8,
                            36u8, 20u8, 156u8, 27u8, 250u8, 15u8, 243u8, 224u8, 242u8, 6u8, 202u8,
                            124u8, 203u8, 3u8, 184u8, 65u8, 153u8, 108u8, 160u8, 127u8, 96u8,
                        ],
                    )
                }
                pub fn sell_orders_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_dutch_auction::types::SellOrder<
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                            subxt::ext::sp_core::crypto::AccountId32,
                            runtime_types::pallet_dutch_auction::types::EDContext<
                                ::core::primitive::u128,
                            >,
                            runtime_types::composable_traits::time::TimeReleaseFunction,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DutchAuction",
                        "SellOrders",
                        Vec::new(),
                        [
                            150u8, 137u8, 66u8, 11u8, 79u8, 82u8, 167u8, 130u8, 115u8, 168u8, 76u8,
                            36u8, 20u8, 156u8, 27u8, 250u8, 15u8, 243u8, 224u8, 242u8, 6u8, 202u8,
                            124u8, 203u8, 3u8, 184u8, 65u8, 153u8, 108u8, 160u8, 127u8, 96u8,
                        ],
                    )
                }
                pub fn xcm_sell_orders(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DutchAuction",
                        "XcmSellOrders",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Twox64Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Twox64Concat,
                            ),
                        ],
                        [
                            202u8, 202u8, 84u8, 101u8, 161u8, 42u8, 166u8, 189u8, 52u8, 206u8, 5u8,
                            196u8, 79u8, 105u8, 20u8, 101u8, 132u8, 243u8, 54u8, 145u8, 247u8,
                            254u8, 217u8, 230u8, 128u8, 235u8, 155u8, 51u8, 70u8, 231u8, 85u8,
                            209u8,
                        ],
                    )
                }
                pub fn xcm_sell_orders_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DutchAuction",
                        "XcmSellOrders",
                        Vec::new(),
                        [
                            202u8, 202u8, 84u8, 101u8, 161u8, 42u8, 166u8, 189u8, 52u8, 206u8, 5u8,
                            196u8, 79u8, 105u8, 20u8, 101u8, 132u8, 243u8, 54u8, 145u8, 247u8,
                            254u8, 217u8, 230u8, 128u8, 235u8, 155u8, 51u8, 70u8, 231u8, 85u8,
                            209u8,
                        ],
                    )
                }
                #[doc = " orders are handled locally, but if these came from remote,"]
                #[doc = " these should be notified appropriately"]
                pub fn local_order_id_to_remote(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u128>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        runtime_types::polkadot_parachain::primitives::Id,
                        ::core::primitive::u64,
                    )>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DutchAuction",
                        "LocalOrderIdToRemote",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            8u8, 65u8, 19u8, 88u8, 10u8, 205u8, 240u8, 59u8, 109u8, 89u8, 49u8,
                            113u8, 251u8, 79u8, 230u8, 117u8, 13u8, 177u8, 91u8, 159u8, 62u8,
                            214u8, 133u8, 11u8, 191u8, 151u8, 4u8, 151u8, 63u8, 88u8, 81u8, 8u8,
                        ],
                    )
                }
                #[doc = " orders are handled locally, but if these came from remote,"]
                #[doc = " these should be notified appropriately"]
                pub fn local_order_id_to_remote_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        runtime_types::polkadot_parachain::primitives::Id,
                        ::core::primitive::u64,
                    )>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DutchAuction",
                        "LocalOrderIdToRemote",
                        Vec::new(),
                        [
                            8u8, 65u8, 19u8, 88u8, 10u8, 205u8, 240u8, 59u8, 109u8, 89u8, 49u8,
                            113u8, 251u8, 79u8, 230u8, 117u8, 13u8, 177u8, 91u8, 159u8, 62u8,
                            214u8, 133u8, 11u8, 191u8, 151u8, 4u8, 151u8, 63u8, 88u8, 81u8, 8u8,
                        ],
                    )
                }
                #[doc = " registered callback location for specific parachain"]
                pub fn parachain_xcm_callback_location(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::xcm::CumulusMethodId,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DutchAuction",
                        "ParachainXcmCallbackLocation",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            38u8, 196u8, 30u8, 65u8, 186u8, 162u8, 124u8, 131u8, 164u8, 4u8, 46u8,
                            5u8, 103u8, 195u8, 20u8, 89u8, 194u8, 221u8, 100u8, 185u8, 87u8, 132u8,
                            114u8, 202u8, 58u8, 137u8, 110u8, 133u8, 131u8, 253u8, 91u8, 89u8,
                        ],
                    )
                }
                #[doc = " registered callback location for specific parachain"]
                pub fn parachain_xcm_callback_location_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::xcm::CumulusMethodId,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DutchAuction",
                        "ParachainXcmCallbackLocation",
                        Vec::new(),
                        [
                            38u8, 196u8, 30u8, 65u8, 186u8, 162u8, 124u8, 131u8, 164u8, 4u8, 46u8,
                            5u8, 103u8, 195u8, 20u8, 89u8, 194u8, 221u8, 100u8, 185u8, 87u8, 132u8,
                            114u8, 202u8, 58u8, 137u8, 110u8, 133u8, 131u8, 253u8, 91u8, 89u8,
                        ],
                    )
                }
                #[doc = " set of reusable auction configurations"]
                pub fn configurations(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u128>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::time::TimeReleaseFunction,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DutchAuction",
                        "Configurations",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            223u8, 186u8, 2u8, 23u8, 222u8, 219u8, 47u8, 217u8, 165u8, 25u8, 17u8,
                            170u8, 49u8, 232u8, 74u8, 188u8, 252u8, 233u8, 36u8, 54u8, 132u8, 31u8,
                            93u8, 100u8, 59u8, 158u8, 2u8, 61u8, 144u8, 213u8, 124u8, 153u8,
                        ],
                    )
                }
                #[doc = " set of reusable auction configurations"]
                pub fn configurations_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::time::TimeReleaseFunction,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DutchAuction",
                        "Configurations",
                        Vec::new(),
                        [
                            223u8, 186u8, 2u8, 23u8, 222u8, 219u8, 47u8, 217u8, 165u8, 25u8, 17u8,
                            170u8, 49u8, 232u8, 74u8, 188u8, 252u8, 233u8, 36u8, 54u8, 132u8, 31u8,
                            93u8, 100u8, 59u8, 158u8, 2u8, 61u8, 144u8, 213u8, 124u8, 153u8,
                        ],
                    )
                }
                #[doc = " one block storage, users payed N * WEIGHT for this Vec, so will not put bound here (neither"]
                #[doc = " HydraDX does)"]
                pub fn takes(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u128>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<
                            runtime_types::pallet_dutch_auction::types::TakeOrder<
                                ::core::primitive::u128,
                                subxt::ext::sp_core::crypto::AccountId32,
                            >,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DutchAuction",
                        "Takes",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            5u8, 34u8, 193u8, 161u8, 26u8, 101u8, 36u8, 103u8, 192u8, 110u8, 10u8,
                            188u8, 120u8, 113u8, 59u8, 14u8, 232u8, 127u8, 131u8, 219u8, 159u8,
                            63u8, 25u8, 150u8, 28u8, 198u8, 162u8, 124u8, 229u8, 176u8, 7u8, 217u8,
                        ],
                    )
                }
                #[doc = " one block storage, users payed N * WEIGHT for this Vec, so will not put bound here (neither"]
                #[doc = " HydraDX does)"]
                pub fn takes_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<
                            runtime_types::pallet_dutch_auction::types::TakeOrder<
                                ::core::primitive::u128,
                                subxt::ext::sp_core::crypto::AccountId32,
                            >,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DutchAuction",
                        "Takes",
                        Vec::new(),
                        [
                            5u8, 34u8, 193u8, 161u8, 26u8, 101u8, 36u8, 103u8, 192u8, 110u8, 10u8,
                            188u8, 120u8, 113u8, 59u8, 14u8, 232u8, 127u8, 131u8, 219u8, 159u8,
                            63u8, 25u8, 150u8, 28u8, 198u8, 162u8, 124u8, 229u8, 176u8, 7u8, 217u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn pallet_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::frame_support::PalletId>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "DutchAuction",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
                            174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
                            9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
                        ],
                    )
                }
                #[doc = " ED taken to create position. Part of if returned when position is liquidated."]
                pub fn position_existential_deposit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "DutchAuction",
                        "PositionExistentialDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod mosaic {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetRelayer {
                pub relayer: subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RotateRelayer {
                pub new: subxt::ext::sp_core::crypto::AccountId32,
                pub validated_ttl: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetNetwork {
                pub network_id: ::core::primitive::u32,
                pub network_info:
                    runtime_types::pallet_mosaic::pallet::NetworkInfo<::core::primitive::u128>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetBudget {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub amount: ::core::primitive::u128,
                pub decay: runtime_types::pallet_mosaic::decay::BudgetPenaltyDecayer<
                    ::core::primitive::u128,
                    ::core::primitive::u32,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct TransferTo {
                pub network_id: ::core::primitive::u32,
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub address: runtime_types::composable_support::types::EthereumAddress,
                pub amount: ::core::primitive::u128,
                pub minimum_amount_out: ::core::primitive::u128,
                pub swap_to_native: ::core::primitive::bool,
                pub source_user_account: subxt::ext::sp_core::crypto::AccountId32,
                pub amm_swap_info: ::core::option::Option<
                    runtime_types::pallet_mosaic::pallet::AmmSwapInfo<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    >,
                >,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AcceptTransfer {
                pub from: subxt::ext::sp_core::crypto::AccountId32,
                pub network_id: ::core::primitive::u32,
                pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                pub amount: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ClaimStaleTo {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub to: subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct TimelockedMint {
                pub network_id: ::core::primitive::u32,
                pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                pub to: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
                pub lock_time: ::core::primitive::u32,
                pub id: subxt::ext::sp_core::H256,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct SetTimelockDuration {
                pub period: ::core::primitive::u32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RescindTimelockedMint {
                pub network_id: ::core::primitive::u32,
                pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                pub account: subxt::ext::sp_core::crypto::AccountId32,
                pub untrusted_amount: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ClaimTo {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub to: subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct UpdateAssetMapping {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub network_id: ::core::primitive::u32,
                pub remote_asset_id:
                    ::core::option::Option<runtime_types::common::types::MosaicRemoteAssetId>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AddRemoteAmmId {
                pub network_id: ::core::primitive::u32,
                pub amm_id: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RemoveRemoteAmmId {
                pub network_id: ::core::primitive::u32,
                pub amm_id: ::core::primitive::u128,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Sets the current Relayer configuration."]
                #[doc = ""]
                #[doc = "This is enacted immediately and invalidates inflight/ incoming transactions from the"]
                #[doc = "previous Relayer. However, existing budgets remain in place."]
                #[doc = ""]
                #[doc = "This can only be called by the [`ControlOrigin`]."]
                #[doc = ""]
                #[doc = "[`ControlOrigin`]: https://dali.devnets.composablefinance.ninja/doc/pallet_mosaic/pallet/trait.Config.html#associatedtype.ControlOrigin"]
                pub fn set_relayer(
                    &self,
                    relayer: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<SetRelayer> {
                    subxt::tx::StaticTxPayload::new(
                        "Mosaic",
                        "set_relayer",
                        SetRelayer { relayer },
                        [
                            211u8, 37u8, 5u8, 255u8, 195u8, 4u8, 183u8, 24u8, 100u8, 63u8, 51u8,
                            156u8, 153u8, 56u8, 177u8, 134u8, 51u8, 190u8, 239u8, 142u8, 204u8,
                            199u8, 143u8, 168u8, 39u8, 175u8, 154u8, 245u8, 248u8, 156u8, 99u8,
                            212u8,
                        ],
                    )
                }
                #[doc = "Rotates the Relayer Account"]
                #[doc = ""]
                #[doc = "# Restrictions"]
                #[doc = " - Only callable by the current Relayer."]
                #[doc = " - The Time To Live (TTL) must be greater than the [`MinimumTTL`](Config::MinimumTTL)"]
                pub fn rotate_relayer(
                    &self,
                    new: subxt::ext::sp_core::crypto::AccountId32,
                    validated_ttl: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<RotateRelayer> {
                    subxt::tx::StaticTxPayload::new(
                        "Mosaic",
                        "rotate_relayer",
                        RotateRelayer { new, validated_ttl },
                        [
                            21u8, 173u8, 124u8, 196u8, 206u8, 232u8, 226u8, 162u8, 118u8, 227u8,
                            194u8, 201u8, 6u8, 2u8, 45u8, 204u8, 171u8, 190u8, 45u8, 156u8, 97u8,
                            187u8, 41u8, 199u8, 182u8, 174u8, 116u8, 46u8, 164u8, 161u8, 237u8,
                            42u8,
                        ],
                    )
                }
                #[doc = "Sets supported networks and maximum transaction sizes accepted by the Relayer."]
                #[doc = ""]
                #[doc = "Only callable by the current Relayer"]
                pub fn set_network(
                    &self,
                    network_id: ::core::primitive::u32,
                    network_info: runtime_types::pallet_mosaic::pallet::NetworkInfo<
                        ::core::primitive::u128,
                    >,
                ) -> subxt::tx::StaticTxPayload<SetNetwork> {
                    subxt::tx::StaticTxPayload::new(
                        "Mosaic",
                        "set_network",
                        SetNetwork {
                            network_id,
                            network_info,
                        },
                        [
                            228u8, 148u8, 198u8, 221u8, 192u8, 78u8, 29u8, 120u8, 157u8, 21u8,
                            124u8, 164u8, 142u8, 242u8, 245u8, 220u8, 28u8, 66u8, 183u8, 54u8,
                            188u8, 195u8, 234u8, 67u8, 65u8, 200u8, 81u8, 12u8, 92u8, 217u8, 26u8,
                            8u8,
                        ],
                    )
                }
                #[doc = "Sets the relayer budget for _incoming_ transactions for specific assets. Does not reset"]
                #[doc = "the current `penalty`."]
                #[doc = ""]
                #[doc = "# Restrictions"]
                #[doc = "- This can only be called by the [`ControlOrigin`](Config::ControlOrigin)"]
                pub fn set_budget(
                    &self,
                    asset_id: runtime_types::primitives::currency::CurrencyId,
                    amount: ::core::primitive::u128,
                    decay: runtime_types::pallet_mosaic::decay::BudgetPenaltyDecayer<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                ) -> subxt::tx::StaticTxPayload<SetBudget> {
                    subxt::tx::StaticTxPayload::new(
                        "Mosaic",
                        "set_budget",
                        SetBudget {
                            asset_id,
                            amount,
                            decay,
                        },
                        [
                            199u8, 106u8, 249u8, 196u8, 161u8, 34u8, 88u8, 116u8, 139u8, 35u8,
                            244u8, 166u8, 9u8, 203u8, 65u8, 67u8, 100u8, 84u8, 80u8, 187u8, 75u8,
                            22u8, 170u8, 245u8, 4u8, 216u8, 189u8, 237u8, 110u8, 88u8, 199u8,
                            128u8,
                        ],
                    )
                }
                #[doc = "Creates an outgoing transaction request, locking the funds locally until picked up by"]
                #[doc = "the Relayer."]
                #[doc = ""]
                #[doc = "# Restrictions"]
                #[doc = "- Network must be supported."]
                #[doc = "- AssetId must be supported."]
                #[doc = "- Amount must be lower than the networks `max_transfer_size`."]
                #[doc = "- Origin must have sufficient funds."]
                #[doc = "- Transfers near Balance::max may result in overflows, which are caught and returned as"]
                #[doc = "  an error."]
                pub fn transfer_to(
                    &self,
                    network_id: ::core::primitive::u32,
                    asset_id: runtime_types::primitives::currency::CurrencyId,
                    address: runtime_types::composable_support::types::EthereumAddress,
                    amount: ::core::primitive::u128,
                    minimum_amount_out: ::core::primitive::u128,
                    swap_to_native: ::core::primitive::bool,
                    source_user_account: subxt::ext::sp_core::crypto::AccountId32,
                    amm_swap_info: ::core::option::Option<
                        runtime_types::pallet_mosaic::pallet::AmmSwapInfo<
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                            ::core::primitive::u128,
                        >,
                    >,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<TransferTo> {
                    subxt::tx::StaticTxPayload::new(
                        "Mosaic",
                        "transfer_to",
                        TransferTo {
                            network_id,
                            asset_id,
                            address,
                            amount,
                            minimum_amount_out,
                            swap_to_native,
                            source_user_account,
                            amm_swap_info,
                            keep_alive,
                        },
                        [
                            241u8, 38u8, 121u8, 250u8, 35u8, 48u8, 255u8, 82u8, 33u8, 136u8, 52u8,
                            248u8, 74u8, 50u8, 5u8, 21u8, 199u8, 42u8, 56u8, 177u8, 15u8, 225u8,
                            248u8, 74u8, 71u8, 131u8, 251u8, 29u8, 225u8, 163u8, 233u8, 214u8,
                        ],
                    )
                }
                #[doc = "This is called by the Relayer to confirm that it will relay a transaction."]
                #[doc = ""]
                #[doc = "Once this is called, the sender will be unable to reclaim their tokens."]
                #[doc = ""]
                #[doc = "If all the funds are not removed, the reclaim period will not be reset. If the"]
                #[doc = "reclaim period is not reset, the Relayer will still attempt to pick up the"]
                #[doc = "remainder of the transaction."]
                #[doc = ""]
                #[doc = "# Restrictions"]
                #[doc = "- Only callable by the current Relayer"]
                #[doc = "- Outgoing transaction must exist for the user"]
                #[doc = "- Amount must be equal or lower than what the user has locked"]
                #[doc = ""]
                #[doc = "# Note"]
                #[doc = "- Reclaim period is not reset if not all the funds are moved; meaning that the clock"]
                #[doc = "  remains ticking for the relayer to pick up the rest of the transaction."]
                pub fn accept_transfer(
                    &self,
                    from: subxt::ext::sp_core::crypto::AccountId32,
                    network_id: ::core::primitive::u32,
                    remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                    amount: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<AcceptTransfer> {
                    subxt::tx::StaticTxPayload::new(
                        "Mosaic",
                        "accept_transfer",
                        AcceptTransfer {
                            from,
                            network_id,
                            remote_asset_id,
                            amount,
                        },
                        [
                            200u8, 63u8, 192u8, 161u8, 4u8, 133u8, 24u8, 244u8, 255u8, 242u8,
                            126u8, 127u8, 103u8, 59u8, 49u8, 252u8, 192u8, 179u8, 213u8, 252u8,
                            19u8, 170u8, 232u8, 101u8, 99u8, 231u8, 7u8, 42u8, 156u8, 58u8, 150u8,
                            43u8,
                        ],
                    )
                }
                #[doc = "Claims user funds from the `OutgoingTransactions`, in case that the Relayer has not"]
                #[doc = "picked them up."]
                pub fn claim_stale_to(
                    &self,
                    asset_id: runtime_types::primitives::currency::CurrencyId,
                    to: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<ClaimStaleTo> {
                    subxt::tx::StaticTxPayload::new(
                        "Mosaic",
                        "claim_stale_to",
                        ClaimStaleTo { asset_id, to },
                        [
                            158u8, 59u8, 236u8, 35u8, 105u8, 58u8, 39u8, 241u8, 57u8, 66u8, 92u8,
                            108u8, 188u8, 0u8, 170u8, 67u8, 244u8, 174u8, 146u8, 108u8, 154u8,
                            58u8, 136u8, 47u8, 208u8, 231u8, 186u8, 33u8, 53u8, 109u8, 134u8, 74u8,
                        ],
                    )
                }
                #[doc = "Mints new tokens into the pallet's wallet, ready for the user to be picked up after"]
                #[doc = "`lock_time` blocks have expired."]
                #[doc = ""]
                #[doc = "Only callable by the current Relayer"]
                pub fn timelocked_mint(
                    &self,
                    network_id: ::core::primitive::u32,
                    remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                    to: subxt::ext::sp_core::crypto::AccountId32,
                    amount: ::core::primitive::u128,
                    lock_time: ::core::primitive::u32,
                    id: subxt::ext::sp_core::H256,
                ) -> subxt::tx::StaticTxPayload<TimelockedMint> {
                    subxt::tx::StaticTxPayload::new(
                        "Mosaic",
                        "timelocked_mint",
                        TimelockedMint {
                            network_id,
                            remote_asset_id,
                            to,
                            amount,
                            lock_time,
                            id,
                        },
                        [
                            202u8, 202u8, 140u8, 238u8, 42u8, 86u8, 85u8, 35u8, 136u8, 219u8,
                            150u8, 87u8, 158u8, 70u8, 170u8, 195u8, 251u8, 223u8, 211u8, 209u8,
                            0u8, 154u8, 6u8, 221u8, 19u8, 132u8, 242u8, 132u8, 223u8, 144u8, 104u8,
                            196u8,
                        ],
                    )
                }
                #[doc = "Sets the time lock, in blocks, on new transfers"]
                #[doc = ""]
                #[doc = "This can only be called by the [`ControlOrigin`](Config::ControlOrigin)"]
                pub fn set_timelock_duration(
                    &self,
                    period: ::core::primitive::u32,
                ) -> subxt::tx::StaticTxPayload<SetTimelockDuration> {
                    subxt::tx::StaticTxPayload::new(
                        "Mosaic",
                        "set_timelock_duration",
                        SetTimelockDuration { period },
                        [
                            71u8, 153u8, 130u8, 140u8, 88u8, 22u8, 53u8, 94u8, 98u8, 102u8, 14u8,
                            89u8, 98u8, 34u8, 74u8, 175u8, 147u8, 158u8, 17u8, 36u8, 176u8, 88u8,
                            251u8, 109u8, 129u8, 133u8, 32u8, 95u8, 200u8, 153u8, 118u8, 170u8,
                        ],
                    )
                }
                #[doc = "Burns funds waiting in incoming_transactions that are still unclaimed."]
                #[doc = ""]
                #[doc = "May be used by the Relayer in case of finality issues on the other side of the bridge."]
                pub fn rescind_timelocked_mint(
                    &self,
                    network_id: ::core::primitive::u32,
                    remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                    account: subxt::ext::sp_core::crypto::AccountId32,
                    untrusted_amount: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<RescindTimelockedMint> {
                    subxt::tx::StaticTxPayload::new(
                        "Mosaic",
                        "rescind_timelocked_mint",
                        RescindTimelockedMint {
                            network_id,
                            remote_asset_id,
                            account,
                            untrusted_amount,
                        },
                        [
                            171u8, 196u8, 26u8, 77u8, 190u8, 166u8, 32u8, 220u8, 79u8, 145u8,
                            224u8, 162u8, 79u8, 176u8, 145u8, 47u8, 168u8, 93u8, 22u8, 203u8,
                            231u8, 213u8, 105u8, 134u8, 2u8, 55u8, 153u8, 97u8, 228u8, 148u8,
                            236u8, 1u8,
                        ],
                    )
                }
                #[doc = "Collects funds deposited by the Relayer into the owner's account"]
                pub fn claim_to(
                    &self,
                    asset_id: runtime_types::primitives::currency::CurrencyId,
                    to: subxt::ext::sp_core::crypto::AccountId32,
                ) -> subxt::tx::StaticTxPayload<ClaimTo> {
                    subxt::tx::StaticTxPayload::new(
                        "Mosaic",
                        "claim_to",
                        ClaimTo { asset_id, to },
                        [
                            94u8, 227u8, 89u8, 117u8, 227u8, 171u8, 107u8, 27u8, 58u8, 239u8,
                            137u8, 113u8, 6u8, 248u8, 209u8, 130u8, 52u8, 227u8, 44u8, 194u8,
                            222u8, 139u8, 34u8, 5u8, 154u8, 50u8, 143u8, 181u8, 245u8, 212u8,
                            232u8, 42u8,
                        ],
                    )
                }
                #[doc = "Update a network asset mapping."]
                #[doc = ""]
                #[doc = "This can only be called by the [`ControlOrigin`](Config::ControlOrigin)"]
                #[doc = ""]
                #[doc = "Possibly emits one of:"]
                #[doc = "- `AssetMappingCreated`"]
                #[doc = "- `AssetMappingDeleted`"]
                #[doc = "- `AssetMappingUpdated`"]
                pub fn update_asset_mapping(
                    &self,
                    asset_id: runtime_types::primitives::currency::CurrencyId,
                    network_id: ::core::primitive::u32,
                    remote_asset_id: ::core::option::Option<
                        runtime_types::common::types::MosaicRemoteAssetId,
                    >,
                ) -> subxt::tx::StaticTxPayload<UpdateAssetMapping> {
                    subxt::tx::StaticTxPayload::new(
                        "Mosaic",
                        "update_asset_mapping",
                        UpdateAssetMapping {
                            asset_id,
                            network_id,
                            remote_asset_id,
                        },
                        [
                            222u8, 156u8, 126u8, 26u8, 106u8, 249u8, 245u8, 195u8, 73u8, 184u8,
                            181u8, 80u8, 52u8, 102u8, 176u8, 19u8, 158u8, 60u8, 216u8, 98u8, 78u8,
                            62u8, 219u8, 23u8, 53u8, 239u8, 155u8, 45u8, 22u8, 84u8, 171u8, 210u8,
                        ],
                    )
                }
                #[doc = "Adds a remote AMM for a specific Network"]
                pub fn add_remote_amm_id(
                    &self,
                    network_id: ::core::primitive::u32,
                    amm_id: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<AddRemoteAmmId> {
                    subxt::tx::StaticTxPayload::new(
                        "Mosaic",
                        "add_remote_amm_id",
                        AddRemoteAmmId { network_id, amm_id },
                        [
                            193u8, 123u8, 186u8, 36u8, 185u8, 38u8, 228u8, 208u8, 200u8, 168u8,
                            104u8, 241u8, 135u8, 218u8, 100u8, 99u8, 179u8, 196u8, 179u8, 246u8,
                            192u8, 216u8, 120u8, 141u8, 34u8, 97u8, 154u8, 249u8, 115u8, 169u8,
                            49u8, 34u8,
                        ],
                    )
                }
                #[doc = "Removes a remote AMM for a specific Network"]
                pub fn remove_remote_amm_id(
                    &self,
                    network_id: ::core::primitive::u32,
                    amm_id: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<RemoveRemoteAmmId> {
                    subxt::tx::StaticTxPayload::new(
                        "Mosaic",
                        "remove_remote_amm_id",
                        RemoveRemoteAmmId { network_id, amm_id },
                        [
                            104u8, 135u8, 126u8, 17u8, 73u8, 142u8, 76u8, 58u8, 240u8, 139u8, 34u8,
                            242u8, 129u8, 126u8, 253u8, 5u8, 6u8, 106u8, 196u8, 23u8, 100u8, 253u8,
                            246u8, 27u8, 73u8, 102u8, 92u8, 40u8, 176u8, 200u8, 230u8, 225u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_mosaic::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The account of the relayer has been set."]
            pub struct RelayerSet {
                pub relayer: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for RelayerSet {
                const PALLET: &'static str = "Mosaic";
                const EVENT: &'static str = "RelayerSet";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The relayer has been rotated to `account_id`."]
            pub struct RelayerRotated {
                pub ttl: ::core::primitive::u32,
                pub account_id: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for RelayerRotated {
                const PALLET: &'static str = "Mosaic";
                const EVENT: &'static str = "RelayerRotated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct BudgetUpdated {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub amount: ::core::primitive::u128,
                pub decay: runtime_types::pallet_mosaic::decay::BudgetPenaltyDecayer<
                    ::core::primitive::u128,
                    ::core::primitive::u32,
                >,
            }
            impl subxt::events::StaticEvent for BudgetUpdated {
                const PALLET: &'static str = "Mosaic";
                const EVENT: &'static str = "BudgetUpdated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The `NetworkInfos` `network_info` was updated for `network_id`."]
            pub struct NetworksUpdated {
                pub network_id: ::core::primitive::u32,
                pub network_info:
                    runtime_types::pallet_mosaic::pallet::NetworkInfo<::core::primitive::u128>,
            }
            impl subxt::events::StaticEvent for NetworksUpdated {
                const PALLET: &'static str = "Mosaic";
                const EVENT: &'static str = "NetworksUpdated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An outgoing tx is created, and locked in the outgoing tx pool."]
            pub struct TransferOut {
                pub id: subxt::ext::sp_core::H256,
                pub to: runtime_types::composable_support::types::EthereumAddress,
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub network_id: ::core::primitive::u32,
                pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                pub amount: ::core::primitive::u128,
                pub swap_to_native: ::core::primitive::bool,
                pub source_user_account: subxt::ext::sp_core::crypto::AccountId32,
                pub amm_swap_info: ::core::option::Option<
                    runtime_types::pallet_mosaic::pallet::AmmSwapInfo<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    >,
                >,
                pub minimum_amount_out: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for TransferOut {
                const PALLET: &'static str = "Mosaic";
                const EVENT: &'static str = "TransferOut";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "User claimed outgoing tx that was not (yet) picked up by the relayer"]
            pub struct StaleTxClaimed {
                pub to: subxt::ext::sp_core::crypto::AccountId32,
                pub by: subxt::ext::sp_core::crypto::AccountId32,
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for StaleTxClaimed {
                const PALLET: &'static str = "Mosaic";
                const EVENT: &'static str = "StaleTxClaimed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An incoming tx is created and waiting for the user to claim."]
            pub struct TransferInto {
                pub id: subxt::ext::sp_core::H256,
                pub to: subxt::ext::sp_core::crypto::AccountId32,
                pub network_id: ::core::primitive::u32,
                pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for TransferInto {
                const PALLET: &'static str = "Mosaic";
                const EVENT: &'static str = "TransferInto";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "When we have finality issues occur on the Ethereum chain,"]
            #[doc = "we burn the locked `IncomingTransaction` for which we know that it is invalid."]
            pub struct TransferIntoRescined {
                pub account: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
            }
            impl subxt::events::StaticEvent for TransferIntoRescined {
                const PALLET: &'static str = "Mosaic";
                const EVENT: &'static str = "TransferIntoRescined";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The relayer partially accepted the user's `OutgoingTransaction`."]
            pub struct PartialTransferAccepted {
                pub from: subxt::ext::sp_core::crypto::AccountId32,
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub network_id: ::core::primitive::u32,
                pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for PartialTransferAccepted {
                const PALLET: &'static str = "Mosaic";
                const EVENT: &'static str = "PartialTransferAccepted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The relayer accepted the user's `OutgoingTransaction`."]
            pub struct TransferAccepted {
                pub from: subxt::ext::sp_core::crypto::AccountId32,
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub network_id: ::core::primitive::u32,
                pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for TransferAccepted {
                const PALLET: &'static str = "Mosaic";
                const EVENT: &'static str = "TransferAccepted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "The user claims his `IncomingTransaction` and unlocks the locked amount."]
            pub struct TransferClaimed {
                pub by: subxt::ext::sp_core::crypto::AccountId32,
                pub to: subxt::ext::sp_core::crypto::AccountId32,
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for TransferClaimed {
                const PALLET: &'static str = "Mosaic";
                const EVENT: &'static str = "TransferClaimed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An asset mapping has been created."]
            pub struct AssetMappingCreated {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub network_id: ::core::primitive::u32,
                pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
            }
            impl subxt::events::StaticEvent for AssetMappingCreated {
                const PALLET: &'static str = "Mosaic";
                const EVENT: &'static str = "AssetMappingCreated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An existing asset mapping has been updated."]
            pub struct AssetMappingUpdated {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub network_id: ::core::primitive::u32,
                pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
            }
            impl subxt::events::StaticEvent for AssetMappingUpdated {
                const PALLET: &'static str = "Mosaic";
                const EVENT: &'static str = "AssetMappingUpdated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An existing asset mapping has been deleted."]
            pub struct AssetMappingDeleted {
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub network_id: ::core::primitive::u32,
                pub remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
            }
            impl subxt::events::StaticEvent for AssetMappingDeleted {
                const PALLET: &'static str = "Mosaic";
                const EVENT: &'static str = "AssetMappingDeleted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn relayer(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_mosaic::relayer::StaleRelayer<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Mosaic",
                        "Relayer",
                        vec![],
                        [
                            173u8, 47u8, 88u8, 82u8, 131u8, 47u8, 41u8, 239u8, 230u8, 146u8, 233u8,
                            228u8, 50u8, 197u8, 91u8, 3u8, 143u8, 135u8, 31u8, 185u8, 230u8, 14u8,
                            82u8, 134u8, 122u8, 193u8, 195u8, 118u8, 155u8, 0u8, 73u8, 141u8,
                        ],
                    )
                }
                pub fn assets_info(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_mosaic::pallet::AssetInfo<
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                            runtime_types::pallet_mosaic::decay::BudgetPenaltyDecayer<
                                ::core::primitive::u128,
                                ::core::primitive::u32,
                            >,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Mosaic",
                        "AssetsInfo",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            85u8, 135u8, 54u8, 136u8, 242u8, 30u8, 176u8, 132u8, 19u8, 57u8, 27u8,
                            19u8, 150u8, 185u8, 25u8, 43u8, 181u8, 153u8, 221u8, 84u8, 139u8, 63u8,
                            12u8, 49u8, 151u8, 69u8, 161u8, 223u8, 98u8, 166u8, 36u8, 196u8,
                        ],
                    )
                }
                pub fn assets_info_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_mosaic::pallet::AssetInfo<
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                            runtime_types::pallet_mosaic::decay::BudgetPenaltyDecayer<
                                ::core::primitive::u128,
                                ::core::primitive::u32,
                            >,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Mosaic",
                        "AssetsInfo",
                        Vec::new(),
                        [
                            85u8, 135u8, 54u8, 136u8, 242u8, 30u8, 176u8, 132u8, 19u8, 57u8, 27u8,
                            19u8, 150u8, 185u8, 25u8, 43u8, 181u8, 153u8, 221u8, 84u8, 139u8, 63u8,
                            12u8, 49u8, 151u8, 69u8, 161u8, 223u8, 98u8, 166u8, 36u8, 196u8,
                        ],
                    )
                }
                pub fn network_infos(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_mosaic::pallet::NetworkInfo<::core::primitive::u128>,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Mosaic",
                        "NetworkInfos",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            11u8, 217u8, 252u8, 108u8, 24u8, 233u8, 186u8, 65u8, 15u8, 223u8,
                            102u8, 60u8, 205u8, 124u8, 230u8, 25u8, 146u8, 58u8, 230u8, 89u8, 18u8,
                            234u8, 126u8, 229u8, 193u8, 15u8, 4u8, 3u8, 246u8, 72u8, 241u8, 7u8,
                        ],
                    )
                }
                pub fn network_infos_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_mosaic::pallet::NetworkInfo<::core::primitive::u128>,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Mosaic",
                        "NetworkInfos",
                        Vec::new(),
                        [
                            11u8, 217u8, 252u8, 108u8, 24u8, 233u8, 186u8, 65u8, 15u8, 223u8,
                            102u8, 60u8, 205u8, 124u8, 230u8, 25u8, 146u8, 58u8, 230u8, 89u8, 18u8,
                            234u8, 126u8, 229u8, 193u8, 15u8, 4u8, 3u8, 246u8, 72u8, 241u8, 7u8,
                        ],
                    )
                }
                pub fn time_lock_period(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Mosaic",
                        "TimeLockPeriod",
                        vec![],
                        [
                            198u8, 108u8, 208u8, 63u8, 180u8, 103u8, 193u8, 115u8, 31u8, 129u8,
                            105u8, 246u8, 81u8, 44u8, 98u8, 196u8, 131u8, 145u8, 247u8, 150u8,
                            221u8, 100u8, 93u8, 163u8, 200u8, 179u8, 88u8, 194u8, 133u8, 143u8,
                            8u8, 25u8,
                        ],
                    )
                }
                pub fn nonce(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Mosaic",
                        "Nonce",
                        vec![],
                        [
                            39u8, 133u8, 225u8, 169u8, 101u8, 10u8, 59u8, 139u8, 91u8, 154u8,
                            209u8, 7u8, 168u8, 217u8, 46u8, 251u8, 99u8, 138u8, 131u8, 106u8, 12u8,
                            221u8, 20u8, 117u8, 159u8, 18u8, 82u8, 55u8, 213u8, 214u8, 18u8, 48u8,
                        ],
                    )
                }
                #[doc = " Remote AMM IDs that exist (NetworkId, AmmId)."]
                #[doc = " Note that this is actually a set that does bookkeeping of valid AmmIds."]
                #[doc = " Therefore, the value type is (), because it is irrelevant for our use case."]
                pub fn remote_amm_whitelist(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u128>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<()>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Mosaic",
                        "RemoteAmmWhitelist",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            141u8, 249u8, 50u8, 17u8, 142u8, 111u8, 4u8, 128u8, 175u8, 52u8, 74u8,
                            186u8, 230u8, 148u8, 50u8, 102u8, 19u8, 164u8, 27u8, 119u8, 33u8, 38u8,
                            201u8, 244u8, 66u8, 253u8, 38u8, 5u8, 97u8, 14u8, 202u8, 10u8,
                        ],
                    )
                }
                #[doc = " Remote AMM IDs that exist (NetworkId, AmmId)."]
                #[doc = " Note that this is actually a set that does bookkeeping of valid AmmIds."]
                #[doc = " Therefore, the value type is (), because it is irrelevant for our use case."]
                pub fn remote_amm_whitelist_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<()>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Mosaic",
                        "RemoteAmmWhitelist",
                        Vec::new(),
                        [
                            141u8, 249u8, 50u8, 17u8, 142u8, 111u8, 4u8, 128u8, 175u8, 52u8, 74u8,
                            186u8, 230u8, 148u8, 50u8, 102u8, 19u8, 164u8, 27u8, 119u8, 33u8, 38u8,
                            201u8, 244u8, 66u8, 253u8, 38u8, 5u8, 97u8, 14u8, 202u8, 10u8,
                        ],
                    )
                }
                #[doc = " Locked outgoing tx out of Picasso, that a relayer needs to process."]
                pub fn outgoing_transactions(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    )>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Mosaic",
                        "OutgoingTransactions",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            241u8, 88u8, 183u8, 195u8, 46u8, 244u8, 42u8, 15u8, 161u8, 169u8, 26u8,
                            226u8, 24u8, 71u8, 227u8, 236u8, 66u8, 120u8, 135u8, 0u8, 228u8, 41u8,
                            119u8, 85u8, 118u8, 6u8, 110u8, 145u8, 59u8, 205u8, 198u8, 19u8,
                        ],
                    )
                }
                #[doc = " Locked outgoing tx out of Picasso, that a relayer needs to process."]
                pub fn outgoing_transactions_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    )>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Mosaic",
                        "OutgoingTransactions",
                        Vec::new(),
                        [
                            241u8, 88u8, 183u8, 195u8, 46u8, 244u8, 42u8, 15u8, 161u8, 169u8, 26u8,
                            226u8, 24u8, 71u8, 227u8, 236u8, 66u8, 120u8, 135u8, 0u8, 228u8, 41u8,
                            119u8, 85u8, 118u8, 6u8, 110u8, 145u8, 59u8, 205u8, 198u8, 19u8,
                        ],
                    )
                }
                #[doc = " Locked incoming tx into Picasso that the user needs to claim."]
                pub fn incoming_transactions(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    )>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Mosaic",
                        "IncomingTransactions",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            102u8, 214u8, 106u8, 240u8, 213u8, 152u8, 176u8, 162u8, 25u8, 15u8,
                            233u8, 152u8, 60u8, 161u8, 238u8, 241u8, 253u8, 128u8, 72u8, 154u8,
                            80u8, 172u8, 18u8, 182u8, 172u8, 57u8, 214u8, 54u8, 92u8, 171u8, 10u8,
                            34u8,
                        ],
                    )
                }
                #[doc = " Locked incoming tx into Picasso that the user needs to claim."]
                pub fn incoming_transactions_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    )>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Mosaic",
                        "IncomingTransactions",
                        Vec::new(),
                        [
                            102u8, 214u8, 106u8, 240u8, 213u8, 152u8, 176u8, 162u8, 25u8, 15u8,
                            233u8, 152u8, 60u8, 161u8, 238u8, 241u8, 253u8, 128u8, 72u8, 154u8,
                            80u8, 172u8, 18u8, 182u8, 172u8, 57u8, 214u8, 54u8, 92u8, 171u8, 10u8,
                            34u8,
                        ],
                    )
                }
                pub fn local_to_remote_asset(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::common::types::MosaicRemoteAssetId,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Mosaic",
                        "LocalToRemoteAsset",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            106u8, 169u8, 4u8, 185u8, 21u8, 168u8, 132u8, 142u8, 183u8, 60u8,
                            243u8, 236u8, 237u8, 178u8, 61u8, 104u8, 125u8, 42u8, 122u8, 105u8,
                            151u8, 76u8, 23u8, 37u8, 85u8, 53u8, 90u8, 193u8, 202u8, 151u8, 201u8,
                            89u8,
                        ],
                    )
                }
                pub fn local_to_remote_asset_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::common::types::MosaicRemoteAssetId,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Mosaic",
                        "LocalToRemoteAsset",
                        Vec::new(),
                        [
                            106u8, 169u8, 4u8, 185u8, 21u8, 168u8, 132u8, 142u8, 183u8, 60u8,
                            243u8, 236u8, 237u8, 178u8, 61u8, 104u8, 125u8, 42u8, 122u8, 105u8,
                            151u8, 76u8, 23u8, 37u8, 85u8, 53u8, 90u8, 193u8, 202u8, 151u8, 201u8,
                            89u8,
                        ],
                    )
                }
                pub fn remote_to_local_asset(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::common::types::MosaicRemoteAssetId>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Mosaic",
                        "RemoteToLocalAsset",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            237u8, 72u8, 21u8, 29u8, 241u8, 122u8, 0u8, 52u8, 229u8, 125u8, 101u8,
                            244u8, 245u8, 178u8, 248u8, 148u8, 58u8, 253u8, 44u8, 228u8, 90u8,
                            67u8, 91u8, 212u8, 15u8, 3u8, 84u8, 139u8, 162u8, 108u8, 33u8, 16u8,
                        ],
                    )
                }
                pub fn remote_to_local_asset_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Mosaic",
                        "RemoteToLocalAsset",
                        Vec::new(),
                        [
                            237u8, 72u8, 21u8, 29u8, 241u8, 122u8, 0u8, 52u8, 229u8, 125u8, 101u8,
                            244u8, 245u8, 178u8, 248u8, 148u8, 58u8, 253u8, 44u8, 228u8, 90u8,
                            67u8, 91u8, 212u8, 15u8, 3u8, 84u8, 139u8, 162u8, 108u8, 33u8, 16u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum time to live before a relayer account rotation."]
                pub fn minimum_ttl(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Mosaic",
                        "MinimumTTL",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The minimum period for which we lock outgoing/incoming funds."]
                pub fn minimum_time_lock_period(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Mosaic",
                        "MinimumTimeLockPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn timelock_period(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Mosaic",
                        "timelock_period",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod liquidations {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AddLiquidationStrategy {
                pub configuration:
                    runtime_types::pallet_liquidations::pallet::LiquidationStrategyConfiguration,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Sell {
                pub order: runtime_types::composable_traits::defi::Sell<
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                >,
                pub configuration: ::std::vec::Vec<::core::primitive::u32>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn add_liquidation_strategy(
                    &self,
                    configuration : runtime_types :: pallet_liquidations :: pallet :: LiquidationStrategyConfiguration,
                ) -> subxt::tx::StaticTxPayload<AddLiquidationStrategy> {
                    subxt::tx::StaticTxPayload::new(
                        "Liquidations",
                        "add_liquidation_strategy",
                        AddLiquidationStrategy { configuration },
                        [
                            3u8, 228u8, 8u8, 129u8, 12u8, 22u8, 187u8, 182u8, 106u8, 182u8, 116u8,
                            49u8, 22u8, 15u8, 192u8, 195u8, 120u8, 117u8, 35u8, 40u8, 129u8, 163u8,
                            2u8, 215u8, 46u8, 188u8, 139u8, 224u8, 155u8, 128u8, 218u8, 19u8,
                        ],
                    )
                }
                pub fn sell(
                    &self,
                    order: runtime_types::composable_traits::defi::Sell<
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    >,
                    configuration: ::std::vec::Vec<::core::primitive::u32>,
                ) -> subxt::tx::StaticTxPayload<Sell> {
                    subxt::tx::StaticTxPayload::new(
                        "Liquidations",
                        "sell",
                        Sell {
                            order,
                            configuration,
                        },
                        [
                            170u8, 143u8, 236u8, 232u8, 58u8, 37u8, 175u8, 52u8, 73u8, 232u8, 40u8,
                            167u8, 96u8, 174u8, 113u8, 68u8, 51u8, 102u8, 207u8, 90u8, 43u8, 161u8,
                            88u8, 35u8, 30u8, 151u8, 117u8, 185u8, 97u8, 167u8, 6u8, 103u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_liquidations::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct PositionWasSentToLiquidation;
            impl subxt::events::StaticEvent for PositionWasSentToLiquidation {
                const PALLET: &'static str = "Liquidations";
                const EVENT: &'static str = "PositionWasSentToLiquidation";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn strategies (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> subxt :: storage :: address :: StaticStorageAddress :: < subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_liquidations :: pallet :: LiquidationStrategyConfiguration > , subxt :: storage :: address :: Yes , () , subxt :: storage :: address :: Yes >{
                    subxt::storage::address::StaticStorageAddress::new(
                        "Liquidations",
                        "Strategies",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            161u8, 60u8, 18u8, 159u8, 23u8, 100u8, 125u8, 220u8, 179u8, 20u8,
                            159u8, 134u8, 48u8, 69u8, 82u8, 209u8, 251u8, 238u8, 125u8, 62u8,
                            173u8, 122u8, 44u8, 29u8, 148u8, 46u8, 41u8, 236u8, 137u8, 17u8, 19u8,
                            37u8,
                        ],
                    )
                }                pub fn strategies_root (& self ,) -> subxt :: storage :: address :: StaticStorageAddress :: < subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_liquidations :: pallet :: LiquidationStrategyConfiguration > , () , () , subxt :: storage :: address :: Yes >{
                    subxt::storage::address::StaticStorageAddress::new(
                        "Liquidations",
                        "Strategies",
                        Vec::new(),
                        [
                            161u8, 60u8, 18u8, 159u8, 23u8, 100u8, 125u8, 220u8, 179u8, 20u8,
                            159u8, 134u8, 48u8, 69u8, 82u8, 209u8, 251u8, 238u8, 125u8, 62u8,
                            173u8, 122u8, 44u8, 29u8, 148u8, 46u8, 41u8, 236u8, 137u8, 17u8, 19u8,
                            37u8,
                        ],
                    )
                }
                pub fn strategy_index(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Liquidations",
                        "StrategyIndex",
                        vec![],
                        [
                            89u8, 101u8, 246u8, 92u8, 182u8, 143u8, 108u8, 163u8, 14u8, 117u8,
                            170u8, 242u8, 99u8, 108u8, 222u8, 126u8, 78u8, 180u8, 167u8, 177u8,
                            190u8, 88u8, 56u8, 183u8, 39u8, 54u8, 136u8, 250u8, 14u8, 114u8, 203u8,
                            14u8,
                        ],
                    )
                }
                pub fn default_strategy_index(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Liquidations",
                        "DefaultStrategyIndex",
                        vec![],
                        [
                            160u8, 45u8, 68u8, 164u8, 1u8, 72u8, 128u8, 238u8, 252u8, 3u8, 233u8,
                            149u8, 129u8, 157u8, 171u8, 181u8, 227u8, 212u8, 177u8, 15u8, 19u8,
                            158u8, 39u8, 13u8, 2u8, 7u8, 179u8, 33u8, 125u8, 169u8, 81u8, 253u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn pallet_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::frame_support::PalletId>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Liquidations",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
                            174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
                            9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod lending {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct CreateMarket {
                pub input: runtime_types::composable_traits::lending::CreateInput<
                    ::core::primitive::u32,
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u32,
                >,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct UpdateMarket {
                pub market_id: runtime_types::pallet_lending::types::MarketId,
                pub input: runtime_types::composable_traits::lending::UpdateInput<
                    ::core::primitive::u32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct VaultDeposit {
                pub market_id: runtime_types::pallet_lending::types::MarketId,
                pub amount: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct VaultWithdraw {
                pub market_id: runtime_types::pallet_lending::types::MarketId,
                pub amount: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct DepositCollateral {
                pub market_id: runtime_types::pallet_lending::types::MarketId,
                pub amount: ::core::primitive::u128,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct WithdrawCollateral {
                pub market_id: runtime_types::pallet_lending::types::MarketId,
                pub amount: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Borrow {
                pub market_id: runtime_types::pallet_lending::types::MarketId,
                pub amount_to_borrow: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RepayBorrow {
                pub market_id: runtime_types::pallet_lending::types::MarketId,
                pub beneficiary: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: runtime_types::composable_traits::lending::RepayStrategy<
                    ::core::primitive::u128,
                >,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Liquidate {
                pub market_id: runtime_types::pallet_lending::types::MarketId,
                pub borrowers: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                    subxt::ext::sp_core::crypto::AccountId32,
                >,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Create a new lending market."]
                #[doc = "- `origin` : Sender of this extrinsic. Manager for new market to be created. Can pause"]
                #[doc = "  borrow operations."]
                #[doc = "- `input`   : Borrow & deposits of assets, percentages."]
                #[doc = ""]
                #[doc = "`origin` irreversibly pays `T::OracleMarketCreationStake`."]
                pub fn create_market(
                    &self,
                    input: runtime_types::composable_traits::lending::CreateInput<
                        ::core::primitive::u32,
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u32,
                    >,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<CreateMarket> {
                    subxt::tx::StaticTxPayload::new(
                        "Lending",
                        "create_market",
                        CreateMarket { input, keep_alive },
                        [
                            191u8, 107u8, 79u8, 144u8, 188u8, 36u8, 249u8, 243u8, 224u8, 223u8,
                            204u8, 240u8, 95u8, 63u8, 99u8, 111u8, 136u8, 95u8, 168u8, 112u8,
                            142u8, 248u8, 43u8, 15u8, 155u8, 40u8, 209u8, 7u8, 124u8, 6u8, 96u8,
                            23u8,
                        ],
                    )
                }
                #[doc = "owner must be very careful calling this"]
                pub fn update_market(
                    &self,
                    market_id: runtime_types::pallet_lending::types::MarketId,
                    input: runtime_types::composable_traits::lending::UpdateInput<
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    >,
                ) -> subxt::tx::StaticTxPayload<UpdateMarket> {
                    subxt::tx::StaticTxPayload::new(
                        "Lending",
                        "update_market",
                        UpdateMarket { market_id, input },
                        [
                            40u8, 250u8, 118u8, 196u8, 26u8, 72u8, 41u8, 180u8, 235u8, 147u8,
                            183u8, 253u8, 0u8, 94u8, 61u8, 62u8, 59u8, 50u8, 156u8, 233u8, 41u8,
                            46u8, 154u8, 244u8, 211u8, 45u8, 99u8, 17u8, 171u8, 221u8, 229u8,
                            124u8,
                        ],
                    )
                }
                #[doc = "lender deposits assets to market."]
                #[doc = "- `origin` : Sender of this extrinsic."]
                #[doc = "- `market_id` : Market index to which asset will be deposited."]
                #[doc = "- `amount` : Amount of asset to be deposited."]
                pub fn vault_deposit(
                    &self,
                    market_id: runtime_types::pallet_lending::types::MarketId,
                    amount: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<VaultDeposit> {
                    subxt::tx::StaticTxPayload::new(
                        "Lending",
                        "vault_deposit",
                        VaultDeposit { market_id, amount },
                        [
                            100u8, 210u8, 219u8, 106u8, 183u8, 84u8, 57u8, 92u8, 88u8, 192u8,
                            173u8, 239u8, 171u8, 156u8, 156u8, 122u8, 121u8, 64u8, 39u8, 204u8,
                            226u8, 210u8, 44u8, 159u8, 216u8, 51u8, 226u8, 27u8, 191u8, 217u8,
                            195u8, 63u8,
                        ],
                    )
                }
                #[doc = "lender withdraws assets to market."]
                #[doc = "- `origin` : Sender of this extrinsic."]
                #[doc = "- `market_id` : Market index to which asset will be withdrawn."]
                #[doc = "- `amount` : Amount of asset to be withdrawn."]
                pub fn vault_withdraw(
                    &self,
                    market_id: runtime_types::pallet_lending::types::MarketId,
                    amount: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<VaultWithdraw> {
                    subxt::tx::StaticTxPayload::new(
                        "Lending",
                        "vault_withdraw",
                        VaultWithdraw { market_id, amount },
                        [
                            129u8, 98u8, 237u8, 140u8, 6u8, 163u8, 9u8, 246u8, 167u8, 3u8, 115u8,
                            1u8, 167u8, 38u8, 5u8, 187u8, 245u8, 145u8, 191u8, 245u8, 53u8, 76u8,
                            235u8, 213u8, 58u8, 192u8, 250u8, 178u8, 9u8, 88u8, 218u8, 131u8,
                        ],
                    )
                }
                #[doc = "Deposit collateral to market."]
                #[doc = "- `origin` : Sender of this extrinsic."]
                #[doc = "- `market` : Market index to which collateral will be deposited."]
                #[doc = "- `amount` : Amount of collateral to be deposited."]
                pub fn deposit_collateral(
                    &self,
                    market_id: runtime_types::pallet_lending::types::MarketId,
                    amount: ::core::primitive::u128,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<DepositCollateral> {
                    subxt::tx::StaticTxPayload::new(
                        "Lending",
                        "deposit_collateral",
                        DepositCollateral {
                            market_id,
                            amount,
                            keep_alive,
                        },
                        [
                            52u8, 170u8, 161u8, 230u8, 143u8, 108u8, 188u8, 219u8, 107u8, 160u8,
                            40u8, 175u8, 131u8, 136u8, 116u8, 21u8, 94u8, 174u8, 86u8, 193u8, 51u8,
                            72u8, 93u8, 121u8, 129u8, 29u8, 255u8, 162u8, 198u8, 223u8, 250u8,
                            150u8,
                        ],
                    )
                }
                #[doc = "Withdraw collateral from market."]
                #[doc = "- `origin` : Sender of this extrinsic."]
                #[doc = "- `market_id` : Market index from which collateral will be withdraw."]
                #[doc = "- `amount` : Amount of collateral to be withdrawn."]
                pub fn withdraw_collateral(
                    &self,
                    market_id: runtime_types::pallet_lending::types::MarketId,
                    amount: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<WithdrawCollateral> {
                    subxt::tx::StaticTxPayload::new(
                        "Lending",
                        "withdraw_collateral",
                        WithdrawCollateral { market_id, amount },
                        [
                            122u8, 41u8, 119u8, 208u8, 57u8, 172u8, 222u8, 10u8, 84u8, 44u8, 243u8,
                            175u8, 33u8, 255u8, 213u8, 162u8, 179u8, 116u8, 1u8, 48u8, 223u8,
                            206u8, 175u8, 110u8, 179u8, 175u8, 94u8, 218u8, 62u8, 225u8, 179u8,
                            115u8,
                        ],
                    )
                }
                #[doc = "Borrow asset against deposited collateral."]
                #[doc = "- `origin` : Sender of this extrinsic. (Also the user who wants to borrow from market.)"]
                #[doc = "- `market_id` : Market index from which user wants to borrow."]
                #[doc = "- `amount_to_borrow` : Amount which user wants to borrow."]
                pub fn borrow(
                    &self,
                    market_id: runtime_types::pallet_lending::types::MarketId,
                    amount_to_borrow: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<Borrow> {
                    subxt::tx::StaticTxPayload::new(
                        "Lending",
                        "borrow",
                        Borrow {
                            market_id,
                            amount_to_borrow,
                        },
                        [
                            45u8, 112u8, 29u8, 189u8, 199u8, 115u8, 147u8, 101u8, 35u8, 19u8,
                            226u8, 84u8, 40u8, 123u8, 223u8, 180u8, 253u8, 145u8, 43u8, 164u8,
                            44u8, 80u8, 27u8, 67u8, 229u8, 34u8, 96u8, 154u8, 69u8, 147u8, 185u8,
                            197u8,
                        ],
                    )
                }
                #[doc = "Repay part or all of the borrow in the given market."]
                #[doc = ""]
                #[doc = "# Parameters"]
                #[doc = ""]
                #[doc = "- `origin` : Sender of this extrinsic. (Also the user who repays beneficiary's borrow.)"]
                #[doc = "- `market_id` : [`MarketId`] of the market being repaid."]
                #[doc = "- `beneficiary` : [`AccountId`] of the account who is in debt to (has borrowed assets"]
                #[doc = "  from) the market. This can be same or different from the `origin`, allowing one"]
                #[doc = "  account to pay off another's debts."]
                #[doc = "- `amount`: The amount to repay. See [`RepayStrategy`] for more information."]
                pub fn repay_borrow(
                    &self,
                    market_id: runtime_types::pallet_lending::types::MarketId,
                    beneficiary: subxt::ext::sp_core::crypto::AccountId32,
                    amount: runtime_types::composable_traits::lending::RepayStrategy<
                        ::core::primitive::u128,
                    >,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<RepayBorrow> {
                    subxt::tx::StaticTxPayload::new(
                        "Lending",
                        "repay_borrow",
                        RepayBorrow {
                            market_id,
                            beneficiary,
                            amount,
                            keep_alive,
                        },
                        [
                            233u8, 182u8, 143u8, 38u8, 234u8, 77u8, 224u8, 203u8, 168u8, 125u8,
                            32u8, 131u8, 252u8, 185u8, 152u8, 98u8, 204u8, 36u8, 51u8, 150u8,
                            104u8, 0u8, 161u8, 248u8, 15u8, 113u8, 17u8, 26u8, 175u8, 173u8, 39u8,
                            247u8,
                        ],
                    )
                }
                #[doc = "Check if borrows for the `borrowers` accounts are required to be liquidated, initiate"]
                #[doc = "liquidation."]
                #[doc = "- `origin` : Sender of this extrinsic."]
                #[doc = "- `market_id` : Market index from which `borrower` has taken borrow."]
                #[doc = "- `borrowers` : Vector of borrowers accounts' ids."]
                pub fn liquidate(
                    &self,
                    market_id: runtime_types::pallet_lending::types::MarketId,
                    borrowers: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        subxt::ext::sp_core::crypto::AccountId32,
                    >,
                ) -> subxt::tx::StaticTxPayload<Liquidate> {
                    subxt::tx::StaticTxPayload::new(
                        "Lending",
                        "liquidate",
                        Liquidate {
                            market_id,
                            borrowers,
                        },
                        [
                            55u8, 214u8, 118u8, 70u8, 156u8, 44u8, 25u8, 125u8, 144u8, 93u8, 191u8,
                            212u8, 60u8, 76u8, 78u8, 118u8, 187u8, 76u8, 33u8, 26u8, 159u8, 207u8,
                            137u8, 176u8, 238u8, 173u8, 116u8, 118u8, 94u8, 28u8, 100u8, 0u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_lending::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Event emitted when new lending market is created."]
            pub struct MarketCreated {
                pub market_id: runtime_types::pallet_lending::types::MarketId,
                pub vault_id: ::core::primitive::u64,
                pub manager: subxt::ext::sp_core::crypto::AccountId32,
                pub currency_pair: runtime_types::composable_traits::defi::CurrencyPair<
                    runtime_types::primitives::currency::CurrencyId,
                >,
            }
            impl subxt::events::StaticEvent for MarketCreated {
                const PALLET: &'static str = "Lending";
                const EVENT: &'static str = "MarketCreated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct MarketUpdated {
                pub market_id: runtime_types::pallet_lending::types::MarketId,
                pub input: runtime_types::composable_traits::lending::UpdateInput<
                    ::core::primitive::u32,
                    ::core::primitive::u32,
                >,
            }
            impl subxt::events::StaticEvent for MarketUpdated {
                const PALLET: &'static str = "Lending";
                const EVENT: &'static str = "MarketUpdated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Event emitted when asset is deposited by lender."]
            pub struct AssetDeposited {
                pub sender: subxt::ext::sp_core::crypto::AccountId32,
                pub market_id: runtime_types::pallet_lending::types::MarketId,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for AssetDeposited {
                const PALLET: &'static str = "Lending";
                const EVENT: &'static str = "AssetDeposited";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Event emitted when asset is withdrawn by lender."]
            pub struct AssetWithdrawn {
                pub sender: subxt::ext::sp_core::crypto::AccountId32,
                pub market_id: runtime_types::pallet_lending::types::MarketId,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for AssetWithdrawn {
                const PALLET: &'static str = "Lending";
                const EVENT: &'static str = "AssetWithdrawn";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Event emitted when collateral is deposited."]
            pub struct CollateralDeposited {
                pub sender: subxt::ext::sp_core::crypto::AccountId32,
                pub market_id: runtime_types::pallet_lending::types::MarketId,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for CollateralDeposited {
                const PALLET: &'static str = "Lending";
                const EVENT: &'static str = "CollateralDeposited";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Event emitted when collateral is withdrawn."]
            pub struct CollateralWithdrawn {
                pub sender: subxt::ext::sp_core::crypto::AccountId32,
                pub market_id: runtime_types::pallet_lending::types::MarketId,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for CollateralWithdrawn {
                const PALLET: &'static str = "Lending";
                const EVENT: &'static str = "CollateralWithdrawn";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Event emitted when user borrows from given market."]
            pub struct Borrowed {
                pub sender: subxt::ext::sp_core::crypto::AccountId32,
                pub market_id: runtime_types::pallet_lending::types::MarketId,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for Borrowed {
                const PALLET: &'static str = "Lending";
                const EVENT: &'static str = "Borrowed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Event emitted when user repays borrow of beneficiary in given market."]
            pub struct BorrowRepaid {
                pub sender: subxt::ext::sp_core::crypto::AccountId32,
                pub market_id: runtime_types::pallet_lending::types::MarketId,
                pub beneficiary: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for BorrowRepaid {
                const PALLET: &'static str = "Lending";
                const EVENT: &'static str = "BorrowRepaid";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Event emitted when a liquidation is initiated for a loan."]
            pub struct LiquidationInitiated {
                pub market_id: runtime_types::pallet_lending::types::MarketId,
                pub borrowers: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
            }
            impl subxt::events::StaticEvent for LiquidationInitiated {
                const PALLET: &'static str = "Lending";
                const EVENT: &'static str = "LiquidationInitiated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Event emitted to warn that loan may go under collateralize soon."]
            pub struct MayGoUnderCollateralizedSoon {
                pub market_id: runtime_types::pallet_lending::types::MarketId,
                pub account: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for MayGoUnderCollateralizedSoon {
                const PALLET: &'static str = "Lending";
                const EVENT: &'static str = "MayGoUnderCollateralizedSoon";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Lending instances counter"]
                pub fn lending_count(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_lending::types::MarketId,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Lending",
                        "LendingCount",
                        vec![],
                        [
                            208u8, 29u8, 255u8, 226u8, 184u8, 23u8, 230u8, 181u8, 195u8, 84u8,
                            190u8, 223u8, 40u8, 26u8, 246u8, 89u8, 91u8, 40u8, 105u8, 43u8, 26u8,
                            48u8, 223u8, 220u8, 30u8, 112u8, 14u8, 246u8, 121u8, 80u8, 162u8,
                            246u8,
                        ],
                    )
                }
                #[doc = " Indexed lending instances. Maps markets to their respective [`MarketConfig`]."]
                #[doc = ""]
                #[doc = " ```text"]
                #[doc = " MarketId -> MarketConfig"]
                #[doc = " ```"]
                pub fn markets(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::pallet_lending::types::MarketId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::lending::MarketConfig<
                            ::core::primitive::u64,
                            runtime_types::primitives::currency::CurrencyId,
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Lending",
                        "Markets",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            141u8, 70u8, 200u8, 115u8, 144u8, 135u8, 108u8, 234u8, 6u8, 59u8, 36u8,
                            116u8, 133u8, 162u8, 23u8, 29u8, 161u8, 208u8, 85u8, 67u8, 208u8, 32u8,
                            169u8, 219u8, 190u8, 102u8, 167u8, 111u8, 201u8, 97u8, 157u8, 113u8,
                        ],
                    )
                }
                #[doc = " Indexed lending instances. Maps markets to their respective [`MarketConfig`]."]
                #[doc = ""]
                #[doc = " ```text"]
                #[doc = " MarketId -> MarketConfig"]
                #[doc = " ```"]
                pub fn markets_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::lending::MarketConfig<
                            ::core::primitive::u64,
                            runtime_types::primitives::currency::CurrencyId,
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Lending",
                        "Markets",
                        Vec::new(),
                        [
                            141u8, 70u8, 200u8, 115u8, 144u8, 135u8, 108u8, 234u8, 6u8, 59u8, 36u8,
                            116u8, 133u8, 162u8, 23u8, 29u8, 161u8, 208u8, 85u8, 67u8, 208u8, 32u8,
                            169u8, 219u8, 190u8, 102u8, 167u8, 111u8, 201u8, 97u8, 157u8, 113u8,
                        ],
                    )
                }
                #[doc = " Maps markets to their corresponding debt token."]
                #[doc = ""]
                #[doc = " ```text"]
                #[doc = " MarketId -> debt asset"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " See [this clickup task](task) for a more in-depth explanation."]
                #[doc = ""]
                #[doc = " [task]: <https://sharing.clickup.com/20465559/t/h/27y9y84/15U30TKC3THPZYT>"]
                pub fn debt_token_for_market(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::pallet_lending::types::MarketId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Lending",
                        "DebtTokenForMarket",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            210u8, 8u8, 124u8, 119u8, 70u8, 62u8, 228u8, 196u8, 47u8, 184u8, 87u8,
                            166u8, 120u8, 126u8, 107u8, 224u8, 131u8, 75u8, 89u8, 122u8, 226u8,
                            53u8, 113u8, 239u8, 249u8, 229u8, 28u8, 59u8, 58u8, 180u8, 168u8,
                            166u8,
                        ],
                    )
                }
                #[doc = " Maps markets to their corresponding debt token."]
                #[doc = ""]
                #[doc = " ```text"]
                #[doc = " MarketId -> debt asset"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " See [this clickup task](task) for a more in-depth explanation."]
                #[doc = ""]
                #[doc = " [task]: <https://sharing.clickup.com/20465559/t/h/27y9y84/15U30TKC3THPZYT>"]
                pub fn debt_token_for_market_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Lending",
                        "DebtTokenForMarket",
                        Vec::new(),
                        [
                            210u8, 8u8, 124u8, 119u8, 70u8, 62u8, 228u8, 196u8, 47u8, 184u8, 87u8,
                            166u8, 120u8, 126u8, 107u8, 224u8, 131u8, 75u8, 89u8, 122u8, 226u8,
                            53u8, 113u8, 239u8, 249u8, 229u8, 28u8, 59u8, 58u8, 180u8, 168u8,
                            166u8,
                        ],
                    )
                }
                #[doc = " at which lending index account did borrowed."]
                #[doc = " if first borrow: market index when the borrow occurred"]
                #[doc = " if additional borrow: market index adjusted wrt the previous index"]
                pub fn debt_index(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::pallet_lending::types::MarketId>,
                    _1: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Lending",
                        "DebtIndex",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Twox64Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Twox64Concat,
                            ),
                        ],
                        [
                            120u8, 116u8, 25u8, 165u8, 242u8, 170u8, 21u8, 179u8, 246u8, 130u8,
                            251u8, 85u8, 157u8, 223u8, 125u8, 44u8, 137u8, 44u8, 198u8, 102u8,
                            12u8, 16u8, 29u8, 228u8, 202u8, 43u8, 168u8, 249u8, 200u8, 247u8,
                            154u8, 47u8,
                        ],
                    )
                }
                #[doc = " at which lending index account did borrowed."]
                #[doc = " if first borrow: market index when the borrow occurred"]
                #[doc = " if additional borrow: market index adjusted wrt the previous index"]
                pub fn debt_index_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Lending",
                        "DebtIndex",
                        Vec::new(),
                        [
                            120u8, 116u8, 25u8, 165u8, 242u8, 170u8, 21u8, 179u8, 246u8, 130u8,
                            251u8, 85u8, 157u8, 223u8, 125u8, 44u8, 137u8, 44u8, 198u8, 102u8,
                            12u8, 16u8, 29u8, 228u8, 202u8, 43u8, 168u8, 249u8, 200u8, 247u8,
                            154u8, 47u8,
                        ],
                    )
                }
                #[doc = " Latest timestamp at which account borrowed from market."]
                #[doc = ""]
                #[doc = " (Market, Account) -> Timestamp"]
                pub fn borrow_timestamp(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::pallet_lending::types::MarketId>,
                    _1: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Lending",
                        "BorrowTimestamp",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Twox64Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Twox64Concat,
                            ),
                        ],
                        [
                            48u8, 68u8, 240u8, 28u8, 5u8, 231u8, 227u8, 162u8, 145u8, 8u8, 41u8,
                            16u8, 184u8, 206u8, 228u8, 41u8, 0u8, 191u8, 12u8, 85u8, 150u8, 204u8,
                            68u8, 152u8, 146u8, 170u8, 140u8, 238u8, 120u8, 15u8, 231u8, 21u8,
                        ],
                    )
                }
                #[doc = " Latest timestamp at which account borrowed from market."]
                #[doc = ""]
                #[doc = " (Market, Account) -> Timestamp"]
                pub fn borrow_timestamp_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Lending",
                        "BorrowTimestamp",
                        Vec::new(),
                        [
                            48u8, 68u8, 240u8, 28u8, 5u8, 231u8, 227u8, 162u8, 145u8, 8u8, 41u8,
                            16u8, 184u8, 206u8, 228u8, 41u8, 0u8, 191u8, 12u8, 85u8, 150u8, 204u8,
                            68u8, 152u8, 146u8, 170u8, 140u8, 238u8, 120u8, 15u8, 231u8, 21u8,
                        ],
                    )
                }
                pub fn borrow_rent(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::pallet_lending::types::MarketId>,
                    _1: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Lending",
                        "BorrowRent",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Twox64Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Twox64Concat,
                            ),
                        ],
                        [
                            253u8, 166u8, 200u8, 207u8, 3u8, 48u8, 187u8, 73u8, 247u8, 98u8, 224u8,
                            107u8, 121u8, 117u8, 121u8, 243u8, 154u8, 45u8, 180u8, 87u8, 175u8,
                            219u8, 43u8, 162u8, 33u8, 92u8, 239u8, 31u8, 253u8, 243u8, 103u8, 91u8,
                        ],
                    )
                }
                pub fn borrow_rent_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Lending",
                        "BorrowRent",
                        Vec::new(),
                        [
                            253u8, 166u8, 200u8, 207u8, 3u8, 48u8, 187u8, 73u8, 247u8, 98u8, 224u8,
                            107u8, 121u8, 117u8, 121u8, 243u8, 154u8, 45u8, 180u8, 87u8, 175u8,
                            219u8, 43u8, 162u8, 33u8, 92u8, 239u8, 31u8, 253u8, 243u8, 103u8, 91u8,
                        ],
                    )
                }
                #[doc = " market borrow index"]
                pub fn borrow_index(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::pallet_lending::types::MarketId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Lending",
                        "BorrowIndex",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            253u8, 31u8, 81u8, 240u8, 51u8, 231u8, 60u8, 52u8, 204u8, 162u8, 182u8,
                            38u8, 43u8, 244u8, 221u8, 131u8, 53u8, 105u8, 41u8, 137u8, 167u8,
                            241u8, 110u8, 223u8, 47u8, 32u8, 74u8, 250u8, 26u8, 196u8, 113u8,
                            151u8,
                        ],
                    )
                }
                #[doc = " market borrow index"]
                pub fn borrow_index_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Lending",
                        "BorrowIndex",
                        Vec::new(),
                        [
                            253u8, 31u8, 81u8, 240u8, 51u8, 231u8, 60u8, 52u8, 204u8, 162u8, 182u8,
                            38u8, 43u8, 244u8, 221u8, 131u8, 53u8, 105u8, 41u8, 137u8, 167u8,
                            241u8, 110u8, 223u8, 47u8, 32u8, 74u8, 250u8, 26u8, 196u8, 113u8,
                            151u8,
                        ],
                    )
                }
                #[doc = " (Market, Account) -> Collateral"]
                pub fn account_collateral(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::pallet_lending::types::MarketId>,
                    _1: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Lending",
                        "AccountCollateral",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            171u8, 245u8, 237u8, 153u8, 206u8, 0u8, 36u8, 213u8, 29u8, 164u8, 44u8,
                            17u8, 160u8, 49u8, 138u8, 140u8, 96u8, 87u8, 20u8, 88u8, 223u8, 141u8,
                            152u8, 63u8, 223u8, 252u8, 135u8, 185u8, 137u8, 105u8, 100u8, 37u8,
                        ],
                    )
                }
                #[doc = " (Market, Account) -> Collateral"]
                pub fn account_collateral_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Lending",
                        "AccountCollateral",
                        Vec::new(),
                        [
                            171u8, 245u8, 237u8, 153u8, 206u8, 0u8, 36u8, 213u8, 29u8, 164u8, 44u8,
                            17u8, 160u8, 49u8, 138u8, 140u8, 96u8, 87u8, 20u8, 88u8, 223u8, 141u8,
                            152u8, 63u8, 223u8, 252u8, 135u8, 185u8, 137u8, 105u8, 100u8, 37u8,
                        ],
                    )
                }
                #[doc = " The timestamp of the previous block or defaults to timestamp at genesis."]
                pub fn last_block_timestamp(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Lending",
                        "LastBlockTimestamp",
                        vec![],
                        [
                            25u8, 108u8, 61u8, 130u8, 214u8, 163u8, 64u8, 8u8, 149u8, 127u8, 214u8,
                            235u8, 193u8, 180u8, 221u8, 127u8, 0u8, 35u8, 122u8, 215u8, 102u8,
                            155u8, 73u8, 110u8, 7u8, 254u8, 230u8, 181u8, 210u8, 233u8, 174u8,
                            250u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Minimal price of borrow asset in Oracle price required to create."]
                #[doc = " Examples, 100 USDC."]
                #[doc = " Creators puts that amount and it is staked under Vault account."]
                #[doc = " So he does not owns it anymore."]
                #[doc = " So borrow is both stake and tool to create market."]
                #[doc = ""]
                #[doc = " # Why not pure borrow amount minimum?"]
                #[doc = ""]
                #[doc = " Borrow may have very small price. Will imbalance some markets on creation."]
                #[doc = ""]
                #[doc = " # Why not native parachain token?"]
                #[doc = ""]
                #[doc = " Possible option. But I doubt closing market as easy as transferring back rent.  So it is"]
                #[doc = " not exactly platform rent only."]
                #[doc = ""]
                #[doc = " # Why borrow amount priced by Oracle?"]
                #[doc = ""]
                #[doc = " We depend on Oracle to price in Lending. So we know price anyway."]
                #[doc = " We normalized price over all markets and protect from spam all possible pairs equally."]
                #[doc = " Locking borrow amount ensures manager can create market with borrow assets, and we force"]
                #[doc = " him to really create it."]
                #[doc = ""]
                #[doc = " This solution forces to have amount before creating market."]
                #[doc = " Vault can take that amount if reconfigured so, but that may be changed during runtime"]
                #[doc = " upgrades."]
                pub fn oracle_market_creation_stake(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Lending",
                        "OracleMarketCreationStake",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn pallet_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::frame_support::PalletId>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Lending",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
                            174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
                            9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod pablo {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Create {
                pub pool: runtime_types::pallet_pablo::pallet::PoolInitConfiguration<
                    subxt::ext::sp_core::crypto::AccountId32,
                    runtime_types::primitives::currency::CurrencyId,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Buy {
                pub pool_id: ::core::primitive::u128,
                pub in_asset_id: runtime_types::primitives::currency::CurrencyId,
                pub out_asset: runtime_types::composable_traits::dex::AssetAmount<
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                >,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Swap {
                pub pool_id: ::core::primitive::u128,
                pub in_asset: runtime_types::composable_traits::dex::AssetAmount<
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                >,
                pub min_receive: runtime_types::composable_traits::dex::AssetAmount<
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                >,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AddLiquidity {
                pub pool_id: ::core::primitive::u128,
                pub assets: subxt::utils::KeyedVec<
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                >,
                pub min_mint_amount: ::core::primitive::u128,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RemoveLiquidity {
                pub pool_id: ::core::primitive::u128,
                pub lp_amount: ::core::primitive::u128,
                pub min_receive: subxt::utils::KeyedVec<
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                >,
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct EnableTwap {
                pub pool_id: ::core::primitive::u128,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Create a new pool. Note that this extrinsic does NOT validate if a pool with the same"]
                #[doc = "assets already exists in the runtime."]
                #[doc = ""]
                #[doc = "Emits `PoolCreated` event when successful."]
                pub fn create(
                    &self,
                    pool: runtime_types::pallet_pablo::pallet::PoolInitConfiguration<
                        subxt::ext::sp_core::crypto::AccountId32,
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                ) -> subxt::tx::StaticTxPayload<Create> {
                    subxt::tx::StaticTxPayload::new(
                        "Pablo",
                        "create",
                        Create { pool },
                        [
                            132u8, 186u8, 25u8, 197u8, 131u8, 145u8, 154u8, 240u8, 180u8, 2u8,
                            71u8, 124u8, 205u8, 64u8, 134u8, 224u8, 175u8, 183u8, 72u8, 169u8,
                            151u8, 183u8, 211u8, 51u8, 14u8, 224u8, 174u8, 130u8, 64u8, 209u8,
                            147u8, 203u8,
                        ],
                    )
                }
                #[doc = "Execute a buy order on pool."]
                #[doc = ""]
                #[doc = "Emits `Swapped` event when successful."]
                pub fn buy(
                    &self,
                    pool_id: ::core::primitive::u128,
                    in_asset_id: runtime_types::primitives::currency::CurrencyId,
                    out_asset: runtime_types::composable_traits::dex::AssetAmount<
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    >,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<Buy> {
                    subxt::tx::StaticTxPayload::new(
                        "Pablo",
                        "buy",
                        Buy {
                            pool_id,
                            in_asset_id,
                            out_asset,
                            keep_alive,
                        },
                        [
                            220u8, 138u8, 95u8, 231u8, 31u8, 215u8, 231u8, 237u8, 82u8, 20u8, 45u8,
                            144u8, 123u8, 51u8, 6u8, 142u8, 179u8, 145u8, 139u8, 63u8, 90u8, 158u8,
                            34u8, 162u8, 93u8, 207u8, 33u8, 112u8, 33u8, 111u8, 116u8, 138u8,
                        ],
                    )
                }
                #[doc = "Execute a specific swap operation."]
                #[doc = ""]
                #[doc = "The `quote_amount` is always the quote asset amount (A/B => B), (B/A => A)."]
                #[doc = ""]
                #[doc = "Emits `Swapped` event when successful."]
                pub fn swap(
                    &self,
                    pool_id: ::core::primitive::u128,
                    in_asset: runtime_types::composable_traits::dex::AssetAmount<
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    >,
                    min_receive: runtime_types::composable_traits::dex::AssetAmount<
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    >,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<Swap> {
                    subxt::tx::StaticTxPayload::new(
                        "Pablo",
                        "swap",
                        Swap {
                            pool_id,
                            in_asset,
                            min_receive,
                            keep_alive,
                        },
                        [
                            176u8, 171u8, 117u8, 43u8, 190u8, 44u8, 123u8, 153u8, 242u8, 178u8,
                            250u8, 91u8, 228u8, 43u8, 244u8, 31u8, 110u8, 238u8, 184u8, 176u8,
                            131u8, 85u8, 122u8, 187u8, 185u8, 133u8, 224u8, 145u8, 144u8, 168u8,
                            33u8, 92u8,
                        ],
                    )
                }
                #[doc = "Add liquidity to the given pool."]
                #[doc = ""]
                #[doc = "Emits `LiquidityAdded` event when successful."]
                pub fn add_liquidity(
                    &self,
                    pool_id: ::core::primitive::u128,
                    assets: subxt::utils::KeyedVec<
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    >,
                    min_mint_amount: ::core::primitive::u128,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<AddLiquidity> {
                    subxt::tx::StaticTxPayload::new(
                        "Pablo",
                        "add_liquidity",
                        AddLiquidity {
                            pool_id,
                            assets,
                            min_mint_amount,
                            keep_alive,
                        },
                        [
                            114u8, 118u8, 57u8, 125u8, 3u8, 16u8, 70u8, 22u8, 49u8, 121u8, 204u8,
                            113u8, 190u8, 23u8, 119u8, 246u8, 175u8, 85u8, 46u8, 57u8, 199u8,
                            102u8, 97u8, 243u8, 64u8, 107u8, 119u8, 90u8, 153u8, 107u8, 108u8,
                            144u8,
                        ],
                    )
                }
                #[doc = "Remove liquidity from the given pool."]
                #[doc = ""]
                #[doc = "Emits `LiquidityRemoved` event when successful."]
                pub fn remove_liquidity(
                    &self,
                    pool_id: ::core::primitive::u128,
                    lp_amount: ::core::primitive::u128,
                    min_receive: subxt::utils::KeyedVec<
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    >,
                ) -> subxt::tx::StaticTxPayload<RemoveLiquidity> {
                    subxt::tx::StaticTxPayload::new(
                        "Pablo",
                        "remove_liquidity",
                        RemoveLiquidity {
                            pool_id,
                            lp_amount,
                            min_receive,
                        },
                        [
                            28u8, 104u8, 66u8, 116u8, 61u8, 217u8, 133u8, 38u8, 251u8, 17u8, 254u8,
                            15u8, 184u8, 84u8, 138u8, 212u8, 93u8, 134u8, 108u8, 209u8, 229u8,
                            166u8, 168u8, 13u8, 210u8, 244u8, 192u8, 111u8, 252u8, 193u8, 102u8,
                            116u8,
                        ],
                    )
                }
                pub fn enable_twap(
                    &self,
                    pool_id: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<EnableTwap> {
                    subxt::tx::StaticTxPayload::new(
                        "Pablo",
                        "enable_twap",
                        EnableTwap { pool_id },
                        [
                            254u8, 57u8, 124u8, 157u8, 114u8, 230u8, 39u8, 4u8, 235u8, 136u8,
                            255u8, 75u8, 160u8, 185u8, 126u8, 130u8, 71u8, 217u8, 69u8, 179u8,
                            34u8, 35u8, 127u8, 245u8, 126u8, 108u8, 145u8, 40u8, 225u8, 37u8, 4u8,
                            124u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_pablo::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Pool with specified id `T::PoolId` was created successfully by `T::AccountId`."]
            pub struct PoolCreated {
                pub pool_id: ::core::primitive::u128,
                pub owner: subxt::ext::sp_core::crypto::AccountId32,
                pub asset_weights: subxt::utils::KeyedVec<
                    runtime_types::primitives::currency::CurrencyId,
                    runtime_types::sp_arithmetic::per_things::Permill,
                >,
            }
            impl subxt::events::StaticEvent for PoolCreated {
                const PALLET: &'static str = "Pablo";
                const EVENT: &'static str = "PoolCreated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Liquidity added into the pool `T::PoolId`."]
            pub struct LiquidityAdded {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub pool_id: ::core::primitive::u128,
                pub asset_amounts: subxt::utils::KeyedVec<
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                >,
                pub minted_lp: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for LiquidityAdded {
                const PALLET: &'static str = "Pablo";
                const EVENT: &'static str = "LiquidityAdded";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Liquidity removed from pool `T::PoolId` by `T::AccountId` in balanced way."]
            pub struct LiquidityRemoved {
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub pool_id: ::core::primitive::u128,
                pub asset_amounts: subxt::utils::KeyedVec<
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                >,
            }
            impl subxt::events::StaticEvent for LiquidityRemoved {
                const PALLET: &'static str = "Pablo";
                const EVENT: &'static str = "LiquidityRemoved";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Token exchange happened."]
            pub struct Swapped {
                pub pool_id: ::core::primitive::u128,
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub base_asset: runtime_types::primitives::currency::CurrencyId,
                pub quote_asset: runtime_types::primitives::currency::CurrencyId,
                pub base_amount: ::core::primitive::u128,
                pub quote_amount: ::core::primitive::u128,
                pub fee: runtime_types::composable_traits::dex::Fee<
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                >,
            }
            impl subxt::events::StaticEvent for Swapped {
                const PALLET: &'static str = "Pablo";
                const EVENT: &'static str = "Swapped";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "TWAP updated."]
            pub struct TwapUpdated {
                pub pool_id: ::core::primitive::u128,
                pub timestamp: ::core::primitive::u64,
                pub twaps: subxt::utils::KeyedVec<
                    runtime_types::primitives::currency::CurrencyId,
                    runtime_types::sp_arithmetic::fixed_point::FixedU128,
                >,
            }
            impl subxt::events::StaticEvent for TwapUpdated {
                const PALLET: &'static str = "Pablo";
                const EVENT: &'static str = "TwapUpdated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn pool_count(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Pablo",
                        "PoolCount",
                        vec![],
                        [
                            176u8, 166u8, 120u8, 250u8, 28u8, 181u8, 8u8, 119u8, 201u8, 200u8,
                            183u8, 13u8, 123u8, 148u8, 35u8, 223u8, 184u8, 61u8, 14u8, 78u8, 178u8,
                            39u8, 72u8, 93u8, 47u8, 179u8, 245u8, 208u8, 39u8, 94u8, 84u8, 70u8,
                        ],
                    )
                }
                pub fn pools(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u128>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_pablo::pallet::PoolConfiguration<
                            subxt::ext::sp_core::crypto::AccountId32,
                            runtime_types::primitives::currency::CurrencyId,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Pablo",
                        "Pools",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            205u8, 217u8, 250u8, 113u8, 200u8, 118u8, 24u8, 52u8, 149u8, 42u8,
                            116u8, 242u8, 166u8, 248u8, 237u8, 232u8, 144u8, 140u8, 38u8, 178u8,
                            129u8, 139u8, 194u8, 128u8, 81u8, 208u8, 51u8, 161u8, 186u8, 142u8,
                            127u8, 200u8,
                        ],
                    )
                }
                pub fn pools_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_pablo::pallet::PoolConfiguration<
                            subxt::ext::sp_core::crypto::AccountId32,
                            runtime_types::primitives::currency::CurrencyId,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Pablo",
                        "Pools",
                        Vec::new(),
                        [
                            205u8, 217u8, 250u8, 113u8, 200u8, 118u8, 24u8, 52u8, 149u8, 42u8,
                            116u8, 242u8, 166u8, 248u8, 237u8, 232u8, 144u8, 140u8, 38u8, 178u8,
                            129u8, 139u8, 194u8, 128u8, 81u8, 208u8, 51u8, 161u8, 186u8, 142u8,
                            127u8, 200u8,
                        ],
                    )
                }
                pub fn twap_state(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u128>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_pablo::types::TimeWeightedAveragePrice<
                            ::core::primitive::u64,
                            ::core::primitive::u128,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Pablo",
                        "TWAPState",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            32u8, 9u8, 20u8, 86u8, 118u8, 29u8, 155u8, 146u8, 126u8, 246u8, 178u8,
                            134u8, 15u8, 252u8, 194u8, 228u8, 199u8, 234u8, 238u8, 158u8, 191u8,
                            21u8, 191u8, 161u8, 77u8, 56u8, 185u8, 100u8, 56u8, 93u8, 227u8, 56u8,
                        ],
                    )
                }
                pub fn twap_state_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_pablo::types::TimeWeightedAveragePrice<
                            ::core::primitive::u64,
                            ::core::primitive::u128,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Pablo",
                        "TWAPState",
                        Vec::new(),
                        [
                            32u8, 9u8, 20u8, 86u8, 118u8, 29u8, 155u8, 146u8, 126u8, 246u8, 178u8,
                            134u8, 15u8, 252u8, 194u8, 228u8, 199u8, 234u8, 238u8, 158u8, 191u8,
                            21u8, 191u8, 161u8, 77u8, 56u8, 185u8, 100u8, 56u8, 93u8, 227u8, 56u8,
                        ],
                    )
                }
                pub fn price_cumulative_state(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u128>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_pablo::types::PriceCumulative<
                            ::core::primitive::u64,
                            ::core::primitive::u128,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Pablo",
                        "PriceCumulativeState",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            239u8, 80u8, 18u8, 167u8, 198u8, 218u8, 171u8, 130u8, 23u8, 217u8,
                            64u8, 255u8, 14u8, 166u8, 142u8, 235u8, 198u8, 27u8, 200u8, 203u8,
                            255u8, 95u8, 190u8, 114u8, 247u8, 230u8, 191u8, 7u8, 196u8, 52u8, 85u8,
                            8u8,
                        ],
                    )
                }
                pub fn price_cumulative_state_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_pablo::types::PriceCumulative<
                            ::core::primitive::u64,
                            ::core::primitive::u128,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Pablo",
                        "PriceCumulativeState",
                        Vec::new(),
                        [
                            239u8, 80u8, 18u8, 167u8, 198u8, 218u8, 171u8, 130u8, 23u8, 217u8,
                            64u8, 255u8, 14u8, 166u8, 142u8, 235u8, 198u8, 27u8, 200u8, 203u8,
                            255u8, 95u8, 190u8, 114u8, 247u8, 230u8, 191u8, 7u8, 196u8, 52u8, 85u8,
                            8u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn pallet_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::frame_support::PalletId>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Pablo",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
                            174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
                            9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
                        ],
                    )
                }
                #[doc = " The interval between TWAP computations."]
                pub fn twap_interval(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Pablo",
                        "TWAPInterval",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod dex_router {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct UpdateRoute {
                pub asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
                    runtime_types::primitives::currency::CurrencyId,
                >,
                pub route: ::core::option::Option<
                    runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        ::core::primitive::u128,
                    >,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Swap {
                pub in_asset: runtime_types::composable_traits::dex::AssetAmount<
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                >,
                pub min_receive: runtime_types::composable_traits::dex::AssetAmount<
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Buy {
                pub in_asset_id: runtime_types::primitives::currency::CurrencyId,
                pub out_asset: runtime_types::composable_traits::dex::AssetAmount<
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AddLiquidity {
                pub assets: subxt::utils::KeyedVec<
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                >,
                pub min_mint_amount: ::core::primitive::u128,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RemoveLiquidity {
                pub lp_amount: ::core::primitive::u128,
                pub min_receive: subxt::utils::KeyedVec<
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                >,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Create, update or remove route."]
                #[doc = "On successful emits one of `RouteAdded`, `RouteUpdated` or `RouteDeleted`."]
                pub fn update_route(
                    &self,
                    asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                    route: ::core::option::Option<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            ::core::primitive::u128,
                        >,
                    >,
                ) -> subxt::tx::StaticTxPayload<UpdateRoute> {
                    subxt::tx::StaticTxPayload::new(
                        "DexRouter",
                        "update_route",
                        UpdateRoute { asset_pair, route },
                        [
                            237u8, 155u8, 150u8, 199u8, 45u8, 50u8, 13u8, 194u8, 39u8, 81u8, 243u8,
                            125u8, 1u8, 149u8, 208u8, 5u8, 18u8, 53u8, 82u8, 100u8, 151u8, 229u8,
                            157u8, 159u8, 244u8, 148u8, 57u8, 90u8, 223u8, 200u8, 97u8, 20u8,
                        ],
                    )
                }
                #[doc = "Exchange `amount` of quote asset for `asset_pair` via route found in router."]
                #[doc = "On successful underlying DEX pallets will emit appropriate event"]
                pub fn swap(
                    &self,
                    in_asset: runtime_types::composable_traits::dex::AssetAmount<
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    >,
                    min_receive: runtime_types::composable_traits::dex::AssetAmount<
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    >,
                ) -> subxt::tx::StaticTxPayload<Swap> {
                    subxt::tx::StaticTxPayload::new(
                        "DexRouter",
                        "swap",
                        Swap {
                            in_asset,
                            min_receive,
                        },
                        [
                            100u8, 74u8, 230u8, 100u8, 7u8, 168u8, 195u8, 124u8, 65u8, 81u8, 116u8,
                            116u8, 58u8, 127u8, 163u8, 100u8, 0u8, 87u8, 244u8, 16u8, 57u8, 76u8,
                            210u8, 31u8, 147u8, 1u8, 51u8, 0u8, 235u8, 9u8, 185u8, 85u8,
                        ],
                    )
                }
                #[doc = "Buy `amount` of quote asset for `asset_pair` via route found in router."]
                #[doc = "On successful underlying DEX pallets will emit appropriate event."]
                pub fn buy(
                    &self,
                    in_asset_id: runtime_types::primitives::currency::CurrencyId,
                    out_asset: runtime_types::composable_traits::dex::AssetAmount<
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    >,
                ) -> subxt::tx::StaticTxPayload<Buy> {
                    subxt::tx::StaticTxPayload::new(
                        "DexRouter",
                        "buy",
                        Buy {
                            in_asset_id,
                            out_asset,
                        },
                        [
                            138u8, 175u8, 8u8, 227u8, 203u8, 43u8, 185u8, 55u8, 52u8, 130u8, 68u8,
                            254u8, 72u8, 18u8, 20u8, 223u8, 243u8, 124u8, 145u8, 75u8, 104u8, 57u8,
                            129u8, 63u8, 75u8, 254u8, 139u8, 55u8, 214u8, 116u8, 77u8, 60u8,
                        ],
                    )
                }
                #[doc = "Add liquidity to the underlying pablo pool."]
                #[doc = "Works only for single pool route."]
                pub fn add_liquidity(
                    &self,
                    assets: subxt::utils::KeyedVec<
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    >,
                    min_mint_amount: ::core::primitive::u128,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<AddLiquidity> {
                    subxt::tx::StaticTxPayload::new(
                        "DexRouter",
                        "add_liquidity",
                        AddLiquidity {
                            assets,
                            min_mint_amount,
                            keep_alive,
                        },
                        [
                            39u8, 48u8, 79u8, 249u8, 202u8, 123u8, 127u8, 209u8, 56u8, 13u8, 227u8,
                            84u8, 11u8, 147u8, 9u8, 169u8, 195u8, 26u8, 29u8, 14u8, 88u8, 233u8,
                            70u8, 87u8, 58u8, 161u8, 80u8, 39u8, 16u8, 201u8, 61u8, 37u8,
                        ],
                    )
                }
                #[doc = "Remove liquidity from the underlying pablo pool."]
                #[doc = "Works only for single pool route."]
                pub fn remove_liquidity(
                    &self,
                    lp_amount: ::core::primitive::u128,
                    min_receive: subxt::utils::KeyedVec<
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    >,
                ) -> subxt::tx::StaticTxPayload<RemoveLiquidity> {
                    subxt::tx::StaticTxPayload::new(
                        "DexRouter",
                        "remove_liquidity",
                        RemoveLiquidity {
                            lp_amount,
                            min_receive,
                        },
                        [
                            127u8, 177u8, 110u8, 17u8, 237u8, 89u8, 148u8, 161u8, 64u8, 207u8,
                            208u8, 41u8, 28u8, 172u8, 145u8, 13u8, 143u8, 54u8, 12u8, 196u8, 160u8,
                            41u8, 182u8, 63u8, 104u8, 112u8, 86u8, 202u8, 29u8, 176u8, 199u8,
                            110u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_dex_router::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RouteAdded {
                pub x_asset_id: runtime_types::primitives::currency::CurrencyId,
                pub y_asset_id: runtime_types::primitives::currency::CurrencyId,
                pub route: ::std::vec::Vec<::core::primitive::u128>,
            }
            impl subxt::events::StaticEvent for RouteAdded {
                const PALLET: &'static str = "DexRouter";
                const EVENT: &'static str = "RouteAdded";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RouteDeleted {
                pub x_asset_id: runtime_types::primitives::currency::CurrencyId,
                pub y_asset_id: runtime_types::primitives::currency::CurrencyId,
                pub route: ::std::vec::Vec<::core::primitive::u128>,
            }
            impl subxt::events::StaticEvent for RouteDeleted {
                const PALLET: &'static str = "DexRouter";
                const EVENT: &'static str = "RouteDeleted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RouteUpdated {
                pub x_asset_id: runtime_types::primitives::currency::CurrencyId,
                pub y_asset_id: runtime_types::primitives::currency::CurrencyId,
                pub old_route: ::std::vec::Vec<::core::primitive::u128>,
                pub updated_route: ::std::vec::Vec<::core::primitive::u128>,
            }
            impl subxt::events::StaticEvent for RouteUpdated {
                const PALLET: &'static str = "DexRouter";
                const EVENT: &'static str = "RouteUpdated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn dex_routes(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                    _1: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::dex::DexRoute<
                            ::core::primitive::u128,
                            runtime_types::dali_runtime::MaxHopsCount,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DexRouter",
                        "DexRoutes",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            39u8, 177u8, 124u8, 39u8, 30u8, 150u8, 71u8, 35u8, 121u8, 85u8, 24u8,
                            220u8, 96u8, 227u8, 120u8, 179u8, 156u8, 196u8, 198u8, 79u8, 105u8,
                            150u8, 10u8, 57u8, 249u8, 246u8, 0u8, 168u8, 232u8, 35u8, 90u8, 232u8,
                        ],
                    )
                }
                pub fn dex_routes_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::dex::DexRoute<
                            ::core::primitive::u128,
                            runtime_types::dali_runtime::MaxHopsCount,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "DexRouter",
                        "DexRoutes",
                        Vec::new(),
                        [
                            39u8, 177u8, 124u8, 39u8, 30u8, 150u8, 71u8, 35u8, 121u8, 85u8, 24u8,
                            220u8, 96u8, 227u8, 120u8, 179u8, 156u8, 196u8, 198u8, 79u8, 105u8,
                            150u8, 10u8, 57u8, 249u8, 246u8, 0u8, 168u8, 232u8, 35u8, 90u8, 232u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum hops in the route."]
                pub fn max_hops_in_route(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "DexRouter",
                        "MaxHopsInRoute",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn pallet_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::frame_support::PalletId>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "DexRouter",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
                            174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
                            9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod fnft {
        use super::{root_mod, runtime_types};
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_fnft::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct FinancialNftCollectionCreated {
                pub collection_id: runtime_types::primitives::currency::CurrencyId,
                pub who: subxt::ext::sp_core::crypto::AccountId32,
                pub admin: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for FinancialNftCollectionCreated {
                const PALLET: &'static str = "Fnft";
                const EVENT: &'static str = "FinancialNftCollectionCreated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct FinancialNftCreated {
                pub collection_id: runtime_types::primitives::currency::CurrencyId,
                pub instance_id: ::core::primitive::u64,
            }
            impl subxt::events::StaticEvent for FinancialNftCreated {
                const PALLET: &'static str = "Fnft";
                const EVENT: &'static str = "FinancialNftCreated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct FinancialNftBurned {
                pub collection_id: runtime_types::primitives::currency::CurrencyId,
                pub instance_id: ::core::primitive::u64,
            }
            impl subxt::events::StaticEvent for FinancialNftBurned {
                const PALLET: &'static str = "Fnft";
                const EVENT: &'static str = "FinancialNftBurned";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct FinancialNftTransferred {
                pub collection_id: runtime_types::primitives::currency::CurrencyId,
                pub instance_id: ::core::primitive::u64,
                pub to: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for FinancialNftTransferred {
                const PALLET: &'static str = "Fnft";
                const EVENT: &'static str = "FinancialNftTransferred";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Mapping of fNFT collection to the newest instance ID"]
                pub fn financial_nft_id(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Fnft",
                        "FinancialNftId",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            105u8, 98u8, 188u8, 80u8, 51u8, 85u8, 116u8, 202u8, 111u8, 46u8, 229u8,
                            49u8, 84u8, 35u8, 245u8, 250u8, 78u8, 240u8, 155u8, 236u8, 199u8,
                            136u8, 5u8, 99u8, 131u8, 38u8, 152u8, 55u8, 2u8, 87u8, 65u8, 29u8,
                        ],
                    )
                }
                #[doc = " Mapping of fNFT collection to the newest instance ID"]
                pub fn financial_nft_id_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Fnft",
                        "FinancialNftId",
                        Vec::new(),
                        [
                            105u8, 98u8, 188u8, 80u8, 51u8, 85u8, 116u8, 202u8, 111u8, 46u8, 229u8,
                            49u8, 84u8, 35u8, 245u8, 250u8, 78u8, 240u8, 155u8, 236u8, 199u8,
                            136u8, 5u8, 99u8, 131u8, 38u8, 152u8, 55u8, 2u8, 87u8, 65u8, 29u8,
                        ],
                    )
                }
                #[doc = " Mapping of collection and instance IDs to fNFT data"]
                pub fn instance(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        subxt::ext::sp_core::crypto::AccountId32,
                        subxt::utils::KeyedVec<
                            ::std::vec::Vec<::core::primitive::u8>,
                            ::std::vec::Vec<::core::primitive::u8>,
                        >,
                    )>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Fnft",
                        "Instance",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            55u8, 109u8, 198u8, 169u8, 211u8, 74u8, 196u8, 155u8, 191u8, 253u8,
                            132u8, 245u8, 7u8, 194u8, 233u8, 121u8, 51u8, 122u8, 168u8, 111u8,
                            123u8, 56u8, 194u8, 169u8, 147u8, 66u8, 27u8, 51u8, 249u8, 139u8,
                            178u8, 10u8,
                        ],
                    )
                }
                #[doc = " Mapping of collection and instance IDs to fNFT data"]
                pub fn instance_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        subxt::ext::sp_core::crypto::AccountId32,
                        subxt::utils::KeyedVec<
                            ::std::vec::Vec<::core::primitive::u8>,
                            ::std::vec::Vec<::core::primitive::u8>,
                        >,
                    )>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Fnft",
                        "Instance",
                        Vec::new(),
                        [
                            55u8, 109u8, 198u8, 169u8, 211u8, 74u8, 196u8, 155u8, 191u8, 253u8,
                            132u8, 245u8, 7u8, 194u8, 233u8, 121u8, 51u8, 122u8, 168u8, 111u8,
                            123u8, 56u8, 194u8, 169u8, 147u8, 66u8, 27u8, 51u8, 249u8, 139u8,
                            178u8, 10u8,
                        ],
                    )
                }
                #[doc = " All the NFTs owned by an account."]
                pub fn owner_instances(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<(
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u64,
                        )>,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Fnft",
                        "OwnerInstances",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            20u8, 52u8, 246u8, 144u8, 62u8, 82u8, 19u8, 98u8, 66u8, 238u8, 235u8,
                            10u8, 246u8, 242u8, 146u8, 131u8, 10u8, 189u8, 158u8, 31u8, 10u8, 42u8,
                            25u8, 179u8, 156u8, 188u8, 134u8, 27u8, 102u8, 225u8, 181u8, 48u8,
                        ],
                    )
                }
                #[doc = " All the NFTs owned by an account."]
                pub fn owner_instances_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<(
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u64,
                        )>,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Fnft",
                        "OwnerInstances",
                        Vec::new(),
                        [
                            20u8, 52u8, 246u8, 144u8, 62u8, 82u8, 19u8, 98u8, 66u8, 238u8, 235u8,
                            10u8, 246u8, 242u8, 146u8, 131u8, 10u8, 189u8, 158u8, 31u8, 10u8, 42u8,
                            25u8, 179u8, 156u8, 188u8, 134u8, 27u8, 102u8, 225u8, 181u8, 48u8,
                        ],
                    )
                }
                pub fn collection(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        subxt::ext::sp_core::crypto::AccountId32,
                        subxt::ext::sp_core::crypto::AccountId32,
                        subxt::utils::KeyedVec<
                            ::std::vec::Vec<::core::primitive::u8>,
                            ::std::vec::Vec<::core::primitive::u8>,
                        >,
                    )>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Fnft",
                        "Collection",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            18u8, 160u8, 195u8, 207u8, 249u8, 13u8, 51u8, 151u8, 51u8, 182u8, 18u8,
                            64u8, 63u8, 216u8, 49u8, 44u8, 190u8, 224u8, 170u8, 13u8, 253u8, 116u8,
                            99u8, 175u8, 201u8, 70u8, 181u8, 125u8, 33u8, 220u8, 134u8, 133u8,
                        ],
                    )
                }
                pub fn collection_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<(
                        subxt::ext::sp_core::crypto::AccountId32,
                        subxt::ext::sp_core::crypto::AccountId32,
                        subxt::utils::KeyedVec<
                            ::std::vec::Vec<::core::primitive::u8>,
                            ::std::vec::Vec<::core::primitive::u8>,
                        >,
                    )>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Fnft",
                        "Collection",
                        Vec::new(),
                        [
                            18u8, 160u8, 195u8, 207u8, 249u8, 13u8, 51u8, 151u8, 51u8, 182u8, 18u8,
                            64u8, 63u8, 216u8, 49u8, 44u8, 190u8, 224u8, 170u8, 13u8, 253u8, 116u8,
                            99u8, 175u8, 201u8, 70u8, 181u8, 125u8, 33u8, 220u8, 134u8, 133u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn pallet_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::frame_support::PalletId>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Fnft",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
                            174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
                            9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod staking_rewards {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct CreateRewardPool {
                pub pool_config: runtime_types::composable_traits::staking::RewardPoolConfiguration<
                    subxt::ext::sp_core::crypto::AccountId32,
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u128,
                    ::core::primitive::u32,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Stake {
                pub pool_id: runtime_types::primitives::currency::CurrencyId,
                pub amount: ::core::primitive::u128,
                pub duration_preset: ::core::primitive::u64,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Extend {
                pub fnft_collection_id: runtime_types::primitives::currency::CurrencyId,
                pub fnft_instance_id: ::core::primitive::u64,
                pub amount: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Unstake {
                pub fnft_collection_id: runtime_types::primitives::currency::CurrencyId,
                pub fnft_instance_id: ::core::primitive::u64,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Split {
                pub fnft_collection_id: runtime_types::primitives::currency::CurrencyId,
                pub fnft_instance_id: ::core::primitive::u64,
                pub ratio: runtime_types::sp_arithmetic::per_things::Permill,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct UpdateRewardsPool {
                pub pool_id: runtime_types::primitives::currency::CurrencyId,
                pub reward_updates:
                    runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
                        runtime_types::primitives::currency::CurrencyId,
                        runtime_types::composable_traits::staking::RewardUpdate<
                            ::core::primitive::u128,
                        >,
                    >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Claim {
                pub fnft_collection_id: runtime_types::primitives::currency::CurrencyId,
                pub fnft_instance_id: ::core::primitive::u64,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AddToRewardsPot {
                pub pool_id: runtime_types::primitives::currency::CurrencyId,
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub amount: ::core::primitive::u128,
                pub keep_alive: ::core::primitive::bool,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Create a new reward pool based on the config."]
                #[doc = ""]
                #[doc = "Emits `RewardPoolCreated` event when successful."]
                pub fn create_reward_pool(
                    &self,
                    pool_config: runtime_types::composable_traits::staking::RewardPoolConfiguration<
                        subxt::ext::sp_core::crypto::AccountId32,
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                ) -> subxt::tx::StaticTxPayload<CreateRewardPool> {
                    subxt::tx::StaticTxPayload::new(
                        "StakingRewards",
                        "create_reward_pool",
                        CreateRewardPool { pool_config },
                        [
                            153u8, 130u8, 68u8, 113u8, 181u8, 54u8, 63u8, 3u8, 32u8, 201u8, 241u8,
                            41u8, 4u8, 38u8, 100u8, 191u8, 4u8, 234u8, 199u8, 42u8, 251u8, 250u8,
                            37u8, 21u8, 134u8, 107u8, 226u8, 119u8, 150u8, 80u8, 188u8, 41u8,
                        ],
                    )
                }
                #[doc = "Create a new stake."]
                #[doc = ""]
                #[doc = "Emits `Staked` event when successful."]
                pub fn stake(
                    &self,
                    pool_id: runtime_types::primitives::currency::CurrencyId,
                    amount: ::core::primitive::u128,
                    duration_preset: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<Stake> {
                    subxt::tx::StaticTxPayload::new(
                        "StakingRewards",
                        "stake",
                        Stake {
                            pool_id,
                            amount,
                            duration_preset,
                        },
                        [
                            174u8, 77u8, 137u8, 40u8, 5u8, 208u8, 33u8, 7u8, 22u8, 241u8, 137u8,
                            47u8, 35u8, 138u8, 8u8, 34u8, 76u8, 185u8, 249u8, 80u8, 240u8, 54u8,
                            135u8, 170u8, 229u8, 109u8, 50u8, 152u8, 109u8, 235u8, 116u8, 142u8,
                        ],
                    )
                }
                #[doc = "Extend an existing stake."]
                #[doc = ""]
                #[doc = "Emits `StakeExtended` event when successful."]
                pub fn extend(
                    &self,
                    fnft_collection_id: runtime_types::primitives::currency::CurrencyId,
                    fnft_instance_id: ::core::primitive::u64,
                    amount: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<Extend> {
                    subxt::tx::StaticTxPayload::new(
                        "StakingRewards",
                        "extend",
                        Extend {
                            fnft_collection_id,
                            fnft_instance_id,
                            amount,
                        },
                        [
                            235u8, 208u8, 210u8, 48u8, 96u8, 102u8, 248u8, 222u8, 78u8, 135u8,
                            186u8, 238u8, 250u8, 194u8, 147u8, 198u8, 183u8, 31u8, 163u8, 111u8,
                            215u8, 108u8, 241u8, 71u8, 217u8, 220u8, 190u8, 135u8, 209u8, 183u8,
                            126u8, 105u8,
                        ],
                    )
                }
                #[doc = "Remove a stake."]
                #[doc = ""]
                #[doc = "Emits `Unstaked` event when successful."]
                pub fn unstake(
                    &self,
                    fnft_collection_id: runtime_types::primitives::currency::CurrencyId,
                    fnft_instance_id: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<Unstake> {
                    subxt::tx::StaticTxPayload::new(
                        "StakingRewards",
                        "unstake",
                        Unstake {
                            fnft_collection_id,
                            fnft_instance_id,
                        },
                        [
                            98u8, 57u8, 85u8, 149u8, 226u8, 48u8, 194u8, 85u8, 63u8, 244u8, 126u8,
                            45u8, 60u8, 154u8, 104u8, 199u8, 242u8, 202u8, 74u8, 110u8, 40u8,
                            207u8, 115u8, 204u8, 82u8, 104u8, 69u8, 151u8, 134u8, 78u8, 139u8,
                            133u8,
                        ],
                    )
                }
                pub fn split(
                    &self,
                    fnft_collection_id: runtime_types::primitives::currency::CurrencyId,
                    fnft_instance_id: ::core::primitive::u64,
                    ratio: runtime_types::sp_arithmetic::per_things::Permill,
                ) -> subxt::tx::StaticTxPayload<Split> {
                    subxt::tx::StaticTxPayload::new(
                        "StakingRewards",
                        "split",
                        Split {
                            fnft_collection_id,
                            fnft_instance_id,
                            ratio,
                        },
                        [
                            25u8, 51u8, 86u8, 234u8, 37u8, 219u8, 167u8, 213u8, 49u8, 229u8, 61u8,
                            153u8, 60u8, 113u8, 186u8, 121u8, 144u8, 215u8, 99u8, 220u8, 215u8,
                            251u8, 78u8, 123u8, 210u8, 36u8, 248u8, 171u8, 255u8, 161u8, 11u8,
                            173u8,
                        ],
                    )
                }
                #[doc = "Updates the reward pool configuration."]
                #[doc = ""]
                #[doc = "Emits `RewardPoolUpdated` when successful."]
                pub fn update_rewards_pool(
                    &self,
                    pool_id: runtime_types::primitives::currency::CurrencyId,
                    reward_updates : runtime_types :: sp_runtime :: bounded :: bounded_btree_map :: BoundedBTreeMap < runtime_types :: primitives :: currency :: CurrencyId , runtime_types :: composable_traits :: staking :: RewardUpdate < :: core :: primitive :: u128 > >,
                ) -> subxt::tx::StaticTxPayload<UpdateRewardsPool> {
                    subxt::tx::StaticTxPayload::new(
                        "StakingRewards",
                        "update_rewards_pool",
                        UpdateRewardsPool {
                            pool_id,
                            reward_updates,
                        },
                        [
                            119u8, 150u8, 22u8, 53u8, 96u8, 1u8, 61u8, 114u8, 151u8, 58u8, 222u8,
                            12u8, 27u8, 33u8, 51u8, 224u8, 189u8, 67u8, 89u8, 184u8, 244u8, 223u8,
                            56u8, 29u8, 182u8, 156u8, 161u8, 237u8, 221u8, 10u8, 165u8, 35u8,
                        ],
                    )
                }
                #[doc = "Claim a current reward for some position."]
                #[doc = ""]
                #[doc = "Emits `Claimed` event when successful."]
                pub fn claim(
                    &self,
                    fnft_collection_id: runtime_types::primitives::currency::CurrencyId,
                    fnft_instance_id: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<Claim> {
                    subxt::tx::StaticTxPayload::new(
                        "StakingRewards",
                        "claim",
                        Claim {
                            fnft_collection_id,
                            fnft_instance_id,
                        },
                        [
                            151u8, 199u8, 171u8, 211u8, 200u8, 221u8, 156u8, 162u8, 62u8, 136u8,
                            2u8, 49u8, 116u8, 164u8, 114u8, 105u8, 41u8, 207u8, 26u8, 195u8, 9u8,
                            12u8, 16u8, 140u8, 67u8, 141u8, 227u8, 141u8, 225u8, 233u8, 63u8,
                            240u8,
                        ],
                    )
                }
                #[doc = "Add funds to the reward pool's rewards pot for the specified asset."]
                #[doc = ""]
                #[doc = "Emits `RewardsPotIncreased` when successful."]
                pub fn add_to_rewards_pot(
                    &self,
                    pool_id: runtime_types::primitives::currency::CurrencyId,
                    asset_id: runtime_types::primitives::currency::CurrencyId,
                    amount: ::core::primitive::u128,
                    keep_alive: ::core::primitive::bool,
                ) -> subxt::tx::StaticTxPayload<AddToRewardsPot> {
                    subxt::tx::StaticTxPayload::new(
                        "StakingRewards",
                        "add_to_rewards_pot",
                        AddToRewardsPot {
                            pool_id,
                            asset_id,
                            amount,
                            keep_alive,
                        },
                        [
                            61u8, 109u8, 4u8, 55u8, 72u8, 167u8, 221u8, 181u8, 156u8, 74u8, 44u8,
                            95u8, 39u8, 52u8, 160u8, 200u8, 203u8, 73u8, 187u8, 32u8, 181u8, 9u8,
                            108u8, 197u8, 90u8, 5u8, 184u8, 170u8, 207u8, 138u8, 92u8, 83u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_staking_rewards::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Pool with specified id `T::AssetId` was created successfully by `T::AccountId`."]
            pub struct RewardPoolCreated {
                pub pool_id: runtime_types::primitives::currency::CurrencyId,
                pub owner: subxt::ext::sp_core::crypto::AccountId32,
                pub end_block: ::core::primitive::u32,
            }
            impl subxt::events::StaticEvent for RewardPoolCreated {
                const PALLET: &'static str = "StakingRewards";
                const EVENT: &'static str = "RewardPoolCreated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Staked {
                pub pool_id: runtime_types::primitives::currency::CurrencyId,
                pub owner: subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
                pub duration_preset: ::core::primitive::u64,
                pub fnft_collection_id: runtime_types::primitives::currency::CurrencyId,
                pub fnft_instance_id: ::core::primitive::u64,
                pub reward_multiplier: runtime_types::sp_arithmetic::fixed_point::FixedU64,
                pub keep_alive: ::core::primitive::bool,
            }
            impl subxt::events::StaticEvent for Staked {
                const PALLET: &'static str = "StakingRewards";
                const EVENT: &'static str = "Staked";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Claimed {
                pub owner: subxt::ext::sp_core::crypto::AccountId32,
                pub fnft_collection_id: runtime_types::primitives::currency::CurrencyId,
                pub fnft_instance_id: ::core::primitive::u64,
            }
            impl subxt::events::StaticEvent for Claimed {
                const PALLET: &'static str = "StakingRewards";
                const EVENT: &'static str = "Claimed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct StakeAmountExtended {
                pub fnft_collection_id: runtime_types::primitives::currency::CurrencyId,
                pub fnft_instance_id: ::core::primitive::u64,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for StakeAmountExtended {
                const PALLET: &'static str = "StakingRewards";
                const EVENT: &'static str = "StakeAmountExtended";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Unstaked {
                pub owner: subxt::ext::sp_core::crypto::AccountId32,
                pub fnft_collection_id: runtime_types::primitives::currency::CurrencyId,
                pub fnft_instance_id: ::core::primitive::u64,
                pub slash: ::core::option::Option<::core::primitive::u128>,
            }
            impl subxt::events::StaticEvent for Unstaked {
                const PALLET: &'static str = "StakingRewards";
                const EVENT: &'static str = "Unstaked";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A staking position was split."]
            pub struct SplitPosition {
                pub positions: ::std::vec::Vec<(
                    runtime_types::primitives::currency::CurrencyId,
                    ::core::primitive::u64,
                    ::core::primitive::u128,
                )>,
            }
            impl subxt::events::StaticEvent for SplitPosition {
                const PALLET: &'static str = "StakingRewards";
                const EVENT: &'static str = "SplitPosition";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Reward transfer event."]
            pub struct RewardTransferred {
                pub from: subxt::ext::sp_core::crypto::AccountId32,
                pub pool_id: runtime_types::primitives::currency::CurrencyId,
                pub reward_currency: runtime_types::primitives::currency::CurrencyId,
                pub reward_increment: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for RewardTransferred {
                const PALLET: &'static str = "StakingRewards";
                const EVENT: &'static str = "RewardTransferred";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RewardAccumulationHookError {
                pub pool_id: runtime_types::primitives::currency::CurrencyId,
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub error:
                    runtime_types::pallet_staking_rewards::pallet::RewardAccumulationHookError,
            }
            impl subxt::events::StaticEvent for RewardAccumulationHookError {
                const PALLET: &'static str = "StakingRewards";
                const EVENT: &'static str = "RewardAccumulationHookError";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RewardPoolUpdated {
                pub pool_id: runtime_types::primitives::currency::CurrencyId,
            }
            impl subxt::events::StaticEvent for RewardPoolUpdated {
                const PALLET: &'static str = "StakingRewards";
                const EVENT: &'static str = "RewardPoolUpdated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RewardsPotIncreased {
                pub pool_id: runtime_types::primitives::currency::CurrencyId,
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub amount: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for RewardsPotIncreased {
                const PALLET: &'static str = "StakingRewards";
                const EVENT: &'static str = "RewardsPotIncreased";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct UnstakeRewardSlashed {
                pub pool_id: runtime_types::primitives::currency::CurrencyId,
                pub owner: subxt::ext::sp_core::crypto::AccountId32,
                pub fnft_instance_id: ::core::primitive::u64,
                pub reward_asset_id: runtime_types::primitives::currency::CurrencyId,
                pub amount_slashed: ::core::primitive::u128,
            }
            impl subxt::events::StaticEvent for UnstakeRewardSlashed {
                const PALLET: &'static str = "StakingRewards";
                const EVENT: &'static str = "UnstakeRewardSlashed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn reward_pools(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::staking::RewardPool<
                            subxt::ext::sp_core::crypto::AccountId32,
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "StakingRewards",
                        "RewardPools",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            168u8, 250u8, 119u8, 125u8, 150u8, 89u8, 243u8, 41u8, 211u8, 136u8,
                            32u8, 41u8, 91u8, 168u8, 72u8, 170u8, 216u8, 86u8, 231u8, 229u8, 224u8,
                            209u8, 48u8, 100u8, 194u8, 36u8, 131u8, 132u8, 6u8, 168u8, 143u8,
                            249u8,
                        ],
                    )
                }
                pub fn reward_pools_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::staking::RewardPool<
                            subxt::ext::sp_core::crypto::AccountId32,
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "StakingRewards",
                        "RewardPools",
                        Vec::new(),
                        [
                            168u8, 250u8, 119u8, 125u8, 150u8, 89u8, 243u8, 41u8, 211u8, 136u8,
                            32u8, 41u8, 91u8, 168u8, 72u8, 170u8, 216u8, 86u8, 231u8, 229u8, 224u8,
                            209u8, 48u8, 100u8, 194u8, 36u8, 131u8, 132u8, 6u8, 168u8, 143u8,
                            249u8,
                        ],
                    )
                }
                pub fn stakes(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::staking::Stake<
                            runtime_types::primitives::currency::CurrencyId,
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "StakingRewards",
                        "Stakes",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            17u8, 81u8, 229u8, 208u8, 77u8, 173u8, 207u8, 78u8, 221u8, 60u8, 164u8,
                            48u8, 43u8, 112u8, 70u8, 97u8, 168u8, 163u8, 226u8, 80u8, 150u8, 173u8,
                            186u8, 61u8, 139u8, 31u8, 221u8, 149u8, 187u8, 204u8, 214u8, 228u8,
                        ],
                    )
                }
                pub fn stakes_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::composable_traits::staking::Stake<
                            runtime_types::primitives::currency::CurrencyId,
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "StakingRewards",
                        "Stakes",
                        Vec::new(),
                        [
                            17u8, 81u8, 229u8, 208u8, 77u8, 173u8, 207u8, 78u8, 221u8, 60u8, 164u8,
                            48u8, 43u8, 112u8, 70u8, 97u8, 168u8, 163u8, 226u8, 80u8, 150u8, 173u8,
                            186u8, 61u8, 139u8, 31u8, 221u8, 149u8, 187u8, 204u8, 214u8, 228u8,
                        ],
                    )
                }
                pub fn rewards_pot_is_empty(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                    _1: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<()>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "StakingRewards",
                        "RewardsPotIsEmpty",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            174u8, 12u8, 223u8, 147u8, 56u8, 153u8, 38u8, 137u8, 222u8, 150u8,
                            68u8, 183u8, 168u8, 81u8, 143u8, 248u8, 48u8, 249u8, 168u8, 239u8,
                            51u8, 16u8, 82u8, 202u8, 229u8, 203u8, 200u8, 128u8, 159u8, 202u8,
                            171u8, 72u8,
                        ],
                    )
                }
                pub fn rewards_pot_is_empty_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<()>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "StakingRewards",
                        "RewardsPotIsEmpty",
                        Vec::new(),
                        [
                            174u8, 12u8, 223u8, 147u8, 56u8, 153u8, 38u8, 137u8, 222u8, 150u8,
                            68u8, 183u8, 168u8, 81u8, 143u8, 248u8, 48u8, 249u8, 168u8, 239u8,
                            51u8, 16u8, 82u8, 202u8, 229u8, 203u8, 200u8, 128u8, 159u8, 202u8,
                            171u8, 72u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " the size of batch to take each time trying to release rewards"]
                pub fn release_rewards_pools_batch_size(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u8>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "StakingRewards",
                        "ReleaseRewardsPoolsBatchSize",
                        [
                            141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
                            28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
                            114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
                            165u8,
                        ],
                    )
                }
                pub fn pallet_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::frame_support::PalletId>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "StakingRewards",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
                            174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
                            9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
                        ],
                    )
                }
                #[doc = " Maximum number of staking duration presets allowed."]
                pub fn max_staking_duration_presets(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "StakingRewards",
                        "MaxStakingDurationPresets",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum number of reward configurations per pool."]
                pub fn max_reward_configs_per_pool(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "StakingRewards",
                        "MaxRewardConfigsPerPool",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn pica_asset_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "StakingRewards",
                        "PicaAssetId",
                        [
                            150u8, 207u8, 49u8, 178u8, 254u8, 209u8, 81u8, 36u8, 235u8, 117u8,
                            62u8, 166u8, 4u8, 173u8, 64u8, 189u8, 19u8, 182u8, 131u8, 166u8, 234u8,
                            145u8, 83u8, 23u8, 246u8, 20u8, 47u8, 34u8, 66u8, 162u8, 146u8, 49u8,
                        ],
                    )
                }
                pub fn x_pica_asset_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "StakingRewards",
                        "XPicaAssetId",
                        [
                            150u8, 207u8, 49u8, 178u8, 254u8, 209u8, 81u8, 36u8, 235u8, 117u8,
                            62u8, 166u8, 4u8, 173u8, 64u8, 189u8, 19u8, 182u8, 131u8, 166u8, 234u8,
                            145u8, 83u8, 23u8, 246u8, 20u8, 47u8, 34u8, 66u8, 162u8, 146u8, 49u8,
                        ],
                    )
                }
                pub fn pblo_asset_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "StakingRewards",
                        "PbloAssetId",
                        [
                            150u8, 207u8, 49u8, 178u8, 254u8, 209u8, 81u8, 36u8, 235u8, 117u8,
                            62u8, 166u8, 4u8, 173u8, 64u8, 189u8, 19u8, 182u8, 131u8, 166u8, 234u8,
                            145u8, 83u8, 23u8, 246u8, 20u8, 47u8, 34u8, 66u8, 162u8, 146u8, 49u8,
                        ],
                    )
                }
                pub fn x_pblo_asset_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "StakingRewards",
                        "XPbloAssetId",
                        [
                            150u8, 207u8, 49u8, 178u8, 254u8, 209u8, 81u8, 36u8, 235u8, 117u8,
                            62u8, 166u8, 4u8, 173u8, 64u8, 189u8, 19u8, 182u8, 131u8, 166u8, 234u8,
                            145u8, 83u8, 23u8, 246u8, 20u8, 47u8, 34u8, 66u8, 162u8, 146u8, 49u8,
                        ],
                    )
                }
                pub fn pica_stake_financial_nft_collection_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "StakingRewards",
                        "PicaStakeFinancialNftCollectionId",
                        [
                            150u8, 207u8, 49u8, 178u8, 254u8, 209u8, 81u8, 36u8, 235u8, 117u8,
                            62u8, 166u8, 4u8, 173u8, 64u8, 189u8, 19u8, 182u8, 131u8, 166u8, 234u8,
                            145u8, 83u8, 23u8, 246u8, 20u8, 47u8, 34u8, 66u8, 162u8, 146u8, 49u8,
                        ],
                    )
                }
                pub fn pblo_stake_financial_nft_collection_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "StakingRewards",
                        "PbloStakeFinancialNftCollectionId",
                        [
                            150u8, 207u8, 49u8, 178u8, 254u8, 209u8, 81u8, 36u8, 235u8, 117u8,
                            62u8, 166u8, 4u8, 173u8, 64u8, 189u8, 19u8, 182u8, 131u8, 166u8, 234u8,
                            145u8, 83u8, 23u8, 246u8, 20u8, 47u8, 34u8, 66u8, 162u8, 146u8, 49u8,
                        ],
                    )
                }
                pub fn lock_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<[::core::primitive::u8; 8usize]>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "StakingRewards",
                        "LockId",
                        [
                            224u8, 197u8, 247u8, 125u8, 62u8, 180u8, 69u8, 91u8, 226u8, 36u8, 82u8,
                            148u8, 70u8, 147u8, 209u8, 40u8, 210u8, 229u8, 181u8, 191u8, 170u8,
                            205u8, 138u8, 97u8, 127u8, 59u8, 124u8, 244u8, 252u8, 30u8, 213u8,
                            179u8,
                        ],
                    )
                }
                pub fn treasury_account(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<subxt::ext::sp_core::crypto::AccountId32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "StakingRewards",
                        "TreasuryAccount",
                        [
                            167u8, 71u8, 0u8, 47u8, 217u8, 107u8, 29u8, 163u8, 157u8, 187u8, 110u8,
                            219u8, 88u8, 213u8, 82u8, 107u8, 46u8, 199u8, 41u8, 110u8, 102u8,
                            187u8, 45u8, 201u8, 247u8, 66u8, 33u8, 228u8, 33u8, 99u8, 242u8, 80u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod call_filter {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Disable {
                pub entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
                    runtime_types::common::MaxStringSize,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Enable {
                pub entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
                    runtime_types::common::MaxStringSize,
                >,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Disable a pallet function."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be"]
                #[doc = "`UpdateOrigin`."]
                #[doc = ""]
                #[doc = "Possibly emits a `Disabled` event."]
                pub fn disable(
                    &self,
                    entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
                        runtime_types::common::MaxStringSize,
                    >,
                ) -> subxt::tx::StaticTxPayload<Disable> {
                    subxt::tx::StaticTxPayload::new(
                        "CallFilter",
                        "disable",
                        Disable { entry },
                        [
                            135u8, 13u8, 52u8, 184u8, 86u8, 89u8, 77u8, 78u8, 232u8, 107u8, 230u8,
                            67u8, 122u8, 192u8, 193u8, 4u8, 59u8, 44u8, 175u8, 209u8, 194u8, 49u8,
                            73u8, 116u8, 232u8, 227u8, 56u8, 254u8, 72u8, 54u8, 206u8, 27u8,
                        ],
                    )
                }
                #[doc = "Enable a previously disabled pallet function."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be"]
                #[doc = "`UpdateOrigin`."]
                #[doc = ""]
                #[doc = "Possibly emits an `Enabled` event."]
                pub fn enable(
                    &self,
                    entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
                        runtime_types::common::MaxStringSize,
                    >,
                ) -> subxt::tx::StaticTxPayload<Enable> {
                    subxt::tx::StaticTxPayload::new(
                        "CallFilter",
                        "enable",
                        Enable { entry },
                        [
                            24u8, 54u8, 83u8, 13u8, 223u8, 77u8, 229u8, 162u8, 164u8, 107u8, 208u8,
                            132u8, 0u8, 252u8, 176u8, 125u8, 236u8, 185u8, 128u8, 209u8, 252u8,
                            116u8, 112u8, 242u8, 25u8, 76u8, 69u8, 22u8, 4u8, 205u8, 227u8, 207u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_call_filter::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Paused transaction"]
            pub struct Disabled {
                pub entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
                    runtime_types::common::MaxStringSize,
                >,
            }
            impl subxt::events::StaticEvent for Disabled {
                const PALLET: &'static str = "CallFilter";
                const EVENT: &'static str = "Disabled";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Unpaused transaction"]
            pub struct Enabled {
                pub entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
                    runtime_types::common::MaxStringSize,
                >,
            }
            impl subxt::events::StaticEvent for Enabled {
                const PALLET: &'static str = "CallFilter";
                const EVENT: &'static str = "Enabled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The list of disabled extrinsics."]
                pub fn disabled_calls(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::composable_traits::call_filter::CallFilterEntry<
                            runtime_types::common::MaxStringSize,
                        >,
                    >,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<()>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CallFilter",
                        "DisabledCalls",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            54u8, 93u8, 201u8, 230u8, 97u8, 19u8, 95u8, 130u8, 213u8, 155u8, 135u8,
                            208u8, 52u8, 55u8, 238u8, 157u8, 6u8, 135u8, 46u8, 136u8, 82u8, 53u8,
                            1u8, 182u8, 38u8, 172u8, 140u8, 63u8, 56u8, 88u8, 173u8, 16u8,
                        ],
                    )
                }
                #[doc = " The list of disabled extrinsics."]
                pub fn disabled_calls_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<()>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "CallFilter",
                        "DisabledCalls",
                        Vec::new(),
                        [
                            54u8, 93u8, 201u8, 230u8, 97u8, 19u8, 95u8, 130u8, 213u8, 155u8, 135u8,
                            208u8, 52u8, 55u8, 238u8, 157u8, 6u8, 135u8, 46u8, 136u8, 82u8, 53u8,
                            1u8, 182u8, 38u8, 172u8, 140u8, 63u8, 56u8, 88u8, 173u8, 16u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn max_string_size(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "CallFilter",
                        "MaxStringSize",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod cosmwasm {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Upload {
                pub code: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Instantiate {
                pub code_identifier: runtime_types::pallet_cosmwasm::pallet::CodeIdentifier,
                pub salt: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
                pub admin: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
                pub label: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
                pub funds: runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
                    runtime_types::primitives::currency::CurrencyId,
                    (::core::primitive::u128, ::core::primitive::bool),
                >,
                pub gas: ::core::primitive::u64,
                pub message: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Execute {
                pub contract: subxt::ext::sp_core::crypto::AccountId32,
                pub funds: runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
                    runtime_types::primitives::currency::CurrencyId,
                    (::core::primitive::u128, ::core::primitive::bool),
                >,
                pub gas: ::core::primitive::u64,
                pub message: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Migrate {
                pub contract: subxt::ext::sp_core::crypto::AccountId32,
                pub new_code_identifier: runtime_types::pallet_cosmwasm::pallet::CodeIdentifier,
                pub gas: ::core::primitive::u64,
                pub message: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct UpdateAdmin {
                pub contract: subxt::ext::sp_core::crypto::AccountId32,
                pub new_admin: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
                pub gas: ::core::primitive::u64,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Upload a CosmWasm contract."]
                #[doc = "The function will ensure that the wasm module is well formed and that it fits the"]
                #[doc = "according limits. The module exports are going to be checked against the expected"]
                #[doc = "CosmWasm export signatures."]
                #[doc = ""]
                #[doc = "* Emits an `Uploaded` event on success."]
                #[doc = ""]
                #[doc = "Arguments"]
                #[doc = ""]
                #[doc = "- `origin` the original dispatching the extrinsic."]
                #[doc = "- `code` the actual wasm code."]
                pub fn upload(
                    &self,
                    code: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                ) -> subxt::tx::StaticTxPayload<Upload> {
                    subxt::tx::StaticTxPayload::new(
                        "Cosmwasm",
                        "upload",
                        Upload { code },
                        [
                            46u8, 215u8, 183u8, 97u8, 138u8, 131u8, 98u8, 17u8, 75u8, 155u8, 50u8,
                            211u8, 151u8, 56u8, 150u8, 35u8, 181u8, 55u8, 0u8, 47u8, 34u8, 43u8,
                            12u8, 134u8, 136u8, 184u8, 109u8, 68u8, 195u8, 67u8, 152u8, 247u8,
                        ],
                    )
                }
                #[doc = "Instantiate a previously uploaded code resulting in a new contract being generated."]
                #[doc = ""]
                #[doc = "* Emits an `Instantiated` event on success."]
                #[doc = "* Emits an `Executed` event."]
                #[doc = "* Possibly emit `Emitted` events."]
                #[doc = ""]
                #[doc = "Arguments"]
                #[doc = ""]
                #[doc = "* `origin` the origin dispatching the extrinsic."]
                #[doc = "* `code_id` the unique code id generated when the code has been uploaded via [`upload`]."]
                #[doc = "* `salt` the salt, usually used to instantiate the same contract multiple times."]
                #[doc = "* `funds` the assets transferred to the contract prior to calling it's `instantiate`"]
                #[doc = "  export."]
                #[doc = "* `gas` the maximum gas to use, the remaining is refunded at the end of the transaction."]
                pub fn instantiate(
                    &self,
                    code_identifier: runtime_types::pallet_cosmwasm::pallet::CodeIdentifier,
                    salt: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    admin: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
                    label: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    funds: runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
                        runtime_types::primitives::currency::CurrencyId,
                        (::core::primitive::u128, ::core::primitive::bool),
                    >,
                    gas: ::core::primitive::u64,
                    message: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                ) -> subxt::tx::StaticTxPayload<Instantiate> {
                    subxt::tx::StaticTxPayload::new(
                        "Cosmwasm",
                        "instantiate",
                        Instantiate {
                            code_identifier,
                            salt,
                            admin,
                            label,
                            funds,
                            gas,
                            message,
                        },
                        [
                            193u8, 255u8, 87u8, 243u8, 74u8, 218u8, 17u8, 197u8, 83u8, 128u8, 38u8,
                            114u8, 206u8, 111u8, 45u8, 77u8, 228u8, 38u8, 153u8, 238u8, 11u8,
                            226u8, 106u8, 128u8, 179u8, 205u8, 77u8, 63u8, 34u8, 213u8, 255u8,
                            45u8,
                        ],
                    )
                }
                #[doc = "Execute a previously instantiated contract."]
                #[doc = ""]
                #[doc = "* Emits an `Executed` event."]
                #[doc = "* Possibly emit `Emitted` events."]
                #[doc = ""]
                #[doc = "Arguments"]
                #[doc = ""]
                #[doc = "* `origin` the origin dispatching the extrinsic."]
                #[doc = "* `code_id` the unique code id generated when the code has been uploaded via [`upload`]."]
                #[doc = "* `salt` the salt, usually used to instantiate the same contract multiple times."]
                #[doc = "* `funds` the assets transferred to the contract prior to calling it's `instantiate`"]
                #[doc = "  export."]
                #[doc = "* `gas` the maximum gas to use, the remaining is refunded at the end of the transaction."]
                pub fn execute(
                    &self,
                    contract: subxt::ext::sp_core::crypto::AccountId32,
                    funds: runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
                        runtime_types::primitives::currency::CurrencyId,
                        (::core::primitive::u128, ::core::primitive::bool),
                    >,
                    gas: ::core::primitive::u64,
                    message: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                ) -> subxt::tx::StaticTxPayload<Execute> {
                    subxt::tx::StaticTxPayload::new(
                        "Cosmwasm",
                        "execute",
                        Execute {
                            contract,
                            funds,
                            gas,
                            message,
                        },
                        [
                            152u8, 193u8, 214u8, 152u8, 133u8, 46u8, 29u8, 93u8, 125u8, 53u8,
                            250u8, 156u8, 157u8, 97u8, 216u8, 220u8, 203u8, 94u8, 214u8, 222u8,
                            79u8, 36u8, 190u8, 226u8, 198u8, 139u8, 85u8, 95u8, 91u8, 192u8, 212u8,
                            224u8,
                        ],
                    )
                }
                #[doc = "Migrate a previously instantiated contract."]
                #[doc = ""]
                #[doc = "* Emits a `Migrated` event on success."]
                #[doc = "* Emits an `Executed` event."]
                #[doc = "* Possibly emit `Emitted` events."]
                #[doc = ""]
                #[doc = "Arguments"]
                #[doc = ""]
                #[doc = "* `origin` the origin dispatching the extrinsic."]
                #[doc = "* `contract` the address of the contract that we want to migrate"]
                #[doc = "* `new_code_identifier` the code identifier that we want to switch to."]
                #[doc = "* `gas` the maximum gas to use, the remaining is refunded at the end of the transaction."]
                #[doc = "* `message` MigrateMsg, that will be passed to the contract."]
                pub fn migrate(
                    &self,
                    contract: subxt::ext::sp_core::crypto::AccountId32,
                    new_code_identifier: runtime_types::pallet_cosmwasm::pallet::CodeIdentifier,
                    gas: ::core::primitive::u64,
                    message: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                ) -> subxt::tx::StaticTxPayload<Migrate> {
                    subxt::tx::StaticTxPayload::new(
                        "Cosmwasm",
                        "migrate",
                        Migrate {
                            contract,
                            new_code_identifier,
                            gas,
                            message,
                        },
                        [
                            170u8, 6u8, 19u8, 107u8, 143u8, 58u8, 159u8, 213u8, 183u8, 223u8,
                            252u8, 146u8, 152u8, 177u8, 15u8, 211u8, 0u8, 247u8, 3u8, 117u8, 253u8,
                            22u8, 195u8, 217u8, 25u8, 206u8, 252u8, 210u8, 101u8, 147u8, 38u8, 7u8,
                        ],
                    )
                }
                #[doc = "Update the admin of a contract."]
                #[doc = ""]
                #[doc = "* Emits a `AdminUpdated` event on success."]
                #[doc = ""]
                #[doc = "Arguments"]
                #[doc = ""]
                #[doc = "* `origin` the origin dispatching the extrinsic."]
                #[doc = "* `contract` the address of the contract that we want to migrate."]
                #[doc = "* `new_admin` new admin of the contract that we want to update to."]
                #[doc = "* `gas` the maximum gas to use, the remaining is refunded at the end of the transaction."]
                pub fn update_admin(
                    &self,
                    contract: subxt::ext::sp_core::crypto::AccountId32,
                    new_admin: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
                    gas: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<UpdateAdmin> {
                    subxt::tx::StaticTxPayload::new(
                        "Cosmwasm",
                        "update_admin",
                        UpdateAdmin {
                            contract,
                            new_admin,
                            gas,
                        },
                        [
                            90u8, 91u8, 234u8, 105u8, 116u8, 222u8, 156u8, 108u8, 141u8, 212u8,
                            10u8, 40u8, 183u8, 226u8, 213u8, 128u8, 171u8, 238u8, 146u8, 83u8,
                            49u8, 13u8, 151u8, 182u8, 207u8, 86u8, 119u8, 224u8, 160u8, 213u8,
                            243u8, 195u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_cosmwasm::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Uploaded {
                pub code_hash: subxt::ext::sp_core::H256,
                pub code_id: ::core::primitive::u64,
            }
            impl subxt::events::StaticEvent for Uploaded {
                const PALLET: &'static str = "Cosmwasm";
                const EVENT: &'static str = "Uploaded";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Instantiated {
                pub contract: subxt::ext::sp_core::crypto::AccountId32,
                pub info: runtime_types::pallet_cosmwasm::types::ContractInfo<
                    subxt::ext::sp_core::crypto::AccountId32,
                    runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                >,
            }
            impl subxt::events::StaticEvent for Instantiated {
                const PALLET: &'static str = "Cosmwasm";
                const EVENT: &'static str = "Instantiated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Executed {
                pub contract: subxt::ext::sp_core::crypto::AccountId32,
                pub entrypoint: runtime_types::pallet_cosmwasm::pallet::EntryPoint,
                pub data: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
            }
            impl subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "Cosmwasm";
                const EVENT: &'static str = "Executed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ExecutionFailed {
                pub contract: subxt::ext::sp_core::crypto::AccountId32,
                pub entrypoint: runtime_types::pallet_cosmwasm::pallet::EntryPoint,
                pub error: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl subxt::events::StaticEvent for ExecutionFailed {
                const PALLET: &'static str = "Cosmwasm";
                const EVENT: &'static str = "ExecutionFailed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Emitted {
                pub contract: subxt::ext::sp_core::crypto::AccountId32,
                pub ty: ::std::vec::Vec<::core::primitive::u8>,
                pub attributes: ::std::vec::Vec<(
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::std::vec::Vec<::core::primitive::u8>,
                )>,
            }
            impl subxt::events::StaticEvent for Emitted {
                const PALLET: &'static str = "Cosmwasm";
                const EVENT: &'static str = "Emitted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Migrated {
                pub contract: subxt::ext::sp_core::crypto::AccountId32,
                pub to: ::core::primitive::u64,
            }
            impl subxt::events::StaticEvent for Migrated {
                const PALLET: &'static str = "Cosmwasm";
                const EVENT: &'static str = "Migrated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AdminUpdated {
                pub contract: subxt::ext::sp_core::crypto::AccountId32,
                pub new_admin: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
            }
            impl subxt::events::StaticEvent for AdminUpdated {
                const PALLET: &'static str = "Cosmwasm";
                const EVENT: &'static str = "AdminUpdated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct IbcChannelOpen {
                pub contract: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for IbcChannelOpen {
                const PALLET: &'static str = "Cosmwasm";
                const EVENT: &'static str = "IbcChannelOpen";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " A mapping from an original code id to the original code, untouched by instrumentation."]
                pub fn pristine_code(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Cosmwasm",
                        "PristineCode",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            79u8, 150u8, 181u8, 109u8, 57u8, 227u8, 51u8, 18u8, 238u8, 33u8, 184u8,
                            234u8, 110u8, 199u8, 38u8, 21u8, 151u8, 94u8, 206u8, 59u8, 41u8, 222u8,
                            9u8, 237u8, 91u8, 130u8, 129u8, 219u8, 19u8, 168u8, 82u8, 56u8,
                        ],
                    )
                }
                #[doc = " A mapping from an original code id to the original code, untouched by instrumentation."]
                pub fn pristine_code_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Cosmwasm",
                        "PristineCode",
                        Vec::new(),
                        [
                            79u8, 150u8, 181u8, 109u8, 57u8, 227u8, 51u8, 18u8, 238u8, 33u8, 184u8,
                            234u8, 110u8, 199u8, 38u8, 21u8, 151u8, 94u8, 206u8, 59u8, 41u8, 222u8,
                            9u8, 237u8, 91u8, 130u8, 129u8, 219u8, 19u8, 168u8, 82u8, 56u8,
                        ],
                    )
                }
                #[doc = " A mapping between an original code id and instrumented wasm code, ready for execution."]
                pub fn instrumented_code(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Cosmwasm",
                        "InstrumentedCode",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            26u8, 54u8, 181u8, 51u8, 227u8, 64u8, 39u8, 161u8, 10u8, 30u8, 115u8,
                            95u8, 219u8, 194u8, 208u8, 180u8, 2u8, 189u8, 3u8, 12u8, 86u8, 134u8,
                            158u8, 15u8, 110u8, 63u8, 241u8, 65u8, 146u8, 79u8, 1u8, 230u8,
                        ],
                    )
                }
                #[doc = " A mapping between an original code id and instrumented wasm code, ready for execution."]
                pub fn instrumented_code_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Cosmwasm",
                        "InstrumentedCode",
                        Vec::new(),
                        [
                            26u8, 54u8, 181u8, 51u8, 227u8, 64u8, 39u8, 161u8, 10u8, 30u8, 115u8,
                            95u8, 219u8, 194u8, 208u8, 180u8, 2u8, 189u8, 3u8, 12u8, 86u8, 134u8,
                            158u8, 15u8, 110u8, 63u8, 241u8, 65u8, 146u8, 79u8, 1u8, 230u8,
                        ],
                    )
                }
                #[doc = " Monotonic counter incremented on code creation."]
                pub fn current_code_id(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Cosmwasm",
                        "CurrentCodeId",
                        vec![],
                        [
                            152u8, 186u8, 207u8, 74u8, 80u8, 134u8, 213u8, 20u8, 242u8, 188u8,
                            145u8, 200u8, 199u8, 41u8, 238u8, 182u8, 147u8, 235u8, 123u8, 74u8,
                            92u8, 121u8, 120u8, 17u8, 141u8, 255u8, 9u8, 202u8, 152u8, 38u8, 45u8,
                            139u8,
                        ],
                    )
                }
                #[doc = " A mapping between an original code hash and its metadata."]
                pub fn code_id_to_info(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_cosmwasm::types::CodeInfo<
                            subxt::ext::sp_core::crypto::AccountId32,
                            subxt::ext::sp_core::H256,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Cosmwasm",
                        "CodeIdToInfo",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            251u8, 67u8, 57u8, 89u8, 146u8, 10u8, 222u8, 150u8, 114u8, 236u8,
                            211u8, 254u8, 199u8, 53u8, 198u8, 237u8, 223u8, 172u8, 208u8, 245u8,
                            172u8, 0u8, 157u8, 197u8, 103u8, 173u8, 22u8, 219u8, 96u8, 203u8,
                            155u8, 192u8,
                        ],
                    )
                }
                #[doc = " A mapping between an original code hash and its metadata."]
                pub fn code_id_to_info_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_cosmwasm::types::CodeInfo<
                            subxt::ext::sp_core::crypto::AccountId32,
                            subxt::ext::sp_core::H256,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Cosmwasm",
                        "CodeIdToInfo",
                        Vec::new(),
                        [
                            251u8, 67u8, 57u8, 89u8, 146u8, 10u8, 222u8, 150u8, 114u8, 236u8,
                            211u8, 254u8, 199u8, 53u8, 198u8, 237u8, 223u8, 172u8, 208u8, 245u8,
                            172u8, 0u8, 157u8, 197u8, 103u8, 173u8, 22u8, 219u8, 96u8, 203u8,
                            155u8, 192u8,
                        ],
                    )
                }
                #[doc = " A mapping between a code hash and it's unique ID."]
                pub fn code_hash_to_id(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::H256>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Cosmwasm",
                        "CodeHashToId",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            128u8, 210u8, 121u8, 12u8, 35u8, 201u8, 254u8, 62u8, 236u8, 166u8,
                            37u8, 146u8, 128u8, 219u8, 86u8, 10u8, 33u8, 142u8, 134u8, 16u8, 237u8,
                            20u8, 185u8, 196u8, 1u8, 135u8, 135u8, 12u8, 240u8, 78u8, 6u8, 228u8,
                        ],
                    )
                }
                #[doc = " A mapping between a code hash and it's unique ID."]
                pub fn code_hash_to_id_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Cosmwasm",
                        "CodeHashToId",
                        Vec::new(),
                        [
                            128u8, 210u8, 121u8, 12u8, 35u8, 201u8, 254u8, 62u8, 236u8, 166u8,
                            37u8, 146u8, 128u8, 219u8, 86u8, 10u8, 33u8, 142u8, 134u8, 16u8, 237u8,
                            20u8, 185u8, 196u8, 1u8, 135u8, 135u8, 12u8, 240u8, 78u8, 6u8, 228u8,
                        ],
                    )
                }
                #[doc = " This is a **monotonic** counter incremented on contract instantiation."]
                #[doc = " The purpose of this nonce is just to make sure that contract trie are unique."]
                pub fn current_nonce(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Cosmwasm",
                        "CurrentNonce",
                        vec![],
                        [
                            33u8, 7u8, 37u8, 162u8, 216u8, 134u8, 22u8, 195u8, 233u8, 188u8, 112u8,
                            93u8, 142u8, 55u8, 241u8, 194u8, 45u8, 249u8, 44u8, 28u8, 80u8, 161u8,
                            205u8, 179u8, 187u8, 54u8, 126u8, 255u8, 174u8, 38u8, 142u8, 201u8,
                        ],
                    )
                }
                #[doc = " A mapping between a contract and it's metadata."]
                pub fn contract_to_info(
                    &self,
                    _0: impl ::std::borrow::Borrow<subxt::ext::sp_core::crypto::AccountId32>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_cosmwasm::types::ContractInfo<
                            subxt::ext::sp_core::crypto::AccountId32,
                            runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                            runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        >,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Cosmwasm",
                        "ContractToInfo",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            67u8, 240u8, 240u8, 193u8, 198u8, 143u8, 97u8, 148u8, 166u8, 192u8,
                            99u8, 159u8, 24u8, 84u8, 195u8, 122u8, 151u8, 142u8, 42u8, 50u8, 209u8,
                            114u8, 28u8, 11u8, 202u8, 107u8, 159u8, 224u8, 218u8, 229u8, 177u8,
                            244u8,
                        ],
                    )
                }
                #[doc = " A mapping between a contract and it's metadata."]
                pub fn contract_to_info_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_cosmwasm::types::ContractInfo<
                            subxt::ext::sp_core::crypto::AccountId32,
                            runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                            runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        >,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Cosmwasm",
                        "ContractToInfo",
                        Vec::new(),
                        [
                            67u8, 240u8, 240u8, 193u8, 198u8, 143u8, 97u8, 148u8, 166u8, 192u8,
                            99u8, 159u8, 24u8, 84u8, 195u8, 122u8, 151u8, 142u8, 42u8, 50u8, 209u8,
                            114u8, 28u8, 11u8, 202u8, 107u8, 159u8, 224u8, 218u8, 229u8, 177u8,
                            244u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Pallet unique ID."]
                pub fn pallet_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::frame_support::PalletId>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
                            174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
                            9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
                        ],
                    )
                }
                #[doc = " Current chain ID. Provided to the contract via the [`Env`]."]
                pub fn chain_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::std::string::String>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "ChainId",
                        [
                            251u8, 233u8, 211u8, 209u8, 5u8, 66u8, 94u8, 200u8, 148u8, 166u8,
                            119u8, 200u8, 59u8, 180u8, 70u8, 77u8, 182u8, 127u8, 45u8, 65u8, 28u8,
                            104u8, 253u8, 149u8, 167u8, 216u8, 2u8, 94u8, 39u8, 173u8, 198u8,
                            219u8,
                        ],
                    )
                }
                #[doc = " Max number of frames a contract is able to push, a.k.a recursive calls."]
                pub fn max_frames(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "MaxFrames",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Max accepted code size."]
                pub fn max_code_size(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "MaxCodeSize",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Max code size after gas instrumentation."]
                pub fn max_instrumented_code_size(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "MaxInstrumentedCodeSize",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Max message size."]
                pub fn max_message_size(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "MaxMessageSize",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Max contract label size."]
                pub fn max_contract_label_size(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "MaxContractLabelSize",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Max contract trie id size."]
                pub fn max_contract_trie_id_size(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "MaxContractTrieIdSize",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Max instantiate salt."]
                pub fn max_instantiate_salt_size(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "MaxInstantiateSaltSize",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Max assets in a [`FundsOf`] batch."]
                pub fn max_funds_assets(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "MaxFundsAssets",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Max wasm table size."]
                pub fn code_table_size_limit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "CodeTableSizeLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Max wasm globals limit."]
                pub fn code_global_variable_limit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "CodeGlobalVariableLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Max wasm functions parameters limit."]
                pub fn code_parameter_limit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "CodeParameterLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Max wasm branch table size limit."]
                pub fn code_branch_table_size_limit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "CodeBranchTableSizeLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Max wasm stack size limit."]
                pub fn code_stack_limit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "CodeStackLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Price of a byte when uploading new code."]
                #[doc = " The price is expressed in [`Self::NativeAsset`]."]
                #[doc = " This amount is reserved from the owner and released when the code is destroyed."]
                pub fn code_storage_byte_deposit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "CodeStorageByteDeposit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Price of writing a byte in the storage."]
                pub fn contract_storage_byte_write_price(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "ContractStorageByteWritePrice",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Price of extracting a byte from the storage."]
                pub fn contract_storage_byte_read_price(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "ContractStorageByteReadPrice",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn wasm_cost_rules(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::pallet_cosmwasm::instrument::CostRules,
                    >,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Cosmwasm",
                        "WasmCostRules",
                        [
                            137u8, 125u8, 189u8, 226u8, 137u8, 105u8, 198u8, 241u8, 230u8, 77u8,
                            160u8, 237u8, 71u8, 131u8, 1u8, 111u8, 209u8, 219u8, 64u8, 46u8, 23u8,
                            128u8, 238u8, 102u8, 131u8, 221u8, 139u8, 152u8, 52u8, 34u8, 23u8,
                            225u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod ibc {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Deliver {
                pub messages: ::std::vec::Vec<runtime_types::pallet_ibc::Any>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Transfer {
                pub params: runtime_types::pallet_ibc::TransferParams<
                    subxt::ext::sp_core::crypto::AccountId32,
                >,
                pub asset_id: runtime_types::primitives::currency::CurrencyId,
                pub amount: ::core::primitive::u128,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SetParams {
                pub params: runtime_types::pallet_ibc::PalletParams,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct UpgradeClient {
                pub params: runtime_types::pallet_ibc::UpgradeParams,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct FreezeClient {
                pub client_id: ::std::vec::Vec<::core::primitive::u8>,
                pub height: ::core::primitive::u64,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn deliver(
                    &self,
                    messages: ::std::vec::Vec<runtime_types::pallet_ibc::Any>,
                ) -> subxt::tx::StaticTxPayload<Deliver> {
                    subxt::tx::StaticTxPayload::new(
                        "Ibc",
                        "deliver",
                        Deliver { messages },
                        [
                            179u8, 205u8, 83u8, 66u8, 171u8, 103u8, 175u8, 57u8, 35u8, 60u8, 170u8,
                            172u8, 60u8, 57u8, 56u8, 226u8, 130u8, 222u8, 121u8, 25u8, 230u8,
                            143u8, 253u8, 77u8, 111u8, 152u8, 89u8, 150u8, 129u8, 239u8, 141u8,
                            61u8,
                        ],
                    )
                }
                pub fn transfer(
                    &self,
                    params: runtime_types::pallet_ibc::TransferParams<
                        subxt::ext::sp_core::crypto::AccountId32,
                    >,
                    asset_id: runtime_types::primitives::currency::CurrencyId,
                    amount: ::core::primitive::u128,
                ) -> subxt::tx::StaticTxPayload<Transfer> {
                    subxt::tx::StaticTxPayload::new(
                        "Ibc",
                        "transfer",
                        Transfer {
                            params,
                            asset_id,
                            amount,
                        },
                        [
                            33u8, 94u8, 220u8, 52u8, 141u8, 6u8, 102u8, 58u8, 223u8, 30u8, 207u8,
                            82u8, 31u8, 4u8, 14u8, 79u8, 19u8, 232u8, 106u8, 79u8, 80u8, 157u8,
                            46u8, 234u8, 181u8, 46u8, 124u8, 115u8, 147u8, 62u8, 151u8, 123u8,
                        ],
                    )
                }
                pub fn set_params(
                    &self,
                    params: runtime_types::pallet_ibc::PalletParams,
                ) -> subxt::tx::StaticTxPayload<SetParams> {
                    subxt::tx::StaticTxPayload::new(
                        "Ibc",
                        "set_params",
                        SetParams { params },
                        [
                            116u8, 243u8, 44u8, 94u8, 198u8, 240u8, 175u8, 200u8, 234u8, 175u8,
                            193u8, 228u8, 45u8, 51u8, 89u8, 123u8, 211u8, 209u8, 214u8, 0u8, 124u8,
                            86u8, 142u8, 43u8, 104u8, 198u8, 156u8, 224u8, 51u8, 82u8, 220u8,
                            165u8,
                        ],
                    )
                }
                #[doc = "We write the consensus & client state under these predefined paths so that"]
                #[doc = "we can produce state proofs of the values to connected chains"]
                #[doc = "in order to execute client upgrades."]
                pub fn upgrade_client(
                    &self,
                    params: runtime_types::pallet_ibc::UpgradeParams,
                ) -> subxt::tx::StaticTxPayload<UpgradeClient> {
                    subxt::tx::StaticTxPayload::new(
                        "Ibc",
                        "upgrade_client",
                        UpgradeClient { params },
                        [
                            113u8, 38u8, 218u8, 101u8, 66u8, 187u8, 155u8, 238u8, 185u8, 82u8,
                            16u8, 26u8, 35u8, 122u8, 0u8, 124u8, 239u8, 54u8, 134u8, 255u8, 40u8,
                            224u8, 3u8, 49u8, 200u8, 214u8, 212u8, 165u8, 224u8, 19u8, 11u8, 28u8,
                        ],
                    )
                }
                #[doc = "Freeze a client at a specific height"]
                pub fn freeze_client(
                    &self,
                    client_id: ::std::vec::Vec<::core::primitive::u8>,
                    height: ::core::primitive::u64,
                ) -> subxt::tx::StaticTxPayload<FreezeClient> {
                    subxt::tx::StaticTxPayload::new(
                        "Ibc",
                        "freeze_client",
                        FreezeClient { client_id, height },
                        [
                            71u8, 208u8, 79u8, 70u8, 132u8, 43u8, 127u8, 140u8, 240u8, 38u8, 18u8,
                            3u8, 50u8, 179u8, 10u8, 210u8, 28u8, 174u8, 60u8, 81u8, 229u8, 211u8,
                            120u8, 55u8, 109u8, 191u8, 182u8, 207u8, 37u8, 52u8, 224u8, 239u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_ibc::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Events emitted by the ibc subsystem"]
            pub struct Events {
                pub events: ::std::vec::Vec<runtime_types::pallet_ibc::events::IbcEvent>,
            }
            impl subxt::events::StaticEvent for Events {
                const PALLET: &'static str = "Ibc";
                const EVENT: &'static str = "Events";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Errors emitted by the ibc subsystem"]
            pub struct Errors {
                pub errors: ::std::vec::Vec<runtime_types::pallet_ibc::errors::IbcError>,
            }
            impl subxt::events::StaticEvent for Errors {
                const PALLET: &'static str = "Ibc";
                const EVENT: &'static str = "Errors";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An Ibc token transfer has been started"]
            pub struct TokenTransferInitiated {
                pub from: subxt::ext::sp_core::crypto::AccountId32,
                pub to: ::std::vec::Vec<::core::primitive::u8>,
                pub ibc_denom: ::std::vec::Vec<::core::primitive::u8>,
                pub local_asset_id:
                    ::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
                pub amount: ::core::primitive::u128,
                pub is_sender_source: ::core::primitive::bool,
                pub source_channel: ::std::vec::Vec<::core::primitive::u8>,
                pub destination_channel: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl subxt::events::StaticEvent for TokenTransferInitiated {
                const PALLET: &'static str = "Ibc";
                const EVENT: &'static str = "TokenTransferInitiated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A channel has been opened"]
            pub struct ChannelOpened {
                pub channel_id: ::std::vec::Vec<::core::primitive::u8>,
                pub port_id: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl subxt::events::StaticEvent for ChannelOpened {
                const PALLET: &'static str = "Ibc";
                const EVENT: &'static str = "ChannelOpened";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Pallet params updated"]
            pub struct ParamsUpdated {
                pub send_enabled: ::core::primitive::bool,
                pub receive_enabled: ::core::primitive::bool,
            }
            impl subxt::events::StaticEvent for ParamsUpdated {
                const PALLET: &'static str = "Ibc";
                const EVENT: &'static str = "ParamsUpdated";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "An outgoing Ibc token transfer has been completed and burnt"]
            pub struct TokenTransferCompleted {
                pub from: ::std::vec::Vec<::core::primitive::u8>,
                pub to: ::std::vec::Vec<::core::primitive::u8>,
                pub ibc_denom: ::std::vec::Vec<::core::primitive::u8>,
                pub local_asset_id:
                    ::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
                pub amount: ::core::primitive::u128,
                pub is_sender_source: ::core::primitive::bool,
                pub source_channel: ::std::vec::Vec<::core::primitive::u8>,
                pub destination_channel: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl subxt::events::StaticEvent for TokenTransferCompleted {
                const PALLET: &'static str = "Ibc";
                const EVENT: &'static str = "TokenTransferCompleted";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Ibc tokens have been received and minted"]
            pub struct TokenReceived {
                pub from: ::std::vec::Vec<::core::primitive::u8>,
                pub to: ::std::vec::Vec<::core::primitive::u8>,
                pub ibc_denom: ::std::vec::Vec<::core::primitive::u8>,
                pub local_asset_id:
                    ::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
                pub amount: ::core::primitive::u128,
                pub is_receiver_source: ::core::primitive::bool,
                pub source_channel: ::std::vec::Vec<::core::primitive::u8>,
                pub destination_channel: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl subxt::events::StaticEvent for TokenReceived {
                const PALLET: &'static str = "Ibc";
                const EVENT: &'static str = "TokenReceived";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Ibc transfer failed, received an acknowledgement error, tokens have been refunded"]
            pub struct TokenTransferFailed {
                pub from: ::std::vec::Vec<::core::primitive::u8>,
                pub to: ::std::vec::Vec<::core::primitive::u8>,
                pub ibc_denom: ::std::vec::Vec<::core::primitive::u8>,
                pub local_asset_id:
                    ::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
                pub amount: ::core::primitive::u128,
                pub is_sender_source: ::core::primitive::bool,
                pub source_channel: ::std::vec::Vec<::core::primitive::u8>,
                pub destination_channel: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl subxt::events::StaticEvent for TokenTransferFailed {
                const PALLET: &'static str = "Ibc";
                const EVENT: &'static str = "TokenTransferFailed";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "On recv packet was not processed successfully processes"]
            pub struct OnRecvPacketError {
                pub msg: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl subxt::events::StaticEvent for OnRecvPacketError {
                const PALLET: &'static str = "Ibc";
                const EVENT: &'static str = "OnRecvPacketError";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Client upgrade path has been set"]
            pub struct ClientUpgradeSet;
            impl subxt::events::StaticEvent for ClientUpgradeSet {
                const PALLET: &'static str = "Ibc";
                const EVENT: &'static str = "ClientUpgradeSet";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Client has been frozen"]
            pub struct ClientFrozen {
                pub client_id: ::std::vec::Vec<::core::primitive::u8>,
                pub height: ::core::primitive::u64,
                pub revision_number: ::core::primitive::u64,
            }
            impl subxt::events::StaticEvent for ClientFrozen {
                const PALLET: &'static str = "Ibc";
                const EVENT: &'static str = "ClientFrozen";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "Asset Admin Account Updated"]
            pub struct AssetAdminUpdated {
                pub admin_account: subxt::ext::sp_core::crypto::AccountId32,
            }
            impl subxt::events::StaticEvent for AssetAdminUpdated {
                const PALLET: &'static str = "Ibc";
                const EVENT: &'static str = "AssetAdminUpdated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " client_id , Height => Height"]
                pub fn client_update_height(
                    &self,
                    _0: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
                    _1: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "ClientUpdateHeight",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            169u8, 6u8, 192u8, 186u8, 79u8, 156u8, 202u8, 105u8, 213u8, 28u8,
                            186u8, 112u8, 216u8, 170u8, 8u8, 166u8, 181u8, 179u8, 111u8, 212u8,
                            35u8, 121u8, 7u8, 86u8, 212u8, 69u8, 66u8, 3u8, 19u8, 220u8, 114u8,
                            167u8,
                        ],
                    )
                }
                #[doc = " client_id , Height => Height"]
                pub fn client_update_height_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "ClientUpdateHeight",
                        Vec::new(),
                        [
                            169u8, 6u8, 192u8, 186u8, 79u8, 156u8, 202u8, 105u8, 213u8, 28u8,
                            186u8, 112u8, 216u8, 170u8, 8u8, 166u8, 181u8, 179u8, 111u8, 212u8,
                            35u8, 121u8, 7u8, 86u8, 212u8, 69u8, 66u8, 3u8, 19u8, 220u8, 114u8,
                            167u8,
                        ],
                    )
                }
                #[doc = " client_id , Height => Timestamp"]
                pub fn client_update_time(
                    &self,
                    _0: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
                    _1: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "ClientUpdateTime",
                        vec![
                            subxt::storage::address::StorageMapKey::new(
                                _0.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                            subxt::storage::address::StorageMapKey::new(
                                _1.borrow(),
                                subxt::storage::address::StorageHasher::Blake2_128Concat,
                            ),
                        ],
                        [
                            98u8, 194u8, 46u8, 221u8, 34u8, 111u8, 178u8, 66u8, 21u8, 234u8, 174u8,
                            27u8, 188u8, 45u8, 219u8, 211u8, 68u8, 207u8, 23u8, 228u8, 175u8,
                            165u8, 179u8, 18u8, 219u8, 248u8, 34u8, 60u8, 202u8, 106u8, 171u8,
                            68u8,
                        ],
                    )
                }
                #[doc = " client_id , Height => Timestamp"]
                pub fn client_update_time_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "ClientUpdateTime",
                        Vec::new(),
                        [
                            98u8, 194u8, 46u8, 221u8, 34u8, 111u8, 178u8, 66u8, 21u8, 234u8, 174u8,
                            27u8, 188u8, 45u8, 219u8, 211u8, 68u8, 207u8, 23u8, 228u8, 175u8,
                            165u8, 179u8, 18u8, 219u8, 248u8, 34u8, 60u8, 202u8, 106u8, 171u8,
                            68u8,
                        ],
                    )
                }
                pub fn channel_counter(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "ChannelCounter",
                        vec![],
                        [
                            227u8, 20u8, 185u8, 41u8, 83u8, 61u8, 150u8, 45u8, 251u8, 243u8, 199u8,
                            188u8, 94u8, 160u8, 194u8, 25u8, 245u8, 89u8, 69u8, 105u8, 37u8, 220u8,
                            143u8, 106u8, 244u8, 161u8, 215u8, 129u8, 220u8, 79u8, 193u8, 255u8,
                        ],
                    )
                }
                pub fn packet_counter(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "PacketCounter",
                        vec![],
                        [
                            90u8, 180u8, 164u8, 48u8, 0u8, 236u8, 78u8, 205u8, 206u8, 248u8, 91u8,
                            28u8, 64u8, 96u8, 73u8, 159u8, 230u8, 81u8, 41u8, 88u8, 165u8, 107u8,
                            85u8, 85u8, 56u8, 240u8, 122u8, 230u8, 165u8, 216u8, 232u8, 223u8,
                        ],
                    )
                }
                #[doc = " connection_identifier => Vec<(port_id, channel_id)>"]
                pub fn channels_connection(
                    &self,
                    _0: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<(
                            ::std::vec::Vec<::core::primitive::u8>,
                            ::std::vec::Vec<::core::primitive::u8>,
                        )>,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "ChannelsConnection",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            175u8, 74u8, 214u8, 39u8, 82u8, 72u8, 28u8, 110u8, 105u8, 136u8, 218u8,
                            218u8, 110u8, 111u8, 182u8, 21u8, 180u8, 80u8, 66u8, 44u8, 85u8, 138u8,
                            56u8, 102u8, 121u8, 201u8, 111u8, 240u8, 73u8, 7u8, 8u8, 115u8,
                        ],
                    )
                }
                #[doc = " connection_identifier => Vec<(port_id, channel_id)>"]
                pub fn channels_connection_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<(
                            ::std::vec::Vec<::core::primitive::u8>,
                            ::std::vec::Vec<::core::primitive::u8>,
                        )>,
                    >,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "ChannelsConnection",
                        Vec::new(),
                        [
                            175u8, 74u8, 214u8, 39u8, 82u8, 72u8, 28u8, 110u8, 105u8, 136u8, 218u8,
                            218u8, 110u8, 111u8, 182u8, 21u8, 180u8, 80u8, 66u8, 44u8, 85u8, 138u8,
                            56u8, 102u8, 121u8, 201u8, 111u8, 240u8, 73u8, 7u8, 8u8, 115u8,
                        ],
                    )
                }
                #[doc = " counter for clients"]
                pub fn client_counter(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "ClientCounter",
                        vec![],
                        [
                            236u8, 121u8, 82u8, 20u8, 184u8, 116u8, 197u8, 237u8, 123u8, 236u8,
                            221u8, 90u8, 88u8, 89u8, 224u8, 171u8, 143u8, 145u8, 221u8, 242u8,
                            195u8, 89u8, 31u8, 185u8, 251u8, 92u8, 250u8, 50u8, 47u8, 171u8, 31u8,
                            124u8,
                        ],
                    )
                }
                #[doc = " counter for clients"]
                pub fn connection_counter(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "ConnectionCounter",
                        vec![],
                        [
                            155u8, 106u8, 125u8, 78u8, 71u8, 212u8, 217u8, 208u8, 192u8, 39u8,
                            220u8, 52u8, 226u8, 76u8, 191u8, 4u8, 196u8, 118u8, 136u8, 3u8, 90u8,
                            155u8, 168u8, 89u8, 103u8, 155u8, 220u8, 150u8, 4u8, 118u8, 164u8, 2u8,
                        ],
                    )
                }
                #[doc = " counter for acknowledgments"]
                pub fn acknowledgement_counter(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "AcknowledgementCounter",
                        vec![],
                        [
                            169u8, 90u8, 79u8, 11u8, 28u8, 186u8, 46u8, 204u8, 147u8, 76u8, 77u8,
                            162u8, 45u8, 137u8, 52u8, 50u8, 67u8, 212u8, 51u8, 49u8, 156u8, 128u8,
                            213u8, 182u8, 158u8, 71u8, 152u8, 162u8, 250u8, 196u8, 71u8, 170u8,
                        ],
                    )
                }
                #[doc = " counter for packet receipts"]
                pub fn packet_receipt_counter(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "PacketReceiptCounter",
                        vec![],
                        [
                            149u8, 146u8, 199u8, 15u8, 127u8, 62u8, 135u8, 23u8, 188u8, 232u8,
                            218u8, 239u8, 194u8, 219u8, 28u8, 34u8, 21u8, 153u8, 149u8, 155u8,
                            26u8, 39u8, 50u8, 201u8, 88u8, 36u8, 177u8, 239u8, 55u8, 51u8, 141u8,
                            241u8,
                        ],
                    )
                }
                #[doc = " client_id => Vec<Connection_id>"]
                pub fn connection_client(
                    &self,
                    _0: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "ConnectionClient",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Blake2_128Concat,
                        )],
                        [
                            134u8, 166u8, 43u8, 43u8, 142u8, 200u8, 83u8, 81u8, 252u8, 1u8, 153u8,
                            167u8, 197u8, 170u8, 154u8, 242u8, 241u8, 178u8, 166u8, 147u8, 223u8,
                            188u8, 118u8, 48u8, 40u8, 203u8, 29u8, 17u8, 120u8, 250u8, 79u8, 111u8,
                        ],
                    )
                }
                #[doc = " client_id => Vec<Connection_id>"]
                pub fn connection_client_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    >,
                    (),
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "ConnectionClient",
                        Vec::new(),
                        [
                            134u8, 166u8, 43u8, 43u8, 142u8, 200u8, 83u8, 81u8, 252u8, 1u8, 153u8,
                            167u8, 197u8, 170u8, 154u8, 242u8, 241u8, 178u8, 166u8, 147u8, 223u8,
                            188u8, 118u8, 48u8, 40u8, 203u8, 29u8, 17u8, 120u8, 250u8, 79u8, 111u8,
                        ],
                    )
                }
                #[doc = " Pallet Params used to disable sending or receipt of ibc tokens"]
                pub fn params(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<runtime_types::pallet_ibc::PalletParams>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "Params",
                        vec![],
                        [
                            53u8, 220u8, 56u8, 9u8, 21u8, 121u8, 177u8, 62u8, 240u8, 196u8, 215u8,
                            157u8, 220u8, 38u8, 85u8, 220u8, 196u8, 38u8, 44u8, 236u8, 64u8, 11u8,
                            242u8, 82u8, 230u8, 33u8, 60u8, 148u8, 35u8, 176u8, 81u8, 188u8,
                        ],
                    )
                }
                #[doc = " Map of asset id to ibc denom pairs (T::AssetId, Vec<u8>)"]
                #[doc = " ibc denoms represented as utf8 string bytes"]
                pub fn ibc_asset_ids(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitives::currency::CurrencyId>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "IbcAssetIds",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            95u8, 163u8, 91u8, 54u8, 240u8, 186u8, 53u8, 241u8, 234u8, 178u8,
                            228u8, 71u8, 139u8, 33u8, 124u8, 205u8, 97u8, 75u8, 125u8, 55u8, 234u8,
                            37u8, 128u8, 129u8, 119u8, 196u8, 227u8, 212u8, 43u8, 154u8, 153u8,
                            214u8,
                        ],
                    )
                }
                #[doc = " Map of asset id to ibc denom pairs (T::AssetId, Vec<u8>)"]
                #[doc = " ibc denoms represented as utf8 string bytes"]
                pub fn ibc_asset_ids_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "IbcAssetIds",
                        Vec::new(),
                        [
                            95u8, 163u8, 91u8, 54u8, 240u8, 186u8, 53u8, 241u8, 234u8, 178u8,
                            228u8, 71u8, 139u8, 33u8, 124u8, 205u8, 97u8, 75u8, 125u8, 55u8, 234u8,
                            37u8, 128u8, 129u8, 119u8, 196u8, 227u8, 212u8, 43u8, 154u8, 153u8,
                            214u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]
                pub fn counter_for_ibc_asset_ids(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "CounterForIbcAssetIds",
                        vec![],
                        [
                            115u8, 253u8, 221u8, 253u8, 101u8, 232u8, 174u8, 9u8, 2u8, 79u8, 212u8,
                            243u8, 233u8, 90u8, 34u8, 251u8, 140u8, 100u8, 153u8, 60u8, 240u8,
                            60u8, 36u8, 90u8, 81u8, 31u8, 241u8, 224u8, 157u8, 89u8, 194u8, 105u8,
                        ],
                    )
                }
                #[doc = " Map of asset id to ibc denom pairs (Vec<u8>, T::AssetId)"]
                #[doc = " ibc denoms represented as utf8 string bytes"]
                pub fn ibc_denoms(
                    &self,
                    _0: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                    subxt::storage::address::Yes,
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "IbcDenoms",
                        vec![subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            subxt::storage::address::StorageHasher::Twox64Concat,
                        )],
                        [
                            66u8, 43u8, 17u8, 209u8, 96u8, 87u8, 219u8, 181u8, 26u8, 207u8, 178u8,
                            232u8, 121u8, 119u8, 194u8, 108u8, 240u8, 228u8, 95u8, 246u8, 247u8,
                            223u8, 55u8, 66u8, 128u8, 110u8, 200u8, 161u8, 164u8, 229u8, 205u8,
                            8u8,
                        ],
                    )
                }
                #[doc = " Map of asset id to ibc denom pairs (Vec<u8>, T::AssetId)"]
                #[doc = " ibc denoms represented as utf8 string bytes"]
                pub fn ibc_denoms_root(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                    (),
                    (),
                    subxt::storage::address::Yes,
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "IbcDenoms",
                        Vec::new(),
                        [
                            66u8, 43u8, 17u8, 209u8, 96u8, 87u8, 219u8, 181u8, 26u8, 207u8, 178u8,
                            232u8, 121u8, 119u8, 194u8, 108u8, 240u8, 228u8, 95u8, 246u8, 247u8,
                            223u8, 55u8, 66u8, 128u8, 110u8, 200u8, 161u8, 164u8, 229u8, 205u8,
                            8u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]
                pub fn counter_for_ibc_denoms(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "CounterForIbcDenoms",
                        vec![],
                        [
                            254u8, 185u8, 194u8, 13u8, 31u8, 147u8, 250u8, 253u8, 56u8, 226u8,
                            58u8, 135u8, 7u8, 228u8, 50u8, 135u8, 175u8, 249u8, 5u8, 148u8, 42u8,
                            24u8, 125u8, 212u8, 245u8, 134u8, 213u8, 102u8, 17u8, 2u8, 135u8,
                            194u8,
                        ],
                    )
                }
                #[doc = " ChannelIds open from this module"]
                pub fn channel_ids(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "ChannelIds",
                        vec![],
                        [
                            21u8, 104u8, 164u8, 90u8, 17u8, 181u8, 235u8, 0u8, 67u8, 67u8, 164u8,
                            217u8, 126u8, 131u8, 214u8, 38u8, 143u8, 134u8, 215u8, 173u8, 53u8,
                            154u8, 118u8, 215u8, 175u8, 207u8, 14u8, 134u8, 241u8, 215u8, 188u8,
                            69u8,
                        ],
                    )
                }
                #[doc = " Active Escrow addresses"]
                pub fn escrow_addresses(
                    &self,
                ) -> subxt::storage::address::StaticStorageAddress<
                    subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                    >,
                    subxt::storage::address::Yes,
                    subxt::storage::address::Yes,
                    (),
                > {
                    subxt::storage::address::StaticStorageAddress::new(
                        "Ibc",
                        "EscrowAddresses",
                        vec![],
                        [
                            184u8, 122u8, 32u8, 42u8, 200u8, 130u8, 61u8, 220u8, 100u8, 177u8,
                            62u8, 197u8, 90u8, 210u8, 142u8, 56u8, 70u8, 70u8, 59u8, 246u8, 203u8,
                            118u8, 32u8, 237u8, 123u8, 115u8, 73u8, 67u8, 175u8, 199u8, 167u8,
                            25u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The native asset id, this will use the `NativeCurrency` for all operations."]
                pub fn native_asset_id(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<
                        runtime_types::primitives::currency::CurrencyId,
                    >,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Ibc",
                        "NativeAssetId",
                        [
                            150u8, 207u8, 49u8, 178u8, 254u8, 209u8, 81u8, 36u8, 235u8, 117u8,
                            62u8, 166u8, 4u8, 173u8, 64u8, 189u8, 19u8, 182u8, 131u8, 166u8, 234u8,
                            145u8, 83u8, 23u8, 246u8, 20u8, 47u8, 34u8, 66u8, 162u8, 146u8, 49u8,
                        ],
                    )
                }
                #[doc = " Expected block time in milliseconds"]
                pub fn expected_block_time(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Ibc",
                        "ExpectedBlockTime",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                #[doc = " Minimum connection delay period in seconds for ibc connections that can be created or"]
                #[doc = " accepted. Ensure that this is non-zero in production as it's a critical vulnerability."]
                pub fn minimum_connection_delay(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Ibc",
                        "MinimumConnectionDelay",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                #[doc = " Amount to be reserved for client and connection creation"]
                pub fn spam_protection_deposit(
                    &self,
                ) -> subxt::constants::StaticConstantAddress<
                    subxt::metadata::DecodeStaticType<::core::primitive::u128>,
                > {
                    subxt::constants::StaticConstantAddress::new(
                        "Ibc",
                        "SpamProtectionDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod ibc_ping {
        use super::{root_mod, runtime_types};
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SendPing {
                pub params: runtime_types::pallet_ibc_ping::SendPingParams,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn send_ping(
                    &self,
                    params: runtime_types::pallet_ibc_ping::SendPingParams,
                ) -> subxt::tx::StaticTxPayload<SendPing> {
                    subxt::tx::StaticTxPayload::new(
                        "IbcPing",
                        "send_ping",
                        SendPing { params },
                        [
                            220u8, 39u8, 88u8, 154u8, 82u8, 81u8, 40u8, 100u8, 229u8, 27u8, 172u8,
                            50u8, 71u8, 157u8, 163u8, 188u8, 184u8, 2u8, 180u8, 93u8, 135u8, 166u8,
                            112u8, 206u8, 165u8, 238u8, 89u8, 26u8, 163u8, 33u8, 212u8, 144u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_ibc_ping::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A send packet has been registered"]
            pub struct PacketSent;
            impl subxt::events::StaticEvent for PacketSent {
                const PALLET: &'static str = "IbcPing";
                const EVENT: &'static str = "PacketSent";
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            #[doc = "A channel has been opened"]
            pub struct ChannelOpened {
                pub channel_id: ::std::vec::Vec<::core::primitive::u8>,
                pub port_id: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl subxt::events::StaticEvent for ChannelOpened {
                const PALLET: &'static str = "IbcPing";
                const EVENT: &'static str = "ChannelOpened";
            }
        }
    }
    pub mod runtime_types {
        use super::runtime_types;
        pub mod common {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum MosaicRemoteAssetId {
                    #[codec(index = 0)]
                    EthereumTokenAddress([::core::primitive::u8; 20usize]),
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct MaxStringSize;
        }
        pub mod composable_support {
            use super::runtime_types;
            pub mod collections {
                use super::runtime_types;
                pub mod vec {
                    use super::runtime_types;
                    pub mod bounded {
                        use super::runtime_types;
                        pub mod bi_bounded_vec {
                            use super::runtime_types;
                            #[derive(
                                Debug,
                                subxt :: ext :: codec :: Decode,
                                subxt :: ext :: codec :: Encode,
                            )]
                            pub struct BiBoundedVec<_0> {
                                pub inner: ::std::vec::Vec<_0>,
                            }
                        }
                    }
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct EcdsaSignature(pub [::core::primitive::u8; 65usize]);
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct EthereumAddress(pub [::core::primitive::u8; 20usize]);
            }
        }
        pub mod composable_traits {
            use super::runtime_types;
            pub mod account_proxy {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum ProxyType {
                    #[codec(index = 0)]
                    Any,
                    #[codec(index = 1)]
                    Governance,
                    #[codec(index = 2)]
                    CancelProxy,
                }
            }
            pub mod assets {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct BasicAssetMetadata { pub symbol : runtime_types :: composable_support :: collections :: vec :: bounded :: bi_bounded_vec :: BiBoundedVec < :: core :: primitive :: u8 > , pub name : runtime_types :: composable_support :: collections :: vec :: bounded :: bi_bounded_vec :: BiBoundedVec < :: core :: primitive :: u8 > , }
            }
            pub mod bonded_finance {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum BondDuration<_0> {
                    #[codec(index = 0)]
                    Finite { return_in: _0 },
                    #[codec(index = 1)]
                    Infinite,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct BondOffer<_0, _1, _2, _3> {
                    pub beneficiary: _0,
                    pub asset: _1,
                    pub bond_price: _2,
                    pub nb_of_bonds: _2,
                    pub maturity:
                        runtime_types::composable_traits::bonded_finance::BondDuration<_3>,
                    pub reward: runtime_types::composable_traits::bonded_finance::BondOfferReward<
                        _1,
                        _2,
                        _3,
                    >,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct BondOfferReward<_0, _1, _2> {
                    pub asset: _0,
                    pub amount: _1,
                    pub maturity: _2,
                }
            }
            pub mod call_filter {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct CallFilterEntry<_0> {
                    pub pallet_name: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub function_name: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_0>,
                }
            }
            pub mod currency {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Rational64 {
                    pub n: ::core::primitive::u64,
                    pub d: ::core::primitive::u64,
                }
            }
            pub mod defi {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct CurrencyPair<_0> {
                    pub base: _0,
                    pub quote: _0,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Sell<_0, _1> {
                    pub pair: runtime_types::composable_traits::defi::CurrencyPair<_0>,
                    pub take: runtime_types::composable_traits::defi::Take<_0>,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Take<_0> {
                    pub amount: _0,
                    pub limit: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                }
            }
            pub mod dex {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct AssetAmount<_0, _1> {
                    pub asset_id: _0,
                    pub amount: _1,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct BasicPoolInfo<_0, _1> {
                    pub owner: _0,
                    pub assets_weights:
                        runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
                            _1,
                            runtime_types::sp_arithmetic::per_things::Permill,
                        >,
                    pub lp_token: _1,
                    pub fee_config: runtime_types::composable_traits::dex::FeeConfig,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum DexRoute<_0, _1> {
                    #[codec(index = 0)]
                    Direct(runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<_0>),
                    __Ignore(::core::marker::PhantomData<_1>),
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Fee<_0, _1> {
                    pub fee: _1,
                    pub lp_fee: _1,
                    pub owner_fee: _1,
                    pub protocol_fee: _1,
                    pub asset_id: _0,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct FeeConfig {
                    pub fee_rate: runtime_types::sp_arithmetic::per_things::Permill,
                    pub owner_fee_rate: runtime_types::sp_arithmetic::per_things::Permill,
                    pub protocol_fee_rate: runtime_types::sp_arithmetic::per_things::Permill,
                }
            }
            pub mod governance {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum SignedRawOrigin<_0> {
                    #[codec(index = 0)]
                    Root,
                    #[codec(index = 1)]
                    Signed(_0),
                }
            }
            pub mod lending {
                use super::runtime_types;
                pub mod math {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct CurveModel {
                        pub base_rate: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct DoubleExponentModel {
                        pub coefficients: [::core::primitive::u8; 16usize],
                    }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct DynamicPIDControllerModel {
                        pub proportional_parameter:
                            runtime_types::sp_arithmetic::fixed_point::FixedI128,
                        pub integral_parameter:
                            runtime_types::sp_arithmetic::fixed_point::FixedI128,
                        pub derivative_parameter:
                            runtime_types::sp_arithmetic::fixed_point::FixedI128,
                        pub previous_error_value:
                            runtime_types::sp_arithmetic::fixed_point::FixedI128,
                        pub previous_integral_term:
                            runtime_types::sp_arithmetic::fixed_point::FixedI128,
                        pub previous_interest_rate:
                            runtime_types::sp_arithmetic::fixed_point::FixedU128,
                        pub target_utilization:
                            runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum InterestRateModel {
                        # [codec (index = 0)] Jump (runtime_types :: composable_traits :: lending :: math :: JumpModel ,) , # [codec (index = 1)] Curve (runtime_types :: composable_traits :: lending :: math :: CurveModel ,) , # [codec (index = 2)] DynamicPIDController (runtime_types :: composable_traits :: lending :: math :: DynamicPIDControllerModel ,) , # [codec (index = 3)] DoubleExponent (runtime_types :: composable_traits :: lending :: math :: DoubleExponentModel ,) , }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct JumpModel {
                        pub base_rate: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                        pub jump_rate: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                        pub full_rate: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                        pub target_utilization: runtime_types::sp_arithmetic::per_things::Percent,
                    }
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct CreateInput<_0, _1, _2> {
                    pub updatable: runtime_types::composable_traits::lending::UpdateInput<_0, _0>,
                    pub currency_pair: runtime_types::composable_traits::defi::CurrencyPair<_1>,
                    pub reserved_factor: runtime_types::sp_arithmetic::per_things::Perquintill,
                    pub interest_rate_model:
                        runtime_types::composable_traits::lending::math::InterestRateModel,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_2>,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct MarketConfig<_0, _1, _2, _3, _4> {
                    pub manager: _2,
                    pub borrow_asset_vault: _0,
                    pub collateral_asset: _1,
                    pub max_price_age: _3,
                    pub collateral_factor: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    pub interest_rate_model:
                        runtime_types::composable_traits::lending::math::InterestRateModel,
                    pub under_collateralized_warn_percent:
                        runtime_types::sp_arithmetic::per_things::Percent,
                    pub liquidators: ::std::vec::Vec<_3>,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_4>,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum RepayStrategy<_0> {
                    #[codec(index = 0)]
                    TotalDebt,
                    #[codec(index = 1)]
                    PartialAmount(_0),
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct UpdateInput<_0, _1> {
                    pub collateral_factor: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    pub under_collateralized_warn_percent:
                        runtime_types::sp_arithmetic::per_things::Percent,
                    pub liquidators: ::std::vec::Vec<_0>,
                    pub max_price_age: _0,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
                }
            }
            pub mod oracle {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Price<_0, _1> {
                    pub price: _0,
                    pub block: _1,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct RewardTracker<_0, _1> {
                    pub period: _1,
                    pub start: _1,
                    pub total_already_rewarded: _0,
                    pub current_block_reward: _0,
                    pub total_reward_weight: _0,
                }
            }
            pub mod staking {
                use super::runtime_types;
                pub mod lock {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct Lock {
                        pub started_at: ::core::primitive::u64,
                        pub duration: ::core::primitive::u64,
                        pub unlock_penalty: runtime_types::sp_arithmetic::per_things::Perbill,
                    }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct LockConfig {
                        pub duration_presets:
                            runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
                                ::core::primitive::u64,
                                runtime_types::sp_arithmetic::fixed_point::FixedU64,
                            >,
                        pub unlock_penalty: runtime_types::sp_arithmetic::per_things::Perbill,
                    }
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Reward<_0> {
                    pub total_rewards: _0,
                    pub claimed_rewards: _0,
                    pub total_dilution_adjustment: _0,
                    pub reward_rate: runtime_types::composable_traits::staking::RewardRate<_0>,
                    pub last_updated_timestamp: ::core::primitive::u64,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct RewardConfig<_0> {
                    pub reward_rate: runtime_types::composable_traits::staking::RewardRate<_0>,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct RewardPool<_0, _1, _2, _3> {
                    pub owner: _0,
                    pub rewards:
                        runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
                            _1,
                            runtime_types::composable_traits::staking::Reward<_2>,
                        >,
                    pub claimed_shares: _2,
                    pub start_block: _3,
                    pub end_block: _3,
                    pub lock: runtime_types::composable_traits::staking::lock::LockConfig,
                    pub share_asset_id: _1,
                    pub financial_nft_asset_id: _1,
                    pub minimum_staking_amount: _2,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum RewardPoolConfiguration<_0, _1, _2, _3> {
                    #[codec(index = 0)]
                    RewardRateBasedIncentive {
                        owner: _0,
                        asset_id: _1,
                        start_block: _3,
                        end_block: _3,
                        reward_configs:
                            runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
                                _1,
                                runtime_types::composable_traits::staking::RewardConfig<_2>,
                            >,
                        lock: runtime_types::composable_traits::staking::lock::LockConfig,
                        share_asset_id: _1,
                        financial_nft_asset_id: _1,
                        minimum_staking_amount: _2,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct RewardRate<_0> {
                    pub period: runtime_types::composable_traits::staking::RewardRatePeriod,
                    pub amount: _0,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum RewardRatePeriod {
                    #[codec(index = 0)]
                    PerSecond,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct RewardUpdate<_0> {
                    pub reward_rate: runtime_types::composable_traits::staking::RewardRate<_0>,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Stake<_0, _1, _2> {
                    pub reward_pool_id: _0,
                    pub stake: _2,
                    pub share: _2,
                    pub reductions:
                        runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
                            _0,
                            _2,
                        >,
                    pub lock: runtime_types::composable_traits::staking::lock::Lock,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
                }
            }
            pub mod time {
                use super::runtime_types;
                #[derive(
                    Debug,
                    subxt :: ext :: codec :: CompactAs,
                    subxt :: ext :: codec :: Decode,
                    subxt :: ext :: codec :: Encode,
                )]
                pub struct LinearDecrease {
                    pub total: ::core::primitive::u64,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct StairstepExponentialDecrease {
                    pub step: ::core::primitive::u64,
                    pub cut: runtime_types::sp_arithmetic::per_things::Permill,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum TimeReleaseFunction {
                    #[codec(index = 0)]
                    LinearDecrease(runtime_types::composable_traits::time::LinearDecrease),
                    #[codec(index = 1)]
                    StairstepExponentialDecrease(
                        runtime_types::composable_traits::time::StairstepExponentialDecrease,
                    ),
                }
            }
            pub mod vault {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum Deposit<_0, _1> {
                    #[codec(index = 0)]
                    Existential,
                    #[codec(index = 1)]
                    Rent { amount: _0, at: _1 },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct VaultConfig<_0, _1> {
                    pub asset_id: _1,
                    pub reserved: runtime_types::sp_arithmetic::per_things::Perquintill,
                    pub manager: _0,
                    pub strategies: subxt::utils::KeyedVec<
                        _0,
                        runtime_types::sp_arithmetic::per_things::Perquintill,
                    >,
                }
            }
            pub mod vesting {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct VestingSchedule<_0, _1, _2, _3> {
                    pub vesting_schedule_id: _0,
                    pub window: runtime_types::composable_traits::vesting::VestingWindow<_1, _2>,
                    pub period_count: _1,
                    #[codec(compact)]
                    pub per_period: _0,
                    pub already_claimed: _0,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_3>,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum VestingScheduleIdSet<_0> {
                    #[codec(index = 0)]
                    All,
                    #[codec(index = 1)]
                    One(_0),
                    #[codec(index = 2)]
                    Many(runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<_0>),
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct VestingScheduleInfo<_0, _1, _2> {
                    pub window: runtime_types::composable_traits::vesting::VestingWindow<_0, _1>,
                    pub period_count: _0,
                    #[codec(compact)]
                    pub per_period: _2,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum VestingWindow<_0, _1> {
                    #[codec(index = 0)]
                    MomentBased { start: _1, period: _1 },
                    #[codec(index = 1)]
                    BlockNumberBased { start: _0, period: _0 },
                }
            }
            pub mod xcm {
                use super::runtime_types;
                pub mod assets {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct ForeignMetadata<_0> {
                        pub decimals: ::core::option::Option<::core::primitive::u8>,
                        pub location: _0,
                    }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct XcmAssetLocation(
                        pub runtime_types::xcm::v1::multilocation::MultiLocation,
                    );
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct CumulusMethodId {
                    pub pallet_instance: ::core::primitive::u8,
                    pub method_id: ::core::primitive::u8,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct XcmSellRequest {
                    pub order_id: ::core::primitive::u64,
                    pub from_to: [::core::primitive::u8; 32usize],
                    pub order: runtime_types::composable_traits::defi::Sell<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    >,
                    pub configuration: ::core::primitive::u128,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct XcmSellRequestTransactConfiguration {
                    pub location: runtime_types::composable_traits::xcm::XcmTransactConfiguration,
                    pub configuration_id: ::core::primitive::u128,
                    pub fee: ::core::primitive::u128,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct XcmTransactConfiguration {
                    pub parachain_id: runtime_types::polkadot_parachain::primitives::Id,
                    pub method_id: runtime_types::composable_traits::xcm::CumulusMethodId,
                }
            }
        }
        pub mod cumulus_pallet_dmp_queue {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Service a single overweight message."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `ExecuteOverweightOrigin`."]
                    #[doc = "- `index`: The index of the overweight message to service."]
                    #[doc = "- `weight_limit`: The amount of weight that message execution may take."]
                    #[doc = ""]
                    #[doc = "Errors:"]
                    #[doc = "- `Unknown`: Message of `index` is unknown."]
                    #[doc = "- `OverLimit`: Message execution may use greater than `weight_limit`."]
                    #[doc = ""]
                    #[doc = "Events:"]
                    #[doc = "- `OverweightServiced`: On success."]
                    service_overweight {
                        index: ::core::primitive::u64,
                        weight_limit: ::core::primitive::u64,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The message index given is unknown."]
                    Unknown,
                    #[codec(index = 1)]
                    #[doc = "The amount of weight given is possibly not enough for executing the message."]
                    OverLimit,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Downward message is invalid XCM."]
                    InvalidFormat {
                        message_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 1)]
                    #[doc = "Downward message is unsupported version of XCM."]
                    UnsupportedVersion {
                        message_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 2)]
                    #[doc = "Downward message executed with the given outcome."]
                    ExecutedDownward {
                        message_id: [::core::primitive::u8; 32usize],
                        outcome: runtime_types::xcm::v2::traits::Outcome,
                    },
                    #[codec(index = 3)]
                    #[doc = "The weight limit for handling downward messages was reached."]
                    WeightExhausted {
                        message_id: [::core::primitive::u8; 32usize],
                        remaining_weight: ::core::primitive::u64,
                        required_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 4)]
                    #[doc = "Downward message is overweight and was placed in the overweight queue."]
                    OverweightEnqueued {
                        message_id: [::core::primitive::u8; 32usize],
                        overweight_index: ::core::primitive::u64,
                        required_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 5)]
                    #[doc = "Downward message from the overweight queue was executed."]
                    OverweightServiced {
                        overweight_index: ::core::primitive::u64,
                        weight_used: ::core::primitive::u64,
                    },
                }
            }
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct ConfigData {
                pub max_individual: ::core::primitive::u64,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct PageIndexData {
                pub begin_used: ::core::primitive::u32,
                pub end_used: ::core::primitive::u32,
                pub overweight_count: ::core::primitive::u64,
            }
        }
        pub mod cumulus_pallet_parachain_system {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "Set the current validation data."] # [doc = ""] # [doc = "This should be invoked exactly once per block. It will panic at the finalization"] # [doc = "phase if the call was not invoked."] # [doc = ""] # [doc = "The dispatch origin for this call must be `Inherent`"] # [doc = ""] # [doc = "As a side effect, this function upgrades the current validation function"] # [doc = "if the appropriate time has come."] set_validation_data { data : runtime_types :: cumulus_primitives_parachain_inherent :: ParachainInherentData , } , # [codec (index = 1)] sudo_send_upward_message { message : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , # [codec (index = 2)] authorize_upgrade { code_hash : subxt :: ext :: sp_core :: H256 , } , # [codec (index = 3)] enact_authorized_upgrade { code : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Attempt to upgrade validation function while existing upgrade pending"]
                    OverlappingUpgrades,
                    #[codec(index = 1)]
                    #[doc = "Polkadot currently prohibits this parachain from upgrading its validation function"]
                    ProhibitedByPolkadot,
                    #[codec(index = 2)]
                    #[doc = "The supplied validation function has compiled into a blob larger than Polkadot is"]
                    #[doc = "willing to run"]
                    TooBig,
                    #[codec(index = 3)]
                    #[doc = "The inherent which supplies the validation data did not run this block"]
                    ValidationDataNotAvailable,
                    #[codec(index = 4)]
                    #[doc = "The inherent which supplies the host configuration did not run this block"]
                    HostConfigurationNotAvailable,
                    #[codec(index = 5)]
                    #[doc = "No validation function upgrade is currently scheduled."]
                    NotScheduled,
                    #[codec(index = 6)]
                    #[doc = "No code upgrade has been authorized."]
                    NothingAuthorized,
                    #[codec(index = 7)]
                    #[doc = "The given code upgrade has not been authorized."]
                    Unauthorized,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The validation function has been scheduled to apply."]
                    ValidationFunctionStored,
                    #[codec(index = 1)]
                    #[doc = "The validation function was applied as of the contained relay chain block number."]
                    ValidationFunctionApplied {
                        relay_chain_block_num: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "The relay-chain aborted the upgrade process."]
                    ValidationFunctionDiscarded,
                    #[codec(index = 3)]
                    #[doc = "An upgrade has been authorized."]
                    UpgradeAuthorized {
                        code_hash: subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 4)]
                    #[doc = "Some downward messages have been received and will be processed."]
                    DownwardMessagesReceived { count: ::core::primitive::u32 },
                    #[codec(index = 5)]
                    #[doc = "Downward messages were processed using the given weight."]
                    DownwardMessagesProcessed {
                        weight_used: ::core::primitive::u64,
                        dmq_head: subxt::ext::sp_core::H256,
                    },
                }
            }
            pub mod relay_state_snapshot {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct MessagingStateSnapshot {
                    pub dmq_mqc_head: subxt::ext::sp_core::H256,
                    pub relay_dispatch_queue_size: (::core::primitive::u32, ::core::primitive::u32),
                    pub ingress_channels: ::std::vec::Vec<(
                        runtime_types::polkadot_parachain::primitives::Id,
                        runtime_types::polkadot_primitives::v2::AbridgedHrmpChannel,
                    )>,
                    pub egress_channels: ::std::vec::Vec<(
                        runtime_types::polkadot_parachain::primitives::Id,
                        runtime_types::polkadot_primitives::v2::AbridgedHrmpChannel,
                    )>,
                }
            }
        }
        pub mod cumulus_pallet_xcm {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {}
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {}
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Downward message is invalid XCM."]
                    #[doc = "\\[ id \\]"]
                    InvalidFormat([::core::primitive::u8; 8usize]),
                    #[codec(index = 1)]
                    #[doc = "Downward message is unsupported version of XCM."]
                    #[doc = "\\[ id \\]"]
                    UnsupportedVersion([::core::primitive::u8; 8usize]),
                    #[codec(index = 2)]
                    #[doc = "Downward message executed with the given outcome."]
                    #[doc = "\\[ id, outcome \\]"]
                    ExecutedDownward(
                        [::core::primitive::u8; 8usize],
                        runtime_types::xcm::v2::traits::Outcome,
                    ),
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum Origin {
                    #[codec(index = 0)]
                    Relay,
                    #[codec(index = 1)]
                    SiblingParachain(runtime_types::polkadot_parachain::primitives::Id),
                }
            }
        }
        pub mod cumulus_pallet_xcmp_queue {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Services a single overweight XCM."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `ExecuteOverweightOrigin`."]
                    #[doc = "- `index`: The index of the overweight XCM to service"]
                    #[doc = "- `weight_limit`: The amount of weight that XCM execution may take."]
                    #[doc = ""]
                    #[doc = "Errors:"]
                    #[doc = "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map."]
                    #[doc = "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format."]
                    #[doc = "- `WeightOverLimit`: XCM execution may use greater `weight_limit`."]
                    #[doc = ""]
                    #[doc = "Events:"]
                    #[doc = "- `OverweightServiced`: On success."]
                    service_overweight {
                        index: ::core::primitive::u64,
                        weight_limit: ::core::primitive::u64,
                    },
                    #[codec(index = 1)]
                    #[doc = "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `ControllerOrigin`."]
                    suspend_xcm_execution,
                    #[codec(index = 2)]
                    #[doc = "Resumes all XCM executions for the XCMP queue."]
                    #[doc = ""]
                    #[doc = "Note that this function doesn't change the status of the in/out bound channels."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `ControllerOrigin`."]
                    resume_xcm_execution,
                    #[codec(index = 3)]
                    #[doc = "Overwrites the number of pages of messages which must be in the queue for the other side to be told to"]
                    #[doc = "suspend their sending."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `Root`."]
                    #[doc = "- `new`: Desired value for `QueueConfigData.suspend_value`"]
                    update_suspend_threshold { new: ::core::primitive::u32 },
                    #[codec(index = 4)]
                    #[doc = "Overwrites the number of pages of messages which must be in the queue after which we drop any further"]
                    #[doc = "messages from the channel."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `Root`."]
                    #[doc = "- `new`: Desired value for `QueueConfigData.drop_threshold`"]
                    update_drop_threshold { new: ::core::primitive::u32 },
                    #[codec(index = 5)]
                    #[doc = "Overwrites the number of pages of messages which the queue must be reduced to before it signals that"]
                    #[doc = "message sending may recommence after it has been suspended."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `Root`."]
                    #[doc = "- `new`: Desired value for `QueueConfigData.resume_threshold`"]
                    update_resume_threshold { new: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    #[doc = "Overwrites the amount of remaining weight under which we stop processing messages."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `Root`."]
                    #[doc = "- `new`: Desired value for `QueueConfigData.threshold_weight`"]
                    update_threshold_weight { new: ::core::primitive::u64 },
                    #[codec(index = 7)]
                    #[doc = "Overwrites the speed to which the available weight approaches the maximum weight."]
                    #[doc = "A lower number results in a faster progression. A value of 1 makes the entire weight available initially."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `Root`."]
                    #[doc = "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."]
                    update_weight_restrict_decay { new: ::core::primitive::u64 },
                    #[codec(index = 8)]
                    #[doc = "Overwrite the maximum amount of weight any individual message may consume."]
                    #[doc = "Messages above this weight go into the overweight queue and may only be serviced explicitly."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `Root`."]
                    #[doc = "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."]
                    update_xcmp_max_individual_weight { new: ::core::primitive::u64 },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Failed to send XCM message."]
                    FailedToSend,
                    #[codec(index = 1)]
                    #[doc = "Bad XCM origin."]
                    BadXcmOrigin,
                    #[codec(index = 2)]
                    #[doc = "Bad XCM data."]
                    BadXcm,
                    #[codec(index = 3)]
                    #[doc = "Bad overweight index."]
                    BadOverweightIndex,
                    #[codec(index = 4)]
                    #[doc = "Provided weight is possibly not enough to execute the message."]
                    WeightOverLimit,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Some XCM was executed ok."]
                    Success {
                        message_hash: ::core::option::Option<subxt::ext::sp_core::H256>,
                        weight: ::core::primitive::u64,
                    },
                    #[codec(index = 1)]
                    #[doc = "Some XCM failed."]
                    Fail {
                        message_hash: ::core::option::Option<subxt::ext::sp_core::H256>,
                        error: runtime_types::xcm::v2::traits::Error,
                        weight: ::core::primitive::u64,
                    },
                    #[codec(index = 2)]
                    #[doc = "Bad XCM version used."]
                    BadVersion {
                        message_hash: ::core::option::Option<subxt::ext::sp_core::H256>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Bad XCM format used."]
                    BadFormat {
                        message_hash: ::core::option::Option<subxt::ext::sp_core::H256>,
                    },
                    #[codec(index = 4)]
                    #[doc = "An upward message was sent to the relay chain."]
                    UpwardMessageSent {
                        message_hash: ::core::option::Option<subxt::ext::sp_core::H256>,
                    },
                    #[codec(index = 5)]
                    #[doc = "An HRMP message was sent to a sibling parachain."]
                    XcmpMessageSent {
                        message_hash: ::core::option::Option<subxt::ext::sp_core::H256>,
                    },
                    #[codec(index = 6)]
                    #[doc = "An XCM exceeded the individual message weight budget."]
                    OverweightEnqueued {
                        sender: runtime_types::polkadot_parachain::primitives::Id,
                        sent_at: ::core::primitive::u32,
                        index: ::core::primitive::u64,
                        required: ::core::primitive::u64,
                    },
                    #[codec(index = 7)]
                    #[doc = "An XCM from the overweight queue was executed with the given actual weight used."]
                    OverweightServiced {
                        index: ::core::primitive::u64,
                        used: ::core::primitive::u64,
                    },
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct InboundChannelDetails {
                pub sender: runtime_types::polkadot_parachain::primitives::Id,
                pub state: runtime_types::cumulus_pallet_xcmp_queue::InboundState,
                pub message_metadata: ::std::vec::Vec<(
                    ::core::primitive::u32,
                    runtime_types::polkadot_parachain::primitives::XcmpMessageFormat,
                )>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum InboundState {
                #[codec(index = 0)]
                Ok,
                #[codec(index = 1)]
                Suspended,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct OutboundChannelDetails {
                pub recipient: runtime_types::polkadot_parachain::primitives::Id,
                pub state: runtime_types::cumulus_pallet_xcmp_queue::OutboundState,
                pub signals_exist: ::core::primitive::bool,
                pub first_index: ::core::primitive::u16,
                pub last_index: ::core::primitive::u16,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum OutboundState {
                #[codec(index = 0)]
                Ok,
                #[codec(index = 1)]
                Suspended,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct QueueConfigData {
                pub suspend_threshold: ::core::primitive::u32,
                pub drop_threshold: ::core::primitive::u32,
                pub resume_threshold: ::core::primitive::u32,
                pub threshold_weight: ::core::primitive::u64,
                pub weight_restrict_decay: ::core::primitive::u64,
                pub xcmp_max_individual_weight: ::core::primitive::u64,
            }
        }
        pub mod cumulus_primitives_parachain_inherent {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct MessageQueueChain(pub subxt::ext::sp_core::H256);
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ParachainInherentData {
                pub validation_data:
                    runtime_types::polkadot_primitives::v2::PersistedValidationData<
                        subxt::ext::sp_core::H256,
                        ::core::primitive::u32,
                    >,
                pub relay_chain_state: runtime_types::sp_trie::storage_proof::StorageProof,
                pub downward_messages: ::std::vec::Vec<
                    runtime_types::polkadot_core_primitives::InboundDownwardMessage<
                        ::core::primitive::u32,
                    >,
                >,
                pub horizontal_messages: subxt::utils::KeyedVec<
                    runtime_types::polkadot_parachain::primitives::Id,
                    ::std::vec::Vec<
                        runtime_types::polkadot_core_primitives::InboundHrmpMessage<
                            ::core::primitive::u32,
                        >,
                    >,
                >,
            }
        }
        pub mod dali_runtime {
            use super::runtime_types;
            pub mod opaque {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct SessionKeys {
                    pub aura: runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum Call {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Call),
                #[codec(index = 1)]
                Timestamp(runtime_types::pallet_timestamp::pallet::Call),
                #[codec(index = 2)]
                Sudo(runtime_types::pallet_sudo::pallet::Call),
                #[codec(index = 12)]
                AssetTxPayment(runtime_types::pallet_asset_tx_payment::pallet::Call),
                #[codec(index = 5)]
                Indices(runtime_types::pallet_indices::pallet::Call),
                #[codec(index = 6)]
                Balances(runtime_types::pallet_balances::pallet::Call),
                #[codec(index = 7)]
                Identity(runtime_types::pallet_identity::pallet::Call),
                #[codec(index = 8)]
                Multisig(runtime_types::pallet_multisig::pallet::Call),
                #[codec(index = 10)]
                ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Call),
                #[codec(index = 11)]
                ParachainInfo(runtime_types::parachain_info::pallet::Call),
                #[codec(index = 20)]
                Authorship(runtime_types::pallet_authorship::pallet::Call),
                #[codec(index = 21)]
                CollatorSelection(runtime_types::pallet_collator_selection::pallet::Call),
                #[codec(index = 22)]
                Session(runtime_types::pallet_session::pallet::Call),
                #[codec(index = 30)]
                Council(runtime_types::pallet_collective::pallet::Call),
                #[codec(index = 31)]
                CouncilMembership(runtime_types::pallet_membership::pallet::Call),
                #[codec(index = 32)]
                Treasury(runtime_types::pallet_treasury::pallet::Call),
                #[codec(index = 33)]
                Democracy(runtime_types::pallet_democracy::pallet::Call),
                #[codec(index = 70)]
                TechnicalCommittee(runtime_types::pallet_collective::pallet::Call),
                #[codec(index = 71)]
                TechnicalCommitteeMembership(runtime_types::pallet_membership::pallet::Call),
                #[codec(index = 34)]
                Scheduler(runtime_types::pallet_scheduler::pallet::Call),
                #[codec(index = 35)]
                Utility(runtime_types::pallet_utility::pallet::Call),
                #[codec(index = 36)]
                Preimage(runtime_types::pallet_preimage::pallet::Call),
                #[codec(index = 37)]
                Proxy(runtime_types::pallet_proxy::pallet::Call),
                #[codec(index = 40)]
                XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Call),
                #[codec(index = 41)]
                RelayerXcm(runtime_types::pallet_xcm::pallet::Call),
                #[codec(index = 42)]
                CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Call),
                #[codec(index = 43)]
                DmpQueue(runtime_types::cumulus_pallet_dmp_queue::pallet::Call),
                #[codec(index = 44)]
                XTokens(runtime_types::orml_xtokens::module::Call),
                #[codec(index = 45)]
                UnknownTokens(runtime_types::orml_unknown_tokens::module::Call),
                #[codec(index = 51)]
                Tokens(runtime_types::orml_tokens::module::Call),
                #[codec(index = 52)]
                Oracle(runtime_types::pallet_oracle::pallet::Call),
                #[codec(index = 53)]
                CurrencyFactory(runtime_types::pallet_currency_factory::pallet::Call),
                #[codec(index = 54)]
                Vault(runtime_types::pallet_vault::pallet::Call),
                #[codec(index = 55)]
                AssetsRegistry(runtime_types::pallet_assets_registry::pallet::Call),
                #[codec(index = 56)]
                GovernanceRegistry(runtime_types::pallet_governance_registry::pallet::Call),
                #[codec(index = 57)]
                Assets(runtime_types::pallet_assets::pallet::Call),
                #[codec(index = 58)]
                CrowdloanRewards(runtime_types::pallet_crowdloan_rewards::pallet::Call),
                #[codec(index = 59)]
                Vesting(runtime_types::pallet_vesting::module::Call),
                #[codec(index = 60)]
                BondedFinance(runtime_types::pallet_bonded_finance::pallet::Call),
                #[codec(index = 61)]
                DutchAuction(runtime_types::pallet_dutch_auction::pallet::Call),
                #[codec(index = 62)]
                Mosaic(runtime_types::pallet_mosaic::pallet::Call),
                #[codec(index = 63)]
                Liquidations(runtime_types::pallet_liquidations::pallet::Call),
                #[codec(index = 64)]
                Lending(runtime_types::pallet_lending::pallet::Call),
                #[codec(index = 65)]
                Pablo(runtime_types::pallet_pablo::pallet::Call),
                #[codec(index = 66)]
                DexRouter(runtime_types::pallet_dex_router::pallet::Call),
                #[codec(index = 68)]
                StakingRewards(runtime_types::pallet_staking_rewards::pallet::Call),
                #[codec(index = 140)]
                CallFilter(runtime_types::pallet_call_filter::pallet::Call),
                #[codec(index = 180)]
                Cosmwasm(runtime_types::pallet_cosmwasm::pallet::Call),
                #[codec(index = 190)]
                Ibc(runtime_types::pallet_ibc::pallet::Call),
                #[codec(index = 191)]
                IbcPing(runtime_types::pallet_ibc_ping::pallet::Call),
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum Event {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Event),
                #[codec(index = 2)]
                Sudo(runtime_types::pallet_sudo::pallet::Event),
                #[codec(index = 4)]
                TransactionPayment(runtime_types::pallet_transaction_payment::pallet::Event),
                #[codec(index = 5)]
                Indices(runtime_types::pallet_indices::pallet::Event),
                #[codec(index = 6)]
                Balances(runtime_types::pallet_balances::pallet::Event),
                #[codec(index = 7)]
                Identity(runtime_types::pallet_identity::pallet::Event),
                #[codec(index = 8)]
                Multisig(runtime_types::pallet_multisig::pallet::Event),
                #[codec(index = 10)]
                ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Event),
                #[codec(index = 21)]
                CollatorSelection(runtime_types::pallet_collator_selection::pallet::Event),
                #[codec(index = 22)]
                Session(runtime_types::pallet_session::pallet::Event),
                #[codec(index = 30)]
                Council(runtime_types::pallet_collective::pallet::Event),
                #[codec(index = 31)]
                CouncilMembership(runtime_types::pallet_membership::pallet::Event),
                #[codec(index = 32)]
                Treasury(runtime_types::pallet_treasury::pallet::Event),
                #[codec(index = 33)]
                Democracy(runtime_types::pallet_democracy::pallet::Event),
                #[codec(index = 70)]
                TechnicalCommittee(runtime_types::pallet_collective::pallet::Event),
                #[codec(index = 71)]
                TechnicalCommitteeMembership(runtime_types::pallet_membership::pallet::Event),
                #[codec(index = 34)]
                Scheduler(runtime_types::pallet_scheduler::pallet::Event),
                #[codec(index = 35)]
                Utility(runtime_types::pallet_utility::pallet::Event),
                #[codec(index = 36)]
                Preimage(runtime_types::pallet_preimage::pallet::Event),
                #[codec(index = 37)]
                Proxy(runtime_types::pallet_proxy::pallet::Event),
                #[codec(index = 40)]
                XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Event),
                #[codec(index = 41)]
                RelayerXcm(runtime_types::pallet_xcm::pallet::Event),
                #[codec(index = 42)]
                CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Event),
                #[codec(index = 43)]
                DmpQueue(runtime_types::cumulus_pallet_dmp_queue::pallet::Event),
                #[codec(index = 44)]
                XTokens(runtime_types::orml_xtokens::module::Event),
                #[codec(index = 45)]
                UnknownTokens(runtime_types::orml_unknown_tokens::module::Event),
                #[codec(index = 51)]
                Tokens(runtime_types::orml_tokens::module::Event),
                #[codec(index = 52)]
                Oracle(runtime_types::pallet_oracle::pallet::Event),
                #[codec(index = 53)]
                CurrencyFactory(runtime_types::pallet_currency_factory::pallet::Event),
                #[codec(index = 54)]
                Vault(runtime_types::pallet_vault::pallet::Event),
                #[codec(index = 55)]
                AssetsRegistry(runtime_types::pallet_assets_registry::pallet::Event),
                #[codec(index = 56)]
                GovernanceRegistry(runtime_types::pallet_governance_registry::pallet::Event),
                #[codec(index = 58)]
                CrowdloanRewards(runtime_types::pallet_crowdloan_rewards::pallet::Event),
                #[codec(index = 59)]
                Vesting(runtime_types::pallet_vesting::module::Event),
                #[codec(index = 60)]
                BondedFinance(runtime_types::pallet_bonded_finance::pallet::Event),
                #[codec(index = 61)]
                DutchAuction(runtime_types::pallet_dutch_auction::pallet::Event),
                #[codec(index = 62)]
                Mosaic(runtime_types::pallet_mosaic::pallet::Event),
                #[codec(index = 63)]
                Liquidations(runtime_types::pallet_liquidations::pallet::Event),
                #[codec(index = 64)]
                Lending(runtime_types::pallet_lending::pallet::Event),
                #[codec(index = 65)]
                Pablo(runtime_types::pallet_pablo::pallet::Event),
                #[codec(index = 66)]
                DexRouter(runtime_types::pallet_dex_router::pallet::Event),
                #[codec(index = 67)]
                Fnft(runtime_types::pallet_fnft::pallet::Event),
                #[codec(index = 68)]
                StakingRewards(runtime_types::pallet_staking_rewards::pallet::Event),
                #[codec(index = 140)]
                CallFilter(runtime_types::pallet_call_filter::pallet::Event),
                #[codec(index = 180)]
                Cosmwasm(runtime_types::pallet_cosmwasm::pallet::Event),
                #[codec(index = 190)]
                Ibc(runtime_types::pallet_ibc::pallet::Event),
                #[codec(index = 191)]
                IbcPing(runtime_types::pallet_ibc_ping::pallet::Event),
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct MaxHopsCount;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum OriginCaller {
                #[codec(index = 0)]
                system(
                    runtime_types::frame_support::dispatch::RawOrigin<
                        subxt::ext::sp_core::crypto::AccountId32,
                    >,
                ),
                #[codec(index = 30)]
                Council(
                    runtime_types::pallet_collective::RawOrigin<
                        subxt::ext::sp_core::crypto::AccountId32,
                    >,
                ),
                #[codec(index = 70)]
                TechnicalCommittee(
                    runtime_types::pallet_collective::RawOrigin<
                        subxt::ext::sp_core::crypto::AccountId32,
                    >,
                ),
                #[codec(index = 41)]
                RelayerXcm(runtime_types::pallet_xcm::pallet::Origin),
                #[codec(index = 42)]
                CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Origin),
                #[codec(index = 5)]
                Void(runtime_types::sp_core::Void),
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Runtime;
        }
        pub mod frame_support {
            use super::runtime_types;
            pub mod dispatch {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum RawOrigin<_0> {
                    #[codec(index = 0)]
                    Root,
                    #[codec(index = 1)]
                    Signed(_0),
                    #[codec(index = 2)]
                    None,
                }
            }
            pub mod traits {
                use super::runtime_types;
                pub mod misc {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct WrapperKeepOpaque<_0>(
                        #[codec(compact)] pub ::core::primitive::u32,
                        pub _0,
                    );
                }
                pub mod schedule {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum LookupError {
                        #[codec(index = 0)]
                        Unknown,
                        #[codec(index = 1)]
                        BadFormat,
                    }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum MaybeHashed<_0, _1> {
                        #[codec(index = 0)]
                        Value(_0),
                        #[codec(index = 1)]
                        Hash(_1),
                    }
                }
                pub mod tokens {
                    use super::runtime_types;
                    pub mod misc {
                        use super::runtime_types;
                        #[derive(
                            Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                        )]
                        pub enum BalanceStatus {
                            #[codec(index = 0)]
                            Free,
                            #[codec(index = 1)]
                            Reserved,
                        }
                    }
                }
            }
            pub mod weights {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum DispatchClass {
                    #[codec(index = 0)]
                    Normal,
                    #[codec(index = 1)]
                    Operational,
                    #[codec(index = 2)]
                    Mandatory,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct DispatchInfo {
                    pub weight: ::core::primitive::u64,
                    pub class: runtime_types::frame_support::weights::DispatchClass,
                    pub pays_fee: runtime_types::frame_support::weights::Pays,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum Pays {
                    #[codec(index = 0)]
                    Yes,
                    #[codec(index = 1)]
                    No,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct PerDispatchClass<_0> {
                    pub normal: _0,
                    pub operational: _0,
                    pub mandatory: _0,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct RuntimeDbWeight {
                    pub read: ::core::primitive::u64,
                    pub write: ::core::primitive::u64,
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct PalletId(pub [::core::primitive::u8; 8usize]);
        }
        pub mod frame_system {
            use super::runtime_types;
            pub mod extensions {
                use super::runtime_types;
                pub mod check_genesis {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct CheckGenesis;
                }
                pub mod check_mortality {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct CheckMortality(pub runtime_types::sp_runtime::generic::era::Era);
                }
                pub mod check_non_zero_sender {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct CheckNonZeroSender;
                }
                pub mod check_nonce {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct CheckNonce(#[codec(compact)] pub ::core::primitive::u32);
                }
                pub mod check_spec_version {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct CheckSpecVersion;
                }
                pub mod check_tx_version {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct CheckTxVersion;
                }
                pub mod check_weight {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct CheckWeight;
                }
            }
            pub mod limits {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct BlockLength {
                    pub max: runtime_types::frame_support::weights::PerDispatchClass<
                        ::core::primitive::u32,
                    >,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct BlockWeights {
                    pub base_block: ::core::primitive::u64,
                    pub max_block: ::core::primitive::u64,
                    pub per_class: runtime_types::frame_support::weights::PerDispatchClass<
                        runtime_types::frame_system::limits::WeightsPerClass,
                    >,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct WeightsPerClass {
                    pub base_extrinsic: ::core::primitive::u64,
                    pub max_extrinsic: ::core::option::Option<::core::primitive::u64>,
                    pub max_total: ::core::option::Option<::core::primitive::u64>,
                    pub reserved: ::core::option::Option<::core::primitive::u64>,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "A dispatch that will fill the block weight up to the given ratio."]
                    fill_block {
                        ratio: runtime_types::sp_arithmetic::per_things::Perbill,
                    },
                    #[codec(index = 1)]
                    #[doc = "Make some on-chain remark."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(1)`"]
                    #[doc = "# </weight>"]
                    remark {
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 2)]
                    #[doc = "Set the number of pages in the WebAssembly environment's heap."]
                    set_heap_pages { pages: ::core::primitive::u64 },
                    #[codec(index = 3)]
                    #[doc = "Set the new runtime code."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"]
                    #[doc = "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is"]
                    #[doc = "  expensive)."]
                    #[doc = "- 1 storage write (codec `O(C)`)."]
                    #[doc = "- 1 digest item."]
                    #[doc = "- 1 event."]
                    #[doc = "The weight of this function is dependent on the runtime, but generally this is very"]
                    #[doc = "expensive. We will treat this as a full block."]
                    #[doc = "# </weight>"]
                    set_code {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 4)]
                    #[doc = "Set the new runtime code without doing any checks of the given `code`."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(C)` where `C` length of `code`"]
                    #[doc = "- 1 storage write (codec `O(C)`)."]
                    #[doc = "- 1 digest item."]
                    #[doc = "- 1 event."]
                    #[doc = "The weight of this function is dependent on the runtime. We will treat this as a full"]
                    #[doc = "block. # </weight>"]
                    set_code_without_checks {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 5)]
                    #[doc = "Set some items of storage."]
                    set_storage {
                        items: ::std::vec::Vec<(
                            ::std::vec::Vec<::core::primitive::u8>,
                            ::std::vec::Vec<::core::primitive::u8>,
                        )>,
                    },
                    #[codec(index = 6)]
                    #[doc = "Kill some items from storage."]
                    kill_storage {
                        keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    },
                    #[codec(index = 7)]
                    #[doc = "Kill all storage items with a key that starts with the given prefix."]
                    #[doc = ""]
                    #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
                    #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
                    kill_prefix {
                        prefix: ::std::vec::Vec<::core::primitive::u8>,
                        subkeys: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "Make some on-chain remark and emit event."]
                    remark_with_event {
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Error for the System pallet"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The name of specification does not match between the current runtime"]
                    #[doc = "and the new runtime."]
                    InvalidSpecName,
                    #[codec(index = 1)]
                    #[doc = "The specification version is not allowed to decrease between the current runtime"]
                    #[doc = "and the new runtime."]
                    SpecVersionNeedsToIncrease,
                    #[codec(index = 2)]
                    #[doc = "Failed to extract the runtime version from the new runtime."]
                    #[doc = ""]
                    #[doc = "Either calling `Core_version` or decoding `RuntimeVersion` failed."]
                    FailedToExtractRuntimeVersion,
                    #[codec(index = 3)]
                    #[doc = "Suicide called when the account has non-default composite data."]
                    NonDefaultComposite,
                    #[codec(index = 4)]
                    #[doc = "There is a non-zero reference count preventing the account from being purged."]
                    NonZeroRefCount,
                    #[codec(index = 5)]
                    #[doc = "The origin filter prevent the call to be dispatched."]
                    CallFiltered,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Event for the System pallet."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An extrinsic completed successfully."]
                    ExtrinsicSuccess {
                        dispatch_info: runtime_types::frame_support::weights::DispatchInfo,
                    },
                    #[codec(index = 1)]
                    #[doc = "An extrinsic failed."]
                    ExtrinsicFailed {
                        dispatch_error: runtime_types::sp_runtime::DispatchError,
                        dispatch_info: runtime_types::frame_support::weights::DispatchInfo,
                    },
                    #[codec(index = 2)]
                    #[doc = "`:code` was updated."]
                    CodeUpdated,
                    #[codec(index = 3)]
                    #[doc = "A new account was created."]
                    NewAccount {
                        account: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 4)]
                    #[doc = "An account was reaped."]
                    KilledAccount {
                        account: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "On on-chain remark happened."]
                    Remarked {
                        sender: subxt::ext::sp_core::crypto::AccountId32,
                        hash: subxt::ext::sp_core::H256,
                    },
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AccountInfo<_0, _1> {
                pub nonce: _0,
                pub consumers: _0,
                pub providers: _0,
                pub sufficients: _0,
                pub data: _1,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct EventRecord<_0, _1> {
                pub phase: runtime_types::frame_system::Phase,
                pub event: _0,
                pub topics: ::std::vec::Vec<_1>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct LastRuntimeUpgradeInfo {
                #[codec(compact)]
                pub spec_version: ::core::primitive::u32,
                pub spec_name: ::std::string::String,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum Phase {
                #[codec(index = 0)]
                ApplyExtrinsic(::core::primitive::u32),
                #[codec(index = 1)]
                Finalization,
                #[codec(index = 2)]
                Initialization,
            }
        }
        pub mod ibc_primitives {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum Timeout {
                #[codec(index = 0)]
                Offset {
                    timestamp: ::core::option::Option<::core::primitive::u64>,
                    height: ::core::option::Option<::core::primitive::u64>,
                },
                #[codec(index = 1)]
                Absolute {
                    timestamp: ::core::option::Option<::core::primitive::u64>,
                    height: ::core::option::Option<::core::primitive::u64>,
                },
            }
        }
        pub mod orml_tokens {
            use super::runtime_types;
            pub mod module {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Transfer some liquid free balance to another account."]
                    #[doc = ""]
                    #[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
                    #[doc = "It will decrease the total issuance of the system by the"]
                    #[doc = "`TransferFee`. If the sender's account is below the existential"]
                    #[doc = "deposit as a result of the transfer, the account will be reaped."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Signed` by the"]
                    #[doc = "transactor."]
                    #[doc = ""]
                    #[doc = "- `dest`: The recipient of the transfer."]
                    #[doc = "- `currency_id`: currency type."]
                    #[doc = "- `amount`: free balance amount to tranfer."]
                    transfer {
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Transfer all remaining balance to the given account."]
                    #[doc = ""]
                    #[doc = "NOTE: This function only attempts to transfer _transferable_"]
                    #[doc = "balances. This means that any locked, reserved, or existential"]
                    #[doc = "deposits (when `keep_alive` is `true`), will not be transferred by"]
                    #[doc = "this function. To ensure that this function results in a killed"]
                    #[doc = "account, you might need to prepare the account by removing any"]
                    #[doc = "reference counters, storage deposits, etc..."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Signed` by the"]
                    #[doc = "transactor."]
                    #[doc = ""]
                    #[doc = "- `dest`: The recipient of the transfer."]
                    #[doc = "- `currency_id`: currency type."]
                    #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all`"]
                    #[doc = "  operation should send all of the funds the account has, causing"]
                    #[doc = "  the sender account to be killed (false), or transfer everything"]
                    #[doc = "  except at least the existential deposit, which will guarantee to"]
                    #[doc = "  keep the sender account alive (true)."]
                    transfer_all {
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    #[doc = "Same as the [`transfer`] call, but with a check that the transfer"]
                    #[doc = "will not kill the origin account."]
                    #[doc = ""]
                    #[doc = "99% of the time you want [`transfer`] instead."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Signed` by the"]
                    #[doc = "transactor."]
                    #[doc = ""]
                    #[doc = "- `dest`: The recipient of the transfer."]
                    #[doc = "- `currency_id`: currency type."]
                    #[doc = "- `amount`: free balance amount to tranfer."]
                    transfer_keep_alive {
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Exactly as `transfer`, except the origin must be root and the source"]
                    #[doc = "account may be specified."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "- `source`: The sender of the transfer."]
                    #[doc = "- `dest`: The recipient of the transfer."]
                    #[doc = "- `currency_id`: currency type."]
                    #[doc = "- `amount`: free balance amount to tranfer."]
                    force_transfer {
                        source: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Set the balances of a given account."]
                    #[doc = ""]
                    #[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it"]
                    #[doc = "will also decrease the total issuance of the system"]
                    #[doc = "(`TotalIssuance`). If the new free or reserved balance is below the"]
                    #[doc = "existential deposit, it will reap the `AccountInfo`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call is `root`."]
                    set_balance {
                        who: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        #[codec(compact)]
                        new_free: ::core::primitive::u128,
                        #[codec(compact)]
                        new_reserved: ::core::primitive::u128,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The balance is too low"]
                    BalanceTooLow,
                    #[codec(index = 1)]
                    #[doc = "Cannot convert Amount into Balance type"]
                    AmountIntoBalanceFailed,
                    #[codec(index = 2)]
                    #[doc = "Failed because liquidity restrictions due to locking"]
                    LiquidityRestrictions,
                    #[codec(index = 3)]
                    #[doc = "Failed because the maximum locks was exceeded"]
                    MaxLocksExceeded,
                    #[codec(index = 4)]
                    #[doc = "Transfer/payment would kill account"]
                    KeepAlive,
                    #[codec(index = 5)]
                    #[doc = "Value too low to create account due to existential deposit"]
                    ExistentialDeposit,
                    #[codec(index = 6)]
                    #[doc = "Beneficiary account must pre-exist"]
                    DeadAccount,
                    #[codec(index = 7)]
                    TooManyReserves,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An account was created with some free balance."]
                    Endowed {
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "An account was removed whose balance was non-zero but below"]
                    #[doc = "ExistentialDeposit, resulting in an outright loss."]
                    DustLost {
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Transfer succeeded."]
                    Transfer {
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        from: subxt::ext::sp_core::crypto::AccountId32,
                        to: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Some balance was reserved (moved from free to reserved)."]
                    Reserved {
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Some balance was unreserved (moved from reserved to free)."]
                    Unreserved {
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Some reserved balance was repatriated (moved from reserved to"]
                    #[doc = "another account)."]
                    ReserveRepatriated {
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        from: subxt::ext::sp_core::crypto::AccountId32,
                        to: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                        status: runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
                    },
                    #[codec(index = 6)]
                    #[doc = "A balance was set by root."]
                    BalanceSet {
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        free: ::core::primitive::u128,
                        reserved: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    #[doc = "The total issuance of an currency has been set"]
                    TotalIssuanceSet {
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some balances were withdrawn (e.g. pay for transaction fee)"]
                    Withdrawn {
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "Some balances were slashed (e.g. due to mis-behavior)"]
                    Slashed {
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        free_amount: ::core::primitive::u128,
                        reserved_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    #[doc = "Deposited some balance into an account"]
                    Deposited {
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 11)]
                    #[doc = "Some funds are locked"]
                    LockSet {
                        lock_id: [::core::primitive::u8; 8usize],
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 12)]
                    #[doc = "Some locked funds were unlocked"]
                    LockRemoved {
                        lock_id: [::core::primitive::u8; 8usize],
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        who: subxt::ext::sp_core::crypto::AccountId32,
                    },
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AccountData<_0> {
                pub free: _0,
                pub reserved: _0,
                pub frozen: _0,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct BalanceLock<_0> {
                pub id: [::core::primitive::u8; 8usize],
                pub amount: _0,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ReserveData<_0, _1> {
                pub id: _0,
                pub amount: _1,
            }
        }
        pub mod orml_unknown_tokens {
            use super::runtime_types;
            pub mod module {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {}
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The balance is too low."]
                    BalanceTooLow,
                    #[codec(index = 1)]
                    #[doc = "The operation will cause balance to overflow."]
                    BalanceOverflow,
                    #[codec(index = 2)]
                    #[doc = "Unhandled asset."]
                    UnhandledAsset,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Deposit success."]
                    Deposited {
                        asset: runtime_types::xcm::v1::multiasset::MultiAsset,
                        who: runtime_types::xcm::v1::multilocation::MultiLocation,
                    },
                    #[codec(index = 1)]
                    #[doc = "Withdraw success."]
                    Withdrawn {
                        asset: runtime_types::xcm::v1::multiasset::MultiAsset,
                        who: runtime_types::xcm::v1::multilocation::MultiLocation,
                    },
                }
            }
        }
        pub mod orml_xtokens {
            use super::runtime_types;
            pub mod module {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Transfer native currencies."]
                    #[doc = ""]
                    #[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
                    #[doc = "it would be charged from the transferred assets. If set below"]
                    #[doc = "requirements, the execution may fail and assets wouldn't be"]
                    #[doc = "received."]
                    #[doc = ""]
                    #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                    #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                    #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                    #[doc = "by the network, and if the receiving chain would handle"]
                    #[doc = "messages correctly."]
                    transfer {
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        amount: ::core::primitive::u128,
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        dest_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 1)]
                    #[doc = "Transfer `MultiAsset`."]
                    #[doc = ""]
                    #[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
                    #[doc = "it would be charged from the transferred assets. If set below"]
                    #[doc = "requirements, the execution may fail and assets wouldn't be"]
                    #[doc = "received."]
                    #[doc = ""]
                    #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                    #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                    #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                    #[doc = "by the network, and if the receiving chain would handle"]
                    #[doc = "messages correctly."]
                    transfer_multiasset {
                        asset: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        dest_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 2)]
                    #[doc = "Transfer native currencies specifying the fee and amount as"]
                    #[doc = "separate."]
                    #[doc = ""]
                    #[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
                    #[doc = "it would be charged from the transferred assets. If set below"]
                    #[doc = "requirements, the execution may fail and assets wouldn't be"]
                    #[doc = "received."]
                    #[doc = ""]
                    #[doc = "`fee` is the amount to be spent to pay for execution in destination"]
                    #[doc = "chain. Both fee and amount will be subtracted form the callers"]
                    #[doc = "balance."]
                    #[doc = ""]
                    #[doc = "If `fee` is not high enough to cover for the execution costs in the"]
                    #[doc = "destination chain, then the assets will be trapped in the"]
                    #[doc = "destination chain"]
                    #[doc = ""]
                    #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                    #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                    #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                    #[doc = "by the network, and if the receiving chain would handle"]
                    #[doc = "messages correctly."]
                    transfer_with_fee {
                        currency_id: runtime_types::primitives::currency::CurrencyId,
                        amount: ::core::primitive::u128,
                        fee: ::core::primitive::u128,
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        dest_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 3)]
                    #[doc = "Transfer `MultiAsset` specifying the fee and amount as separate."]
                    #[doc = ""]
                    #[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
                    #[doc = "it would be charged from the transferred assets. If set below"]
                    #[doc = "requirements, the execution may fail and assets wouldn't be"]
                    #[doc = "received."]
                    #[doc = ""]
                    #[doc = "`fee` is the multiasset to be spent to pay for execution in"]
                    #[doc = "destination chain. Both fee and amount will be subtracted form the"]
                    #[doc = "callers balance For now we only accept fee and asset having the same"]
                    #[doc = "`MultiLocation` id."]
                    #[doc = ""]
                    #[doc = "If `fee` is not high enough to cover for the execution costs in the"]
                    #[doc = "destination chain, then the assets will be trapped in the"]
                    #[doc = "destination chain"]
                    #[doc = ""]
                    #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                    #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                    #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                    #[doc = "by the network, and if the receiving chain would handle"]
                    #[doc = "messages correctly."]
                    transfer_multiasset_with_fee {
                        asset: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
                        fee: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        dest_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 4)]
                    #[doc = "Transfer several currencies specifying the item to be used as fee"]
                    #[doc = ""]
                    #[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
                    #[doc = "it would be charged from the transferred assets. If set below"]
                    #[doc = "requirements, the execution may fail and assets wouldn't be"]
                    #[doc = "received."]
                    #[doc = ""]
                    #[doc = "`fee_item` is index of the currencies tuple that we want to use for"]
                    #[doc = "payment"]
                    #[doc = ""]
                    #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                    #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                    #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                    #[doc = "by the network, and if the receiving chain would handle"]
                    #[doc = "messages correctly."]
                    transfer_multicurrencies {
                        currencies: ::std::vec::Vec<(
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                        )>,
                        fee_item: ::core::primitive::u32,
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        dest_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 5)]
                    #[doc = "Transfer several `MultiAsset` specifying the item to be used as fee"]
                    #[doc = ""]
                    #[doc = "`dest_weight` is the weight for XCM execution on the dest chain, and"]
                    #[doc = "it would be charged from the transferred assets. If set below"]
                    #[doc = "requirements, the execution may fail and assets wouldn't be"]
                    #[doc = "received."]
                    #[doc = ""]
                    #[doc = "`fee_item` is index of the MultiAssets that we want to use for"]
                    #[doc = "payment"]
                    #[doc = ""]
                    #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                    #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                    #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                    #[doc = "by the network, and if the receiving chain would handle"]
                    #[doc = "messages correctly."]
                    transfer_multiassets {
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_item: ::core::primitive::u32,
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        dest_weight: ::core::primitive::u64,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Asset has no reserve location."]
                    AssetHasNoReserve,
                    #[codec(index = 1)]
                    #[doc = "Not cross-chain transfer."]
                    NotCrossChainTransfer,
                    #[codec(index = 2)]
                    #[doc = "Invalid transfer destination."]
                    InvalidDest,
                    #[codec(index = 3)]
                    #[doc = "Currency is not cross-chain transferable."]
                    NotCrossChainTransferableCurrency,
                    #[codec(index = 4)]
                    #[doc = "The message's weight could not be determined."]
                    UnweighableMessage,
                    #[codec(index = 5)]
                    #[doc = "XCM execution failed."]
                    XcmExecutionFailed,
                    #[codec(index = 6)]
                    #[doc = "Could not re-anchor the assets to declare the fees for the"]
                    #[doc = "destination chain."]
                    CannotReanchor,
                    #[codec(index = 7)]
                    #[doc = "Could not get ancestry of asset reserve location."]
                    InvalidAncestry,
                    #[codec(index = 8)]
                    #[doc = "The MultiAsset is invalid."]
                    InvalidAsset,
                    #[codec(index = 9)]
                    #[doc = "The destination `MultiLocation` provided cannot be inverted."]
                    DestinationNotInvertible,
                    #[codec(index = 10)]
                    #[doc = "The version of the `Versioned` value used is not able to be"]
                    #[doc = "interpreted."]
                    BadVersion,
                    #[codec(index = 11)]
                    #[doc = "We tried sending distinct asset and fee but they have different"]
                    #[doc = "reserve chains."]
                    DistinctReserveForAssetAndFee,
                    #[codec(index = 12)]
                    #[doc = "The fee is zero."]
                    ZeroFee,
                    #[codec(index = 13)]
                    #[doc = "The transfering asset amount is zero."]
                    ZeroAmount,
                    #[codec(index = 14)]
                    #[doc = "The number of assets to be sent is over the maximum."]
                    TooManyAssetsBeingSent,
                    #[codec(index = 15)]
                    #[doc = "The specified index does not exist in a MultiAssets struct."]
                    AssetIndexNonExistent,
                    #[codec(index = 16)]
                    #[doc = "Fee is not enough."]
                    FeeNotEnough,
                    #[codec(index = 17)]
                    #[doc = "Not supported MultiLocation"]
                    NotSupportedMultiLocation,
                    #[codec(index = 18)]
                    #[doc = "MinXcmFee not registered for certain reserve location"]
                    MinXcmFeeNotDefined,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Transferred `MultiAsset` with fee."]
                    TransferredMultiAssets {
                        sender: subxt::ext::sp_core::crypto::AccountId32,
                        assets: runtime_types::xcm::v1::multiasset::MultiAssets,
                        fee: runtime_types::xcm::v1::multiasset::MultiAsset,
                        dest: runtime_types::xcm::v1::multilocation::MultiLocation,
                    },
                }
            }
        }
        pub mod pallet_asset_tx_payment {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Sets or resets payment asset."]
                    #[doc = ""]
                    #[doc = "If `asset_id` is `None`, then native asset is used."]
                    #[doc = "Else new asset is configured and ED is on hold."]
                    set_payment_asset {
                        payer: subxt::ext::sp_core::crypto::AccountId32,
                        asset_id:
                            ::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
                    },
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ChargeAssetTxPayment {
                #[codec(compact)]
                pub tip: ::core::primitive::u128,
                pub asset_id:
                    ::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
            }
        }
        pub mod pallet_assets {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Transfer `amount` of `asset` from `origin` to `dest`."]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = " - When `origin` is not signed."]
                    #[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
                    #[doc = "   cannot be respected."]
                    #[doc = " - If the `dest` cannot be looked up."]
                    transfer {
                        asset: runtime_types::primitives::currency::CurrencyId,
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 1)]
                    #[doc = "Transfer `amount` of the native asset from `origin` to `dest`. This is slightly"]
                    #[doc = "cheaper to call, as it avoids an asset lookup."]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = " - When `origin` is not signed."]
                    #[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
                    #[doc = "   cannot be respected."]
                    #[doc = " - If the `dest` cannot be looked up."]
                    transfer_native {
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    #[doc = "Transfer `amount` of the `asset` from `origin` to `dest`. This requires root."]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = " - When `origin` is not root."]
                    #[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
                    #[doc = "   cannot be respected."]
                    #[doc = " - If the `dest` cannot be looked up."]
                    force_transfer {
                        asset: runtime_types::primitives::currency::CurrencyId,
                        source: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 3)]
                    #[doc = "Transfer `amount` of the the native asset from `origin` to `dest`. This requires root."]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = " - When `origin` is not root."]
                    #[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
                    #[doc = "   cannot be respected."]
                    #[doc = " - If the `dest` cannot be looked up."]
                    force_transfer_native {
                        source: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 4)]
                    #[doc = "Transfer all free balance of the `asset` from `origin` to `dest`."]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = " - When `origin` is not signed."]
                    #[doc = " - If the `dest` cannot be looked up."]
                    transfer_all {
                        asset: runtime_types::primitives::currency::CurrencyId,
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "Transfer all free balance of the native asset from `origin` to `dest`."]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = " - When `origin` is not signed."]
                    #[doc = " - If the `dest` cannot be looked up."]
                    transfer_all_native {
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 6)]
                    #[doc = "Creates a new asset, minting `amount` of funds into the `dest` account. Intended to be"]
                    #[doc = "used for creating wrapped assets, not associated with any project."]
                    mint_initialize {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 7)]
                    #[doc = "Creates a new asset, minting `amount` of funds into the `dest` account. The `dest`"]
                    #[doc = "account can use the democracy pallet to mint further assets, or if the governance_origin"]
                    #[doc = "is set to an owned account, using signed transactions. In general the"]
                    #[doc = "`governance_origin` should be generated from the pallet id."]
                    mint_initialize_with_governance {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        governance_origin: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 8)]
                    #[doc = "Mints `amount` of `asset_id` into the `dest` account."]
                    mint_into {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "Burns `amount` of `asset_id` into the `dest` account."]
                    burn_from {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    CannotSetNewCurrencyToRegistry,
                    #[codec(index = 1)]
                    InvalidCurrency,
                }
            }
        }
        pub mod pallet_assets_registry {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Creates asset using `CurrencyFactory`."]
                    #[doc = "Raises `AssetRegistered` event"]
                    #[doc = ""]
                    #[doc = "Sets only required fields by `CurrencyFactory`, to upsert metadata use referenced"]
                    #[doc = "pallet."]
                    #[doc = ""]
                    #[doc = "# Parameters:"]
                    #[doc = ""]
                    #[doc = "`ratio` -  "]
                    #[doc = "Allows `bring you own gas` fees."]
                    #[doc = "Set to `None` to prevent payment in this asset, only transferring."]
                    #[doc = "Setting to some will NOT start minting tokens with specified ratio."]
                    #[doc = ""]
                    #[doc = "```python"]
                    #[doc = " ratio = foreign_token / native_token"]
                    #[doc = " amount_of_foreign_asset = amount_of_native_asset * ratio"]
                    #[doc = "```"]
                    #[doc = ""]
                    #[doc = "`decimals` - `human` number of decimals"]
                    #[doc = ""]
                    #[doc = "`ed` - same meaning as in for foreign asset account (if None, then asset is not"]
                    #[doc = "sufficient)"]
                    register_asset {
                        location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
                        ratio: runtime_types::composable_traits::currency::Rational64,
                        decimals: ::core::option::Option<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Given well existing asset, update its remote information."]
                    #[doc = "Use with caution as it allow reroute assets location."]
                    #[doc = "See `register_asset` for parameters meaning."]
                    update_asset {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
                        ratio: runtime_types::composable_traits::currency::Rational64,
                        decimals: ::core::option::Option<::core::primitive::u8>,
                    },
                    #[codec(index = 2)]
                    #[doc = "Minimal amount of `foreign_asset_id` required to send message to other network."]
                    #[doc = "Target network may or may not accept payment `amount`."]
                    #[doc = "Assumed this is maintained up to date by technical team."]
                    #[doc = "Mostly UI hint and fail fast solution."]
                    #[doc = "Messages sending smaller fee will not be sent."]
                    #[doc = "In theory can be updated by parachain sovereign account too."]
                    #[doc = "If None, than it is well known cannot pay with that asset on target_parachain_id."]
                    #[doc = "If Some(0), than price can be anything greater or equal to zero."]
                    #[doc = "If Some(MAX), than actually it forbids transfers."]
                    set_min_fee {
                        target_parachain_id: runtime_types::polkadot_parachain::primitives::Id,
                        foreign_asset_id:
                            runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
                        amount: ::core::option::Option<::core::primitive::u128>,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    AssetNotFound,
                    #[codec(index = 1)]
                    ForeignAssetAlreadyRegistered,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    AssetRegistered {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
                        decimals: ::core::option::Option<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    AssetUpdated {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        location: runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
                        decimals: ::core::option::Option<::core::primitive::u8>,
                    },
                    #[codec(index = 2)]
                    MinFeeUpdated {
                        target_parachain_id: runtime_types::polkadot_parachain::primitives::Id,
                        foreign_asset_id:
                            runtime_types::composable_traits::xcm::assets::XcmAssetLocation,
                        amount: ::core::option::Option<::core::primitive::u128>,
                    },
                }
            }
        }
        pub mod pallet_authorship {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Provide a set of uncles."]
                    set_uncles {
                        new_uncles: ::std::vec::Vec<
                            runtime_types::sp_runtime::generic::header::Header<
                                ::core::primitive::u32,
                                runtime_types::sp_runtime::traits::BlakeTwo256,
                            >,
                        >,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The uncle parent not in the chain."]
                    InvalidUncleParent,
                    #[codec(index = 1)]
                    #[doc = "Uncles already set in the block."]
                    UnclesAlreadySet,
                    #[codec(index = 2)]
                    #[doc = "Too many uncles."]
                    TooManyUncles,
                    #[codec(index = 3)]
                    #[doc = "The uncle is genesis."]
                    GenesisUncle,
                    #[codec(index = 4)]
                    #[doc = "The uncle is too high in chain."]
                    TooHighUncle,
                    #[codec(index = 5)]
                    #[doc = "The uncle is already included."]
                    UncleAlreadyIncluded,
                    #[codec(index = 6)]
                    #[doc = "The uncle isn't recent enough to be included."]
                    OldUncle,
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum UncleEntryItem<_0, _1, _2> {
                #[codec(index = 0)]
                InclusionHeight(_0),
                #[codec(index = 1)]
                Uncle(_1, ::core::option::Option<_2>),
            }
        }
        pub mod pallet_balances {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Transfer some liquid free balance to another account."]
                    #[doc = ""]
                    #[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
                    #[doc = "If the sender's account is below the existential deposit as a result"]
                    #[doc = "of the transfer, the account will be reaped."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Dependent on arguments but not critical, given proper implementations for input config"]
                    #[doc = "  types. See related functions below."]
                    #[doc = "- It contains a limited number of reads and writes internally and no complex"]
                    #[doc = "  computation."]
                    #[doc = ""]
                    #[doc = "Related functions:"]
                    #[doc = ""]
                    #[doc = "  - `ensure_can_withdraw` is always called internally but has a bounded complexity."]
                    #[doc = "  - Transferring balances to accounts that did not exist before will cause"]
                    #[doc = "    `T::OnNewAccount::on_new_account` to be called."]
                    #[doc = "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`."]
                    #[doc = "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check"]
                    #[doc = "    that the transfer will not kill the origin account."]
                    #[doc = "---------------------------------"]
                    #[doc = "- Origin account is already in memory, so no DB operations for them."]
                    #[doc = "# </weight>"]
                    transfer {
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Set the balances of a given account."]
                    #[doc = ""]
                    #[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it will"]
                    #[doc = "also alter the total issuance of the system (`TotalIssuance`) appropriately."]
                    #[doc = "If the new free or reserved balance is below the existential deposit,"]
                    #[doc = "it will reset the account nonce (`frame_system::AccountNonce`)."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call is `root`."]
                    set_balance {
                        who: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        new_free: ::core::primitive::u128,
                        #[codec(compact)]
                        new_reserved: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Exactly as `transfer`, except the origin must be root and the source account may be"]
                    #[doc = "specified."]
                    #[doc = "# <weight>"]
                    #[doc = "- Same as transfer, but additional read and write because the source account is not"]
                    #[doc = "  assumed to be in the overlay."]
                    #[doc = "# </weight>"]
                    force_transfer {
                        source: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Same as the [`transfer`] call, but with a check that the transfer will not kill the"]
                    #[doc = "origin account."]
                    #[doc = ""]
                    #[doc = "99% of the time you want [`transfer`] instead."]
                    #[doc = ""]
                    #[doc = "[`transfer`]: struct.Pallet.html#method.transfer"]
                    transfer_keep_alive {
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Transfer the entire transferable balance from the caller account."]
                    #[doc = ""]
                    #[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
                    #[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
                    #[doc = "transferred by this function. To ensure that this function results in a killed account,"]
                    #[doc = "you might need to prepare the account by removing any reference counters, storage"]
                    #[doc = "deposits, etc..."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be Signed."]
                    #[doc = ""]
                    #[doc = "- `dest`: The recipient of the transfer."]
                    #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
                    #[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
                    #[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
                    #[doc = "  keep the sender account alive (true). # <weight>"]
                    #[doc = "- O(1). Just like transfer, but reading the user's transferable balance first."]
                    #[doc = "  #</weight>"]
                    transfer_all {
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "Unreserve some balance from a user by force."]
                    #[doc = ""]
                    #[doc = "Can only be called by ROOT."]
                    force_unreserve {
                        who: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        amount: ::core::primitive::u128,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Vesting balance too high to send value"]
                    VestingBalance,
                    #[codec(index = 1)]
                    #[doc = "Account liquidity restrictions prevent withdrawal"]
                    LiquidityRestrictions,
                    #[codec(index = 2)]
                    #[doc = "Balance too low to send value"]
                    InsufficientBalance,
                    #[codec(index = 3)]
                    #[doc = "Value too low to create account due to existential deposit"]
                    ExistentialDeposit,
                    #[codec(index = 4)]
                    #[doc = "Transfer/payment would kill account"]
                    KeepAlive,
                    #[codec(index = 5)]
                    #[doc = "A vesting schedule already exists for this account"]
                    ExistingVestingSchedule,
                    #[codec(index = 6)]
                    #[doc = "Beneficiary account must pre-exist"]
                    DeadAccount,
                    #[codec(index = 7)]
                    #[doc = "Number of named reserves exceed MaxReserves"]
                    TooManyReserves,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An account was created with some free balance."]
                    Endowed {
                        account: subxt::ext::sp_core::crypto::AccountId32,
                        free_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
                    #[doc = "resulting in an outright loss."]
                    DustLost {
                        account: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Transfer succeeded."]
                    Transfer {
                        from: subxt::ext::sp_core::crypto::AccountId32,
                        to: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "A balance was set by root."]
                    BalanceSet {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        free: ::core::primitive::u128,
                        reserved: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Some balance was reserved (moved from free to reserved)."]
                    Reserved {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Some balance was unreserved (moved from reserved to free)."]
                    Unreserved {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some balance was moved from the reserve of the first account to the second account."]
                    #[doc = "Final argument indicates the destination balance type."]
                    ReserveRepatriated {
                        from: subxt::ext::sp_core::crypto::AccountId32,
                        to: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                        destination_status:
                            runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
                    },
                    #[codec(index = 7)]
                    #[doc = "Some amount was deposited (e.g. for transaction fees)."]
                    Deposit {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
                    Withdraw {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
                    Slashed {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct AccountData<_0> {
                pub free: _0,
                pub reserved: _0,
                pub misc_frozen: _0,
                pub fee_frozen: _0,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct BalanceLock<_0> {
                pub id: [::core::primitive::u8; 8usize],
                pub amount: _0,
                pub reasons: runtime_types::pallet_balances::Reasons,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum Reasons {
                #[codec(index = 0)]
                Fee,
                #[codec(index = 1)]
                Misc,
                #[codec(index = 2)]
                All,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum Releases {
                #[codec(index = 0)]
                V1_0_0,
                #[codec(index = 1)]
                V2_0_0,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ReserveData<_0, _1> {
                pub id: _0,
                pub amount: _1,
            }
        }
        pub mod pallet_bonded_finance {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Create a new bond offer. To be `bond` to later."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have the"]
                    #[doc = "appropriate funds to stake the offer."]
                    #[doc = ""]
                    #[doc = "Allows the issuer to ask for their account to be kept alive using the `keep_alive`"]
                    #[doc = "parameter."]
                    #[doc = ""]
                    #[doc = "Emits a `NewOffer`."]
                    offer {
                        offer: runtime_types::composable_traits::bonded_finance::BondOffer<
                            subxt::ext::sp_core::crypto::AccountId32,
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 1)]
                    #[doc = "Bond to an offer."]
                    #[doc = ""]
                    #[doc = "The issuer should provide the number of contracts they are willing to buy."]
                    #[doc = "Once there are no more contracts available on the offer, the `stake` put by the"]
                    #[doc = "offer creator is refunded."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have the"]
                    #[doc = "appropriate funds to buy the desired number of contracts."]
                    #[doc = ""]
                    #[doc = "Allows the issuer to ask for their account to be kept alive using the `keep_alive`"]
                    #[doc = "parameter."]
                    #[doc = ""]
                    #[doc = "Emits a `NewBond`."]
                    #[doc = "Possibly Emits a `OfferCompleted`."]
                    bond {
                        offer_id: ::core::primitive::u128,
                        nb_of_bonds: ::core::primitive::u128,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    #[doc = "Cancel a running offer."]
                    #[doc = ""]
                    #[doc = "Blocking further bonds but not cancelling the currently vested rewards. The `stake` put"]
                    #[doc = "by the offer creator is refunded."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be `AdminOrigin`"]
                    #[doc = ""]
                    #[doc = "Emits a `OfferCancelled`."]
                    cancel { offer_id: ::core::primitive::u128 },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The offer could not be found."]
                    BondOfferNotFound,
                    #[codec(index = 1)]
                    #[doc = "Someone tried  to submit an invalid offer."]
                    InvalidBondOffer,
                    #[codec(index = 2)]
                    #[doc = "Someone tried to bond an already completed offer."]
                    OfferCompleted,
                    #[codec(index = 3)]
                    #[doc = "Someone tried to bond with an invalid number of nb_of_bonds."]
                    InvalidNumberOfBonds,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A new offer has been created."]
                    NewOffer {
                        offer_id: ::core::primitive::u128,
                        beneficiary: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A new bond has been registered."]
                    NewBond {
                        offer_id: ::core::primitive::u128,
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        nb_of_bonds: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "An offer has been cancelled by the `AdminOrigin`."]
                    OfferCancelled { offer_id: ::core::primitive::u128 },
                    #[codec(index = 3)]
                    #[doc = "An offer has been completed."]
                    OfferCompleted { offer_id: ::core::primitive::u128 },
                }
            }
        }
        pub mod pallet_call_filter {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Disable a pallet function."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be"]
                    #[doc = "`UpdateOrigin`."]
                    #[doc = ""]
                    #[doc = "Possibly emits a `Disabled` event."]
                    disable {
                        entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
                            runtime_types::common::MaxStringSize,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Enable a previously disabled pallet function."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be"]
                    #[doc = "`UpdateOrigin`."]
                    #[doc = ""]
                    #[doc = "Possibly emits an `Enabled` event."]
                    enable {
                        entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
                            runtime_types::common::MaxStringSize,
                        >,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "We tried to disable an extrinsic that cannot be disabled."]
                    CannotDisable,
                    #[codec(index = 1)]
                    #[doc = "The pallet name is not a valid UTF8 string."]
                    InvalidString,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Paused transaction"]
                    Disabled {
                        entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
                            runtime_types::common::MaxStringSize,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Unpaused transaction"]
                    Enabled {
                        entry: runtime_types::composable_traits::call_filter::CallFilterEntry<
                            runtime_types::common::MaxStringSize,
                        >,
                    },
                }
            }
        }
        pub mod pallet_collator_selection {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Set the list of invulnerable (fixed) collators."]
                    set_invulnerables {
                        new: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Set the ideal number of collators (not including the invulnerables)."]
                    #[doc = "If lowering this number, then the number of running collators could be higher than this figure."]
                    #[doc = "Aside from that edge case, there should be no other way to have more collators than the desired number."]
                    set_desired_candidates { max: ::core::primitive::u32 },
                    #[codec(index = 2)]
                    #[doc = "Set the candidacy bond amount."]
                    set_candidacy_bond { bond: ::core::primitive::u128 },
                    #[codec(index = 3)]
                    #[doc = "Register this account as a collator candidate. The account must (a) already have"]
                    #[doc = "registered session keys and (b) be able to reserve the `CandidacyBond`."]
                    #[doc = ""]
                    #[doc = "This call is not available to `Invulnerable` collators."]
                    register_as_candidate,
                    #[codec(index = 4)]
                    #[doc = "Deregister `origin` as a collator candidate. Note that the collator can only leave on"]
                    #[doc = "session change. The `CandidacyBond` will be unreserved immediately."]
                    #[doc = ""]
                    #[doc = "This call will fail if the total number of candidates would drop below `MinCandidates`."]
                    #[doc = ""]
                    #[doc = "This call is not available to `Invulnerable` collators."]
                    leave_intent,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct CandidateInfo<_0, _1> {
                    pub who: _0,
                    pub deposit: _1,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Too many candidates"]
                    TooManyCandidates,
                    #[codec(index = 1)]
                    #[doc = "Too few candidates"]
                    TooFewCandidates,
                    #[codec(index = 2)]
                    #[doc = "Unknown error"]
                    Unknown,
                    #[codec(index = 3)]
                    #[doc = "Permission issue"]
                    Permission,
                    #[codec(index = 4)]
                    #[doc = "User is already a candidate"]
                    AlreadyCandidate,
                    #[codec(index = 5)]
                    #[doc = "User is not a candidate"]
                    NotCandidate,
                    #[codec(index = 6)]
                    #[doc = "Too many invulnerables"]
                    TooManyInvulnerables,
                    #[codec(index = 7)]
                    #[doc = "User is already an Invulnerable"]
                    AlreadyInvulnerable,
                    #[codec(index = 8)]
                    #[doc = "Account has no associated validator ID"]
                    NoAssociatedValidatorId,
                    #[codec(index = 9)]
                    #[doc = "Validator ID is not yet registered"]
                    ValidatorNotRegistered,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    NewInvulnerables {
                        invulnerables: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                    },
                    #[codec(index = 1)]
                    NewDesiredCandidates {
                        desired_candidates: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    NewCandidacyBond {
                        bond_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    CandidateAdded {
                        account_id: subxt::ext::sp_core::crypto::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    CandidateRemoved {
                        account_id: subxt::ext::sp_core::crypto::AccountId32,
                    },
                }
            }
        }
        pub mod pallet_collective {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Set the collective's membership."]
                    #[doc = ""]
                    #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                    #[doc = "- `prime`: The prime member whose vote sets the default."]
                    #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                    #[doc = "  weight estimation."]
                    #[doc = ""]
                    #[doc = "Requires root origin."]
                    #[doc = ""]
                    #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                    #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                    #[doc = ""]
                    #[doc = "# WARNING:"]
                    #[doc = ""]
                    #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                    #[doc = "implementation of the trait [`ChangeMembers`]."]
                    #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                    #[doc = "with other logic managing the member set."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "## Weight"]
                    #[doc = "- `O(MP + N)` where:"]
                    #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                    #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                    #[doc = "  - `P` proposals-count (code-bounded)"]
                    #[doc = "- DB:"]
                    #[doc = "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the"]
                    #[doc = "    members"]
                    #[doc = "  - 1 storage read (codec `O(P)`) for reading the proposals"]
                    #[doc = "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal"]
                    #[doc = "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one"]
                    #[doc = "# </weight>"]
                    set_members {
                        new_members: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                        prime: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
                        old_count: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                    #[doc = ""]
                    #[doc = "Origin must be a member of the collective."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "## Weight"]
                    #[doc = "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching"]
                    #[doc = "  `proposal`"]
                    #[doc = "- DB: 1 read (codec `O(M)`) + DB access of `proposal`"]
                    #[doc = "- 1 event"]
                    #[doc = "# </weight>"]
                    execute {
                        proposal: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Add a new proposal to either be voted on or executed directly."]
                    #[doc = ""]
                    #[doc = "Requires the sender to be member."]
                    #[doc = ""]
                    #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                    #[doc = "or put up for voting."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "## Weight"]
                    #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                    #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                    #[doc = "  - branching is influenced by `threshold` where:"]
                    #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                    #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                    #[doc = "- DB:"]
                    #[doc = "  - 1 storage read `is_member` (codec `O(M)`)"]
                    #[doc = "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)"]
                    #[doc = "  - DB accesses influenced by `threshold`:"]
                    #[doc = "    - EITHER storage accesses done by `proposal` (`threshold < 2`)"]
                    #[doc = "    - OR proposal insertion (`threshold <= 2`)"]
                    #[doc = "      - 1 storage mutation `Proposals` (codec `O(P2)`)"]
                    #[doc = "      - 1 storage mutation `ProposalCount` (codec `O(1)`)"]
                    #[doc = "      - 1 storage write `ProposalOf` (codec `O(B)`)"]
                    #[doc = "      - 1 storage write `Voting` (codec `O(M)`)"]
                    #[doc = "  - 1 event"]
                    #[doc = "# </weight>"]
                    propose {
                        #[codec(compact)]
                        threshold: ::core::primitive::u32,
                        proposal: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                    #[doc = ""]
                    #[doc = "Requires the sender to be a member."]
                    #[doc = ""]
                    #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                    #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                    #[doc = "fee."]
                    #[doc = "# <weight>"]
                    #[doc = "## Weight"]
                    #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                    #[doc = "- DB:"]
                    #[doc = "  - 1 storage read `Members` (codec `O(M)`)"]
                    #[doc = "  - 1 storage mutation `Voting` (codec `O(M)`)"]
                    #[doc = "- 1 event"]
                    #[doc = "# </weight>"]
                    vote {
                        proposal: subxt::ext::sp_core::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        approve: ::core::primitive::bool,
                    },
                    #[codec(index = 4)]
                    #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                    #[doc = ""]
                    #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                    #[doc = ""]
                    #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                    #[doc = "has enough votes to be approved or disapproved."]
                    #[doc = ""]
                    #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                    #[doc = "unless there is a prime member set and the prime member cast an approval."]
                    #[doc = ""]
                    #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                    #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                    #[doc = ""]
                    #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                    #[doc = "proposal."]
                    #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                    #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "## Weight"]
                    #[doc = "- `O(B + M + P1 + P2)` where:"]
                    #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                    #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                    #[doc = "  - `P2` is proposal-count (code-bounded)"]
                    #[doc = "- DB:"]
                    #[doc = " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)"]
                    #[doc = " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec"]
                    #[doc = "   `O(P2)`)"]
                    #[doc = " - any mutations done while executing `proposal` (`P1`)"]
                    #[doc = "- up to 3 events"]
                    #[doc = "# </weight>"]
                    close {
                        proposal_hash: subxt::ext::sp_core::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        #[codec(compact)]
                        proposal_weight_bound: ::core::primitive::u64,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                    #[doc = "state."]
                    #[doc = ""]
                    #[doc = "Must be called by the Root origin."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Complexity: O(P) where P is the number of max proposals"]
                    #[doc = "DB Weight:"]
                    #[doc = "* Reads: Proposals"]
                    #[doc = "* Writes: Voting, Proposals, ProposalOf"]
                    #[doc = "# </weight>"]
                    disapprove_proposal {
                        proposal_hash: subxt::ext::sp_core::H256,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Account is not a member"]
                    NotMember,
                    #[codec(index = 1)]
                    #[doc = "Duplicate proposals not allowed"]
                    DuplicateProposal,
                    #[codec(index = 2)]
                    #[doc = "Proposal must exist"]
                    ProposalMissing,
                    #[codec(index = 3)]
                    #[doc = "Mismatched index"]
                    WrongIndex,
                    #[codec(index = 4)]
                    #[doc = "Duplicate vote ignored"]
                    DuplicateVote,
                    #[codec(index = 5)]
                    #[doc = "Members are already initialized!"]
                    AlreadyInitialized,
                    #[codec(index = 6)]
                    #[doc = "The close call was made too early, before the end of the voting."]
                    TooEarly,
                    #[codec(index = 7)]
                    #[doc = "There can only be a maximum of `MaxProposals` active proposals."]
                    TooManyProposals,
                    #[codec(index = 8)]
                    #[doc = "The given weight bound for the proposal was too low."]
                    WrongProposalWeight,
                    #[codec(index = 9)]
                    #[doc = "The given length bound for the proposal was too low."]
                    WrongProposalLength,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
                    #[doc = "`MemberCount`)."]
                    Proposed {
                        account: subxt::ext::sp_core::crypto::AccountId32,
                        proposal_index: ::core::primitive::u32,
                        proposal_hash: subxt::ext::sp_core::H256,
                        threshold: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A motion (given hash) has been voted on by given account, leaving"]
                    #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
                    Voted {
                        account: subxt::ext::sp_core::crypto::AccountId32,
                        proposal_hash: subxt::ext::sp_core::H256,
                        voted: ::core::primitive::bool,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A motion was approved by the required threshold."]
                    Approved {
                        proposal_hash: subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 3)]
                    #[doc = "A motion was not approved by the required threshold."]
                    Disapproved {
                        proposal_hash: subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 4)]
                    #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
                    Executed {
                        proposal_hash: subxt::ext::sp_core::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 5)]
                    #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
                    MemberExecuted {
                        proposal_hash: subxt::ext::sp_core::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 6)]
                    #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
                    Closed {
                        proposal_hash: subxt::ext::sp_core::H256,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum RawOrigin<_0> {
                #[codec(index = 0)]
                Members(::core::primitive::u32, ::core::primitive::u32),
                #[codec(index = 1)]
                Member(_0),
                #[codec(index = 2)]
                _Phantom,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Votes<_0, _1> {
                pub index: _1,
                pub threshold: _1,
                pub ayes: ::std::vec::Vec<_0>,
                pub nays: ::std::vec::Vec<_0>,
                pub end: _1,
            }
        }
        pub mod pallet_cosmwasm {
            use super::runtime_types;
            pub mod instrument {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct CostRules {
                    pub i64const: ::core::primitive::u32,
                    pub f64const: ::core::primitive::u32,
                    pub i64load: ::core::primitive::u32,
                    pub f64load: ::core::primitive::u32,
                    pub i64store: ::core::primitive::u32,
                    pub f64store: ::core::primitive::u32,
                    pub i64eq: ::core::primitive::u32,
                    pub i64eqz: ::core::primitive::u32,
                    pub i64ne: ::core::primitive::u32,
                    pub i64lts: ::core::primitive::u32,
                    pub i64gts: ::core::primitive::u32,
                    pub i64les: ::core::primitive::u32,
                    pub i64ges: ::core::primitive::u32,
                    pub i64clz: ::core::primitive::u32,
                    pub i64ctz: ::core::primitive::u32,
                    pub i64popcnt: ::core::primitive::u32,
                    pub i64add: ::core::primitive::u32,
                    pub i64mul: ::core::primitive::u32,
                    pub i64divs: ::core::primitive::u32,
                    pub i64divu: ::core::primitive::u32,
                    pub i64rems: ::core::primitive::u32,
                    pub i64and: ::core::primitive::u32,
                    pub i64or: ::core::primitive::u32,
                    pub i64xor: ::core::primitive::u32,
                    pub i64shl: ::core::primitive::u32,
                    pub i64shrs: ::core::primitive::u32,
                    pub i64rotl: ::core::primitive::u32,
                    pub i64rotr: ::core::primitive::u32,
                    pub i32wrapi64: ::core::primitive::u32,
                    pub i64extendsi32: ::core::primitive::u32,
                    pub f64eq: ::core::primitive::u32,
                    pub f64ne: ::core::primitive::u32,
                    pub f64lt: ::core::primitive::u32,
                    pub f64gt: ::core::primitive::u32,
                    pub f64le: ::core::primitive::u32,
                    pub f64ge: ::core::primitive::u32,
                    pub f64abs: ::core::primitive::u32,
                    pub f64neg: ::core::primitive::u32,
                    pub f64ceil: ::core::primitive::u32,
                    pub f64floor: ::core::primitive::u32,
                    pub f64trunc: ::core::primitive::u32,
                    pub f64nearest: ::core::primitive::u32,
                    pub f64sqrt: ::core::primitive::u32,
                    pub f64add: ::core::primitive::u32,
                    pub f64sub: ::core::primitive::u32,
                    pub f64mul: ::core::primitive::u32,
                    pub f64div: ::core::primitive::u32,
                    pub f64min: ::core::primitive::u32,
                    pub f64max: ::core::primitive::u32,
                    pub f64copysign: ::core::primitive::u32,
                    pub select: ::core::primitive::u32,
                    pub if_: ::core::primitive::u32,
                    pub else_: ::core::primitive::u32,
                    pub getlocal: ::core::primitive::u32,
                    pub setlocal: ::core::primitive::u32,
                    pub teelocal: ::core::primitive::u32,
                    pub setglobal: ::core::primitive::u32,
                    pub getglobal: ::core::primitive::u32,
                    pub currentmemory: ::core::primitive::u32,
                    pub growmemory: ::core::primitive::u32,
                    pub br: ::core::primitive::u32,
                    pub brif: ::core::primitive::u32,
                    pub brtable: ::core::primitive::u32,
                    pub brtable_per_elem: ::core::primitive::u32,
                    pub call: ::core::primitive::u32,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Upload a CosmWasm contract."]
                    #[doc = "The function will ensure that the wasm module is well formed and that it fits the"]
                    #[doc = "according limits. The module exports are going to be checked against the expected"]
                    #[doc = "CosmWasm export signatures."]
                    #[doc = ""]
                    #[doc = "* Emits an `Uploaded` event on success."]
                    #[doc = ""]
                    #[doc = "Arguments"]
                    #[doc = ""]
                    #[doc = "- `origin` the original dispatching the extrinsic."]
                    #[doc = "- `code` the actual wasm code."]
                    upload {
                        code: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Instantiate a previously uploaded code resulting in a new contract being generated."]
                    #[doc = ""]
                    #[doc = "* Emits an `Instantiated` event on success."]
                    #[doc = "* Emits an `Executed` event."]
                    #[doc = "* Possibly emit `Emitted` events."]
                    #[doc = ""]
                    #[doc = "Arguments"]
                    #[doc = ""]
                    #[doc = "* `origin` the origin dispatching the extrinsic."]
                    #[doc = "* `code_id` the unique code id generated when the code has been uploaded via [`upload`]."]
                    #[doc = "* `salt` the salt, usually used to instantiate the same contract multiple times."]
                    #[doc = "* `funds` the assets transferred to the contract prior to calling it's `instantiate`"]
                    #[doc = "  export."]
                    #[doc = "* `gas` the maximum gas to use, the remaining is refunded at the end of the transaction."]
                    instantiate {
                        code_identifier: runtime_types::pallet_cosmwasm::pallet::CodeIdentifier,
                        salt: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        admin: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
                        label: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        funds:
                            runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
                                runtime_types::primitives::currency::CurrencyId,
                                (::core::primitive::u128, ::core::primitive::bool),
                            >,
                        gas: ::core::primitive::u64,
                        message: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "Execute a previously instantiated contract."]
                    #[doc = ""]
                    #[doc = "* Emits an `Executed` event."]
                    #[doc = "* Possibly emit `Emitted` events."]
                    #[doc = ""]
                    #[doc = "Arguments"]
                    #[doc = ""]
                    #[doc = "* `origin` the origin dispatching the extrinsic."]
                    #[doc = "* `code_id` the unique code id generated when the code has been uploaded via [`upload`]."]
                    #[doc = "* `salt` the salt, usually used to instantiate the same contract multiple times."]
                    #[doc = "* `funds` the assets transferred to the contract prior to calling it's `instantiate`"]
                    #[doc = "  export."]
                    #[doc = "* `gas` the maximum gas to use, the remaining is refunded at the end of the transaction."]
                    execute {
                        contract: subxt::ext::sp_core::crypto::AccountId32,
                        funds:
                            runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
                                runtime_types::primitives::currency::CurrencyId,
                                (::core::primitive::u128, ::core::primitive::bool),
                            >,
                        gas: ::core::primitive::u64,
                        message: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Migrate a previously instantiated contract."]
                    #[doc = ""]
                    #[doc = "* Emits a `Migrated` event on success."]
                    #[doc = "* Emits an `Executed` event."]
                    #[doc = "* Possibly emit `Emitted` events."]
                    #[doc = ""]
                    #[doc = "Arguments"]
                    #[doc = ""]
                    #[doc = "* `origin` the origin dispatching the extrinsic."]
                    #[doc = "* `contract` the address of the contract that we want to migrate"]
                    #[doc = "* `new_code_identifier` the code identifier that we want to switch to."]
                    #[doc = "* `gas` the maximum gas to use, the remaining is refunded at the end of the transaction."]
                    #[doc = "* `message` MigrateMsg, that will be passed to the contract."]
                    migrate {
                        contract: subxt::ext::sp_core::crypto::AccountId32,
                        new_code_identifier: runtime_types::pallet_cosmwasm::pallet::CodeIdentifier,
                        gas: ::core::primitive::u64,
                        message: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "Update the admin of a contract."]
                    #[doc = ""]
                    #[doc = "* Emits a `AdminUpdated` event on success."]
                    #[doc = ""]
                    #[doc = "Arguments"]
                    #[doc = ""]
                    #[doc = "* `origin` the origin dispatching the extrinsic."]
                    #[doc = "* `contract` the address of the contract that we want to migrate."]
                    #[doc = "* `new_admin` new admin of the contract that we want to update to."]
                    #[doc = "* `gas` the maximum gas to use, the remaining is refunded at the end of the transaction."]
                    update_admin {
                        contract: subxt::ext::sp_core::crypto::AccountId32,
                        new_admin: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
                        gas: ::core::primitive::u64,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum CodeIdentifier {
                    #[codec(index = 0)]
                    CodeId(::core::primitive::u64),
                    #[codec(index = 1)]
                    CodeHash(subxt::ext::sp_core::H256),
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum EntryPoint {
                    #[codec(index = 0)]
                    Instantiate,
                    #[codec(index = 1)]
                    Execute,
                    #[codec(index = 2)]
                    Migrate,
                    #[codec(index = 3)]
                    Reply,
                    #[codec(index = 4)]
                    Sudo,
                    #[codec(index = 5)]
                    Query,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    Instrumentation,
                    #[codec(index = 1)]
                    VmCreation,
                    #[codec(index = 2)]
                    ContractTrapped,
                    #[codec(index = 3)]
                    ContractHasNoInfo,
                    #[codec(index = 4)]
                    CodeDecoding,
                    #[codec(index = 5)]
                    CodeValidation,
                    #[codec(index = 6)]
                    CodeEncoding,
                    #[codec(index = 7)]
                    CodeInstrumentation,
                    #[codec(index = 8)]
                    InstrumentedCodeIsTooBig,
                    #[codec(index = 9)]
                    CodeAlreadyExists,
                    #[codec(index = 10)]
                    CodeNotFound,
                    #[codec(index = 11)]
                    ContractAlreadyExists,
                    #[codec(index = 12)]
                    ContractNotFound,
                    #[codec(index = 13)]
                    TransferFailed,
                    #[codec(index = 14)]
                    LabelTooBig,
                    #[codec(index = 15)]
                    UnknownDenom,
                    #[codec(index = 16)]
                    StackOverflow,
                    #[codec(index = 17)]
                    NotEnoughFundsForUpload,
                    #[codec(index = 18)]
                    NonceOverflow,
                    #[codec(index = 19)]
                    RefcountOverflow,
                    #[codec(index = 20)]
                    VMDepthOverflow,
                    #[codec(index = 21)]
                    SignatureVerificationError,
                    #[codec(index = 22)]
                    IteratorIdOverflow,
                    #[codec(index = 23)]
                    IteratorNotFound,
                    #[codec(index = 24)]
                    NotAuthorized,
                    #[codec(index = 25)]
                    Unsupported,
                    #[codec(index = 26)]
                    Ibc,
                    #[codec(index = 27)]
                    FailedToSerialize,
                    #[codec(index = 28)]
                    OutOfGas,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    Uploaded {
                        code_hash: subxt::ext::sp_core::H256,
                        code_id: ::core::primitive::u64,
                    },
                    #[codec(index = 1)]
                    Instantiated {
                        contract: subxt::ext::sp_core::crypto::AccountId32,
                        info: runtime_types::pallet_cosmwasm::types::ContractInfo<
                            subxt::ext::sp_core::crypto::AccountId32,
                            runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                            runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        >,
                    },
                    #[codec(index = 2)]
                    Executed {
                        contract: subxt::ext::sp_core::crypto::AccountId32,
                        entrypoint: runtime_types::pallet_cosmwasm::pallet::EntryPoint,
                        data: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                    },
                    #[codec(index = 3)]
                    ExecutionFailed {
                        contract: subxt::ext::sp_core::crypto::AccountId32,
                        entrypoint: runtime_types::pallet_cosmwasm::pallet::EntryPoint,
                        error: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 4)]
                    Emitted {
                        contract: subxt::ext::sp_core::crypto::AccountId32,
                        ty: ::std::vec::Vec<::core::primitive::u8>,
                        attributes: ::std::vec::Vec<(
                            ::std::vec::Vec<::core::primitive::u8>,
                            ::std::vec::Vec<::core::primitive::u8>,
                        )>,
                    },
                    #[codec(index = 5)]
                    Migrated {
                        contract: subxt::ext::sp_core::crypto::AccountId32,
                        to: ::core::primitive::u64,
                    },
                    #[codec(index = 6)]
                    AdminUpdated {
                        contract: subxt::ext::sp_core::crypto::AccountId32,
                        new_admin: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
                    },
                    #[codec(index = 7)]
                    IbcChannelOpen {
                        contract: subxt::ext::sp_core::crypto::AccountId32,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct CodeInfo<_0, _1> {
                    pub creator: _0,
                    pub pristine_code_hash: _1,
                    pub instrumentation_version: ::core::primitive::u16,
                    pub refcount: ::core::primitive::u32,
                    pub ibc_capable: ::core::primitive::bool,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct ContractInfo<_0, _1, _2> {
                    pub code_id: ::core::primitive::u64,
                    pub trie_id: _2,
                    pub instantiator: _0,
                    pub admin: ::core::option::Option<_0>,
                    pub label: _1,
                }
            }
        }
        pub mod pallet_crowdloan_rewards {
            use super::runtime_types;
            pub mod models {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum Proof<_0> {
                    #[codec(index = 0)]
                    RelayChain(_0, runtime_types::sp_runtime::MultiSignature),
                    #[codec(index = 1)]
                    Ethereum(runtime_types::composable_support::types::EcdsaSignature),
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum RemoteAccount<_0> {
                    #[codec(index = 0)]
                    RelayChain(_0),
                    #[codec(index = 1)]
                    Ethereum(runtime_types::composable_support::types::EthereumAddress),
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Reward<_0, _1> {
                    pub total: _0,
                    pub claimed: _0,
                    pub vesting_period: _1,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Initialize the pallet at the current timestamp."]
                    initialize,
                    #[codec(index = 1)]
                    #[doc = "Initialize the pallet at the given timestamp."]
                    initialize_at { at: ::core::primitive::u64 },
                    #[codec(index = 2)]
                    #[doc = "Populate pallet by adding more rewards."]
                    #[doc = ""]
                    #[doc = "Each index in the rewards vector should contain: `remote_account`, `reward_account`,"]
                    #[doc = "`vesting_period`."]
                    #[doc = ""]
                    #[doc = "Can be called multiple times. If an remote account"]
                    #[doc = "already has a reward, it will be replaced by the new reward value."]
                    #[doc = ""]
                    #[doc = "Can only be called before `initialize`."]
                    populate {
                        rewards: ::std::vec::Vec<(
                            runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
                                subxt::ext::sp_core::crypto::AccountId32,
                            >,
                            ::core::primitive::u128,
                            ::core::primitive::u64,
                        )>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Associate a reward account. A valid proof has to be provided."]
                    #[doc = "This call also claim the first reward (a.k.a. the first payment, which is a % of the"]
                    #[doc = "vested reward)."]
                    #[doc = "If logic gate pass, no fees are applied."]
                    #[doc = ""]
                    #[doc = "The proof should be:"]
                    #[doc = "```haskell"]
                    #[doc = "proof = sign (concat prefix (hex reward_account))"]
                    #[doc = "```"]
                    associate {
                        reward_account: subxt::ext::sp_core::crypto::AccountId32,
                        proof: runtime_types::pallet_crowdloan_rewards::models::Proof<
                            subxt::ext::sp_core::crypto::AccountId32,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "Claim a reward from the associated reward account."]
                    #[doc = "A previous call to `associate` should have been made."]
                    #[doc = "If logic gate pass, no fees are applied."]
                    claim,
                    #[codec(index = 5)]
                    unlock_rewards_for {
                        reward_accounts: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                    },
                    #[codec(index = 6)]
                    #[doc = "Adds all accounts in the `additions` vector. Add may be called even if the pallet has"]
                    #[doc = "been initialized."]
                    add {
                        additions: ::std::vec::Vec<(
                            runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
                                subxt::ext::sp_core::crypto::AccountId32,
                            >,
                            ::core::primitive::u128,
                            ::core::primitive::u64,
                        )>,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    NotInitialized,
                    #[codec(index = 1)]
                    AlreadyInitialized,
                    #[codec(index = 2)]
                    BackToTheFuture,
                    #[codec(index = 3)]
                    RewardsNotFunded,
                    #[codec(index = 4)]
                    InvalidProof,
                    #[codec(index = 5)]
                    InvalidClaim,
                    #[codec(index = 6)]
                    NothingToClaim,
                    #[codec(index = 7)]
                    NotAssociated,
                    #[codec(index = 8)]
                    AlreadyAssociated,
                    #[codec(index = 9)]
                    NotClaimableYet,
                    #[codec(index = 10)]
                    #[doc = "Returned by `delete` if the provided expected reward mismatches the actual reward."]
                    UnexpectedRewardAmount,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The crowdloan has been initialized or set to initialize at some time."]
                    Initialized { at: ::core::primitive::u64 },
                    #[codec(index = 1)]
                    #[doc = "A claim has been made."]
                    Claimed {
                        remote_account:
                            runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
                                subxt::ext::sp_core::crypto::AccountId32,
                            >,
                        reward_account: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "A remote account has been associated with a reward account."]
                    Associated {
                        remote_account:
                            runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
                                subxt::ext::sp_core::crypto::AccountId32,
                            >,
                        reward_account: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 3)]
                    #[doc = "The crowdloan was successfully initialized, but with excess funds that won't be"]
                    #[doc = "claimed."]
                    OverFunded {
                        excess_funds: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "A portion of rewards have been unlocked and future claims will not have locks"]
                    RewardsUnlocked { at: ::core::primitive::u64 },
                    #[codec(index = 5)]
                    #[doc = "Called after rewards have been added through the `add` extrinsic."]
                    RewardsAdded {
                        additions: ::std::vec::Vec<(
                            runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
                                subxt::ext::sp_core::crypto::AccountId32,
                            >,
                            ::core::primitive::u128,
                            ::core::primitive::u64,
                        )>,
                    },
                    #[codec(index = 6)]
                    #[doc = "Called after rewards have been deleted through the `delete` extrinsic."]
                    RewardsDeleted {
                        deletions: ::std::vec::Vec<
                            runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
                                subxt::ext::sp_core::crypto::AccountId32,
                            >,
                        >,
                    },
                }
            }
        }
        pub mod pallet_currency_factory {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    add_range { length: ::core::primitive::u64 },
                    #[codec(index = 1)]
                    #[doc = "Sets metadata"]
                    set_metadata {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        metadata: runtime_types::composable_traits::assets::BasicAssetMetadata,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    AssetNotFound,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    RangeCreated {
                        range: runtime_types::pallet_currency_factory::ranges::Range<
                            runtime_types::primitives::currency::CurrencyId,
                        >,
                    },
                }
            }
            pub mod ranges {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Range<_0> {
                    pub current: _0,
                    pub end: _0,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Ranges<_0> {
                    pub ranges: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        runtime_types::pallet_currency_factory::ranges::Range<_0>,
                    >,
                }
            }
        }
        pub mod pallet_democracy {
            use super::runtime_types;
            pub mod conviction {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum Conviction {
                    #[codec(index = 0)]
                    None,
                    #[codec(index = 1)]
                    Locked1x,
                    #[codec(index = 2)]
                    Locked2x,
                    #[codec(index = 3)]
                    Locked3x,
                    #[codec(index = 4)]
                    Locked4x,
                    #[codec(index = 5)]
                    Locked5x,
                    #[codec(index = 6)]
                    Locked6x,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Propose a sensitive action to be taken."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_ and the sender must"]
                    #[doc = "have funds to cover the deposit."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The hash of the proposal preimage."]
                    #[doc = "- `value`: The amount of deposit (must be at least `MinimumDeposit`)."]
                    #[doc = ""]
                    #[doc = "Emits `Proposed`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(p)`"]
                    propose {
                        proposal_hash: subxt::ext::sp_core::H256,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Signals agreement with a particular proposal."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_ and the sender"]
                    #[doc = "must have funds to cover the deposit, equal to the original deposit."]
                    #[doc = ""]
                    #[doc = "- `proposal`: The index of the proposal to second."]
                    #[doc = "- `seconds_upper_bound`: an upper bound on the current number of seconds on this"]
                    #[doc = "  proposal. Extrinsic is weighted according to this value with no refund."]
                    #[doc = ""]
                    #[doc = "Weight: `O(S)` where S is the number of seconds a proposal already has."]
                    second {
                        #[codec(compact)]
                        proposal: ::core::primitive::u32,
                        #[codec(compact)]
                        seconds_upper_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;"]
                    #[doc = "otherwise it is a vote to keep the status quo."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `ref_index`: The index of the referendum to vote for."]
                    #[doc = "- `vote`: The vote configuration."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R)` where R is the number of referendums the voter has voted on."]
                    vote {
                        #[codec(compact)]
                        ref_index: ::core::primitive::u32,
                        vote: runtime_types::pallet_democracy::vote::AccountVote<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same"]
                    #[doc = "referendum."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be `CancellationOrigin`."]
                    #[doc = ""]
                    #[doc = "-`ref_index`: The index of the referendum to cancel."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`."]
                    emergency_cancel { ref_index: ::core::primitive::u32 },
                    #[codec(index = 4)]
                    #[doc = "Schedule a referendum to be tabled once it is legal to schedule an external"]
                    #[doc = "referendum."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be `ExternalOrigin`."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                    #[doc = ""]
                    #[doc = "Weight: `O(V)` with V number of vetoers in the blacklist of proposal."]
                    #[doc = "  Decoding vec of length V. Charged as maximum"]
                    external_propose {
                        proposal_hash: subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 5)]
                    #[doc = "Schedule a majority-carries referendum to be tabled next once it is legal to schedule"]
                    #[doc = "an external referendum."]
                    #[doc = ""]
                    #[doc = "The dispatch of this call must be `ExternalMajorityOrigin`."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                    #[doc = ""]
                    #[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
                    #[doc = "pre-scheduled `external_propose` call."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    external_propose_majority {
                        proposal_hash: subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 6)]
                    #[doc = "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to"]
                    #[doc = "schedule an external referendum."]
                    #[doc = ""]
                    #[doc = "The dispatch of this call must be `ExternalDefaultOrigin`."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                    #[doc = ""]
                    #[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
                    #[doc = "pre-scheduled `external_propose` call."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    external_propose_default {
                        proposal_hash: subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 7)]
                    #[doc = "Schedule the currently externally-proposed majority-carries referendum to be tabled"]
                    #[doc = "immediately. If there is no externally-proposed referendum currently, or if there is one"]
                    #[doc = "but it is not a majority-carries referendum then it fails."]
                    #[doc = ""]
                    #[doc = "The dispatch of this call must be `FastTrackOrigin`."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The hash of the current external proposal."]
                    #[doc = "- `voting_period`: The period that is allowed for voting on this proposal."]
                    #[doc = "\tMust be always greater than zero."]
                    #[doc = "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`."]
                    #[doc = "- `delay`: The number of block after voting has ended in approval and this should be"]
                    #[doc = "  enacted. This doesn't have a minimum amount."]
                    #[doc = ""]
                    #[doc = "Emits `Started`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    fast_track {
                        proposal_hash: subxt::ext::sp_core::H256,
                        voting_period: ::core::primitive::u32,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "Veto and blacklist the external proposal hash."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be `VetoOrigin`."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist."]
                    #[doc = ""]
                    #[doc = "Emits `Vetoed`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(V + log(V))` where V is number of `existing vetoers`"]
                    veto_external {
                        proposal_hash: subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 9)]
                    #[doc = "Remove a referendum."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "- `ref_index`: The index of the referendum to cancel."]
                    #[doc = ""]
                    #[doc = "# Weight: `O(1)`."]
                    cancel_referendum {
                        #[codec(compact)]
                        ref_index: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    #[doc = "Cancel a proposal queued for enactment."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "- `which`: The index of the referendum to cancel."]
                    #[doc = ""]
                    #[doc = "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."]
                    cancel_queued { which: ::core::primitive::u32 },
                    #[codec(index = 11)]
                    #[doc = "Delegate the voting power (with some given conviction) of the sending account."]
                    #[doc = ""]
                    #[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
                    #[doc = "time appropriate for the conviction's lock period."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
                    #[doc = "  - be delegating already; or"]
                    #[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
                    #[doc = "    through `reap_vote` or `unvote`)."]
                    #[doc = ""]
                    #[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
                    #[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
                    #[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
                    #[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
                    #[doc = "  be more than the account's current balance."]
                    #[doc = ""]
                    #[doc = "Emits `Delegated`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
                    #[doc = "  voted on. Weight is charged as if maximum votes."]
                    delegate {
                        to: subxt::ext::sp_core::crypto::AccountId32,
                        conviction: runtime_types::pallet_democracy::conviction::Conviction,
                        balance: ::core::primitive::u128,
                    },
                    #[codec(index = 12)]
                    #[doc = "Undelegate the voting power of the sending account."]
                    #[doc = ""]
                    #[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
                    #[doc = "of the conviction with which the delegation was issued."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
                    #[doc = "currently delegating."]
                    #[doc = ""]
                    #[doc = "Emits `Undelegated`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
                    #[doc = "  voted on. Weight is charged as if maximum votes."]
                    undelegate,
                    #[codec(index = 13)]
                    #[doc = "Clears all public proposals."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`."]
                    clear_public_proposals,
                    #[codec(index = 14)]
                    #[doc = "Register the preimage for an upcoming proposal. This doesn't require the proposal to be"]
                    #[doc = "in the dispatch queue but does require a deposit, returned once enacted."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `encoded_proposal`: The preimage of a proposal."]
                    #[doc = ""]
                    #[doc = "Emits `PreimageNoted`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."]
                    note_preimage {
                        encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 15)]
                    #[doc = "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."]
                    note_preimage_operational {
                        encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 16)]
                    #[doc = "Register the preimage for an upcoming proposal. This requires the proposal to be"]
                    #[doc = "in the dispatch queue. No deposit is needed. When this call is successful, i.e."]
                    #[doc = "the preimage has not been uploaded before and matches some imminent proposal,"]
                    #[doc = "no fee is paid."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `encoded_proposal`: The preimage of a proposal."]
                    #[doc = ""]
                    #[doc = "Emits `PreimageNoted`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."]
                    note_imminent_preimage {
                        encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 17)]
                    #[doc = "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."]
                    note_imminent_preimage_operational {
                        encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 18)]
                    #[doc = "Remove an expired proposal preimage and collect the deposit."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The preimage hash of a proposal."]
                    #[doc = "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is"]
                    #[doc = "  weighted according to this value with no refund."]
                    #[doc = ""]
                    #[doc = "This will only work after `VotingPeriod` blocks from the time that the preimage was"]
                    #[doc = "noted, if it's the same account doing it. If it's a different account, then it'll only"]
                    #[doc = "work an additional `EnactmentPeriod` later."]
                    #[doc = ""]
                    #[doc = "Emits `PreimageReaped`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(D)` where D is length of proposal."]
                    reap_preimage {
                        proposal_hash: subxt::ext::sp_core::H256,
                        #[codec(compact)]
                        proposal_len_upper_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 19)]
                    #[doc = "Unlock tokens that have an expired lock."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `target`: The account to remove the lock on."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R)` with R number of vote of target."]
                    unlock {
                        target: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 20)]
                    #[doc = "Remove a vote for a referendum."]
                    #[doc = ""]
                    #[doc = "If:"]
                    #[doc = "- the referendum was cancelled, or"]
                    #[doc = "- the referendum is ongoing, or"]
                    #[doc = "- the referendum has ended such that"]
                    #[doc = "  - the vote of the account was in opposition to the result; or"]
                    #[doc = "  - there was no conviction to the account's vote; or"]
                    #[doc = "  - the account made a split vote"]
                    #[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
                    #[doc = "funds being available."]
                    #[doc = ""]
                    #[doc = "If, however, the referendum has ended and:"]
                    #[doc = "- it finished corresponding to the vote of the account, and"]
                    #[doc = "- the account made a standard vote with conviction, and"]
                    #[doc = "- the lock period of the conviction is not over"]
                    #[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
                    #[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
                    #[doc = "of both the amount locked and the time is it locked for)."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
                    #[doc = "registered for referendum `index`."]
                    #[doc = ""]
                    #[doc = "- `index`: The index of referendum of the vote to be removed."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
                    #[doc = "  Weight is calculated for the maximum number of vote."]
                    remove_vote { index: ::core::primitive::u32 },
                    #[codec(index = 21)]
                    #[doc = "Remove a vote for a referendum."]
                    #[doc = ""]
                    #[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
                    #[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
                    #[doc = "either because the referendum was cancelled, because the voter lost the referendum or"]
                    #[doc = "because the conviction period is over."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `target`: The account of the vote to be removed; this account must have voted for"]
                    #[doc = "  referendum `index`."]
                    #[doc = "- `index`: The index of referendum of the vote to be removed."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
                    #[doc = "  Weight is calculated for the maximum number of vote."]
                    remove_other_vote {
                        target: subxt::ext::sp_core::crypto::AccountId32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 22)]
                    #[doc = "Enact a proposal from a referendum. For now we just make the weight be the maximum."]
                    enact_proposal {
                        proposal_hash: subxt::ext::sp_core::H256,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 23)]
                    #[doc = "Permanently place a proposal into the blacklist. This prevents it from ever being"]
                    #[doc = "proposed again."]
                    #[doc = ""]
                    #[doc = "If called on a queued public or external proposal, then this will result in it being"]
                    #[doc = "removed. If the `ref_index` supplied is an active referendum with the proposal hash,"]
                    #[doc = "then it will be cancelled."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be `BlacklistOrigin`."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The proposal hash to blacklist permanently."]
                    #[doc = "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be"]
                    #[doc = "cancelled."]
                    #[doc = ""]
                    #[doc = "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a"]
                    #[doc = "  reasonable value)."]
                    blacklist {
                        proposal_hash: subxt::ext::sp_core::H256,
                        maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 24)]
                    #[doc = "Remove a proposal."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be `CancelProposalOrigin`."]
                    #[doc = ""]
                    #[doc = "- `prop_index`: The index of the proposal to cancel."]
                    #[doc = ""]
                    #[doc = "Weight: `O(p)` where `p = PublicProps::<T, I>::decode_len()`"]
                    cancel_proposal {
                        #[codec(compact)]
                        prop_index: ::core::primitive::u32,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Value too low"]
                    ValueLow,
                    #[codec(index = 1)]
                    #[doc = "Proposal does not exist"]
                    ProposalMissing,
                    #[codec(index = 2)]
                    #[doc = "Cannot cancel the same proposal twice"]
                    AlreadyCanceled,
                    #[codec(index = 3)]
                    #[doc = "Proposal already made"]
                    DuplicateProposal,
                    #[codec(index = 4)]
                    #[doc = "Proposal still blacklisted"]
                    ProposalBlacklisted,
                    #[codec(index = 5)]
                    #[doc = "Next external proposal not simple majority"]
                    NotSimpleMajority,
                    #[codec(index = 6)]
                    #[doc = "Invalid hash"]
                    InvalidHash,
                    #[codec(index = 7)]
                    #[doc = "No external proposal"]
                    NoProposal,
                    #[codec(index = 8)]
                    #[doc = "Identity may not veto a proposal twice"]
                    AlreadyVetoed,
                    #[codec(index = 9)]
                    #[doc = "Preimage already noted"]
                    DuplicatePreimage,
                    #[codec(index = 10)]
                    #[doc = "Not imminent"]
                    NotImminent,
                    #[codec(index = 11)]
                    #[doc = "Too early"]
                    TooEarly,
                    #[codec(index = 12)]
                    #[doc = "Imminent"]
                    Imminent,
                    #[codec(index = 13)]
                    #[doc = "Preimage not found"]
                    PreimageMissing,
                    #[codec(index = 14)]
                    #[doc = "Vote given for invalid referendum"]
                    ReferendumInvalid,
                    #[codec(index = 15)]
                    #[doc = "Invalid preimage"]
                    PreimageInvalid,
                    #[codec(index = 16)]
                    #[doc = "No proposals waiting"]
                    NoneWaiting,
                    #[codec(index = 17)]
                    #[doc = "The given account did not vote on the referendum."]
                    NotVoter,
                    #[codec(index = 18)]
                    #[doc = "The actor has no permission to conduct the action."]
                    NoPermission,
                    #[codec(index = 19)]
                    #[doc = "The account is already delegating."]
                    AlreadyDelegating,
                    #[codec(index = 20)]
                    #[doc = "Too high a balance was provided that the account cannot afford."]
                    InsufficientFunds,
                    #[codec(index = 21)]
                    #[doc = "The account is not currently delegating."]
                    NotDelegating,
                    #[codec(index = 22)]
                    #[doc = "The account currently has votes attached to it and the operation cannot succeed until"]
                    #[doc = "these are removed, either through `unvote` or `reap_vote`."]
                    VotesExist,
                    #[codec(index = 23)]
                    #[doc = "The instant referendum origin is currently disallowed."]
                    InstantNotAllowed,
                    #[codec(index = 24)]
                    #[doc = "Delegation to oneself makes no sense."]
                    Nonsense,
                    #[codec(index = 25)]
                    #[doc = "Invalid upper bound."]
                    WrongUpperBound,
                    #[codec(index = 26)]
                    #[doc = "Maximum number of votes reached."]
                    MaxVotesReached,
                    #[codec(index = 27)]
                    #[doc = "Maximum number of proposals reached."]
                    TooManyProposals,
                    #[codec(index = 28)]
                    #[doc = "Voting period too low"]
                    VotingPeriodLow,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A motion has been proposed by a public account."]
                    Proposed {
                        proposal_index: ::core::primitive::u32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "A public proposal has been tabled for referendum vote."]
                    Tabled {
                        proposal_index: ::core::primitive::u32,
                        deposit: ::core::primitive::u128,
                        depositors: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                    },
                    #[codec(index = 2)]
                    #[doc = "An external proposal has been tabled."]
                    ExternalTabled,
                    #[codec(index = 3)]
                    #[doc = "A referendum has begun."]
                    Started {
                        ref_index: ::core::primitive::u32,
                        threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
                    },
                    #[codec(index = 4)]
                    #[doc = "A proposal has been approved by referendum."]
                    Passed { ref_index: ::core::primitive::u32 },
                    #[codec(index = 5)]
                    #[doc = "A proposal has been rejected by referendum."]
                    NotPassed { ref_index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    #[doc = "A referendum has been cancelled."]
                    Cancelled { ref_index: ::core::primitive::u32 },
                    #[codec(index = 7)]
                    #[doc = "A proposal has been enacted."]
                    Executed {
                        ref_index: ::core::primitive::u32,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 8)]
                    #[doc = "An account has delegated their vote to another account."]
                    Delegated {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        target: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 9)]
                    #[doc = "An account has cancelled a previous delegation operation."]
                    Undelegated {
                        account: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 10)]
                    #[doc = "An external proposal has been vetoed."]
                    Vetoed {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        proposal_hash: subxt::ext::sp_core::H256,
                        until: ::core::primitive::u32,
                    },
                    #[codec(index = 11)]
                    #[doc = "A proposal's preimage was noted, and the deposit taken."]
                    PreimageNoted {
                        proposal_hash: subxt::ext::sp_core::H256,
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 12)]
                    #[doc = "A proposal preimage was removed and used (the deposit was returned)."]
                    PreimageUsed {
                        proposal_hash: subxt::ext::sp_core::H256,
                        provider: subxt::ext::sp_core::crypto::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 13)]
                    #[doc = "A proposal could not be executed because its preimage was invalid."]
                    PreimageInvalid {
                        proposal_hash: subxt::ext::sp_core::H256,
                        ref_index: ::core::primitive::u32,
                    },
                    #[codec(index = 14)]
                    #[doc = "A proposal could not be executed because its preimage was missing."]
                    PreimageMissing {
                        proposal_hash: subxt::ext::sp_core::H256,
                        ref_index: ::core::primitive::u32,
                    },
                    #[codec(index = 15)]
                    #[doc = "A registered preimage was removed and the deposit collected by the reaper."]
                    PreimageReaped {
                        proposal_hash: subxt::ext::sp_core::H256,
                        provider: subxt::ext::sp_core::crypto::AccountId32,
                        deposit: ::core::primitive::u128,
                        reaper: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 16)]
                    #[doc = "A proposal_hash has been blacklisted permanently."]
                    Blacklisted {
                        proposal_hash: subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 17)]
                    #[doc = "An account has voted in a referendum"]
                    Voted {
                        voter: subxt::ext::sp_core::crypto::AccountId32,
                        ref_index: ::core::primitive::u32,
                        vote: runtime_types::pallet_democracy::vote::AccountVote<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 18)]
                    #[doc = "An account has secconded a proposal"]
                    Seconded {
                        seconder: subxt::ext::sp_core::crypto::AccountId32,
                        prop_index: ::core::primitive::u32,
                    },
                    #[codec(index = 19)]
                    #[doc = "A proposal got canceled."]
                    ProposalCanceled { prop_index: ::core::primitive::u32 },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Delegations<_0> {
                    pub votes: _0,
                    pub capital: _0,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum ReferendumInfo<_0, _1, _2> {
                    #[codec(index = 0)]
                    Ongoing(runtime_types::pallet_democracy::types::ReferendumStatus<_0, _1, _2>),
                    #[codec(index = 1)]
                    Finished {
                        approved: ::core::primitive::bool,
                        end: _0,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct ReferendumStatus<_0, _1, _2> {
                    pub end: _0,
                    pub proposal_hash: _1,
                    pub threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
                    pub delay: _0,
                    pub tally: runtime_types::pallet_democracy::types::Tally<_2>,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Tally<_0> {
                    pub ayes: _0,
                    pub nays: _0,
                    pub turnout: _0,
                }
            }
            pub mod vote {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum AccountVote<_0> {
                    #[codec(index = 0)]
                    Standard {
                        vote: runtime_types::pallet_democracy::vote::Vote,
                        balance: _0,
                    },
                    #[codec(index = 1)]
                    Split { aye: _0, nay: _0 },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct PriorLock<_0, _1>(pub _0, pub _1);
                #[derive(
                    Debug,
                    subxt :: ext :: codec :: CompactAs,
                    subxt :: ext :: codec :: Decode,
                    subxt :: ext :: codec :: Encode,
                )]
                pub struct Vote(pub ::core::primitive::u8);
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum Voting<_0, _1, _2> {
                    #[codec(index = 0)]
                    Direct {
                        votes: ::std::vec::Vec<(
                            _2,
                            runtime_types::pallet_democracy::vote::AccountVote<_0>,
                        )>,
                        delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
                        prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
                    },
                    #[codec(index = 1)]
                    Delegating {
                        balance: _0,
                        target: _1,
                        conviction: runtime_types::pallet_democracy::conviction::Conviction,
                        delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
                        prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
                    },
                }
            }
            pub mod vote_threshold {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum VoteThreshold {
                    #[codec(index = 0)]
                    SuperMajorityApprove,
                    #[codec(index = 1)]
                    SuperMajorityAgainst,
                    #[codec(index = 2)]
                    SimpleMajority,
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum PreimageStatus<_0, _1, _2> {
                #[codec(index = 0)]
                Missing(_2),
                #[codec(index = 1)]
                Available {
                    data: ::std::vec::Vec<::core::primitive::u8>,
                    provider: _0,
                    deposit: _1,
                    since: _2,
                    expiry: ::core::option::Option<_2>,
                },
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum Releases {
                #[codec(index = 0)]
                V1,
            }
        }
        pub mod pallet_dex_router {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Create, update or remove route."]
                    #[doc = "On successful emits one of `RouteAdded`, `RouteUpdated` or `RouteDeleted`."]
                    update_route {
                        asset_pair: runtime_types::composable_traits::defi::CurrencyPair<
                            runtime_types::primitives::currency::CurrencyId,
                        >,
                        route: ::core::option::Option<
                            runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                                ::core::primitive::u128,
                            >,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Exchange `amount` of quote asset for `asset_pair` via route found in router."]
                    #[doc = "On successful underlying DEX pallets will emit appropriate event"]
                    swap {
                        in_asset: runtime_types::composable_traits::dex::AssetAmount<
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                        >,
                        min_receive: runtime_types::composable_traits::dex::AssetAmount<
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "Buy `amount` of quote asset for `asset_pair` via route found in router."]
                    #[doc = "On successful underlying DEX pallets will emit appropriate event."]
                    buy {
                        in_asset_id: runtime_types::primitives::currency::CurrencyId,
                        out_asset: runtime_types::composable_traits::dex::AssetAmount<
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Add liquidity to the underlying pablo pool."]
                    #[doc = "Works only for single pool route."]
                    add_liquidity {
                        assets: subxt::utils::KeyedVec<
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                        >,
                        min_mint_amount: ::core::primitive::u128,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 4)]
                    #[doc = "Remove liquidity from the underlying pablo pool."]
                    #[doc = "Works only for single pool route."]
                    remove_liquidity {
                        lp_amount: ::core::primitive::u128,
                        min_receive: subxt::utils::KeyedVec<
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                        >,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Number of hops in route exceeded maximum limit."]
                    MaxHopsExceeded,
                    #[codec(index = 1)]
                    #[doc = "For given asset pair no route found."]
                    NoRouteFound,
                    #[codec(index = 2)]
                    #[doc = "Unexpected node found while route validation."]
                    UnexpectedNodeFoundWhileValidation,
                    #[codec(index = 3)]
                    #[doc = "Can not respect minimum amount requested."]
                    CanNotRespectMinAmountRequested,
                    #[codec(index = 4)]
                    #[doc = "Unsupported operation."]
                    UnsupportedOperation,
                    #[codec(index = 5)]
                    #[doc = "Route with possible loop is not allowed."]
                    LoopSuspectedInRouteUpdate,
                    #[codec(index = 6)]
                    #[doc = "Only dual asset pools supported"]
                    OnlyDualAssetPoolsSupported,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    RouteAdded {
                        x_asset_id: runtime_types::primitives::currency::CurrencyId,
                        y_asset_id: runtime_types::primitives::currency::CurrencyId,
                        route: ::std::vec::Vec<::core::primitive::u128>,
                    },
                    #[codec(index = 1)]
                    RouteDeleted {
                        x_asset_id: runtime_types::primitives::currency::CurrencyId,
                        y_asset_id: runtime_types::primitives::currency::CurrencyId,
                        route: ::std::vec::Vec<::core::primitive::u128>,
                    },
                    #[codec(index = 2)]
                    RouteUpdated {
                        x_asset_id: runtime_types::primitives::currency::CurrencyId,
                        y_asset_id: runtime_types::primitives::currency::CurrencyId,
                        old_route: ::std::vec::Vec<::core::primitive::u128>,
                        updated_route: ::std::vec::Vec<::core::primitive::u128>,
                    },
                }
            }
        }
        pub mod pallet_dutch_auction {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Inserts or replaces auction configuration."]
                    #[doc = "Already running auctions are not updated."]
                    add_configuration {
                        configuration_id: ::core::primitive::u128,
                        configuration: runtime_types::composable_traits::time::TimeReleaseFunction,
                    },
                    #[codec(index = 1)]
                    #[doc = "sell `order` in auction with `configuration`"]
                    #[doc = "some deposit is taken for storing sell order"]
                    ask {
                        order: runtime_types::composable_traits::defi::Sell<
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                        >,
                        configuration: runtime_types::composable_traits::time::TimeReleaseFunction,
                    },
                    #[codec(index = 2)]
                    #[doc = "adds take to list, does not execute take immediately"]
                    take {
                        order_id: ::core::primitive::u128,
                        take: runtime_types::composable_traits::defi::Take<::core::primitive::u128>,
                    },
                    #[codec(index = 3)]
                    #[doc = "allows to remove `order_id` from storage"]
                    liquidate { order_id: ::core::primitive::u128 },
                    #[codec(index = 4)]
                    xcm_sell {
                        request: runtime_types::composable_traits::xcm::XcmSellRequest,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    RequestedOrderDoesNotExists,
                    #[codec(index = 1)]
                    OrderParametersIsInvalid,
                    #[codec(index = 2)]
                    TakeParametersIsInvalid,
                    #[codec(index = 3)]
                    TakeLimitDoesNotSatisfyOrder,
                    #[codec(index = 4)]
                    OrderNotFound,
                    #[codec(index = 5)]
                    TakeOrderDidNotHappen,
                    #[codec(index = 6)]
                    NotEnoughNativeCurrencyToPayForAuction,
                    #[codec(index = 7)]
                    #[doc = "errors trying to decode and parse XCM input"]
                    XcmCannotDecodeRemoteParametersToLocalRepresentations,
                    #[codec(index = 8)]
                    XcmCannotFindLocalIdentifiersAsDecodedFromRemote,
                    #[codec(index = 9)]
                    XcmNotFoundConfigurationById,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    OrderAdded {
                        order_id: ::core::primitive::u128,
                        order: runtime_types::pallet_dutch_auction::types::SellOrder<
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                            subxt::ext::sp_core::crypto::AccountId32,
                            runtime_types::pallet_dutch_auction::types::EDContext<
                                ::core::primitive::u128,
                            >,
                            runtime_types::composable_traits::time::TimeReleaseFunction,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "raised when part or whole order was taken with mentioned balance"]
                    OrderTaken {
                        order_id: ::core::primitive::u128,
                        taken: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    OrderRemoved { order_id: ::core::primitive::u128 },
                    #[codec(index = 3)]
                    ConfigurationAdded {
                        configuration_id: ::core::primitive::u128,
                        configuration: runtime_types::composable_traits::time::TimeReleaseFunction,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct EDContext<_0> {
                    pub added_at: ::core::primitive::u64,
                    pub deposit: _0,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct SellOrder<_0, _1, _2, _3, _4> {
                    pub from_to: _2,
                    pub order: runtime_types::composable_traits::defi::Sell<_0, _1>,
                    pub configuration: _4,
                    pub context: _3,
                    pub total_amount_received: _1,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct TakeOrder<_0, _1> {
                    pub from_to: _1,
                    pub take: runtime_types::composable_traits::defi::Take<_0>,
                }
            }
        }
        pub mod pallet_fnft {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    CollectionAlreadyExists,
                    #[codec(index = 1)]
                    InstanceAlreadyExists,
                    #[codec(index = 2)]
                    CollectionNotFound,
                    #[codec(index = 3)]
                    InstanceNotFound,
                    #[codec(index = 4)]
                    MustBeOwner,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    FinancialNftCollectionCreated {
                        collection_id: runtime_types::primitives::currency::CurrencyId,
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        admin: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 1)]
                    FinancialNftCreated {
                        collection_id: runtime_types::primitives::currency::CurrencyId,
                        instance_id: ::core::primitive::u64,
                    },
                    #[codec(index = 2)]
                    FinancialNftBurned {
                        collection_id: runtime_types::primitives::currency::CurrencyId,
                        instance_id: ::core::primitive::u64,
                    },
                    #[codec(index = 3)]
                    FinancialNftTransferred {
                        collection_id: runtime_types::primitives::currency::CurrencyId,
                        instance_id: ::core::primitive::u64,
                        to: subxt::ext::sp_core::crypto::AccountId32,
                    },
                }
            }
        }
        pub mod pallet_governance_registry {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Sets the value of an `asset_id` to the signed account id. Only callable by root."]
                    set {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        value: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Sets the value of an `asset_id` to root. Only callable by root."]
                    grant_root {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                    },
                    #[codec(index = 2)]
                    #[doc = "Removes mapping of an `asset_id`. Only callable by root."]
                    remove {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Not found"]
                    NoneError,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    Set {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        value: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 1)]
                    GrantRoot {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                    },
                    #[codec(index = 2)]
                    Remove {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                    },
                }
            }
        }
        pub mod pallet_ibc {
            use super::runtime_types;
            pub mod errors {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum IbcError {
                    #[codec(index = 0)]
                    Ics02Client {
                        message: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    Ics03Connection {
                        message: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 2)]
                    Ics04Channel {
                        message: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 3)]
                    Ics20FungibleTokenTransfer {
                        message: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 4)]
                    UnknownMessageTypeUrl {
                        message: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 5)]
                    MalformedMessageBytes {
                        message: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
            }
            pub mod events {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum IbcEvent {
                    #[codec(index = 0)]
                    NewBlock {
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                    },
                    #[codec(index = 1)]
                    CreateClient {
                        client_id: ::std::vec::Vec<::core::primitive::u8>,
                        client_type: ::std::vec::Vec<::core::primitive::u8>,
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        consensus_height: ::core::primitive::u64,
                        consensus_revision_number: ::core::primitive::u64,
                    },
                    #[codec(index = 2)]
                    UpdateClient {
                        client_id: ::std::vec::Vec<::core::primitive::u8>,
                        client_type: ::std::vec::Vec<::core::primitive::u8>,
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        consensus_height: ::core::primitive::u64,
                        consensus_revision_number: ::core::primitive::u64,
                    },
                    #[codec(index = 3)]
                    UpgradeClient {
                        client_id: ::std::vec::Vec<::core::primitive::u8>,
                        client_type: ::std::vec::Vec<::core::primitive::u8>,
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        consensus_height: ::core::primitive::u64,
                        consensus_revision_number: ::core::primitive::u64,
                    },
                    #[codec(index = 4)]
                    ClientMisbehaviour {
                        client_id: ::std::vec::Vec<::core::primitive::u8>,
                        client_type: ::std::vec::Vec<::core::primitive::u8>,
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        consensus_height: ::core::primitive::u64,
                        consensus_revision_number: ::core::primitive::u64,
                    },
                    #[codec(index = 5)]
                    OpenInitConnection {
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        connection_id:
                            ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                        client_id: ::std::vec::Vec<::core::primitive::u8>,
                        counterparty_connection_id:
                            ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                        counterparty_client_id: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 6)]
                    OpenConfirmConnection {
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        connection_id:
                            ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                        client_id: ::std::vec::Vec<::core::primitive::u8>,
                        counterparty_connection_id:
                            ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                        counterparty_client_id: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 7)]
                    OpenTryConnection {
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        connection_id:
                            ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                        client_id: ::std::vec::Vec<::core::primitive::u8>,
                        counterparty_connection_id:
                            ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                        counterparty_client_id: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 8)]
                    OpenAckConnection {
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        connection_id:
                            ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                        client_id: ::std::vec::Vec<::core::primitive::u8>,
                        counterparty_connection_id:
                            ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                        counterparty_client_id: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 9)]
                    OpenInitChannel {
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        port_id: ::std::vec::Vec<::core::primitive::u8>,
                        channel_id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                        connection_id: ::std::vec::Vec<::core::primitive::u8>,
                        counterparty_port_id: ::std::vec::Vec<::core::primitive::u8>,
                        counterparty_channel_id:
                            ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                    },
                    #[codec(index = 10)]
                    OpenConfirmChannel {
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        port_id: ::std::vec::Vec<::core::primitive::u8>,
                        channel_id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                        connection_id: ::std::vec::Vec<::core::primitive::u8>,
                        counterparty_port_id: ::std::vec::Vec<::core::primitive::u8>,
                        counterparty_channel_id:
                            ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                    },
                    #[codec(index = 11)]
                    OpenTryChannel {
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        port_id: ::std::vec::Vec<::core::primitive::u8>,
                        channel_id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                        connection_id: ::std::vec::Vec<::core::primitive::u8>,
                        counterparty_port_id: ::std::vec::Vec<::core::primitive::u8>,
                        counterparty_channel_id:
                            ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                    },
                    #[codec(index = 12)]
                    OpenAckChannel {
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        port_id: ::std::vec::Vec<::core::primitive::u8>,
                        channel_id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                        connection_id: ::std::vec::Vec<::core::primitive::u8>,
                        counterparty_port_id: ::std::vec::Vec<::core::primitive::u8>,
                        counterparty_channel_id:
                            ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                    },
                    #[codec(index = 13)]
                    CloseInitChannel {
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        port_id: ::std::vec::Vec<::core::primitive::u8>,
                        channel_id: ::std::vec::Vec<::core::primitive::u8>,
                        connection_id: ::std::vec::Vec<::core::primitive::u8>,
                        counterparty_port_id: ::std::vec::Vec<::core::primitive::u8>,
                        counterparty_channel_id:
                            ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                    },
                    #[codec(index = 14)]
                    CloseConfirmChannel {
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        channel_id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                        port_id: ::std::vec::Vec<::core::primitive::u8>,
                        connection_id: ::std::vec::Vec<::core::primitive::u8>,
                        counterparty_port_id: ::std::vec::Vec<::core::primitive::u8>,
                        counterparty_channel_id:
                            ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                    },
                    #[codec(index = 15)]
                    ReceivePacket {
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        port_id: ::std::vec::Vec<::core::primitive::u8>,
                        channel_id: ::std::vec::Vec<::core::primitive::u8>,
                        dest_port: ::std::vec::Vec<::core::primitive::u8>,
                        dest_channel: ::std::vec::Vec<::core::primitive::u8>,
                        sequence: ::core::primitive::u64,
                    },
                    #[codec(index = 16)]
                    SendPacket {
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        port_id: ::std::vec::Vec<::core::primitive::u8>,
                        channel_id: ::std::vec::Vec<::core::primitive::u8>,
                        dest_port: ::std::vec::Vec<::core::primitive::u8>,
                        dest_channel: ::std::vec::Vec<::core::primitive::u8>,
                        sequence: ::core::primitive::u64,
                    },
                    #[codec(index = 17)]
                    AcknowledgePacket {
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        port_id: ::std::vec::Vec<::core::primitive::u8>,
                        channel_id: ::std::vec::Vec<::core::primitive::u8>,
                        sequence: ::core::primitive::u64,
                    },
                    #[codec(index = 18)]
                    WriteAcknowledgement {
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        port_id: ::std::vec::Vec<::core::primitive::u8>,
                        channel_id: ::std::vec::Vec<::core::primitive::u8>,
                        dest_port: ::std::vec::Vec<::core::primitive::u8>,
                        dest_channel: ::std::vec::Vec<::core::primitive::u8>,
                        sequence: ::core::primitive::u64,
                    },
                    #[codec(index = 19)]
                    TimeoutPacket {
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        port_id: ::std::vec::Vec<::core::primitive::u8>,
                        channel_id: ::std::vec::Vec<::core::primitive::u8>,
                        sequence: ::core::primitive::u64,
                    },
                    #[codec(index = 20)]
                    TimeoutOnClosePacket {
                        revision_height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                        port_id: ::std::vec::Vec<::core::primitive::u8>,
                        channel_id: ::std::vec::Vec<::core::primitive::u8>,
                        sequence: ::core::primitive::u64,
                    },
                    #[codec(index = 21)]
                    Empty,
                    #[codec(index = 22)]
                    ChainError,
                    #[codec(index = 23)]
                    AppModule {
                        kind: ::std::vec::Vec<::core::primitive::u8>,
                        module_id: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    deliver {
                        messages: ::std::vec::Vec<runtime_types::pallet_ibc::Any>,
                    },
                    #[codec(index = 1)]
                    transfer {
                        params: runtime_types::pallet_ibc::TransferParams<
                            subxt::ext::sp_core::crypto::AccountId32,
                        >,
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    set_params {
                        params: runtime_types::pallet_ibc::PalletParams,
                    },
                    #[codec(index = 3)]
                    #[doc = "We write the consensus & client state under these predefined paths so that"]
                    #[doc = "we can produce state proofs of the values to connected chains"]
                    #[doc = "in order to execute client upgrades."]
                    upgrade_client {
                        params: runtime_types::pallet_ibc::UpgradeParams,
                    },
                    #[codec(index = 4)]
                    #[doc = "Freeze a client at a specific height"]
                    freeze_client {
                        client_id: ::std::vec::Vec<::core::primitive::u8>,
                        height: ::core::primitive::u64,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Errors inform users that something went wrong."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Error processing ibc messages"]
                    ProcessingError,
                    #[codec(index = 1)]
                    #[doc = "Error decoding some type"]
                    DecodingError,
                    #[codec(index = 2)]
                    #[doc = "Error encoding some type"]
                    EncodingError,
                    #[codec(index = 3)]
                    #[doc = "Error generating trie proof"]
                    ProofGenerationError,
                    #[codec(index = 4)]
                    #[doc = "Client consensus state not found for height"]
                    ConsensusStateNotFound,
                    #[codec(index = 5)]
                    #[doc = "Channel not found"]
                    ChannelNotFound,
                    #[codec(index = 6)]
                    #[doc = "Client state not found"]
                    ClientStateNotFound,
                    #[codec(index = 7)]
                    #[doc = "Connection not found"]
                    ConnectionNotFound,
                    #[codec(index = 8)]
                    #[doc = "Packet commitment wasn't found"]
                    PacketCommitmentNotFound,
                    #[codec(index = 9)]
                    #[doc = "Packet receipt wasn't found"]
                    PacketReceiptNotFound,
                    #[codec(index = 10)]
                    #[doc = "Packet Acknowledgment wasn't found"]
                    PacketAcknowledgmentNotFound,
                    #[codec(index = 11)]
                    #[doc = "Error constructing packet"]
                    SendPacketError,
                    #[codec(index = 12)]
                    #[doc = "Invalid channel id"]
                    InvalidChannelId,
                    #[codec(index = 13)]
                    #[doc = "Invalid port id"]
                    InvalidPortId,
                    #[codec(index = 14)]
                    #[doc = "Other forms of errors"]
                    Other,
                    #[codec(index = 15)]
                    #[doc = "Invalid route"]
                    InvalidRoute,
                    #[codec(index = 16)]
                    #[doc = "Invalid message for extrinsic"]
                    InvalidMessageType,
                    #[codec(index = 17)]
                    #[doc = "The interchain token transfer was not successfully initiated"]
                    TransferFailed,
                    #[codec(index = 18)]
                    #[doc = "Error Decoding utf8 bytes"]
                    Utf8Error,
                    #[codec(index = 19)]
                    #[doc = "Invalid asset id"]
                    InvalidAssetId,
                    #[codec(index = 20)]
                    #[doc = "Invalid Ibc denom"]
                    InvalidIbcDenom,
                    #[codec(index = 21)]
                    #[doc = "Invalid amount"]
                    InvalidAmount,
                    #[codec(index = 22)]
                    #[doc = "Invalid timestamp"]
                    InvalidTimestamp,
                    #[codec(index = 23)]
                    #[doc = "Unable to get client revision number"]
                    FailedToGetRevisionNumber,
                    #[codec(index = 24)]
                    #[doc = "Invalid params passed"]
                    InvalidParams,
                    #[codec(index = 25)]
                    #[doc = "Error opening channel"]
                    ChannelInitError,
                    #[codec(index = 26)]
                    #[doc = "Latest height and timestamp for a client not found"]
                    TimestampAndHeightNotFound,
                    #[codec(index = 27)]
                    #[doc = "Failed to derive channel escrow address"]
                    ChannelEscrowAddress,
                    #[codec(index = 28)]
                    #[doc = "Error writing acknowledgement to storage"]
                    WriteAckError,
                    #[codec(index = 29)]
                    #[doc = "Client update time and height not found"]
                    ClientUpdateNotFound,
                    #[codec(index = 30)]
                    #[doc = "Error Freezing client"]
                    ClientFreezeFailed,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Events emitted by the ibc subsystem"]
                    Events {
                        events: ::std::vec::Vec<runtime_types::pallet_ibc::events::IbcEvent>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Errors emitted by the ibc subsystem"]
                    Errors {
                        errors: ::std::vec::Vec<runtime_types::pallet_ibc::errors::IbcError>,
                    },
                    #[codec(index = 2)]
                    #[doc = "An Ibc token transfer has been started"]
                    TokenTransferInitiated {
                        from: subxt::ext::sp_core::crypto::AccountId32,
                        to: ::std::vec::Vec<::core::primitive::u8>,
                        ibc_denom: ::std::vec::Vec<::core::primitive::u8>,
                        local_asset_id:
                            ::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
                        amount: ::core::primitive::u128,
                        is_sender_source: ::core::primitive::bool,
                        source_channel: ::std::vec::Vec<::core::primitive::u8>,
                        destination_channel: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 3)]
                    #[doc = "A channel has been opened"]
                    ChannelOpened {
                        channel_id: ::std::vec::Vec<::core::primitive::u8>,
                        port_id: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 4)]
                    #[doc = "Pallet params updated"]
                    ParamsUpdated {
                        send_enabled: ::core::primitive::bool,
                        receive_enabled: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "An outgoing Ibc token transfer has been completed and burnt"]
                    TokenTransferCompleted {
                        from: ::std::vec::Vec<::core::primitive::u8>,
                        to: ::std::vec::Vec<::core::primitive::u8>,
                        ibc_denom: ::std::vec::Vec<::core::primitive::u8>,
                        local_asset_id:
                            ::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
                        amount: ::core::primitive::u128,
                        is_sender_source: ::core::primitive::bool,
                        source_channel: ::std::vec::Vec<::core::primitive::u8>,
                        destination_channel: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 6)]
                    #[doc = "Ibc tokens have been received and minted"]
                    TokenReceived {
                        from: ::std::vec::Vec<::core::primitive::u8>,
                        to: ::std::vec::Vec<::core::primitive::u8>,
                        ibc_denom: ::std::vec::Vec<::core::primitive::u8>,
                        local_asset_id:
                            ::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
                        amount: ::core::primitive::u128,
                        is_receiver_source: ::core::primitive::bool,
                        source_channel: ::std::vec::Vec<::core::primitive::u8>,
                        destination_channel: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 7)]
                    #[doc = "Ibc transfer failed, received an acknowledgement error, tokens have been refunded"]
                    TokenTransferFailed {
                        from: ::std::vec::Vec<::core::primitive::u8>,
                        to: ::std::vec::Vec<::core::primitive::u8>,
                        ibc_denom: ::std::vec::Vec<::core::primitive::u8>,
                        local_asset_id:
                            ::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
                        amount: ::core::primitive::u128,
                        is_sender_source: ::core::primitive::bool,
                        source_channel: ::std::vec::Vec<::core::primitive::u8>,
                        destination_channel: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 8)]
                    #[doc = "On recv packet was not processed successfully processes"]
                    OnRecvPacketError {
                        msg: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 9)]
                    #[doc = "Client upgrade path has been set"]
                    ClientUpgradeSet,
                    #[codec(index = 10)]
                    #[doc = "Client has been frozen"]
                    ClientFrozen {
                        client_id: ::std::vec::Vec<::core::primitive::u8>,
                        height: ::core::primitive::u64,
                        revision_number: ::core::primitive::u64,
                    },
                    #[codec(index = 11)]
                    #[doc = "Asset Admin Account Updated"]
                    AssetAdminUpdated {
                        admin_account: subxt::ext::sp_core::crypto::AccountId32,
                    },
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Any {
                pub type_url: ::std::vec::Vec<::core::primitive::u8>,
                pub value: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum MultiAddress<_0> {
                #[codec(index = 0)]
                Id(_0),
                #[codec(index = 1)]
                Raw(::std::vec::Vec<::core::primitive::u8>),
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct PalletParams {
                pub send_enabled: ::core::primitive::bool,
                pub receive_enabled: ::core::primitive::bool,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct TransferParams<_0> {
                pub to: runtime_types::pallet_ibc::MultiAddress<_0>,
                pub source_channel: ::core::primitive::u64,
                pub timeout: runtime_types::ibc_primitives::Timeout,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct UpgradeParams {
                pub client_state: ::std::vec::Vec<::core::primitive::u8>,
                pub consensus_state: ::std::vec::Vec<::core::primitive::u8>,
            }
        }
        pub mod pallet_ibc_ping {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    send_ping {
                        params: runtime_types::pallet_ibc_ping::SendPingParams,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Invalid params passed"]
                    InvalidParams,
                    #[codec(index = 1)]
                    #[doc = "Error opening channel"]
                    ChannelInitError,
                    #[codec(index = 2)]
                    #[doc = "Error registering packet"]
                    PacketSendError,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A send packet has been registered"]
                    PacketSent,
                    #[codec(index = 1)]
                    #[doc = "A channel has been opened"]
                    ChannelOpened {
                        channel_id: ::std::vec::Vec<::core::primitive::u8>,
                        port_id: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct SendPingParams {
                pub data: ::std::vec::Vec<::core::primitive::u8>,
                pub timeout_height_offset: ::core::primitive::u64,
                pub timeout_timestamp_offset: ::core::primitive::u64,
                pub channel_id: ::core::primitive::u64,
            }
        }
        pub mod pallet_identity {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Identity pallet declaration."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Add a registrar to the system."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `T::RegistrarOrigin`."]
                    #[doc = ""]
                    #[doc = "- `account`: the account of the registrar."]
                    #[doc = ""]
                    #[doc = "Emits `RegistrarAdded` if successful."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded)."]
                    #[doc = "- One storage mutation (codec `O(R)`)."]
                    #[doc = "- One event."]
                    #[doc = "# </weight>"]
                    add_registrar {
                        account: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Set an account's identity information and reserve the appropriate deposit."]
                    #[doc = ""]
                    #[doc = "If the account already has identity information, the deposit is taken as part payment"]
                    #[doc = "for the new deposit."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `info`: The identity information."]
                    #[doc = ""]
                    #[doc = "Emits `IdentitySet` if successful."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(X + X' + R)`"]
                    #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)"]
                    #[doc = "  - where `R` judgements-count (registrar-count-bounded)"]
                    #[doc = "- One balance reserve operation."]
                    #[doc = "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`)."]
                    #[doc = "- One event."]
                    #[doc = "# </weight>"]
                    set_identity {
                        info:
                            ::std::boxed::Box<runtime_types::pallet_identity::types::IdentityInfo>,
                    },
                    #[codec(index = 2)]
                    #[doc = "Set the sub-accounts of the sender."]
                    #[doc = ""]
                    #[doc = "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned"]
                    #[doc = "and an amount `SubAccountDeposit` will be reserved for each item in `subs`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                    #[doc = "identity."]
                    #[doc = ""]
                    #[doc = "- `subs`: The identity's (new) sub-accounts."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(P + S)`"]
                    #[doc = "  - where `P` old-subs-count (hard- and deposit-bounded)."]
                    #[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
                    #[doc = "- At most one balance operations."]
                    #[doc = "- DB:"]
                    #[doc = "  - `P + S` storage mutations (codec complexity `O(1)`)"]
                    #[doc = "  - One storage read (codec complexity `O(P)`)."]
                    #[doc = "  - One storage write (codec complexity `O(S)`)."]
                    #[doc = "  - One storage-exists (`IdentityOf::contains_key`)."]
                    #[doc = "# </weight>"]
                    set_subs {
                        subs: ::std::vec::Vec<(
                            subxt::ext::sp_core::crypto::AccountId32,
                            runtime_types::pallet_identity::types::Data,
                        )>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Clear an account's identity info and all sub-accounts and return all deposits."]
                    #[doc = ""]
                    #[doc = "Payment: All reserved balances on the account are returned."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                    #[doc = "identity."]
                    #[doc = ""]
                    #[doc = "Emits `IdentityCleared` if successful."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(R + S + X)`"]
                    #[doc = "  - where `R` registrar-count (governance-bounded)."]
                    #[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
                    #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)."]
                    #[doc = "- One balance-unreserve operation."]
                    #[doc = "- `2` storage reads and `S + 2` storage deletions."]
                    #[doc = "- One event."]
                    #[doc = "# </weight>"]
                    clear_identity,
                    #[codec(index = 4)]
                    #[doc = "Request a judgement from a registrar."]
                    #[doc = ""]
                    #[doc = "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement"]
                    #[doc = "given."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
                    #[doc = "registered identity."]
                    #[doc = ""]
                    #[doc = "- `reg_index`: The index of the registrar whose judgement is requested."]
                    #[doc = "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:"]
                    #[doc = ""]
                    #[doc = "```nocompile"]
                    #[doc = "Self::registrars().get(reg_index).unwrap().fee"]
                    #[doc = "```"]
                    #[doc = ""]
                    #[doc = "Emits `JudgementRequested` if successful."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(R + X)`."]
                    #[doc = "- One balance-reserve operation."]
                    #[doc = "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`."]
                    #[doc = "- One event."]
                    #[doc = "# </weight>"]
                    request_judgement {
                        #[codec(compact)]
                        reg_index: ::core::primitive::u32,
                        #[codec(compact)]
                        max_fee: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Cancel a previous request."]
                    #[doc = ""]
                    #[doc = "Payment: A previously reserved deposit is returned on success."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
                    #[doc = "registered identity."]
                    #[doc = ""]
                    #[doc = "- `reg_index`: The index of the registrar whose judgement is no longer requested."]
                    #[doc = ""]
                    #[doc = "Emits `JudgementUnrequested` if successful."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(R + X)`."]
                    #[doc = "- One balance-reserve operation."]
                    #[doc = "- One storage mutation `O(R + X)`."]
                    #[doc = "- One event"]
                    #[doc = "# </weight>"]
                    cancel_request { reg_index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    #[doc = "Set the fee required for a judgement to be requested from a registrar."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                    #[doc = "of the registrar whose index is `index`."]
                    #[doc = ""]
                    #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                    #[doc = "- `fee`: the new fee."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(R)`."]
                    #[doc = "- One storage mutation `O(R)`."]
                    #[doc = "- Benchmark: 7.315 + R * 0.329 µs (min squares analysis)"]
                    #[doc = "# </weight>"]
                    set_fee {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        #[codec(compact)]
                        fee: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    #[doc = "Change the account associated with a registrar."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                    #[doc = "of the registrar whose index is `index`."]
                    #[doc = ""]
                    #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                    #[doc = "- `new`: the new account ID."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(R)`."]
                    #[doc = "- One storage mutation `O(R)`."]
                    #[doc = "- Benchmark: 8.823 + R * 0.32 µs (min squares analysis)"]
                    #[doc = "# </weight>"]
                    set_account_id {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        new: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 8)]
                    #[doc = "Set the field information for a registrar."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                    #[doc = "of the registrar whose index is `index`."]
                    #[doc = ""]
                    #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                    #[doc = "- `fields`: the fields that the registrar concerns themselves with."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(R)`."]
                    #[doc = "- One storage mutation `O(R)`."]
                    #[doc = "- Benchmark: 7.464 + R * 0.325 µs (min squares analysis)"]
                    #[doc = "# </weight>"]
                    set_fields {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        fields: runtime_types::pallet_identity::types::BitFlags<
                            runtime_types::pallet_identity::types::IdentityField,
                        >,
                    },
                    #[codec(index = 9)]
                    #[doc = "Provide a judgement for an account's identity."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                    #[doc = "of the registrar whose index is `reg_index`."]
                    #[doc = ""]
                    #[doc = "- `reg_index`: the index of the registrar whose judgement is being made."]
                    #[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
                    #[doc = "  with a registered identity."]
                    #[doc = "- `judgement`: the judgement of the registrar of index `reg_index` about `target`."]
                    #[doc = ""]
                    #[doc = "Emits `JudgementGiven` if successful."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(R + X)`."]
                    #[doc = "- One balance-transfer operation."]
                    #[doc = "- Up to one account-lookup operation."]
                    #[doc = "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`."]
                    #[doc = "- One event."]
                    #[doc = "# </weight>"]
                    provide_judgement {
                        #[codec(compact)]
                        reg_index: ::core::primitive::u32,
                        target: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        judgement: runtime_types::pallet_identity::types::Judgement<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 10)]
                    #[doc = "Remove an account's identity and sub-account information and slash the deposits."]
                    #[doc = ""]
                    #[doc = "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by"]
                    #[doc = "`Slash`. Verification request deposits are not returned; they should be cancelled"]
                    #[doc = "manually using `cancel_request`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must match `T::ForceOrigin`."]
                    #[doc = ""]
                    #[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
                    #[doc = "  with a registered identity."]
                    #[doc = ""]
                    #[doc = "Emits `IdentityKilled` if successful."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(R + S + X)`."]
                    #[doc = "- One balance-reserve operation."]
                    #[doc = "- `S + 2` storage mutations."]
                    #[doc = "- One event."]
                    #[doc = "# </weight>"]
                    kill_identity {
                        target: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 11)]
                    #[doc = "Add the given account to the sender's subs."]
                    #[doc = ""]
                    #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                    #[doc = "to the sender."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                    #[doc = "sub identity of `sub`."]
                    add_sub {
                        sub: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        data: runtime_types::pallet_identity::types::Data,
                    },
                    #[codec(index = 12)]
                    #[doc = "Alter the associated name of the given sub-account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                    #[doc = "sub identity of `sub`."]
                    rename_sub {
                        sub: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        data: runtime_types::pallet_identity::types::Data,
                    },
                    #[codec(index = 13)]
                    #[doc = "Remove the given account from the sender's subs."]
                    #[doc = ""]
                    #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                    #[doc = "to the sender."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                    #[doc = "sub identity of `sub`."]
                    remove_sub {
                        sub: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 14)]
                    #[doc = "Remove the sender as a sub-account."]
                    #[doc = ""]
                    #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                    #[doc = "to the sender (*not* the original depositor)."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                    #[doc = "super-identity."]
                    #[doc = ""]
                    #[doc = "NOTE: This should not normally be used, but is provided in the case that the non-"]
                    #[doc = "controller of an account is maliciously registered as a sub-account."]
                    quit_sub,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Too many subs-accounts."]
                    TooManySubAccounts,
                    #[codec(index = 1)]
                    #[doc = "Account isn't found."]
                    NotFound,
                    #[codec(index = 2)]
                    #[doc = "Account isn't named."]
                    NotNamed,
                    #[codec(index = 3)]
                    #[doc = "Empty index."]
                    EmptyIndex,
                    #[codec(index = 4)]
                    #[doc = "Fee is changed."]
                    FeeChanged,
                    #[codec(index = 5)]
                    #[doc = "No identity found."]
                    NoIdentity,
                    #[codec(index = 6)]
                    #[doc = "Sticky judgement."]
                    StickyJudgement,
                    #[codec(index = 7)]
                    #[doc = "Judgement given."]
                    JudgementGiven,
                    #[codec(index = 8)]
                    #[doc = "Invalid judgement."]
                    InvalidJudgement,
                    #[codec(index = 9)]
                    #[doc = "The index is invalid."]
                    InvalidIndex,
                    #[codec(index = 10)]
                    #[doc = "The target is invalid."]
                    InvalidTarget,
                    #[codec(index = 11)]
                    #[doc = "Too many additional fields."]
                    TooManyFields,
                    #[codec(index = 12)]
                    #[doc = "Maximum amount of registrars reached. Cannot add any more."]
                    TooManyRegistrars,
                    #[codec(index = 13)]
                    #[doc = "Account ID is already named."]
                    AlreadyClaimed,
                    #[codec(index = 14)]
                    #[doc = "Sender is not a sub-account."]
                    NotSub,
                    #[codec(index = 15)]
                    #[doc = "Sub-account isn't owned by sender."]
                    NotOwned,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A name was set or reset (which will remove all judgements)."]
                    IdentitySet {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A name was cleared, and the given balance returned."]
                    IdentityCleared {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "A name was removed and the given balance slashed."]
                    IdentityKilled {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "A judgement was asked from a registrar."]
                    JudgementRequested {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "A judgement request was retracted."]
                    JudgementUnrequested {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "A judgement was given by a registrar."]
                    JudgementGiven {
                        target: subxt::ext::sp_core::crypto::AccountId32,
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    #[doc = "A registrar was added."]
                    RegistrarAdded {
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "A sub-identity was added to an identity and the deposit paid."]
                    SubIdentityAdded {
                        sub: subxt::ext::sp_core::crypto::AccountId32,
                        main: subxt::ext::sp_core::crypto::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "A sub-identity was removed from an identity and the deposit freed."]
                    SubIdentityRemoved {
                        sub: subxt::ext::sp_core::crypto::AccountId32,
                        main: subxt::ext::sp_core::crypto::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "A sub-identity was cleared, and the given deposit repatriated from the"]
                    #[doc = "main identity account to the sub-identity account."]
                    SubIdentityRevoked {
                        sub: subxt::ext::sp_core::crypto::AccountId32,
                        main: subxt::ext::sp_core::crypto::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    Debug,
                    subxt :: ext :: codec :: CompactAs,
                    subxt :: ext :: codec :: Decode,
                    subxt :: ext :: codec :: Encode,
                )]
                pub struct BitFlags<_0>(
                    pub ::core::primitive::u64,
                    #[codec(skip)] pub ::core::marker::PhantomData<_0>,
                );
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum Data {
                    #[codec(index = 0)]
                    None,
                    #[codec(index = 1)]
                    Raw0([::core::primitive::u8; 0usize]),
                    #[codec(index = 2)]
                    Raw1([::core::primitive::u8; 1usize]),
                    #[codec(index = 3)]
                    Raw2([::core::primitive::u8; 2usize]),
                    #[codec(index = 4)]
                    Raw3([::core::primitive::u8; 3usize]),
                    #[codec(index = 5)]
                    Raw4([::core::primitive::u8; 4usize]),
                    #[codec(index = 6)]
                    Raw5([::core::primitive::u8; 5usize]),
                    #[codec(index = 7)]
                    Raw6([::core::primitive::u8; 6usize]),
                    #[codec(index = 8)]
                    Raw7([::core::primitive::u8; 7usize]),
                    #[codec(index = 9)]
                    Raw8([::core::primitive::u8; 8usize]),
                    #[codec(index = 10)]
                    Raw9([::core::primitive::u8; 9usize]),
                    #[codec(index = 11)]
                    Raw10([::core::primitive::u8; 10usize]),
                    #[codec(index = 12)]
                    Raw11([::core::primitive::u8; 11usize]),
                    #[codec(index = 13)]
                    Raw12([::core::primitive::u8; 12usize]),
                    #[codec(index = 14)]
                    Raw13([::core::primitive::u8; 13usize]),
                    #[codec(index = 15)]
                    Raw14([::core::primitive::u8; 14usize]),
                    #[codec(index = 16)]
                    Raw15([::core::primitive::u8; 15usize]),
                    #[codec(index = 17)]
                    Raw16([::core::primitive::u8; 16usize]),
                    #[codec(index = 18)]
                    Raw17([::core::primitive::u8; 17usize]),
                    #[codec(index = 19)]
                    Raw18([::core::primitive::u8; 18usize]),
                    #[codec(index = 20)]
                    Raw19([::core::primitive::u8; 19usize]),
                    #[codec(index = 21)]
                    Raw20([::core::primitive::u8; 20usize]),
                    #[codec(index = 22)]
                    Raw21([::core::primitive::u8; 21usize]),
                    #[codec(index = 23)]
                    Raw22([::core::primitive::u8; 22usize]),
                    #[codec(index = 24)]
                    Raw23([::core::primitive::u8; 23usize]),
                    #[codec(index = 25)]
                    Raw24([::core::primitive::u8; 24usize]),
                    #[codec(index = 26)]
                    Raw25([::core::primitive::u8; 25usize]),
                    #[codec(index = 27)]
                    Raw26([::core::primitive::u8; 26usize]),
                    #[codec(index = 28)]
                    Raw27([::core::primitive::u8; 27usize]),
                    #[codec(index = 29)]
                    Raw28([::core::primitive::u8; 28usize]),
                    #[codec(index = 30)]
                    Raw29([::core::primitive::u8; 29usize]),
                    #[codec(index = 31)]
                    Raw30([::core::primitive::u8; 30usize]),
                    #[codec(index = 32)]
                    Raw31([::core::primitive::u8; 31usize]),
                    #[codec(index = 33)]
                    Raw32([::core::primitive::u8; 32usize]),
                    #[codec(index = 34)]
                    BlakeTwo256([::core::primitive::u8; 32usize]),
                    #[codec(index = 35)]
                    Sha256([::core::primitive::u8; 32usize]),
                    #[codec(index = 36)]
                    Keccak256([::core::primitive::u8; 32usize]),
                    #[codec(index = 37)]
                    ShaThree256([::core::primitive::u8; 32usize]),
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum IdentityField {
                    #[codec(index = 1)]
                    Display,
                    #[codec(index = 2)]
                    Legal,
                    #[codec(index = 4)]
                    Web,
                    #[codec(index = 8)]
                    Riot,
                    #[codec(index = 16)]
                    Email,
                    #[codec(index = 32)]
                    PgpFingerprint,
                    #[codec(index = 64)]
                    Image,
                    #[codec(index = 128)]
                    Twitter,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct IdentityInfo {
                    pub additional: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<(
                        runtime_types::pallet_identity::types::Data,
                        runtime_types::pallet_identity::types::Data,
                    )>,
                    pub display: runtime_types::pallet_identity::types::Data,
                    pub legal: runtime_types::pallet_identity::types::Data,
                    pub web: runtime_types::pallet_identity::types::Data,
                    pub riot: runtime_types::pallet_identity::types::Data,
                    pub email: runtime_types::pallet_identity::types::Data,
                    pub pgp_fingerprint: ::core::option::Option<[::core::primitive::u8; 20usize]>,
                    pub image: runtime_types::pallet_identity::types::Data,
                    pub twitter: runtime_types::pallet_identity::types::Data,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum Judgement<_0> {
                    #[codec(index = 0)]
                    Unknown,
                    #[codec(index = 1)]
                    FeePaid(_0),
                    #[codec(index = 2)]
                    Reasonable,
                    #[codec(index = 3)]
                    KnownGood,
                    #[codec(index = 4)]
                    OutOfDate,
                    #[codec(index = 5)]
                    LowQuality,
                    #[codec(index = 6)]
                    Erroneous,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct RegistrarInfo<_0, _1> {
                    pub account: _1,
                    pub fee: _0,
                    pub fields: runtime_types::pallet_identity::types::BitFlags<
                        runtime_types::pallet_identity::types::IdentityField,
                    >,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Registration<_0> {
                    pub judgements: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<(
                        ::core::primitive::u32,
                        runtime_types::pallet_identity::types::Judgement<_0>,
                    )>,
                    pub deposit: _0,
                    pub info: runtime_types::pallet_identity::types::IdentityInfo,
                }
            }
        }
        pub mod pallet_indices {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Assign an previously unassigned index."]
                    #[doc = ""]
                    #[doc = "Payment: `Deposit` is reserved from the sender account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `index`: the index to be claimed. This must not be in use."]
                    #[doc = ""]
                    #[doc = "Emits `IndexAssigned` if successful."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(1)`."]
                    #[doc = "- One storage mutation (codec `O(1)`)."]
                    #[doc = "- One reserve operation."]
                    #[doc = "- One event."]
                    #[doc = "-------------------"]
                    #[doc = "- DB Weight: 1 Read/Write (Accounts)"]
                    #[doc = "# </weight>"]
                    claim { index: ::core::primitive::u32 },
                    #[codec(index = 1)]
                    #[doc = "Assign an index already owned by the sender to another account. The balance reservation"]
                    #[doc = "is effectively transferred to the new account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `index`: the index to be re-assigned. This must be owned by the sender."]
                    #[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
                    #[doc = ""]
                    #[doc = "Emits `IndexAssigned` if successful."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(1)`."]
                    #[doc = "- One storage mutation (codec `O(1)`)."]
                    #[doc = "- One transfer operation."]
                    #[doc = "- One event."]
                    #[doc = "-------------------"]
                    #[doc = "- DB Weight:"]
                    #[doc = "   - Reads: Indices Accounts, System Account (recipient)"]
                    #[doc = "   - Writes: Indices Accounts, System Account (recipient)"]
                    #[doc = "# </weight>"]
                    transfer {
                        new: subxt::ext::sp_core::crypto::AccountId32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Free up an index owned by the sender."]
                    #[doc = ""]
                    #[doc = "Payment: Any previous deposit placed for the index is unreserved in the sender account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must own the index."]
                    #[doc = ""]
                    #[doc = "- `index`: the index to be freed. This must be owned by the sender."]
                    #[doc = ""]
                    #[doc = "Emits `IndexFreed` if successful."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(1)`."]
                    #[doc = "- One storage mutation (codec `O(1)`)."]
                    #[doc = "- One reserve operation."]
                    #[doc = "- One event."]
                    #[doc = "-------------------"]
                    #[doc = "- DB Weight: 1 Read/Write (Accounts)"]
                    #[doc = "# </weight>"]
                    free { index: ::core::primitive::u32 },
                    #[codec(index = 3)]
                    #[doc = "Force an index to an account. This doesn't require a deposit. If the index is already"]
                    #[doc = "held, then any deposit is reimbursed to its current owner."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "- `index`: the index to be (re-)assigned."]
                    #[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
                    #[doc = "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred."]
                    #[doc = ""]
                    #[doc = "Emits `IndexAssigned` if successful."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(1)`."]
                    #[doc = "- One storage mutation (codec `O(1)`)."]
                    #[doc = "- Up to one reserve operation."]
                    #[doc = "- One event."]
                    #[doc = "-------------------"]
                    #[doc = "- DB Weight:"]
                    #[doc = "   - Reads: Indices Accounts, System Account (original owner)"]
                    #[doc = "   - Writes: Indices Accounts, System Account (original owner)"]
                    #[doc = "# </weight>"]
                    force_transfer {
                        new: subxt::ext::sp_core::crypto::AccountId32,
                        index: ::core::primitive::u32,
                        freeze: ::core::primitive::bool,
                    },
                    #[codec(index = 4)]
                    #[doc = "Freeze an index so it will always point to the sender account. This consumes the"]
                    #[doc = "deposit."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the signing account must have a"]
                    #[doc = "non-frozen account `index`."]
                    #[doc = ""]
                    #[doc = "- `index`: the index to be frozen in place."]
                    #[doc = ""]
                    #[doc = "Emits `IndexFrozen` if successful."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(1)`."]
                    #[doc = "- One storage mutation (codec `O(1)`)."]
                    #[doc = "- Up to one slash operation."]
                    #[doc = "- One event."]
                    #[doc = "-------------------"]
                    #[doc = "- DB Weight: 1 Read/Write (Accounts)"]
                    #[doc = "# </weight>"]
                    freeze { index: ::core::primitive::u32 },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The index was not already assigned."]
                    NotAssigned,
                    #[codec(index = 1)]
                    #[doc = "The index is assigned to another account."]
                    NotOwner,
                    #[codec(index = 2)]
                    #[doc = "The index was not available."]
                    InUse,
                    #[codec(index = 3)]
                    #[doc = "The source and destination accounts are identical."]
                    NotTransfer,
                    #[codec(index = 4)]
                    #[doc = "The index is permanent and may not be freed/changed."]
                    Permanent,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A account index was assigned."]
                    IndexAssigned {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A account index has been freed up (unassigned)."]
                    IndexFreed { index: ::core::primitive::u32 },
                    #[codec(index = 2)]
                    #[doc = "A account index has been frozen to its current account ID."]
                    IndexFrozen {
                        index: ::core::primitive::u32,
                        who: subxt::ext::sp_core::crypto::AccountId32,
                    },
                }
            }
        }
        pub mod pallet_lending {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Create a new lending market."]
                    #[doc = "- `origin` : Sender of this extrinsic. Manager for new market to be created. Can pause"]
                    #[doc = "  borrow operations."]
                    #[doc = "- `input`   : Borrow & deposits of assets, percentages."]
                    #[doc = ""]
                    #[doc = "`origin` irreversibly pays `T::OracleMarketCreationStake`."]
                    create_market {
                        input: runtime_types::composable_traits::lending::CreateInput<
                            ::core::primitive::u32,
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u32,
                        >,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 1)]
                    #[doc = "owner must be very careful calling this"]
                    update_market {
                        market_id: runtime_types::pallet_lending::types::MarketId,
                        input: runtime_types::composable_traits::lending::UpdateInput<
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "lender deposits assets to market."]
                    #[doc = "- `origin` : Sender of this extrinsic."]
                    #[doc = "- `market_id` : Market index to which asset will be deposited."]
                    #[doc = "- `amount` : Amount of asset to be deposited."]
                    vault_deposit {
                        market_id: runtime_types::pallet_lending::types::MarketId,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "lender withdraws assets to market."]
                    #[doc = "- `origin` : Sender of this extrinsic."]
                    #[doc = "- `market_id` : Market index to which asset will be withdrawn."]
                    #[doc = "- `amount` : Amount of asset to be withdrawn."]
                    vault_withdraw {
                        market_id: runtime_types::pallet_lending::types::MarketId,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Deposit collateral to market."]
                    #[doc = "- `origin` : Sender of this extrinsic."]
                    #[doc = "- `market` : Market index to which collateral will be deposited."]
                    #[doc = "- `amount` : Amount of collateral to be deposited."]
                    deposit_collateral {
                        market_id: runtime_types::pallet_lending::types::MarketId,
                        amount: ::core::primitive::u128,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "Withdraw collateral from market."]
                    #[doc = "- `origin` : Sender of this extrinsic."]
                    #[doc = "- `market_id` : Market index from which collateral will be withdraw."]
                    #[doc = "- `amount` : Amount of collateral to be withdrawn."]
                    withdraw_collateral {
                        market_id: runtime_types::pallet_lending::types::MarketId,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Borrow asset against deposited collateral."]
                    #[doc = "- `origin` : Sender of this extrinsic. (Also the user who wants to borrow from market.)"]
                    #[doc = "- `market_id` : Market index from which user wants to borrow."]
                    #[doc = "- `amount_to_borrow` : Amount which user wants to borrow."]
                    borrow {
                        market_id: runtime_types::pallet_lending::types::MarketId,
                        amount_to_borrow: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    #[doc = "Repay part or all of the borrow in the given market."]
                    #[doc = ""]
                    #[doc = "# Parameters"]
                    #[doc = ""]
                    #[doc = "- `origin` : Sender of this extrinsic. (Also the user who repays beneficiary's borrow.)"]
                    #[doc = "- `market_id` : [`MarketId`] of the market being repaid."]
                    #[doc = "- `beneficiary` : [`AccountId`] of the account who is in debt to (has borrowed assets"]
                    #[doc = "  from) the market. This can be same or different from the `origin`, allowing one"]
                    #[doc = "  account to pay off another's debts."]
                    #[doc = "- `amount`: The amount to repay. See [`RepayStrategy`] for more information."]
                    repay_borrow {
                        market_id: runtime_types::pallet_lending::types::MarketId,
                        beneficiary: subxt::ext::sp_core::crypto::AccountId32,
                        amount: runtime_types::composable_traits::lending::RepayStrategy<
                            ::core::primitive::u128,
                        >,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 8)]
                    #[doc = "Check if borrows for the `borrowers` accounts are required to be liquidated, initiate"]
                    #[doc = "liquidation."]
                    #[doc = "- `origin` : Sender of this extrinsic."]
                    #[doc = "- `market_id` : Market index from which `borrower` has taken borrow."]
                    #[doc = "- `borrowers` : Vector of borrowers accounts' ids."]
                    liquidate {
                        market_id: runtime_types::pallet_lending::types::MarketId,
                        borrowers: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                            subxt::ext::sp_core::crypto::AccountId32,
                        >,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The market could not be found."]
                    MarketDoesNotExist,
                    #[codec(index = 1)]
                    #[doc = "Account did not deposit any collateral to particular market."]
                    AccountCollateralAbsent,
                    #[codec(index = 2)]
                    #[doc = "Invalid collateral factor was provided."]
                    #[doc = "Collateral factor value must be more than one."]
                    InvalidCollateralFactor,
                    #[codec(index = 3)]
                    MarketIsClosing,
                    #[codec(index = 4)]
                    InvalidTimestampOnBorrowRequest,
                    #[codec(index = 5)]
                    #[doc = "When user try to withdraw money beyond what is available."]
                    NotEnoughCollateralToWithdraw,
                    #[codec(index = 6)]
                    #[doc = "The market would go under collateralized if the requested amount of collateral was"]
                    #[doc = "withdrawn."]
                    WouldGoUnderCollateralized,
                    #[codec(index = 7)]
                    #[doc = "User has provided not sufficient amount of collateral."]
                    NotEnoughCollateralToBorrow,
                    #[codec(index = 8)]
                    #[doc = "Borrow rate can not be calculated."]
                    CannotCalculateBorrowRate,
                    #[codec(index = 9)]
                    #[doc = "Borrow and repay in the same block are not allowed."]
                    #[doc = "Flashloans are not supported by the pallet."]
                    BorrowAndRepayInSameBlockIsNotSupported,
                    #[codec(index = 10)]
                    #[doc = "User tried to repay non-existent loan."]
                    BorrowDoesNotExist,
                    #[codec(index = 11)]
                    #[doc = "Market can not be created since"]
                    #[doc = "allowed number of markets was exceeded."]
                    ExceedLendingCount,
                    #[codec(index = 12)]
                    #[doc = "Borrow limit for particular borrower was not calculated"]
                    #[doc = "due to arithmetic error."]
                    BorrowLimitCalculationFailed,
                    #[codec(index = 13)]
                    #[doc = "Attempted to update a market owned by someone else."]
                    Unauthorized,
                    #[codec(index = 14)]
                    #[doc = "Market manager has to deposit initial amount of borrow asset into the market account."]
                    #[doc = "Initial amount is denominated in normalized currency and calculated based on data"]
                    #[doc = "from Oracle. The error is emitted if calculated amount is incorrect."]
                    InitialMarketVolumeIncorrect,
                    #[codec(index = 15)]
                    #[doc = "A market with a borrow balance of `0` was attempted to be repaid."]
                    CannotRepayZeroBalance,
                    #[codec(index = 16)]
                    #[doc = "Cannot repay more than total amount of debt when partially repaying."]
                    CannotRepayMoreThanTotalDebt,
                    #[codec(index = 17)]
                    #[doc = "Account did not pay any rent to particular market."]
                    BorrowRentDoesNotExist,
                    #[codec(index = 18)]
                    #[doc = "Block number of provided price is out of allowed tolerance."]
                    PriceTooOld,
                    #[codec(index = 19)]
                    CannotIncreaseCollateralFactorOfOpenMarket,
                    #[codec(index = 20)]
                    CannotBorrowFromMarketWithUnbalancedVault,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Event emitted when new lending market is created."]
                    MarketCreated {
                        market_id: runtime_types::pallet_lending::types::MarketId,
                        vault_id: ::core::primitive::u64,
                        manager: subxt::ext::sp_core::crypto::AccountId32,
                        currency_pair: runtime_types::composable_traits::defi::CurrencyPair<
                            runtime_types::primitives::currency::CurrencyId,
                        >,
                    },
                    #[codec(index = 1)]
                    MarketUpdated {
                        market_id: runtime_types::pallet_lending::types::MarketId,
                        input: runtime_types::composable_traits::lending::UpdateInput<
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "Event emitted when asset is deposited by lender."]
                    AssetDeposited {
                        sender: subxt::ext::sp_core::crypto::AccountId32,
                        market_id: runtime_types::pallet_lending::types::MarketId,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Event emitted when asset is withdrawn by lender."]
                    AssetWithdrawn {
                        sender: subxt::ext::sp_core::crypto::AccountId32,
                        market_id: runtime_types::pallet_lending::types::MarketId,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Event emitted when collateral is deposited."]
                    CollateralDeposited {
                        sender: subxt::ext::sp_core::crypto::AccountId32,
                        market_id: runtime_types::pallet_lending::types::MarketId,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Event emitted when collateral is withdrawn."]
                    CollateralWithdrawn {
                        sender: subxt::ext::sp_core::crypto::AccountId32,
                        market_id: runtime_types::pallet_lending::types::MarketId,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Event emitted when user borrows from given market."]
                    Borrowed {
                        sender: subxt::ext::sp_core::crypto::AccountId32,
                        market_id: runtime_types::pallet_lending::types::MarketId,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    #[doc = "Event emitted when user repays borrow of beneficiary in given market."]
                    BorrowRepaid {
                        sender: subxt::ext::sp_core::crypto::AccountId32,
                        market_id: runtime_types::pallet_lending::types::MarketId,
                        beneficiary: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "Event emitted when a liquidation is initiated for a loan."]
                    LiquidationInitiated {
                        market_id: runtime_types::pallet_lending::types::MarketId,
                        borrowers: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                    },
                    #[codec(index = 9)]
                    #[doc = "Event emitted to warn that loan may go under collateralize soon."]
                    MayGoUnderCollateralizedSoon {
                        market_id: runtime_types::pallet_lending::types::MarketId,
                        account: subxt::ext::sp_core::crypto::AccountId32,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    Debug,
                    subxt :: ext :: codec :: CompactAs,
                    subxt :: ext :: codec :: Decode,
                    subxt :: ext :: codec :: Encode,
                )]
                pub struct MarketId(pub ::core::primitive::u32);
            }
        }
        pub mod pallet_liquidations {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    # [codec (index = 0)] add_liquidation_strategy { configuration : runtime_types :: pallet_liquidations :: pallet :: LiquidationStrategyConfiguration , } , # [codec (index = 1)] sell { order : runtime_types :: composable_traits :: defi :: Sell < runtime_types :: primitives :: currency :: CurrencyId , :: core :: primitive :: u128 > , configuration : :: std :: vec :: Vec < :: core :: primitive :: u32 > , } , }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    NoLiquidationEngineFound,
                    #[codec(index = 1)]
                    InvalidLiquidationStrategiesVector,
                    #[codec(index = 2)]
                    OnlyDutchAuctionStrategyIsImplemented,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    PositionWasSentToLiquidation,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum LiquidationStrategyConfiguration {
                    #[codec(index = 0)]
                    DutchAuction(runtime_types::composable_traits::time::TimeReleaseFunction),
                    #[codec(index = 1)]
                    Pablo {
                        slippage: runtime_types::sp_arithmetic::per_things::Perquintill,
                    },
                    #[codec(index = 2)]
                    Xcm(runtime_types::composable_traits::xcm::XcmSellRequestTransactConfiguration),
                }
            }
        }
        pub mod pallet_membership {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Add a member `who` to the set."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::AddOrigin`."]
                    add_member {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Remove a member `who` from the set."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::RemoveOrigin`."]
                    remove_member {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Swap out one member `remove` for another `add`."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::SwapOrigin`."]
                    #[doc = ""]
                    #[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
                    swap_member {
                        remove: subxt::ext::sp_core::crypto::AccountId32,
                        add: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
                    #[doc = "pass `members` pre-sorted."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::ResetOrigin`."]
                    reset_members {
                        members: ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                    },
                    #[codec(index = 4)]
                    #[doc = "Swap out the sending member for some other key `new`."]
                    #[doc = ""]
                    #[doc = "May only be called from `Signed` origin of a current member."]
                    #[doc = ""]
                    #[doc = "Prime membership is passed from the origin account to `new`, if extant."]
                    change_key {
                        new: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Set the prime member. Must be a current member."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::PrimeOrigin`."]
                    set_prime {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 6)]
                    #[doc = "Remove the prime member if it exists."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::PrimeOrigin`."]
                    clear_prime,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Already a member."]
                    AlreadyMember,
                    #[codec(index = 1)]
                    #[doc = "Not a member."]
                    NotMember,
                    #[codec(index = 2)]
                    #[doc = "Too many members."]
                    TooManyMembers,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The given member was added; see the transaction for who."]
                    MemberAdded,
                    #[codec(index = 1)]
                    #[doc = "The given member was removed; see the transaction for who."]
                    MemberRemoved,
                    #[codec(index = 2)]
                    #[doc = "Two members were swapped; see the transaction for who."]
                    MembersSwapped,
                    #[codec(index = 3)]
                    #[doc = "The membership was reset; see the transaction for who the new set is."]
                    MembersReset,
                    #[codec(index = 4)]
                    #[doc = "One of the members' keys changed."]
                    KeyChanged,
                    #[codec(index = 5)]
                    #[doc = "Phantom member, never used."]
                    Dummy,
                }
            }
        }
        pub mod pallet_mosaic {
            use super::runtime_types;
            pub mod decay {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum BudgetPenaltyDecayer<_0, _1> {
                    #[codec(index = 0)]
                    Linear(runtime_types::pallet_mosaic::decay::LinearDecay<_0, _1>),
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct LinearDecay<_0, _1> {
                    pub factor: _0,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct AmmSwapInfo<_0, _1, _2> {
                    pub destination_token_out_address:
                        runtime_types::composable_support::types::EthereumAddress,
                    pub destination_amm: runtime_types::pallet_mosaic::pallet::RemoteAmm<_0, _1>,
                    pub minimum_amount_out: _1,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_2>,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct AssetInfo<_0, _1, _2> {
                    pub last_mint_block: _0,
                    pub budget: _1,
                    pub penalty: _1,
                    pub penalty_decayer: _2,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Sets the current Relayer configuration."]
                    #[doc = ""]
                    #[doc = "This is enacted immediately and invalidates inflight/ incoming transactions from the"]
                    #[doc = "previous Relayer. However, existing budgets remain in place."]
                    #[doc = ""]
                    #[doc = "This can only be called by the [`ControlOrigin`]."]
                    #[doc = ""]
                    #[doc = "[`ControlOrigin`]: https://dali.devnets.composablefinance.ninja/doc/pallet_mosaic/pallet/trait.Config.html#associatedtype.ControlOrigin"]
                    set_relayer {
                        relayer: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Rotates the Relayer Account"]
                    #[doc = ""]
                    #[doc = "# Restrictions"]
                    #[doc = " - Only callable by the current Relayer."]
                    #[doc = " - The Time To Live (TTL) must be greater than the [`MinimumTTL`](Config::MinimumTTL)"]
                    rotate_relayer {
                        new: subxt::ext::sp_core::crypto::AccountId32,
                        validated_ttl: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Sets supported networks and maximum transaction sizes accepted by the Relayer."]
                    #[doc = ""]
                    #[doc = "Only callable by the current Relayer"]
                    set_network {
                        network_id: ::core::primitive::u32,
                        network_info: runtime_types::pallet_mosaic::pallet::NetworkInfo<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Sets the relayer budget for _incoming_ transactions for specific assets. Does not reset"]
                    #[doc = "the current `penalty`."]
                    #[doc = ""]
                    #[doc = "# Restrictions"]
                    #[doc = "- This can only be called by the [`ControlOrigin`](Config::ControlOrigin)"]
                    set_budget {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        amount: ::core::primitive::u128,
                        decay: runtime_types::pallet_mosaic::decay::BudgetPenaltyDecayer<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "Creates an outgoing transaction request, locking the funds locally until picked up by"]
                    #[doc = "the Relayer."]
                    #[doc = ""]
                    #[doc = "# Restrictions"]
                    #[doc = "- Network must be supported."]
                    #[doc = "- AssetId must be supported."]
                    #[doc = "- Amount must be lower than the networks `max_transfer_size`."]
                    #[doc = "- Origin must have sufficient funds."]
                    #[doc = "- Transfers near Balance::max may result in overflows, which are caught and returned as"]
                    #[doc = "  an error."]
                    transfer_to {
                        network_id: ::core::primitive::u32,
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        address: runtime_types::composable_support::types::EthereumAddress,
                        amount: ::core::primitive::u128,
                        minimum_amount_out: ::core::primitive::u128,
                        swap_to_native: ::core::primitive::bool,
                        source_user_account: subxt::ext::sp_core::crypto::AccountId32,
                        amm_swap_info: ::core::option::Option<
                            runtime_types::pallet_mosaic::pallet::AmmSwapInfo<
                                ::core::primitive::u32,
                                ::core::primitive::u128,
                                ::core::primitive::u128,
                            >,
                        >,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "This is called by the Relayer to confirm that it will relay a transaction."]
                    #[doc = ""]
                    #[doc = "Once this is called, the sender will be unable to reclaim their tokens."]
                    #[doc = ""]
                    #[doc = "If all the funds are not removed, the reclaim period will not be reset. If the"]
                    #[doc = "reclaim period is not reset, the Relayer will still attempt to pick up the"]
                    #[doc = "remainder of the transaction."]
                    #[doc = ""]
                    #[doc = "# Restrictions"]
                    #[doc = "- Only callable by the current Relayer"]
                    #[doc = "- Outgoing transaction must exist for the user"]
                    #[doc = "- Amount must be equal or lower than what the user has locked"]
                    #[doc = ""]
                    #[doc = "# Note"]
                    #[doc = "- Reclaim period is not reset if not all the funds are moved; meaning that the clock"]
                    #[doc = "  remains ticking for the relayer to pick up the rest of the transaction."]
                    accept_transfer {
                        from: subxt::ext::sp_core::crypto::AccountId32,
                        network_id: ::core::primitive::u32,
                        remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Claims user funds from the `OutgoingTransactions`, in case that the Relayer has not"]
                    #[doc = "picked them up."]
                    claim_stale_to {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        to: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 7)]
                    #[doc = "Mints new tokens into the pallet's wallet, ready for the user to be picked up after"]
                    #[doc = "`lock_time` blocks have expired."]
                    #[doc = ""]
                    #[doc = "Only callable by the current Relayer"]
                    timelocked_mint {
                        network_id: ::core::primitive::u32,
                        remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                        to: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                        lock_time: ::core::primitive::u32,
                        id: subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 8)]
                    #[doc = "Sets the time lock, in blocks, on new transfers"]
                    #[doc = ""]
                    #[doc = "This can only be called by the [`ControlOrigin`](Config::ControlOrigin)"]
                    set_timelock_duration { period: ::core::primitive::u32 },
                    #[codec(index = 9)]
                    #[doc = "Burns funds waiting in incoming_transactions that are still unclaimed."]
                    #[doc = ""]
                    #[doc = "May be used by the Relayer in case of finality issues on the other side of the bridge."]
                    rescind_timelocked_mint {
                        network_id: ::core::primitive::u32,
                        remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                        account: subxt::ext::sp_core::crypto::AccountId32,
                        untrusted_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    #[doc = "Collects funds deposited by the Relayer into the owner's account"]
                    claim_to {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        to: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 11)]
                    #[doc = "Update a network asset mapping."]
                    #[doc = ""]
                    #[doc = "This can only be called by the [`ControlOrigin`](Config::ControlOrigin)"]
                    #[doc = ""]
                    #[doc = "Possibly emits one of:"]
                    #[doc = "- `AssetMappingCreated`"]
                    #[doc = "- `AssetMappingDeleted`"]
                    #[doc = "- `AssetMappingUpdated`"]
                    update_asset_mapping {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        network_id: ::core::primitive::u32,
                        remote_asset_id: ::core::option::Option<
                            runtime_types::common::types::MosaicRemoteAssetId,
                        >,
                    },
                    #[codec(index = 12)]
                    #[doc = "Adds a remote AMM for a specific Network"]
                    add_remote_amm_id {
                        network_id: ::core::primitive::u32,
                        amm_id: ::core::primitive::u128,
                    },
                    #[codec(index = 13)]
                    #[doc = "Removes a remote AMM for a specific Network"]
                    remove_remote_amm_id {
                        network_id: ::core::primitive::u32,
                        amm_id: ::core::primitive::u128,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    RelayerNotSet,
                    #[codec(index = 1)]
                    BadTTL,
                    #[codec(index = 2)]
                    BadTimelockPeriod,
                    #[codec(index = 3)]
                    UnsupportedAsset,
                    #[codec(index = 4)]
                    NetworkDisabled,
                    #[codec(index = 5)]
                    UnsupportedNetwork,
                    #[codec(index = 6)]
                    Overflow,
                    #[codec(index = 7)]
                    NoStaleTransactions,
                    #[codec(index = 8)]
                    InsufficientBudget,
                    #[codec(index = 9)]
                    ExceedsMaxTransferSize,
                    #[codec(index = 10)]
                    BelowMinTransferSize,
                    #[codec(index = 11)]
                    NoClaimableTx,
                    #[codec(index = 12)]
                    TxStillLocked,
                    #[codec(index = 13)]
                    NoOutgoingTx,
                    #[codec(index = 14)]
                    AmountMismatch,
                    #[codec(index = 15)]
                    AssetNotMapped,
                    #[codec(index = 16)]
                    RemoteAmmIdNotFound,
                    #[codec(index = 17)]
                    RemoteAmmIdAlreadyExists,
                    #[codec(index = 18)]
                    DestinationAmmIdNotWhitelisted,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The account of the relayer has been set."]
                    RelayerSet {
                        relayer: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "The relayer has been rotated to `account_id`."]
                    RelayerRotated {
                        ttl: ::core::primitive::u32,
                        account_id: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 2)]
                    BudgetUpdated {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        amount: ::core::primitive::u128,
                        decay: runtime_types::pallet_mosaic::decay::BudgetPenaltyDecayer<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "The `NetworkInfos` `network_info` was updated for `network_id`."]
                    NetworksUpdated {
                        network_id: ::core::primitive::u32,
                        network_info: runtime_types::pallet_mosaic::pallet::NetworkInfo<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "An outgoing tx is created, and locked in the outgoing tx pool."]
                    TransferOut {
                        id: subxt::ext::sp_core::H256,
                        to: runtime_types::composable_support::types::EthereumAddress,
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        network_id: ::core::primitive::u32,
                        remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                        amount: ::core::primitive::u128,
                        swap_to_native: ::core::primitive::bool,
                        source_user_account: subxt::ext::sp_core::crypto::AccountId32,
                        amm_swap_info: ::core::option::Option<
                            runtime_types::pallet_mosaic::pallet::AmmSwapInfo<
                                ::core::primitive::u32,
                                ::core::primitive::u128,
                                ::core::primitive::u128,
                            >,
                        >,
                        minimum_amount_out: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "User claimed outgoing tx that was not (yet) picked up by the relayer"]
                    StaleTxClaimed {
                        to: subxt::ext::sp_core::crypto::AccountId32,
                        by: subxt::ext::sp_core::crypto::AccountId32,
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "An incoming tx is created and waiting for the user to claim."]
                    TransferInto {
                        id: subxt::ext::sp_core::H256,
                        to: subxt::ext::sp_core::crypto::AccountId32,
                        network_id: ::core::primitive::u32,
                        remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    #[doc = "When we have finality issues occur on the Ethereum chain,"]
                    #[doc = "we burn the locked `IncomingTransaction` for which we know that it is invalid."]
                    TransferIntoRescined {
                        account: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                    },
                    #[codec(index = 8)]
                    #[doc = "The relayer partially accepted the user's `OutgoingTransaction`."]
                    PartialTransferAccepted {
                        from: subxt::ext::sp_core::crypto::AccountId32,
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        network_id: ::core::primitive::u32,
                        remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "The relayer accepted the user's `OutgoingTransaction`."]
                    TransferAccepted {
                        from: subxt::ext::sp_core::crypto::AccountId32,
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        network_id: ::core::primitive::u32,
                        remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    #[doc = "The user claims his `IncomingTransaction` and unlocks the locked amount."]
                    TransferClaimed {
                        by: subxt::ext::sp_core::crypto::AccountId32,
                        to: subxt::ext::sp_core::crypto::AccountId32,
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 11)]
                    #[doc = "An asset mapping has been created."]
                    AssetMappingCreated {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        network_id: ::core::primitive::u32,
                        remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                    },
                    #[codec(index = 12)]
                    #[doc = "An existing asset mapping has been updated."]
                    AssetMappingUpdated {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        network_id: ::core::primitive::u32,
                        remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                    },
                    #[codec(index = 13)]
                    #[doc = "An existing asset mapping has been deleted."]
                    AssetMappingDeleted {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        network_id: ::core::primitive::u32,
                        remote_asset_id: runtime_types::common::types::MosaicRemoteAssetId,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct NetworkInfo<_0> {
                    pub enabled: ::core::primitive::bool,
                    pub min_transfer_size: _0,
                    pub max_transfer_size: _0,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct RemoteAmm<_0, _1> {
                    pub network_id: _0,
                    pub amm_id: _1,
                }
            }
            pub mod relayer {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Next<_0, _1> {
                    pub ttl: _1,
                    pub account: _0,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct RelayerConfig<_0, _1> {
                    pub current: _0,
                    pub next:
                        ::core::option::Option<runtime_types::pallet_mosaic::relayer::Next<_0, _1>>,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct StaleRelayer<_0, _1> {
                    pub relayer: runtime_types::pallet_mosaic::relayer::RelayerConfig<_0, _1>,
                }
            }
        }
        pub mod pallet_multisig {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
                    #[doc = "multi-signature, but do not participate in the approval process."]
                    #[doc = "- `call`: The call to be executed."]
                    #[doc = ""]
                    #[doc = "Result is equivalent to the dispatched result."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
                    #[doc = "-------------------------------"]
                    #[doc = "- DB Weight: None"]
                    #[doc = "- Plus Call Weight"]
                    #[doc = "# </weight>"]
                    as_multi_threshold_1 {
                        other_signatories:
                            ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                        call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                    #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                    #[doc = ""]
                    #[doc = "If there are enough, then dispatch the call."]
                    #[doc = ""]
                    #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                    #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                    #[doc = "is cancelled."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                    #[doc = "dispatch. May not be empty."]
                    #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                    #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                    #[doc = "transaction index) of the first approval transaction."]
                    #[doc = "- `call`: The call to be executed."]
                    #[doc = ""]
                    #[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
                    #[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
                    #[doc = ""]
                    #[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
                    #[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
                    #[doc = "may be found in the deposited `MultisigExecuted` event."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(S + Z + Call)`."]
                    #[doc = "- Up to one balance-reserve or unreserve operation."]
                    #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                    #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                    #[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
                    #[doc = "- One encode & hash, both of complexity `O(S)`."]
                    #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                    #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                    #[doc = "- One event."]
                    #[doc = "- The weight of the `call`."]
                    #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                    #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                    #[doc = "-------------------------------"]
                    #[doc = "- DB Weight:"]
                    #[doc = "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
                    #[doc = "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
                    #[doc = "- Plus Call Weight"]
                    #[doc = "# </weight>"]
                    as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories:
                            ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                        maybe_timepoint: ::core::option::Option<
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        >,
                        call: subxt::utils::WrapperKeepOpaque<runtime_types::dali_runtime::Call>,
                        store_call: ::core::primitive::bool,
                        max_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 2)]
                    #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                    #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                    #[doc = ""]
                    #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                    #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                    #[doc = "is cancelled."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                    #[doc = "dispatch. May not be empty."]
                    #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                    #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                    #[doc = "transaction index) of the first approval transaction."]
                    #[doc = "- `call_hash`: The hash of the call to be executed."]
                    #[doc = ""]
                    #[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(S)`."]
                    #[doc = "- Up to one balance-reserve or unreserve operation."]
                    #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                    #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                    #[doc = "- One encode & hash, both of complexity `O(S)`."]
                    #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                    #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                    #[doc = "- One event."]
                    #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                    #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                    #[doc = "----------------------------------"]
                    #[doc = "- DB Weight:"]
                    #[doc = "    - Read: Multisig Storage, [Caller Account]"]
                    #[doc = "    - Write: Multisig Storage, [Caller Account]"]
                    #[doc = "# </weight>"]
                    approve_as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories:
                            ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                        maybe_timepoint: ::core::option::Option<
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        >,
                        call_hash: [::core::primitive::u8; 32usize],
                        max_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 3)]
                    #[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
                    #[doc = "for this operation will be unreserved on success."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                    #[doc = "dispatch. May not be empty."]
                    #[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
                    #[doc = "transaction for this dispatch."]
                    #[doc = "- `call_hash`: The hash of the call to be executed."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(S)`."]
                    #[doc = "- Up to one balance-reserve or unreserve operation."]
                    #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                    #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                    #[doc = "- One encode & hash, both of complexity `O(S)`."]
                    #[doc = "- One event."]
                    #[doc = "- I/O: 1 read `O(S)`, one remove."]
                    #[doc = "- Storage: removes one item."]
                    #[doc = "----------------------------------"]
                    #[doc = "- DB Weight:"]
                    #[doc = "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls"]
                    #[doc = "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls"]
                    #[doc = "# </weight>"]
                    cancel_as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories:
                            ::std::vec::Vec<subxt::ext::sp_core::crypto::AccountId32>,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Threshold must be 2 or greater."]
                    MinimumThreshold,
                    #[codec(index = 1)]
                    #[doc = "Call is already approved by this signatory."]
                    AlreadyApproved,
                    #[codec(index = 2)]
                    #[doc = "Call doesn't need any (more) approvals."]
                    NoApprovalsNeeded,
                    #[codec(index = 3)]
                    #[doc = "There are too few signatories in the list."]
                    TooFewSignatories,
                    #[codec(index = 4)]
                    #[doc = "There are too many signatories in the list."]
                    TooManySignatories,
                    #[codec(index = 5)]
                    #[doc = "The signatories were provided out of order; they should be ordered."]
                    SignatoriesOutOfOrder,
                    #[codec(index = 6)]
                    #[doc = "The sender was contained in the other signatories; it shouldn't be."]
                    SenderInSignatories,
                    #[codec(index = 7)]
                    #[doc = "Multisig operation not found when attempting to cancel."]
                    NotFound,
                    #[codec(index = 8)]
                    #[doc = "Only the account that originally created the multisig is able to cancel it."]
                    NotOwner,
                    #[codec(index = 9)]
                    #[doc = "No timepoint was given, yet the multisig operation is already underway."]
                    NoTimepoint,
                    #[codec(index = 10)]
                    #[doc = "A different timepoint was given to the multisig operation that is underway."]
                    WrongTimepoint,
                    #[codec(index = 11)]
                    #[doc = "A timepoint was given, yet no multisig operation is underway."]
                    UnexpectedTimepoint,
                    #[codec(index = 12)]
                    #[doc = "The maximum weight information provided was too low."]
                    MaxWeightTooLow,
                    #[codec(index = 13)]
                    #[doc = "The data to be stored is already stored."]
                    AlreadyStored,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A new multisig operation has begun."]
                    NewMultisig {
                        approving: subxt::ext::sp_core::crypto::AccountId32,
                        multisig: subxt::ext::sp_core::crypto::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 1)]
                    #[doc = "A multisig operation has been approved by someone."]
                    MultisigApproval {
                        approving: subxt::ext::sp_core::crypto::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: subxt::ext::sp_core::crypto::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 2)]
                    #[doc = "A multisig operation has been executed."]
                    MultisigExecuted {
                        approving: subxt::ext::sp_core::crypto::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: subxt::ext::sp_core::crypto::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 3)]
                    #[doc = "A multisig operation has been cancelled."]
                    MultisigCancelled {
                        cancelling: subxt::ext::sp_core::crypto::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: subxt::ext::sp_core::crypto::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Multisig<_0, _1, _2> {
                pub when: runtime_types::pallet_multisig::Timepoint<_0>,
                pub deposit: _1,
                pub depositor: _2,
                pub approvals: ::std::vec::Vec<_2>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Timepoint<_0> {
                pub height: _0,
                pub index: _0,
            }
        }
        pub mod pallet_oracle {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct AssetInfo<_0, _1, _2> {
                    pub threshold: _0,
                    pub min_answers: _1,
                    pub max_answers: _1,
                    pub block_interval: _1,
                    pub reward_weight: _2,
                    pub slash: _2,
                    pub emit_price_changes: ::core::primitive::bool,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Permissioned call to add an asset"]
                    #[doc = ""]
                    #[doc = "- `asset_id`: Id for the asset"]
                    #[doc = "- `threshold`: Percent close to mean to be rewarded"]
                    #[doc = "- `min_answers`: Min answers before aggregation"]
                    #[doc = "- `max_answers`: Max answers to aggregate"]
                    #[doc = "- `block_interval`: blocks until oracle triggered"]
                    #[doc = "- `reward`: reward amount for correct answer"]
                    #[doc = "- `slash`: slash amount for bad answer"]
                    #[doc = "- `emit_price_changes`: emit PriceChanged event when asset price changes"]
                    #[doc = ""]
                    #[doc = "Emits `DepositEvent` event when successful."]
                    add_asset_and_info {
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        threshold: runtime_types::sp_arithmetic::per_things::Percent,
                        min_answers: ::core::primitive::u32,
                        max_answers: ::core::primitive::u32,
                        block_interval: ::core::primitive::u32,
                        reward_weight: ::core::primitive::u128,
                        slash: ::core::primitive::u128,
                        emit_price_changes: ::core::primitive::bool,
                    },
                    #[codec(index = 1)]
                    #[doc = "Call for a signer to be set, called from controller, adds stake."]
                    #[doc = ""]
                    #[doc = "- `signer`: signer to tie controller to"]
                    #[doc = ""]
                    #[doc = "Emits `SignerSet` and `StakeAdded` events when successful."]
                    set_signer {
                        signer: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Call to start rewarding Oracles."]
                    #[doc = "- `annual_cost_per_oracle`: Annual cost of an Oracle."]
                    #[doc = "- `num_ideal_oracles`: Number of ideal Oracles. This in fact should be higher than the"]
                    #[doc = "  actual ideal number so that the Oracles make a profit under ideal conditions."]
                    #[doc = ""]
                    #[doc = "Emits `RewardRateSet` event when successful."]
                    adjust_rewards {
                        annual_cost_per_oracle: ::core::primitive::u128,
                        num_ideal_oracles: ::core::primitive::u8,
                    },
                    #[codec(index = 3)]
                    #[doc = "call to add more stake from a controller"]
                    #[doc = ""]
                    #[doc = "- `stake`: amount to add to stake"]
                    #[doc = ""]
                    #[doc = "Emits `StakeAdded` event when successful."]
                    add_stake { stake: ::core::primitive::u128 },
                    #[codec(index = 4)]
                    #[doc = "Call to put in a claim to remove stake, called from controller"]
                    #[doc = ""]
                    #[doc = "Emits `StakeRemoved` event when successful."]
                    remove_stake,
                    #[codec(index = 5)]
                    #[doc = "Call to reclaim stake after proper time has passed, called from controller"]
                    #[doc = ""]
                    #[doc = "Emits `StakeReclaimed` event when successful."]
                    reclaim_stake,
                    #[codec(index = 6)]
                    #[doc = "Call to submit a price, gas is returned if extrinsic is successful."]
                    #[doc = "Should be called from offchain worker but can be called manually too."]
                    #[doc = ""]
                    #[doc = "This is an operational transaction."]
                    #[doc = ""]
                    #[doc = "- `price`: price to submit, normalized to 12 decimals"]
                    #[doc = "- `asset_id`: id for the asset"]
                    #[doc = ""]
                    #[doc = "Emits `PriceSubmitted` event when successful."]
                    submit_price {
                        price: ::core::primitive::u128,
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Unknown"]
                    Unknown,
                    #[codec(index = 1)]
                    #[doc = "No Permission"]
                    NoPermission,
                    #[codec(index = 2)]
                    #[doc = "No stake for oracle"]
                    NoStake,
                    #[codec(index = 3)]
                    #[doc = "Stake is locked try again later"]
                    StakeLocked,
                    #[codec(index = 4)]
                    #[doc = "Not enough oracle stake for action"]
                    NotEnoughStake,
                    #[codec(index = 5)]
                    #[doc = "Not Enough Funds to complete action"]
                    NotEnoughFunds,
                    #[codec(index = 6)]
                    #[doc = "Invalid asset id"]
                    InvalidAssetId,
                    #[codec(index = 7)]
                    #[doc = "Price already submitted"]
                    AlreadySubmitted,
                    #[codec(index = 8)]
                    #[doc = "Max prices already reached"]
                    MaxPrices,
                    #[codec(index = 9)]
                    #[doc = "Price has not been requested"]
                    PriceNotRequested,
                    #[codec(index = 10)]
                    #[doc = "Signer has not been set"]
                    UnsetSigner,
                    #[codec(index = 11)]
                    #[doc = "Signer has already been set"]
                    AlreadySet,
                    #[codec(index = 12)]
                    #[doc = "No controller has been set"]
                    UnsetController,
                    #[codec(index = 13)]
                    #[doc = "This controller is already in use"]
                    ControllerUsed,
                    #[codec(index = 14)]
                    #[doc = "This signer is already in use"]
                    SignerUsed,
                    #[codec(index = 15)]
                    #[doc = "Error avoids a panic"]
                    AvoidPanic,
                    #[codec(index = 16)]
                    #[doc = "Max answers have been exceeded"]
                    ExceedMaxAnswers,
                    #[codec(index = 17)]
                    #[doc = "Invalid min answers"]
                    InvalidMinAnswers,
                    #[codec(index = 18)]
                    MaxAnswersLessThanMinAnswers,
                    #[codec(index = 19)]
                    #[doc = "Threshold exceeded"]
                    ExceedThreshold,
                    #[codec(index = 20)]
                    #[doc = "Asset count exceeded"]
                    ExceedAssetsCount,
                    #[codec(index = 21)]
                    #[doc = "Price not found"]
                    PriceNotFound,
                    #[codec(index = 22)]
                    #[doc = "Stake exceeded"]
                    ExceedStake,
                    #[codec(index = 23)]
                    #[doc = "Price weight must sum to 100"]
                    MustSumTo100,
                    #[codec(index = 24)]
                    #[doc = "Too many weighted averages requested"]
                    DepthTooLarge,
                    #[codec(index = 25)]
                    ArithmeticError,
                    #[codec(index = 26)]
                    #[doc = "Block interval is less then stale price"]
                    BlockIntervalLength,
                    #[codec(index = 27)]
                    #[doc = "There was an error transferring"]
                    TransferError,
                    #[codec(index = 28)]
                    MaxHistory,
                    #[codec(index = 29)]
                    MaxPrePrices,
                    #[codec(index = 30)]
                    #[doc = "Rewarding has not started"]
                    NoRewardTrackerSet,
                    #[codec(index = 31)]
                    #[doc = "Annual rewarding cost too high"]
                    AnnualRewardLessThanAlreadyRewarded,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Asset info created or changed. \\[asset_id, threshold, min_answers, max_answers,"]
                    #[doc = "block_interval, reward, slash\\]"]
                    AssetInfoChange(
                        runtime_types::primitives::currency::CurrencyId,
                        runtime_types::sp_arithmetic::per_things::Percent,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 1)]
                    #[doc = "Signer was set. \\[signer, controller\\]"]
                    SignerSet(
                        subxt::ext::sp_core::crypto::AccountId32,
                        subxt::ext::sp_core::crypto::AccountId32,
                    ),
                    #[codec(index = 2)]
                    #[doc = "Stake was added. \\[added_by, amount_added, total_amount\\]"]
                    StakeAdded(
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 3)]
                    #[doc = "Stake removed. \\[removed_by, amount, block_number\\]"]
                    StakeRemoved(
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    ),
                    #[codec(index = 4)]
                    #[doc = "Stake reclaimed. \\[reclaimed_by, amount\\]"]
                    StakeReclaimed(
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 5)]
                    #[doc = "Price submitted by oracle. \\[oracle_address, asset_id, price\\]"]
                    PriceSubmitted(
                        subxt::ext::sp_core::crypto::AccountId32,
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 6)]
                    #[doc = "Oracle slashed. \\[oracle_address, asset_id, amount\\]"]
                    UserSlashed(
                        subxt::ext::sp_core::crypto::AccountId32,
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 7)]
                    #[doc = "Oracle rewarded. \\[oracle_address, asset_id, price\\]"]
                    OracleRewarded(
                        subxt::ext::sp_core::crypto::AccountId32,
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 8)]
                    #[doc = "Rewarding Started \\[rewarding start timestamp]"]
                    RewardingAdjustment(::core::primitive::u64),
                    #[codec(index = 9)]
                    #[doc = "Answer from oracle removed for staleness. \\[oracle_address, price\\]"]
                    AnswerPruned(
                        subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 10)]
                    #[doc = "Price changed by oracle \\[asset_id, price\\]"]
                    PriceChanged(
                        runtime_types::primitives::currency::CurrencyId,
                        ::core::primitive::u128,
                    ),
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct PrePrice<_0, _1, _2> {
                    pub price: _0,
                    pub block: _1,
                    pub who: _2,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Withdraw<_0, _1> {
                    pub stake: _0,
                    pub unlock_block: _1,
                }
            }
        }
        pub mod pallet_pablo {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Create a new pool. Note that this extrinsic does NOT validate if a pool with the same"]
                    #[doc = "assets already exists in the runtime."]
                    #[doc = ""]
                    #[doc = "Emits `PoolCreated` event when successful."]
                    create {
                        pool: runtime_types::pallet_pablo::pallet::PoolInitConfiguration<
                            subxt::ext::sp_core::crypto::AccountId32,
                            runtime_types::primitives::currency::CurrencyId,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Execute a buy order on pool."]
                    #[doc = ""]
                    #[doc = "Emits `Swapped` event when successful."]
                    buy {
                        pool_id: ::core::primitive::u128,
                        in_asset_id: runtime_types::primitives::currency::CurrencyId,
                        out_asset: runtime_types::composable_traits::dex::AssetAmount<
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                        >,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    #[doc = "Execute a specific swap operation."]
                    #[doc = ""]
                    #[doc = "The `quote_amount` is always the quote asset amount (A/B => B), (B/A => A)."]
                    #[doc = ""]
                    #[doc = "Emits `Swapped` event when successful."]
                    swap {
                        pool_id: ::core::primitive::u128,
                        in_asset: runtime_types::composable_traits::dex::AssetAmount<
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                        >,
                        min_receive: runtime_types::composable_traits::dex::AssetAmount<
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                        >,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 3)]
                    #[doc = "Add liquidity to the given pool."]
                    #[doc = ""]
                    #[doc = "Emits `LiquidityAdded` event when successful."]
                    add_liquidity {
                        pool_id: ::core::primitive::u128,
                        assets: subxt::utils::KeyedVec<
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                        >,
                        min_mint_amount: ::core::primitive::u128,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 4)]
                    #[doc = "Remove liquidity from the given pool."]
                    #[doc = ""]
                    #[doc = "Emits `LiquidityRemoved` event when successful."]
                    remove_liquidity {
                        pool_id: ::core::primitive::u128,
                        lp_amount: ::core::primitive::u128,
                        min_receive: subxt::utils::KeyedVec<
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 5)]
                    enable_twap { pool_id: ::core::primitive::u128 },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    PoolNotFound,
                    #[codec(index = 1)]
                    NotEnoughLiquidity,
                    #[codec(index = 2)]
                    NotEnoughLpToken,
                    #[codec(index = 3)]
                    PairMismatch,
                    #[codec(index = 4)]
                    AssetNotFound,
                    #[codec(index = 5)]
                    MustBeOwner,
                    #[codec(index = 6)]
                    InvalidSaleState,
                    #[codec(index = 7)]
                    InvalidAmount,
                    #[codec(index = 8)]
                    InvalidAsset,
                    #[codec(index = 9)]
                    CannotRespectMinimumRequested,
                    #[codec(index = 10)]
                    AssetAmountMustBePositiveNumber,
                    #[codec(index = 11)]
                    InvalidPair,
                    #[codec(index = 12)]
                    InvalidFees,
                    #[codec(index = 13)]
                    AmpFactorMustBeGreaterThanZero,
                    #[codec(index = 14)]
                    MissingAmount,
                    #[codec(index = 15)]
                    MissingMinExpectedAmount,
                    #[codec(index = 16)]
                    MoreThanTwoAssetsNotYetSupported,
                    #[codec(index = 17)]
                    NoLpTokenForLbp,
                    #[codec(index = 18)]
                    NoXTokenForLbp,
                    #[codec(index = 19)]
                    WeightsMustBeNonZero,
                    #[codec(index = 20)]
                    WeightsMustSumToOne,
                    #[codec(index = 21)]
                    StakingPoolConfigError,
                    #[codec(index = 22)]
                    IncorrectAssetAmounts,
                    #[codec(index = 23)]
                    UnsupportedOperation,
                    #[codec(index = 24)]
                    InitialDepositCannotBeZero,
                    #[codec(index = 25)]
                    #[doc = "The `min_amounts` passed to `remove_liquidity` must contain at least one asset."]
                    MinAmountsMustContainAtLeastOneAsset,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Pool with specified id `T::PoolId` was created successfully by `T::AccountId`."]
                    PoolCreated {
                        pool_id: ::core::primitive::u128,
                        owner: subxt::ext::sp_core::crypto::AccountId32,
                        asset_weights: subxt::utils::KeyedVec<
                            runtime_types::primitives::currency::CurrencyId,
                            runtime_types::sp_arithmetic::per_things::Permill,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Liquidity added into the pool `T::PoolId`."]
                    LiquidityAdded {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        pool_id: ::core::primitive::u128,
                        asset_amounts: subxt::utils::KeyedVec<
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                        >,
                        minted_lp: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Liquidity removed from pool `T::PoolId` by `T::AccountId` in balanced way."]
                    LiquidityRemoved {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        pool_id: ::core::primitive::u128,
                        asset_amounts: subxt::utils::KeyedVec<
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Token exchange happened."]
                    Swapped {
                        pool_id: ::core::primitive::u128,
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        base_asset: runtime_types::primitives::currency::CurrencyId,
                        quote_asset: runtime_types::primitives::currency::CurrencyId,
                        base_amount: ::core::primitive::u128,
                        quote_amount: ::core::primitive::u128,
                        fee: runtime_types::composable_traits::dex::Fee<
                            runtime_types::primitives::currency::CurrencyId,
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "TWAP updated."]
                    TwapUpdated {
                        pool_id: ::core::primitive::u128,
                        timestamp: ::core::primitive::u64,
                        twaps: subxt::utils::KeyedVec<
                            runtime_types::primitives::currency::CurrencyId,
                            runtime_types::sp_arithmetic::fixed_point::FixedU128,
                        >,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum PoolConfiguration<_0, _1> {
                    #[codec(index = 0)]
                    DualAssetConstantProduct(
                        runtime_types::composable_traits::dex::BasicPoolInfo<_0, _1>,
                    ),
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum PoolInitConfiguration<_0, _1> {
                    #[codec(index = 0)]
                    DualAssetConstantProduct {
                        owner: _0,
                        assets_weights:
                            runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
                                _1,
                                runtime_types::sp_arithmetic::per_things::Permill,
                            >,
                        fee: runtime_types::sp_arithmetic::per_things::Permill,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct PriceCumulative<_0, _1> {
                    pub timestamp: _0,
                    pub base_price_cumulative: _1,
                    pub quote_price_cumulative: _1,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct TimeWeightedAveragePrice<_0, _1> {
                    pub timestamp: _0,
                    pub base_price_cumulative: _1,
                    pub quote_price_cumulative: _1,
                    pub base_twap: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    pub quote_twap: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                }
            }
        }
        pub mod pallet_preimage {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Register a preimage on-chain."]
                    #[doc = ""]
                    #[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
                    #[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
                    note_preimage {
                        bytes: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Clear an unrequested preimage from the runtime storage."]
                    unnote_preimage { hash: subxt::ext::sp_core::H256 },
                    #[codec(index = 2)]
                    #[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
                    #[doc = ""]
                    #[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
                    #[doc = "a user may have paid, and take the control of the preimage out of their hands."]
                    request_preimage { hash: subxt::ext::sp_core::H256 },
                    #[codec(index = 3)]
                    #[doc = "Clear a previously made request for a preimage."]
                    #[doc = ""]
                    #[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
                    unrequest_preimage { hash: subxt::ext::sp_core::H256 },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Preimage is too large to store on-chain."]
                    TooLarge,
                    #[codec(index = 1)]
                    #[doc = "Preimage has already been noted on-chain."]
                    AlreadyNoted,
                    #[codec(index = 2)]
                    #[doc = "The user is not authorized to perform this action."]
                    NotAuthorized,
                    #[codec(index = 3)]
                    #[doc = "The preimage cannot be removed since it has not yet been noted."]
                    NotNoted,
                    #[codec(index = 4)]
                    #[doc = "A preimage may not be removed when there are outstanding requests."]
                    Requested,
                    #[codec(index = 5)]
                    #[doc = "The preimage request cannot be removed since no outstanding requests exist."]
                    NotRequested,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A preimage has been noted."]
                    Noted { hash: subxt::ext::sp_core::H256 },
                    #[codec(index = 1)]
                    #[doc = "A preimage has been requested."]
                    Requested { hash: subxt::ext::sp_core::H256 },
                    #[codec(index = 2)]
                    #[doc = "A preimage has ben cleared."]
                    Cleared { hash: subxt::ext::sp_core::H256 },
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum RequestStatus<_0, _1> {
                #[codec(index = 0)]
                Unrequested(::core::option::Option<(_0, _1)>),
                #[codec(index = 1)]
                Requested(::core::primitive::u32),
            }
        }
        pub mod pallet_proxy {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
                    #[doc = "`add_proxy`."]
                    #[doc = ""]
                    #[doc = "Removes any corresponding announcement(s)."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                    #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                    #[doc = "- `call`: The call to be made by the `real` account."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of the number of proxies the user has (P)."]
                    #[doc = "# </weight>"]
                    proxy {
                        real: subxt::ext::sp_core::crypto::AccountId32,
                        force_proxy_type: ::core::option::Option<
                            runtime_types::composable_traits::account_proxy::ProxyType,
                        >,
                        call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
                    #[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
                    #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                    #[doc = "zero."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of the number of proxies the user has (P)."]
                    #[doc = "# </weight>"]
                    add_proxy {
                        delegate: subxt::ext::sp_core::crypto::AccountId32,
                        proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Unregister a proxy account for the sender."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
                    #[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of the number of proxies the user has (P)."]
                    #[doc = "# </weight>"]
                    remove_proxy {
                        delegate: subxt::ext::sp_core::crypto::AccountId32,
                        proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Unregister all proxy accounts for the sender."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "WARNING: This may be called on accounts created by `anonymous`, however if done, then"]
                    #[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of the number of proxies the user has (P)."]
                    #[doc = "# </weight>"]
                    remove_proxies,
                    #[codec(index = 4)]
                    #[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
                    #[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
                    #[doc = ""]
                    #[doc = "Requires a `Signed` origin."]
                    #[doc = ""]
                    #[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
                    #[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
                    #[doc = "allow for maximum flexibility."]
                    #[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
                    #[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
                    #[doc = "want to use `0`."]
                    #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                    #[doc = "zero."]
                    #[doc = ""]
                    #[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
                    #[doc = "same sender, with the same parameters."]
                    #[doc = ""]
                    #[doc = "Fails if there are insufficient funds to pay for deposit."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of the number of proxies the user has (P)."]
                    #[doc = "# </weight>"]
                    #[doc = "TODO: Might be over counting 1 read"]
                    anonymous {
                        proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
                        delay: ::core::primitive::u32,
                        index: ::core::primitive::u16,
                    },
                    #[codec(index = 5)]
                    #[doc = "Removes a previously spawned anonymous proxy."]
                    #[doc = ""]
                    #[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
                    #[doc = "inaccessible."]
                    #[doc = ""]
                    #[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
                    #[doc = "`anonymous` with corresponding parameters."]
                    #[doc = ""]
                    #[doc = "- `spawner`: The account that originally called `anonymous` to create this account."]
                    #[doc = "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`."]
                    #[doc = "- `proxy_type`: The proxy type originally passed to `anonymous`."]
                    #[doc = "- `height`: The height of the chain when the call to `anonymous` was processed."]
                    #[doc = "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed."]
                    #[doc = ""]
                    #[doc = "Fails with `NoPermission` in case the caller is not a previously created anonymous"]
                    #[doc = "account whose `anonymous` call has corresponding parameters."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of the number of proxies the user has (P)."]
                    #[doc = "# </weight>"]
                    kill_anonymous {
                        spawner: subxt::ext::sp_core::crypto::AccountId32,
                        proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
                        index: ::core::primitive::u16,
                        #[codec(compact)]
                        height: ::core::primitive::u32,
                        #[codec(compact)]
                        ext_index: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    #[doc = "Publish the hash of a proxy-call that will be made in the future."]
                    #[doc = ""]
                    #[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
                    #[doc = "if the delay associated with the proxy relationship is greater than zero."]
                    #[doc = ""]
                    #[doc = "No more than `MaxPending` announcements may be made at any one time."]
                    #[doc = ""]
                    #[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
                    #[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                    #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of:"]
                    #[doc = "- A: the number of announcements made."]
                    #[doc = "- P: the number of proxies the user has."]
                    #[doc = "# </weight>"]
                    announce {
                        real: subxt::ext::sp_core::crypto::AccountId32,
                        call_hash: subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 7)]
                    #[doc = "Remove a given announcement."]
                    #[doc = ""]
                    #[doc = "May be called by a proxy account to remove a call they previously announced and return"]
                    #[doc = "the deposit."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                    #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of:"]
                    #[doc = "- A: the number of announcements made."]
                    #[doc = "- P: the number of proxies the user has."]
                    #[doc = "# </weight>"]
                    remove_announcement {
                        real: subxt::ext::sp_core::crypto::AccountId32,
                        call_hash: subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 8)]
                    #[doc = "Remove the given announcement of a delegate."]
                    #[doc = ""]
                    #[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
                    #[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `delegate`: The account that previously announced the call."]
                    #[doc = "- `call_hash`: The hash of the call to be made."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of:"]
                    #[doc = "- A: the number of announcements made."]
                    #[doc = "- P: the number of proxies the user has."]
                    #[doc = "# </weight>"]
                    reject_announcement {
                        delegate: subxt::ext::sp_core::crypto::AccountId32,
                        call_hash: subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 9)]
                    #[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
                    #[doc = "`add_proxy`."]
                    #[doc = ""]
                    #[doc = "Removes any corresponding announcement(s)."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                    #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                    #[doc = "- `call`: The call to be made by the `real` account."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of:"]
                    #[doc = "- A: the number of announcements made."]
                    #[doc = "- P: the number of proxies the user has."]
                    #[doc = "# </weight>"]
                    proxy_announced {
                        delegate: subxt::ext::sp_core::crypto::AccountId32,
                        real: subxt::ext::sp_core::crypto::AccountId32,
                        force_proxy_type: ::core::option::Option<
                            runtime_types::composable_traits::account_proxy::ProxyType,
                        >,
                        call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "There are too many proxies registered or too many announcements pending."]
                    TooMany,
                    #[codec(index = 1)]
                    #[doc = "Proxy registration not found."]
                    NotFound,
                    #[codec(index = 2)]
                    #[doc = "Sender is not a proxy of the account to be proxied."]
                    NotProxy,
                    #[codec(index = 3)]
                    #[doc = "A call which is incompatible with the proxy type's filter was attempted."]
                    Unproxyable,
                    #[codec(index = 4)]
                    #[doc = "Account is already a proxy."]
                    Duplicate,
                    #[codec(index = 5)]
                    #[doc = "Call may not be made by proxy because it may escalate its privileges."]
                    NoPermission,
                    #[codec(index = 6)]
                    #[doc = "Announcement, if made at all, was made too recently."]
                    Unannounced,
                    #[codec(index = 7)]
                    #[doc = "Cannot add self as proxy."]
                    NoSelfProxy,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A proxy was executed correctly, with the given."]
                    ProxyExecuted {
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Anonymous account has been created by new proxy with given"]
                    #[doc = "disambiguation index and proxy type."]
                    AnonymousCreated {
                        anonymous: subxt::ext::sp_core::crypto::AccountId32,
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
                        disambiguation_index: ::core::primitive::u16,
                    },
                    #[codec(index = 2)]
                    #[doc = "An announcement was placed to make a call in the future."]
                    Announced {
                        real: subxt::ext::sp_core::crypto::AccountId32,
                        proxy: subxt::ext::sp_core::crypto::AccountId32,
                        call_hash: subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 3)]
                    #[doc = "A proxy was added."]
                    ProxyAdded {
                        delegator: subxt::ext::sp_core::crypto::AccountId32,
                        delegatee: subxt::ext::sp_core::crypto::AccountId32,
                        proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "A proxy was removed."]
                    ProxyRemoved {
                        delegator: subxt::ext::sp_core::crypto::AccountId32,
                        delegatee: subxt::ext::sp_core::crypto::AccountId32,
                        proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Announcement<_0, _1, _2> {
                pub real: _0,
                pub call_hash: _1,
                pub height: _2,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ProxyDefinition<_0, _1, _2> {
                pub delegate: _0,
                pub proxy_type: _1,
                pub delay: _2,
            }
        }
        pub mod pallet_scheduler {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Anonymously schedule a task."]
                    schedule {
                        when: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<
                            runtime_types::frame_support::traits::schedule::MaybeHashed<
                                runtime_types::dali_runtime::Call,
                                subxt::ext::sp_core::H256,
                            >,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Cancel an anonymously scheduled task."]
                    cancel {
                        when: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Schedule a named task."]
                    schedule_named {
                        id: ::std::vec::Vec<::core::primitive::u8>,
                        when: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<
                            runtime_types::frame_support::traits::schedule::MaybeHashed<
                                runtime_types::dali_runtime::Call,
                                subxt::ext::sp_core::H256,
                            >,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Cancel a named scheduled task."]
                    cancel_named {
                        id: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 4)]
                    #[doc = "Anonymously schedule a task after a delay."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Same as [`schedule`]."]
                    #[doc = "# </weight>"]
                    schedule_after {
                        after: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<
                            runtime_types::frame_support::traits::schedule::MaybeHashed<
                                runtime_types::dali_runtime::Call,
                                subxt::ext::sp_core::H256,
                            >,
                        >,
                    },
                    #[codec(index = 5)]
                    #[doc = "Schedule a named task after a delay."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Same as [`schedule_named`](Self::schedule_named)."]
                    #[doc = "# </weight>"]
                    schedule_named_after {
                        id: ::std::vec::Vec<::core::primitive::u8>,
                        after: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<
                            runtime_types::frame_support::traits::schedule::MaybeHashed<
                                runtime_types::dali_runtime::Call,
                                subxt::ext::sp_core::H256,
                            >,
                        >,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Failed to schedule a call"]
                    FailedToSchedule,
                    #[codec(index = 1)]
                    #[doc = "Cannot find the scheduled call."]
                    NotFound,
                    #[codec(index = 2)]
                    #[doc = "Given target block number is in the past."]
                    TargetBlockNumberInPast,
                    #[codec(index = 3)]
                    #[doc = "Reschedule failed because it does not change scheduled time."]
                    RescheduleNoChange,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Events type."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Scheduled some task."]
                    Scheduled {
                        when: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Canceled some task."]
                    Canceled {
                        when: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Dispatched some task."]
                    Dispatched {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 3)]
                    #[doc = "The call for the provided hash was not found so the task has been aborted."]
                    CallLookupFailed {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                        error: runtime_types::frame_support::traits::schedule::LookupError,
                    },
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ScheduledV3<_0, _1, _2, _3> {
                pub maybe_id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                pub priority: ::core::primitive::u8,
                pub call: _0,
                pub maybe_periodic: ::core::option::Option<(_1, _1)>,
                pub origin: _2,
                #[codec(skip)]
                pub __subxt_unused_type_params: ::core::marker::PhantomData<_3>,
            }
        }
        pub mod pallet_session {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Sets the session key(s) of the function caller to `keys`."]
                    #[doc = "Allows an account to set its session key prior to becoming a validator."]
                    #[doc = "This doesn't take effect until the next session."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this function must be signed."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: `O(1)`. Actual cost depends on the number of length of"]
                    #[doc = "  `T::Keys::key_ids()` which is fixed."]
                    #[doc = "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`"]
                    #[doc = "- DbWrites: `origin account`, `NextKeys`"]
                    #[doc = "- DbReads per key id: `KeyOwner`"]
                    #[doc = "- DbWrites per key id: `KeyOwner`"]
                    #[doc = "# </weight>"]
                    set_keys {
                        keys: runtime_types::dali_runtime::opaque::SessionKeys,
                        proof: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Removes any session key(s) of the function caller."]
                    #[doc = ""]
                    #[doc = "This doesn't take effect until the next session."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
                    #[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
                    #[doc = "means being a controller account) or directly convertible into a validator ID (which"]
                    #[doc = "usually means being a stash account)."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length"]
                    #[doc = "  of `T::Keys::key_ids()` which is fixed."]
                    #[doc = "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`"]
                    #[doc = "- DbWrites: `NextKeys`, `origin account`"]
                    #[doc = "- DbWrites per key id: `KeyOwner`"]
                    #[doc = "# </weight>"]
                    purge_keys,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Error for the session pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Invalid ownership proof."]
                    InvalidProof,
                    #[codec(index = 1)]
                    #[doc = "No associated validator ID for account."]
                    NoAssociatedValidatorId,
                    #[codec(index = 2)]
                    #[doc = "Registered duplicate key."]
                    DuplicatedKey,
                    #[codec(index = 3)]
                    #[doc = "No keys are associated with this account."]
                    NoKeys,
                    #[codec(index = 4)]
                    #[doc = "Key setting account is not live, so it's impossible to associate keys."]
                    NoAccount,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New session has happened. Note that the argument is the session index, not the"]
                    #[doc = "block number as the type might suggest."]
                    NewSession {
                        session_index: ::core::primitive::u32,
                    },
                }
            }
        }
        pub mod pallet_staking_rewards {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Create a new reward pool based on the config."]
                    #[doc = ""]
                    #[doc = "Emits `RewardPoolCreated` event when successful."]
                    create_reward_pool {
                        pool_config:
                            runtime_types::composable_traits::staking::RewardPoolConfiguration<
                                subxt::ext::sp_core::crypto::AccountId32,
                                runtime_types::primitives::currency::CurrencyId,
                                ::core::primitive::u128,
                                ::core::primitive::u32,
                            >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Create a new stake."]
                    #[doc = ""]
                    #[doc = "Emits `Staked` event when successful."]
                    stake {
                        pool_id: runtime_types::primitives::currency::CurrencyId,
                        amount: ::core::primitive::u128,
                        duration_preset: ::core::primitive::u64,
                    },
                    #[codec(index = 2)]
                    #[doc = "Extend an existing stake."]
                    #[doc = ""]
                    #[doc = "Emits `StakeExtended` event when successful."]
                    extend {
                        fnft_collection_id: runtime_types::primitives::currency::CurrencyId,
                        fnft_instance_id: ::core::primitive::u64,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Remove a stake."]
                    #[doc = ""]
                    #[doc = "Emits `Unstaked` event when successful."]
                    unstake {
                        fnft_collection_id: runtime_types::primitives::currency::CurrencyId,
                        fnft_instance_id: ::core::primitive::u64,
                    },
                    #[codec(index = 4)]
                    split {
                        fnft_collection_id: runtime_types::primitives::currency::CurrencyId,
                        fnft_instance_id: ::core::primitive::u64,
                        ratio: runtime_types::sp_arithmetic::per_things::Permill,
                    },
                    #[codec(index = 5)]
                    #[doc = "Updates the reward pool configuration."]
                    #[doc = ""]
                    #[doc = "Emits `RewardPoolUpdated` when successful."]
                    update_rewards_pool {
                        pool_id: runtime_types::primitives::currency::CurrencyId,
                        reward_updates:
                            runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
                                runtime_types::primitives::currency::CurrencyId,
                                runtime_types::composable_traits::staking::RewardUpdate<
                                    ::core::primitive::u128,
                                >,
                            >,
                    },
                    #[codec(index = 6)]
                    #[doc = "Claim a current reward for some position."]
                    #[doc = ""]
                    #[doc = "Emits `Claimed` event when successful."]
                    claim {
                        fnft_collection_id: runtime_types::primitives::currency::CurrencyId,
                        fnft_instance_id: ::core::primitive::u64,
                    },
                    #[codec(index = 7)]
                    #[doc = "Add funds to the reward pool's rewards pot for the specified asset."]
                    #[doc = ""]
                    #[doc = "Emits `RewardsPotIncreased` when successful."]
                    add_to_rewards_pot {
                        pool_id: runtime_types::primitives::currency::CurrencyId,
                        asset_id: runtime_types::primitives::currency::CurrencyId,
                        amount: ::core::primitive::u128,
                        keep_alive: ::core::primitive::bool,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Error when creating reward configs."]
                    RewardConfigProblem,
                    #[codec(index = 1)]
                    #[doc = "AssetId is invalid, asset IDs must be greater than 0"]
                    InvalidAssetId,
                    #[codec(index = 2)]
                    #[doc = "Reward pool already exists"]
                    RewardsPoolAlreadyExists,
                    #[codec(index = 3)]
                    #[doc = "The duration provided was not valid for the pool."]
                    DurationPresetNotFound,
                    #[codec(index = 4)]
                    #[doc = "Too many rewarded asset types per pool violating the storage allowed."]
                    TooManyRewardAssetTypes,
                    #[codec(index = 5)]
                    #[doc = "Invalid start block number provided for creating a pool."]
                    StartBlockMustBeAfterCurrentBlock,
                    #[codec(index = 6)]
                    #[doc = "Invalid end block number provided for creating a pool."]
                    EndBlockMustBeAfterStartBlock,
                    #[codec(index = 7)]
                    #[doc = "Unimplemented reward pool type."]
                    UnimplementedRewardPoolConfiguration,
                    #[codec(index = 8)]
                    #[doc = "Rewards pool not found."]
                    RewardsPoolNotFound,
                    #[codec(index = 9)]
                    #[doc = "Rewards pool has not started."]
                    RewardsPoolHasNotStarted,
                    #[codec(index = 10)]
                    #[doc = "Error when creating reduction configs."]
                    ReductionConfigProblem,
                    #[codec(index = 11)]
                    #[doc = "Not enough assets for a stake."]
                    NotEnoughAssets,
                    #[codec(index = 12)]
                    #[doc = "No stake found for given id."]
                    StakeNotFound,
                    #[codec(index = 13)]
                    #[doc = "Reward's max limit reached."]
                    MaxRewardLimitReached,
                    #[codec(index = 14)]
                    #[doc = "only the owner of stake can unstake it"]
                    OnlyStakeOwnerCanInteractWithStake,
                    #[codec(index = 15)]
                    #[doc = "Reward asset not found in reward pool."]
                    RewardAssetNotFound,
                    #[codec(index = 16)]
                    BackToTheFuture,
                    #[codec(index = 17)]
                    #[doc = "The rewards pot for this pool is empty."]
                    RewardsPotEmpty,
                    #[codec(index = 18)]
                    FnftNotFound,
                    #[codec(index = 19)]
                    #[doc = "No duration presets were provided upon pool creation."]
                    NoDurationPresetsProvided,
                    #[codec(index = 20)]
                    #[doc = "Slashed amount of minimum reward is less than existential deposit"]
                    SlashedAmountTooLow,
                    #[codec(index = 21)]
                    #[doc = "Slashed amount of minimum staking amount is less than existential deposit"]
                    SlashedMinimumStakingAmountTooLow,
                    #[codec(index = 22)]
                    #[doc = "Staked amount is less than the minimum staking amount for the pool."]
                    StakedAmountTooLow,
                    #[codec(index = 23)]
                    #[doc = "Staked amount after split is less than the minimum staking amount for the pool."]
                    StakedAmountTooLowAfterSplit,
                    #[codec(index = 24)]
                    #[doc = "Some operation resulted in an arithmetic overflow."]
                    ArithmeticError,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    # [codec (index = 0)] # [doc = "Pool with specified id `T::AssetId` was created successfully by `T::AccountId`."] RewardPoolCreated { pool_id : runtime_types :: primitives :: currency :: CurrencyId , owner : subxt :: ext :: sp_core :: crypto :: AccountId32 , end_block : :: core :: primitive :: u32 , } , # [codec (index = 1)] Staked { pool_id : runtime_types :: primitives :: currency :: CurrencyId , owner : subxt :: ext :: sp_core :: crypto :: AccountId32 , amount : :: core :: primitive :: u128 , duration_preset : :: core :: primitive :: u64 , fnft_collection_id : runtime_types :: primitives :: currency :: CurrencyId , fnft_instance_id : :: core :: primitive :: u64 , reward_multiplier : runtime_types :: sp_arithmetic :: fixed_point :: FixedU64 , keep_alive : :: core :: primitive :: bool , } , # [codec (index = 2)] Claimed { owner : subxt :: ext :: sp_core :: crypto :: AccountId32 , fnft_collection_id : runtime_types :: primitives :: currency :: CurrencyId , fnft_instance_id : :: core :: primitive :: u64 , } , # [codec (index = 3)] StakeAmountExtended { fnft_collection_id : runtime_types :: primitives :: currency :: CurrencyId , fnft_instance_id : :: core :: primitive :: u64 , amount : :: core :: primitive :: u128 , } , # [codec (index = 4)] Unstaked { owner : subxt :: ext :: sp_core :: crypto :: AccountId32 , fnft_collection_id : runtime_types :: primitives :: currency :: CurrencyId , fnft_instance_id : :: core :: primitive :: u64 , slash : :: core :: option :: Option < :: core :: primitive :: u128 > , } , # [codec (index = 5)] # [doc = "A staking position was split."] SplitPosition { positions : :: std :: vec :: Vec < (runtime_types :: primitives :: currency :: CurrencyId , :: core :: primitive :: u64 , :: core :: primitive :: u128 ,) > , } , # [codec (index = 6)] # [doc = "Reward transfer event."] RewardTransferred { from : subxt :: ext :: sp_core :: crypto :: AccountId32 , pool_id : runtime_types :: primitives :: currency :: CurrencyId , reward_currency : runtime_types :: primitives :: currency :: CurrencyId , reward_increment : :: core :: primitive :: u128 , } , # [codec (index = 7)] RewardAccumulationHookError { pool_id : runtime_types :: primitives :: currency :: CurrencyId , asset_id : runtime_types :: primitives :: currency :: CurrencyId , error : runtime_types :: pallet_staking_rewards :: pallet :: RewardAccumulationHookError , } , # [codec (index = 8)] RewardPoolUpdated { pool_id : runtime_types :: primitives :: currency :: CurrencyId , } , # [codec (index = 9)] RewardsPotIncreased { pool_id : runtime_types :: primitives :: currency :: CurrencyId , asset_id : runtime_types :: primitives :: currency :: CurrencyId , amount : :: core :: primitive :: u128 , } , # [codec (index = 10)] UnstakeRewardSlashed { pool_id : runtime_types :: primitives :: currency :: CurrencyId , owner : subxt :: ext :: sp_core :: crypto :: AccountId32 , fnft_instance_id : :: core :: primitive :: u64 , reward_asset_id : runtime_types :: primitives :: currency :: CurrencyId , amount_slashed : :: core :: primitive :: u128 , } , }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum RewardAccumulationHookError {
                    #[codec(index = 0)]
                    BackToTheFuture,
                    #[codec(index = 1)]
                    RewardsPotEmpty,
                    #[codec(index = 2)]
                    ArithmeticError,
                }
            }
        }
        pub mod pallet_sudo {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "- Limited storage reads."]
                    #[doc = "- One DB write (event)."]
                    #[doc = "- Weight of derivative `call` execution + 10,000."]
                    #[doc = "# </weight>"]
                    sudo {
                        call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                    #[doc = "This function does not check the weight of the call, and instead allows the"]
                    #[doc = "Sudo user to specify the weight of the call."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "- The weight of this call is defined by the caller."]
                    #[doc = "# </weight>"]
                    sudo_unchecked_weight {
                        call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
                        weight: ::core::primitive::u64,
                    },
                    #[codec(index = 2)]
                    #[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
                    #[doc = "key."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "- Limited storage reads."]
                    #[doc = "- One DB change."]
                    #[doc = "# </weight>"]
                    set_key {
                        new: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
                    #[doc = "a given account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "- Limited storage reads."]
                    #[doc = "- One DB write (event)."]
                    #[doc = "- Weight of derivative `call` execution + 10,000."]
                    #[doc = "# </weight>"]
                    sudo_as {
                        who: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Error for the Sudo pallet"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Sender must be the Sudo account"]
                    RequireSudo,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A sudo just took place. \\[result\\]"]
                    Sudid {
                        sudo_result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 1)]
                    #[doc = "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."]
                    KeyChanged {
                        old_sudoer:
                            ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
                    },
                    #[codec(index = 2)]
                    #[doc = "A sudo just took place. \\[result\\]"]
                    SudoAsDone {
                        sudo_result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                }
            }
        }
        pub mod pallet_timestamp {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Set the current time."]
                    #[doc = ""]
                    #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
                    #[doc = "phase, if this call hasn't been invoked by that time."]
                    #[doc = ""]
                    #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
                    #[doc = "`MinimumPeriod`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Inherent`."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
                    #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
                    #[doc = "  `on_finalize`)"]
                    #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
                    #[doc = "# </weight>"]
                    set {
                        #[codec(compact)]
                        now: ::core::primitive::u64,
                    },
                }
            }
        }
        pub mod pallet_transaction_payment {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
                    #[doc = "has been paid by `who`."]
                    TransactionFeePaid {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        actual_fee: ::core::primitive::u128,
                        tip: ::core::primitive::u128,
                    },
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum Releases {
                #[codec(index = 0)]
                V1Ancient,
                #[codec(index = 1)]
                V2,
            }
        }
        pub mod pallet_treasury {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Put forward a suggestion for spending. A deposit proportional to the value"]
                    #[doc = "is reserved and slashed if the proposal is rejected. It is returned once the"]
                    #[doc = "proposal is awarded."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: O(1)"]
                    #[doc = "- DbReads: `ProposalCount`, `origin account`"]
                    #[doc = "- DbWrites: `ProposalCount`, `Proposals`, `origin account`"]
                    #[doc = "# </weight>"]
                    propose_spend {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        beneficiary: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Reject a proposed spend. The original deposit will be slashed."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::RejectOrigin`."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: O(1)"]
                    #[doc = "- DbReads: `Proposals`, `rejected proposer account`"]
                    #[doc = "- DbWrites: `Proposals`, `rejected proposer account`"]
                    #[doc = "# </weight>"]
                    reject_proposal {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary"]
                    #[doc = "and the original deposit will be returned."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::ApproveOrigin`."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: O(1)."]
                    #[doc = "- DbReads: `Proposals`, `Approvals`"]
                    #[doc = "- DbWrite: `Approvals`"]
                    #[doc = "# </weight>"]
                    approve_proposal {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Propose and approve a spend of treasury funds."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`."]
                    #[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
                    #[doc = "- `beneficiary`: The destination account for the transfer."]
                    #[doc = ""]
                    #[doc = "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the"]
                    #[doc = "beneficiary."]
                    spend {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        beneficiary: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "Force a previously approved proposal to be removed from the approval queue."]
                    #[doc = "The original deposit will no longer be returned."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::RejectOrigin`."]
                    #[doc = "- `proposal_id`: The index of a proposal"]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: O(A) where `A` is the number of approvals"]
                    #[doc = "- Db reads and writes: `Approvals`"]
                    #[doc = "# </weight>"]
                    #[doc = ""]
                    #[doc = "Errors:"]
                    #[doc = "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,"]
                    #[doc = "i.e., the proposal has not been approved. This could also mean the proposal does not"]
                    #[doc = "exist altogether, thus there is no way it would have been approved in the first place."]
                    remove_approval {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Error for the treasury pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Proposer's balance is too low."]
                    InsufficientProposersBalance,
                    #[codec(index = 1)]
                    #[doc = "No proposal or bounty at that index."]
                    InvalidIndex,
                    #[codec(index = 2)]
                    #[doc = "Too many approvals in the queue."]
                    TooManyApprovals,
                    #[codec(index = 3)]
                    #[doc = "The spend origin is valid but the amount it is allowed to spend is lower than the"]
                    #[doc = "amount to be spent."]
                    InsufficientPermission,
                    #[codec(index = 4)]
                    #[doc = "Proposal has not been approved."]
                    ProposalNotApproved,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New proposal."]
                    Proposed {
                        proposal_index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "We have ended a spend period and will now allocate funds."]
                    Spending {
                        budget_remaining: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Some funds have been allocated."]
                    Awarded {
                        proposal_index: ::core::primitive::u32,
                        award: ::core::primitive::u128,
                        account: subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 3)]
                    #[doc = "A proposal was rejected; funds were slashed."]
                    Rejected {
                        proposal_index: ::core::primitive::u32,
                        slashed: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Some of our funds have been burnt."]
                    Burnt {
                        burnt_funds: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Spending has finished; this is the amount that rolls over until next spend."]
                    Rollover {
                        rollover_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some funds have been deposited."]
                    Deposit { value: ::core::primitive::u128 },
                    #[codec(index = 7)]
                    #[doc = "A new spend proposal has been approved."]
                    SpendApproved {
                        proposal_index: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                        beneficiary: subxt::ext::sp_core::crypto::AccountId32,
                    },
                }
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct Proposal<_0, _1> {
                pub proposer: _0,
                pub value: _1,
                pub beneficiary: _0,
                pub bond: _1,
            }
        }
        pub mod pallet_utility {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Send a batch of dispatch calls."]
                    #[doc = ""]
                    #[doc = "May be called from any origin."]
                    #[doc = ""]
                    #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                    #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                    #[doc = ""]
                    #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
                    #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
                    #[doc = "# </weight>"]
                    #[doc = ""]
                    #[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
                    #[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
                    #[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
                    #[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
                    #[doc = "event is deposited."]
                    batch {
                        calls: ::std::vec::Vec<runtime_types::dali_runtime::Call>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Send a call through an indexed pseudonym of the sender."]
                    #[doc = ""]
                    #[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
                    #[doc = "use the same filter as the origin of this call."]
                    #[doc = ""]
                    #[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
                    #[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
                    #[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
                    #[doc = "in the Multisig pallet instead."]
                    #[doc = ""]
                    #[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    as_derivative {
                        index: ::core::primitive::u16,
                        call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
                    },
                    #[codec(index = 2)]
                    #[doc = "Send a batch of dispatch calls and atomically execute them."]
                    #[doc = "The whole transaction will rollback and fail if any of the calls failed."]
                    #[doc = ""]
                    #[doc = "May be called from any origin."]
                    #[doc = ""]
                    #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                    #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                    #[doc = ""]
                    #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
                    #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
                    #[doc = "# </weight>"]
                    batch_all {
                        calls: ::std::vec::Vec<runtime_types::dali_runtime::Call>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Dispatches a function call with a provided origin."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "- Limited storage reads."]
                    #[doc = "- One DB write (event)."]
                    #[doc = "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as()."]
                    #[doc = "# </weight>"]
                    dispatch_as {
                        as_origin: ::std::boxed::Box<runtime_types::dali_runtime::OriginCaller>,
                        call: ::std::boxed::Box<runtime_types::dali_runtime::Call>,
                    },
                    #[codec(index = 4)]
                    #[doc = "Send a batch of dispatch calls."]
                    #[doc = "Unlike `batch`, it allows errors and won't interrupt."]
                    #[doc = ""]
                    #[doc = "May be called from any origin."]
                    #[doc = ""]
                    #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                    #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                    #[doc = ""]
                    #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
                    #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
                    #[doc = "# </weight>"]
                    force_batch {
                        calls: ::std::vec::Vec<runtime_types::dali_runtime::Call>,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Too many calls batched."]
                    TooManyCalls,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
                    #[doc = "well as the error."]
                    BatchInterrupted {
                        index: ::core::primitive::u32,
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 1)]
                    #[doc = "Batch of dispatches completed fully with no error."]
                    BatchCompleted,
                    #[codec(index = 2)]
                    #[doc = "Batch of dispatches completed but has errors."]
                    BatchCompletedWithErrors,
                    #[codec(index = 3)]
                    #[doc = "A single item within a Batch of dispatches has completed with no error."]
                    ItemCompleted,
                    #[codec(index = 4)]
                    #[doc = "A single item within a Batch of dispatches has completed with error."]
                    ItemFailed {
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 5)]
                    #[doc = "A call was dispatched."]
                    DispatchedAs {
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                }
            }
        }
        pub mod pallet_vault {
            use super::runtime_types;
            pub mod capabilities {
                use super::runtime_types;
                #[derive(
                    Debug,
                    subxt :: ext :: codec :: CompactAs,
                    subxt :: ext :: codec :: Decode,
                    subxt :: ext :: codec :: Encode,
                )]
                pub struct Capabilities {
                    pub bits: ::core::primitive::u32,
                }
            }
            pub mod models {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct StrategyOverview<_0> {
                    pub allocation: runtime_types::sp_arithmetic::per_things::Perquintill,
                    pub balance: _0,
                    pub lifetime_withdrawn: _0,
                    pub lifetime_deposited: _0,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct VaultInfo<_0, _1, _2, _3> {
                    pub asset_id: _2,
                    pub lp_token_id: _2,
                    pub manager: _0,
                    pub deposit: runtime_types::composable_traits::vault::Deposit<_1, _3>,
                    pub capabilities: runtime_types::pallet_vault::capabilities::Capabilities,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Creates a new vault, locking up the deposit. If the deposit is greater than the"]
                    #[doc = "`ExistentialDeposit` + `CreationDeposit`, the vault will remain alive forever, else it"]
                    #[doc = "can be `tombstoned` after `deposit / RentPerBlock `. Accounts may deposit more funds to"]
                    #[doc = "keep the vault alive."]
                    #[doc = ""]
                    #[doc = "# Emits"]
                    #[doc = " - [`Event::VaultCreated`](Event::VaultCreated)"]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = " - When the origin is not signed."]
                    #[doc = " - When `deposit < CreationDeposit`."]
                    #[doc = " - Origin has insufficient funds to lock the deposit."]
                    create {
                        vault: runtime_types::composable_traits::vault::VaultConfig<
                            subxt::ext::sp_core::crypto::AccountId32,
                            runtime_types::primitives::currency::CurrencyId,
                        >,
                        deposit_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Subtracts rent from a vault, rewarding the caller if successful with a small fee and"]
                    #[doc = "possibly tombstoning the vault."]
                    #[doc = ""]
                    #[doc = "A tombstoned vault still allows for withdrawals but blocks deposits, and requests all"]
                    #[doc = "strategies to return their funds."]
                    claim_surcharge {
                        dest: ::core::primitive::u64,
                        address: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
                    },
                    #[codec(index = 2)]
                    add_surcharge {
                        dest: ::core::primitive::u64,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    delete_tombstoned {
                        dest: ::core::primitive::u64,
                        address: ::core::option::Option<subxt::ext::sp_core::crypto::AccountId32>,
                    },
                    #[codec(index = 4)]
                    #[doc = "Deposit funds in the vault and receive LP tokens in return."]
                    #[doc = "# Emits"]
                    #[doc = " - Event::Deposited"]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = " - When the origin is not signed."]
                    #[doc = " - When `deposit < MinimumDeposit`."]
                    deposit {
                        vault: ::core::primitive::u64,
                        asset_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Withdraw funds"]
                    #[doc = ""]
                    #[doc = "# Emits"]
                    #[doc = " - Event::Withdrawn"]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = " - When the origin is not signed."]
                    #[doc = " - When `lp_amount < MinimumWithdrawal`."]
                    #[doc = " - When the vault has insufficient amounts reserved."]
                    withdraw {
                        vault: ::core::primitive::u64,
                        lp_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Stops a vault. To be used in case of severe protocol flaws."]
                    #[doc = ""]
                    #[doc = "# Emits"]
                    #[doc = " - Event::EmergencyShutdown"]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = " - When the origin is not root."]
                    #[doc = " - When `vault` does not exist."]
                    emergency_shutdown { vault: ::core::primitive::u64 },
                    #[codec(index = 7)]
                    #[doc = "(Re)starts a vault after emergency shutdown."]
                    #[doc = ""]
                    #[doc = "# Emits"]
                    #[doc = " - Event::VaultStarted"]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = " - When the origin is not root."]
                    #[doc = " - When `vault` does not exist."]
                    start { vault: ::core::primitive::u64 },
                    #[codec(index = 8)]
                    #[doc = "Turns an existent strategy account `strategy_account` of a vault determined by"]
                    #[doc = "`vault_idx` into a liquidation state where withdrawn funds should be returned as soon"]
                    #[doc = "as possible."]
                    #[doc = ""]
                    #[doc = "Only the vault's manager will be able to call this method."]
                    #[doc = ""]
                    #[doc = "# Emits"]
                    #[doc = " - Event::LiquidateStrategy"]
                    liquidate_strategy {
                        vault_idx: ::core::primitive::u64,
                        strategy_account_id: subxt::ext::sp_core::crypto::AccountId32,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "It is not possible to perform a privileged action using an ordinary account"]
                    AccountIsNotManager,
                    #[codec(index = 1)]
                    #[doc = "Failures in creating LP tokens during vault creation result in `CannotCreateAsset`."]
                    CannotCreateAsset,
                    #[codec(index = 2)]
                    #[doc = "Failures to transfer funds from the vault to users or vice- versa result in"]
                    #[doc = "`TransferFromFailed`."]
                    TransferFromFailed,
                    #[codec(index = 3)]
                    #[doc = "Minting failures result in `MintFailed`. In general this should never occur."]
                    MintFailed,
                    #[codec(index = 4)]
                    #[doc = "Requesting withdrawals for more LP tokens than available to the user result in"]
                    #[doc = "`InsufficientLpTokens`"]
                    InsufficientLpTokens,
                    #[codec(index = 5)]
                    #[doc = "Querying/operating on invalid vault id's result in `VaultDoesNotExist`."]
                    VaultDoesNotExist,
                    #[codec(index = 6)]
                    #[doc = "If the vault contains too many assets (close to the `Balance::MAX`), it is considered"]
                    #[doc = "full as arithmetic starts overflowing."]
                    NoFreeVaultAllocation,
                    #[codec(index = 7)]
                    #[doc = "Vaults must allocate the proper ratio between reserved and strategies, so that the"]
                    #[doc = "ratio sums up to one."]
                    AllocationMustSumToOne,
                    #[codec(index = 8)]
                    #[doc = "Vaults may have up to [`MaxStrategies`](Config::MaxStrategies) strategies."]
                    TooManyStrategies,
                    #[codec(index = 9)]
                    #[doc = "Vaults may have insufficient funds for withdrawals, as well as users wishing to deposit"]
                    #[doc = "an incorrect amount."]
                    InsufficientFunds,
                    #[codec(index = 10)]
                    #[doc = "Deposit amounts not exceeding [`MinimumDeposit`](Config::MinimumDeposit) are declined"]
                    #[doc = "and result in `AmountMustGteMinimumDeposit`."]
                    AmountMustGteMinimumDeposit,
                    #[codec(index = 11)]
                    #[doc = "Withdrawal amounts not exceeding [`MinimumWithdrawal`](Config::MinimumWithdrawal) are"]
                    #[doc = "declined and result in `AmountMustGteMinimumWithdrawal`."]
                    AmountMustGteMinimumWithdrawal,
                    #[codec(index = 12)]
                    #[doc = "When trying to withdraw too much from the vault, `NotEnoughLiquidity` is returned."]
                    NotEnoughLiquidity,
                    #[codec(index = 13)]
                    #[doc = "Creating vaults with invalid creation deposits results in"]
                    #[doc = "`InsufficientCreationDeposit`."]
                    InsufficientCreationDeposit,
                    #[codec(index = 14)]
                    #[doc = "Attempting to tombstone a vault which has rent remaining results in"]
                    #[doc = "`InvalidSurchargeClaim`."]
                    InvalidSurchargeClaim,
                    #[codec(index = 15)]
                    #[doc = "Not all vaults have an associated LP token. Attempting to perform LP token related"]
                    #[doc = "operations result in `NotVaultLpToken`."]
                    NotVaultLpToken,
                    #[codec(index = 16)]
                    #[doc = "The vault has deposits halted, see [Capabilities](crate::capabilities::Capabilities)."]
                    DepositsHalted,
                    #[codec(index = 17)]
                    #[doc = "The vault has withdrawals halted, see"]
                    #[doc = "[Capabilities](crate::capabilities::Capabilities)."]
                    WithdrawalsHalted,
                    #[codec(index = 18)]
                    OnlyManagerCanDoThisOperation,
                    #[codec(index = 19)]
                    InvalidDeletionClaim,
                    #[codec(index = 20)]
                    #[doc = "The vault could not be deleted, as it was not yet tombstoned."]
                    VaultNotTombstoned,
                    #[codec(index = 21)]
                    #[doc = "The vault could not be deleted, as it was not tombstoned for long enough."]
                    TombstoneDurationNotExceeded,
                    #[codec(index = 22)]
                    #[doc = "Existentially funded vaults do not require extra funds."]
                    InvalidAddSurcharge,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Emitted after a vault has been successfully created."]
                    VaultCreated { id: ::core::primitive::u64 },
                    #[codec(index = 1)]
                    #[doc = "Emitted after a user deposits funds into the vault."]
                    Deposited {
                        account: subxt::ext::sp_core::crypto::AccountId32,
                        asset_amount: ::core::primitive::u128,
                        lp_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    LiquidateStrategy {
                        account: subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Emitted after a user exchanges LP tokens back for underlying assets"]
                    Withdrawn {
                        account: subxt::ext::sp_core::crypto::AccountId32,
                        lp_amount: ::core::primitive::u128,
                        asset_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Emitted after a successful emergency shutdown."]
                    EmergencyShutdown { vault: ::core::primitive::u64 },
                    #[codec(index = 5)]
                    #[doc = "Emitted after a vault is restarted."]
                    VaultStarted { vault: ::core::primitive::u64 },
                }
            }
        }
        pub mod pallet_vesting {
            use super::runtime_types;
            pub mod module {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Unlock any vested funds of the origin account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have funds still"]
                    #[doc = "locked under this pallet."]
                    #[doc = ""]
                    #[doc = "- `asset`: The asset associated with the vesting schedule"]
                    #[doc = "- `vesting_schedule_ids`: The ids of the vesting schedules to be claimed"]
                    #[doc = ""]
                    #[doc = "Emits `Claimed`."]
                    claim {
                        asset: runtime_types::primitives::currency::CurrencyId,
                        vesting_schedule_ids:
                            runtime_types::composable_traits::vesting::VestingScheduleIdSet<
                                ::core::primitive::u128,
                            >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Create a vested transfer."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_ or Democracy."]
                    #[doc = ""]
                    #[doc = "- `from`: The account sending the vested funds."]
                    #[doc = "- `beneficiary`: The account receiving the vested funds."]
                    #[doc = "- `asset`: The asset associated with this vesting schedule."]
                    #[doc = "- `schedule_info`: The vesting schedule data attached to the transfer."]
                    #[doc = ""]
                    #[doc = "Emits `VestingScheduleAdded`."]
                    #[doc = ""]
                    #[doc = "NOTE: This will unlock all schedules through the current block."]
                    vested_transfer {
                        from: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        beneficiary: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        asset: runtime_types::primitives::currency::CurrencyId,
                        schedule_info:
                            runtime_types::composable_traits::vesting::VestingScheduleInfo<
                                ::core::primitive::u32,
                                ::core::primitive::u64,
                                ::core::primitive::u128,
                            >,
                    },
                    #[codec(index = 2)]
                    #[doc = "Update vesting schedules"]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_ or democracy."]
                    #[doc = ""]
                    #[doc = "- `who`: The account whose vested funds should be updated."]
                    #[doc = "- `asset`: The asset associated with the vesting schedules."]
                    #[doc = "- `vesting_schedules`: The updated vesting schedules."]
                    #[doc = ""]
                    #[doc = "Emits `VestingSchedulesUpdated`."]
                    update_vesting_schedules {
                        who: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        asset: runtime_types::primitives::currency::CurrencyId,
                        vesting_schedules: ::std::vec::Vec<
                            runtime_types::composable_traits::vesting::VestingScheduleInfo<
                                ::core::primitive::u32,
                                ::core::primitive::u64,
                                ::core::primitive::u128,
                            >,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Unlock any vested funds of a `target` account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `dest`: The account whose vested funds should be unlocked. Must have funds still"]
                    #[doc = "locked under this pallet."]
                    #[doc = "- `asset`: The asset associated with the vesting schedule."]
                    #[doc = "- `vesting_schedule_ids`: The ids of the vesting schedules to be claimed."]
                    #[doc = ""]
                    #[doc = "Emits `Claimed`."]
                    claim_for {
                        dest: subxt::ext::sp_runtime::MultiAddress<
                            subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        asset: runtime_types::primitives::currency::CurrencyId,
                        vesting_schedule_ids:
                            runtime_types::composable_traits::vesting::VestingScheduleIdSet<
                                ::core::primitive::u128,
                            >,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Vesting period is zero"]
                    ZeroVestingPeriod,
                    #[codec(index = 1)]
                    #[doc = "Number of vests is zero"]
                    ZeroVestingPeriodCount,
                    #[codec(index = 2)]
                    #[doc = "Insufficient amount of balance to lock"]
                    InsufficientBalanceToLock,
                    #[codec(index = 3)]
                    #[doc = "This account have too many vesting schedules"]
                    TooManyVestingSchedules,
                    #[codec(index = 4)]
                    #[doc = "The vested transfer amount is too low"]
                    AmountLow,
                    #[codec(index = 5)]
                    #[doc = "Failed because the maximum vesting schedules was exceeded"]
                    MaxVestingSchedulesExceeded,
                    #[codec(index = 6)]
                    #[doc = "Trying to vest to ourselves"]
                    TryingToSelfVest,
                    #[codec(index = 7)]
                    #[doc = "There is no vesting schedule with a given id"]
                    VestingScheduleNotFound,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Added new vesting schedule."]
                    VestingScheduleAdded {
                        from: subxt::ext::sp_core::crypto::AccountId32,
                        to: subxt::ext::sp_core::crypto::AccountId32,
                        asset: runtime_types::primitives::currency::CurrencyId,
                        vesting_schedule_id: ::core::primitive::u128,
                        schedule: runtime_types::composable_traits::vesting::VestingSchedule<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                            ::core::primitive::u64,
                            ::core::primitive::u128,
                        >,
                        schedule_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Claimed vesting."]
                    Claimed {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                        asset: runtime_types::primitives::currency::CurrencyId,
                        vesting_schedule_ids:
                            runtime_types::composable_traits::vesting::VestingScheduleIdSet<
                                ::core::primitive::u128,
                            >,
                        locked_amount: ::core::primitive::u128,
                        claimed_amount_per_schedule:
                            runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
                                ::core::primitive::u128,
                                ::core::primitive::u128,
                            >,
                    },
                    #[codec(index = 2)]
                    #[doc = "Updated vesting schedules."]
                    VestingSchedulesUpdated {
                        who: subxt::ext::sp_core::crypto::AccountId32,
                    },
                }
            }
        }
        pub mod pallet_xcm {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    send {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Teleport some assets from the local chain to some destination chain."]
                    #[doc = ""]
                    #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                    #[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
                    #[doc = "with all fees taken as needed from the asset."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                    #[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
                    #[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
                    #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
                    #[doc = "  an `AccountId32` value."]
                    #[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
                    #[doc = "  `dest` side. May not be empty."]
                    #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                    #[doc = "  fees."]
                    teleport_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_asset_item: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
                    #[doc = "chain and forward a notification XCM."]
                    #[doc = ""]
                    #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                    #[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
                    #[doc = "with all fees taken as needed from the asset."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                    #[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
                    #[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
                    #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
                    #[doc = "  an `AccountId32` value."]
                    #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
                    #[doc = "  `dest` side."]
                    #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                    #[doc = "  fees."]
                    reserve_transfer_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_asset_item: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Execute an XCM message from a local, signed, origin."]
                    #[doc = ""]
                    #[doc = "An event is deposited indicating whether `msg` could be executed completely or only"]
                    #[doc = "partially."]
                    #[doc = ""]
                    #[doc = "No more than `max_weight` will be used in its attempted execution. If this is less than the"]
                    #[doc = "maximum amount of weight that the message could take to be executed, then no execution"]
                    #[doc = "attempt will be made."]
                    #[doc = ""]
                    #[doc = "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully"]
                    #[doc = "to completion; only that *some* of it was executed."]
                    execute {
                        message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
                        max_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 4)]
                    #[doc = "Extoll that a particular destination can be communicated with through a particular"]
                    #[doc = "version of XCM."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be Root."]
                    #[doc = "- `location`: The destination that is being described."]
                    #[doc = "- `xcm_version`: The latest version of XCM that `location` supports."]
                    force_xcm_version {
                        location:
                            ::std::boxed::Box<runtime_types::xcm::v1::multilocation::MultiLocation>,
                        xcm_version: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Set a safe XCM version (the version that XCM should be encoded with if the most recent"]
                    #[doc = "version a destination can accept is unknown)."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be Root."]
                    #[doc = "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."]
                    force_default_xcm_version {
                        maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 6)]
                    #[doc = "Ask a location to notify us regarding their XCM version and any changes to it."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be Root."]
                    #[doc = "- `location`: The location to which we should subscribe for XCM version notifications."]
                    force_subscribe_version_notify {
                        location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    },
                    #[codec(index = 7)]
                    #[doc = "Require that a particular destination should no longer notify us regarding any XCM"]
                    #[doc = "version changes."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be Root."]
                    #[doc = "- `location`: The location to which we are currently subscribed for XCM version"]
                    #[doc = "  notifications which we no longer desire."]
                    force_unsubscribe_version_notify {
                        location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    },
                    #[codec(index = 8)]
                    #[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
                    #[doc = "chain and forward a notification XCM."]
                    #[doc = ""]
                    #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                    #[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
                    #[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
                    #[doc = "at risk."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                    #[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
                    #[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
                    #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
                    #[doc = "  an `AccountId32` value."]
                    #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
                    #[doc = "  `dest` side."]
                    #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                    #[doc = "  fees."]
                    #[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
                    limited_reserve_transfer_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_asset_item: ::core::primitive::u32,
                        weight_limit: runtime_types::xcm::v2::WeightLimit,
                    },
                    #[codec(index = 9)]
                    #[doc = "Teleport some assets from the local chain to some destination chain."]
                    #[doc = ""]
                    #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                    #[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
                    #[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
                    #[doc = "at risk."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                    #[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
                    #[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
                    #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
                    #[doc = "  an `AccountId32` value."]
                    #[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
                    #[doc = "  `dest` side. May not be empty."]
                    #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                    #[doc = "  fees."]
                    #[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
                    limited_teleport_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_asset_item: ::core::primitive::u32,
                        weight_limit: runtime_types::xcm::v2::WeightLimit,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The desired destination was unreachable, generally because there is a no way of routing"]
                    #[doc = "to it."]
                    Unreachable,
                    #[codec(index = 1)]
                    #[doc = "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps"]
                    #[doc = "a lack of space for buffering the message."]
                    SendFailure,
                    #[codec(index = 2)]
                    #[doc = "The message execution fails the filter."]
                    Filtered,
                    #[codec(index = 3)]
                    #[doc = "The message's weight could not be determined."]
                    UnweighableMessage,
                    #[codec(index = 4)]
                    #[doc = "The destination `MultiLocation` provided cannot be inverted."]
                    DestinationNotInvertible,
                    #[codec(index = 5)]
                    #[doc = "The assets to be sent are empty."]
                    Empty,
                    #[codec(index = 6)]
                    #[doc = "Could not re-anchor the assets to declare the fees for the destination chain."]
                    CannotReanchor,
                    #[codec(index = 7)]
                    #[doc = "Too many assets have been attempted for transfer."]
                    TooManyAssets,
                    #[codec(index = 8)]
                    #[doc = "Origin is invalid for sending."]
                    InvalidOrigin,
                    #[codec(index = 9)]
                    #[doc = "The version of the `Versioned` value used is not able to be interpreted."]
                    BadVersion,
                    #[codec(index = 10)]
                    #[doc = "The given location could not be used (e.g. because it cannot be expressed in the"]
                    #[doc = "desired version of XCM)."]
                    BadLocation,
                    #[codec(index = 11)]
                    #[doc = "The referenced subscription could not be found."]
                    NoSubscription,
                    #[codec(index = 12)]
                    #[doc = "The location is invalid since it already has a subscription from us."]
                    AlreadySubscribed,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Execution of an XCM message was attempted."]
                    #[doc = ""]
                    #[doc = "\\[ outcome \\]"]
                    Attempted(runtime_types::xcm::v2::traits::Outcome),
                    #[codec(index = 1)]
                    #[doc = "A XCM message was sent."]
                    #[doc = ""]
                    #[doc = "\\[ origin, destination, message \\]"]
                    Sent(
                        runtime_types::xcm::v1::multilocation::MultiLocation,
                        runtime_types::xcm::v1::multilocation::MultiLocation,
                        runtime_types::xcm::v2::Xcm,
                    ),
                    #[codec(index = 2)]
                    #[doc = "Query response received which does not match a registered query. This may be because a"]
                    #[doc = "matching query was never registered, it may be because it is a duplicate response, or"]
                    #[doc = "because the query timed out."]
                    #[doc = ""]
                    #[doc = "\\[ origin location, id \\]"]
                    UnexpectedResponse(
                        runtime_types::xcm::v1::multilocation::MultiLocation,
                        ::core::primitive::u64,
                    ),
                    #[codec(index = 3)]
                    #[doc = "Query response has been received and is ready for taking with `take_response`. There is"]
                    #[doc = "no registered notification call."]
                    #[doc = ""]
                    #[doc = "\\[ id, response \\]"]
                    ResponseReady(::core::primitive::u64, runtime_types::xcm::v2::Response),
                    #[codec(index = 4)]
                    #[doc = "Query response has been received and query is removed. The registered notification has"]
                    #[doc = "been dispatched and executed successfully."]
                    #[doc = ""]
                    #[doc = "\\[ id, pallet index, call index \\]"]
                    Notified(
                        ::core::primitive::u64,
                        ::core::primitive::u8,
                        ::core::primitive::u8,
                    ),
                    #[codec(index = 5)]
                    #[doc = "Query response has been received and query is removed. The registered notification could"]
                    #[doc = "not be dispatched because the dispatch weight is greater than the maximum weight"]
                    #[doc = "originally budgeted by this runtime for the query result."]
                    #[doc = ""]
                    #[doc = "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"]
                    NotifyOverweight(
                        ::core::primitive::u64,
                        ::core::primitive::u8,
                        ::core::primitive::u8,
                        ::core::primitive::u64,
                        ::core::primitive::u64,
                    ),
                    #[codec(index = 6)]
                    #[doc = "Query response has been received and query is removed. There was a general error with"]
                    #[doc = "dispatching the notification call."]
                    #[doc = ""]
                    #[doc = "\\[ id, pallet index, call index \\]"]
                    NotifyDispatchError(
                        ::core::primitive::u64,
                        ::core::primitive::u8,
                        ::core::primitive::u8,
                    ),
                    #[codec(index = 7)]
                    #[doc = "Query response has been received and query is removed. The dispatch was unable to be"]
                    #[doc = "decoded into a `Call`; this might be due to dispatch function having a signature which"]
                    #[doc = "is not `(origin, QueryId, Response)`."]
                    #[doc = ""]
                    #[doc = "\\[ id, pallet index, call index \\]"]
                    NotifyDecodeFailed(
                        ::core::primitive::u64,
                        ::core::primitive::u8,
                        ::core::primitive::u8,
                    ),
                    #[codec(index = 8)]
                    #[doc = "Expected query response has been received but the origin location of the response does"]
                    #[doc = "not match that expected. The query remains registered for a later, valid, response to"]
                    #[doc = "be received and acted upon."]
                    #[doc = ""]
                    #[doc = "\\[ origin location, id, expected location \\]"]
                    InvalidResponder(
                        runtime_types::xcm::v1::multilocation::MultiLocation,
                        ::core::primitive::u64,
                        ::core::option::Option<
                            runtime_types::xcm::v1::multilocation::MultiLocation,
                        >,
                    ),
                    #[codec(index = 9)]
                    #[doc = "Expected query response has been received but the expected origin location placed in"]
                    #[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
                    #[doc = ""]
                    #[doc = "This is unexpected (since a location placed in storage in a previously executing"]
                    #[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
                    #[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
                    #[doc = "needed."]
                    #[doc = ""]
                    #[doc = "\\[ origin location, id \\]"]
                    InvalidResponderVersion(
                        runtime_types::xcm::v1::multilocation::MultiLocation,
                        ::core::primitive::u64,
                    ),
                    #[codec(index = 10)]
                    #[doc = "Received query response has been read and removed."]
                    #[doc = ""]
                    #[doc = "\\[ id \\]"]
                    ResponseTaken(::core::primitive::u64),
                    #[codec(index = 11)]
                    #[doc = "Some assets have been placed in an asset trap."]
                    #[doc = ""]
                    #[doc = "\\[ hash, origin, assets \\]"]
                    AssetsTrapped(
                        subxt::ext::sp_core::H256,
                        runtime_types::xcm::v1::multilocation::MultiLocation,
                        runtime_types::xcm::VersionedMultiAssets,
                    ),
                    #[codec(index = 12)]
                    #[doc = "An XCM version change notification message has been attempted to be sent."]
                    #[doc = ""]
                    #[doc = "\\[ destination, result \\]"]
                    VersionChangeNotified(
                        runtime_types::xcm::v1::multilocation::MultiLocation,
                        ::core::primitive::u32,
                    ),
                    #[codec(index = 13)]
                    #[doc = "The supported version of a location has been changed. This might be through an"]
                    #[doc = "automatic notification or a manual intervention."]
                    #[doc = ""]
                    #[doc = "\\[ location, XCM version \\]"]
                    SupportedVersionChanged(
                        runtime_types::xcm::v1::multilocation::MultiLocation,
                        ::core::primitive::u32,
                    ),
                    #[codec(index = 14)]
                    #[doc = "A given location which had a version change subscription was dropped owing to an error"]
                    #[doc = "sending the notification to it."]
                    #[doc = ""]
                    #[doc = "\\[ location, query ID, error \\]"]
                    NotifyTargetSendFail(
                        runtime_types::xcm::v1::multilocation::MultiLocation,
                        ::core::primitive::u64,
                        runtime_types::xcm::v2::traits::Error,
                    ),
                    #[codec(index = 15)]
                    #[doc = "A given location which had a version change subscription was dropped owing to an error"]
                    #[doc = "migrating the location to our new XCM format."]
                    #[doc = ""]
                    #[doc = "\\[ location, query ID \\]"]
                    NotifyTargetMigrationFail(
                        runtime_types::xcm::VersionedMultiLocation,
                        ::core::primitive::u64,
                    ),
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum Origin {
                    #[codec(index = 0)]
                    Xcm(runtime_types::xcm::v1::multilocation::MultiLocation),
                    #[codec(index = 1)]
                    Response(runtime_types::xcm::v1::multilocation::MultiLocation),
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum QueryStatus<_0> {
                    #[codec(index = 0)]
                    Pending {
                        responder: runtime_types::xcm::VersionedMultiLocation,
                        maybe_notify:
                            ::core::option::Option<(::core::primitive::u8, ::core::primitive::u8)>,
                        timeout: _0,
                    },
                    #[codec(index = 1)]
                    VersionNotifier {
                        origin: runtime_types::xcm::VersionedMultiLocation,
                        is_active: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    Ready {
                        response: runtime_types::xcm::VersionedResponse,
                        at: _0,
                    },
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum VersionMigrationStage {
                    #[codec(index = 0)]
                    MigrateSupportedVersion,
                    #[codec(index = 1)]
                    MigrateVersionNotifiers,
                    #[codec(index = 2)]
                    NotifyCurrentTargets(
                        ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                    ),
                    #[codec(index = 3)]
                    MigrateAndNotifyOldTargets,
                }
            }
        }
        pub mod parachain_info {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {}
            }
        }
        pub mod polkadot_core_primitives {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct InboundDownwardMessage<_0> {
                pub sent_at: _0,
                pub msg: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct InboundHrmpMessage<_0> {
                pub sent_at: _0,
                pub data: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct OutboundHrmpMessage<_0> {
                pub recipient: _0,
                pub data: ::std::vec::Vec<::core::primitive::u8>,
            }
        }
        pub mod polkadot_parachain {
            use super::runtime_types;
            pub mod primitives {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct HeadData(pub ::std::vec::Vec<::core::primitive::u8>);
                #[derive(
                    Debug,
                    subxt :: ext :: codec :: CompactAs,
                    subxt :: ext :: codec :: Decode,
                    subxt :: ext :: codec :: Encode,
                )]
                pub struct Id(pub ::core::primitive::u32);
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum XcmpMessageFormat {
                    #[codec(index = 0)]
                    ConcatenatedVersionedXcm,
                    #[codec(index = 1)]
                    ConcatenatedEncodedBlob,
                    #[codec(index = 2)]
                    Signals,
                }
            }
        }
        pub mod polkadot_primitives {
            use super::runtime_types;
            pub mod v2 {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct AbridgedHostConfiguration {
                    pub max_code_size: ::core::primitive::u32,
                    pub max_head_data_size: ::core::primitive::u32,
                    pub max_upward_queue_count: ::core::primitive::u32,
                    pub max_upward_queue_size: ::core::primitive::u32,
                    pub max_upward_message_size: ::core::primitive::u32,
                    pub max_upward_message_num_per_candidate: ::core::primitive::u32,
                    pub hrmp_max_message_num_per_candidate: ::core::primitive::u32,
                    pub validation_upgrade_cooldown: ::core::primitive::u32,
                    pub validation_upgrade_delay: ::core::primitive::u32,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct AbridgedHrmpChannel {
                    pub max_capacity: ::core::primitive::u32,
                    pub max_total_size: ::core::primitive::u32,
                    pub max_message_size: ::core::primitive::u32,
                    pub msg_count: ::core::primitive::u32,
                    pub total_size: ::core::primitive::u32,
                    pub mqc_head: ::core::option::Option<subxt::ext::sp_core::H256>,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct PersistedValidationData<_0, _1> {
                    pub parent_head: runtime_types::polkadot_parachain::primitives::HeadData,
                    pub relay_parent_number: _1,
                    pub relay_parent_storage_root: _0,
                    pub max_pov_size: _1,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum UpgradeRestriction {
                    #[codec(index = 0)]
                    Present,
                }
            }
        }
        pub mod primitive_types {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct H256(pub [::core::primitive::u8; 32usize]);
        }
        pub mod primitives {
            use super::runtime_types;
            pub mod currency {
                use super::runtime_types;
                #[derive(
                    Debug,
                    subxt :: ext :: codec :: CompactAs,
                    subxt :: ext :: codec :: Decode,
                    subxt :: ext :: codec :: Encode,
                )]
                pub struct CurrencyId(pub ::core::primitive::u128);
            }
        }
        pub mod sp_arithmetic {
            use super::runtime_types;
            pub mod fixed_point {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct FixedI128(pub ::core::primitive::i128);
                #[derive(
                    Debug,
                    subxt :: ext :: codec :: CompactAs,
                    subxt :: ext :: codec :: Decode,
                    subxt :: ext :: codec :: Encode,
                )]
                pub struct FixedU128(pub ::core::primitive::u128);
                #[derive(
                    Debug,
                    subxt :: ext :: codec :: CompactAs,
                    subxt :: ext :: codec :: Decode,
                    subxt :: ext :: codec :: Encode,
                )]
                pub struct FixedU64(pub ::core::primitive::u64);
            }
            pub mod per_things {
                use super::runtime_types;
                #[derive(
                    Debug,
                    subxt :: ext :: codec :: CompactAs,
                    subxt :: ext :: codec :: Decode,
                    subxt :: ext :: codec :: Encode,
                )]
                pub struct Perbill(pub ::core::primitive::u32);
                #[derive(
                    Debug,
                    subxt :: ext :: codec :: CompactAs,
                    subxt :: ext :: codec :: Decode,
                    subxt :: ext :: codec :: Encode,
                )]
                pub struct Percent(pub ::core::primitive::u8);
                #[derive(
                    Debug,
                    subxt :: ext :: codec :: CompactAs,
                    subxt :: ext :: codec :: Decode,
                    subxt :: ext :: codec :: Encode,
                )]
                pub struct Permill(pub ::core::primitive::u32);
                #[derive(
                    Debug,
                    subxt :: ext :: codec :: CompactAs,
                    subxt :: ext :: codec :: Decode,
                    subxt :: ext :: codec :: Encode,
                )]
                pub struct Perquintill(pub ::core::primitive::u64);
            }
        }
        pub mod sp_consensus_aura {
            use super::runtime_types;
            pub mod sr25519 {
                use super::runtime_types;
                pub mod app_sr25519 {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct Public(pub runtime_types::sp_core::sr25519::Public);
                }
            }
        }
        pub mod sp_consensus_slots {
            use super::runtime_types;
            #[derive(
                Debug,
                subxt :: ext :: codec :: CompactAs,
                subxt :: ext :: codec :: Decode,
                subxt :: ext :: codec :: Encode,
            )]
            pub struct Slot(pub ::core::primitive::u64);
        }
        pub mod sp_core {
            use super::runtime_types;
            pub mod crypto {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct AccountId32(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct KeyTypeId(pub [::core::primitive::u8; 4usize]);
            }
            pub mod ecdsa {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Signature(pub [::core::primitive::u8; 65usize]);
            }
            pub mod ed25519 {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            pub mod sr25519 {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Public(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum Void {}
        }
        pub mod sp_runtime {
            use super::runtime_types;
            pub mod bounded {
                use super::runtime_types;
                pub mod bounded_btree_map {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct BoundedBTreeMap<_0, _1>(pub subxt::utils::KeyedVec<_0, _1>);
                }
                pub mod bounded_vec {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct BoundedVec<_0>(pub ::std::vec::Vec<_0>);
                }
                pub mod weak_bounded_vec {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct WeakBoundedVec<_0>(pub ::std::vec::Vec<_0>);
                }
            }
            pub mod generic {
                use super::runtime_types;
                pub mod digest {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct Digest {
                        pub logs:
                            ::std::vec::Vec<runtime_types::sp_runtime::generic::digest::DigestItem>,
                    }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum DigestItem {
                        #[codec(index = 6)]
                        PreRuntime(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 4)]
                        Consensus(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 5)]
                        Seal(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 0)]
                        Other(::std::vec::Vec<::core::primitive::u8>),
                        #[codec(index = 8)]
                        RuntimeEnvironmentUpdated,
                    }
                }
                pub mod era {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum Era {
                        #[codec(index = 0)]
                        Immortal,
                        #[codec(index = 1)]
                        Mortal1(::core::primitive::u8),
                        #[codec(index = 2)]
                        Mortal2(::core::primitive::u8),
                        #[codec(index = 3)]
                        Mortal3(::core::primitive::u8),
                        #[codec(index = 4)]
                        Mortal4(::core::primitive::u8),
                        #[codec(index = 5)]
                        Mortal5(::core::primitive::u8),
                        #[codec(index = 6)]
                        Mortal6(::core::primitive::u8),
                        #[codec(index = 7)]
                        Mortal7(::core::primitive::u8),
                        #[codec(index = 8)]
                        Mortal8(::core::primitive::u8),
                        #[codec(index = 9)]
                        Mortal9(::core::primitive::u8),
                        #[codec(index = 10)]
                        Mortal10(::core::primitive::u8),
                        #[codec(index = 11)]
                        Mortal11(::core::primitive::u8),
                        #[codec(index = 12)]
                        Mortal12(::core::primitive::u8),
                        #[codec(index = 13)]
                        Mortal13(::core::primitive::u8),
                        #[codec(index = 14)]
                        Mortal14(::core::primitive::u8),
                        #[codec(index = 15)]
                        Mortal15(::core::primitive::u8),
                        #[codec(index = 16)]
                        Mortal16(::core::primitive::u8),
                        #[codec(index = 17)]
                        Mortal17(::core::primitive::u8),
                        #[codec(index = 18)]
                        Mortal18(::core::primitive::u8),
                        #[codec(index = 19)]
                        Mortal19(::core::primitive::u8),
                        #[codec(index = 20)]
                        Mortal20(::core::primitive::u8),
                        #[codec(index = 21)]
                        Mortal21(::core::primitive::u8),
                        #[codec(index = 22)]
                        Mortal22(::core::primitive::u8),
                        #[codec(index = 23)]
                        Mortal23(::core::primitive::u8),
                        #[codec(index = 24)]
                        Mortal24(::core::primitive::u8),
                        #[codec(index = 25)]
                        Mortal25(::core::primitive::u8),
                        #[codec(index = 26)]
                        Mortal26(::core::primitive::u8),
                        #[codec(index = 27)]
                        Mortal27(::core::primitive::u8),
                        #[codec(index = 28)]
                        Mortal28(::core::primitive::u8),
                        #[codec(index = 29)]
                        Mortal29(::core::primitive::u8),
                        #[codec(index = 30)]
                        Mortal30(::core::primitive::u8),
                        #[codec(index = 31)]
                        Mortal31(::core::primitive::u8),
                        #[codec(index = 32)]
                        Mortal32(::core::primitive::u8),
                        #[codec(index = 33)]
                        Mortal33(::core::primitive::u8),
                        #[codec(index = 34)]
                        Mortal34(::core::primitive::u8),
                        #[codec(index = 35)]
                        Mortal35(::core::primitive::u8),
                        #[codec(index = 36)]
                        Mortal36(::core::primitive::u8),
                        #[codec(index = 37)]
                        Mortal37(::core::primitive::u8),
                        #[codec(index = 38)]
                        Mortal38(::core::primitive::u8),
                        #[codec(index = 39)]
                        Mortal39(::core::primitive::u8),
                        #[codec(index = 40)]
                        Mortal40(::core::primitive::u8),
                        #[codec(index = 41)]
                        Mortal41(::core::primitive::u8),
                        #[codec(index = 42)]
                        Mortal42(::core::primitive::u8),
                        #[codec(index = 43)]
                        Mortal43(::core::primitive::u8),
                        #[codec(index = 44)]
                        Mortal44(::core::primitive::u8),
                        #[codec(index = 45)]
                        Mortal45(::core::primitive::u8),
                        #[codec(index = 46)]
                        Mortal46(::core::primitive::u8),
                        #[codec(index = 47)]
                        Mortal47(::core::primitive::u8),
                        #[codec(index = 48)]
                        Mortal48(::core::primitive::u8),
                        #[codec(index = 49)]
                        Mortal49(::core::primitive::u8),
                        #[codec(index = 50)]
                        Mortal50(::core::primitive::u8),
                        #[codec(index = 51)]
                        Mortal51(::core::primitive::u8),
                        #[codec(index = 52)]
                        Mortal52(::core::primitive::u8),
                        #[codec(index = 53)]
                        Mortal53(::core::primitive::u8),
                        #[codec(index = 54)]
                        Mortal54(::core::primitive::u8),
                        #[codec(index = 55)]
                        Mortal55(::core::primitive::u8),
                        #[codec(index = 56)]
                        Mortal56(::core::primitive::u8),
                        #[codec(index = 57)]
                        Mortal57(::core::primitive::u8),
                        #[codec(index = 58)]
                        Mortal58(::core::primitive::u8),
                        #[codec(index = 59)]
                        Mortal59(::core::primitive::u8),
                        #[codec(index = 60)]
                        Mortal60(::core::primitive::u8),
                        #[codec(index = 61)]
                        Mortal61(::core::primitive::u8),
                        #[codec(index = 62)]
                        Mortal62(::core::primitive::u8),
                        #[codec(index = 63)]
                        Mortal63(::core::primitive::u8),
                        #[codec(index = 64)]
                        Mortal64(::core::primitive::u8),
                        #[codec(index = 65)]
                        Mortal65(::core::primitive::u8),
                        #[codec(index = 66)]
                        Mortal66(::core::primitive::u8),
                        #[codec(index = 67)]
                        Mortal67(::core::primitive::u8),
                        #[codec(index = 68)]
                        Mortal68(::core::primitive::u8),
                        #[codec(index = 69)]
                        Mortal69(::core::primitive::u8),
                        #[codec(index = 70)]
                        Mortal70(::core::primitive::u8),
                        #[codec(index = 71)]
                        Mortal71(::core::primitive::u8),
                        #[codec(index = 72)]
                        Mortal72(::core::primitive::u8),
                        #[codec(index = 73)]
                        Mortal73(::core::primitive::u8),
                        #[codec(index = 74)]
                        Mortal74(::core::primitive::u8),
                        #[codec(index = 75)]
                        Mortal75(::core::primitive::u8),
                        #[codec(index = 76)]
                        Mortal76(::core::primitive::u8),
                        #[codec(index = 77)]
                        Mortal77(::core::primitive::u8),
                        #[codec(index = 78)]
                        Mortal78(::core::primitive::u8),
                        #[codec(index = 79)]
                        Mortal79(::core::primitive::u8),
                        #[codec(index = 80)]
                        Mortal80(::core::primitive::u8),
                        #[codec(index = 81)]
                        Mortal81(::core::primitive::u8),
                        #[codec(index = 82)]
                        Mortal82(::core::primitive::u8),
                        #[codec(index = 83)]
                        Mortal83(::core::primitive::u8),
                        #[codec(index = 84)]
                        Mortal84(::core::primitive::u8),
                        #[codec(index = 85)]
                        Mortal85(::core::primitive::u8),
                        #[codec(index = 86)]
                        Mortal86(::core::primitive::u8),
                        #[codec(index = 87)]
                        Mortal87(::core::primitive::u8),
                        #[codec(index = 88)]
                        Mortal88(::core::primitive::u8),
                        #[codec(index = 89)]
                        Mortal89(::core::primitive::u8),
                        #[codec(index = 90)]
                        Mortal90(::core::primitive::u8),
                        #[codec(index = 91)]
                        Mortal91(::core::primitive::u8),
                        #[codec(index = 92)]
                        Mortal92(::core::primitive::u8),
                        #[codec(index = 93)]
                        Mortal93(::core::primitive::u8),
                        #[codec(index = 94)]
                        Mortal94(::core::primitive::u8),
                        #[codec(index = 95)]
                        Mortal95(::core::primitive::u8),
                        #[codec(index = 96)]
                        Mortal96(::core::primitive::u8),
                        #[codec(index = 97)]
                        Mortal97(::core::primitive::u8),
                        #[codec(index = 98)]
                        Mortal98(::core::primitive::u8),
                        #[codec(index = 99)]
                        Mortal99(::core::primitive::u8),
                        #[codec(index = 100)]
                        Mortal100(::core::primitive::u8),
                        #[codec(index = 101)]
                        Mortal101(::core::primitive::u8),
                        #[codec(index = 102)]
                        Mortal102(::core::primitive::u8),
                        #[codec(index = 103)]
                        Mortal103(::core::primitive::u8),
                        #[codec(index = 104)]
                        Mortal104(::core::primitive::u8),
                        #[codec(index = 105)]
                        Mortal105(::core::primitive::u8),
                        #[codec(index = 106)]
                        Mortal106(::core::primitive::u8),
                        #[codec(index = 107)]
                        Mortal107(::core::primitive::u8),
                        #[codec(index = 108)]
                        Mortal108(::core::primitive::u8),
                        #[codec(index = 109)]
                        Mortal109(::core::primitive::u8),
                        #[codec(index = 110)]
                        Mortal110(::core::primitive::u8),
                        #[codec(index = 111)]
                        Mortal111(::core::primitive::u8),
                        #[codec(index = 112)]
                        Mortal112(::core::primitive::u8),
                        #[codec(index = 113)]
                        Mortal113(::core::primitive::u8),
                        #[codec(index = 114)]
                        Mortal114(::core::primitive::u8),
                        #[codec(index = 115)]
                        Mortal115(::core::primitive::u8),
                        #[codec(index = 116)]
                        Mortal116(::core::primitive::u8),
                        #[codec(index = 117)]
                        Mortal117(::core::primitive::u8),
                        #[codec(index = 118)]
                        Mortal118(::core::primitive::u8),
                        #[codec(index = 119)]
                        Mortal119(::core::primitive::u8),
                        #[codec(index = 120)]
                        Mortal120(::core::primitive::u8),
                        #[codec(index = 121)]
                        Mortal121(::core::primitive::u8),
                        #[codec(index = 122)]
                        Mortal122(::core::primitive::u8),
                        #[codec(index = 123)]
                        Mortal123(::core::primitive::u8),
                        #[codec(index = 124)]
                        Mortal124(::core::primitive::u8),
                        #[codec(index = 125)]
                        Mortal125(::core::primitive::u8),
                        #[codec(index = 126)]
                        Mortal126(::core::primitive::u8),
                        #[codec(index = 127)]
                        Mortal127(::core::primitive::u8),
                        #[codec(index = 128)]
                        Mortal128(::core::primitive::u8),
                        #[codec(index = 129)]
                        Mortal129(::core::primitive::u8),
                        #[codec(index = 130)]
                        Mortal130(::core::primitive::u8),
                        #[codec(index = 131)]
                        Mortal131(::core::primitive::u8),
                        #[codec(index = 132)]
                        Mortal132(::core::primitive::u8),
                        #[codec(index = 133)]
                        Mortal133(::core::primitive::u8),
                        #[codec(index = 134)]
                        Mortal134(::core::primitive::u8),
                        #[codec(index = 135)]
                        Mortal135(::core::primitive::u8),
                        #[codec(index = 136)]
                        Mortal136(::core::primitive::u8),
                        #[codec(index = 137)]
                        Mortal137(::core::primitive::u8),
                        #[codec(index = 138)]
                        Mortal138(::core::primitive::u8),
                        #[codec(index = 139)]
                        Mortal139(::core::primitive::u8),
                        #[codec(index = 140)]
                        Mortal140(::core::primitive::u8),
                        #[codec(index = 141)]
                        Mortal141(::core::primitive::u8),
                        #[codec(index = 142)]
                        Mortal142(::core::primitive::u8),
                        #[codec(index = 143)]
                        Mortal143(::core::primitive::u8),
                        #[codec(index = 144)]
                        Mortal144(::core::primitive::u8),
                        #[codec(index = 145)]
                        Mortal145(::core::primitive::u8),
                        #[codec(index = 146)]
                        Mortal146(::core::primitive::u8),
                        #[codec(index = 147)]
                        Mortal147(::core::primitive::u8),
                        #[codec(index = 148)]
                        Mortal148(::core::primitive::u8),
                        #[codec(index = 149)]
                        Mortal149(::core::primitive::u8),
                        #[codec(index = 150)]
                        Mortal150(::core::primitive::u8),
                        #[codec(index = 151)]
                        Mortal151(::core::primitive::u8),
                        #[codec(index = 152)]
                        Mortal152(::core::primitive::u8),
                        #[codec(index = 153)]
                        Mortal153(::core::primitive::u8),
                        #[codec(index = 154)]
                        Mortal154(::core::primitive::u8),
                        #[codec(index = 155)]
                        Mortal155(::core::primitive::u8),
                        #[codec(index = 156)]
                        Mortal156(::core::primitive::u8),
                        #[codec(index = 157)]
                        Mortal157(::core::primitive::u8),
                        #[codec(index = 158)]
                        Mortal158(::core::primitive::u8),
                        #[codec(index = 159)]
                        Mortal159(::core::primitive::u8),
                        #[codec(index = 160)]
                        Mortal160(::core::primitive::u8),
                        #[codec(index = 161)]
                        Mortal161(::core::primitive::u8),
                        #[codec(index = 162)]
                        Mortal162(::core::primitive::u8),
                        #[codec(index = 163)]
                        Mortal163(::core::primitive::u8),
                        #[codec(index = 164)]
                        Mortal164(::core::primitive::u8),
                        #[codec(index = 165)]
                        Mortal165(::core::primitive::u8),
                        #[codec(index = 166)]
                        Mortal166(::core::primitive::u8),
                        #[codec(index = 167)]
                        Mortal167(::core::primitive::u8),
                        #[codec(index = 168)]
                        Mortal168(::core::primitive::u8),
                        #[codec(index = 169)]
                        Mortal169(::core::primitive::u8),
                        #[codec(index = 170)]
                        Mortal170(::core::primitive::u8),
                        #[codec(index = 171)]
                        Mortal171(::core::primitive::u8),
                        #[codec(index = 172)]
                        Mortal172(::core::primitive::u8),
                        #[codec(index = 173)]
                        Mortal173(::core::primitive::u8),
                        #[codec(index = 174)]
                        Mortal174(::core::primitive::u8),
                        #[codec(index = 175)]
                        Mortal175(::core::primitive::u8),
                        #[codec(index = 176)]
                        Mortal176(::core::primitive::u8),
                        #[codec(index = 177)]
                        Mortal177(::core::primitive::u8),
                        #[codec(index = 178)]
                        Mortal178(::core::primitive::u8),
                        #[codec(index = 179)]
                        Mortal179(::core::primitive::u8),
                        #[codec(index = 180)]
                        Mortal180(::core::primitive::u8),
                        #[codec(index = 181)]
                        Mortal181(::core::primitive::u8),
                        #[codec(index = 182)]
                        Mortal182(::core::primitive::u8),
                        #[codec(index = 183)]
                        Mortal183(::core::primitive::u8),
                        #[codec(index = 184)]
                        Mortal184(::core::primitive::u8),
                        #[codec(index = 185)]
                        Mortal185(::core::primitive::u8),
                        #[codec(index = 186)]
                        Mortal186(::core::primitive::u8),
                        #[codec(index = 187)]
                        Mortal187(::core::primitive::u8),
                        #[codec(index = 188)]
                        Mortal188(::core::primitive::u8),
                        #[codec(index = 189)]
                        Mortal189(::core::primitive::u8),
                        #[codec(index = 190)]
                        Mortal190(::core::primitive::u8),
                        #[codec(index = 191)]
                        Mortal191(::core::primitive::u8),
                        #[codec(index = 192)]
                        Mortal192(::core::primitive::u8),
                        #[codec(index = 193)]
                        Mortal193(::core::primitive::u8),
                        #[codec(index = 194)]
                        Mortal194(::core::primitive::u8),
                        #[codec(index = 195)]
                        Mortal195(::core::primitive::u8),
                        #[codec(index = 196)]
                        Mortal196(::core::primitive::u8),
                        #[codec(index = 197)]
                        Mortal197(::core::primitive::u8),
                        #[codec(index = 198)]
                        Mortal198(::core::primitive::u8),
                        #[codec(index = 199)]
                        Mortal199(::core::primitive::u8),
                        #[codec(index = 200)]
                        Mortal200(::core::primitive::u8),
                        #[codec(index = 201)]
                        Mortal201(::core::primitive::u8),
                        #[codec(index = 202)]
                        Mortal202(::core::primitive::u8),
                        #[codec(index = 203)]
                        Mortal203(::core::primitive::u8),
                        #[codec(index = 204)]
                        Mortal204(::core::primitive::u8),
                        #[codec(index = 205)]
                        Mortal205(::core::primitive::u8),
                        #[codec(index = 206)]
                        Mortal206(::core::primitive::u8),
                        #[codec(index = 207)]
                        Mortal207(::core::primitive::u8),
                        #[codec(index = 208)]
                        Mortal208(::core::primitive::u8),
                        #[codec(index = 209)]
                        Mortal209(::core::primitive::u8),
                        #[codec(index = 210)]
                        Mortal210(::core::primitive::u8),
                        #[codec(index = 211)]
                        Mortal211(::core::primitive::u8),
                        #[codec(index = 212)]
                        Mortal212(::core::primitive::u8),
                        #[codec(index = 213)]
                        Mortal213(::core::primitive::u8),
                        #[codec(index = 214)]
                        Mortal214(::core::primitive::u8),
                        #[codec(index = 215)]
                        Mortal215(::core::primitive::u8),
                        #[codec(index = 216)]
                        Mortal216(::core::primitive::u8),
                        #[codec(index = 217)]
                        Mortal217(::core::primitive::u8),
                        #[codec(index = 218)]
                        Mortal218(::core::primitive::u8),
                        #[codec(index = 219)]
                        Mortal219(::core::primitive::u8),
                        #[codec(index = 220)]
                        Mortal220(::core::primitive::u8),
                        #[codec(index = 221)]
                        Mortal221(::core::primitive::u8),
                        #[codec(index = 222)]
                        Mortal222(::core::primitive::u8),
                        #[codec(index = 223)]
                        Mortal223(::core::primitive::u8),
                        #[codec(index = 224)]
                        Mortal224(::core::primitive::u8),
                        #[codec(index = 225)]
                        Mortal225(::core::primitive::u8),
                        #[codec(index = 226)]
                        Mortal226(::core::primitive::u8),
                        #[codec(index = 227)]
                        Mortal227(::core::primitive::u8),
                        #[codec(index = 228)]
                        Mortal228(::core::primitive::u8),
                        #[codec(index = 229)]
                        Mortal229(::core::primitive::u8),
                        #[codec(index = 230)]
                        Mortal230(::core::primitive::u8),
                        #[codec(index = 231)]
                        Mortal231(::core::primitive::u8),
                        #[codec(index = 232)]
                        Mortal232(::core::primitive::u8),
                        #[codec(index = 233)]
                        Mortal233(::core::primitive::u8),
                        #[codec(index = 234)]
                        Mortal234(::core::primitive::u8),
                        #[codec(index = 235)]
                        Mortal235(::core::primitive::u8),
                        #[codec(index = 236)]
                        Mortal236(::core::primitive::u8),
                        #[codec(index = 237)]
                        Mortal237(::core::primitive::u8),
                        #[codec(index = 238)]
                        Mortal238(::core::primitive::u8),
                        #[codec(index = 239)]
                        Mortal239(::core::primitive::u8),
                        #[codec(index = 240)]
                        Mortal240(::core::primitive::u8),
                        #[codec(index = 241)]
                        Mortal241(::core::primitive::u8),
                        #[codec(index = 242)]
                        Mortal242(::core::primitive::u8),
                        #[codec(index = 243)]
                        Mortal243(::core::primitive::u8),
                        #[codec(index = 244)]
                        Mortal244(::core::primitive::u8),
                        #[codec(index = 245)]
                        Mortal245(::core::primitive::u8),
                        #[codec(index = 246)]
                        Mortal246(::core::primitive::u8),
                        #[codec(index = 247)]
                        Mortal247(::core::primitive::u8),
                        #[codec(index = 248)]
                        Mortal248(::core::primitive::u8),
                        #[codec(index = 249)]
                        Mortal249(::core::primitive::u8),
                        #[codec(index = 250)]
                        Mortal250(::core::primitive::u8),
                        #[codec(index = 251)]
                        Mortal251(::core::primitive::u8),
                        #[codec(index = 252)]
                        Mortal252(::core::primitive::u8),
                        #[codec(index = 253)]
                        Mortal253(::core::primitive::u8),
                        #[codec(index = 254)]
                        Mortal254(::core::primitive::u8),
                        #[codec(index = 255)]
                        Mortal255(::core::primitive::u8),
                    }
                }
                pub mod header {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct Header<_0, _1> {
                        pub parent_hash: subxt::ext::sp_core::H256,
                        #[codec(compact)]
                        pub number: _0,
                        pub state_root: subxt::ext::sp_core::H256,
                        pub extrinsics_root: subxt::ext::sp_core::H256,
                        pub digest: runtime_types::sp_runtime::generic::digest::Digest,
                        #[codec(skip)]
                        pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
                    }
                }
                pub mod unchecked_extrinsic {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct UncheckedExtrinsic<_0, _1, _2, _3>(
                        pub ::std::vec::Vec<::core::primitive::u8>,
                        #[codec(skip)] pub ::core::marker::PhantomData<(_1, _0, _2, _3)>,
                    );
                }
            }
            pub mod multiaddress {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum MultiAddress<_0, _1> {
                    #[codec(index = 0)]
                    Id(_0),
                    #[codec(index = 1)]
                    Index(#[codec(compact)] _1),
                    #[codec(index = 2)]
                    Raw(::std::vec::Vec<::core::primitive::u8>),
                    #[codec(index = 3)]
                    Address32([::core::primitive::u8; 32usize]),
                    #[codec(index = 4)]
                    Address20([::core::primitive::u8; 20usize]),
                }
            }
            pub mod traits {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct BlakeTwo256;
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum ArithmeticError {
                #[codec(index = 0)]
                Underflow,
                #[codec(index = 1)]
                Overflow,
                #[codec(index = 2)]
                DivisionByZero,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum DispatchError {
                #[codec(index = 0)]
                Other,
                #[codec(index = 1)]
                CannotLookup,
                #[codec(index = 2)]
                BadOrigin,
                #[codec(index = 3)]
                Module(runtime_types::sp_runtime::ModuleError),
                #[codec(index = 4)]
                ConsumerRemaining,
                #[codec(index = 5)]
                NoProviders,
                #[codec(index = 6)]
                TooManyConsumers,
                #[codec(index = 7)]
                Token(runtime_types::sp_runtime::TokenError),
                #[codec(index = 8)]
                Arithmetic(runtime_types::sp_runtime::ArithmeticError),
                #[codec(index = 9)]
                Transactional(runtime_types::sp_runtime::TransactionalError),
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct ModuleError {
                pub index: ::core::primitive::u8,
                pub error: [::core::primitive::u8; 4usize],
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum MultiSignature {
                #[codec(index = 0)]
                Ed25519(runtime_types::sp_core::ed25519::Signature),
                #[codec(index = 1)]
                Sr25519(runtime_types::sp_core::sr25519::Signature),
                #[codec(index = 2)]
                Ecdsa(runtime_types::sp_core::ecdsa::Signature),
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum TokenError {
                #[codec(index = 0)]
                NoFunds,
                #[codec(index = 1)]
                WouldDie,
                #[codec(index = 2)]
                BelowMinimum,
                #[codec(index = 3)]
                CannotCreate,
                #[codec(index = 4)]
                UnknownAsset,
                #[codec(index = 5)]
                Frozen,
                #[codec(index = 6)]
                Unsupported,
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum TransactionalError {
                #[codec(index = 0)]
                LimitReached,
                #[codec(index = 1)]
                NoLayer,
            }
        }
        pub mod sp_trie {
            use super::runtime_types;
            pub mod storage_proof {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct StorageProof {
                    pub trie_nodes: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                }
            }
        }
        pub mod sp_version {
            use super::runtime_types;
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub struct RuntimeVersion {
                pub spec_name: ::std::string::String,
                pub impl_name: ::std::string::String,
                pub authoring_version: ::core::primitive::u32,
                pub spec_version: ::core::primitive::u32,
                pub impl_version: ::core::primitive::u32,
                pub apis:
                    ::std::vec::Vec<([::core::primitive::u8; 8usize], ::core::primitive::u32)>,
                pub transaction_version: ::core::primitive::u32,
                pub state_version: ::core::primitive::u8,
            }
        }
        pub mod xcm {
            use super::runtime_types;
            pub mod double_encoded {
                use super::runtime_types;
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct DoubleEncoded {
                    pub encoded: ::std::vec::Vec<::core::primitive::u8>,
                }
            }
            pub mod v0 {
                use super::runtime_types;
                pub mod junction {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum BodyId {
                        #[codec(index = 0)]
                        Unit,
                        #[codec(index = 1)]
                        Named(
                            runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<
                                ::core::primitive::u8,
                            >,
                        ),
                        #[codec(index = 2)]
                        Index(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 3)]
                        Executive,
                        #[codec(index = 4)]
                        Technical,
                        #[codec(index = 5)]
                        Legislative,
                        #[codec(index = 6)]
                        Judicial,
                    }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum BodyPart {
                        #[codec(index = 0)]
                        Voice,
                        #[codec(index = 1)]
                        Members {
                            #[codec(compact)]
                            count: ::core::primitive::u32,
                        },
                        #[codec(index = 2)]
                        Fraction {
                            #[codec(compact)]
                            nom: ::core::primitive::u32,
                            #[codec(compact)]
                            denom: ::core::primitive::u32,
                        },
                        #[codec(index = 3)]
                        AtLeastProportion {
                            #[codec(compact)]
                            nom: ::core::primitive::u32,
                            #[codec(compact)]
                            denom: ::core::primitive::u32,
                        },
                        #[codec(index = 4)]
                        MoreThanProportion {
                            #[codec(compact)]
                            nom: ::core::primitive::u32,
                            #[codec(compact)]
                            denom: ::core::primitive::u32,
                        },
                    }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum Junction {
                        #[codec(index = 0)]
                        Parent,
                        #[codec(index = 1)]
                        Parachain(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 2)]
                        AccountId32 {
                            network: runtime_types::xcm::v0::junction::NetworkId,
                            id: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 3)]
                        AccountIndex64 {
                            network: runtime_types::xcm::v0::junction::NetworkId,
                            #[codec(compact)]
                            index: ::core::primitive::u64,
                        },
                        #[codec(index = 4)]
                        AccountKey20 {
                            network: runtime_types::xcm::v0::junction::NetworkId,
                            key: [::core::primitive::u8; 20usize],
                        },
                        #[codec(index = 5)]
                        PalletInstance(::core::primitive::u8),
                        #[codec(index = 6)]
                        GeneralIndex(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 7)]
                        GeneralKey(
                            runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<
                                ::core::primitive::u8,
                            >,
                        ),
                        #[codec(index = 8)]
                        OnlyChild,
                        #[codec(index = 9)]
                        Plurality {
                            id: runtime_types::xcm::v0::junction::BodyId,
                            part: runtime_types::xcm::v0::junction::BodyPart,
                        },
                    }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum NetworkId {
                        #[codec(index = 0)]
                        Any,
                        #[codec(index = 1)]
                        Named(
                            runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<
                                ::core::primitive::u8,
                            >,
                        ),
                        #[codec(index = 2)]
                        Polkadot,
                        #[codec(index = 3)]
                        Kusama,
                    }
                }
                pub mod multi_asset {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum MultiAsset {
                        #[codec(index = 0)]
                        None,
                        #[codec(index = 1)]
                        All,
                        #[codec(index = 2)]
                        AllFungible,
                        #[codec(index = 3)]
                        AllNonFungible,
                        #[codec(index = 4)]
                        AllAbstractFungible {
                            id: ::std::vec::Vec<::core::primitive::u8>,
                        },
                        #[codec(index = 5)]
                        AllAbstractNonFungible {
                            class: ::std::vec::Vec<::core::primitive::u8>,
                        },
                        #[codec(index = 6)]
                        AllConcreteFungible {
                            id: runtime_types::xcm::v0::multi_location::MultiLocation,
                        },
                        #[codec(index = 7)]
                        AllConcreteNonFungible {
                            class: runtime_types::xcm::v0::multi_location::MultiLocation,
                        },
                        #[codec(index = 8)]
                        AbstractFungible {
                            id: ::std::vec::Vec<::core::primitive::u8>,
                            #[codec(compact)]
                            amount: ::core::primitive::u128,
                        },
                        #[codec(index = 9)]
                        AbstractNonFungible {
                            class: ::std::vec::Vec<::core::primitive::u8>,
                            instance: runtime_types::xcm::v1::multiasset::AssetInstance,
                        },
                        #[codec(index = 10)]
                        ConcreteFungible {
                            id: runtime_types::xcm::v0::multi_location::MultiLocation,
                            #[codec(compact)]
                            amount: ::core::primitive::u128,
                        },
                        #[codec(index = 11)]
                        ConcreteNonFungible {
                            class: runtime_types::xcm::v0::multi_location::MultiLocation,
                            instance: runtime_types::xcm::v1::multiasset::AssetInstance,
                        },
                    }
                }
                pub mod multi_location {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum MultiLocation {
                        #[codec(index = 0)]
                        Null,
                        #[codec(index = 1)]
                        X1(runtime_types::xcm::v0::junction::Junction),
                        #[codec(index = 2)]
                        X2(
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                        ),
                        #[codec(index = 3)]
                        X3(
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                        ),
                        #[codec(index = 4)]
                        X4(
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                        ),
                        #[codec(index = 5)]
                        X5(
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                        ),
                        #[codec(index = 6)]
                        X6(
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                        ),
                        #[codec(index = 7)]
                        X7(
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                        ),
                        #[codec(index = 8)]
                        X8(
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                            runtime_types::xcm::v0::junction::Junction,
                        ),
                    }
                }
                pub mod order {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum Order {
                        #[codec(index = 0)]
                        Null,
                        #[codec(index = 1)]
                        DepositAsset {
                            assets:
                                ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
                            dest: runtime_types::xcm::v0::multi_location::MultiLocation,
                        },
                        #[codec(index = 2)]
                        DepositReserveAsset {
                            assets:
                                ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
                            dest: runtime_types::xcm::v0::multi_location::MultiLocation,
                            effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
                        },
                        #[codec(index = 3)]
                        ExchangeAsset {
                            give: ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
                            receive:
                                ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
                        },
                        #[codec(index = 4)]
                        InitiateReserveWithdraw {
                            assets:
                                ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
                            reserve: runtime_types::xcm::v0::multi_location::MultiLocation,
                            effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
                        },
                        #[codec(index = 5)]
                        InitiateTeleport {
                            assets:
                                ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
                            dest: runtime_types::xcm::v0::multi_location::MultiLocation,
                            effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
                        },
                        #[codec(index = 6)]
                        QueryHolding {
                            #[codec(compact)]
                            query_id: ::core::primitive::u64,
                            dest: runtime_types::xcm::v0::multi_location::MultiLocation,
                            assets:
                                ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
                        },
                        #[codec(index = 7)]
                        BuyExecution {
                            fees: runtime_types::xcm::v0::multi_asset::MultiAsset,
                            weight: ::core::primitive::u64,
                            debt: ::core::primitive::u64,
                            halt_on_error: ::core::primitive::bool,
                            xcm: ::std::vec::Vec<runtime_types::xcm::v0::Xcm>,
                        },
                    }
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum OriginKind {
                    #[codec(index = 0)]
                    Native,
                    #[codec(index = 1)]
                    SovereignAccount,
                    #[codec(index = 2)]
                    Superuser,
                    #[codec(index = 3)]
                    Xcm,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum Response {
                    #[codec(index = 0)]
                    Assets(::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>),
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum Xcm {
                    #[codec(index = 0)]
                    WithdrawAsset {
                        assets: ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
                        effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
                    },
                    #[codec(index = 1)]
                    ReserveAssetDeposit {
                        assets: ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
                        effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
                    },
                    #[codec(index = 2)]
                    TeleportAsset {
                        assets: ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
                        effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
                    },
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::xcm::v0::Response,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
                        dest: runtime_types::xcm::v0::multi_location::MultiLocation,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
                        dest: runtime_types::xcm::v0::multi_location::MultiLocation,
                        effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_type: runtime_types::xcm::v0::OriginKind,
                        require_weight_at_most: ::core::primitive::u64,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    RelayedFrom {
                        who: runtime_types::xcm::v0::multi_location::MultiLocation,
                        message: ::std::boxed::Box<runtime_types::xcm::v0::Xcm>,
                    },
                }
            }
            pub mod v1 {
                use super::runtime_types;
                pub mod junction {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum Junction {
                        #[codec(index = 0)]
                        Parachain(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 1)]
                        AccountId32 {
                            network: runtime_types::xcm::v0::junction::NetworkId,
                            id: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        AccountIndex64 {
                            network: runtime_types::xcm::v0::junction::NetworkId,
                            #[codec(compact)]
                            index: ::core::primitive::u64,
                        },
                        #[codec(index = 3)]
                        AccountKey20 {
                            network: runtime_types::xcm::v0::junction::NetworkId,
                            key: [::core::primitive::u8; 20usize],
                        },
                        #[codec(index = 4)]
                        PalletInstance(::core::primitive::u8),
                        #[codec(index = 5)]
                        GeneralIndex(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 6)]
                        GeneralKey(
                            runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<
                                ::core::primitive::u8,
                            >,
                        ),
                        #[codec(index = 7)]
                        OnlyChild,
                        #[codec(index = 8)]
                        Plurality {
                            id: runtime_types::xcm::v0::junction::BodyId,
                            part: runtime_types::xcm::v0::junction::BodyPart,
                        },
                    }
                }
                pub mod multiasset {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum AssetId {
                        #[codec(index = 0)]
                        Concrete(runtime_types::xcm::v1::multilocation::MultiLocation),
                        #[codec(index = 1)]
                        Abstract(::std::vec::Vec<::core::primitive::u8>),
                    }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum AssetInstance {
                        #[codec(index = 0)]
                        Undefined,
                        #[codec(index = 1)]
                        Index(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 2)]
                        Array4([::core::primitive::u8; 4usize]),
                        #[codec(index = 3)]
                        Array8([::core::primitive::u8; 8usize]),
                        #[codec(index = 4)]
                        Array16([::core::primitive::u8; 16usize]),
                        #[codec(index = 5)]
                        Array32([::core::primitive::u8; 32usize]),
                        #[codec(index = 6)]
                        Blob(::std::vec::Vec<::core::primitive::u8>),
                    }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum Fungibility {
                        #[codec(index = 0)]
                        Fungible(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 1)]
                        NonFungible(runtime_types::xcm::v1::multiasset::AssetInstance),
                    }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct MultiAsset {
                        pub id: runtime_types::xcm::v1::multiasset::AssetId,
                        pub fun: runtime_types::xcm::v1::multiasset::Fungibility,
                    }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum MultiAssetFilter {
                        #[codec(index = 0)]
                        Definite(runtime_types::xcm::v1::multiasset::MultiAssets),
                        #[codec(index = 1)]
                        Wild(runtime_types::xcm::v1::multiasset::WildMultiAsset),
                    }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct MultiAssets(
                        pub ::std::vec::Vec<runtime_types::xcm::v1::multiasset::MultiAsset>,
                    );
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum WildFungibility {
                        #[codec(index = 0)]
                        Fungible,
                        #[codec(index = 1)]
                        NonFungible,
                    }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum WildMultiAsset {
                        #[codec(index = 0)]
                        All,
                        #[codec(index = 1)]
                        AllOf {
                            id: runtime_types::xcm::v1::multiasset::AssetId,
                            fun: runtime_types::xcm::v1::multiasset::WildFungibility,
                        },
                    }
                }
                pub mod multilocation {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum Junctions {
                        #[codec(index = 0)]
                        Here,
                        #[codec(index = 1)]
                        X1(runtime_types::xcm::v1::junction::Junction),
                        #[codec(index = 2)]
                        X2(
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                        ),
                        #[codec(index = 3)]
                        X3(
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                        ),
                        #[codec(index = 4)]
                        X4(
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                        ),
                        #[codec(index = 5)]
                        X5(
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                        ),
                        #[codec(index = 6)]
                        X6(
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                        ),
                        #[codec(index = 7)]
                        X7(
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                        ),
                        #[codec(index = 8)]
                        X8(
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                            runtime_types::xcm::v1::junction::Junction,
                        ),
                    }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub struct MultiLocation {
                        pub parents: ::core::primitive::u8,
                        pub interior: runtime_types::xcm::v1::multilocation::Junctions,
                    }
                }
                pub mod order {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum Order {
                        #[codec(index = 0)]
                        Noop,
                        #[codec(index = 1)]
                        DepositAsset {
                            assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
                            max_assets: ::core::primitive::u32,
                            beneficiary: runtime_types::xcm::v1::multilocation::MultiLocation,
                        },
                        #[codec(index = 2)]
                        DepositReserveAsset {
                            assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
                            max_assets: ::core::primitive::u32,
                            dest: runtime_types::xcm::v1::multilocation::MultiLocation,
                            effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
                        },
                        #[codec(index = 3)]
                        ExchangeAsset {
                            give: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
                            receive: runtime_types::xcm::v1::multiasset::MultiAssets,
                        },
                        #[codec(index = 4)]
                        InitiateReserveWithdraw {
                            assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
                            reserve: runtime_types::xcm::v1::multilocation::MultiLocation,
                            effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
                        },
                        #[codec(index = 5)]
                        InitiateTeleport {
                            assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
                            dest: runtime_types::xcm::v1::multilocation::MultiLocation,
                            effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
                        },
                        #[codec(index = 6)]
                        QueryHolding {
                            #[codec(compact)]
                            query_id: ::core::primitive::u64,
                            dest: runtime_types::xcm::v1::multilocation::MultiLocation,
                            assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
                        },
                        #[codec(index = 7)]
                        BuyExecution {
                            fees: runtime_types::xcm::v1::multiasset::MultiAsset,
                            weight: ::core::primitive::u64,
                            debt: ::core::primitive::u64,
                            halt_on_error: ::core::primitive::bool,
                            instructions: ::std::vec::Vec<runtime_types::xcm::v1::Xcm>,
                        },
                    }
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum Response {
                    #[codec(index = 0)]
                    Assets(runtime_types::xcm::v1::multiasset::MultiAssets),
                    #[codec(index = 1)]
                    Version(::core::primitive::u32),
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum Xcm {
                    #[codec(index = 0)]
                    WithdrawAsset {
                        assets: runtime_types::xcm::v1::multiasset::MultiAssets,
                        effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
                    },
                    #[codec(index = 1)]
                    ReserveAssetDeposited {
                        assets: runtime_types::xcm::v1::multiasset::MultiAssets,
                        effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
                    },
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset {
                        assets: runtime_types::xcm::v1::multiasset::MultiAssets,
                        effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
                    },
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::xcm::v1::Response,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::xcm::v1::multiasset::MultiAssets,
                        beneficiary: runtime_types::xcm::v1::multilocation::MultiLocation,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::xcm::v1::multiasset::MultiAssets,
                        dest: runtime_types::xcm::v1::multilocation::MultiLocation,
                        effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_type: runtime_types::xcm::v0::OriginKind,
                        require_weight_at_most: ::core::primitive::u64,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    RelayedFrom {
                        who: runtime_types::xcm::v1::multilocation::Junctions,
                        message: ::std::boxed::Box<runtime_types::xcm::v1::Xcm>,
                    },
                    #[codec(index = 11)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 12)]
                    UnsubscribeVersion,
                }
            }
            pub mod v2 {
                use super::runtime_types;
                pub mod traits {
                    use super::runtime_types;
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum Error {
                        #[codec(index = 0)]
                        Overflow,
                        #[codec(index = 1)]
                        Unimplemented,
                        #[codec(index = 2)]
                        UntrustedReserveLocation,
                        #[codec(index = 3)]
                        UntrustedTeleportLocation,
                        #[codec(index = 4)]
                        MultiLocationFull,
                        #[codec(index = 5)]
                        MultiLocationNotInvertible,
                        #[codec(index = 6)]
                        BadOrigin,
                        #[codec(index = 7)]
                        InvalidLocation,
                        #[codec(index = 8)]
                        AssetNotFound,
                        #[codec(index = 9)]
                        FailedToTransactAsset,
                        #[codec(index = 10)]
                        NotWithdrawable,
                        #[codec(index = 11)]
                        LocationCannotHold,
                        #[codec(index = 12)]
                        ExceedsMaxMessageSize,
                        #[codec(index = 13)]
                        DestinationUnsupported,
                        #[codec(index = 14)]
                        Transport,
                        #[codec(index = 15)]
                        Unroutable,
                        #[codec(index = 16)]
                        UnknownClaim,
                        #[codec(index = 17)]
                        FailedToDecode,
                        #[codec(index = 18)]
                        MaxWeightInvalid,
                        #[codec(index = 19)]
                        NotHoldingFees,
                        #[codec(index = 20)]
                        TooExpensive,
                        #[codec(index = 21)]
                        Trap(::core::primitive::u64),
                        #[codec(index = 22)]
                        UnhandledXcmVersion,
                        #[codec(index = 23)]
                        WeightLimitReached(::core::primitive::u64),
                        #[codec(index = 24)]
                        Barrier,
                        #[codec(index = 25)]
                        WeightNotComputable,
                    }
                    #[derive(
                        Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                    )]
                    pub enum Outcome {
                        #[codec(index = 0)]
                        Complete(::core::primitive::u64),
                        #[codec(index = 1)]
                        Incomplete(
                            ::core::primitive::u64,
                            runtime_types::xcm::v2::traits::Error,
                        ),
                        #[codec(index = 2)]
                        Error(runtime_types::xcm::v2::traits::Error),
                    }
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum Instruction {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::xcm::v1::multiasset::MultiAssets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::xcm::v1::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::xcm::v1::multiasset::MultiAssets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::xcm::v2::Response,
                        #[codec(compact)]
                        max_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::xcm::v1::multiasset::MultiAssets,
                        beneficiary: runtime_types::xcm::v1::multilocation::MultiLocation,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::xcm::v1::multiasset::MultiAssets,
                        dest: runtime_types::xcm::v1::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_type: runtime_types::xcm::v0::OriginKind,
                        #[codec(compact)]
                        require_weight_at_most: ::core::primitive::u64,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::xcm::v1::multilocation::Junctions),
                    #[codec(index = 12)]
                    ReportError {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        dest: runtime_types::xcm::v1::multilocation::MultiLocation,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_assets: ::core::primitive::u32,
                        beneficiary: runtime_types::xcm::v1::multilocation::MultiLocation,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_assets: ::core::primitive::u32,
                        dest: runtime_types::xcm::v1::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
                        receive: runtime_types::xcm::v1::multiasset::MultiAssets,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
                        reserve: runtime_types::xcm::v1::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
                        dest: runtime_types::xcm::v1::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 18)]
                    QueryHolding {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        dest: runtime_types::xcm::v1::multilocation::MultiLocation,
                        assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::xcm::v1::multiasset::MultiAsset,
                        weight_limit: runtime_types::xcm::v2::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::xcm::v2::Xcm),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::xcm::v2::Xcm),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::xcm::v1::multiasset::MultiAssets,
                        ticket: runtime_types::xcm::v1::multilocation::MultiLocation,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum Response {
                    #[codec(index = 0)]
                    Null,
                    #[codec(index = 1)]
                    Assets(runtime_types::xcm::v1::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ExecutionResult(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v2::traits::Error,
                        )>,
                    ),
                    #[codec(index = 3)]
                    Version(::core::primitive::u32),
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub enum WeightLimit {
                    #[codec(index = 0)]
                    Unlimited,
                    #[codec(index = 1)]
                    Limited(#[codec(compact)] ::core::primitive::u64),
                }
                #[derive(
                    Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode,
                )]
                pub struct Xcm(pub ::std::vec::Vec<runtime_types::xcm::v2::Instruction>);
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum VersionedMultiAsset {
                #[codec(index = 0)]
                V0(runtime_types::xcm::v0::multi_asset::MultiAsset),
                #[codec(index = 1)]
                V1(runtime_types::xcm::v1::multiasset::MultiAsset),
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum VersionedMultiAssets {
                #[codec(index = 0)]
                V0(::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>),
                #[codec(index = 1)]
                V1(runtime_types::xcm::v1::multiasset::MultiAssets),
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum VersionedMultiLocation {
                #[codec(index = 0)]
                V0(runtime_types::xcm::v0::multi_location::MultiLocation),
                #[codec(index = 1)]
                V1(runtime_types::xcm::v1::multilocation::MultiLocation),
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum VersionedResponse {
                #[codec(index = 0)]
                V0(runtime_types::xcm::v0::Response),
                #[codec(index = 1)]
                V1(runtime_types::xcm::v1::Response),
                #[codec(index = 2)]
                V2(runtime_types::xcm::v2::Response),
            }
            #[derive(Debug, subxt :: ext :: codec :: Decode, subxt :: ext :: codec :: Encode)]
            pub enum VersionedXcm {
                #[codec(index = 0)]
                V0(runtime_types::xcm::v0::Xcm),
                #[codec(index = 1)]
                V1(runtime_types::xcm::v1::Xcm),
                #[codec(index = 2)]
                V2(runtime_types::xcm::v2::Xcm),
            }
        }
    }
    #[doc = r" The default error type returned when there is a runtime issue,"]
    #[doc = r" exposed here for ease of use."]
    pub type DispatchError = runtime_types::sp_runtime::DispatchError;
    pub fn constants() -> ConstantsApi {
        ConstantsApi
    }
    pub fn storage() -> StorageApi {
        StorageApi
    }
    pub fn tx() -> TransactionApi {
        TransactionApi
    }
    pub struct ConstantsApi;
    impl ConstantsApi {
        pub fn system(&self) -> system::constants::ConstantsApi {
            system::constants::ConstantsApi
        }
        pub fn timestamp(&self) -> timestamp::constants::ConstantsApi {
            timestamp::constants::ConstantsApi
        }
        pub fn transaction_payment(&self) -> transaction_payment::constants::ConstantsApi {
            transaction_payment::constants::ConstantsApi
        }
        pub fn asset_tx_payment(&self) -> asset_tx_payment::constants::ConstantsApi {
            asset_tx_payment::constants::ConstantsApi
        }
        pub fn indices(&self) -> indices::constants::ConstantsApi {
            indices::constants::ConstantsApi
        }
        pub fn balances(&self) -> balances::constants::ConstantsApi {
            balances::constants::ConstantsApi
        }
        pub fn identity(&self) -> identity::constants::ConstantsApi {
            identity::constants::ConstantsApi
        }
        pub fn multisig(&self) -> multisig::constants::ConstantsApi {
            multisig::constants::ConstantsApi
        }
        pub fn authorship(&self) -> authorship::constants::ConstantsApi {
            authorship::constants::ConstantsApi
        }
        pub fn treasury(&self) -> treasury::constants::ConstantsApi {
            treasury::constants::ConstantsApi
        }
        pub fn democracy(&self) -> democracy::constants::ConstantsApi {
            democracy::constants::ConstantsApi
        }
        pub fn scheduler(&self) -> scheduler::constants::ConstantsApi {
            scheduler::constants::ConstantsApi
        }
        pub fn utility(&self) -> utility::constants::ConstantsApi {
            utility::constants::ConstantsApi
        }
        pub fn proxy(&self) -> proxy::constants::ConstantsApi {
            proxy::constants::ConstantsApi
        }
        pub fn x_tokens(&self) -> x_tokens::constants::ConstantsApi {
            x_tokens::constants::ConstantsApi
        }
        pub fn tokens(&self) -> tokens::constants::ConstantsApi {
            tokens::constants::ConstantsApi
        }
        pub fn oracle(&self) -> oracle::constants::ConstantsApi {
            oracle::constants::ConstantsApi
        }
        pub fn vault(&self) -> vault::constants::ConstantsApi {
            vault::constants::ConstantsApi
        }
        pub fn assets(&self) -> assets::constants::ConstantsApi {
            assets::constants::ConstantsApi
        }
        pub fn crowdloan_rewards(&self) -> crowdloan_rewards::constants::ConstantsApi {
            crowdloan_rewards::constants::ConstantsApi
        }
        pub fn vesting(&self) -> vesting::constants::ConstantsApi {
            vesting::constants::ConstantsApi
        }
        pub fn bonded_finance(&self) -> bonded_finance::constants::ConstantsApi {
            bonded_finance::constants::ConstantsApi
        }
        pub fn dutch_auction(&self) -> dutch_auction::constants::ConstantsApi {
            dutch_auction::constants::ConstantsApi
        }
        pub fn mosaic(&self) -> mosaic::constants::ConstantsApi {
            mosaic::constants::ConstantsApi
        }
        pub fn liquidations(&self) -> liquidations::constants::ConstantsApi {
            liquidations::constants::ConstantsApi
        }
        pub fn lending(&self) -> lending::constants::ConstantsApi {
            lending::constants::ConstantsApi
        }
        pub fn pablo(&self) -> pablo::constants::ConstantsApi {
            pablo::constants::ConstantsApi
        }
        pub fn dex_router(&self) -> dex_router::constants::ConstantsApi {
            dex_router::constants::ConstantsApi
        }
        pub fn fnft(&self) -> fnft::constants::ConstantsApi {
            fnft::constants::ConstantsApi
        }
        pub fn staking_rewards(&self) -> staking_rewards::constants::ConstantsApi {
            staking_rewards::constants::ConstantsApi
        }
        pub fn call_filter(&self) -> call_filter::constants::ConstantsApi {
            call_filter::constants::ConstantsApi
        }
        pub fn cosmwasm(&self) -> cosmwasm::constants::ConstantsApi {
            cosmwasm::constants::ConstantsApi
        }
        pub fn ibc(&self) -> ibc::constants::ConstantsApi {
            ibc::constants::ConstantsApi
        }
    }
    pub struct StorageApi;
    impl StorageApi {
        pub fn system(&self) -> system::storage::StorageApi {
            system::storage::StorageApi
        }
        pub fn timestamp(&self) -> timestamp::storage::StorageApi {
            timestamp::storage::StorageApi
        }
        pub fn sudo(&self) -> sudo::storage::StorageApi {
            sudo::storage::StorageApi
        }
        pub fn randomness_collective_flip(
            &self,
        ) -> randomness_collective_flip::storage::StorageApi {
            randomness_collective_flip::storage::StorageApi
        }
        pub fn transaction_payment(&self) -> transaction_payment::storage::StorageApi {
            transaction_payment::storage::StorageApi
        }
        pub fn asset_tx_payment(&self) -> asset_tx_payment::storage::StorageApi {
            asset_tx_payment::storage::StorageApi
        }
        pub fn indices(&self) -> indices::storage::StorageApi {
            indices::storage::StorageApi
        }
        pub fn balances(&self) -> balances::storage::StorageApi {
            balances::storage::StorageApi
        }
        pub fn identity(&self) -> identity::storage::StorageApi {
            identity::storage::StorageApi
        }
        pub fn multisig(&self) -> multisig::storage::StorageApi {
            multisig::storage::StorageApi
        }
        pub fn parachain_system(&self) -> parachain_system::storage::StorageApi {
            parachain_system::storage::StorageApi
        }
        pub fn parachain_info(&self) -> parachain_info::storage::StorageApi {
            parachain_info::storage::StorageApi
        }
        pub fn authorship(&self) -> authorship::storage::StorageApi {
            authorship::storage::StorageApi
        }
        pub fn collator_selection(&self) -> collator_selection::storage::StorageApi {
            collator_selection::storage::StorageApi
        }
        pub fn session(&self) -> session::storage::StorageApi {
            session::storage::StorageApi
        }
        pub fn aura(&self) -> aura::storage::StorageApi {
            aura::storage::StorageApi
        }
        pub fn aura_ext(&self) -> aura_ext::storage::StorageApi {
            aura_ext::storage::StorageApi
        }
        pub fn council(&self) -> council::storage::StorageApi {
            council::storage::StorageApi
        }
        pub fn council_membership(&self) -> council_membership::storage::StorageApi {
            council_membership::storage::StorageApi
        }
        pub fn treasury(&self) -> treasury::storage::StorageApi {
            treasury::storage::StorageApi
        }
        pub fn democracy(&self) -> democracy::storage::StorageApi {
            democracy::storage::StorageApi
        }
        pub fn technical_committee(&self) -> technical_committee::storage::StorageApi {
            technical_committee::storage::StorageApi
        }
        pub fn technical_committee_membership(
            &self,
        ) -> technical_committee_membership::storage::StorageApi {
            technical_committee_membership::storage::StorageApi
        }
        pub fn scheduler(&self) -> scheduler::storage::StorageApi {
            scheduler::storage::StorageApi
        }
        pub fn preimage(&self) -> preimage::storage::StorageApi {
            preimage::storage::StorageApi
        }
        pub fn proxy(&self) -> proxy::storage::StorageApi {
            proxy::storage::StorageApi
        }
        pub fn xcmp_queue(&self) -> xcmp_queue::storage::StorageApi {
            xcmp_queue::storage::StorageApi
        }
        pub fn relayer_xcm(&self) -> relayer_xcm::storage::StorageApi {
            relayer_xcm::storage::StorageApi
        }
        pub fn dmp_queue(&self) -> dmp_queue::storage::StorageApi {
            dmp_queue::storage::StorageApi
        }
        pub fn unknown_tokens(&self) -> unknown_tokens::storage::StorageApi {
            unknown_tokens::storage::StorageApi
        }
        pub fn tokens(&self) -> tokens::storage::StorageApi {
            tokens::storage::StorageApi
        }
        pub fn oracle(&self) -> oracle::storage::StorageApi {
            oracle::storage::StorageApi
        }
        pub fn currency_factory(&self) -> currency_factory::storage::StorageApi {
            currency_factory::storage::StorageApi
        }
        pub fn vault(&self) -> vault::storage::StorageApi {
            vault::storage::StorageApi
        }
        pub fn assets_registry(&self) -> assets_registry::storage::StorageApi {
            assets_registry::storage::StorageApi
        }
        pub fn governance_registry(&self) -> governance_registry::storage::StorageApi {
            governance_registry::storage::StorageApi
        }
        pub fn crowdloan_rewards(&self) -> crowdloan_rewards::storage::StorageApi {
            crowdloan_rewards::storage::StorageApi
        }
        pub fn vesting(&self) -> vesting::storage::StorageApi {
            vesting::storage::StorageApi
        }
        pub fn bonded_finance(&self) -> bonded_finance::storage::StorageApi {
            bonded_finance::storage::StorageApi
        }
        pub fn dutch_auction(&self) -> dutch_auction::storage::StorageApi {
            dutch_auction::storage::StorageApi
        }
        pub fn mosaic(&self) -> mosaic::storage::StorageApi {
            mosaic::storage::StorageApi
        }
        pub fn liquidations(&self) -> liquidations::storage::StorageApi {
            liquidations::storage::StorageApi
        }
        pub fn lending(&self) -> lending::storage::StorageApi {
            lending::storage::StorageApi
        }
        pub fn pablo(&self) -> pablo::storage::StorageApi {
            pablo::storage::StorageApi
        }
        pub fn dex_router(&self) -> dex_router::storage::StorageApi {
            dex_router::storage::StorageApi
        }
        pub fn fnft(&self) -> fnft::storage::StorageApi {
            fnft::storage::StorageApi
        }
        pub fn staking_rewards(&self) -> staking_rewards::storage::StorageApi {
            staking_rewards::storage::StorageApi
        }
        pub fn call_filter(&self) -> call_filter::storage::StorageApi {
            call_filter::storage::StorageApi
        }
        pub fn cosmwasm(&self) -> cosmwasm::storage::StorageApi {
            cosmwasm::storage::StorageApi
        }
        pub fn ibc(&self) -> ibc::storage::StorageApi {
            ibc::storage::StorageApi
        }
    }
    pub struct TransactionApi;
    impl TransactionApi {
        pub fn system(&self) -> system::calls::TransactionApi {
            system::calls::TransactionApi
        }
        pub fn timestamp(&self) -> timestamp::calls::TransactionApi {
            timestamp::calls::TransactionApi
        }
        pub fn sudo(&self) -> sudo::calls::TransactionApi {
            sudo::calls::TransactionApi
        }
        pub fn asset_tx_payment(&self) -> asset_tx_payment::calls::TransactionApi {
            asset_tx_payment::calls::TransactionApi
        }
        pub fn indices(&self) -> indices::calls::TransactionApi {
            indices::calls::TransactionApi
        }
        pub fn balances(&self) -> balances::calls::TransactionApi {
            balances::calls::TransactionApi
        }
        pub fn identity(&self) -> identity::calls::TransactionApi {
            identity::calls::TransactionApi
        }
        pub fn multisig(&self) -> multisig::calls::TransactionApi {
            multisig::calls::TransactionApi
        }
        pub fn parachain_system(&self) -> parachain_system::calls::TransactionApi {
            parachain_system::calls::TransactionApi
        }
        pub fn parachain_info(&self) -> parachain_info::calls::TransactionApi {
            parachain_info::calls::TransactionApi
        }
        pub fn authorship(&self) -> authorship::calls::TransactionApi {
            authorship::calls::TransactionApi
        }
        pub fn collator_selection(&self) -> collator_selection::calls::TransactionApi {
            collator_selection::calls::TransactionApi
        }
        pub fn session(&self) -> session::calls::TransactionApi {
            session::calls::TransactionApi
        }
        pub fn council(&self) -> council::calls::TransactionApi {
            council::calls::TransactionApi
        }
        pub fn council_membership(&self) -> council_membership::calls::TransactionApi {
            council_membership::calls::TransactionApi
        }
        pub fn treasury(&self) -> treasury::calls::TransactionApi {
            treasury::calls::TransactionApi
        }
        pub fn democracy(&self) -> democracy::calls::TransactionApi {
            democracy::calls::TransactionApi
        }
        pub fn technical_committee(&self) -> technical_committee::calls::TransactionApi {
            technical_committee::calls::TransactionApi
        }
        pub fn technical_committee_membership(
            &self,
        ) -> technical_committee_membership::calls::TransactionApi {
            technical_committee_membership::calls::TransactionApi
        }
        pub fn scheduler(&self) -> scheduler::calls::TransactionApi {
            scheduler::calls::TransactionApi
        }
        pub fn utility(&self) -> utility::calls::TransactionApi {
            utility::calls::TransactionApi
        }
        pub fn preimage(&self) -> preimage::calls::TransactionApi {
            preimage::calls::TransactionApi
        }
        pub fn proxy(&self) -> proxy::calls::TransactionApi {
            proxy::calls::TransactionApi
        }
        pub fn xcmp_queue(&self) -> xcmp_queue::calls::TransactionApi {
            xcmp_queue::calls::TransactionApi
        }
        pub fn relayer_xcm(&self) -> relayer_xcm::calls::TransactionApi {
            relayer_xcm::calls::TransactionApi
        }
        pub fn cumulus_xcm(&self) -> cumulus_xcm::calls::TransactionApi {
            cumulus_xcm::calls::TransactionApi
        }
        pub fn dmp_queue(&self) -> dmp_queue::calls::TransactionApi {
            dmp_queue::calls::TransactionApi
        }
        pub fn x_tokens(&self) -> x_tokens::calls::TransactionApi {
            x_tokens::calls::TransactionApi
        }
        pub fn unknown_tokens(&self) -> unknown_tokens::calls::TransactionApi {
            unknown_tokens::calls::TransactionApi
        }
        pub fn tokens(&self) -> tokens::calls::TransactionApi {
            tokens::calls::TransactionApi
        }
        pub fn oracle(&self) -> oracle::calls::TransactionApi {
            oracle::calls::TransactionApi
        }
        pub fn currency_factory(&self) -> currency_factory::calls::TransactionApi {
            currency_factory::calls::TransactionApi
        }
        pub fn vault(&self) -> vault::calls::TransactionApi {
            vault::calls::TransactionApi
        }
        pub fn assets_registry(&self) -> assets_registry::calls::TransactionApi {
            assets_registry::calls::TransactionApi
        }
        pub fn governance_registry(&self) -> governance_registry::calls::TransactionApi {
            governance_registry::calls::TransactionApi
        }
        pub fn assets(&self) -> assets::calls::TransactionApi {
            assets::calls::TransactionApi
        }
        pub fn crowdloan_rewards(&self) -> crowdloan_rewards::calls::TransactionApi {
            crowdloan_rewards::calls::TransactionApi
        }
        pub fn vesting(&self) -> vesting::calls::TransactionApi {
            vesting::calls::TransactionApi
        }
        pub fn bonded_finance(&self) -> bonded_finance::calls::TransactionApi {
            bonded_finance::calls::TransactionApi
        }
        pub fn dutch_auction(&self) -> dutch_auction::calls::TransactionApi {
            dutch_auction::calls::TransactionApi
        }
        pub fn mosaic(&self) -> mosaic::calls::TransactionApi {
            mosaic::calls::TransactionApi
        }
        pub fn liquidations(&self) -> liquidations::calls::TransactionApi {
            liquidations::calls::TransactionApi
        }
        pub fn lending(&self) -> lending::calls::TransactionApi {
            lending::calls::TransactionApi
        }
        pub fn pablo(&self) -> pablo::calls::TransactionApi {
            pablo::calls::TransactionApi
        }
        pub fn dex_router(&self) -> dex_router::calls::TransactionApi {
            dex_router::calls::TransactionApi
        }
        pub fn staking_rewards(&self) -> staking_rewards::calls::TransactionApi {
            staking_rewards::calls::TransactionApi
        }
        pub fn call_filter(&self) -> call_filter::calls::TransactionApi {
            call_filter::calls::TransactionApi
        }
        pub fn cosmwasm(&self) -> cosmwasm::calls::TransactionApi {
            cosmwasm::calls::TransactionApi
        }
        pub fn ibc(&self) -> ibc::calls::TransactionApi {
            ibc::calls::TransactionApi
        }
        pub fn ibc_ping(&self) -> ibc_ping::calls::TransactionApi {
            ibc_ping::calls::TransactionApi
        }
    }
    #[doc = r" check whether the Client you are using is aligned with the statically generated codegen."]
    pub fn validate_codegen<T: ::subxt::Config, C: ::subxt::client::OfflineClientT<T>>(
        client: &C,
    ) -> Result<(), ::subxt::error::MetadataError> {
        let runtime_metadata_hash = client.metadata().metadata_hash(&PALLETS);
        if runtime_metadata_hash
            != [
                140u8, 163u8, 130u8, 53u8, 250u8, 40u8, 12u8, 47u8, 247u8, 129u8, 9u8, 184u8,
                149u8, 107u8, 106u8, 26u8, 180u8, 147u8, 122u8, 229u8, 172u8, 65u8, 126u8, 122u8,
                32u8, 172u8, 251u8, 240u8, 234u8, 240u8, 2u8, 203u8,
            ]
        {
            Err(::subxt::error::MetadataError::IncompatibleMetadata)
        } else {
            Ok(())
        }
    }
}
