syntax = "proto3";

import "common.proto";

package cvm.xcvm;

message PacketAsset {
  cvm.common.Uint128 asset_id = 1;
  cvm.common.Uint128 amount = 2;

  // next tag: 3
}

message Packet {
  bytes interpreter = 1;
  UserOrigin user_origin = 2;
  bytes salt = 3;
  Program program = 4;
  repeated PacketAsset assets = 5;

  // next tag: 6
}

message UserOrigin {
  uint32 network_id = 1;
  bytes account = 2;

  // next tag: 3
}

message Program {
  bytes tag = 1;
  repeated Instruction instructions = 2;

  // next tag: 3
}

message Instruction {
  oneof instruction {
    Transfer transfer = 1;
    Spawn spawn = 2;
    Call call = 3;
    Exchange exchange = 4;
  }

  // next tag: 5
}


message Ratio {
  uint64 nominator = 1;
  uint64 denominator = 2;

  // next tag: 3
}

message Unit {
  cvm.common.Uint128 integer = 1;
  Ratio ratio = 2;

  // next tag: 3
}

message Absolute {
  cvm.common.Uint128 value = 1;

  // next tag: 2
}

message Balance {
  oneof balance_type {
    Ratio ratio = 1;
    Absolute absolute = 2;
    Unit unit = 3;
  }

  // next tag: 4
}

message Asset {
  cvm.common.Uint128 asset_id = 1;
  Balance balance = 2;

  // next tag: 3
}

message AssetAmount {
  cvm.common.Uint128 asset_id = 1;
  Balance balance = 2;

  // next tag: 3
}

message BindingValue {
  oneof type {
    Register register = 1;
    cvm.common.Uint128 asset_id = 2;
    AssetAmount asset_amount = 3;
  }

  // next tag: 4
}

enum Register {
  IP = 0;
  TIP = 1;
  THIS = 2;
  RESULT = 3;

  // next tag: 4
}

message Binding {
  uint32 position = 1;
  BindingValue binding_value = 2;

  // next tag: 3
}

message Transfer {
  oneof account_type{
    bytes account = 1;
    Tip tip = 2;
  }
  repeated Asset assets = 3;

  // next tag: 4
}

message Tip {
  // next tag: 1
}

message Exchange {
  cvm.common.Uint128 exchange_id = 1;
  repeated Asset give = 5;
  repeated Asset want = 6;

  // next tag: 7
}

message Spawn {
  uint32 network_id = 1;
  bytes salt = 3;
  Program program = 4;
  repeated Asset assets = 5;

  // next tag: 6
}

message Call {
  bytes payload = 1;
  repeated Binding bindings = 2;

  // next tag: 3
}
