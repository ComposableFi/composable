{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "GetIbcIcs20RouteResponse",
  "type": "object",
  "required": [
    "route"
  ],
  "properties": {
    "route": {
      "$ref": "#/definitions/IbcIcs20Route"
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetId": {
      "description": "Newtype for XCVM assets ID. Must be unique for each asset and must never change. This ID is an opaque, arbitrary type from the XCVM protocol and no assumption must be made on how it is computed.",
      "allOf": [
        {
          "$ref": "#/definitions/Displayed_for_uint128"
        }
      ]
    },
    "ChannelId": {
      "type": "string"
    },
    "Displayed_for_uint128": {
      "description": "A wrapper around a type which is serde-serialised as a string.\n\nFor serde-serialisation to be implemented for the type `T` must implement `Display` and `FromStr` traits.\n\n``` # use xc_core::shared::Displayed;\n\n#[derive(serde::Serialize, serde::Deserialize)] struct Foo { value: Displayed<u64> }\n\nlet encoded = serde_json_wasm::to_string(&Foo { value: Displayed(42) }).unwrap(); assert_eq!(r#\"{\"value\":\"42\"}\"#, encoded);\n\nlet decoded = serde_json_wasm::from_str::<Foo>(r#\"{\"value\":\"42\"}\"#).unwrap(); assert_eq!(Displayed(42), decoded.value); ```",
      "type": "integer",
      "format": "uint128",
      "minimum": 0.0
    },
    "IbcIcs20Route": {
      "description": "route is used to describe how to send a packet to another network",
      "type": "object",
      "required": [
        "channel_to_send_over",
        "counterparty_timeout",
        "from_network",
        "gateway_to_send_to",
        "ibc_ics_20_sender",
        "local_native_denom",
        "on_remote_asset",
        "sender_gateway"
      ],
      "properties": {
        "channel_to_send_over": {
          "$ref": "#/definitions/ChannelId"
        },
        "counterparty_timeout": {
          "$ref": "#/definitions/RelativeTimeout"
        },
        "from_network": {
          "$ref": "#/definitions/NetworkId"
        },
        "gateway_to_send_to": {
          "description": "the contract address of the gateway to send to assets",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "ibc_ics_20_sender": {
          "$ref": "#/definitions/IbcIcs20Sender"
        },
        "local_native_denom": {
          "type": "string"
        },
        "on_remote_asset": {
          "$ref": "#/definitions/AssetId"
        },
        "sender_gateway": {
          "$ref": "#/definitions/Addr"
        }
      }
    },
    "IbcIcs20Sender": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "CosmosStargateIbcApplicationsTransferV1MsgTransfer",
            "CosmWasmStd1_3"
          ]
        },
        {
          "type": "object",
          "required": [
            "SubstratePrecompile"
          ],
          "properties": {
            "SubstratePrecompile": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "NetworkId": {
      "description": "Newtype for XCVM networks ID. Must be unique for each network and must never change. This ID is an opaque, arbitrary type from the XCVM protocol and no assumption must be made on how it is computed.",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "RelativeTimeout": {
      "description": "relative timeout to CW/IBC-rs time. very small, assumed messages are arriving fast enough, like less than hours",
      "oneOf": [
        {
          "description": "Timeout is relative to the current block timestamp of counter party",
          "type": "object",
          "required": [
            "seconds"
          ],
          "properties": {
            "seconds": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
