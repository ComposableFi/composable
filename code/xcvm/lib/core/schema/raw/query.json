{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "description": "Returns [`AssetReference`] for an asset with given id.",
      "type": "object",
      "required": [
        "lookup_asset"
      ],
      "properties": {
        "lookup_asset": {
          "type": "object",
          "required": [
            "asset_id"
          ],
          "properties": {
            "asset_id": {
              "$ref": "#/definitions/AssetId"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AssetId": {
      "description": "Newtype for XCVM assets ID. Must be unique for each asset and must never change. This ID is an opaque, arbitrary type from the XCVM protocol and no assumption must be made on how it is computed.",
      "allOf": [
        {
          "$ref": "#/definitions/Displayed_for_uint128"
        }
      ]
    },
    "Displayed_for_uint128": {
      "description": "A wrapper around a type which is serde-serialised as a string.\n\nFor serde-serialisation to be implemented for the type `T` must implement `Display` and `FromStr` traits.\n\n``` # use xc_core::Displayed;\n\n#[derive(serde::Serialize, serde::Deserialize)] struct Foo { value: Displayed<u64> }\n\nlet encoded = serde_json_wasm::to_string(&Foo { value: Displayed(42) }).unwrap(); assert_eq!(r#\"{\"value\":\"42\"}\"#, encoded);\n\nlet decoded = serde_json_wasm::from_str::<Foo>(r#\"{\"value\":\"42\"}\"#).unwrap(); assert_eq!(Displayed(42), decoded.value); ```",
      "type": "integer",
      "format": "uint128",
      "minimum": 0.0
    }
  }
}
