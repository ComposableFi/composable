{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "description": "total supply of any assets can be asked from Bank as we share all tokens here",
      "type": "object",
      "required": [
        "assets"
      ],
      "properties": {
        "assets": {
          "type": "object",
          "required": [
            "pool_id"
          ],
          "properties": {
            "pool_id": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "spot_price"
      ],
      "properties": {
        "spot_price": {
          "type": "object",
          "required": [
            "base_asset",
            "calculate_with_fees",
            "pool_id",
            "quote_asset_id"
          ],
          "properties": {
            "base_asset": {
              "$ref": "#/definitions/Coin"
            },
            "calculate_with_fees": {
              "type": "boolean"
            },
            "pool_id": {
              "$ref": "#/definitions/Uint128"
            },
            "quote_asset_id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "lp_token"
      ],
      "properties": {
        "lp_token": {
          "type": "object",
          "required": [
            "pool_id"
          ],
          "properties": {
            "pool_id": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "redeemable_assets_for_lp_tokens"
      ],
      "properties": {
        "redeemable_assets_for_lp_tokens": {
          "type": "object",
          "required": [
            "lp_amount",
            "pool_id"
          ],
          "properties": {
            "lp_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "pool_id": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "simulate_add_liquidity"
      ],
      "properties": {
        "simulate_add_liquidity": {
          "type": "object",
          "required": [
            "amounts",
            "pool_id"
          ],
          "properties": {
            "amounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "pool_id": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "simulate_remove_liquidity"
      ],
      "properties": {
        "simulate_remove_liquidity": {
          "type": "object",
          "required": [
            "lp_amount",
            "min_amount",
            "pool_id"
          ],
          "properties": {
            "lp_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "min_amount": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "pool_id": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
