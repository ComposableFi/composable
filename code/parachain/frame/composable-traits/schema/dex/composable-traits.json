{
  "contract_name": "composable-traits",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "string",
    "enum": []
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Like Osmosis MsgJoinPool",
        "type": "object",
        "required": [
          "add_liquidity"
        ],
        "properties": {
          "add_liquidity": {
            "type": "object",
            "required": [
              "assets",
              "keep_alive",
              "min_mint_amount",
              "pool_id"
            ],
            "properties": {
              "assets": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "keep_alive": {
                "type": "boolean"
              },
              "min_mint_amount": {
                "$ref": "#/definitions/Uint128"
              },
              "pool_id": {
                "$ref": "#/definitions/Uint128"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Like Osmosis MsgExitPool",
        "type": "object",
        "required": [
          "remove_liquidity"
        ],
        "properties": {
          "remove_liquidity": {
            "type": "object",
            "required": [
              "lp_amount",
              "min_receive",
              "pool_id"
            ],
            "properties": {
              "lp_amount": {
                "$ref": "#/definitions/Uint128"
              },
              "min_receive": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "pool_id": {
                "$ref": "#/definitions/Uint128"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Like Osmosis MsgSwapExactAmountOut",
        "type": "object",
        "required": [
          "buy"
        ],
        "properties": {
          "buy": {
            "type": "object",
            "required": [
              "in_asset_id",
              "keep_alive",
              "out_asset",
              "pool_id"
            ],
            "properties": {
              "in_asset_id": {
                "type": "string"
              },
              "keep_alive": {
                "type": "boolean"
              },
              "out_asset": {
                "$ref": "#/definitions/Coin"
              },
              "pool_id": {
                "$ref": "#/definitions/Uint128"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Like Osmosis MsgSwapExactAmountIn",
        "type": "object",
        "required": [
          "swap"
        ],
        "properties": {
          "swap": {
            "type": "object",
            "required": [
              "in_asset",
              "keep_alive",
              "min_receive",
              "pool_id"
            ],
            "properties": {
              "in_asset": {
                "$ref": "#/definitions/Coin"
              },
              "keep_alive": {
                "type": "boolean"
              },
              "min_receive": {
                "$ref": "#/definitions/Coin"
              },
              "pool_id": {
                "$ref": "#/definitions/Uint128"
              }
            }
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "total supply of any assets can be asked from Bank as we share all tokens here",
        "type": "object",
        "required": [
          "assets"
        ],
        "properties": {
          "assets": {
            "type": "object",
            "required": [
              "pool_id"
            ],
            "properties": {
              "pool_id": {
                "$ref": "#/definitions/Uint128"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "spot_price"
        ],
        "properties": {
          "spot_price": {
            "type": "object",
            "required": [
              "base_asset",
              "calculate_with_fees",
              "pool_id",
              "quote_asset_id"
            ],
            "properties": {
              "base_asset": {
                "$ref": "#/definitions/Coin"
              },
              "calculate_with_fees": {
                "type": "boolean"
              },
              "pool_id": {
                "$ref": "#/definitions/Uint128"
              },
              "quote_asset_id": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "lp_token"
        ],
        "properties": {
          "lp_token": {
            "type": "object",
            "required": [
              "pool_id"
            ],
            "properties": {
              "pool_id": {
                "$ref": "#/definitions/Uint128"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "redeemable_assets_for_lp_tokens"
        ],
        "properties": {
          "redeemable_assets_for_lp_tokens": {
            "type": "object",
            "required": [
              "lp_amount",
              "pool_id"
            ],
            "properties": {
              "lp_amount": {
                "$ref": "#/definitions/Uint128"
              },
              "pool_id": {
                "$ref": "#/definitions/Uint128"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "simulate_add_liquidity"
        ],
        "properties": {
          "simulate_add_liquidity": {
            "type": "object",
            "required": [
              "amounts",
              "pool_id"
            ],
            "properties": {
              "amounts": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "pool_id": {
                "$ref": "#/definitions/Uint128"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "simulate_remove_liquidity"
        ],
        "properties": {
          "simulate_remove_liquidity": {
            "type": "object",
            "required": [
              "lp_amount",
              "min_amount",
              "pool_id"
            ],
            "properties": {
              "lp_amount": {
                "$ref": "#/definitions/Uint128"
              },
              "min_amount": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "pool_id": {
                "$ref": "#/definitions/Uint128"
              }
            }
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "assets": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AssetsResponse",
      "type": "object",
      "required": [
        "assets"
      ],
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/definitions/Uint64"
                  },
                  {
                    "$ref": "#/definitions/Uint64"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "definitions": {
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "lp_token": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LpTokenResponse",
      "type": "object",
      "required": [
        "lp_token"
      ],
      "properties": {
        "lp_token": {
          "type": "string"
        }
      }
    },
    "redeemable_assets_for_lp_tokens": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RedeemableAssetsForLpTokensResponse",
      "type": "object",
      "required": [
        "assets"
      ],
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      },
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "simulate_add_liquidity": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SimulateAddLiquidityResponse",
      "type": "object",
      "required": [
        "amount"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "simulate_remove_liquidity": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SimulateRemoveLiquidityResponse",
      "type": "object",
      "required": [
        "amounts"
      ],
      "properties": {
        "amounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      },
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "spot_price": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SpotPriceResponse",
      "type": "object",
      "required": [
        "fee",
        "value"
      ],
      "properties": {
        "fee": {
          "$ref": "#/definitions/Coin"
        },
        "value": {
          "$ref": "#/definitions/Coin"
        }
      },
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
