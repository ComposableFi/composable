//! Autogenerated weights for cosmwasm
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-19, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `dev`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dali-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/composable
// benchmark
// pallet
// --chain
// dali-dev
// --execution=wasm
// --wasm-execution=compiled
// --wasm-instantiation-strategy=legacy-instance-reuse
// --pallet=cosmwasm
// --extrinsic=*
// --steps=50
// --repeat=20
// --output
// parachain/frame/cosmwasm/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(trivial_numeric_casts)]
#![allow(non_snake_case)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for cosmwasm.
pub trait WeightInfo {
	fn upload(n: u32, ) -> Weight;
	fn instantiate(n: u32, ) -> Weight;
	fn execute(n: u32, ) -> Weight;
	fn migrate() -> Weight;
	fn update_admin() -> Weight;
	fn db_read() -> Weight;
	fn db_read_other_contract() -> Weight;
	fn db_write() -> Weight;
	fn db_scan() -> Weight;
	fn db_next() -> Weight;
	fn db_remove() -> Weight;
	fn balance() -> Weight;
	fn transfer(n: u32, ) -> Weight;
	fn set_contract_meta() -> Weight;
	fn running_contract_meta() -> Weight;
	fn contract_meta() -> Weight;
	fn addr_validate() -> Weight;
	fn addr_canonicalize() -> Weight;
	fn addr_humanize() -> Weight;
	fn secp256k1_recover_pubkey() -> Weight;
	fn secp256k1_verify() -> Weight;
	fn ed25519_verify() -> Weight;
	fn ed25519_batch_verify() -> Weight;
	fn continue_instantiate(n: u32, ) -> Weight;
	fn continue_execute(n: u32, ) -> Weight;
	fn continue_migrate() -> Weight;
	fn continue_query() -> Weight;
	fn continue_reply() -> Weight;
	fn query_info() -> Weight;
	fn query_raw() -> Weight;
	fn instruction_I64Const(r: u32, ) -> Weight;
	fn instruction_F64Const(r: u32, ) -> Weight;
	fn instruction_I64Load(r: u32, ) -> Weight;
	fn instruction_F64Load(r: u32, ) -> Weight;
	fn instruction_I64Store(r: u32, ) -> Weight;
	fn instruction_F64Store(r: u32, ) -> Weight;
	fn instruction_I64Eq(r: u32, ) -> Weight;
	fn instruction_I64Eqz(r: u32, ) -> Weight;
	fn instruction_I64Ne(r: u32, ) -> Weight;
	fn instruction_I64LtS(r: u32, ) -> Weight;
	fn instruction_I64GtS(r: u32, ) -> Weight;
	fn instruction_I64LeS(r: u32, ) -> Weight;
	fn instruction_I64GeS(r: u32, ) -> Weight;
	fn instruction_I64Clz(r: u32, ) -> Weight;
	fn instruction_I64Ctz(r: u32, ) -> Weight;
	fn instruction_I64Popcnt(r: u32, ) -> Weight;
	fn instruction_I64Add(r: u32, ) -> Weight;
	fn instruction_I64Sub(r: u32, ) -> Weight;
	fn instruction_I64Mul(r: u32, ) -> Weight;
	fn instruction_I64DivS(r: u32, ) -> Weight;
	fn instruction_I64DivU(r: u32, ) -> Weight;
	fn instruction_I64RemS(r: u32, ) -> Weight;
	fn instruction_I64And(r: u32, ) -> Weight;
	fn instruction_I64Or(r: u32, ) -> Weight;
	fn instruction_I64Xor(r: u32, ) -> Weight;
	fn instruction_I64Shl(r: u32, ) -> Weight;
	fn instruction_I64ShrS(r: u32, ) -> Weight;
	fn instruction_I64Rotl(r: u32, ) -> Weight;
	fn instruction_I64Rotr(r: u32, ) -> Weight;
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight;
	fn instruction_I32WrapI64(r: u32, ) -> Weight;
	fn instruction_F64Eq(r: u32, ) -> Weight;
	fn instruction_F64Ne(r: u32, ) -> Weight;
	fn instruction_F64Lt(r: u32, ) -> Weight;
	fn instruction_F64Gt(r: u32, ) -> Weight;
	fn instruction_F64Le(r: u32, ) -> Weight;
	fn instruction_F64Ge(r: u32, ) -> Weight;
	fn instruction_F64Abs(r: u32, ) -> Weight;
	fn instruction_F64Neg(r: u32, ) -> Weight;
	fn instruction_F64Ceil(r: u32, ) -> Weight;
	fn instruction_F64Floor(r: u32, ) -> Weight;
	fn instruction_F64Trunc(r: u32, ) -> Weight;
	fn instruction_F64Nearest(r: u32, ) -> Weight;
	fn instruction_F64Sqrt(r: u32, ) -> Weight;
	fn instruction_F64Add(r: u32, ) -> Weight;
	fn instruction_F64Sub(r: u32, ) -> Weight;
	fn instruction_F64Mul(r: u32, ) -> Weight;
	fn instruction_F64Div(r: u32, ) -> Weight;
	fn instruction_F64Min(r: u32, ) -> Weight;
	fn instruction_F64Max(r: u32, ) -> Weight;
	fn instruction_F64Copysign(r: u32, ) -> Weight;
	fn instruction_Select(r: u32, ) -> Weight;
	fn instruction_If(r: u32, ) -> Weight;
	fn instruction_Else(r: u32, ) -> Weight;
	fn instruction_GetLocal(r: u32, ) -> Weight;
	fn instruction_SetLocal(r: u32, ) -> Weight;
	fn instruction_TeeLocal(r: u32, ) -> Weight;
	fn instruction_GetGlobal(r: u32, ) -> Weight;
	fn instruction_SetGlobal(r: u32, ) -> Weight;
	fn instruction_CurrentMemory(r: u32, ) -> Weight;
	fn instruction_GrowMemory(r: u32, ) -> Weight;
	fn instruction_Br(r: u32, ) -> Weight;
	fn instruction_BrIf(r: u32, ) -> Weight;
	fn instruction_BrTable(r: u32, ) -> Weight;
	fn instruction_BrTable_per_elem(s: u32, ) -> Weight;
	fn instruction_Call(r: u32, ) -> Weight;
	fn instruction_CallIndirect(r: u32, ) -> Weight;
}

/// Weights for cosmwasm using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Cosmwasm CodeHashToId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CurrentCodeId (r:1 w:1)
	// Storage: Cosmwasm PristineCode (r:0 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:0 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:0 w:1)
	/// The range of component `n` is `[1, 514288]`.
	fn upload(n: u32, ) -> Weight {
		(288_447_000 as Weight)
			// Standard Error: 0
			.saturating_add((45_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn instantiate(n: u32, ) -> Weight {
		(671_760_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((23_111_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn execute(n: u32, ) -> Weight {
		(662_248_000 as Weight)
			// Standard Error: 48_000
			.saturating_add((22_792_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:2 w:2)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm PristineCode (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CodeHashToId (r:0 w:1)
	fn migrate() -> Weight {
		(793_332_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn update_admin() -> Weight {
		(224_958_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read() -> Weight {
		(7_708_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read_other_contract() -> Weight {
		(7_625_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:1)
	fn db_write() -> Weight {
		(8_167_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn db_scan() -> Weight {
		(3_708_000 as Weight)
	}
	// Storage: unknown [0x] (r:1 w:0)
	fn db_next() -> Weight {
		(16_541_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:0 w:1)
	fn db_remove() -> Weight {
		(4_958_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Tokens Accounts (r:1 w:0)
	fn balance() -> Weight {
		(2_792_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn transfer(n: u32, ) -> Weight {
		(9_198_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((21_063_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	fn set_contract_meta() -> Weight {
		(5_625_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn running_contract_meta() -> Weight {
		(3_584_000 as Weight)
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn contract_meta() -> Weight {
		(3_958_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn addr_validate() -> Weight {
		(750_000 as Weight)
	}
	fn addr_canonicalize() -> Weight {
		(750_000 as Weight)
	}
	fn addr_humanize() -> Weight {
		(167_000 as Weight)
	}
	fn secp256k1_recover_pubkey() -> Weight {
		(34_166_000 as Weight)
	}
	fn secp256k1_verify() -> Weight {
		(34_166_000 as Weight)
	}
	fn ed25519_verify() -> Weight {
		(37_333_000 as Weight)
	}
	fn ed25519_batch_verify() -> Weight {
		(152_458_000 as Weight)
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn continue_instantiate(n: u32, ) -> Weight {
		(650_499_000 as Weight)
			// Standard Error: 55_000
			.saturating_add((21_625_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	/// The range of component `n` is `[0, 23]`.
	fn continue_execute(n: u32, ) -> Weight {
		(622_227_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((528_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_migrate() -> Weight {
		(545_749_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_query() -> Weight {
		(533_416_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_reply() -> Weight {
		(537_248_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_info() -> Weight {
		(10_834_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:0)
	fn query_raw() -> Weight {
		(11_917_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Const(r: u32, ) -> Weight {
		(86_021_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((493_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Const(r: u32, ) -> Weight {
		(86_084_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((491_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Load(r: u32, ) -> Weight {
		(85_840_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_860_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Load(r: u32, ) -> Weight {
		(85_954_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_853_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Store(r: u32, ) -> Weight {
		(86_250_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_786_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Store(r: u32, ) -> Weight {
		(85_839_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_804_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eq(r: u32, ) -> Weight {
		(86_133_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_065_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eqz(r: u32, ) -> Weight {
		(85_860_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((870_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ne(r: u32, ) -> Weight {
		(86_085_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_058_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LtS(r: u32, ) -> Weight {
		(86_209_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_064_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GtS(r: u32, ) -> Weight {
		(86_150_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_055_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LeS(r: u32, ) -> Weight {
		(86_678_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_042_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GeS(r: u32, ) -> Weight {
		(86_166_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_054_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Clz(r: u32, ) -> Weight {
		(86_364_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((857_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ctz(r: u32, ) -> Weight {
		(85_914_000 as Weight)
			// Standard Error: 0
			.saturating_add((866_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Popcnt(r: u32, ) -> Weight {
		(85_996_000 as Weight)
			// Standard Error: 0
			.saturating_add((862_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Add(r: u32, ) -> Weight {
		(86_224_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_052_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Sub(r: u32, ) -> Weight {
		(86_126_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_068_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Mul(r: u32, ) -> Weight {
		(86_389_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_056_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivS(r: u32, ) -> Weight {
		(85_985_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_126_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivU(r: u32, ) -> Weight {
		(86_128_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_069_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64RemS(r: u32, ) -> Weight {
		(86_232_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_104_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64And(r: u32, ) -> Weight {
		(86_414_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_057_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Or(r: u32, ) -> Weight {
		(86_296_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_051_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Xor(r: u32, ) -> Weight {
		(86_279_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_053_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Shl(r: u32, ) -> Weight {
		(86_156_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_058_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ShrS(r: u32, ) -> Weight {
		(86_356_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_057_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotl(r: u32, ) -> Weight {
		(86_241_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_054_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotr(r: u32, ) -> Weight {
		(86_113_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_057_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight {
		(86_047_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((862_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I32WrapI64(r: u32, ) -> Weight {
		(86_022_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((861_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Eq(r: u32, ) -> Weight {
		(86_081_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_065_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ne(r: u32, ) -> Weight {
		(86_285_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_053_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Lt(r: u32, ) -> Weight {
		(86_084_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_066_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Gt(r: u32, ) -> Weight {
		(86_207_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_061_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Le(r: u32, ) -> Weight {
		(86_349_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_068_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ge(r: u32, ) -> Weight {
		(86_191_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_061_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Abs(r: u32, ) -> Weight {
		(85_991_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((895_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Neg(r: u32, ) -> Weight {
		(86_036_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((861_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ceil(r: u32, ) -> Weight {
		(86_010_000 as Weight)
			// Standard Error: 0
			.saturating_add((941_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Floor(r: u32, ) -> Weight {
		(86_101_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((929_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Trunc(r: u32, ) -> Weight {
		(85_978_000 as Weight)
			// Standard Error: 0
			.saturating_add((926_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Nearest(r: u32, ) -> Weight {
		(86_017_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_123_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sqrt(r: u32, ) -> Weight {
		(85_956_000 as Weight)
			// Standard Error: 0
			.saturating_add((926_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Add(r: u32, ) -> Weight {
		(86_242_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_066_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sub(r: u32, ) -> Weight {
		(85_989_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_077_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Mul(r: u32, ) -> Weight {
		(86_007_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_069_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Div(r: u32, ) -> Weight {
		(86_113_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_071_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Min(r: u32, ) -> Weight {
		(86_028_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_179_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Max(r: u32, ) -> Weight {
		(86_050_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_177_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Copysign(r: u32, ) -> Weight {
		(86_113_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_064_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Select(r: u32, ) -> Weight {
		(86_056_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_260_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_If(r: u32, ) -> Weight {
		(85_880_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((528_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Else(r: u32, ) -> Weight {
		(85_871_000 as Weight)
			// Standard Error: 0
			.saturating_add((842_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetLocal(r: u32, ) -> Weight {
		(86_297_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((547_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetLocal(r: u32, ) -> Weight {
		(85_933_000 as Weight)
			// Standard Error: 0
			.saturating_add((529_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_TeeLocal(r: u32, ) -> Weight {
		(86_007_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetGlobal(_r: u32, ) -> Weight {
		(85_923_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetGlobal(_r: u32, ) -> Weight {
		(85_975_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CurrentMemory(r: u32, ) -> Weight {
		(85_875_000 as Weight)
			// Standard Error: 0
			.saturating_add((587_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 3]`.
	fn instruction_GrowMemory(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 28_951_000
			.saturating_add((1_478_646_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Br(r: u32, ) -> Weight {
		(85_873_000 as Weight)
			// Standard Error: 0
			.saturating_add((262_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrIf(r: u32, ) -> Weight {
		(85_877_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((514_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrTable(r: u32, ) -> Weight {
		(86_084_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_114_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `s` is `[1, 50]`.
	fn instruction_BrTable_per_elem(s: u32, ) -> Weight {
		(87_175_000 as Weight)
			// Standard Error: 0
			.saturating_add((4_000 as Weight).saturating_mul(s as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Call(r: u32, ) -> Weight {
		(86_587_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((6_861_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CallIndirect(r: u32, ) -> Weight {
		(86_709_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((8_256_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Cosmwasm CodeHashToId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CurrentCodeId (r:1 w:1)
	// Storage: Cosmwasm PristineCode (r:0 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:0 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:0 w:1)
	/// The range of component `n` is `[1, 514288]`.
	fn upload(n: u32, ) -> Weight {
		(288_447_000 as Weight)
			// Standard Error: 0
			.saturating_add((45_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn instantiate(n: u32, ) -> Weight {
		(671_760_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((23_111_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn execute(n: u32, ) -> Weight {
		(662_248_000 as Weight)
			// Standard Error: 48_000
			.saturating_add((22_792_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:2 w:2)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm PristineCode (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CodeHashToId (r:0 w:1)
	fn migrate() -> Weight {
		(793_332_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn update_admin() -> Weight {
		(224_958_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read() -> Weight {
		(7_708_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read_other_contract() -> Weight {
		(7_625_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:1)
	fn db_write() -> Weight {
		(8_167_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn db_scan() -> Weight {
		(3_708_000 as Weight)
	}
	// Storage: unknown [0x] (r:1 w:0)
	fn db_next() -> Weight {
		(16_541_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:0 w:1)
	fn db_remove() -> Weight {
		(4_958_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Tokens Accounts (r:1 w:0)
	fn balance() -> Weight {
		(2_792_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn transfer(n: u32, ) -> Weight {
		(9_198_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((21_063_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	fn set_contract_meta() -> Weight {
		(5_625_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn running_contract_meta() -> Weight {
		(3_584_000 as Weight)
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn contract_meta() -> Weight {
		(3_958_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn addr_validate() -> Weight {
		(750_000 as Weight)
	}
	fn addr_canonicalize() -> Weight {
		(750_000 as Weight)
	}
	fn addr_humanize() -> Weight {
		(167_000 as Weight)
	}
	fn secp256k1_recover_pubkey() -> Weight {
		(34_166_000 as Weight)
	}
	fn secp256k1_verify() -> Weight {
		(34_166_000 as Weight)
	}
	fn ed25519_verify() -> Weight {
		(37_333_000 as Weight)
	}
	fn ed25519_batch_verify() -> Weight {
		(152_458_000 as Weight)
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn continue_instantiate(n: u32, ) -> Weight {
		(650_499_000 as Weight)
			// Standard Error: 55_000
			.saturating_add((21_625_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	/// The range of component `n` is `[0, 23]`.
	fn continue_execute(n: u32, ) -> Weight {
		(622_227_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((528_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_migrate() -> Weight {
		(545_749_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_query() -> Weight {
		(533_416_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_reply() -> Weight {
		(537_248_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_info() -> Weight {
		(10_834_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:0)
	fn query_raw() -> Weight {
		(11_917_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Const(r: u32, ) -> Weight {
		(86_021_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((493_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Const(r: u32, ) -> Weight {
		(86_084_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((491_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Load(r: u32, ) -> Weight {
		(85_840_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_860_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Load(r: u32, ) -> Weight {
		(85_954_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_853_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Store(r: u32, ) -> Weight {
		(86_250_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_786_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Store(r: u32, ) -> Weight {
		(85_839_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_804_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eq(r: u32, ) -> Weight {
		(86_133_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_065_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eqz(r: u32, ) -> Weight {
		(85_860_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((870_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ne(r: u32, ) -> Weight {
		(86_085_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_058_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LtS(r: u32, ) -> Weight {
		(86_209_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_064_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GtS(r: u32, ) -> Weight {
		(86_150_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_055_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LeS(r: u32, ) -> Weight {
		(86_678_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_042_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GeS(r: u32, ) -> Weight {
		(86_166_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_054_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Clz(r: u32, ) -> Weight {
		(86_364_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((857_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ctz(r: u32, ) -> Weight {
		(85_914_000 as Weight)
			// Standard Error: 0
			.saturating_add((866_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Popcnt(r: u32, ) -> Weight {
		(85_996_000 as Weight)
			// Standard Error: 0
			.saturating_add((862_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Add(r: u32, ) -> Weight {
		(86_224_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_052_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Sub(r: u32, ) -> Weight {
		(86_126_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_068_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Mul(r: u32, ) -> Weight {
		(86_389_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_056_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivS(r: u32, ) -> Weight {
		(85_985_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_126_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivU(r: u32, ) -> Weight {
		(86_128_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_069_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64RemS(r: u32, ) -> Weight {
		(86_232_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_104_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64And(r: u32, ) -> Weight {
		(86_414_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_057_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Or(r: u32, ) -> Weight {
		(86_296_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_051_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Xor(r: u32, ) -> Weight {
		(86_279_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_053_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Shl(r: u32, ) -> Weight {
		(86_156_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_058_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ShrS(r: u32, ) -> Weight {
		(86_356_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_057_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotl(r: u32, ) -> Weight {
		(86_241_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_054_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotr(r: u32, ) -> Weight {
		(86_113_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_057_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight {
		(86_047_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((862_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I32WrapI64(r: u32, ) -> Weight {
		(86_022_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((861_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Eq(r: u32, ) -> Weight {
		(86_081_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_065_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ne(r: u32, ) -> Weight {
		(86_285_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_053_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Lt(r: u32, ) -> Weight {
		(86_084_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_066_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Gt(r: u32, ) -> Weight {
		(86_207_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_061_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Le(r: u32, ) -> Weight {
		(86_349_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_068_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ge(r: u32, ) -> Weight {
		(86_191_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_061_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Abs(r: u32, ) -> Weight {
		(85_991_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((895_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Neg(r: u32, ) -> Weight {
		(86_036_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((861_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ceil(r: u32, ) -> Weight {
		(86_010_000 as Weight)
			// Standard Error: 0
			.saturating_add((941_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Floor(r: u32, ) -> Weight {
		(86_101_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((929_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Trunc(r: u32, ) -> Weight {
		(85_978_000 as Weight)
			// Standard Error: 0
			.saturating_add((926_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Nearest(r: u32, ) -> Weight {
		(86_017_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_123_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sqrt(r: u32, ) -> Weight {
		(85_956_000 as Weight)
			// Standard Error: 0
			.saturating_add((926_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Add(r: u32, ) -> Weight {
		(86_242_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_066_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sub(r: u32, ) -> Weight {
		(85_989_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_077_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Mul(r: u32, ) -> Weight {
		(86_007_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_069_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Div(r: u32, ) -> Weight {
		(86_113_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_071_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Min(r: u32, ) -> Weight {
		(86_028_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_179_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Max(r: u32, ) -> Weight {
		(86_050_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_177_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Copysign(r: u32, ) -> Weight {
		(86_113_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_064_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Select(r: u32, ) -> Weight {
		(86_056_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_260_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_If(r: u32, ) -> Weight {
		(85_880_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((528_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Else(r: u32, ) -> Weight {
		(85_871_000 as Weight)
			// Standard Error: 0
			.saturating_add((842_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetLocal(r: u32, ) -> Weight {
		(86_297_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((547_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetLocal(r: u32, ) -> Weight {
		(85_933_000 as Weight)
			// Standard Error: 0
			.saturating_add((529_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_TeeLocal(r: u32, ) -> Weight {
		(86_007_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetGlobal(_r: u32, ) -> Weight {
		(85_923_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetGlobal(_r: u32, ) -> Weight {
		(85_975_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CurrentMemory(r: u32, ) -> Weight {
		(85_875_000 as Weight)
			// Standard Error: 0
			.saturating_add((587_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 3]`.
	fn instruction_GrowMemory(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 28_951_000
			.saturating_add((1_478_646_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Br(r: u32, ) -> Weight {
		(85_873_000 as Weight)
			// Standard Error: 0
			.saturating_add((262_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrIf(r: u32, ) -> Weight {
		(85_877_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((514_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrTable(r: u32, ) -> Weight {
		(86_084_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_114_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `s` is `[1, 50]`.
	fn instruction_BrTable_per_elem(s: u32, ) -> Weight {
		(87_175_000 as Weight)
			// Standard Error: 0
			.saturating_add((4_000 as Weight).saturating_mul(s as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Call(r: u32, ) -> Weight {
		(86_587_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((6_861_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CallIndirect(r: u32, ) -> Weight {
		(86_709_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((8_256_000 as Weight).saturating_mul(r as Weight))
	}
}
