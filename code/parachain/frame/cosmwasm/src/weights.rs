//! Autogenerated weights for cosmwasm
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-13, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `spm`, CPU: `12th Gen Intel(R) Core(TM) i7-1280P`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dali-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/r0plghlp98kfz8h93shlgrqfgzf7cdpm-composable/bin/composable
// benchmark
// pallet
// --chain=dali-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=cosmwasm
// --extrinsic=*
// --steps=50
// --repeat=10
// --output=
// parachain/frame/cosmwasm/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(trivial_numeric_casts)]
#![allow(clippy::unnecessary_cast)]
#![allow(non_snake_case)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for cosmwasm.
pub trait WeightInfo {
	fn upload(n: u32, ) -> Weight;
	fn instantiate(n: u32, ) -> Weight;
	fn execute(n: u32, ) -> Weight;
	fn migrate() -> Weight;
	fn update_admin() -> Weight;
	fn db_read() -> Weight;
	fn db_read_other_contract() -> Weight;
	fn db_write() -> Weight;
	fn db_scan() -> Weight;
	fn db_next() -> Weight;
	fn db_remove() -> Weight;
	fn balance() -> Weight;
	fn transfer(n: u32, ) -> Weight;
	fn set_contract_meta() -> Weight;
	fn running_contract_meta() -> Weight;
	fn contract_meta() -> Weight;
	fn addr_validate() -> Weight;
	fn addr_canonicalize() -> Weight;
	fn addr_humanize() -> Weight;
	fn secp256k1_recover_pubkey() -> Weight;
	fn secp256k1_verify() -> Weight;
	fn ed25519_verify() -> Weight;
	fn ed25519_batch_verify() -> Weight;
	fn continue_instantiate(n: u32, ) -> Weight;
	fn continue_execute(n: u32, ) -> Weight;
	fn continue_migrate() -> Weight;
	fn continue_query() -> Weight;
	fn continue_reply() -> Weight;
	fn query_contract_info() -> Weight;
	fn query_code_info() -> Weight;
	fn query_raw() -> Weight;
	fn instruction_I64Const(r: u32, ) -> Weight;
	fn instruction_F64Const(r: u32, ) -> Weight;
	fn instruction_I64Load(r: u32, ) -> Weight;
	fn instruction_F64Load(r: u32, ) -> Weight;
	fn instruction_I64Store(r: u32, ) -> Weight;
	fn instruction_F64Store(r: u32, ) -> Weight;
	fn instruction_I64Eq(r: u32, ) -> Weight;
	fn instruction_I64Eqz(r: u32, ) -> Weight;
	fn instruction_I64Ne(r: u32, ) -> Weight;
	fn instruction_I64LtS(r: u32, ) -> Weight;
	fn instruction_I64GtS(r: u32, ) -> Weight;
	fn instruction_I64LeS(r: u32, ) -> Weight;
	fn instruction_I64GeS(r: u32, ) -> Weight;
	fn instruction_I64Clz(r: u32, ) -> Weight;
	fn instruction_I64Ctz(r: u32, ) -> Weight;
	fn instruction_I64Popcnt(r: u32, ) -> Weight;
	fn instruction_I64Add(r: u32, ) -> Weight;
	fn instruction_I64Sub(r: u32, ) -> Weight;
	fn instruction_I64Mul(r: u32, ) -> Weight;
	fn instruction_I64DivS(r: u32, ) -> Weight;
	fn instruction_I64DivU(r: u32, ) -> Weight;
	fn instruction_I64RemS(r: u32, ) -> Weight;
	fn instruction_I64And(r: u32, ) -> Weight;
	fn instruction_I64Or(r: u32, ) -> Weight;
	fn instruction_I64Xor(r: u32, ) -> Weight;
	fn instruction_I64Shl(r: u32, ) -> Weight;
	fn instruction_I64ShrS(r: u32, ) -> Weight;
	fn instruction_I64Rotl(r: u32, ) -> Weight;
	fn instruction_I64Rotr(r: u32, ) -> Weight;
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight;
	fn instruction_I32WrapI64(r: u32, ) -> Weight;
	fn instruction_F64Eq(r: u32, ) -> Weight;
	fn instruction_F64Ne(r: u32, ) -> Weight;
	fn instruction_F64Lt(r: u32, ) -> Weight;
	fn instruction_F64Gt(r: u32, ) -> Weight;
	fn instruction_F64Le(r: u32, ) -> Weight;
	fn instruction_F64Ge(r: u32, ) -> Weight;
	fn instruction_F64Abs(r: u32, ) -> Weight;
	fn instruction_F64Neg(r: u32, ) -> Weight;
	fn instruction_F64Ceil(r: u32, ) -> Weight;
	fn instruction_F64Floor(r: u32, ) -> Weight;
	fn instruction_F64Trunc(r: u32, ) -> Weight;
	fn instruction_F64Nearest(r: u32, ) -> Weight;
	fn instruction_F64Sqrt(r: u32, ) -> Weight;
	fn instruction_F64Add(r: u32, ) -> Weight;
	fn instruction_F64Sub(r: u32, ) -> Weight;
	fn instruction_F64Mul(r: u32, ) -> Weight;
	fn instruction_F64Div(r: u32, ) -> Weight;
	fn instruction_F64Min(r: u32, ) -> Weight;
	fn instruction_F64Max(r: u32, ) -> Weight;
	fn instruction_F64Copysign(r: u32, ) -> Weight;
	fn instruction_Select(r: u32, ) -> Weight;
	fn instruction_If(r: u32, ) -> Weight;
	fn instruction_Else(r: u32, ) -> Weight;
	fn instruction_GetLocal(r: u32, ) -> Weight;
	fn instruction_SetLocal(r: u32, ) -> Weight;
	fn instruction_TeeLocal(r: u32, ) -> Weight;
	fn instruction_GetGlobal(r: u32, ) -> Weight;
	fn instruction_SetGlobal(r: u32, ) -> Weight;
	fn instruction_CurrentMemory(r: u32, ) -> Weight;
	fn instruction_GrowMemory(r: u32, ) -> Weight;
	fn instruction_Br(r: u32, ) -> Weight;
	fn instruction_BrIf(r: u32, ) -> Weight;
	fn instruction_BrTable(r: u32, ) -> Weight;
	fn instruction_BrTable_per_elem(s: u32, ) -> Weight;
	fn instruction_Call(r: u32, ) -> Weight;
	fn instruction_CallIndirect(r: u32, ) -> Weight;
}

/// Weights for cosmwasm using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Cosmwasm CodeHashToId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CurrentCodeId (r:1 w:1)
	// Storage: Cosmwasm PristineCode (r:0 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:0 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:0 w:1)
	/// The range of component `n` is `[1, 514288]`.
	fn upload(n: u32, ) -> Weight {
		Weight::from_parts(19_213_176 as u64, 0)
			// Standard Error: 134
			.saturating_add(Weight::from_parts(51_744 as u64, 0).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn instantiate(n: u32, ) -> Weight {
		Weight::from_parts(271_822_175 as u64, 0)
			// Standard Error: 214_443
			.saturating_add(Weight::from_parts(21_368_222 as u64, 0).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn execute(n: u32, ) -> Weight {
		Weight::from_parts(240_096_021 as u64, 0)
			// Standard Error: 217_568
			.saturating_add(Weight::from_parts(21_911_965 as u64, 0).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:2 w:2)
	// Storage: Cosmwasm InstrumentedCode (r:2 w:1)
	// Storage: Cosmwasm PristineCode (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CodeHashToId (r:0 w:1)
	fn migrate() -> Weight {
		Weight::from_parts(412_229_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	fn update_admin() -> Weight {
		Weight::from_parts(198_400_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read() -> Weight {
		Weight::from_parts(13_244_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read_other_contract() -> Weight {
		Weight::from_parts(12_452_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:1)
	fn db_write() -> Weight {
		Weight::from_parts(12_930_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn db_scan() -> Weight {
		Weight::from_parts(2_732_000 as u64, 0)
	}
	// Storage: unknown [0x] (r:1 w:0)
	fn db_next() -> Weight {
		Weight::from_parts(11_524_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:0 w:1)
	fn db_remove() -> Weight {
		Weight::from_parts(6_755_000 as u64, 0)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Tokens Accounts (r:1 w:0)
	fn balance() -> Weight {
		Weight::from_parts(8_386_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn transfer(n: u32, ) -> Weight {
		Weight::from_parts(27_900_925 as u64, 0)
			// Standard Error: 149_091
			.saturating_add(Weight::from_parts(20_291_322 as u64, 0).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	fn set_contract_meta() -> Weight {
		Weight::from_parts(11_590_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn running_contract_meta() -> Weight {
		Weight::from_parts(3_475_000 as u64, 0)
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn contract_meta() -> Weight {
		Weight::from_parts(11_376_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	fn addr_validate() -> Weight {
		Weight::from_parts(2_342_000 as u64, 0)
	}
	fn addr_canonicalize() -> Weight {
		Weight::from_parts(2_314_000 as u64, 0)
	}
	fn addr_humanize() -> Weight {
		Weight::from_parts(397_000 as u64, 0)
	}
	fn secp256k1_recover_pubkey() -> Weight {
		Weight::from_parts(86_729_000 as u64, 0)
	}
	fn secp256k1_verify() -> Weight {
		Weight::from_parts(33_438_000 as u64, 0)
	}
	fn ed25519_verify() -> Weight {
		Weight::from_parts(43_648_000 as u64, 0)
	}
	fn ed25519_batch_verify() -> Weight {
		Weight::from_parts(60_481_000 as u64, 0)
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn continue_instantiate(n: u32, ) -> Weight {
		Weight::from_parts(232_216_094 as u64, 0)
			// Standard Error: 194_340
			.saturating_add(Weight::from_parts(23_770_105 as u64, 0).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	/// The range of component `n` is `[0, 23]`.
	fn continue_execute(n: u32, ) -> Weight {
		Weight::from_parts(168_885_098 as u64, 0)
			// Standard Error: 693_834
			.saturating_add(Weight::from_parts(8_982_880 as u64, 0).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_migrate() -> Weight {
		Weight::from_parts(421_685_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_query() -> Weight {
		Weight::from_parts(394_101_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_reply() -> Weight {
		Weight::from_parts(417_714_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_contract_info() -> Weight {
		Weight::from_parts(41_799_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_code_info() -> Weight {
		Weight::from_parts(26_298_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:0)
	fn query_raw() -> Weight {
		Weight::from_parts(48_135_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Const(r: u32, ) -> Weight {
		Weight::from_parts(8_169_317 as u64, 0)
			// Standard Error: 55_178
			.saturating_add(Weight::from_parts(1_249_208 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Const(r: u32, ) -> Weight {
		Weight::from_parts(5_802_879 as u64, 0)
			// Standard Error: 10_779
			.saturating_add(Weight::from_parts(791_357 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Load(r: u32, ) -> Weight {
		Weight::from_parts(7_303_250 as u64, 0)
			// Standard Error: 15_910
			.saturating_add(Weight::from_parts(1_585_639 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Load(r: u32, ) -> Weight {
		Weight::from_parts(6_132_192 as u64, 0)
			// Standard Error: 18_934
			.saturating_add(Weight::from_parts(1_382_263 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Store(r: u32, ) -> Weight {
		Weight::from_parts(12_845_591 as u64, 0)
			// Standard Error: 31_110
			.saturating_add(Weight::from_parts(2_314_991 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Store(r: u32, ) -> Weight {
		Weight::from_parts(6_804_160 as u64, 0)
			// Standard Error: 12_843
			.saturating_add(Weight::from_parts(2_023_253 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eq(r: u32, ) -> Weight {
		Weight::from_parts(4_453_882 as u64, 0)
			// Standard Error: 7_974
			.saturating_add(Weight::from_parts(1_181_230 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eqz(r: u32, ) -> Weight {
		Weight::from_parts(3_446_407 as u64, 0)
			// Standard Error: 11_959
			.saturating_add(Weight::from_parts(887_681 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ne(r: u32, ) -> Weight {
		Weight::from_parts(6_063_996 as u64, 0)
			// Standard Error: 9_665
			.saturating_add(Weight::from_parts(1_092_921 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LtS(r: u32, ) -> Weight {
		Weight::from_parts(4_745_660 as u64, 0)
			// Standard Error: 7_137
			.saturating_add(Weight::from_parts(1_102_659 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GtS(r: u32, ) -> Weight {
		Weight::from_parts(3_071_888 as u64, 0)
			// Standard Error: 14_294
			.saturating_add(Weight::from_parts(1_237_101 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LeS(r: u32, ) -> Weight {
		Weight::from_parts(6_954_024 as u64, 0)
			// Standard Error: 16_403
			.saturating_add(Weight::from_parts(1_111_512 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GeS(r: u32, ) -> Weight {
		Weight::from_parts(3_202_448 as u64, 0)
			// Standard Error: 12_064
			.saturating_add(Weight::from_parts(1_417_996 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Clz(r: u32, ) -> Weight {
		Weight::from_parts(5_883_836 as u64, 0)
			// Standard Error: 12_773
			.saturating_add(Weight::from_parts(781_624 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ctz(r: u32, ) -> Weight {
		Weight::from_parts(4_205_570 as u64, 0)
			// Standard Error: 10_210
			.saturating_add(Weight::from_parts(818_853 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Popcnt(r: u32, ) -> Weight {
		Weight::from_parts(2_201_231 as u64, 0)
			// Standard Error: 5_237
			.saturating_add(Weight::from_parts(909_349 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Add(r: u32, ) -> Weight {
		Weight::from_parts(4_441_796 as u64, 0)
			// Standard Error: 8_294
			.saturating_add(Weight::from_parts(1_235_436 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Sub(r: u32, ) -> Weight {
		Weight::from_parts(2_387_532 as u64, 0)
			// Standard Error: 11_454
			.saturating_add(Weight::from_parts(1_376_809 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Mul(r: u32, ) -> Weight {
		Weight::from_parts(3_066_568 as u64, 0)
			// Standard Error: 11_765
			.saturating_add(Weight::from_parts(1_363_852 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivS(r: u32, ) -> Weight {
		Weight::from_parts(5_968_914 as u64, 0)
			// Standard Error: 15_273
			.saturating_add(Weight::from_parts(1_368_413 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivU(r: u32, ) -> Weight {
		Weight::from_parts(3_357_177 as u64, 0)
			// Standard Error: 10_548
			.saturating_add(Weight::from_parts(1_537_345 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64RemS(r: u32, ) -> Weight {
		Weight::from_parts(5_123_088 as u64, 0)
			// Standard Error: 5_779
			.saturating_add(Weight::from_parts(1_361_710 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64And(r: u32, ) -> Weight {
		Weight::from_parts(3_136_147 as u64, 0)
			// Standard Error: 10_304
			.saturating_add(Weight::from_parts(1_259_503 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Or(r: u32, ) -> Weight {
		Weight::from_parts(531_325 as u64, 0)
			// Standard Error: 18_361
			.saturating_add(Weight::from_parts(1_503_381 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Xor(r: u32, ) -> Weight {
		Weight::from_parts(7_288_542 as u64, 0)
			// Standard Error: 10_854
			.saturating_add(Weight::from_parts(1_410_100 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Shl(r: u32, ) -> Weight {
		Weight::from_parts(7_482_983 as u64, 0)
			// Standard Error: 9_983
			.saturating_add(Weight::from_parts(1_219_115 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ShrS(r: u32, ) -> Weight {
		Weight::from_parts(4_780_812 as u64, 0)
			// Standard Error: 8_707
			.saturating_add(Weight::from_parts(1_291_335 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotl(r: u32, ) -> Weight {
		Weight::from_parts(916_448 as u64, 0)
			// Standard Error: 16_265
			.saturating_add(Weight::from_parts(1_651_295 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotr(r: u32, ) -> Weight {
		Weight::from_parts(10_328_055 as u64, 0)
			// Standard Error: 15_254
			.saturating_add(Weight::from_parts(1_055_478 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight {
		Weight::from_parts(3_725_409 as u64, 0)
			// Standard Error: 12_869
			.saturating_add(Weight::from_parts(760_073 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I32WrapI64(r: u32, ) -> Weight {
		Weight::from_parts(3_762_402 as u64, 0)
			// Standard Error: 13_522
			.saturating_add(Weight::from_parts(769_000 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Eq(r: u32, ) -> Weight {
		Weight::from_parts(3_637_578 as u64, 0)
			// Standard Error: 13_582
			.saturating_add(Weight::from_parts(1_153_289 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ne(r: u32, ) -> Weight {
		Weight::from_parts(4_031_642 as u64, 0)
			// Standard Error: 6_567
			.saturating_add(Weight::from_parts(1_052_076 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Lt(r: u32, ) -> Weight {
		Weight::from_parts(4_155_441 as u64, 0)
			// Standard Error: 9_183
			.saturating_add(Weight::from_parts(1_083_255 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Gt(r: u32, ) -> Weight {
		Weight::from_parts(3_528_744 as u64, 0)
			// Standard Error: 4_279
			.saturating_add(Weight::from_parts(1_106_018 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Le(r: u32, ) -> Weight {
		Weight::from_parts(3_849_075 as u64, 0)
			// Standard Error: 3_592
			.saturating_add(Weight::from_parts(1_095_094 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ge(r: u32, ) -> Weight {
		Weight::from_parts(3_402_550 as u64, 0)
			// Standard Error: 18_575
			.saturating_add(Weight::from_parts(1_109_272 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Abs(r: u32, ) -> Weight {
		Weight::from_parts(3_374_684 as u64, 0)
			// Standard Error: 16_401
			.saturating_add(Weight::from_parts(1_040_671 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Neg(r: u32, ) -> Weight {
		Weight::from_parts(2_924_978 as u64, 0)
			// Standard Error: 12_468
			.saturating_add(Weight::from_parts(787_836 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ceil(r: u32, ) -> Weight {
		Weight::from_parts(3_487_025 as u64, 0)
			// Standard Error: 13_028
			.saturating_add(Weight::from_parts(1_070_649 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Floor(r: u32, ) -> Weight {
		Weight::from_parts(3_219_530 as u64, 0)
			// Standard Error: 4_195
			.saturating_add(Weight::from_parts(1_096_518 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Trunc(r: u32, ) -> Weight {
		Weight::from_parts(3_768_631 as u64, 0)
			// Standard Error: 9_045
			.saturating_add(Weight::from_parts(1_087_146 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Nearest(r: u32, ) -> Weight {
		Weight::from_parts(4_733_585 as u64, 0)
			// Standard Error: 6_538
			.saturating_add(Weight::from_parts(1_415_764 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sqrt(r: u32, ) -> Weight {
		Weight::from_parts(3_963_692 as u64, 0)
			// Standard Error: 7_846
			.saturating_add(Weight::from_parts(1_094_319 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Add(r: u32, ) -> Weight {
		Weight::from_parts(5_158_468 as u64, 0)
			// Standard Error: 10_261
			.saturating_add(Weight::from_parts(1_042_998 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sub(r: u32, ) -> Weight {
		Weight::from_parts(3_306_395 as u64, 0)
			// Standard Error: 21_475
			.saturating_add(Weight::from_parts(1_191_614 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Mul(r: u32, ) -> Weight {
		Weight::from_parts(939_907 as u64, 0)
			// Standard Error: 12_978
			.saturating_add(Weight::from_parts(1_325_608 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Div(r: u32, ) -> Weight {
		Weight::from_parts(6_419_089 as u64, 0)
			// Standard Error: 6_276
			.saturating_add(Weight::from_parts(1_082_816 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Min(r: u32, ) -> Weight {
		Weight::from_parts(3_631_174 as u64, 0)
			// Standard Error: 3_841
			.saturating_add(Weight::from_parts(1_326_480 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Max(r: u32, ) -> Weight {
		Weight::from_parts(4_000_016 as u64, 0)
			// Standard Error: 18_339
			.saturating_add(Weight::from_parts(1_401_801 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Copysign(r: u32, ) -> Weight {
		Weight::from_parts(3_512_972 as u64, 0)
			// Standard Error: 4_287
			.saturating_add(Weight::from_parts(1_085_900 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Select(r: u32, ) -> Weight {
		Weight::from_parts(3_626_360 as u64, 0)
			// Standard Error: 4_330
			.saturating_add(Weight::from_parts(1_359_540 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_If(r: u32, ) -> Weight {
		Weight::from_parts(3_134_797 as u64, 0)
			// Standard Error: 3_704
			.saturating_add(Weight::from_parts(640_563 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Else(r: u32, ) -> Weight {
		Weight::from_parts(3_532_948 as u64, 0)
			// Standard Error: 8_800
			.saturating_add(Weight::from_parts(1_016_347 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetLocal(r: u32, ) -> Weight {
		Weight::from_parts(3_523_772 as u64, 0)
			// Standard Error: 7_456
			.saturating_add(Weight::from_parts(459_326 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetLocal(r: u32, ) -> Weight {
		Weight::from_parts(3_197_430 as u64, 0)
			// Standard Error: 1_933
			.saturating_add(Weight::from_parts(505_514 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_TeeLocal(r: u32, ) -> Weight {
		Weight::from_parts(2_715_808 as u64, 0)
			// Standard Error: 1_479
			.saturating_add(Weight::from_parts(1_207 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetGlobal(_r: u32, ) -> Weight {
		Weight::from_parts(2_988_269 as u64, 0)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetGlobal(r: u32, ) -> Weight {
		Weight::from_parts(2_798_290 as u64, 0)
			// Standard Error: 884
			.saturating_add(Weight::from_parts(2_324 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CurrentMemory(r: u32, ) -> Weight {
		Weight::from_parts(4_488_888 as u64, 0)
			// Standard Error: 13_180
			.saturating_add(Weight::from_parts(1_024_150 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 3]`.
	fn instruction_GrowMemory(r: u32, ) -> Weight {
		Weight::from_parts(2_482_000 as u64, 0)
			// Standard Error: 8_606_292
			.saturating_add(Weight::from_parts(1_469_027_660 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Br(r: u32, ) -> Weight {
		Weight::from_parts(2_719_253 as u64, 0)
			// Standard Error: 4_513
			.saturating_add(Weight::from_parts(587_800 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrIf(r: u32, ) -> Weight {
		Weight::from_parts(1_877_983 as u64, 0)
			// Standard Error: 9_463
			.saturating_add(Weight::from_parts(957_835 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrTable(r: u32, ) -> Weight {
		Weight::from_parts(1_037_171 as u64, 0)
			// Standard Error: 20_753
			.saturating_add(Weight::from_parts(1_476_015 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `s` is `[1, 50]`.
	fn instruction_BrTable_per_elem(s: u32, ) -> Weight {
		Weight::from_parts(3_959_230 as u64, 0)
			// Standard Error: 2_907
			.saturating_add(Weight::from_parts(16_620 as u64, 0).saturating_mul(s as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Call(r: u32, ) -> Weight {
		Weight::from_parts(4_017_610 as u64, 0)
			// Standard Error: 13_655
			.saturating_add(Weight::from_parts(6_481_999 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CallIndirect(r: u32, ) -> Weight {
		Weight::from_parts(4_945_751 as u64, 0)
			// Standard Error: 20_961
			.saturating_add(Weight::from_parts(8_380_434 as u64, 0).saturating_mul(r as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Cosmwasm CodeHashToId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CurrentCodeId (r:1 w:1)
	// Storage: Cosmwasm PristineCode (r:0 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:0 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:0 w:1)
	/// The range of component `n` is `[1, 514288]`.
	fn upload(n: u32, ) -> Weight {
		Weight::from_parts(19_213_176 as u64, 0)
			// Standard Error: 134
			.saturating_add(Weight::from_parts(51_744 as u64, 0).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn instantiate(n: u32, ) -> Weight {
		Weight::from_parts(271_822_175 as u64, 0)
			// Standard Error: 214_443
			.saturating_add(Weight::from_parts(21_368_222 as u64, 0).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn execute(n: u32, ) -> Weight {
		Weight::from_parts(240_096_021 as u64, 0)
			// Standard Error: 217_568
			.saturating_add(Weight::from_parts(21_911_965 as u64, 0).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:2 w:2)
	// Storage: Cosmwasm InstrumentedCode (r:2 w:1)
	// Storage: Cosmwasm PristineCode (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CodeHashToId (r:0 w:1)
	fn migrate() -> Weight {
		Weight::from_parts(412_229_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(9 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	fn update_admin() -> Weight {
		Weight::from_parts(198_400_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read() -> Weight {
		Weight::from_parts(13_244_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read_other_contract() -> Weight {
		Weight::from_parts(12_452_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:1)
	fn db_write() -> Weight {
		Weight::from_parts(12_930_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	fn db_scan() -> Weight {
		Weight::from_parts(2_732_000 as u64, 0)
	}
	// Storage: unknown [0x] (r:1 w:0)
	fn db_next() -> Weight {
		Weight::from_parts(11_524_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:0 w:1)
	fn db_remove() -> Weight {
		Weight::from_parts(6_755_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Tokens Accounts (r:1 w:0)
	fn balance() -> Weight {
		Weight::from_parts(8_386_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn transfer(n: u32, ) -> Weight {
		Weight::from_parts(27_900_925 as u64, 0)
			// Standard Error: 149_091
			.saturating_add(Weight::from_parts(20_291_322 as u64, 0).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	fn set_contract_meta() -> Weight {
		Weight::from_parts(11_590_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	fn running_contract_meta() -> Weight {
		Weight::from_parts(3_475_000 as u64, 0)
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn contract_meta() -> Weight {
		Weight::from_parts(11_376_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	fn addr_validate() -> Weight {
		Weight::from_parts(2_342_000 as u64, 0)
	}
	fn addr_canonicalize() -> Weight {
		Weight::from_parts(2_314_000 as u64, 0)
	}
	fn addr_humanize() -> Weight {
		Weight::from_parts(397_000 as u64, 0)
	}
	fn secp256k1_recover_pubkey() -> Weight {
		Weight::from_parts(86_729_000 as u64, 0)
	}
	fn secp256k1_verify() -> Weight {
		Weight::from_parts(33_438_000 as u64, 0)
	}
	fn ed25519_verify() -> Weight {
		Weight::from_parts(43_648_000 as u64, 0)
	}
	fn ed25519_batch_verify() -> Weight {
		Weight::from_parts(60_481_000 as u64, 0)
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn continue_instantiate(n: u32, ) -> Weight {
		Weight::from_parts(232_216_094 as u64, 0)
			// Standard Error: 194_340
			.saturating_add(Weight::from_parts(23_770_105 as u64, 0).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	/// The range of component `n` is `[0, 23]`.
	fn continue_execute(n: u32, ) -> Weight {
		Weight::from_parts(168_885_098 as u64, 0)
			// Standard Error: 693_834
			.saturating_add(Weight::from_parts(8_982_880 as u64, 0).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_migrate() -> Weight {
		Weight::from_parts(421_685_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_query() -> Weight {
		Weight::from_parts(394_101_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_reply() -> Weight {
		Weight::from_parts(417_714_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_contract_info() -> Weight {
		Weight::from_parts(41_799_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_code_info() -> Weight {
		Weight::from_parts(26_298_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:0)
	fn query_raw() -> Weight {
		Weight::from_parts(48_135_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Const(r: u32, ) -> Weight {
		Weight::from_parts(8_169_317 as u64, 0)
			// Standard Error: 55_178
			.saturating_add(Weight::from_parts(1_249_208 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Const(r: u32, ) -> Weight {
		Weight::from_parts(5_802_879 as u64, 0)
			// Standard Error: 10_779
			.saturating_add(Weight::from_parts(791_357 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Load(r: u32, ) -> Weight {
		Weight::from_parts(7_303_250 as u64, 0)
			// Standard Error: 15_910
			.saturating_add(Weight::from_parts(1_585_639 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Load(r: u32, ) -> Weight {
		Weight::from_parts(6_132_192 as u64, 0)
			// Standard Error: 18_934
			.saturating_add(Weight::from_parts(1_382_263 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Store(r: u32, ) -> Weight {
		Weight::from_parts(12_845_591 as u64, 0)
			// Standard Error: 31_110
			.saturating_add(Weight::from_parts(2_314_991 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Store(r: u32, ) -> Weight {
		Weight::from_parts(6_804_160 as u64, 0)
			// Standard Error: 12_843
			.saturating_add(Weight::from_parts(2_023_253 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eq(r: u32, ) -> Weight {
		Weight::from_parts(4_453_882 as u64, 0)
			// Standard Error: 7_974
			.saturating_add(Weight::from_parts(1_181_230 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eqz(r: u32, ) -> Weight {
		Weight::from_parts(3_446_407 as u64, 0)
			// Standard Error: 11_959
			.saturating_add(Weight::from_parts(887_681 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ne(r: u32, ) -> Weight {
		Weight::from_parts(6_063_996 as u64, 0)
			// Standard Error: 9_665
			.saturating_add(Weight::from_parts(1_092_921 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LtS(r: u32, ) -> Weight {
		Weight::from_parts(4_745_660 as u64, 0)
			// Standard Error: 7_137
			.saturating_add(Weight::from_parts(1_102_659 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GtS(r: u32, ) -> Weight {
		Weight::from_parts(3_071_888 as u64, 0)
			// Standard Error: 14_294
			.saturating_add(Weight::from_parts(1_237_101 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LeS(r: u32, ) -> Weight {
		Weight::from_parts(6_954_024 as u64, 0)
			// Standard Error: 16_403
			.saturating_add(Weight::from_parts(1_111_512 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GeS(r: u32, ) -> Weight {
		Weight::from_parts(3_202_448 as u64, 0)
			// Standard Error: 12_064
			.saturating_add(Weight::from_parts(1_417_996 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Clz(r: u32, ) -> Weight {
		Weight::from_parts(5_883_836 as u64, 0)
			// Standard Error: 12_773
			.saturating_add(Weight::from_parts(781_624 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ctz(r: u32, ) -> Weight {
		Weight::from_parts(4_205_570 as u64, 0)
			// Standard Error: 10_210
			.saturating_add(Weight::from_parts(818_853 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Popcnt(r: u32, ) -> Weight {
		Weight::from_parts(2_201_231 as u64, 0)
			// Standard Error: 5_237
			.saturating_add(Weight::from_parts(909_349 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Add(r: u32, ) -> Weight {
		Weight::from_parts(4_441_796 as u64, 0)
			// Standard Error: 8_294
			.saturating_add(Weight::from_parts(1_235_436 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Sub(r: u32, ) -> Weight {
		Weight::from_parts(2_387_532 as u64, 0)
			// Standard Error: 11_454
			.saturating_add(Weight::from_parts(1_376_809 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Mul(r: u32, ) -> Weight {
		Weight::from_parts(3_066_568 as u64, 0)
			// Standard Error: 11_765
			.saturating_add(Weight::from_parts(1_363_852 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivS(r: u32, ) -> Weight {
		Weight::from_parts(5_968_914 as u64, 0)
			// Standard Error: 15_273
			.saturating_add(Weight::from_parts(1_368_413 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivU(r: u32, ) -> Weight {
		Weight::from_parts(3_357_177 as u64, 0)
			// Standard Error: 10_548
			.saturating_add(Weight::from_parts(1_537_345 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64RemS(r: u32, ) -> Weight {
		Weight::from_parts(5_123_088 as u64, 0)
			// Standard Error: 5_779
			.saturating_add(Weight::from_parts(1_361_710 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64And(r: u32, ) -> Weight {
		Weight::from_parts(3_136_147 as u64, 0)
			// Standard Error: 10_304
			.saturating_add(Weight::from_parts(1_259_503 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Or(r: u32, ) -> Weight {
		Weight::from_parts(531_325 as u64, 0)
			// Standard Error: 18_361
			.saturating_add(Weight::from_parts(1_503_381 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Xor(r: u32, ) -> Weight {
		Weight::from_parts(7_288_542 as u64, 0)
			// Standard Error: 10_854
			.saturating_add(Weight::from_parts(1_410_100 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Shl(r: u32, ) -> Weight {
		Weight::from_parts(7_482_983 as u64, 0)
			// Standard Error: 9_983
			.saturating_add(Weight::from_parts(1_219_115 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ShrS(r: u32, ) -> Weight {
		Weight::from_parts(4_780_812 as u64, 0)
			// Standard Error: 8_707
			.saturating_add(Weight::from_parts(1_291_335 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotl(r: u32, ) -> Weight {
		Weight::from_parts(916_448 as u64, 0)
			// Standard Error: 16_265
			.saturating_add(Weight::from_parts(1_651_295 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotr(r: u32, ) -> Weight {
		Weight::from_parts(10_328_055 as u64, 0)
			// Standard Error: 15_254
			.saturating_add(Weight::from_parts(1_055_478 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight {
		Weight::from_parts(3_725_409 as u64, 0)
			// Standard Error: 12_869
			.saturating_add(Weight::from_parts(760_073 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I32WrapI64(r: u32, ) -> Weight {
		Weight::from_parts(3_762_402 as u64, 0)
			// Standard Error: 13_522
			.saturating_add(Weight::from_parts(769_000 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Eq(r: u32, ) -> Weight {
		Weight::from_parts(3_637_578 as u64, 0)
			// Standard Error: 13_582
			.saturating_add(Weight::from_parts(1_153_289 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ne(r: u32, ) -> Weight {
		Weight::from_parts(4_031_642 as u64, 0)
			// Standard Error: 6_567
			.saturating_add(Weight::from_parts(1_052_076 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Lt(r: u32, ) -> Weight {
		Weight::from_parts(4_155_441 as u64, 0)
			// Standard Error: 9_183
			.saturating_add(Weight::from_parts(1_083_255 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Gt(r: u32, ) -> Weight {
		Weight::from_parts(3_528_744 as u64, 0)
			// Standard Error: 4_279
			.saturating_add(Weight::from_parts(1_106_018 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Le(r: u32, ) -> Weight {
		Weight::from_parts(3_849_075 as u64, 0)
			// Standard Error: 3_592
			.saturating_add(Weight::from_parts(1_095_094 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ge(r: u32, ) -> Weight {
		Weight::from_parts(3_402_550 as u64, 0)
			// Standard Error: 18_575
			.saturating_add(Weight::from_parts(1_109_272 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Abs(r: u32, ) -> Weight {
		Weight::from_parts(3_374_684 as u64, 0)
			// Standard Error: 16_401
			.saturating_add(Weight::from_parts(1_040_671 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Neg(r: u32, ) -> Weight {
		Weight::from_parts(2_924_978 as u64, 0)
			// Standard Error: 12_468
			.saturating_add(Weight::from_parts(787_836 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ceil(r: u32, ) -> Weight {
		Weight::from_parts(3_487_025 as u64, 0)
			// Standard Error: 13_028
			.saturating_add(Weight::from_parts(1_070_649 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Floor(r: u32, ) -> Weight {
		Weight::from_parts(3_219_530 as u64, 0)
			// Standard Error: 4_195
			.saturating_add(Weight::from_parts(1_096_518 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Trunc(r: u32, ) -> Weight {
		Weight::from_parts(3_768_631 as u64, 0)
			// Standard Error: 9_045
			.saturating_add(Weight::from_parts(1_087_146 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Nearest(r: u32, ) -> Weight {
		Weight::from_parts(4_733_585 as u64, 0)
			// Standard Error: 6_538
			.saturating_add(Weight::from_parts(1_415_764 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sqrt(r: u32, ) -> Weight {
		Weight::from_parts(3_963_692 as u64, 0)
			// Standard Error: 7_846
			.saturating_add(Weight::from_parts(1_094_319 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Add(r: u32, ) -> Weight {
		Weight::from_parts(5_158_468 as u64, 0)
			// Standard Error: 10_261
			.saturating_add(Weight::from_parts(1_042_998 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sub(r: u32, ) -> Weight {
		Weight::from_parts(3_306_395 as u64, 0)
			// Standard Error: 21_475
			.saturating_add(Weight::from_parts(1_191_614 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Mul(r: u32, ) -> Weight {
		Weight::from_parts(939_907 as u64, 0)
			// Standard Error: 12_978
			.saturating_add(Weight::from_parts(1_325_608 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Div(r: u32, ) -> Weight {
		Weight::from_parts(6_419_089 as u64, 0)
			// Standard Error: 6_276
			.saturating_add(Weight::from_parts(1_082_816 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Min(r: u32, ) -> Weight {
		Weight::from_parts(3_631_174 as u64, 0)
			// Standard Error: 3_841
			.saturating_add(Weight::from_parts(1_326_480 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Max(r: u32, ) -> Weight {
		Weight::from_parts(4_000_016 as u64, 0)
			// Standard Error: 18_339
			.saturating_add(Weight::from_parts(1_401_801 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Copysign(r: u32, ) -> Weight {
		Weight::from_parts(3_512_972 as u64, 0)
			// Standard Error: 4_287
			.saturating_add(Weight::from_parts(1_085_900 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Select(r: u32, ) -> Weight {
		Weight::from_parts(3_626_360 as u64, 0)
			// Standard Error: 4_330
			.saturating_add(Weight::from_parts(1_359_540 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_If(r: u32, ) -> Weight {
		Weight::from_parts(3_134_797 as u64, 0)
			// Standard Error: 3_704
			.saturating_add(Weight::from_parts(640_563 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Else(r: u32, ) -> Weight {
		Weight::from_parts(3_532_948 as u64, 0)
			// Standard Error: 8_800
			.saturating_add(Weight::from_parts(1_016_347 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetLocal(r: u32, ) -> Weight {
		Weight::from_parts(3_523_772 as u64, 0)
			// Standard Error: 7_456
			.saturating_add(Weight::from_parts(459_326 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetLocal(r: u32, ) -> Weight {
		Weight::from_parts(3_197_430 as u64, 0)
			// Standard Error: 1_933
			.saturating_add(Weight::from_parts(505_514 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_TeeLocal(r: u32, ) -> Weight {
		Weight::from_parts(2_715_808 as u64, 0)
			// Standard Error: 1_479
			.saturating_add(Weight::from_parts(1_207 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetGlobal(_r: u32, ) -> Weight {
		Weight::from_parts(2_988_269 as u64, 0)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetGlobal(r: u32, ) -> Weight {
		Weight::from_parts(2_798_290 as u64, 0)
			// Standard Error: 884
			.saturating_add(Weight::from_parts(2_324 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CurrentMemory(r: u32, ) -> Weight {
		Weight::from_parts(4_488_888 as u64, 0)
			// Standard Error: 13_180
			.saturating_add(Weight::from_parts(1_024_150 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 3]`.
	fn instruction_GrowMemory(r: u32, ) -> Weight {
		Weight::from_parts(2_482_000 as u64, 0)
			// Standard Error: 8_606_292
			.saturating_add(Weight::from_parts(1_469_027_660 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Br(r: u32, ) -> Weight {
		Weight::from_parts(2_719_253 as u64, 0)
			// Standard Error: 4_513
			.saturating_add(Weight::from_parts(587_800 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrIf(r: u32, ) -> Weight {
		Weight::from_parts(1_877_983 as u64, 0)
			// Standard Error: 9_463
			.saturating_add(Weight::from_parts(957_835 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrTable(r: u32, ) -> Weight {
		Weight::from_parts(1_037_171 as u64, 0)
			// Standard Error: 20_753
			.saturating_add(Weight::from_parts(1_476_015 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `s` is `[1, 50]`.
	fn instruction_BrTable_per_elem(s: u32, ) -> Weight {
		Weight::from_parts(3_959_230 as u64, 0)
			// Standard Error: 2_907
			.saturating_add(Weight::from_parts(16_620 as u64, 0).saturating_mul(s as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Call(r: u32, ) -> Weight {
		Weight::from_parts(4_017_610 as u64, 0)
			// Standard Error: 13_655
			.saturating_add(Weight::from_parts(6_481_999 as u64, 0).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CallIndirect(r: u32, ) -> Weight {
		Weight::from_parts(4_945_751 as u64, 0)
			// Standard Error: 20_961
			.saturating_add(Weight::from_parts(8_380_434 as u64, 0).saturating_mul(r as u64))
	}
}
