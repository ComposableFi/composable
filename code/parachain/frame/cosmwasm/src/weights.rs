//! Autogenerated weights for cosmwasm
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-16, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `dev`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dali-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/composable
// benchmark
// pallet
// --chain
// dali-dev
// --execution=wasm
// --wasm-execution=compiled
// --wasm-instantiation-strategy=legacy-instance-reuse
// --pallet=cosmwasm
// --extrinsic=*
// --steps=50
// --repeat=20
// --output
// parachain/frame/cosmwasm/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(trivial_numeric_casts)]
#![allow(non_snake_case)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for cosmwasm.
pub trait WeightInfo {
	fn upload(n: u32, ) -> Weight;
	fn instantiate(n: u32, ) -> Weight;
	fn execute(n: u32, ) -> Weight;
	fn migrate() -> Weight;
	fn update_admin() -> Weight;
	fn clear_admin() -> Weight;
	fn db_read() -> Weight;
	fn db_read_other_contract() -> Weight;
	fn db_write() -> Weight;
	fn db_scan() -> Weight;
	fn db_next() -> Weight;
	fn db_remove() -> Weight;
	fn balance() -> Weight;
	fn transfer(n: u32, ) -> Weight;
	fn set_contract_meta() -> Weight;
	fn running_contract_meta() -> Weight;
	fn contract_meta() -> Weight;
	fn addr_validate() -> Weight;
	fn addr_canonicalize() -> Weight;
	fn addr_humanize() -> Weight;
	fn secp256k1_recover_pubkey() -> Weight;
	fn secp256k1_verify() -> Weight;
	fn ed25519_verify() -> Weight;
	fn ed25519_batch_verify() -> Weight;
	fn continue_instantiate(n: u32, ) -> Weight;
	fn continue_execute(n: u32, ) -> Weight;
	fn continue_migrate() -> Weight;
	fn continue_query() -> Weight;
	fn continue_reply() -> Weight;
	fn query_info() -> Weight;
	fn query_raw() -> Weight;
	fn instruction_I64Const(r: u32, ) -> Weight;
	fn instruction_F64Const(r: u32, ) -> Weight;
	fn instruction_I64Load(r: u32, ) -> Weight;
	fn instruction_F64Load(r: u32, ) -> Weight;
	fn instruction_I64Store(r: u32, ) -> Weight;
	fn instruction_F64Store(r: u32, ) -> Weight;
	fn instruction_I64Eq(r: u32, ) -> Weight;
	fn instruction_I64Eqz(r: u32, ) -> Weight;
	fn instruction_I64Ne(r: u32, ) -> Weight;
	fn instruction_I64LtS(r: u32, ) -> Weight;
	fn instruction_I64GtS(r: u32, ) -> Weight;
	fn instruction_I64LeS(r: u32, ) -> Weight;
	fn instruction_I64GeS(r: u32, ) -> Weight;
	fn instruction_I64Clz(r: u32, ) -> Weight;
	fn instruction_I64Ctz(r: u32, ) -> Weight;
	fn instruction_I64Popcnt(r: u32, ) -> Weight;
	fn instruction_I64Add(r: u32, ) -> Weight;
	fn instruction_I64Sub(r: u32, ) -> Weight;
	fn instruction_I64Mul(r: u32, ) -> Weight;
	fn instruction_I64DivS(r: u32, ) -> Weight;
	fn instruction_I64DivU(r: u32, ) -> Weight;
	fn instruction_I64RemS(r: u32, ) -> Weight;
	fn instruction_I64And(r: u32, ) -> Weight;
	fn instruction_I64Or(r: u32, ) -> Weight;
	fn instruction_I64Xor(r: u32, ) -> Weight;
	fn instruction_I64Shl(r: u32, ) -> Weight;
	fn instruction_I64ShrS(r: u32, ) -> Weight;
	fn instruction_I64Rotl(r: u32, ) -> Weight;
	fn instruction_I64Rotr(r: u32, ) -> Weight;
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight;
	fn instruction_I32WrapI64(r: u32, ) -> Weight;
	fn instruction_F64Eq(r: u32, ) -> Weight;
	fn instruction_F64Ne(r: u32, ) -> Weight;
	fn instruction_F64Lt(r: u32, ) -> Weight;
	fn instruction_F64Gt(r: u32, ) -> Weight;
	fn instruction_F64Le(r: u32, ) -> Weight;
	fn instruction_F64Ge(r: u32, ) -> Weight;
	fn instruction_F64Abs(r: u32, ) -> Weight;
	fn instruction_F64Neg(r: u32, ) -> Weight;
	fn instruction_F64Ceil(r: u32, ) -> Weight;
	fn instruction_F64Floor(r: u32, ) -> Weight;
	fn instruction_F64Trunc(r: u32, ) -> Weight;
	fn instruction_F64Nearest(r: u32, ) -> Weight;
	fn instruction_F64Sqrt(r: u32, ) -> Weight;
	fn instruction_F64Add(r: u32, ) -> Weight;
	fn instruction_F64Sub(r: u32, ) -> Weight;
	fn instruction_F64Mul(r: u32, ) -> Weight;
	fn instruction_F64Div(r: u32, ) -> Weight;
	fn instruction_F64Min(r: u32, ) -> Weight;
	fn instruction_F64Max(r: u32, ) -> Weight;
	fn instruction_F64Copysign(r: u32, ) -> Weight;
	fn instruction_Select(r: u32, ) -> Weight;
	fn instruction_If(r: u32, ) -> Weight;
	fn instruction_Else(r: u32, ) -> Weight;
	fn instruction_GetLocal(r: u32, ) -> Weight;
	fn instruction_SetLocal(r: u32, ) -> Weight;
	fn instruction_TeeLocal(r: u32, ) -> Weight;
	fn instruction_GetGlobal(r: u32, ) -> Weight;
	fn instruction_SetGlobal(r: u32, ) -> Weight;
	fn instruction_CurrentMemory(r: u32, ) -> Weight;
	fn instruction_GrowMemory(r: u32, ) -> Weight;
	fn instruction_Br(r: u32, ) -> Weight;
	fn instruction_BrIf(r: u32, ) -> Weight;
	fn instruction_BrTable(r: u32, ) -> Weight;
	fn instruction_BrTable_per_elem(s: u32, ) -> Weight;
	fn instruction_Call(r: u32, ) -> Weight;
	fn instruction_CallIndirect(r: u32, ) -> Weight;
}

/// Weights for cosmwasm using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Cosmwasm CodeHashToId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CurrentCodeId (r:1 w:1)
	// Storage: Cosmwasm PristineCode (r:0 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:0 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:0 w:1)
	/// The range of component `n` is `[1, 514288]`.
	fn upload(n: u32, ) -> Weight {
		(265_836_000 as Weight)
			// Standard Error: 0
			.saturating_add((45_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 22]`.
	fn instantiate(n: u32, ) -> Weight {
		(676_168_000 as Weight)
			// Standard Error: 111_000
			.saturating_add((23_976_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 22]`.
	fn execute(n: u32, ) -> Weight {
		(666_064_000 as Weight)
			// Standard Error: 69_000
			.saturating_add((22_796_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:2 w:2)
	// Storage: Cosmwasm PristineCode (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm CodeHashToId (r:0 w:1)
	fn migrate() -> Weight {
		(608_787_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn update_admin() -> Weight {
		(223_347_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn clear_admin() -> Weight {
		(223_805_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read() -> Weight {
		(7_583_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read_other_contract() -> Weight {
		(7_459_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:1)
	fn db_write() -> Weight {
		(7_917_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn db_scan() -> Weight {
		(3_625_000 as Weight)
	}
	// Storage: unknown [0x] (r:1 w:0)
	fn db_next() -> Weight {
		(31_668_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:0 w:1)
	fn db_remove() -> Weight {
		(5_000_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Tokens Accounts (r:1 w:0)
	fn balance() -> Weight {
		(2_792_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 22]`.
	fn transfer(n: u32, ) -> Weight {
		(11_009_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((21_258_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	fn set_contract_meta() -> Weight {
		(5_875_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn running_contract_meta() -> Weight {
		(3_500_000 as Weight)
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn contract_meta() -> Weight {
		(3_875_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn addr_validate() -> Weight {
		(791_000 as Weight)
	}
	fn addr_canonicalize() -> Weight {
		(791_000 as Weight)
	}
	fn addr_humanize() -> Weight {
		(167_000 as Weight)
	}
	fn secp256k1_recover_pubkey() -> Weight {
		(34_127_000 as Weight)
	}
	fn secp256k1_verify() -> Weight {
		(34_127_000 as Weight)
	}
	fn ed25519_verify() -> Weight {
		(41_169_000 as Weight)
	}
	fn ed25519_batch_verify() -> Weight {
		(157_301_000 as Weight)
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 22]`.
	fn continue_instantiate(n: u32, ) -> Weight {
		(650_255_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((21_833_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	/// The range of component `n` is `[0, 22]`.
	fn continue_execute(n: u32, ) -> Weight {
		(622_438_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((581_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_migrate() -> Weight {
		(545_116_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_query() -> Weight {
		(532_282_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_reply() -> Weight {
		(536_073_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_info() -> Weight {
		(10_751_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:0)
	fn query_raw() -> Weight {
		(11_709_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Const(r: u32, ) -> Weight {
		(85_910_000 as Weight)
			// Standard Error: 0
			.saturating_add((494_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Const(r: u32, ) -> Weight {
		(85_984_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((490_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Load(r: u32, ) -> Weight {
		(86_023_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_850_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Load(r: u32, ) -> Weight {
		(85_960_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_851_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Store(r: u32, ) -> Weight {
		(86_593_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_770_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Store(r: u32, ) -> Weight {
		(86_169_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_786_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eq(r: u32, ) -> Weight {
		(86_102_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_082_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eqz(r: u32, ) -> Weight {
		(86_161_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((858_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ne(r: u32, ) -> Weight {
		(86_022_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_087_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LtS(r: u32, ) -> Weight {
		(87_107_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_066_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GtS(r: u32, ) -> Weight {
		(86_062_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_087_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LeS(r: u32, ) -> Weight {
		(86_059_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_087_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GeS(r: u32, ) -> Weight {
		(92_992_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((1_089_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Clz(r: u32, ) -> Weight {
		(85_674_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((878_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ctz(r: u32, ) -> Weight {
		(86_065_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((882_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Popcnt(r: u32, ) -> Weight {
		(104_584_000 as Weight)
			// Standard Error: 66_000
			.saturating_add((542_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Add(r: u32, ) -> Weight {
		(102_736_000 as Weight)
			// Standard Error: 132_000
			.saturating_add((828_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Sub(r: u32, ) -> Weight {
		(85_304_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_121_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Mul(r: u32, ) -> Weight {
		(86_309_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((1_128_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivS(r: u32, ) -> Weight {
		(85_909_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((1_234_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivU(r: u32, ) -> Weight {
		(89_745_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((1_065_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64RemS(r: u32, ) -> Weight {
		(84_080_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((1_410_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64And(r: u32, ) -> Weight {
		(89_867_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((1_092_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Or(r: u32, ) -> Weight {
		(86_719_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_074_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Xor(r: u32, ) -> Weight {
		(83_239_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((1_273_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Shl(r: u32, ) -> Weight {
		(89_776_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_017_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ShrS(r: u32, ) -> Weight {
		(85_928_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_112_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotl(r: u32, ) -> Weight {
		(87_289_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((1_171_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotr(r: u32, ) -> Weight {
		(86_438_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_208_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight {
		(87_702_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((814_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I32WrapI64(r: u32, ) -> Weight {
		(86_763_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((889_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Eq(r: u32, ) -> Weight {
		(88_270_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_043_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ne(r: u32, ) -> Weight {
		(87_341_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((1_058_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Lt(r: u32, ) -> Weight {
		(86_179_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_103_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Gt(r: u32, ) -> Weight {
		(85_928_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_105_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Le(r: u32, ) -> Weight {
		(86_419_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_065_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ge(r: u32, ) -> Weight {
		(86_039_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_076_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Abs(r: u32, ) -> Weight {
		(90_017_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((805_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Neg(r: u32, ) -> Weight {
		(86_033_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((917_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ceil(r: u32, ) -> Weight {
		(87_157_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((929_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Floor(r: u32, ) -> Weight {
		(84_912_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_034_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Trunc(r: u32, ) -> Weight {
		(84_271_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_080_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Nearest(r: u32, ) -> Weight {
		(86_644_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_135_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sqrt(r: u32, ) -> Weight {
		(87_372_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((917_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Add(r: u32, ) -> Weight {
		(85_942_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_111_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sub(r: u32, ) -> Weight {
		(85_673_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_119_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Mul(r: u32, ) -> Weight {
		(85_630_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((1_130_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Div(r: u32, ) -> Weight {
		(86_528_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_084_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Min(r: u32, ) -> Weight {
		(85_893_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_184_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Max(r: u32, ) -> Weight {
		(86_524_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_182_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Copysign(r: u32, ) -> Weight {
		(82_463_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((1_357_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Select(r: u32, ) -> Weight {
		(87_311_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_230_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_If(r: u32, ) -> Weight {
		(85_853_000 as Weight)
			// Standard Error: 0
			.saturating_add((529_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Else(r: u32, ) -> Weight {
		(85_842_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((842_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetLocal(r: u32, ) -> Weight {
		(85_649_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((583_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetLocal(r: u32, ) -> Weight {
		(85_741_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((561_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_TeeLocal(r: u32, ) -> Weight {
		(85_974_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((3_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetGlobal(_r: u32, ) -> Weight {
		(85_982_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetGlobal(_r: u32, ) -> Weight {
		(86_097_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CurrentMemory(r: u32, ) -> Weight {
		(85_732_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((600_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 3]`.
	fn instruction_GrowMemory(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 33_122_000
			.saturating_add((1_505_901_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Br(r: u32, ) -> Weight {
		(85_154_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((333_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrIf(r: u32, ) -> Weight {
		(87_410_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((480_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrTable(r: u32, ) -> Weight {
		(85_848_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_128_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `s` is `[1, 50]`.
	fn instruction_BrTable_per_elem(s: u32, ) -> Weight {
		(87_303_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((23_000 as Weight).saturating_mul(s as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Call(r: u32, ) -> Weight {
		(86_570_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((6_870_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CallIndirect(r: u32, ) -> Weight {
		(86_852_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((8_356_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Cosmwasm CodeHashToId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CurrentCodeId (r:1 w:1)
	// Storage: Cosmwasm PristineCode (r:0 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:0 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:0 w:1)
	/// The range of component `n` is `[1, 514288]`.
	fn upload(n: u32, ) -> Weight {
		(265_836_000 as Weight)
			// Standard Error: 0
			.saturating_add((45_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 22]`.
	fn instantiate(n: u32, ) -> Weight {
		(676_168_000 as Weight)
			// Standard Error: 111_000
			.saturating_add((23_976_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 22]`.
	fn execute(n: u32, ) -> Weight {
		(666_064_000 as Weight)
			// Standard Error: 69_000
			.saturating_add((22_796_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:2 w:2)
	// Storage: Cosmwasm PristineCode (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm CodeHashToId (r:0 w:1)
	fn migrate() -> Weight {
		(608_787_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn update_admin() -> Weight {
		(223_347_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn clear_admin() -> Weight {
		(223_805_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read() -> Weight {
		(7_583_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read_other_contract() -> Weight {
		(7_459_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:1)
	fn db_write() -> Weight {
		(7_917_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn db_scan() -> Weight {
		(3_625_000 as Weight)
	}
	// Storage: unknown [0x] (r:1 w:0)
	fn db_next() -> Weight {
		(31_668_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:0 w:1)
	fn db_remove() -> Weight {
		(5_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Tokens Accounts (r:1 w:0)
	fn balance() -> Weight {
		(2_792_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 22]`.
	fn transfer(n: u32, ) -> Weight {
		(11_009_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((21_258_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	fn set_contract_meta() -> Weight {
		(5_875_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn running_contract_meta() -> Weight {
		(3_500_000 as Weight)
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn contract_meta() -> Weight {
		(3_875_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn addr_validate() -> Weight {
		(791_000 as Weight)
	}
	fn addr_canonicalize() -> Weight {
		(791_000 as Weight)
	}
	fn addr_humanize() -> Weight {
		(167_000 as Weight)
	}
	fn secp256k1_recover_pubkey() -> Weight {
		(34_127_000 as Weight)
	}
	fn secp256k1_verify() -> Weight {
		(34_127_000 as Weight)
	}
	fn ed25519_verify() -> Weight {
		(41_169_000 as Weight)
	}
	fn ed25519_batch_verify() -> Weight {
		(157_301_000 as Weight)
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 22]`.
	fn continue_instantiate(n: u32, ) -> Weight {
		(650_255_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((21_833_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	/// The range of component `n` is `[0, 22]`.
	fn continue_execute(n: u32, ) -> Weight {
		(622_438_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((581_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_migrate() -> Weight {
		(545_116_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_query() -> Weight {
		(532_282_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_reply() -> Weight {
		(536_073_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_info() -> Weight {
		(10_751_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:0)
	fn query_raw() -> Weight {
		(11_709_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Const(r: u32, ) -> Weight {
		(85_910_000 as Weight)
			// Standard Error: 0
			.saturating_add((494_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Const(r: u32, ) -> Weight {
		(85_984_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((490_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Load(r: u32, ) -> Weight {
		(86_023_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_850_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Load(r: u32, ) -> Weight {
		(85_960_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_851_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Store(r: u32, ) -> Weight {
		(86_593_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_770_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Store(r: u32, ) -> Weight {
		(86_169_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_786_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eq(r: u32, ) -> Weight {
		(86_102_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_082_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eqz(r: u32, ) -> Weight {
		(86_161_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((858_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ne(r: u32, ) -> Weight {
		(86_022_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_087_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LtS(r: u32, ) -> Weight {
		(87_107_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_066_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GtS(r: u32, ) -> Weight {
		(86_062_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_087_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LeS(r: u32, ) -> Weight {
		(86_059_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_087_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GeS(r: u32, ) -> Weight {
		(92_992_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((1_089_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Clz(r: u32, ) -> Weight {
		(85_674_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((878_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ctz(r: u32, ) -> Weight {
		(86_065_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((882_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Popcnt(r: u32, ) -> Weight {
		(104_584_000 as Weight)
			// Standard Error: 66_000
			.saturating_add((542_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Add(r: u32, ) -> Weight {
		(102_736_000 as Weight)
			// Standard Error: 132_000
			.saturating_add((828_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Sub(r: u32, ) -> Weight {
		(85_304_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_121_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Mul(r: u32, ) -> Weight {
		(86_309_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((1_128_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivS(r: u32, ) -> Weight {
		(85_909_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((1_234_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivU(r: u32, ) -> Weight {
		(89_745_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((1_065_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64RemS(r: u32, ) -> Weight {
		(84_080_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((1_410_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64And(r: u32, ) -> Weight {
		(89_867_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((1_092_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Or(r: u32, ) -> Weight {
		(86_719_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_074_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Xor(r: u32, ) -> Weight {
		(83_239_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((1_273_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Shl(r: u32, ) -> Weight {
		(89_776_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_017_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ShrS(r: u32, ) -> Weight {
		(85_928_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_112_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotl(r: u32, ) -> Weight {
		(87_289_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((1_171_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotr(r: u32, ) -> Weight {
		(86_438_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_208_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight {
		(87_702_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((814_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I32WrapI64(r: u32, ) -> Weight {
		(86_763_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((889_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Eq(r: u32, ) -> Weight {
		(88_270_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_043_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ne(r: u32, ) -> Weight {
		(87_341_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((1_058_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Lt(r: u32, ) -> Weight {
		(86_179_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_103_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Gt(r: u32, ) -> Weight {
		(85_928_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_105_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Le(r: u32, ) -> Weight {
		(86_419_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_065_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ge(r: u32, ) -> Weight {
		(86_039_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_076_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Abs(r: u32, ) -> Weight {
		(90_017_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((805_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Neg(r: u32, ) -> Weight {
		(86_033_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((917_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ceil(r: u32, ) -> Weight {
		(87_157_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((929_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Floor(r: u32, ) -> Weight {
		(84_912_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_034_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Trunc(r: u32, ) -> Weight {
		(84_271_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_080_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Nearest(r: u32, ) -> Weight {
		(86_644_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_135_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sqrt(r: u32, ) -> Weight {
		(87_372_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((917_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Add(r: u32, ) -> Weight {
		(85_942_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_111_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sub(r: u32, ) -> Weight {
		(85_673_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_119_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Mul(r: u32, ) -> Weight {
		(85_630_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((1_130_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Div(r: u32, ) -> Weight {
		(86_528_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_084_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Min(r: u32, ) -> Weight {
		(85_893_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_184_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Max(r: u32, ) -> Weight {
		(86_524_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_182_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Copysign(r: u32, ) -> Weight {
		(82_463_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((1_357_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Select(r: u32, ) -> Weight {
		(87_311_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_230_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_If(r: u32, ) -> Weight {
		(85_853_000 as Weight)
			// Standard Error: 0
			.saturating_add((529_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Else(r: u32, ) -> Weight {
		(85_842_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((842_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetLocal(r: u32, ) -> Weight {
		(85_649_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((583_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetLocal(r: u32, ) -> Weight {
		(85_741_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((561_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_TeeLocal(r: u32, ) -> Weight {
		(85_974_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((3_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetGlobal(_r: u32, ) -> Weight {
		(85_982_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetGlobal(_r: u32, ) -> Weight {
		(86_097_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CurrentMemory(r: u32, ) -> Weight {
		(85_732_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((600_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 3]`.
	fn instruction_GrowMemory(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 33_122_000
			.saturating_add((1_505_901_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Br(r: u32, ) -> Weight {
		(85_154_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((333_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrIf(r: u32, ) -> Weight {
		(87_410_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((480_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrTable(r: u32, ) -> Weight {
		(85_848_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_128_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `s` is `[1, 50]`.
	fn instruction_BrTable_per_elem(s: u32, ) -> Weight {
		(87_303_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((23_000 as Weight).saturating_mul(s as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Call(r: u32, ) -> Weight {
		(86_570_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((6_870_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CallIndirect(r: u32, ) -> Weight {
		(86_852_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((8_356_000 as Weight).saturating_mul(r as Weight))
	}
}
