//! Autogenerated weights for cosmwasm
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-06, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `spm`, CPU: `12th Gen Intel(R) Core(TM) i7-1280P`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dali-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/2xfdn6qcf9jd48b8fmb4lvnqsahnw274-composable/bin/composable
// benchmark
// pallet
// --chain=dali-dev
// --execution=wasm
// --wasm-execution=compiled
// --wasm-instantiation-strategy=legacy-instance-reuse
// --pallet=cosmwasm
// --extrinsic=*
// --steps=50
// --repeat=10
// --output
// parachain/frame/cosmwasm/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(trivial_numeric_casts)]
#![allow(clippy::unnecessary_cast)]
#![allow(non_snake_case)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for cosmwasm.
pub trait WeightInfo {
	fn upload(n: u32, ) -> Weight;
	fn instantiate(n: u32, ) -> Weight;
	fn execute(n: u32, ) -> Weight;
	fn migrate() -> Weight;
	fn update_admin() -> Weight;
	fn db_read() -> Weight;
	fn db_read_other_contract() -> Weight;
	fn db_write() -> Weight;
	fn db_scan() -> Weight;
	fn db_next() -> Weight;
	fn db_remove() -> Weight;
	fn balance() -> Weight;
	fn transfer(n: u32, ) -> Weight;
	fn set_contract_meta() -> Weight;
	fn running_contract_meta() -> Weight;
	fn contract_meta() -> Weight;
	fn addr_validate() -> Weight;
	fn addr_canonicalize() -> Weight;
	fn addr_humanize() -> Weight;
	fn secp256k1_recover_pubkey() -> Weight;
	fn secp256k1_verify() -> Weight;
	fn ed25519_verify() -> Weight;
	fn ed25519_batch_verify() -> Weight;
	fn continue_instantiate(n: u32, ) -> Weight;
	fn continue_execute(n: u32, ) -> Weight;
	fn continue_migrate() -> Weight;
	fn continue_query() -> Weight;
	fn continue_reply() -> Weight;
	fn query_contract_info() -> Weight;
	fn query_code_info() -> Weight;
	fn query_raw() -> Weight;
	fn instruction_I64Const(r: u32, ) -> Weight;
	fn instruction_F64Const(r: u32, ) -> Weight;
	fn instruction_I64Load(r: u32, ) -> Weight;
	fn instruction_F64Load(r: u32, ) -> Weight;
	fn instruction_I64Store(r: u32, ) -> Weight;
	fn instruction_F64Store(r: u32, ) -> Weight;
	fn instruction_I64Eq(r: u32, ) -> Weight;
	fn instruction_I64Eqz(r: u32, ) -> Weight;
	fn instruction_I64Ne(r: u32, ) -> Weight;
	fn instruction_I64LtS(r: u32, ) -> Weight;
	fn instruction_I64GtS(r: u32, ) -> Weight;
	fn instruction_I64LeS(r: u32, ) -> Weight;
	fn instruction_I64GeS(r: u32, ) -> Weight;
	fn instruction_I64Clz(r: u32, ) -> Weight;
	fn instruction_I64Ctz(r: u32, ) -> Weight;
	fn instruction_I64Popcnt(r: u32, ) -> Weight;
	fn instruction_I64Add(r: u32, ) -> Weight;
	fn instruction_I64Sub(r: u32, ) -> Weight;
	fn instruction_I64Mul(r: u32, ) -> Weight;
	fn instruction_I64DivS(r: u32, ) -> Weight;
	fn instruction_I64DivU(r: u32, ) -> Weight;
	fn instruction_I64RemS(r: u32, ) -> Weight;
	fn instruction_I64And(r: u32, ) -> Weight;
	fn instruction_I64Or(r: u32, ) -> Weight;
	fn instruction_I64Xor(r: u32, ) -> Weight;
	fn instruction_I64Shl(r: u32, ) -> Weight;
	fn instruction_I64ShrS(r: u32, ) -> Weight;
	fn instruction_I64Rotl(r: u32, ) -> Weight;
	fn instruction_I64Rotr(r: u32, ) -> Weight;
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight;
	fn instruction_I32WrapI64(r: u32, ) -> Weight;
	fn instruction_F64Eq(r: u32, ) -> Weight;
	fn instruction_F64Ne(r: u32, ) -> Weight;
	fn instruction_F64Lt(r: u32, ) -> Weight;
	fn instruction_F64Gt(r: u32, ) -> Weight;
	fn instruction_F64Le(r: u32, ) -> Weight;
	fn instruction_F64Ge(r: u32, ) -> Weight;
	fn instruction_F64Abs(r: u32, ) -> Weight;
	fn instruction_F64Neg(r: u32, ) -> Weight;
	fn instruction_F64Ceil(r: u32, ) -> Weight;
	fn instruction_F64Floor(r: u32, ) -> Weight;
	fn instruction_F64Trunc(r: u32, ) -> Weight;
	fn instruction_F64Nearest(r: u32, ) -> Weight;
	fn instruction_F64Sqrt(r: u32, ) -> Weight;
	fn instruction_F64Add(r: u32, ) -> Weight;
	fn instruction_F64Sub(r: u32, ) -> Weight;
	fn instruction_F64Mul(r: u32, ) -> Weight;
	fn instruction_F64Div(r: u32, ) -> Weight;
	fn instruction_F64Min(r: u32, ) -> Weight;
	fn instruction_F64Max(r: u32, ) -> Weight;
	fn instruction_F64Copysign(r: u32, ) -> Weight;
	fn instruction_Select(r: u32, ) -> Weight;
	fn instruction_If(r: u32, ) -> Weight;
	fn instruction_Else(r: u32, ) -> Weight;
	fn instruction_GetLocal(r: u32, ) -> Weight;
	fn instruction_SetLocal(r: u32, ) -> Weight;
	fn instruction_TeeLocal(r: u32, ) -> Weight;
	fn instruction_GetGlobal(r: u32, ) -> Weight;
	fn instruction_SetGlobal(r: u32, ) -> Weight;
	fn instruction_CurrentMemory(r: u32, ) -> Weight;
	fn instruction_GrowMemory(r: u32, ) -> Weight;
	fn instruction_Br(r: u32, ) -> Weight;
	fn instruction_BrIf(r: u32, ) -> Weight;
	fn instruction_BrTable(r: u32, ) -> Weight;
	fn instruction_BrTable_per_elem(s: u32, ) -> Weight;
	fn instruction_Call(r: u32, ) -> Weight;
	fn instruction_CallIndirect(r: u32, ) -> Weight;
}

/// Weights for cosmwasm using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Cosmwasm CodeHashToId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CurrentCodeId (r:1 w:1)
	// Storage: Cosmwasm PristineCode (r:0 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:0 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:0 w:1)
	/// The range of component `n` is `[1, 514288]`.
	fn upload(n: u32, ) -> Weight {
		Weight::from_ref_time(316_015_677 as u64)
			// Standard Error: 213
			.saturating_add(Weight::from_ref_time(55_021 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn instantiate(n: u32, ) -> Weight {
		Weight::from_ref_time(283_895_925 as u64)
			// Standard Error: 163_808
			.saturating_add(Weight::from_ref_time(24_565_594 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn execute(n: u32, ) -> Weight {
		Weight::from_ref_time(252_574_960 as u64)
			// Standard Error: 111_636
			.saturating_add(Weight::from_ref_time(24_487_026 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:2 w:2)
	// Storage: Cosmwasm InstrumentedCode (r:2 w:1)
	// Storage: Cosmwasm PristineCode (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CodeHashToId (r:0 w:1)
	fn migrate() -> Weight {
		Weight::from_ref_time(427_631_000 as u64)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	fn update_admin() -> Weight {
		Weight::from_ref_time(209_326_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read() -> Weight {
		Weight::from_ref_time(14_749_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read_other_contract() -> Weight {
		Weight::from_ref_time(14_690_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:1)
	fn db_write() -> Weight {
		Weight::from_ref_time(15_987_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn db_scan() -> Weight {
		Weight::from_ref_time(3_800_000 as u64)
	}
	// Storage: unknown [0x] (r:1 w:0)
	fn db_next() -> Weight {
		Weight::from_ref_time(24_724_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:0 w:1)
	fn db_remove() -> Weight {
		Weight::from_ref_time(11_243_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Tokens Accounts (r:1 w:0)
	fn balance() -> Weight {
		Weight::from_ref_time(4_581_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn transfer(n: u32, ) -> Weight {
		Weight::from_ref_time(37_089_589 as u64)
			// Standard Error: 280_458
			.saturating_add(Weight::from_ref_time(20_468_965 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	fn set_contract_meta() -> Weight {
		Weight::from_ref_time(13_892_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn running_contract_meta() -> Weight {
		Weight::from_ref_time(3_340_000 as u64)
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn contract_meta() -> Weight {
		Weight::from_ref_time(9_788_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	fn addr_validate() -> Weight {
		Weight::from_ref_time(2_384_000 as u64)
	}
	fn addr_canonicalize() -> Weight {
		Weight::from_ref_time(2_379_000 as u64)
	}
	fn addr_humanize() -> Weight {
		Weight::from_ref_time(472_000 as u64)
	}
	fn secp256k1_recover_pubkey() -> Weight {
		Weight::from_ref_time(33_710_000 as u64)
	}
	fn secp256k1_verify() -> Weight {
		Weight::from_ref_time(35_038_000 as u64)
	}
	fn ed25519_verify() -> Weight {
		Weight::from_ref_time(43_487_000 as u64)
	}
	fn ed25519_batch_verify() -> Weight {
		Weight::from_ref_time(55_900_000 as u64)
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn continue_instantiate(n: u32, ) -> Weight {
		Weight::from_ref_time(234_601_820 as u64)
			// Standard Error: 228_640
			.saturating_add(Weight::from_ref_time(21_110_165 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	/// The range of component `n` is `[0, 23]`.
	fn continue_execute(n: u32, ) -> Weight {
		Weight::from_ref_time(181_151_675 as u64)
			// Standard Error: 118_814
			.saturating_add(Weight::from_ref_time(1_592_840 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_migrate() -> Weight {
		Weight::from_ref_time(170_674_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_query() -> Weight {
		Weight::from_ref_time(179_260_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_reply() -> Weight {
		Weight::from_ref_time(186_370_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_contract_info() -> Weight {
		Weight::from_ref_time(20_082_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_code_info() -> Weight {
		Weight::from_ref_time(13_096_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:0)
	fn query_raw() -> Weight {
		Weight::from_ref_time(24_277_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Const(r: u32, ) -> Weight {
		Weight::from_ref_time(3_398_939 as u64)
			// Standard Error: 13_630
			.saturating_add(Weight::from_ref_time(426_295 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Const(r: u32, ) -> Weight {
		Weight::from_ref_time(2_994_424 as u64)
			// Standard Error: 5_049
			.saturating_add(Weight::from_ref_time(403_187 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Load(r: u32, ) -> Weight {
		Weight::from_ref_time(2_002_671 as u64)
			// Standard Error: 27_596
			.saturating_add(Weight::from_ref_time(1_084_664 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Load(r: u32, ) -> Weight {
		Weight::from_ref_time(4_005_399 as u64)
			// Standard Error: 9_851
			.saturating_add(Weight::from_ref_time(961_924 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Store(r: u32, ) -> Weight {
		Weight::from_ref_time(4_163_457 as u64)
			// Standard Error: 5_914
			.saturating_add(Weight::from_ref_time(1_519_205 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Store(r: u32, ) -> Weight {
		Weight::from_ref_time(4_783_028 as u64)
			// Standard Error: 22_599
			.saturating_add(Weight::from_ref_time(1_514_990 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eq(r: u32, ) -> Weight {
		Weight::from_ref_time(3_692_579 as u64)
			// Standard Error: 7_561
			.saturating_add(Weight::from_ref_time(1_027_229 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eqz(r: u32, ) -> Weight {
		Weight::from_ref_time(3_444_982 as u64)
			// Standard Error: 5_693
			.saturating_add(Weight::from_ref_time(811_121 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ne(r: u32, ) -> Weight {
		Weight::from_ref_time(4_762_727 as u64)
			// Standard Error: 17_981
			.saturating_add(Weight::from_ref_time(981_158 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LtS(r: u32, ) -> Weight {
		Weight::from_ref_time(3_735_408 as u64)
			// Standard Error: 18_179
			.saturating_add(Weight::from_ref_time(1_008_188 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GtS(r: u32, ) -> Weight {
		Weight::from_ref_time(4_145_541 as u64)
			// Standard Error: 4_821
			.saturating_add(Weight::from_ref_time(975_465 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LeS(r: u32, ) -> Weight {
		Weight::from_ref_time(4_067_375 as u64)
			// Standard Error: 5_822
			.saturating_add(Weight::from_ref_time(958_739 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GeS(r: u32, ) -> Weight {
		Weight::from_ref_time(3_428_755 as u64)
			// Standard Error: 17_503
			.saturating_add(Weight::from_ref_time(1_036_188 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Clz(r: u32, ) -> Weight {
		Weight::from_ref_time(3_757_546 as u64)
			// Standard Error: 9_891
			.saturating_add(Weight::from_ref_time(751_558 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ctz(r: u32, ) -> Weight {
		Weight::from_ref_time(3_529_854 as u64)
			// Standard Error: 3_534
			.saturating_add(Weight::from_ref_time(817_901 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Popcnt(r: u32, ) -> Weight {
		Weight::from_ref_time(3_454_204 as u64)
			// Standard Error: 3_867
			.saturating_add(Weight::from_ref_time(790_333 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Add(r: u32, ) -> Weight {
		Weight::from_ref_time(4_705_644 as u64)
			// Standard Error: 10_438
			.saturating_add(Weight::from_ref_time(944_355 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Sub(r: u32, ) -> Weight {
		Weight::from_ref_time(3_462_642 as u64)
			// Standard Error: 22_104
			.saturating_add(Weight::from_ref_time(1_103_153 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Mul(r: u32, ) -> Weight {
		Weight::from_ref_time(4_232_138 as u64)
			// Standard Error: 8_379
			.saturating_add(Weight::from_ref_time(971_969 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivS(r: u32, ) -> Weight {
		Weight::from_ref_time(3_629_127 as u64)
			// Standard Error: 5_839
			.saturating_add(Weight::from_ref_time(1_145_322 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivU(r: u32, ) -> Weight {
		Weight::from_ref_time(4_043_242 as u64)
			// Standard Error: 8_788
			.saturating_add(Weight::from_ref_time(1_107_133 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64RemS(r: u32, ) -> Weight {
		Weight::from_ref_time(3_753_313 as u64)
			// Standard Error: 27_891
			.saturating_add(Weight::from_ref_time(1_202_747 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64And(r: u32, ) -> Weight {
		Weight::from_ref_time(4_023_925 as u64)
			// Standard Error: 8_138
			.saturating_add(Weight::from_ref_time(1_007_891 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Or(r: u32, ) -> Weight {
		Weight::from_ref_time(5_273_135 as u64)
			// Standard Error: 15_323
			.saturating_add(Weight::from_ref_time(1_088_574 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Xor(r: u32, ) -> Weight {
		Weight::from_ref_time(3_857_462 as u64)
			// Standard Error: 15_927
			.saturating_add(Weight::from_ref_time(999_978 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Shl(r: u32, ) -> Weight {
		Weight::from_ref_time(3_484_096 as u64)
			// Standard Error: 16_429
			.saturating_add(Weight::from_ref_time(1_120_011 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ShrS(r: u32, ) -> Weight {
		Weight::from_ref_time(4_583_122 as u64)
			// Standard Error: 14_590
			.saturating_add(Weight::from_ref_time(984_055 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotl(r: u32, ) -> Weight {
		Weight::from_ref_time(3_468_122 as u64)
			// Standard Error: 17_568
			.saturating_add(Weight::from_ref_time(1_018_584 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotr(r: u32, ) -> Weight {
		Weight::from_ref_time(4_680_473 as u64)
			// Standard Error: 10_179
			.saturating_add(Weight::from_ref_time(966_761 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight {
		Weight::from_ref_time(3_470_443 as u64)
			// Standard Error: 5_322
			.saturating_add(Weight::from_ref_time(833_095 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I32WrapI64(r: u32, ) -> Weight {
		Weight::from_ref_time(3_782_291 as u64)
			// Standard Error: 9_935
			.saturating_add(Weight::from_ref_time(805_478 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Eq(r: u32, ) -> Weight {
		Weight::from_ref_time(2_884_381 as u64)
			// Standard Error: 19_870
			.saturating_add(Weight::from_ref_time(1_046_441 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ne(r: u32, ) -> Weight {
		Weight::from_ref_time(4_173_485 as u64)
			// Standard Error: 24_632
			.saturating_add(Weight::from_ref_time(1_008_107 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Lt(r: u32, ) -> Weight {
		Weight::from_ref_time(4_160_618 as u64)
			// Standard Error: 6_715
			.saturating_add(Weight::from_ref_time(999_383 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Gt(r: u32, ) -> Weight {
		Weight::from_ref_time(3_998_892 as u64)
			// Standard Error: 9_982
			.saturating_add(Weight::from_ref_time(979_077 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Le(r: u32, ) -> Weight {
		Weight::from_ref_time(3_981_127 as u64)
			// Standard Error: 5_405
			.saturating_add(Weight::from_ref_time(954_394 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ge(r: u32, ) -> Weight {
		Weight::from_ref_time(4_101_921 as u64)
			// Standard Error: 9_065
			.saturating_add(Weight::from_ref_time(1_120_122 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Abs(r: u32, ) -> Weight {
		Weight::from_ref_time(3_754_266 as u64)
			// Standard Error: 5_793
			.saturating_add(Weight::from_ref_time(948_722 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Neg(r: u32, ) -> Weight {
		Weight::from_ref_time(3_216_005 as u64)
			// Standard Error: 18_988
			.saturating_add(Weight::from_ref_time(813_760 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ceil(r: u32, ) -> Weight {
		Weight::from_ref_time(4_253_728 as u64)
			// Standard Error: 9_191
			.saturating_add(Weight::from_ref_time(929_064 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Floor(r: u32, ) -> Weight {
		Weight::from_ref_time(3_960_660 as u64)
			// Standard Error: 10_891
			.saturating_add(Weight::from_ref_time(920_644 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Trunc(r: u32, ) -> Weight {
		Weight::from_ref_time(4_529_367 as u64)
			// Standard Error: 17_861
			.saturating_add(Weight::from_ref_time(918_685 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Nearest(r: u32, ) -> Weight {
		Weight::from_ref_time(3_827_081 as u64)
			// Standard Error: 12_273
			.saturating_add(Weight::from_ref_time(1_320_647 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sqrt(r: u32, ) -> Weight {
		Weight::from_ref_time(3_169_663 as u64)
			// Standard Error: 13_619
			.saturating_add(Weight::from_ref_time(984_628 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Add(r: u32, ) -> Weight {
		Weight::from_ref_time(2_551_819 as u64)
			// Standard Error: 19_123
			.saturating_add(Weight::from_ref_time(1_063_504 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sub(r: u32, ) -> Weight {
		Weight::from_ref_time(4_052_081 as u64)
			// Standard Error: 4_972
			.saturating_add(Weight::from_ref_time(950_072 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Mul(r: u32, ) -> Weight {
		Weight::from_ref_time(2_488_509 as u64)
			// Standard Error: 18_772
			.saturating_add(Weight::from_ref_time(1_077_364 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Div(r: u32, ) -> Weight {
		Weight::from_ref_time(4_456_902 as u64)
			// Standard Error: 9_374
			.saturating_add(Weight::from_ref_time(998_034 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Min(r: u32, ) -> Weight {
		Weight::from_ref_time(3_812_573 as u64)
			// Standard Error: 5_157
			.saturating_add(Weight::from_ref_time(1_182_559 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Max(r: u32, ) -> Weight {
		Weight::from_ref_time(4_437_526 as u64)
			// Standard Error: 6_151
			.saturating_add(Weight::from_ref_time(1_181_428 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Copysign(r: u32, ) -> Weight {
		Weight::from_ref_time(3_454_024 as u64)
			// Standard Error: 14_543
			.saturating_add(Weight::from_ref_time(1_049_083 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Select(r: u32, ) -> Weight {
		Weight::from_ref_time(3_390_676 as u64)
			// Standard Error: 5_036
			.saturating_add(Weight::from_ref_time(1_191_090 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_If(r: u32, ) -> Weight {
		Weight::from_ref_time(2_560_196 as u64)
			// Standard Error: 13_865
			.saturating_add(Weight::from_ref_time(612_313 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Else(r: u32, ) -> Weight {
		Weight::from_ref_time(3_440_227 as u64)
			// Standard Error: 12_354
			.saturating_add(Weight::from_ref_time(913_424 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetLocal(r: u32, ) -> Weight {
		Weight::from_ref_time(2_978_019 as u64)
			// Standard Error: 9_386
			.saturating_add(Weight::from_ref_time(441_550 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetLocal(r: u32, ) -> Weight {
		Weight::from_ref_time(3_393_720 as u64)
			// Standard Error: 12_266
			.saturating_add(Weight::from_ref_time(463_482 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_TeeLocal(r: u32, ) -> Weight {
		Weight::from_ref_time(2_505_420 as u64)
			// Standard Error: 498
			.saturating_add(Weight::from_ref_time(711 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetGlobal(_r: u32, ) -> Weight {
		Weight::from_ref_time(2_791_377 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetGlobal(r: u32, ) -> Weight {
		Weight::from_ref_time(2_573_758 as u64)
			// Standard Error: 967
			.saturating_add(Weight::from_ref_time(465 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CurrentMemory(r: u32, ) -> Weight {
		Weight::from_ref_time(4_312_179 as u64)
			// Standard Error: 13_044
			.saturating_add(Weight::from_ref_time(886_476 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 3]`.
	fn instruction_GrowMemory(r: u32, ) -> Weight {
		Weight::from_ref_time(2_374_000 as u64)
			// Standard Error: 11_065_468
			.saturating_add(Weight::from_ref_time(1_291_829_993 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Br(r: u32, ) -> Weight {
		Weight::from_ref_time(3_030_568 as u64)
			// Standard Error: 5_943
			.saturating_add(Weight::from_ref_time(472_802 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrIf(r: u32, ) -> Weight {
		Weight::from_ref_time(1_887_631 as u64)
			// Standard Error: 13_261
			.saturating_add(Weight::from_ref_time(821_408 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrTable(r: u32, ) -> Weight {
		Weight::from_ref_time(1_397_004 as u64)
			// Standard Error: 19_179
			.saturating_add(Weight::from_ref_time(1_228_680 as u64).saturating_mul(r as u64))
	}
	/// The range of component `s` is `[1, 50]`.
	fn instruction_BrTable_per_elem(_s: u32, ) -> Weight {
		Weight::from_ref_time(4_037_012 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Call(r: u32, ) -> Weight {
		Weight::from_ref_time(8_366_677 as u64)
			// Standard Error: 39_726
			.saturating_add(Weight::from_ref_time(6_486_264 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CallIndirect(r: u32, ) -> Weight {
		Weight::from_ref_time(7_849_204 as u64)
			// Standard Error: 21_845
			.saturating_add(Weight::from_ref_time(7_403_580 as u64).saturating_mul(r as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Cosmwasm CodeHashToId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CurrentCodeId (r:1 w:1)
	// Storage: Cosmwasm PristineCode (r:0 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:0 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:0 w:1)
	/// The range of component `n` is `[1, 514288]`.
	fn upload(n: u32, ) -> Weight {
		Weight::from_ref_time(316_015_677 as u64)
			// Standard Error: 213
			.saturating_add(Weight::from_ref_time(55_021 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn instantiate(n: u32, ) -> Weight {
		Weight::from_ref_time(283_895_925 as u64)
			// Standard Error: 163_808
			.saturating_add(Weight::from_ref_time(24_565_594 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn execute(n: u32, ) -> Weight {
		Weight::from_ref_time(252_574_960 as u64)
			// Standard Error: 111_636
			.saturating_add(Weight::from_ref_time(24_487_026 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:2 w:2)
	// Storage: Cosmwasm InstrumentedCode (r:2 w:1)
	// Storage: Cosmwasm PristineCode (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CodeHashToId (r:0 w:1)
	fn migrate() -> Weight {
		Weight::from_ref_time(427_631_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(9 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	fn update_admin() -> Weight {
		Weight::from_ref_time(209_326_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read() -> Weight {
		Weight::from_ref_time(14_749_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read_other_contract() -> Weight {
		Weight::from_ref_time(14_690_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:1)
	fn db_write() -> Weight {
		Weight::from_ref_time(15_987_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	fn db_scan() -> Weight {
		Weight::from_ref_time(3_800_000 as u64)
	}
	// Storage: unknown [0x] (r:1 w:0)
	fn db_next() -> Weight {
		Weight::from_ref_time(24_724_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:0 w:1)
	fn db_remove() -> Weight {
		Weight::from_ref_time(11_243_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Tokens Accounts (r:1 w:0)
	fn balance() -> Weight {
		Weight::from_ref_time(4_581_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn transfer(n: u32, ) -> Weight {
		Weight::from_ref_time(37_089_589 as u64)
			// Standard Error: 280_458
			.saturating_add(Weight::from_ref_time(20_468_965 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	fn set_contract_meta() -> Weight {
		Weight::from_ref_time(13_892_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	fn running_contract_meta() -> Weight {
		Weight::from_ref_time(3_340_000 as u64)
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn contract_meta() -> Weight {
		Weight::from_ref_time(9_788_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	fn addr_validate() -> Weight {
		Weight::from_ref_time(2_384_000 as u64)
	}
	fn addr_canonicalize() -> Weight {
		Weight::from_ref_time(2_379_000 as u64)
	}
	fn addr_humanize() -> Weight {
		Weight::from_ref_time(472_000 as u64)
	}
	fn secp256k1_recover_pubkey() -> Weight {
		Weight::from_ref_time(33_710_000 as u64)
	}
	fn secp256k1_verify() -> Weight {
		Weight::from_ref_time(35_038_000 as u64)
	}
	fn ed25519_verify() -> Weight {
		Weight::from_ref_time(43_487_000 as u64)
	}
	fn ed25519_batch_verify() -> Weight {
		Weight::from_ref_time(55_900_000 as u64)
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn continue_instantiate(n: u32, ) -> Weight {
		Weight::from_ref_time(234_601_820 as u64)
			// Standard Error: 228_640
			.saturating_add(Weight::from_ref_time(21_110_165 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	/// The range of component `n` is `[0, 23]`.
	fn continue_execute(n: u32, ) -> Weight {
		Weight::from_ref_time(181_151_675 as u64)
			// Standard Error: 118_814
			.saturating_add(Weight::from_ref_time(1_592_840 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_migrate() -> Weight {
		Weight::from_ref_time(170_674_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_query() -> Weight {
		Weight::from_ref_time(179_260_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_reply() -> Weight {
		Weight::from_ref_time(186_370_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_contract_info() -> Weight {
		Weight::from_ref_time(20_082_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_code_info() -> Weight {
		Weight::from_ref_time(13_096_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:0)
	fn query_raw() -> Weight {
		Weight::from_ref_time(24_277_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Const(r: u32, ) -> Weight {
		Weight::from_ref_time(3_398_939 as u64)
			// Standard Error: 13_630
			.saturating_add(Weight::from_ref_time(426_295 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Const(r: u32, ) -> Weight {
		Weight::from_ref_time(2_994_424 as u64)
			// Standard Error: 5_049
			.saturating_add(Weight::from_ref_time(403_187 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Load(r: u32, ) -> Weight {
		Weight::from_ref_time(2_002_671 as u64)
			// Standard Error: 27_596
			.saturating_add(Weight::from_ref_time(1_084_664 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Load(r: u32, ) -> Weight {
		Weight::from_ref_time(4_005_399 as u64)
			// Standard Error: 9_851
			.saturating_add(Weight::from_ref_time(961_924 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Store(r: u32, ) -> Weight {
		Weight::from_ref_time(4_163_457 as u64)
			// Standard Error: 5_914
			.saturating_add(Weight::from_ref_time(1_519_205 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Store(r: u32, ) -> Weight {
		Weight::from_ref_time(4_783_028 as u64)
			// Standard Error: 22_599
			.saturating_add(Weight::from_ref_time(1_514_990 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eq(r: u32, ) -> Weight {
		Weight::from_ref_time(3_692_579 as u64)
			// Standard Error: 7_561
			.saturating_add(Weight::from_ref_time(1_027_229 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eqz(r: u32, ) -> Weight {
		Weight::from_ref_time(3_444_982 as u64)
			// Standard Error: 5_693
			.saturating_add(Weight::from_ref_time(811_121 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ne(r: u32, ) -> Weight {
		Weight::from_ref_time(4_762_727 as u64)
			// Standard Error: 17_981
			.saturating_add(Weight::from_ref_time(981_158 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LtS(r: u32, ) -> Weight {
		Weight::from_ref_time(3_735_408 as u64)
			// Standard Error: 18_179
			.saturating_add(Weight::from_ref_time(1_008_188 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GtS(r: u32, ) -> Weight {
		Weight::from_ref_time(4_145_541 as u64)
			// Standard Error: 4_821
			.saturating_add(Weight::from_ref_time(975_465 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LeS(r: u32, ) -> Weight {
		Weight::from_ref_time(4_067_375 as u64)
			// Standard Error: 5_822
			.saturating_add(Weight::from_ref_time(958_739 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GeS(r: u32, ) -> Weight {
		Weight::from_ref_time(3_428_755 as u64)
			// Standard Error: 17_503
			.saturating_add(Weight::from_ref_time(1_036_188 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Clz(r: u32, ) -> Weight {
		Weight::from_ref_time(3_757_546 as u64)
			// Standard Error: 9_891
			.saturating_add(Weight::from_ref_time(751_558 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ctz(r: u32, ) -> Weight {
		Weight::from_ref_time(3_529_854 as u64)
			// Standard Error: 3_534
			.saturating_add(Weight::from_ref_time(817_901 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Popcnt(r: u32, ) -> Weight {
		Weight::from_ref_time(3_454_204 as u64)
			// Standard Error: 3_867
			.saturating_add(Weight::from_ref_time(790_333 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Add(r: u32, ) -> Weight {
		Weight::from_ref_time(4_705_644 as u64)
			// Standard Error: 10_438
			.saturating_add(Weight::from_ref_time(944_355 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Sub(r: u32, ) -> Weight {
		Weight::from_ref_time(3_462_642 as u64)
			// Standard Error: 22_104
			.saturating_add(Weight::from_ref_time(1_103_153 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Mul(r: u32, ) -> Weight {
		Weight::from_ref_time(4_232_138 as u64)
			// Standard Error: 8_379
			.saturating_add(Weight::from_ref_time(971_969 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivS(r: u32, ) -> Weight {
		Weight::from_ref_time(3_629_127 as u64)
			// Standard Error: 5_839
			.saturating_add(Weight::from_ref_time(1_145_322 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivU(r: u32, ) -> Weight {
		Weight::from_ref_time(4_043_242 as u64)
			// Standard Error: 8_788
			.saturating_add(Weight::from_ref_time(1_107_133 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64RemS(r: u32, ) -> Weight {
		Weight::from_ref_time(3_753_313 as u64)
			// Standard Error: 27_891
			.saturating_add(Weight::from_ref_time(1_202_747 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64And(r: u32, ) -> Weight {
		Weight::from_ref_time(4_023_925 as u64)
			// Standard Error: 8_138
			.saturating_add(Weight::from_ref_time(1_007_891 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Or(r: u32, ) -> Weight {
		Weight::from_ref_time(5_273_135 as u64)
			// Standard Error: 15_323
			.saturating_add(Weight::from_ref_time(1_088_574 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Xor(r: u32, ) -> Weight {
		Weight::from_ref_time(3_857_462 as u64)
			// Standard Error: 15_927
			.saturating_add(Weight::from_ref_time(999_978 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Shl(r: u32, ) -> Weight {
		Weight::from_ref_time(3_484_096 as u64)
			// Standard Error: 16_429
			.saturating_add(Weight::from_ref_time(1_120_011 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ShrS(r: u32, ) -> Weight {
		Weight::from_ref_time(4_583_122 as u64)
			// Standard Error: 14_590
			.saturating_add(Weight::from_ref_time(984_055 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotl(r: u32, ) -> Weight {
		Weight::from_ref_time(3_468_122 as u64)
			// Standard Error: 17_568
			.saturating_add(Weight::from_ref_time(1_018_584 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotr(r: u32, ) -> Weight {
		Weight::from_ref_time(4_680_473 as u64)
			// Standard Error: 10_179
			.saturating_add(Weight::from_ref_time(966_761 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight {
		Weight::from_ref_time(3_470_443 as u64)
			// Standard Error: 5_322
			.saturating_add(Weight::from_ref_time(833_095 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I32WrapI64(r: u32, ) -> Weight {
		Weight::from_ref_time(3_782_291 as u64)
			// Standard Error: 9_935
			.saturating_add(Weight::from_ref_time(805_478 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Eq(r: u32, ) -> Weight {
		Weight::from_ref_time(2_884_381 as u64)
			// Standard Error: 19_870
			.saturating_add(Weight::from_ref_time(1_046_441 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ne(r: u32, ) -> Weight {
		Weight::from_ref_time(4_173_485 as u64)
			// Standard Error: 24_632
			.saturating_add(Weight::from_ref_time(1_008_107 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Lt(r: u32, ) -> Weight {
		Weight::from_ref_time(4_160_618 as u64)
			// Standard Error: 6_715
			.saturating_add(Weight::from_ref_time(999_383 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Gt(r: u32, ) -> Weight {
		Weight::from_ref_time(3_998_892 as u64)
			// Standard Error: 9_982
			.saturating_add(Weight::from_ref_time(979_077 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Le(r: u32, ) -> Weight {
		Weight::from_ref_time(3_981_127 as u64)
			// Standard Error: 5_405
			.saturating_add(Weight::from_ref_time(954_394 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ge(r: u32, ) -> Weight {
		Weight::from_ref_time(4_101_921 as u64)
			// Standard Error: 9_065
			.saturating_add(Weight::from_ref_time(1_120_122 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Abs(r: u32, ) -> Weight {
		Weight::from_ref_time(3_754_266 as u64)
			// Standard Error: 5_793
			.saturating_add(Weight::from_ref_time(948_722 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Neg(r: u32, ) -> Weight {
		Weight::from_ref_time(3_216_005 as u64)
			// Standard Error: 18_988
			.saturating_add(Weight::from_ref_time(813_760 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ceil(r: u32, ) -> Weight {
		Weight::from_ref_time(4_253_728 as u64)
			// Standard Error: 9_191
			.saturating_add(Weight::from_ref_time(929_064 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Floor(r: u32, ) -> Weight {
		Weight::from_ref_time(3_960_660 as u64)
			// Standard Error: 10_891
			.saturating_add(Weight::from_ref_time(920_644 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Trunc(r: u32, ) -> Weight {
		Weight::from_ref_time(4_529_367 as u64)
			// Standard Error: 17_861
			.saturating_add(Weight::from_ref_time(918_685 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Nearest(r: u32, ) -> Weight {
		Weight::from_ref_time(3_827_081 as u64)
			// Standard Error: 12_273
			.saturating_add(Weight::from_ref_time(1_320_647 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sqrt(r: u32, ) -> Weight {
		Weight::from_ref_time(3_169_663 as u64)
			// Standard Error: 13_619
			.saturating_add(Weight::from_ref_time(984_628 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Add(r: u32, ) -> Weight {
		Weight::from_ref_time(2_551_819 as u64)
			// Standard Error: 19_123
			.saturating_add(Weight::from_ref_time(1_063_504 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sub(r: u32, ) -> Weight {
		Weight::from_ref_time(4_052_081 as u64)
			// Standard Error: 4_972
			.saturating_add(Weight::from_ref_time(950_072 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Mul(r: u32, ) -> Weight {
		Weight::from_ref_time(2_488_509 as u64)
			// Standard Error: 18_772
			.saturating_add(Weight::from_ref_time(1_077_364 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Div(r: u32, ) -> Weight {
		Weight::from_ref_time(4_456_902 as u64)
			// Standard Error: 9_374
			.saturating_add(Weight::from_ref_time(998_034 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Min(r: u32, ) -> Weight {
		Weight::from_ref_time(3_812_573 as u64)
			// Standard Error: 5_157
			.saturating_add(Weight::from_ref_time(1_182_559 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Max(r: u32, ) -> Weight {
		Weight::from_ref_time(4_437_526 as u64)
			// Standard Error: 6_151
			.saturating_add(Weight::from_ref_time(1_181_428 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Copysign(r: u32, ) -> Weight {
		Weight::from_ref_time(3_454_024 as u64)
			// Standard Error: 14_543
			.saturating_add(Weight::from_ref_time(1_049_083 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Select(r: u32, ) -> Weight {
		Weight::from_ref_time(3_390_676 as u64)
			// Standard Error: 5_036
			.saturating_add(Weight::from_ref_time(1_191_090 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_If(r: u32, ) -> Weight {
		Weight::from_ref_time(2_560_196 as u64)
			// Standard Error: 13_865
			.saturating_add(Weight::from_ref_time(612_313 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Else(r: u32, ) -> Weight {
		Weight::from_ref_time(3_440_227 as u64)
			// Standard Error: 12_354
			.saturating_add(Weight::from_ref_time(913_424 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetLocal(r: u32, ) -> Weight {
		Weight::from_ref_time(2_978_019 as u64)
			// Standard Error: 9_386
			.saturating_add(Weight::from_ref_time(441_550 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetLocal(r: u32, ) -> Weight {
		Weight::from_ref_time(3_393_720 as u64)
			// Standard Error: 12_266
			.saturating_add(Weight::from_ref_time(463_482 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_TeeLocal(r: u32, ) -> Weight {
		Weight::from_ref_time(2_505_420 as u64)
			// Standard Error: 498
			.saturating_add(Weight::from_ref_time(711 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetGlobal(_r: u32, ) -> Weight {
		Weight::from_ref_time(2_791_377 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetGlobal(r: u32, ) -> Weight {
		Weight::from_ref_time(2_573_758 as u64)
			// Standard Error: 967
			.saturating_add(Weight::from_ref_time(465 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CurrentMemory(r: u32, ) -> Weight {
		Weight::from_ref_time(4_312_179 as u64)
			// Standard Error: 13_044
			.saturating_add(Weight::from_ref_time(886_476 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 3]`.
	fn instruction_GrowMemory(r: u32, ) -> Weight {
		Weight::from_ref_time(2_374_000 as u64)
			// Standard Error: 11_065_468
			.saturating_add(Weight::from_ref_time(1_291_829_993 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Br(r: u32, ) -> Weight {
		Weight::from_ref_time(3_030_568 as u64)
			// Standard Error: 5_943
			.saturating_add(Weight::from_ref_time(472_802 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrIf(r: u32, ) -> Weight {
		Weight::from_ref_time(1_887_631 as u64)
			// Standard Error: 13_261
			.saturating_add(Weight::from_ref_time(821_408 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrTable(r: u32, ) -> Weight {
		Weight::from_ref_time(1_397_004 as u64)
			// Standard Error: 19_179
			.saturating_add(Weight::from_ref_time(1_228_680 as u64).saturating_mul(r as u64))
	}
	/// The range of component `s` is `[1, 50]`.
	fn instruction_BrTable_per_elem(_s: u32, ) -> Weight {
		Weight::from_ref_time(4_037_012 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Call(r: u32, ) -> Weight {
		Weight::from_ref_time(8_366_677 as u64)
			// Standard Error: 39_726
			.saturating_add(Weight::from_ref_time(6_486_264 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CallIndirect(r: u32, ) -> Weight {
		Weight::from_ref_time(7_849_204 as u64)
			// Standard Error: 21_845
			.saturating_add(Weight::from_ref_time(7_403_580 as u64).saturating_mul(r as u64))
	}
}
