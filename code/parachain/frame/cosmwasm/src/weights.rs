//! Autogenerated weights for cosmwasm
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-09, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `dev`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dali-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/composable
// benchmark
// pallet
// --chain
// dali-dev
// --execution=wasm
// --wasm-execution=compiled
// --wasm-instantiation-strategy=legacy-instance-reuse
// --pallet=cosmwasm
// --extrinsic=*
// --steps=50
// --repeat=20
// --output
// parachain/frame/cosmwasm/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(trivial_numeric_casts)]
#![allow(non_snake_case)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for cosmwasm.
pub trait WeightInfo {
	fn upload(n: u32, ) -> Weight;
	fn instantiate(n: u32, ) -> Weight;
	fn execute(n: u32, ) -> Weight;
	fn migrate() -> Weight;
	fn update_admin() -> Weight;
	fn clear_admin() -> Weight;
	fn db_read() -> Weight;
	fn db_read_other_contract() -> Weight;
	fn db_write() -> Weight;
	fn db_scan() -> Weight;
	fn db_next() -> Weight;
	fn db_remove() -> Weight;
	fn balance() -> Weight;
	fn transfer(n: u32, ) -> Weight;
	fn set_contract_meta() -> Weight;
	fn running_contract_meta() -> Weight;
	fn contract_meta() -> Weight;
	fn addr_validate() -> Weight;
	fn addr_canonicalize() -> Weight;
	fn addr_humanize() -> Weight;
	fn secp256k1_recover_pubkey() -> Weight;
	fn secp256k1_verify() -> Weight;
	fn ed25519_verify() -> Weight;
	fn ed25519_batch_verify() -> Weight;
	fn continue_instantiate(n: u32, ) -> Weight;
	fn continue_execute(n: u32, ) -> Weight;
	fn continue_migrate() -> Weight;
	fn query_info() -> Weight;
	fn query_continuation() -> Weight;
	fn query_raw() -> Weight;
	fn instruction_I64Const(r: u32, ) -> Weight;
	fn instruction_F64Const(r: u32, ) -> Weight;
	fn instruction_I64Load(r: u32, ) -> Weight;
	fn instruction_F64Load(r: u32, ) -> Weight;
	fn instruction_I64Store(r: u32, ) -> Weight;
	fn instruction_F64Store(r: u32, ) -> Weight;
	fn instruction_I64Eq(r: u32, ) -> Weight;
	fn instruction_I64Eqz(r: u32, ) -> Weight;
	fn instruction_I64Ne(r: u32, ) -> Weight;
	fn instruction_I64LtS(r: u32, ) -> Weight;
	fn instruction_I64GtS(r: u32, ) -> Weight;
	fn instruction_I64LeS(r: u32, ) -> Weight;
	fn instruction_I64GeS(r: u32, ) -> Weight;
	fn instruction_I64Clz(r: u32, ) -> Weight;
	fn instruction_I64Ctz(r: u32, ) -> Weight;
	fn instruction_I64Popcnt(r: u32, ) -> Weight;
	fn instruction_I64Add(r: u32, ) -> Weight;
	fn instruction_I64Mul(r: u32, ) -> Weight;
	fn instruction_I64DivS(r: u32, ) -> Weight;
	fn instruction_I64DivU(r: u32, ) -> Weight;
	fn instruction_I64RemS(r: u32, ) -> Weight;
	fn instruction_I64And(r: u32, ) -> Weight;
	fn instruction_I64Or(r: u32, ) -> Weight;
	fn instruction_I64Xor(r: u32, ) -> Weight;
	fn instruction_I64Shl(r: u32, ) -> Weight;
	fn instruction_I64ShrS(r: u32, ) -> Weight;
	fn instruction_I64Rotl(r: u32, ) -> Weight;
	fn instruction_I64Rotr(r: u32, ) -> Weight;
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight;
	fn instruction_I32WrapI64(r: u32, ) -> Weight;
	fn instruction_F64Eq(r: u32, ) -> Weight;
	fn instruction_F64Ne(r: u32, ) -> Weight;
	fn instruction_F64Lt(r: u32, ) -> Weight;
	fn instruction_F64Gt(r: u32, ) -> Weight;
	fn instruction_F64Le(r: u32, ) -> Weight;
	fn instruction_F64Ge(r: u32, ) -> Weight;
	fn instruction_F64Abs(r: u32, ) -> Weight;
	fn instruction_F64Neg(r: u32, ) -> Weight;
	fn instruction_F64Ceil(r: u32, ) -> Weight;
	fn instruction_F64Floor(r: u32, ) -> Weight;
	fn instruction_F64Trunc(r: u32, ) -> Weight;
	fn instruction_F64Nearest(r: u32, ) -> Weight;
	fn instruction_F64Sqrt(r: u32, ) -> Weight;
	fn instruction_F64Add(r: u32, ) -> Weight;
	fn instruction_F64Sub(r: u32, ) -> Weight;
	fn instruction_F64Mul(r: u32, ) -> Weight;
	fn instruction_F64Div(r: u32, ) -> Weight;
	fn instruction_F64Min(r: u32, ) -> Weight;
	fn instruction_F64Max(r: u32, ) -> Weight;
	fn instruction_F64Copysign(r: u32, ) -> Weight;
	fn instruction_Select(r: u32, ) -> Weight;
	fn instruction_If(r: u32, ) -> Weight;
	fn instruction_Else(r: u32, ) -> Weight;
	fn instruction_GetLocal(r: u32, ) -> Weight;
	fn instruction_SetLocal(r: u32, ) -> Weight;
	fn instruction_TeeLocal(r: u32, ) -> Weight;
	fn instruction_GetGlobal(r: u32, ) -> Weight;
	fn instruction_SetGlobal(r: u32, ) -> Weight;
	fn instruction_CurrentMemory(r: u32, ) -> Weight;
	fn instruction_GrowMemory(r: u32, ) -> Weight;
	fn instruction_Br(r: u32, ) -> Weight;
	fn instruction_BrIf(r: u32, ) -> Weight;
	fn instruction_BrTable(r: u32, ) -> Weight;
	fn instruction_BrTable_per_elem(s: u32, ) -> Weight;
	fn instruction_Call(r: u32, ) -> Weight;
}

/// Weights for cosmwasm using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Cosmwasm CodeHashToId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CurrentCodeId (r:1 w:1)
	// Storage: Cosmwasm PristineCode (r:0 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:0 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:0 w:1)
	/// The range of component `n` is `[1, 514288]`.
	fn upload(n: u32, ) -> Weight {
		(233_895_000 as Weight)
			// Standard Error: 0
			.saturating_add((45_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 20]`.
	fn instantiate(n: u32, ) -> Weight {
		(1_105_155_000 as Weight)
			// Standard Error: 346_000
			.saturating_add((24_950_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 20]`.
	fn execute(n: u32, ) -> Weight {
		(1_072_459_000 as Weight)
			// Standard Error: 391_000
			.saturating_add((27_535_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:2 w:2)
	// Storage: Cosmwasm PristineCode (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm CodeHashToId (r:0 w:1)
	fn migrate() -> Weight {
		(956_671_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn update_admin() -> Weight {
		(234_751_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn clear_admin() -> Weight {
		(233_668_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read() -> Weight {
		(8_125_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read_other_contract() -> Weight {
		(7_792_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:1)
	fn db_write() -> Weight {
		(15_583_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn db_scan() -> Weight {
		(4_167_000 as Weight)
	}
	// Storage: unknown [0x] (r:1 w:0)
	fn db_next() -> Weight {
		(55_626_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:0 w:1)
	fn db_remove() -> Weight {
		(5_417_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Tokens Accounts (r:1 w:0)
	fn balance() -> Weight {
		(2_958_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 20]`.
	fn transfer(n: u32, ) -> Weight {
		(9_969_000 as Weight)
			// Standard Error: 45_000
			.saturating_add((23_664_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	fn set_contract_meta() -> Weight {
		(6_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn running_contract_meta() -> Weight {
		(3_584_000 as Weight)
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn contract_meta() -> Weight {
		(3_750_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn addr_validate() -> Weight {
		(792_000 as Weight)
	}
	fn addr_canonicalize() -> Weight {
		(792_000 as Weight)
	}
	fn addr_humanize() -> Weight {
		(167_000 as Weight)
	}
	fn secp256k1_recover_pubkey() -> Weight {
		(33_917_000 as Weight)
	}
	fn secp256k1_verify() -> Weight {
		(250_000 as Weight)
	}
	fn ed25519_verify() -> Weight {
		(37_375_000 as Weight)
	}
	fn ed25519_batch_verify() -> Weight {
		(74_125_000 as Weight)
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 20]`.
	fn continue_instantiate(n: u32, ) -> Weight {
		(1_083_488_000 as Weight)
			// Standard Error: 135_000
			.saturating_add((23_815_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	/// The range of component `n` is `[0, 20]`.
	fn continue_execute(n: u32, ) -> Weight {
		(1_050_411_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((567_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_migrate() -> Weight {
		(894_087_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn query_info() -> Weight {
		(7_542_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn query_continuation() -> Weight {
		(882_170_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:0)
	fn query_raw() -> Weight {
		(12_375_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Const(r: u32, ) -> Weight {
		(169_224_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((451_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Const(r: u32, ) -> Weight {
		(170_784_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((413_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Load(r: u32, ) -> Weight {
		(170_071_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((1_451_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Load(r: u32, ) -> Weight {
		(170_996_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_447_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Store(r: u32, ) -> Weight {
		(167_568_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((1_646_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Store(r: u32, ) -> Weight {
		(168_315_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((1_693_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eq(r: u32, ) -> Weight {
		(174_083_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((846_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eqz(r: u32, ) -> Weight {
		(169_723_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((633_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ne(r: u32, ) -> Weight {
		(169_507_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((943_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LtS(r: u32, ) -> Weight {
		(169_984_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((920_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GtS(r: u32, ) -> Weight {
		(169_454_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((936_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LeS(r: u32, ) -> Weight {
		(169_691_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((939_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GeS(r: u32, ) -> Weight {
		(169_207_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((952_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Clz(r: u32, ) -> Weight {
		(173_459_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((585_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ctz(r: u32, ) -> Weight {
		(169_561_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((635_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Popcnt(r: u32, ) -> Weight {
		(172_044_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((588_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Add(r: u32, ) -> Weight {
		(170_447_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((938_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Mul(r: u32, ) -> Weight {
		(169_466_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((945_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivS(r: u32, ) -> Weight {
		(170_151_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((979_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivU(r: u32, ) -> Weight {
		(169_890_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((967_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64RemS(r: u32, ) -> Weight {
		(169_881_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((966_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64And(r: u32, ) -> Weight {
		(169_525_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((947_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Or(r: u32, ) -> Weight {
		(169_976_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((929_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Xor(r: u32, ) -> Weight {
		(170_193_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((942_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Shl(r: u32, ) -> Weight {
		(169_762_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((987_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ShrS(r: u32, ) -> Weight {
		(169_593_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((960_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotl(r: u32, ) -> Weight {
		(175_964_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((865_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotr(r: u32, ) -> Weight {
		(169_423_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((1_014_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight {
		(174_302_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((525_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I32WrapI64(r: u32, ) -> Weight {
		(169_849_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((646_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Eq(r: u32, ) -> Weight {
		(169_288_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_006_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ne(r: u32, ) -> Weight {
		(169_662_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((974_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Lt(r: u32, ) -> Weight {
		(169_677_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((979_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Gt(r: u32, ) -> Weight {
		(170_826_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((938_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Le(r: u32, ) -> Weight {
		(170_126_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((954_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ge(r: u32, ) -> Weight {
		(169_540_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((959_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Abs(r: u32, ) -> Weight {
		(170_702_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((704_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Neg(r: u32, ) -> Weight {
		(169_057_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((722_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ceil(r: u32, ) -> Weight {
		(169_428_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((784_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Floor(r: u32, ) -> Weight {
		(169_138_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((790_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Trunc(r: u32, ) -> Weight {
		(169_330_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((767_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Nearest(r: u32, ) -> Weight {
		(169_390_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((961_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sqrt(r: u32, ) -> Weight {
		(169_305_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((818_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Add(r: u32, ) -> Weight {
		(173_624_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((844_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sub(r: u32, ) -> Weight {
		(169_711_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((981_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Mul(r: u32, ) -> Weight {
		(171_590_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((973_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Div(r: u32, ) -> Weight {
		(171_696_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((1_041_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Min(r: u32, ) -> Weight {
		(171_002_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((990_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Max(r: u32, ) -> Weight {
		(169_432_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((1_073_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Copysign(r: u32, ) -> Weight {
		(169_289_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((1_085_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Select(r: u32, ) -> Weight {
		(172_042_000 as Weight)
			// Standard Error: 40_000
			.saturating_add((1_349_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_If(r: u32, ) -> Weight {
		(172_923_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((413_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Else(r: u32, ) -> Weight {
		(174_693_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((727_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetLocal(r: u32, ) -> Weight {
		(168_434_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((542_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetLocal(r: u32, ) -> Weight {
		(171_036_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((419_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_TeeLocal(_r: u32, ) -> Weight {
		(174_016_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetGlobal(r: u32, ) -> Weight {
		(169_109_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((68_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetGlobal(r: u32, ) -> Weight {
		(169_344_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((13_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CurrentMemory(r: u32, ) -> Weight {
		(168_465_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((530_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 3]`.
	fn instruction_GrowMemory(r: u32, ) -> Weight {
		(8_201_000 as Weight)
			// Standard Error: 29_122_000
			.saturating_add((1_997_757_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Br(r: u32, ) -> Weight {
		(168_894_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((376_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrIf(r: u32, ) -> Weight {
		(177_038_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((280_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrTable(r: u32, ) -> Weight {
		(169_569_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((1_167_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `s` is `[1, 50]`.
	fn instruction_BrTable_per_elem(_s: u32, ) -> Weight {
		(177_821_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Call(r: u32, ) -> Weight {
		(177_754_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((6_495_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Cosmwasm CodeHashToId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CurrentCodeId (r:1 w:1)
	// Storage: Cosmwasm PristineCode (r:0 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:0 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:0 w:1)
	/// The range of component `n` is `[1, 514288]`.
	fn upload(n: u32, ) -> Weight {
		(233_895_000 as Weight)
			// Standard Error: 0
			.saturating_add((45_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 20]`.
	fn instantiate(n: u32, ) -> Weight {
		(1_105_155_000 as Weight)
			// Standard Error: 346_000
			.saturating_add((24_950_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 20]`.
	fn execute(n: u32, ) -> Weight {
		(1_072_459_000 as Weight)
			// Standard Error: 391_000
			.saturating_add((27_535_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:2 w:2)
	// Storage: Cosmwasm PristineCode (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm CodeHashToId (r:0 w:1)
	fn migrate() -> Weight {
		(956_671_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn update_admin() -> Weight {
		(234_751_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn clear_admin() -> Weight {
		(233_668_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read() -> Weight {
		(8_125_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read_other_contract() -> Weight {
		(7_792_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:1)
	fn db_write() -> Weight {
		(15_583_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn db_scan() -> Weight {
		(4_167_000 as Weight)
	}
	// Storage: unknown [0x] (r:1 w:0)
	fn db_next() -> Weight {
		(55_626_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:0 w:1)
	fn db_remove() -> Weight {
		(5_417_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Tokens Accounts (r:1 w:0)
	fn balance() -> Weight {
		(2_958_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 20]`.
	fn transfer(n: u32, ) -> Weight {
		(9_969_000 as Weight)
			// Standard Error: 45_000
			.saturating_add((23_664_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	fn set_contract_meta() -> Weight {
		(6_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn running_contract_meta() -> Weight {
		(3_584_000 as Weight)
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn contract_meta() -> Weight {
		(3_750_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn addr_validate() -> Weight {
		(792_000 as Weight)
	}
	fn addr_canonicalize() -> Weight {
		(792_000 as Weight)
	}
	fn addr_humanize() -> Weight {
		(167_000 as Weight)
	}
	fn secp256k1_recover_pubkey() -> Weight {
		(33_917_000 as Weight)
	}
	fn secp256k1_verify() -> Weight {
		(250_000 as Weight)
	}
	fn ed25519_verify() -> Weight {
		(37_375_000 as Weight)
	}
	fn ed25519_batch_verify() -> Weight {
		(74_125_000 as Weight)
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 20]`.
	fn continue_instantiate(n: u32, ) -> Weight {
		(1_083_488_000 as Weight)
			// Standard Error: 135_000
			.saturating_add((23_815_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	/// The range of component `n` is `[0, 20]`.
	fn continue_execute(n: u32, ) -> Weight {
		(1_050_411_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((567_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_migrate() -> Weight {
		(894_087_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn query_info() -> Weight {
		(7_542_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn query_continuation() -> Weight {
		(882_170_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:0)
	fn query_raw() -> Weight {
		(12_375_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Const(r: u32, ) -> Weight {
		(169_224_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((451_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Const(r: u32, ) -> Weight {
		(170_784_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((413_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Load(r: u32, ) -> Weight {
		(170_071_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((1_451_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Load(r: u32, ) -> Weight {
		(170_996_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_447_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Store(r: u32, ) -> Weight {
		(167_568_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((1_646_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Store(r: u32, ) -> Weight {
		(168_315_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((1_693_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eq(r: u32, ) -> Weight {
		(174_083_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((846_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eqz(r: u32, ) -> Weight {
		(169_723_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((633_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ne(r: u32, ) -> Weight {
		(169_507_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((943_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LtS(r: u32, ) -> Weight {
		(169_984_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((920_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GtS(r: u32, ) -> Weight {
		(169_454_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((936_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LeS(r: u32, ) -> Weight {
		(169_691_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((939_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GeS(r: u32, ) -> Weight {
		(169_207_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((952_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Clz(r: u32, ) -> Weight {
		(173_459_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((585_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ctz(r: u32, ) -> Weight {
		(169_561_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((635_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Popcnt(r: u32, ) -> Weight {
		(172_044_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((588_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Add(r: u32, ) -> Weight {
		(170_447_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((938_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Mul(r: u32, ) -> Weight {
		(169_466_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((945_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivS(r: u32, ) -> Weight {
		(170_151_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((979_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivU(r: u32, ) -> Weight {
		(169_890_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((967_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64RemS(r: u32, ) -> Weight {
		(169_881_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((966_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64And(r: u32, ) -> Weight {
		(169_525_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((947_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Or(r: u32, ) -> Weight {
		(169_976_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((929_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Xor(r: u32, ) -> Weight {
		(170_193_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((942_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Shl(r: u32, ) -> Weight {
		(169_762_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((987_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ShrS(r: u32, ) -> Weight {
		(169_593_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((960_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotl(r: u32, ) -> Weight {
		(175_964_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((865_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotr(r: u32, ) -> Weight {
		(169_423_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((1_014_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight {
		(174_302_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((525_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I32WrapI64(r: u32, ) -> Weight {
		(169_849_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((646_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Eq(r: u32, ) -> Weight {
		(169_288_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_006_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ne(r: u32, ) -> Weight {
		(169_662_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((974_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Lt(r: u32, ) -> Weight {
		(169_677_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((979_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Gt(r: u32, ) -> Weight {
		(170_826_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((938_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Le(r: u32, ) -> Weight {
		(170_126_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((954_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ge(r: u32, ) -> Weight {
		(169_540_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((959_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Abs(r: u32, ) -> Weight {
		(170_702_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((704_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Neg(r: u32, ) -> Weight {
		(169_057_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((722_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ceil(r: u32, ) -> Weight {
		(169_428_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((784_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Floor(r: u32, ) -> Weight {
		(169_138_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((790_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Trunc(r: u32, ) -> Weight {
		(169_330_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((767_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Nearest(r: u32, ) -> Weight {
		(169_390_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((961_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sqrt(r: u32, ) -> Weight {
		(169_305_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((818_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Add(r: u32, ) -> Weight {
		(173_624_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((844_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sub(r: u32, ) -> Weight {
		(169_711_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((981_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Mul(r: u32, ) -> Weight {
		(171_590_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((973_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Div(r: u32, ) -> Weight {
		(171_696_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((1_041_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Min(r: u32, ) -> Weight {
		(171_002_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((990_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Max(r: u32, ) -> Weight {
		(169_432_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((1_073_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Copysign(r: u32, ) -> Weight {
		(169_289_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((1_085_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Select(r: u32, ) -> Weight {
		(172_042_000 as Weight)
			// Standard Error: 40_000
			.saturating_add((1_349_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_If(r: u32, ) -> Weight {
		(172_923_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((413_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Else(r: u32, ) -> Weight {
		(174_693_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((727_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetLocal(r: u32, ) -> Weight {
		(168_434_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((542_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetLocal(r: u32, ) -> Weight {
		(171_036_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((419_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_TeeLocal(_r: u32, ) -> Weight {
		(174_016_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetGlobal(r: u32, ) -> Weight {
		(169_109_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((68_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetGlobal(r: u32, ) -> Weight {
		(169_344_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((13_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CurrentMemory(r: u32, ) -> Weight {
		(168_465_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((530_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 3]`.
	fn instruction_GrowMemory(r: u32, ) -> Weight {
		(8_201_000 as Weight)
			// Standard Error: 29_122_000
			.saturating_add((1_997_757_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Br(r: u32, ) -> Weight {
		(168_894_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((376_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrIf(r: u32, ) -> Weight {
		(177_038_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((280_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrTable(r: u32, ) -> Weight {
		(169_569_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((1_167_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `s` is `[1, 50]`.
	fn instruction_BrTable_per_elem(_s: u32, ) -> Weight {
		(177_821_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Call(r: u32, ) -> Weight {
		(177_754_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((6_495_000 as Weight).saturating_mul(r as Weight))
	}
}
