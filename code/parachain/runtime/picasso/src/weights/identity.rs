
//! Autogenerated weights for `identity`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-03, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `4303df0441ee`, CPU: `Intel(R) Xeon(R) CPU @ 3.10GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("picasso-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/386hzkyz77l1m76kfsnqr70svvd104hq-composable/bin/composable
// benchmark
// pallet
// --chain=picasso-dev
// --execution=wasm
// --wasm-execution=compiled
// --wasm-instantiation-strategy=legacy-instance-reuse
// --pallet=*
// --extrinsic=*
// --steps=50
// --repeat=10
// --output=code/parachain/runtime/picasso/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `identity`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> identity::WeightInfo for WeightInfo<T> {
	// Storage: Identity Registrars (r:1 w:1)
	/// The range of component `r` is `[1, 7]`.
	fn add_registrar(r: u32, ) -> Weight {
		// Minimum execution time: 33_470 nanoseconds.
		Weight::from_ref_time(34_060_091 as u64)
			// Standard Error: 17_933
			.saturating_add(Weight::from_ref_time(661_481 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:1)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `x` is `[0, 32]`.
	fn set_identity(r: u32, x: u32, ) -> Weight {
		// Minimum execution time: 49_026 nanoseconds.
		Weight::from_ref_time(63_067_538 as u64)
			// Standard Error: 69_974
			.saturating_add(Weight::from_ref_time(725_567 as u64).saturating_mul(r as u64))
			// Standard Error: 16_047
			.saturating_add(Weight::from_ref_time(844_435 as u64).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity SuperOf (r:1 w:1)
	/// The range of component `s` is `[0, 32]`.
	fn set_subs_new(s: u32, ) -> Weight {
		// Minimum execution time: 20_627 nanoseconds.
		Weight::from_ref_time(49_374_978 as u64)
			// Standard Error: 40_109
			.saturating_add(Weight::from_ref_time(5_393_620 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity SuperOf (r:0 w:1)
	/// The range of component `p` is `[0, 32]`.
	fn set_subs_old(p: u32, ) -> Weight {
		// Minimum execution time: 20_428 nanoseconds.
		Weight::from_ref_time(50_930_310 as u64)
			// Standard Error: 41_747
			.saturating_add(Weight::from_ref_time(2_416_686 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Storage: Identity SuperOf (r:0 w:32)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `s` is `[0, 32]`.
	/// The range of component `x` is `[0, 32]`.
	fn clear_identity(r: u32, s: u32, x: u32, ) -> Weight {
		// Minimum execution time: 77_483 nanoseconds.
		Weight::from_ref_time(65_071_257 as u64)
			// Standard Error: 38_030
			.saturating_add(Weight::from_ref_time(603_875 as u64).saturating_mul(r as u64))
			// Standard Error: 8_727
			.saturating_add(Weight::from_ref_time(2_181_905 as u64).saturating_mul(s as u64))
			// Standard Error: 8_727
			.saturating_add(Weight::from_ref_time(429_186 as u64).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
	}
	// Storage: Identity Registrars (r:1 w:0)
	// Storage: Identity IdentityOf (r:1 w:1)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `x` is `[0, 32]`.
	fn request_judgement(r: u32, x: u32, ) -> Weight {
		// Minimum execution time: 70_543 nanoseconds.
		Weight::from_ref_time(67_620_741 as u64)
			// Standard Error: 36_709
			.saturating_add(Weight::from_ref_time(649_235 as u64).saturating_mul(r as u64))
			// Standard Error: 8_418
			.saturating_add(Weight::from_ref_time(809_728 as u64).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:1)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `x` is `[0, 32]`.
	fn cancel_request(r: u32, x: u32, ) -> Weight {
		// Minimum execution time: 64_243 nanoseconds.
		Weight::from_ref_time(62_912_736 as u64)
			// Standard Error: 27_276
			.saturating_add(Weight::from_ref_time(432_696 as u64).saturating_mul(r as u64))
			// Standard Error: 6_255
			.saturating_add(Weight::from_ref_time(809_530 as u64).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity Registrars (r:1 w:1)
	/// The range of component `r` is `[1, 7]`.
	fn set_fee(r: u32, ) -> Weight {
		// Minimum execution time: 18_149 nanoseconds.
		Weight::from_ref_time(18_064_434 as u64)
			// Standard Error: 10_116
			.saturating_add(Weight::from_ref_time(689_861 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity Registrars (r:1 w:1)
	/// The range of component `r` is `[1, 7]`.
	fn set_account_id(r: u32, ) -> Weight {
		// Minimum execution time: 18_654 nanoseconds.
		Weight::from_ref_time(18_993_605 as u64)
			// Standard Error: 15_590
			.saturating_add(Weight::from_ref_time(693_429 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity Registrars (r:1 w:1)
	/// The range of component `r` is `[1, 7]`.
	fn set_fields(r: u32, ) -> Weight {
		// Minimum execution time: 18_601 nanoseconds.
		Weight::from_ref_time(18_726_177 as u64)
			// Standard Error: 9_731
			.saturating_add(Weight::from_ref_time(545_575 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity Registrars (r:1 w:0)
	// Storage: Identity IdentityOf (r:1 w:1)
	/// The range of component `r` is `[1, 7]`.
	/// The range of component `x` is `[0, 32]`.
	fn provide_judgement(r: u32, x: u32, ) -> Weight {
		// Minimum execution time: 52_453 nanoseconds.
		Weight::from_ref_time(50_331_789 as u64)
			// Standard Error: 35_181
			.saturating_add(Weight::from_ref_time(608_444 as u64).saturating_mul(r as u64))
			// Standard Error: 7_085
			.saturating_add(Weight::from_ref_time(1_267_824 as u64).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Identity SuperOf (r:0 w:32)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `s` is `[0, 32]`.
	/// The range of component `x` is `[0, 32]`.
	fn kill_identity(r: u32, s: u32, x: u32, ) -> Weight {
		// Minimum execution time: 100_924 nanoseconds.
		Weight::from_ref_time(92_913_671 as u64)
			// Standard Error: 45_196
			.saturating_add(Weight::from_ref_time(210_190 as u64).saturating_mul(r as u64))
			// Standard Error: 10_371
			.saturating_add(Weight::from_ref_time(2_175_679 as u64).saturating_mul(s as u64))
			// Standard Error: 10_371
			.saturating_add(Weight::from_ref_time(363_179 as u64).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SuperOf (r:1 w:1)
	// Storage: Identity SubsOf (r:1 w:1)
	/// The range of component `s` is `[0, 31]`.
	fn add_sub(s: u32, ) -> Weight {
		// Minimum execution time: 62_739 nanoseconds.
		Weight::from_ref_time(69_459_041 as u64)
			// Standard Error: 13_702
			.saturating_add(Weight::from_ref_time(449_526 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SuperOf (r:1 w:1)
	/// The range of component `s` is `[1, 32]`.
	fn rename_sub(s: u32, ) -> Weight {
		// Minimum execution time: 26_983 nanoseconds.
		Weight::from_ref_time(28_624_395 as u64)
			// Standard Error: 5_866
			.saturating_add(Weight::from_ref_time(212_342 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SuperOf (r:1 w:1)
	// Storage: Identity SubsOf (r:1 w:1)
	/// The range of component `s` is `[1, 32]`.
	fn remove_sub(s: u32, ) -> Weight {
		// Minimum execution time: 68_495 nanoseconds.
		Weight::from_ref_time(72_007_207 as u64)
			// Standard Error: 11_093
			.saturating_add(Weight::from_ref_time(348_709 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Identity SuperOf (r:1 w:1)
	// Storage: Identity SubsOf (r:1 w:1)
	/// The range of component `s` is `[0, 31]`.
	fn quit_sub(s: u32, ) -> Weight {
		// Minimum execution time: 49_352 nanoseconds.
		Weight::from_ref_time(51_513_947 as u64)
			// Standard Error: 9_057
			.saturating_add(Weight::from_ref_time(401_131 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}
