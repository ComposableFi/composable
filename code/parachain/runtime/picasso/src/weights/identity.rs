
//! Autogenerated weights for `identity`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-25, STEPS: `2`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `dev`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("picasso-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/gpsh9wvfcrwyck2nw62gpkqhf0bhc0cw-composable/bin/composable
// benchmark
// pallet
// --chain=picasso-dev
// --execution=wasm
// --wasm-execution=compiled
// --wasm-instantiation-strategy=legacy-instance-reuse
// --pallet=*
// --extrinsic=*
// --steps=2
// --repeat=2
// --output=code/parachain/runtime/picasso/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `identity`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> identity::WeightInfo for WeightInfo<T> {
	// Storage: Identity Registrars (r:1 w:1)
	/// The range of component `r` is `[1, 7]`.
	fn add_registrar(_r: u32, ) -> Weight {
		// Minimum execution time: 22_167 nanoseconds.
		Weight::from_ref_time(39_007_666 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:1)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `x` is `[0, 32]`.
	fn set_identity(r: u32, x: u32, ) -> Weight {
		// Minimum execution time: 48_209 nanoseconds.
		Weight::from_ref_time(56_664_142 as u64)
			// Standard Error: 1_730_740
			.saturating_add(Weight::from_ref_time(648_857 as u64).saturating_mul(r as u64))
			// Standard Error: 378_599
			.saturating_add(Weight::from_ref_time(112_625 as u64).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity SuperOf (r:32 w:32)
	/// The range of component `s` is `[0, 32]`.
	fn set_subs_new(s: u32, ) -> Weight {
		// Minimum execution time: 13_167 nanoseconds.
		Weight::from_ref_time(16_417_000 as u64)
			// Standard Error: 432_682
			.saturating_add(Weight::from_ref_time(4_342_468 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity SuperOf (r:0 w:32)
	/// The range of component `p` is `[0, 32]`.
	fn set_subs_old(p: u32, ) -> Weight {
		// Minimum execution time: 11_916 nanoseconds.
		Weight::from_ref_time(12_395_500 as u64)
			// Standard Error: 77_631
			.saturating_add(Weight::from_ref_time(2_119_812 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Storage: Identity SuperOf (r:0 w:32)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `s` is `[0, 32]`.
	/// The range of component `x` is `[0, 32]`.
	fn clear_identity(_r: u32, s: u32, x: u32, ) -> Weight {
		// Minimum execution time: 52_417 nanoseconds.
		Weight::from_ref_time(46_039_178 as u64)
			// Standard Error: 138_647
			.saturating_add(Weight::from_ref_time(1_691_414 as u64).saturating_mul(s as u64))
			// Standard Error: 138_647
			.saturating_add(Weight::from_ref_time(652_992 as u64).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
	}
	// Storage: Identity Registrars (r:1 w:0)
	// Storage: Identity IdentityOf (r:1 w:1)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `x` is `[0, 32]`.
	fn request_judgement(r: u32, x: u32, ) -> Weight {
		// Minimum execution time: 42_376 nanoseconds.
		Weight::from_ref_time(41_001_571 as u64)
			// Standard Error: 698_277
			.saturating_add(Weight::from_ref_time(437_428 as u64).saturating_mul(r as u64))
			// Standard Error: 152_748
			.saturating_add(Weight::from_ref_time(723_937 as u64).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:1)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `x` is `[0, 32]`.
	fn cancel_request(_r: u32, x: u32, ) -> Weight {
		// Minimum execution time: 40_750 nanoseconds.
		Weight::from_ref_time(44_777_142 as u64)
			// Standard Error: 75_266
			.saturating_add(Weight::from_ref_time(544_937 as u64).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity Registrars (r:1 w:1)
	/// The range of component `r` is `[1, 7]`.
	fn set_fee(r: u32, ) -> Weight {
		// Minimum execution time: 11_167 nanoseconds.
		Weight::from_ref_time(12_760_583 as u64)
			// Standard Error: 1_302_689
			.saturating_add(Weight::from_ref_time(1_572_916 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity Registrars (r:1 w:1)
	/// The range of component `r` is `[1, 7]`.
	fn set_account_id(r: u32, ) -> Weight {
		// Minimum execution time: 11_458 nanoseconds.
		Weight::from_ref_time(12_062_250 as u64)
			// Standard Error: 147_194
			.saturating_add(Weight::from_ref_time(229_250 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity Registrars (r:1 w:1)
	/// The range of component `r` is `[1, 7]`.
	fn set_fields(r: u32, ) -> Weight {
		// Minimum execution time: 11_583 nanoseconds.
		Weight::from_ref_time(12_101_000 as u64)
			// Standard Error: 600_798
			.saturating_add(Weight::from_ref_time(691_000 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity Registrars (r:1 w:0)
	// Storage: Identity IdentityOf (r:1 w:1)
	/// The range of component `r` is `[1, 7]`.
	/// The range of component `x` is `[0, 32]`.
	fn provide_judgement(_r: u32, x: u32, ) -> Weight {
		// Minimum execution time: 31_209 nanoseconds.
		Weight::from_ref_time(36_587_333 as u64)
			// Standard Error: 127_316
			.saturating_add(Weight::from_ref_time(869_140 as u64).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Identity SuperOf (r:0 w:32)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `s` is `[0, 32]`.
	/// The range of component `x` is `[0, 32]`.
	fn kill_identity(r: u32, s: u32, x: u32, ) -> Weight {
		// Minimum execution time: 62_709 nanoseconds.
		Weight::from_ref_time(66_652_428 as u64)
			// Standard Error: 1_260_842
			.saturating_add(Weight::from_ref_time(56_571 as u64).saturating_mul(r as u64))
			// Standard Error: 275_809
			.saturating_add(Weight::from_ref_time(1_554_031 as u64).saturating_mul(s as u64))
			// Standard Error: 275_809
			.saturating_add(Weight::from_ref_time(234_375 as u64).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SuperOf (r:1 w:1)
	// Storage: Identity SubsOf (r:1 w:1)
	/// The range of component `s` is `[0, 31]`.
	fn add_sub(s: u32, ) -> Weight {
		// Minimum execution time: 41_126 nanoseconds.
		Weight::from_ref_time(46_396_500 as u64)
			// Standard Error: 215_897
			.saturating_add(Weight::from_ref_time(204_951 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SuperOf (r:1 w:1)
	/// The range of component `s` is `[1, 32]`.
	fn rename_sub(s: u32, ) -> Weight {
		// Minimum execution time: 18_500 nanoseconds.
		Weight::from_ref_time(19_515_790 as u64)
			// Standard Error: 60_779
			.saturating_add(Weight::from_ref_time(26_209 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SuperOf (r:1 w:1)
	// Storage: Identity SubsOf (r:1 w:1)
	/// The range of component `s` is `[1, 32]`.
	fn remove_sub(s: u32, ) -> Weight {
		// Minimum execution time: 41_709 nanoseconds.
		Weight::from_ref_time(42_978_822 as u64)
			// Standard Error: 98_034
			.saturating_add(Weight::from_ref_time(188_177 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Identity SuperOf (r:1 w:1)
	// Storage: Identity SubsOf (r:1 w:1)
	/// The range of component `s` is `[0, 31]`.
	fn quit_sub(s: u32, ) -> Weight {
		// Minimum execution time: 30_167 nanoseconds.
		Weight::from_ref_time(34_084_000 as u64)
			// Standard Error: 133_913
			.saturating_add(Weight::from_ref_time(16_096 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}
