
//! Autogenerated weights for `pallet_ibc`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-16, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `c93baf6406af`, CPU: `Intel(R) Xeon(R) CPU @ 2.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("picasso-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/y1z2mfgy9msqas77hhxszf78hqg6mx5y-composable/bin/composable
// benchmark
// pallet
// --chain=picasso-dev
// --execution=wasm
// --wasm-execution=compiled
// --wasm-instantiation-strategy=legacy-instance-reuse
// --pallet=*
// --extrinsic=*
// --steps=50
// --repeat=10
// --output=code/parachain/runtime/picasso/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::WEIGHT_REF_TIME_PER_MILLIS}};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_ibc`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: pallet_ibc::Config> pallet_ibc::WeightInfo for WeightInfo<T> {
    fn create_client() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn conn_open_init() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn update_tendermint_client(_i:u32) -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn conn_try_open_tendermint() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn conn_open_ack_tendermint() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn conn_open_confirm_tendermint() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn channel_open_init() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn channel_open_try_tendermint() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn channel_open_ack_tendermint() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn channel_open_confirm_tendermint() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn channel_close_init() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn channel_close_confirm_tendermint() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn recv_packet_tendermint(_i: u32) -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn ack_packet_tendermint(_i: u32, _j: u32) -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn timeout_packet_tendermint(_i: u32) -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn set_params() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn transfer() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn on_chan_open_init() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn on_chan_open_try() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn on_recv_packet() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn on_chan_open_ack() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn on_chan_open_confirm() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn on_chan_close_init() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn on_chan_close_confirm() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn on_acknowledgement_packet() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn on_timeout_packet() -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }

    fn update_grandpa_client(_i: u32) -> Weight {
        Weight::from_ref_time(WEIGHT_REF_TIME_PER_MILLIS)
    }
}
