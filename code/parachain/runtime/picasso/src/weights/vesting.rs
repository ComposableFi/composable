
//! Autogenerated weights for `vesting`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-02, STEPS: `50`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `36fdccbe8ae4`, CPU: `Intel(R) Xeon(R) CPU @ 3.10GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("picasso-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/lcpwsrfjcwvf76fhx7cxpy7ngcbzd04j-composable/bin/composable
// benchmark
// pallet
// --chain=picasso-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=*
// --extrinsic=*
// --steps=50
// --repeat=10
// --output=code/parachain/runtime/picasso/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `vesting`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> vesting::WeightInfo for WeightInfo<T> {
	/// Storage: Vesting VestingSchedules (r:1 w:1)
	/// Proof Skipped: Vesting VestingSchedules (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1273), added: 3748, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(120), added: 2595, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 128]`.
	fn claim(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1179 + s * (67 ±0)`
		//  Estimated: `10389 + s * (69 ±0)`
		// Minimum execution time: 61_931 nanoseconds.
		Weight::from_parts(68_041_598, 10389)
			// Standard Error: 7_756
			.saturating_add(Weight::from_ref_time(3_048_827).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_proof_size(69).saturating_mul(s.into()))
	}
	/// Storage: Vesting VestingScheduleNonce (r:1 w:1)
	/// Proof Skipped: Vesting VestingScheduleNonce (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Vesting VestingSchedules (r:1 w:1)
	/// Proof Skipped: Vesting VestingSchedules (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(120), added: 2595, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1273), added: 3748, mode: MaxEncodedLen)
	fn vested_transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `547`
		//  Estimated: `18208`
		// Minimum execution time: 105_021 nanoseconds.
		Weight::from_parts(107_290_000, 18208)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: Vesting VestingScheduleNonce (r:1 w:1)
	/// Proof Skipped: Vesting VestingScheduleNonce (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(120), added: 2595, mode: MaxEncodedLen)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1273), added: 3748, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Vesting VestingSchedules (r:0 w:1)
	/// Proof Skipped: Vesting VestingSchedules (max_values: None, max_size: None, mode: Measured)
	/// The range of component `s` is `[0, 128]`.
	fn update_vesting_schedules(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `532`
		//  Estimated: `10469`
		// Minimum execution time: 51_324 nanoseconds.
		Weight::from_parts(67_314_693, 10469)
			// Standard Error: 6_700
			.saturating_add(Weight::from_ref_time(1_944_490).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: Vesting VestingSchedules (r:1 w:1)
	/// Proof Skipped: Vesting VestingSchedules (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1273), added: 3748, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(120), added: 2595, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 128]`.
	fn claim_for(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `767 + s * (65 ±0)`
		//  Estimated: `10089 + s * (65 ±0)`
		// Minimum execution time: 62_702 nanoseconds.
		Weight::from_parts(63_289_203, 10089)
			// Standard Error: 5_087
			.saturating_add(Weight::from_ref_time(2_952_787).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_proof_size(65).saturating_mul(s.into()))
	}
}
