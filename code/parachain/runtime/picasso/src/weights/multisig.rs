
//! Autogenerated weights for `multisig`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-31, STEPS: `50`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `63ca8f3a24df`, CPU: `Intel(R) Xeon(R) CPU @ 3.10GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("picasso-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/09061ivwqrfybnf0kcnmgkyx8a7mfn83-composable/bin/composable
// benchmark
// pallet
// --chain=picasso-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=*
// --extrinsic=*
// --steps=50
// --repeat=10
// --output=code/parachain/runtime/picasso/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `multisig`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> multisig::WeightInfo for WeightInfo<T> {
	/// Storage: CallFilter DisabledCalls (r:1 w:0)
	/// Proof: CallFilter DisabledCalls (max_values: None, max_size: Some(212), added: 2687, mode: MaxEncodedLen)
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_threshold_1(z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `2687`
		// Minimum execution time: 37_114 nanoseconds.
		Weight::from_ref_time(39_108_145)
			.saturating_add(Weight::from_proof_size(2687))
			// Standard Error: 30
			.saturating_add(Weight::from_ref_time(769).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_create(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `366 + s * (2 ±0)`
		//  Estimated: `5821`
		// Minimum execution time: 75_457 nanoseconds.
		Weight::from_ref_time(58_900_955)
			.saturating_add(Weight::from_proof_size(5821))
			// Standard Error: 4_082
			.saturating_add(Weight::from_ref_time(187_198).saturating_mul(s.into()))
			// Standard Error: 40
			.saturating_add(Weight::from_ref_time(2_133).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[3, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_approve(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `346`
		//  Estimated: `5821`
		// Minimum execution time: 56_178 nanoseconds.
		Weight::from_ref_time(38_381_514)
			.saturating_add(Weight::from_proof_size(5821))
			// Standard Error: 2_298
			.saturating_add(Weight::from_ref_time(194_069).saturating_mul(s.into()))
			// Standard Error: 22
			.saturating_add(Weight::from_ref_time(2_132).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: CallFilter DisabledCalls (r:1 w:0)
	/// Proof: CallFilter DisabledCalls (max_values: None, max_size: Some(212), added: 2687, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_complete(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `589 + s * (33 ±0)`
		//  Estimated: `11111`
		// Minimum execution time: 87_167 nanoseconds.
		Weight::from_ref_time(70_306_941)
			.saturating_add(Weight::from_proof_size(11111))
			// Standard Error: 4_369
			.saturating_add(Weight::from_ref_time(251_005).saturating_mul(s.into()))
			// Standard Error: 42
			.saturating_add(Weight::from_ref_time(2_117).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_create(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `371 + s * (1 ±0)`
		//  Estimated: `5821`
		// Minimum execution time: 52_436 nanoseconds.
		Weight::from_ref_time(56_260_860)
			.saturating_add(Weight::from_proof_size(5821))
			// Standard Error: 3_678
			.saturating_add(Weight::from_ref_time(198_820).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_approve(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `346`
		//  Estimated: `5821`
		// Minimum execution time: 33_758 nanoseconds.
		Weight::from_ref_time(36_224_501)
			.saturating_add(Weight::from_proof_size(5821))
			// Standard Error: 2_877
			.saturating_add(Weight::from_ref_time(195_081).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn cancel_as_multi(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `580 + s * (1 ±0)`
		//  Estimated: `5821`
		// Minimum execution time: 51_969 nanoseconds.
		Weight::from_ref_time(54_555_532)
			.saturating_add(Weight::from_proof_size(5821))
			// Standard Error: 4_017
			.saturating_add(Weight::from_ref_time(209_103).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
