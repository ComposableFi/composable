
//! Autogenerated weights for `cosmwasm`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-08, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `51c0f1a4ed3e`, CPU: `Intel(R) Xeon(R) CPU @ 2.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dali-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/k90wdfhxs42v27wx2ddzxqfwcladfk40-composable/bin/composable
// benchmark
// pallet
// --chain=dali-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=*
// --extrinsic=*
// --steps=50
// --repeat=10
// --output=code/parachain/runtime/dali/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `cosmwasm`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> cosmwasm::WeightInfo for WeightInfo<T> {
	// Storage: Cosmwasm CodeHashToId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CurrentCodeId (r:1 w:1)
	// Storage: Cosmwasm PristineCode (r:0 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:0 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:0 w:1)
	/// The range of component `n` is `[1, 514288]`.
	fn upload(n: u32, ) -> Weight {
		// Minimum execution time: 766_641 nanoseconds.
		Weight::from_ref_time(944_403_413 as u64)
			// Standard Error: 194
			.saturating_add(Weight::from_ref_time(165_995 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn instantiate(n: u32, ) -> Weight {
		// Minimum execution time: 521_595 nanoseconds.
		Weight::from_ref_time(568_380_993 as u64)
			// Standard Error: 195_336
			.saturating_add(Weight::from_ref_time(52_721_091 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn execute(n: u32, ) -> Weight {
		// Minimum execution time: 473_785 nanoseconds.
		Weight::from_ref_time(528_759_370 as u64)
			// Standard Error: 194_850
			.saturating_add(Weight::from_ref_time(50_383_902 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:2 w:2)
	// Storage: Cosmwasm InstrumentedCode (r:2 w:1)
	// Storage: Cosmwasm PristineCode (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CodeHashToId (r:0 w:1)
	fn migrate() -> Weight {
		// Minimum execution time: 915_394 nanoseconds.
		Weight::from_ref_time(948_395_000 as u64)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	fn update_admin() -> Weight {
		// Minimum execution time: 458_212 nanoseconds.
		Weight::from_ref_time(483_167_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read() -> Weight {
		// Minimum execution time: 28_247 nanoseconds.
		Weight::from_ref_time(29_927_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read_other_contract() -> Weight {
		// Minimum execution time: 28_324 nanoseconds.
		Weight::from_ref_time(28_774_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:1)
	fn db_write() -> Weight {
		// Minimum execution time: 29_571 nanoseconds.
		Weight::from_ref_time(31_540_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn db_scan() -> Weight {
		// Minimum execution time: 7_402 nanoseconds.
		Weight::from_ref_time(7_772_000 as u64)
	}
	// Storage: unknown [0x] (r:1 w:0)
	fn db_next() -> Weight {
		// Minimum execution time: 57_363 nanoseconds.
		Weight::from_ref_time(62_230_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:0 w:1)
	fn db_remove() -> Weight {
		// Minimum execution time: 12_867 nanoseconds.
		Weight::from_ref_time(13_255_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Tokens Accounts (r:1 w:0)
	fn balance() -> Weight {
		// Minimum execution time: 10_331 nanoseconds.
		Weight::from_ref_time(10_963_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn transfer(n: u32, ) -> Weight {
		// Minimum execution time: 564 nanoseconds.
		Weight::from_ref_time(34_333_947 as u64)
			// Standard Error: 239_409
			.saturating_add(Weight::from_ref_time(46_579_510 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	fn set_contract_meta() -> Weight {
		// Minimum execution time: 25_711 nanoseconds.
		Weight::from_ref_time(26_565_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn running_contract_meta() -> Weight {
		// Minimum execution time: 6_633 nanoseconds.
		Weight::from_ref_time(6_995_000 as u64)
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn contract_meta() -> Weight {
		// Minimum execution time: 20_692 nanoseconds.
		Weight::from_ref_time(21_289_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	fn addr_validate() -> Weight {
		// Minimum execution time: 4_994 nanoseconds.
		Weight::from_ref_time(5_115_000 as u64)
	}
	fn addr_canonicalize() -> Weight {
		// Minimum execution time: 5_100 nanoseconds.
		Weight::from_ref_time(5_200_000 as u64)
	}
	fn addr_humanize() -> Weight {
		// Minimum execution time: 415 nanoseconds.
		Weight::from_ref_time(476_000 as u64)
	}
	fn secp256k1_recover_pubkey() -> Weight {
		// Minimum execution time: 56_291 nanoseconds.
		Weight::from_ref_time(58_731_000 as u64)
	}
	fn secp256k1_verify() -> Weight {
		// Minimum execution time: 56_113 nanoseconds.
		Weight::from_ref_time(56_666_000 as u64)
	}
	fn ed25519_verify() -> Weight {
		// Minimum execution time: 80_334 nanoseconds.
		Weight::from_ref_time(83_933_000 as u64)
	}
	fn ed25519_batch_verify() -> Weight {
		// Minimum execution time: 231_281 nanoseconds.
		Weight::from_ref_time(288_870_000 as u64)
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn continue_instantiate(n: u32, ) -> Weight {
		// Minimum execution time: 438_191 nanoseconds.
		Weight::from_ref_time(493_094_326 as u64)
			// Standard Error: 165_444
			.saturating_add(Weight::from_ref_time(47_428_208 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	/// The range of component `n` is `[0, 23]`.
	fn continue_execute(n: u32, ) -> Weight {
		// Minimum execution time: 386_738 nanoseconds.
		Weight::from_ref_time(404_429_510 as u64)
			// Standard Error: 74_272
			.saturating_add(Weight::from_ref_time(2_308_127 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_migrate() -> Weight {
		// Minimum execution time: 395_585 nanoseconds.
		Weight::from_ref_time(403_371_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_query() -> Weight {
		// Minimum execution time: 367_186 nanoseconds.
		Weight::from_ref_time(375_316_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_reply() -> Weight {
		// Minimum execution time: 385_642 nanoseconds.
		Weight::from_ref_time(393_183_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_contract_info() -> Weight {
		// Minimum execution time: 39_117 nanoseconds.
		Weight::from_ref_time(41_661_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_code_info() -> Weight {
		// Minimum execution time: 27_430 nanoseconds.
		Weight::from_ref_time(28_180_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:0)
	fn query_raw() -> Weight {
		// Minimum execution time: 44_934 nanoseconds.
		Weight::from_ref_time(47_097_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Const(r: u32, ) -> Weight {
		// Minimum execution time: 5_285 nanoseconds.
		Weight::from_ref_time(6_110_499 as u64)
			// Standard Error: 6_465
			.saturating_add(Weight::from_ref_time(1_416_618 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Const(r: u32, ) -> Weight {
		// Minimum execution time: 5_351 nanoseconds.
		Weight::from_ref_time(6_006_858 as u64)
			// Standard Error: 5_607
			.saturating_add(Weight::from_ref_time(1_421_180 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Load(r: u32, ) -> Weight {
		// Minimum execution time: 5_764 nanoseconds.
		Weight::from_ref_time(5_835_482 as u64)
			// Standard Error: 11_516
			.saturating_add(Weight::from_ref_time(2_760_588 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Load(r: u32, ) -> Weight {
		// Minimum execution time: 5_411 nanoseconds.
		Weight::from_ref_time(5_774_229 as u64)
			// Standard Error: 10_378
			.saturating_add(Weight::from_ref_time(2_762_745 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Store(r: u32, ) -> Weight {
		// Minimum execution time: 5_532 nanoseconds.
		Weight::from_ref_time(5_358_036 as u64)
			// Standard Error: 11_788
			.saturating_add(Weight::from_ref_time(4_449_199 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Store(r: u32, ) -> Weight {
		// Minimum execution time: 5_420 nanoseconds.
		Weight::from_ref_time(5_303_445 as u64)
			// Standard Error: 13_217
			.saturating_add(Weight::from_ref_time(4_489_446 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eq(r: u32, ) -> Weight {
		// Minimum execution time: 5_706 nanoseconds.
		Weight::from_ref_time(5_545_341 as u64)
			// Standard Error: 14_461
			.saturating_add(Weight::from_ref_time(3_474_063 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eqz(r: u32, ) -> Weight {
		// Minimum execution time: 5_648 nanoseconds.
		Weight::from_ref_time(6_116_226 as u64)
			// Standard Error: 9_198
			.saturating_add(Weight::from_ref_time(2_516_321 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ne(r: u32, ) -> Weight {
		// Minimum execution time: 5_376 nanoseconds.
		Weight::from_ref_time(5_278_876 as u64)
			// Standard Error: 9_077
			.saturating_add(Weight::from_ref_time(3_440_745 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LtS(r: u32, ) -> Weight {
		// Minimum execution time: 5_766 nanoseconds.
		Weight::from_ref_time(4_989_098 as u64)
			// Standard Error: 12_306
			.saturating_add(Weight::from_ref_time(3_482_299 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GtS(r: u32, ) -> Weight {
		// Minimum execution time: 5_602 nanoseconds.
		Weight::from_ref_time(5_594_401 as u64)
			// Standard Error: 11_592
			.saturating_add(Weight::from_ref_time(3_435_671 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LeS(r: u32, ) -> Weight {
		// Minimum execution time: 5_598 nanoseconds.
		Weight::from_ref_time(5_543_425 as u64)
			// Standard Error: 10_634
			.saturating_add(Weight::from_ref_time(3_426_317 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GeS(r: u32, ) -> Weight {
		// Minimum execution time: 5_760 nanoseconds.
		Weight::from_ref_time(5_628_274 as u64)
			// Standard Error: 16_628
			.saturating_add(Weight::from_ref_time(3_464_603 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Clz(r: u32, ) -> Weight {
		// Minimum execution time: 5_647 nanoseconds.
		Weight::from_ref_time(6_463_325 as u64)
			// Standard Error: 10_618
			.saturating_add(Weight::from_ref_time(2_500_567 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ctz(r: u32, ) -> Weight {
		// Minimum execution time: 5_737 nanoseconds.
		Weight::from_ref_time(5_910_507 as u64)
			// Standard Error: 7_975
			.saturating_add(Weight::from_ref_time(2_516_138 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Popcnt(r: u32, ) -> Weight {
		// Minimum execution time: 5_632 nanoseconds.
		Weight::from_ref_time(6_270_325 as u64)
			// Standard Error: 8_467
			.saturating_add(Weight::from_ref_time(2_498_752 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Add(r: u32, ) -> Weight {
		// Minimum execution time: 5_736 nanoseconds.
		Weight::from_ref_time(5_566_234 as u64)
			// Standard Error: 10_680
			.saturating_add(Weight::from_ref_time(3_486_731 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Sub(r: u32, ) -> Weight {
		// Minimum execution time: 5_358 nanoseconds.
		Weight::from_ref_time(5_887_839 as u64)
			// Standard Error: 11_258
			.saturating_add(Weight::from_ref_time(3_477_382 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Mul(r: u32, ) -> Weight {
		// Minimum execution time: 5_664 nanoseconds.
		Weight::from_ref_time(5_046_316 as u64)
			// Standard Error: 11_325
			.saturating_add(Weight::from_ref_time(3_520_990 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivS(r: u32, ) -> Weight {
		// Minimum execution time: 5_694 nanoseconds.
		Weight::from_ref_time(6_016_343 as u64)
			// Standard Error: 16_404
			.saturating_add(Weight::from_ref_time(4_464_813 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivU(r: u32, ) -> Weight {
		// Minimum execution time: 5_500 nanoseconds.
		Weight::from_ref_time(5_061_444 as u64)
			// Standard Error: 11_837
			.saturating_add(Weight::from_ref_time(3_863_216 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64RemS(r: u32, ) -> Weight {
		// Minimum execution time: 5_574 nanoseconds.
		Weight::from_ref_time(6_029_624 as u64)
			// Standard Error: 13_365
			.saturating_add(Weight::from_ref_time(4_363_426 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64And(r: u32, ) -> Weight {
		// Minimum execution time: 5_402 nanoseconds.
		Weight::from_ref_time(5_622_103 as u64)
			// Standard Error: 11_307
			.saturating_add(Weight::from_ref_time(3_491_543 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Or(r: u32, ) -> Weight {
		// Minimum execution time: 5_543 nanoseconds.
		Weight::from_ref_time(5_196_485 as u64)
			// Standard Error: 11_096
			.saturating_add(Weight::from_ref_time(3_499_379 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Xor(r: u32, ) -> Weight {
		// Minimum execution time: 5_558 nanoseconds.
		Weight::from_ref_time(6_099_750 as u64)
			// Standard Error: 10_694
			.saturating_add(Weight::from_ref_time(3_475_055 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Shl(r: u32, ) -> Weight {
		// Minimum execution time: 5_759 nanoseconds.
		Weight::from_ref_time(5_249_314 as u64)
			// Standard Error: 14_503
			.saturating_add(Weight::from_ref_time(3_462_900 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ShrS(r: u32, ) -> Weight {
		// Minimum execution time: 5_565 nanoseconds.
		Weight::from_ref_time(5_491_477 as u64)
			// Standard Error: 11_849
			.saturating_add(Weight::from_ref_time(3_447_033 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotl(r: u32, ) -> Weight {
		// Minimum execution time: 5_697 nanoseconds.
		Weight::from_ref_time(5_798_189 as u64)
			// Standard Error: 11_782
			.saturating_add(Weight::from_ref_time(3_419_815 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotr(r: u32, ) -> Weight {
		// Minimum execution time: 5_586 nanoseconds.
		Weight::from_ref_time(5_657_162 as u64)
			// Standard Error: 9_735
			.saturating_add(Weight::from_ref_time(3_428_730 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight {
		// Minimum execution time: 5_760 nanoseconds.
		Weight::from_ref_time(5_751_882 as u64)
			// Standard Error: 9_665
			.saturating_add(Weight::from_ref_time(2_534_868 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I32WrapI64(r: u32, ) -> Weight {
		// Minimum execution time: 5_553 nanoseconds.
		Weight::from_ref_time(5_717_496 as u64)
			// Standard Error: 11_894
			.saturating_add(Weight::from_ref_time(2_523_795 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Eq(r: u32, ) -> Weight {
		// Minimum execution time: 5_580 nanoseconds.
		Weight::from_ref_time(6_301_305 as u64)
			// Standard Error: 10_680
			.saturating_add(Weight::from_ref_time(3_443_398 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ne(r: u32, ) -> Weight {
		// Minimum execution time: 5_772 nanoseconds.
		Weight::from_ref_time(5_390_041 as u64)
			// Standard Error: 12_238
			.saturating_add(Weight::from_ref_time(3_460_000 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Lt(r: u32, ) -> Weight {
		// Minimum execution time: 6_073 nanoseconds.
		Weight::from_ref_time(5_353_295 as u64)
			// Standard Error: 11_400
			.saturating_add(Weight::from_ref_time(3_450_742 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Gt(r: u32, ) -> Weight {
		// Minimum execution time: 6_013 nanoseconds.
		Weight::from_ref_time(5_583_796 as u64)
			// Standard Error: 9_824
			.saturating_add(Weight::from_ref_time(3_415_881 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Le(r: u32, ) -> Weight {
		// Minimum execution time: 5_676 nanoseconds.
		Weight::from_ref_time(5_595_087 as u64)
			// Standard Error: 10_637
			.saturating_add(Weight::from_ref_time(3_489_471 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ge(r: u32, ) -> Weight {
		// Minimum execution time: 5_592 nanoseconds.
		Weight::from_ref_time(5_908_777 as u64)
			// Standard Error: 10_046
			.saturating_add(Weight::from_ref_time(3_474_161 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Abs(r: u32, ) -> Weight {
		// Minimum execution time: 5_583 nanoseconds.
		Weight::from_ref_time(6_144_027 as u64)
			// Standard Error: 9_151
			.saturating_add(Weight::from_ref_time(2_505_154 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Neg(r: u32, ) -> Weight {
		// Minimum execution time: 5_864 nanoseconds.
		Weight::from_ref_time(6_533_755 as u64)
			// Standard Error: 11_443
			.saturating_add(Weight::from_ref_time(2_479_982 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ceil(r: u32, ) -> Weight {
		// Minimum execution time: 5_492 nanoseconds.
		Weight::from_ref_time(5_831_485 as u64)
			// Standard Error: 9_674
			.saturating_add(Weight::from_ref_time(2_498_417 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Floor(r: u32, ) -> Weight {
		// Minimum execution time: 5_630 nanoseconds.
		Weight::from_ref_time(5_478_597 as u64)
			// Standard Error: 9_227
			.saturating_add(Weight::from_ref_time(2_505_358 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Trunc(r: u32, ) -> Weight {
		// Minimum execution time: 5_802 nanoseconds.
		Weight::from_ref_time(5_921_694 as u64)
			// Standard Error: 11_719
			.saturating_add(Weight::from_ref_time(2_492_360 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Nearest(r: u32, ) -> Weight {
		// Minimum execution time: 5_923 nanoseconds.
		Weight::from_ref_time(6_858_680 as u64)
			// Standard Error: 9_698
			.saturating_add(Weight::from_ref_time(2_652_455 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sqrt(r: u32, ) -> Weight {
		// Minimum execution time: 5_927 nanoseconds.
		Weight::from_ref_time(6_569_343 as u64)
			// Standard Error: 8_752
			.saturating_add(Weight::from_ref_time(2_569_271 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Add(r: u32, ) -> Weight {
		// Minimum execution time: 5_890 nanoseconds.
		Weight::from_ref_time(5_673_970 as u64)
			// Standard Error: 10_890
			.saturating_add(Weight::from_ref_time(3_428_118 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sub(r: u32, ) -> Weight {
		// Minimum execution time: 5_492 nanoseconds.
		Weight::from_ref_time(5_827_329 as u64)
			// Standard Error: 11_193
			.saturating_add(Weight::from_ref_time(3_413_172 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Mul(r: u32, ) -> Weight {
		// Minimum execution time: 5_671 nanoseconds.
		Weight::from_ref_time(5_420_470 as u64)
			// Standard Error: 12_363
			.saturating_add(Weight::from_ref_time(3_441_064 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Div(r: u32, ) -> Weight {
		// Minimum execution time: 5_662 nanoseconds.
		Weight::from_ref_time(5_702_503 as u64)
			// Standard Error: 10_607
			.saturating_add(Weight::from_ref_time(3_437_610 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Min(r: u32, ) -> Weight {
		// Minimum execution time: 5_443 nanoseconds.
		Weight::from_ref_time(5_699_057 as u64)
			// Standard Error: 11_089
			.saturating_add(Weight::from_ref_time(3_517_133 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Max(r: u32, ) -> Weight {
		// Minimum execution time: 5_423 nanoseconds.
		Weight::from_ref_time(6_186_053 as u64)
			// Standard Error: 10_211
			.saturating_add(Weight::from_ref_time(3_486_877 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Copysign(r: u32, ) -> Weight {
		// Minimum execution time: 5_492 nanoseconds.
		Weight::from_ref_time(5_818_703 as u64)
			// Standard Error: 10_532
			.saturating_add(Weight::from_ref_time(3_414_175 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Select(r: u32, ) -> Weight {
		// Minimum execution time: 5_486 nanoseconds.
		Weight::from_ref_time(6_049_549 as u64)
			// Standard Error: 11_700
			.saturating_add(Weight::from_ref_time(4_428_784 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_If(r: u32, ) -> Weight {
		// Minimum execution time: 5_546 nanoseconds.
		Weight::from_ref_time(6_065_378 as u64)
			// Standard Error: 6_518
			.saturating_add(Weight::from_ref_time(1_991_117 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Else(r: u32, ) -> Weight {
		// Minimum execution time: 5_310 nanoseconds.
		Weight::from_ref_time(5_567_928 as u64)
			// Standard Error: 10_671
			.saturating_add(Weight::from_ref_time(3_077_227 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetLocal(r: u32, ) -> Weight {
		// Minimum execution time: 5_621 nanoseconds.
		Weight::from_ref_time(6_115_707 as u64)
			// Standard Error: 4_794
			.saturating_add(Weight::from_ref_time(1_511_446 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetLocal(r: u32, ) -> Weight {
		// Minimum execution time: 5_512 nanoseconds.
		Weight::from_ref_time(5_929_955 as u64)
			// Standard Error: 6_706
			.saturating_add(Weight::from_ref_time(1_868_902 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_TeeLocal(_r: u32, ) -> Weight {
		// Minimum execution time: 5_483 nanoseconds.
		Weight::from_ref_time(6_065_449 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetGlobal(_r: u32, ) -> Weight {
		// Minimum execution time: 5_460 nanoseconds.
		Weight::from_ref_time(6_052_359 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetGlobal(_r: u32, ) -> Weight {
		// Minimum execution time: 5_447 nanoseconds.
		Weight::from_ref_time(6_255_963 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CurrentMemory(r: u32, ) -> Weight {
		// Minimum execution time: 5_338 nanoseconds.
		Weight::from_ref_time(6_196_091 as u64)
			// Standard Error: 7_060
			.saturating_add(Weight::from_ref_time(1_945_632 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 3]`.
	fn instruction_GrowMemory(r: u32, ) -> Weight {
		// Minimum execution time: 5_318 nanoseconds.
		Weight::from_ref_time(5_599_000 as u64)
			// Standard Error: 21_675_680
			.saturating_add(Weight::from_ref_time(3_585_535_182 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Br(r: u32, ) -> Weight {
		// Minimum execution time: 5_444 nanoseconds.
		Weight::from_ref_time(5_886_837 as u64)
			// Standard Error: 4_640
			.saturating_add(Weight::from_ref_time(1_035_190 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrIf(r: u32, ) -> Weight {
		// Minimum execution time: 5_318 nanoseconds.
		Weight::from_ref_time(5_781_460 as u64)
			// Standard Error: 6_208
			.saturating_add(Weight::from_ref_time(1_992_057 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrTable(r: u32, ) -> Weight {
		// Minimum execution time: 5_347 nanoseconds.
		Weight::from_ref_time(4_564_760 as u64)
			// Standard Error: 11_798
			.saturating_add(Weight::from_ref_time(2_843_680 as u64).saturating_mul(r as u64))
	}
	/// The range of component `s` is `[1, 50]`.
	fn instruction_BrTable_per_elem(s: u32, ) -> Weight {
		// Minimum execution time: 8_204 nanoseconds.
		Weight::from_ref_time(8_689_121 as u64)
			// Standard Error: 1_827
			.saturating_add(Weight::from_ref_time(20_534 as u64).saturating_mul(s as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Call(r: u32, ) -> Weight {
		// Minimum execution time: 5_898 nanoseconds.
		Weight::from_ref_time(7_924_861 as u64)
			// Standard Error: 25_301
			.saturating_add(Weight::from_ref_time(13_470_930 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CallIndirect(r: u32, ) -> Weight {
		// Minimum execution time: 5_953 nanoseconds.
		Weight::from_ref_time(6_458_067 as u64)
			// Standard Error: 24_723
			.saturating_add(Weight::from_ref_time(15_936_878 as u64).saturating_mul(r as u64))
	}
}
