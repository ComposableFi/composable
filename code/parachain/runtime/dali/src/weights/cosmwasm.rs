
//! Autogenerated weights for `cosmwasm`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-13, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `spm`, CPU: `12th Gen Intel(R) Core(TM) i7-1280P`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dali-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/r0plghlp98kfz8h93shlgrqfgzf7cdpm-composable/bin/composable
// benchmark
// pallet
// --chain=dali-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=cosmwasm
// --extrinsic=*
// --steps=50
// --repeat=10
// --output=code/parachain/runtime/dali/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `cosmwasm`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> cosmwasm::WeightInfo for WeightInfo<T> {
	// Storage: Cosmwasm CodeHashToId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CurrentCodeId (r:1 w:1)
	// Storage: Cosmwasm PristineCode (r:0 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:0 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:0 w:1)
	/// The range of component `n` is `[1, 514288]`.
	fn upload(n: u32, ) -> Weight {
		// Minimum execution time: 486_522 nanoseconds.
		Weight::from_ref_time(479_309_963 as u64)
			// Standard Error: 89
			.saturating_add(Weight::from_ref_time(62_326 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn instantiate(n: u32, ) -> Weight {
		// Minimum execution time: 305_513 nanoseconds.
		Weight::from_ref_time(348_198_903 as u64)
			// Standard Error: 102_053
			.saturating_add(Weight::from_ref_time(29_028_112 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn execute(n: u32, ) -> Weight {
		// Minimum execution time: 274_754 nanoseconds.
		Weight::from_ref_time(313_482_981 as u64)
			// Standard Error: 84_119
			.saturating_add(Weight::from_ref_time(28_792_955 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:2 w:2)
	// Storage: Cosmwasm InstrumentedCode (r:2 w:1)
	// Storage: Cosmwasm PristineCode (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CodeHashToId (r:0 w:1)
	fn migrate() -> Weight {
		// Minimum execution time: 522_543 nanoseconds.
		Weight::from_ref_time(560_127_000 as u64)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	fn update_admin() -> Weight {
		// Minimum execution time: 253_663 nanoseconds.
		Weight::from_ref_time(264_275_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read() -> Weight {
		// Minimum execution time: 16_570 nanoseconds.
		Weight::from_ref_time(18_505_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read_other_contract() -> Weight {
		// Minimum execution time: 16_953 nanoseconds.
		Weight::from_ref_time(18_511_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:1)
	fn db_write() -> Weight {
		// Minimum execution time: 17_844 nanoseconds.
		Weight::from_ref_time(18_922_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn db_scan() -> Weight {
		// Minimum execution time: 3_653 nanoseconds.
		Weight::from_ref_time(3_843_000 as u64)
	}
	// Storage: unknown [0x] (r:1 w:0)
	fn db_next() -> Weight {
		// Minimum execution time: 13_449 nanoseconds.
		Weight::from_ref_time(14_380_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:0 w:1)
	fn db_remove() -> Weight {
		// Minimum execution time: 8_102 nanoseconds.
		Weight::from_ref_time(8_637_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Tokens Accounts (r:1 w:0)
	fn balance() -> Weight {
		// Minimum execution time: 4_996 nanoseconds.
		Weight::from_ref_time(5_457_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn transfer(n: u32, ) -> Weight {
		// Minimum execution time: 208 nanoseconds.
		Weight::from_ref_time(26_169_172 as u64)
			// Standard Error: 91_185
			.saturating_add(Weight::from_ref_time(25_050_621 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	fn set_contract_meta() -> Weight {
		// Minimum execution time: 13_575 nanoseconds.
		Weight::from_ref_time(14_547_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn running_contract_meta() -> Weight {
		// Minimum execution time: 3_541 nanoseconds.
		Weight::from_ref_time(3_931_000 as u64)
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn contract_meta() -> Weight {
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_ref_time(11_792_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	fn addr_validate() -> Weight {
		// Minimum execution time: 2_595 nanoseconds.
		Weight::from_ref_time(2_717_000 as u64)
	}
	fn addr_canonicalize() -> Weight {
		// Minimum execution time: 2_587 nanoseconds.
		Weight::from_ref_time(2_664_000 as u64)
	}
	fn addr_humanize() -> Weight {
		// Minimum execution time: 197 nanoseconds.
		Weight::from_ref_time(204_000 as u64)
	}
	fn secp256k1_recover_pubkey() -> Weight {
		// Minimum execution time: 36_329 nanoseconds.
		Weight::from_ref_time(36_581_000 as u64)
	}
	fn secp256k1_verify() -> Weight {
		// Minimum execution time: 36_457 nanoseconds.
		Weight::from_ref_time(36_853_000 as u64)
	}
	fn ed25519_verify() -> Weight {
		// Minimum execution time: 46_660 nanoseconds.
		Weight::from_ref_time(47_806_000 as u64)
	}
	fn ed25519_batch_verify() -> Weight {
		// Minimum execution time: 58_058 nanoseconds.
		Weight::from_ref_time(62_860_000 as u64)
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn continue_instantiate(n: u32, ) -> Weight {
		// Minimum execution time: 249_375 nanoseconds.
		Weight::from_ref_time(279_036_139 as u64)
			// Standard Error: 99_350
			.saturating_add(Weight::from_ref_time(25_585_373 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	/// The range of component `n` is `[0, 23]`.
	fn continue_execute(n: u32, ) -> Weight {
		// Minimum execution time: 212_816 nanoseconds.
		Weight::from_ref_time(227_856_909 as u64)
			// Standard Error: 40_161
			.saturating_add(Weight::from_ref_time(1_141_814 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_migrate() -> Weight {
		// Minimum execution time: 212_561 nanoseconds.
		Weight::from_ref_time(218_854_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_query() -> Weight {
		// Minimum execution time: 202_837 nanoseconds.
		Weight::from_ref_time(206_665_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_reply() -> Weight {
		// Minimum execution time: 212_412 nanoseconds.
		Weight::from_ref_time(219_057_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_contract_info() -> Weight {
		// Minimum execution time: 21_069 nanoseconds.
		Weight::from_ref_time(22_461_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_code_info() -> Weight {
		// Minimum execution time: 14_336 nanoseconds.
		Weight::from_ref_time(15_284_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:0)
	fn query_raw() -> Weight {
		// Minimum execution time: 26_027 nanoseconds.
		Weight::from_ref_time(28_112_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Const(r: u32, ) -> Weight {
		// Minimum execution time: 2_350 nanoseconds.
		Weight::from_ref_time(3_777_184 as u64)
			// Standard Error: 8_380
			.saturating_add(Weight::from_ref_time(442_290 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Const(r: u32, ) -> Weight {
		// Minimum execution time: 2_453 nanoseconds.
		Weight::from_ref_time(3_330_396 as u64)
			// Standard Error: 3_482
			.saturating_add(Weight::from_ref_time(449_978 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Load(r: u32, ) -> Weight {
		// Minimum execution time: 2_333 nanoseconds.
		Weight::from_ref_time(3_030_261 as u64)
			// Standard Error: 20_842
			.saturating_add(Weight::from_ref_time(1_088_659 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Load(r: u32, ) -> Weight {
		// Minimum execution time: 2_394 nanoseconds.
		Weight::from_ref_time(2_714_909 as u64)
			// Standard Error: 4_119
			.saturating_add(Weight::from_ref_time(1_094_744 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Store(r: u32, ) -> Weight {
		// Minimum execution time: 2_534 nanoseconds.
		Weight::from_ref_time(4_690_298 as u64)
			// Standard Error: 26_606
			.saturating_add(Weight::from_ref_time(2_013_373 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Store(r: u32, ) -> Weight {
		// Minimum execution time: 4_621 nanoseconds.
		Weight::from_ref_time(3_250_418 as u64)
			// Standard Error: 24_537
			.saturating_add(Weight::from_ref_time(1_944_045 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eq(r: u32, ) -> Weight {
		// Minimum execution time: 2_439 nanoseconds.
		Weight::from_ref_time(3_198_688 as u64)
			// Standard Error: 4_294
			.saturating_add(Weight::from_ref_time(1_113_784 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eqz(r: u32, ) -> Weight {
		// Minimum execution time: 2_412 nanoseconds.
		Weight::from_ref_time(3_436_458 as u64)
			// Standard Error: 14_710
			.saturating_add(Weight::from_ref_time(783_200 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ne(r: u32, ) -> Weight {
		// Minimum execution time: 2_408 nanoseconds.
		Weight::from_ref_time(4_405_838 as u64)
			// Standard Error: 7_909
			.saturating_add(Weight::from_ref_time(1_049_356 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LtS(r: u32, ) -> Weight {
		// Minimum execution time: 2_479 nanoseconds.
		Weight::from_ref_time(4_103_704 as u64)
			// Standard Error: 15_943
			.saturating_add(Weight::from_ref_time(1_101_409 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GtS(r: u32, ) -> Weight {
		// Minimum execution time: 2_528 nanoseconds.
		Weight::from_ref_time(3_049_214 as u64)
			// Standard Error: 4_253
			.saturating_add(Weight::from_ref_time(1_152_479 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LeS(r: u32, ) -> Weight {
		// Minimum execution time: 2_514 nanoseconds.
		Weight::from_ref_time(3_624_640 as u64)
			// Standard Error: 7_413
			.saturating_add(Weight::from_ref_time(1_104_432 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GeS(r: u32, ) -> Weight {
		// Minimum execution time: 2_327 nanoseconds.
		Weight::from_ref_time(3_563_152 as u64)
			// Standard Error: 3_952
			.saturating_add(Weight::from_ref_time(1_086_382 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Clz(r: u32, ) -> Weight {
		// Minimum execution time: 2_487 nanoseconds.
		Weight::from_ref_time(3_605_604 as u64)
			// Standard Error: 3_205
			.saturating_add(Weight::from_ref_time(754_903 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ctz(r: u32, ) -> Weight {
		// Minimum execution time: 2_492 nanoseconds.
		Weight::from_ref_time(3_859_743 as u64)
			// Standard Error: 7_343
			.saturating_add(Weight::from_ref_time(764_507 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Popcnt(r: u32, ) -> Weight {
		// Minimum execution time: 2_499 nanoseconds.
		Weight::from_ref_time(3_838_224 as u64)
			// Standard Error: 3_861
			.saturating_add(Weight::from_ref_time(747_643 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Add(r: u32, ) -> Weight {
		// Minimum execution time: 2_401 nanoseconds.
		Weight::from_ref_time(4_909_703 as u64)
			// Standard Error: 11_008
			.saturating_add(Weight::from_ref_time(1_048_783 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Sub(r: u32, ) -> Weight {
		// Minimum execution time: 2_405 nanoseconds.
		Weight::from_ref_time(1_742_395 as u64)
			// Standard Error: 10_217
			.saturating_add(Weight::from_ref_time(1_391_883 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Mul(r: u32, ) -> Weight {
		// Minimum execution time: 2_644 nanoseconds.
		Weight::from_ref_time(4_266_294 as u64)
			// Standard Error: 15_236
			.saturating_add(Weight::from_ref_time(1_103_569 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivS(r: u32, ) -> Weight {
		// Minimum execution time: 2_422 nanoseconds.
		Weight::from_ref_time(3_311_186 as u64)
			// Standard Error: 13_609
			.saturating_add(Weight::from_ref_time(1_311_681 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivU(r: u32, ) -> Weight {
		// Minimum execution time: 2_331 nanoseconds.
		Weight::from_ref_time(4_012_575 as u64)
			// Standard Error: 5_314
			.saturating_add(Weight::from_ref_time(1_199_235 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64RemS(r: u32, ) -> Weight {
		// Minimum execution time: 2_534 nanoseconds.
		Weight::from_ref_time(3_802_404 as u64)
			// Standard Error: 11_527
			.saturating_add(Weight::from_ref_time(1_324_965 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64And(r: u32, ) -> Weight {
		// Minimum execution time: 2_372 nanoseconds.
		Weight::from_ref_time(4_281_743 as u64)
			// Standard Error: 12_165
			.saturating_add(Weight::from_ref_time(1_113_243 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Or(r: u32, ) -> Weight {
		// Minimum execution time: 2_302 nanoseconds.
		Weight::from_ref_time(3_525_631 as u64)
			// Standard Error: 5_860
			.saturating_add(Weight::from_ref_time(1_092_407 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Xor(r: u32, ) -> Weight {
		// Minimum execution time: 2_350 nanoseconds.
		Weight::from_ref_time(3_368_401 as u64)
			// Standard Error: 3_858
			.saturating_add(Weight::from_ref_time(1_108_908 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Shl(r: u32, ) -> Weight {
		// Minimum execution time: 2_313 nanoseconds.
		Weight::from_ref_time(3_834_225 as u64)
			// Standard Error: 7_438
			.saturating_add(Weight::from_ref_time(1_093_935 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ShrS(r: u32, ) -> Weight {
		// Minimum execution time: 2_406 nanoseconds.
		Weight::from_ref_time(3_467_828 as u64)
			// Standard Error: 6_135
			.saturating_add(Weight::from_ref_time(1_155_115 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotl(r: u32, ) -> Weight {
		// Minimum execution time: 2_263 nanoseconds.
		Weight::from_ref_time(3_263_134 as u64)
			// Standard Error: 9_363
			.saturating_add(Weight::from_ref_time(1_154_789 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotr(r: u32, ) -> Weight {
		// Minimum execution time: 2_370 nanoseconds.
		Weight::from_ref_time(3_927_796 as u64)
			// Standard Error: 5_883
			.saturating_add(Weight::from_ref_time(1_122_921 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight {
		// Minimum execution time: 2_434 nanoseconds.
		Weight::from_ref_time(3_331_114 as u64)
			// Standard Error: 1_933
			.saturating_add(Weight::from_ref_time(752_568 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I32WrapI64(r: u32, ) -> Weight {
		// Minimum execution time: 2_394 nanoseconds.
		Weight::from_ref_time(3_913_113 as u64)
			// Standard Error: 8_458
			.saturating_add(Weight::from_ref_time(748_515 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Eq(r: u32, ) -> Weight {
		// Minimum execution time: 2_435 nanoseconds.
		Weight::from_ref_time(2_603_890 as u64)
			// Standard Error: 19_495
			.saturating_add(Weight::from_ref_time(1_209_244 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ne(r: u32, ) -> Weight {
		// Minimum execution time: 2_321 nanoseconds.
		Weight::from_ref_time(2_619_254 as u64)
			// Standard Error: 17_308
			.saturating_add(Weight::from_ref_time(1_139_154 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Lt(r: u32, ) -> Weight {
		// Minimum execution time: 2_471 nanoseconds.
		Weight::from_ref_time(3_345_176 as u64)
			// Standard Error: 4_085
			.saturating_add(Weight::from_ref_time(1_108_073 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Gt(r: u32, ) -> Weight {
		// Minimum execution time: 2_413 nanoseconds.
		Weight::from_ref_time(3_486_541 as u64)
			// Standard Error: 7_697
			.saturating_add(Weight::from_ref_time(1_115_713 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Le(r: u32, ) -> Weight {
		// Minimum execution time: 2_478 nanoseconds.
		Weight::from_ref_time(3_036_076 as u64)
			// Standard Error: 19_077
			.saturating_add(Weight::from_ref_time(1_161_975 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ge(r: u32, ) -> Weight {
		// Minimum execution time: 2_450 nanoseconds.
		Weight::from_ref_time(3_654_626 as u64)
			// Standard Error: 5_537
			.saturating_add(Weight::from_ref_time(1_088_535 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Abs(r: u32, ) -> Weight {
		// Minimum execution time: 2_354 nanoseconds.
		Weight::from_ref_time(3_416_332 as u64)
			// Standard Error: 15_416
			.saturating_add(Weight::from_ref_time(1_043_278 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Neg(r: u32, ) -> Weight {
		// Minimum execution time: 2_396 nanoseconds.
		Weight::from_ref_time(3_798_157 as u64)
			// Standard Error: 12_339
			.saturating_add(Weight::from_ref_time(773_830 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ceil(r: u32, ) -> Weight {
		// Minimum execution time: 2_323 nanoseconds.
		Weight::from_ref_time(3_933_753 as u64)
			// Standard Error: 6_966
			.saturating_add(Weight::from_ref_time(1_038_339 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Floor(r: u32, ) -> Weight {
		// Minimum execution time: 2_402 nanoseconds.
		Weight::from_ref_time(3_031_904 as u64)
			// Standard Error: 4_193
			.saturating_add(Weight::from_ref_time(1_137_752 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Trunc(r: u32, ) -> Weight {
		// Minimum execution time: 2_446 nanoseconds.
		Weight::from_ref_time(4_321_114 as u64)
			// Standard Error: 11_620
			.saturating_add(Weight::from_ref_time(1_048_798 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Nearest(r: u32, ) -> Weight {
		// Minimum execution time: 2_398 nanoseconds.
		Weight::from_ref_time(5_067_784 as u64)
			// Standard Error: 10_051
			.saturating_add(Weight::from_ref_time(1_410_178 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sqrt(r: u32, ) -> Weight {
		// Minimum execution time: 2_448 nanoseconds.
		Weight::from_ref_time(3_467_460 as u64)
			// Standard Error: 7_056
			.saturating_add(Weight::from_ref_time(1_101_046 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Add(r: u32, ) -> Weight {
		// Minimum execution time: 2_374 nanoseconds.
		Weight::from_ref_time(3_944_309 as u64)
			// Standard Error: 6_162
			.saturating_add(Weight::from_ref_time(1_086_896 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sub(r: u32, ) -> Weight {
		// Minimum execution time: 2_335 nanoseconds.
		Weight::from_ref_time(3_675_081 as u64)
			// Standard Error: 6_335
			.saturating_add(Weight::from_ref_time(1_141_283 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Mul(r: u32, ) -> Weight {
		// Minimum execution time: 3_937 nanoseconds.
		Weight::from_ref_time(4_455_752 as u64)
			// Standard Error: 9_789
			.saturating_add(Weight::from_ref_time(1_058_031 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Div(r: u32, ) -> Weight {
		// Minimum execution time: 2_406 nanoseconds.
		Weight::from_ref_time(3_873_750 as u64)
			// Standard Error: 10_820
			.saturating_add(Weight::from_ref_time(1_136_550 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Min(r: u32, ) -> Weight {
		// Minimum execution time: 2_415 nanoseconds.
		Weight::from_ref_time(2_590_803 as u64)
			// Standard Error: 22_411
			.saturating_add(Weight::from_ref_time(1_417_884 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Max(r: u32, ) -> Weight {
		// Minimum execution time: 2_413 nanoseconds.
		Weight::from_ref_time(3_832_062 as u64)
			// Standard Error: 5_578
			.saturating_add(Weight::from_ref_time(1_386_533 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Copysign(r: u32, ) -> Weight {
		// Minimum execution time: 2_393 nanoseconds.
		Weight::from_ref_time(4_972_455 as u64)
			// Standard Error: 12_756
			.saturating_add(Weight::from_ref_time(1_057_093 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Select(r: u32, ) -> Weight {
		// Minimum execution time: 2_397 nanoseconds.
		Weight::from_ref_time(3_446_884 as u64)
			// Standard Error: 5_787
			.saturating_add(Weight::from_ref_time(1_369_982 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_If(r: u32, ) -> Weight {
		// Minimum execution time: 3_283 nanoseconds.
		Weight::from_ref_time(3_223_457 as u64)
			// Standard Error: 2_557
			.saturating_add(Weight::from_ref_time(646_749 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Else(r: u32, ) -> Weight {
		// Minimum execution time: 2_335 nanoseconds.
		Weight::from_ref_time(3_644_806 as u64)
			// Standard Error: 5_926
			.saturating_add(Weight::from_ref_time(983_770 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetLocal(r: u32, ) -> Weight {
		// Minimum execution time: 2_333 nanoseconds.
		Weight::from_ref_time(3_080_248 as u64)
			// Standard Error: 3_012
			.saturating_add(Weight::from_ref_time(467_621 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetLocal(r: u32, ) -> Weight {
		// Minimum execution time: 2_350 nanoseconds.
		Weight::from_ref_time(3_055_909 as u64)
			// Standard Error: 8_994
			.saturating_add(Weight::from_ref_time(524_888 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_TeeLocal(r: u32, ) -> Weight {
		// Minimum execution time: 2_348 nanoseconds.
		Weight::from_ref_time(2_616_785 as u64)
			// Standard Error: 642
			.saturating_add(Weight::from_ref_time(2_995 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetGlobal(_r: u32, ) -> Weight {
		// Minimum execution time: 2_472 nanoseconds.
		Weight::from_ref_time(3_054_357 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetGlobal(_r: u32, ) -> Weight {
		// Minimum execution time: 2_587 nanoseconds.
		Weight::from_ref_time(2_930_008 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CurrentMemory(r: u32, ) -> Weight {
		// Minimum execution time: 2_581 nanoseconds.
		Weight::from_ref_time(3_908_254 as u64)
			// Standard Error: 5_253
			.saturating_add(Weight::from_ref_time(1_051_996 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 3]`.
	fn instruction_GrowMemory(r: u32, ) -> Weight {
		// Minimum execution time: 2_420 nanoseconds.
		Weight::from_ref_time(2_570_000 as u64)
			// Standard Error: 16_852_844
			.saturating_add(Weight::from_ref_time(1_568_575_268 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Br(r: u32, ) -> Weight {
		// Minimum execution time: 2_320 nanoseconds.
		Weight::from_ref_time(3_162_724 as u64)
			// Standard Error: 4_930
			.saturating_add(Weight::from_ref_time(568_992 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrIf(r: u32, ) -> Weight {
		// Minimum execution time: 2_394 nanoseconds.
		Weight::from_ref_time(1_402_292 as u64)
			// Standard Error: 12_058
			.saturating_add(Weight::from_ref_time(984_582 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrTable(r: u32, ) -> Weight {
		// Minimum execution time: 2_357 nanoseconds.
		Weight::from_ref_time(878_231 as u64)
			// Standard Error: 20_371
			.saturating_add(Weight::from_ref_time(1_489_417 as u64).saturating_mul(r as u64))
	}
	/// The range of component `s` is `[1, 50]`.
	fn instruction_BrTable_per_elem(s: u32, ) -> Weight {
		// Minimum execution time: 3_895 nanoseconds.
		Weight::from_ref_time(4_118_926 as u64)
			// Standard Error: 2_713
			.saturating_add(Weight::from_ref_time(15_956 as u64).saturating_mul(s as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Call(r: u32, ) -> Weight {
		// Minimum execution time: 2_801 nanoseconds.
		Weight::from_ref_time(10_277_292 as u64)
			// Standard Error: 47_023
			.saturating_add(Weight::from_ref_time(7_282_800 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CallIndirect(r: u32, ) -> Weight {
		// Minimum execution time: 2_980 nanoseconds.
		Weight::from_ref_time(7_736_401 as u64)
			// Standard Error: 15_884
			.saturating_add(Weight::from_ref_time(8_204_404 as u64).saturating_mul(r as u64))
	}
}
