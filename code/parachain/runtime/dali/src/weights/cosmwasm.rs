
//! Autogenerated weights for `cosmwasm`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-14, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ddf18ea9c649`, CPU: `Intel(R) Xeon(R) CPU @ 3.10GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dali-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/7as5b27dws6pfhhpjrs68qfvfx2ldcli-composable/bin/composable
// benchmark
// pallet
// --chain=dali-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=*
// --extrinsic=*
// --steps=50
// --repeat=10
// --output=code/parachain/runtime/dali/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `cosmwasm`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> cosmwasm::WeightInfo for WeightInfo<T> {
	// Storage: Cosmwasm CodeHashToId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CurrentCodeId (r:1 w:1)
	// Storage: Cosmwasm PristineCode (r:0 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:0 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:0 w:1)
	/// The range of component `n` is `[1, 514288]`.
	fn upload(n: u32, ) -> Weight {
		// Minimum execution time: 545_337 nanoseconds.
		Weight::from_ref_time(632_313_774)
			// Standard Error: 161
			.saturating_add(Weight::from_ref_time(119_209).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 24]`.
	fn instantiate(n: u32, ) -> Weight {
		// Minimum execution time: 416_394 nanoseconds.
		Weight::from_ref_time(458_222_162)
			// Standard Error: 164_864
			.saturating_add(Weight::from_ref_time(36_064_218).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(n.into())))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 24]`.
	fn execute(n: u32, ) -> Weight {
		// Minimum execution time: 371_109 nanoseconds.
		Weight::from_ref_time(401_607_748)
			// Standard Error: 128_428
			.saturating_add(Weight::from_ref_time(36_284_470).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(n.into())))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:2 w:2)
	// Storage: Cosmwasm InstrumentedCode (r:2 w:1)
	// Storage: Cosmwasm PristineCode (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CodeHashToId (r:0 w:1)
	fn migrate() -> Weight {
		// Minimum execution time: 725_324 nanoseconds.
		Weight::from_ref_time(751_115_000)
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	fn update_admin() -> Weight {
		// Minimum execution time: 355_830 nanoseconds.
		Weight::from_ref_time(360_726_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read() -> Weight {
		// Minimum execution time: 20_507 nanoseconds.
		Weight::from_ref_time(21_497_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read_other_contract() -> Weight {
		// Minimum execution time: 20_613 nanoseconds.
		Weight::from_ref_time(21_712_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:1)
	fn db_write() -> Weight {
		// Minimum execution time: 22_230 nanoseconds.
		Weight::from_ref_time(24_398_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn db_scan() -> Weight {
		// Minimum execution time: 5_831 nanoseconds.
		Weight::from_ref_time(6_379_000)
	}
	// Storage: unknown [0x] (r:1 w:0)
	fn db_next() -> Weight {
		// Minimum execution time: 16_643 nanoseconds.
		Weight::from_ref_time(18_195_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:0 w:1)
	fn db_remove() -> Weight {
		// Minimum execution time: 8_841 nanoseconds.
		Weight::from_ref_time(9_535_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Tokens Accounts (r:1 w:0)
	fn balance() -> Weight {
		// Minimum execution time: 6_037 nanoseconds.
		Weight::from_ref_time(6_349_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 24]`.
	fn transfer(n: u32, ) -> Weight {
		// Minimum execution time: 375 nanoseconds.
		Weight::from_ref_time(21_673_891)
			// Standard Error: 71_839
			.saturating_add(Weight::from_ref_time(31_828_095).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(n.into())))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	fn set_contract_meta() -> Weight {
		// Minimum execution time: 16_534 nanoseconds.
		Weight::from_ref_time(17_104_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn running_contract_meta() -> Weight {
		// Minimum execution time: 5_805 nanoseconds.
		Weight::from_ref_time(6_487_000)
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn contract_meta() -> Weight {
		// Minimum execution time: 13_422 nanoseconds.
		Weight::from_ref_time(14_447_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	fn addr_validate() -> Weight {
		// Minimum execution time: 3_445 nanoseconds.
		Weight::from_ref_time(3_530_000)
	}
	fn addr_canonicalize() -> Weight {
		// Minimum execution time: 3_461 nanoseconds.
		Weight::from_ref_time(3_553_000)
	}
	fn addr_humanize() -> Weight {
		// Minimum execution time: 293 nanoseconds.
		Weight::from_ref_time(324_000)
	}
	fn secp256k1_recover_pubkey() -> Weight {
		// Minimum execution time: 39_773 nanoseconds.
		Weight::from_ref_time(39_996_000)
	}
	fn secp256k1_verify() -> Weight {
		// Minimum execution time: 40_052 nanoseconds.
		Weight::from_ref_time(40_444_000)
	}
	fn ed25519_verify() -> Weight {
		// Minimum execution time: 57_331 nanoseconds.
		Weight::from_ref_time(58_079_000)
	}
	fn ed25519_batch_verify() -> Weight {
		// Minimum execution time: 145_672 nanoseconds.
		Weight::from_ref_time(160_662_000)
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 24]`.
	fn continue_instantiate(n: u32, ) -> Weight {
		// Minimum execution time: 348_728 nanoseconds.
		Weight::from_ref_time(389_670_224)
			// Standard Error: 121_098
			.saturating_add(Weight::from_ref_time(33_859_212).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(n.into())))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	/// The range of component `n` is `[0, 24]`.
	fn continue_execute(n: u32, ) -> Weight {
		// Minimum execution time: 313_786 nanoseconds.
		Weight::from_ref_time(328_635_154)
			// Standard Error: 57_888
			.saturating_add(Weight::from_ref_time(1_796_424).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_migrate() -> Weight {
		// Minimum execution time: 313_745 nanoseconds.
		Weight::from_ref_time(323_642_000)
			.saturating_add(T::DbWeight::get().reads(3))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_query() -> Weight {
		// Minimum execution time: 296_858 nanoseconds.
		Weight::from_ref_time(305_116_000)
			.saturating_add(T::DbWeight::get().reads(3))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_reply() -> Weight {
		// Minimum execution time: 313_053 nanoseconds.
		Weight::from_ref_time(321_090_000)
			.saturating_add(T::DbWeight::get().reads(3))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_contract_info() -> Weight {
		// Minimum execution time: 28_646 nanoseconds.
		Weight::from_ref_time(30_940_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_code_info() -> Weight {
		// Minimum execution time: 18_988 nanoseconds.
		Weight::from_ref_time(19_967_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:0)
	fn query_raw() -> Weight {
		// Minimum execution time: 32_131 nanoseconds.
		Weight::from_ref_time(35_012_000)
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Const(r: u32, ) -> Weight {
		// Minimum execution time: 4_333 nanoseconds.
		Weight::from_ref_time(4_965_012)
			// Standard Error: 4_211
			.saturating_add(Weight::from_ref_time(1_081_813).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Const(r: u32, ) -> Weight {
		// Minimum execution time: 4_414 nanoseconds.
		Weight::from_ref_time(4_766_115)
			// Standard Error: 3_838
			.saturating_add(Weight::from_ref_time(1_088_709).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Load(r: u32, ) -> Weight {
		// Minimum execution time: 4_319 nanoseconds.
		Weight::from_ref_time(6_167_940)
			// Standard Error: 12_731
			.saturating_add(Weight::from_ref_time(1_945_431).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Load(r: u32, ) -> Weight {
		// Minimum execution time: 4_388 nanoseconds.
		Weight::from_ref_time(6_559_122)
			// Standard Error: 12_558
			.saturating_add(Weight::from_ref_time(1_907_875).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Store(r: u32, ) -> Weight {
		// Minimum execution time: 4_344 nanoseconds.
		Weight::from_ref_time(5_407_660)
			// Standard Error: 8_812
			.saturating_add(Weight::from_ref_time(3_056_951).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Store(r: u32, ) -> Weight {
		// Minimum execution time: 4_364 nanoseconds.
		Weight::from_ref_time(5_640_183)
			// Standard Error: 8_905
			.saturating_add(Weight::from_ref_time(3_051_159).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eq(r: u32, ) -> Weight {
		// Minimum execution time: 4_503 nanoseconds.
		Weight::from_ref_time(4_542_682)
			// Standard Error: 7_558
			.saturating_add(Weight::from_ref_time(2_502_046).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eqz(r: u32, ) -> Weight {
		// Minimum execution time: 4_614 nanoseconds.
		Weight::from_ref_time(4_815_387)
			// Standard Error: 4_879
			.saturating_add(Weight::from_ref_time(1_736_171).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ne(r: u32, ) -> Weight {
		// Minimum execution time: 4_467 nanoseconds.
		Weight::from_ref_time(4_137_466)
			// Standard Error: 7_257
			.saturating_add(Weight::from_ref_time(2_527_179).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LtS(r: u32, ) -> Weight {
		// Minimum execution time: 4_481 nanoseconds.
		Weight::from_ref_time(4_369_041)
			// Standard Error: 8_306
			.saturating_add(Weight::from_ref_time(2_502_673).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GtS(r: u32, ) -> Weight {
		// Minimum execution time: 4_390 nanoseconds.
		Weight::from_ref_time(4_400_113)
			// Standard Error: 8_202
			.saturating_add(Weight::from_ref_time(2_517_655).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LeS(r: u32, ) -> Weight {
		// Minimum execution time: 4_321 nanoseconds.
		Weight::from_ref_time(4_549_161)
			// Standard Error: 5_775
			.saturating_add(Weight::from_ref_time(2_493_538).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GeS(r: u32, ) -> Weight {
		// Minimum execution time: 4_354 nanoseconds.
		Weight::from_ref_time(4_581_055)
			// Standard Error: 7_005
			.saturating_add(Weight::from_ref_time(2_499_414).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Clz(r: u32, ) -> Weight {
		// Minimum execution time: 4_272 nanoseconds.
		Weight::from_ref_time(4_703_140)
			// Standard Error: 8_242
			.saturating_add(Weight::from_ref_time(1_806_942).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ctz(r: u32, ) -> Weight {
		// Minimum execution time: 4_625 nanoseconds.
		Weight::from_ref_time(4_885_428)
			// Standard Error: 6_172
			.saturating_add(Weight::from_ref_time(1_799_215).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Popcnt(r: u32, ) -> Weight {
		// Minimum execution time: 4_413 nanoseconds.
		Weight::from_ref_time(4_845_415)
			// Standard Error: 4_758
			.saturating_add(Weight::from_ref_time(1_796_228).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Add(r: u32, ) -> Weight {
		// Minimum execution time: 4_485 nanoseconds.
		Weight::from_ref_time(4_485_738)
			// Standard Error: 7_371
			.saturating_add(Weight::from_ref_time(2_502_205).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Sub(r: u32, ) -> Weight {
		// Minimum execution time: 4_477 nanoseconds.
		Weight::from_ref_time(4_280_859)
			// Standard Error: 6_951
			.saturating_add(Weight::from_ref_time(2_513_871).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Mul(r: u32, ) -> Weight {
		// Minimum execution time: 4_506 nanoseconds.
		Weight::from_ref_time(4_505_966)
			// Standard Error: 8_849
			.saturating_add(Weight::from_ref_time(2_509_185).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivS(r: u32, ) -> Weight {
		// Minimum execution time: 4_393 nanoseconds.
		Weight::from_ref_time(4_821_831)
			// Standard Error: 10_186
			.saturating_add(Weight::from_ref_time(2_975_983).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivU(r: u32, ) -> Weight {
		// Minimum execution time: 4_331 nanoseconds.
		Weight::from_ref_time(4_415_858)
			// Standard Error: 7_042
			.saturating_add(Weight::from_ref_time(2_648_066).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64RemS(r: u32, ) -> Weight {
		// Minimum execution time: 4_467 nanoseconds.
		Weight::from_ref_time(4_301_054)
			// Standard Error: 6_869
			.saturating_add(Weight::from_ref_time(2_971_910).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64And(r: u32, ) -> Weight {
		// Minimum execution time: 4_396 nanoseconds.
		Weight::from_ref_time(4_607_501)
			// Standard Error: 6_527
			.saturating_add(Weight::from_ref_time(2_486_304).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Or(r: u32, ) -> Weight {
		// Minimum execution time: 4_514 nanoseconds.
		Weight::from_ref_time(4_673_510)
			// Standard Error: 6_174
			.saturating_add(Weight::from_ref_time(2_484_330).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Xor(r: u32, ) -> Weight {
		// Minimum execution time: 4_539 nanoseconds.
		Weight::from_ref_time(4_637_294)
			// Standard Error: 5_907
			.saturating_add(Weight::from_ref_time(2_483_885).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Shl(r: u32, ) -> Weight {
		// Minimum execution time: 4_385 nanoseconds.
		Weight::from_ref_time(4_079_931)
			// Standard Error: 7_944
			.saturating_add(Weight::from_ref_time(2_524_751).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ShrS(r: u32, ) -> Weight {
		// Minimum execution time: 4_504 nanoseconds.
		Weight::from_ref_time(4_675_434)
			// Standard Error: 6_864
			.saturating_add(Weight::from_ref_time(2_495_111).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotl(r: u32, ) -> Weight {
		// Minimum execution time: 4_527 nanoseconds.
		Weight::from_ref_time(4_323_113)
			// Standard Error: 8_443
			.saturating_add(Weight::from_ref_time(2_529_065).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotr(r: u32, ) -> Weight {
		// Minimum execution time: 4_545 nanoseconds.
		Weight::from_ref_time(4_476_857)
			// Standard Error: 7_092
			.saturating_add(Weight::from_ref_time(2_509_197).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight {
		// Minimum execution time: 4_536 nanoseconds.
		Weight::from_ref_time(4_778_405)
			// Standard Error: 4_229
			.saturating_add(Weight::from_ref_time(1_796_489).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I32WrapI64(r: u32, ) -> Weight {
		// Minimum execution time: 4_384 nanoseconds.
		Weight::from_ref_time(4_978_610)
			// Standard Error: 5_191
			.saturating_add(Weight::from_ref_time(1_695_807).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Eq(r: u32, ) -> Weight {
		// Minimum execution time: 4_513 nanoseconds.
		Weight::from_ref_time(4_520_022)
			// Standard Error: 7_616
			.saturating_add(Weight::from_ref_time(2_502_613).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ne(r: u32, ) -> Weight {
		// Minimum execution time: 4_571 nanoseconds.
		Weight::from_ref_time(5_372_281)
			// Standard Error: 6_552
			.saturating_add(Weight::from_ref_time(2_460_819).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Lt(r: u32, ) -> Weight {
		// Minimum execution time: 4_509 nanoseconds.
		Weight::from_ref_time(4_775_749)
			// Standard Error: 5_158
			.saturating_add(Weight::from_ref_time(2_426_605).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Gt(r: u32, ) -> Weight {
		// Minimum execution time: 4_294 nanoseconds.
		Weight::from_ref_time(4_801_882)
			// Standard Error: 5_568
			.saturating_add(Weight::from_ref_time(2_422_712).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Le(r: u32, ) -> Weight {
		// Minimum execution time: 4_540 nanoseconds.
		Weight::from_ref_time(4_921_537)
			// Standard Error: 8_061
			.saturating_add(Weight::from_ref_time(2_403_113).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ge(r: u32, ) -> Weight {
		// Minimum execution time: 4_664 nanoseconds.
		Weight::from_ref_time(5_087_634)
			// Standard Error: 8_138
			.saturating_add(Weight::from_ref_time(2_469_392).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Abs(r: u32, ) -> Weight {
		// Minimum execution time: 4_396 nanoseconds.
		Weight::from_ref_time(5_005_163)
			// Standard Error: 5_843
			.saturating_add(Weight::from_ref_time(1_693_694).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Neg(r: u32, ) -> Weight {
		// Minimum execution time: 4_611 nanoseconds.
		Weight::from_ref_time(4_657_527)
			// Standard Error: 6_958
			.saturating_add(Weight::from_ref_time(1_695_174).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ceil(r: u32, ) -> Weight {
		// Minimum execution time: 4_449 nanoseconds.
		Weight::from_ref_time(4_769_093)
			// Standard Error: 5_997
			.saturating_add(Weight::from_ref_time(1_724_024).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Floor(r: u32, ) -> Weight {
		// Minimum execution time: 4_456 nanoseconds.
		Weight::from_ref_time(4_821_277)
			// Standard Error: 7_028
			.saturating_add(Weight::from_ref_time(1_723_882).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Trunc(r: u32, ) -> Weight {
		// Minimum execution time: 4_577 nanoseconds.
		Weight::from_ref_time(4_800_949)
			// Standard Error: 4_236
			.saturating_add(Weight::from_ref_time(1_722_955).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Nearest(r: u32, ) -> Weight {
		// Minimum execution time: 4_458 nanoseconds.
		Weight::from_ref_time(5_082_645)
			// Standard Error: 5_999
			.saturating_add(Weight::from_ref_time(1_773_825).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sqrt(r: u32, ) -> Weight {
		// Minimum execution time: 4_576 nanoseconds.
		Weight::from_ref_time(4_736_799)
			// Standard Error: 6_597
			.saturating_add(Weight::from_ref_time(1_844_363).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Add(r: u32, ) -> Weight {
		// Minimum execution time: 4_449 nanoseconds.
		Weight::from_ref_time(4_928_831)
			// Standard Error: 5_490
			.saturating_add(Weight::from_ref_time(2_455_482).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sub(r: u32, ) -> Weight {
		// Minimum execution time: 4_433 nanoseconds.
		Weight::from_ref_time(4_595_221)
			// Standard Error: 6_659
			.saturating_add(Weight::from_ref_time(2_479_129).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Mul(r: u32, ) -> Weight {
		// Minimum execution time: 4_807 nanoseconds.
		Weight::from_ref_time(4_939_848)
			// Standard Error: 7_851
			.saturating_add(Weight::from_ref_time(2_461_864).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Div(r: u32, ) -> Weight {
		// Minimum execution time: 4_618 nanoseconds.
		Weight::from_ref_time(4_657_008)
			// Standard Error: 6_183
			.saturating_add(Weight::from_ref_time(2_470_049).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Min(r: u32, ) -> Weight {
		// Minimum execution time: 4_600 nanoseconds.
		Weight::from_ref_time(5_166_789)
			// Standard Error: 5_205
			.saturating_add(Weight::from_ref_time(2_401_733).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Max(r: u32, ) -> Weight {
		// Minimum execution time: 4_661 nanoseconds.
		Weight::from_ref_time(5_014_142)
			// Standard Error: 7_878
			.saturating_add(Weight::from_ref_time(2_426_071).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Copysign(r: u32, ) -> Weight {
		// Minimum execution time: 4_530 nanoseconds.
		Weight::from_ref_time(4_558_473)
			// Standard Error: 6_646
			.saturating_add(Weight::from_ref_time(2_483_024).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Select(r: u32, ) -> Weight {
		// Minimum execution time: 4_338 nanoseconds.
		Weight::from_ref_time(4_629_498)
			// Standard Error: 7_055
			.saturating_add(Weight::from_ref_time(3_121_646).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_If(r: u32, ) -> Weight {
		// Minimum execution time: 4_315 nanoseconds.
		Weight::from_ref_time(4_765_239)
			// Standard Error: 2_892
			.saturating_add(Weight::from_ref_time(1_144_818).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Else(r: u32, ) -> Weight {
		// Minimum execution time: 4_355 nanoseconds.
		Weight::from_ref_time(4_472_868)
			// Standard Error: 5_812
			.saturating_add(Weight::from_ref_time(1_792_970).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetLocal(r: u32, ) -> Weight {
		// Minimum execution time: 4_332 nanoseconds.
		Weight::from_ref_time(4_817_734)
			// Standard Error: 1_908
			.saturating_add(Weight::from_ref_time(1_069_774).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetLocal(r: u32, ) -> Weight {
		// Minimum execution time: 4_459 nanoseconds.
		Weight::from_ref_time(4_768_192)
			// Standard Error: 3_524
			.saturating_add(Weight::from_ref_time(1_360_177).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_TeeLocal(_r: u32, ) -> Weight {
		// Minimum execution time: 4_290 nanoseconds.
		Weight::from_ref_time(4_845_084)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetGlobal(r: u32, ) -> Weight {
		// Minimum execution time: 4_337 nanoseconds.
		Weight::from_ref_time(4_763_124)
			// Standard Error: 690
			.saturating_add(Weight::from_ref_time(930).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetGlobal(r: u32, ) -> Weight {
		// Minimum execution time: 4_380 nanoseconds.
		Weight::from_ref_time(4_810_284)
			// Standard Error: 943
			.saturating_add(Weight::from_ref_time(413).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CurrentMemory(r: u32, ) -> Weight {
		// Minimum execution time: 4_391 nanoseconds.
		Weight::from_ref_time(4_870_278)
			// Standard Error: 3_372
			.saturating_add(Weight::from_ref_time(1_276_269).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 3]`.
	fn instruction_GrowMemory(r: u32, ) -> Weight {
		// Minimum execution time: 4_255 nanoseconds.
		Weight::from_ref_time(4_524_000)
			// Standard Error: 16_404_702
			.saturating_add(Weight::from_ref_time(2_949_940_711).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Br(r: u32, ) -> Weight {
		// Minimum execution time: 4_296 nanoseconds.
		Weight::from_ref_time(4_759_412)
			// Standard Error: 1_834
			.saturating_add(Weight::from_ref_time(602_160).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrIf(r: u32, ) -> Weight {
		// Minimum execution time: 4_213 nanoseconds.
		Weight::from_ref_time(4_478_137)
			// Standard Error: 3_062
			.saturating_add(Weight::from_ref_time(1_200_148).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrTable(r: u32, ) -> Weight {
		// Minimum execution time: 4_173 nanoseconds.
		Weight::from_ref_time(4_066_790)
			// Standard Error: 7_299
			.saturating_add(Weight::from_ref_time(1_804_578).saturating_mul(r.into()))
	}
	/// The range of component `s` is `[1, 50]`.
	fn instruction_BrTable_per_elem(s: u32, ) -> Weight {
		// Minimum execution time: 6_125 nanoseconds.
		Weight::from_ref_time(6_606_780)
			// Standard Error: 1_082
			.saturating_add(Weight::from_ref_time(11_393).saturating_mul(s.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Call(r: u32, ) -> Weight {
		// Minimum execution time: 4_787 nanoseconds.
		Weight::from_ref_time(4_177_286)
			// Standard Error: 11_850
			.saturating_add(Weight::from_ref_time(8_271_863).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CallIndirect(r: u32, ) -> Weight {
		// Minimum execution time: 4_859 nanoseconds.
		Weight::from_ref_time(5_684_401)
			// Standard Error: 15_478
			.saturating_add(Weight::from_ref_time(10_375_324).saturating_mul(r.into()))
	}
}
