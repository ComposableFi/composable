
//! Autogenerated weights for `cosmwasm`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-18, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `7066db519b2a`, CPU: `Intel(R) Xeon(R) CPU @ 3.10GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dali-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/a8zw7i97gjsaanq9c839pbaklnsjsqcf-composable/bin/composable
// benchmark
// pallet
// --chain=dali-dev
// --execution=wasm
// --wasm-execution=compiled
// --wasm-instantiation-strategy=legacy-instance-reuse
// --pallet=*
// --extrinsic=*
// --steps=50
// --repeat=10
// --output=code/parachain/runtime/dali/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `cosmwasm`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> cosmwasm::WeightInfo for WeightInfo<T> {
	// Storage: Cosmwasm CodeHashToId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CurrentCodeId (r:1 w:1)
	// Storage: Cosmwasm PristineCode (r:0 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:0 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:0 w:1)
	/// The range of component `n` is `[1, 514288]`.
	fn upload(n: u32, ) -> Weight {
		Weight::from_ref_time(516_669_000 as u64)
			// Standard Error: 57
			.saturating_add(Weight::from_ref_time(103_640 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn instantiate(n: u32, ) -> Weight {
		Weight::from_ref_time(891_863_000 as u64)
			// Standard Error: 112_841
			.saturating_add(Weight::from_ref_time(36_838_850 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn execute(n: u32, ) -> Weight {
		Weight::from_ref_time(873_293_000 as u64)
			// Standard Error: 93_177
			.saturating_add(Weight::from_ref_time(36_189_506 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:2 w:2)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm PristineCode (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CodeHashToId (r:0 w:1)
	fn migrate() -> Weight {
		Weight::from_ref_time(1_217_380_000 as u64)
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn update_admin() -> Weight {
		Weight::from_ref_time(455_010_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read() -> Weight {
		Weight::from_ref_time(24_415_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read_other_contract() -> Weight {
		Weight::from_ref_time(24_268_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:1)
	fn db_write() -> Weight {
		Weight::from_ref_time(25_099_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn db_scan() -> Weight {
		Weight::from_ref_time(8_838_000 as u64)
	}
	// Storage: unknown [0x] (r:1 w:0)
	fn db_next() -> Weight {
		Weight::from_ref_time(49_199_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:0 w:1)
	fn db_remove() -> Weight {
		Weight::from_ref_time(13_137_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Tokens Accounts (r:1 w:0)
	fn balance() -> Weight {
		Weight::from_ref_time(7_216_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn transfer(n: u32, ) -> Weight {
		Weight::from_ref_time(346_000 as u64)
			// Standard Error: 73_971
			.saturating_add(Weight::from_ref_time(32_738_761 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	fn set_contract_meta() -> Weight {
		Weight::from_ref_time(18_064_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn running_contract_meta() -> Weight {
		Weight::from_ref_time(8_606_000 as u64)
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn contract_meta() -> Weight {
		Weight::from_ref_time(14_177_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	fn addr_validate() -> Weight {
		Weight::from_ref_time(1_574_000 as u64)
	}
	fn addr_canonicalize() -> Weight {
		Weight::from_ref_time(1_551_000 as u64)
	}
	fn addr_humanize() -> Weight {
		Weight::from_ref_time(282_000 as u64)
	}
	fn secp256k1_recover_pubkey() -> Weight {
		Weight::from_ref_time(40_029_000 as u64)
	}
	fn secp256k1_verify() -> Weight {
		Weight::from_ref_time(40_120_000 as u64)
	}
	fn ed25519_verify() -> Weight {
		Weight::from_ref_time(57_886_000 as u64)
	}
	fn ed25519_batch_verify() -> Weight {
		Weight::from_ref_time(141_606_000 as u64)
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn continue_instantiate(n: u32, ) -> Weight {
		Weight::from_ref_time(843_495_000 as u64)
			// Standard Error: 98_597
			.saturating_add(Weight::from_ref_time(34_086_454 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	/// The range of component `n` is `[0, 23]`.
	fn continue_execute(n: u32, ) -> Weight {
		Weight::from_ref_time(812_842_000 as u64)
			// Standard Error: 59_148
			.saturating_add(Weight::from_ref_time(2_544_053 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_migrate() -> Weight {
		Weight::from_ref_time(750_350_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_query() -> Weight {
		Weight::from_ref_time(723_962_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_reply() -> Weight {
		Weight::from_ref_time(742_812_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_info() -> Weight {
		Weight::from_ref_time(27_957_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:0)
	fn query_raw() -> Weight {
		Weight::from_ref_time(35_171_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Const(r: u32, ) -> Weight {
		Weight::from_ref_time(86_042_000 as u64)
			// Standard Error: 6_270
			.saturating_add(Weight::from_ref_time(1_230_490 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Const(r: u32, ) -> Weight {
		Weight::from_ref_time(84_683_000 as u64)
			// Standard Error: 8_484
			.saturating_add(Weight::from_ref_time(1_358_735 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Load(r: u32, ) -> Weight {
		Weight::from_ref_time(84_464_000 as u64)
			// Standard Error: 9_229
			.saturating_add(Weight::from_ref_time(4_054_807 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Load(r: u32, ) -> Weight {
		Weight::from_ref_time(87_123_000 as u64)
			// Standard Error: 7_542
			.saturating_add(Weight::from_ref_time(4_008_511 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Store(r: u32, ) -> Weight {
		Weight::from_ref_time(83_785_000 as u64)
			// Standard Error: 13_351
			.saturating_add(Weight::from_ref_time(4_290_802 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Store(r: u32, ) -> Weight {
		Weight::from_ref_time(85_120_000 as u64)
			// Standard Error: 7_685
			.saturating_add(Weight::from_ref_time(4_130_366 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eq(r: u32, ) -> Weight {
		Weight::from_ref_time(84_071_000 as u64)
			// Standard Error: 8_602
			.saturating_add(Weight::from_ref_time(2_650_451 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eqz(r: u32, ) -> Weight {
		Weight::from_ref_time(85_378_000 as u64)
			// Standard Error: 11_212
			.saturating_add(Weight::from_ref_time(1_894_616 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ne(r: u32, ) -> Weight {
		Weight::from_ref_time(90_417_000 as u64)
			// Standard Error: 14_389
			.saturating_add(Weight::from_ref_time(2_547_641 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LtS(r: u32, ) -> Weight {
		Weight::from_ref_time(83_504_000 as u64)
			// Standard Error: 14_813
			.saturating_add(Weight::from_ref_time(2_808_846 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GtS(r: u32, ) -> Weight {
		Weight::from_ref_time(85_909_000 as u64)
			// Standard Error: 13_830
			.saturating_add(Weight::from_ref_time(2_779_293 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LeS(r: u32, ) -> Weight {
		Weight::from_ref_time(83_066_000 as u64)
			// Standard Error: 13_020
			.saturating_add(Weight::from_ref_time(2_783_902 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GeS(r: u32, ) -> Weight {
		Weight::from_ref_time(84_433_000 as u64)
			// Standard Error: 14_417
			.saturating_add(Weight::from_ref_time(2_883_483 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Clz(r: u32, ) -> Weight {
		Weight::from_ref_time(83_035_000 as u64)
			// Standard Error: 13_375
			.saturating_add(Weight::from_ref_time(2_131_938 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ctz(r: u32, ) -> Weight {
		Weight::from_ref_time(82_708_000 as u64)
			// Standard Error: 11_453
			.saturating_add(Weight::from_ref_time(2_119_954 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Popcnt(r: u32, ) -> Weight {
		Weight::from_ref_time(83_038_000 as u64)
			// Standard Error: 10_961
			.saturating_add(Weight::from_ref_time(2_058_269 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Add(r: u32, ) -> Weight {
		Weight::from_ref_time(83_137_000 as u64)
			// Standard Error: 14_454
			.saturating_add(Weight::from_ref_time(2_911_606 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Sub(r: u32, ) -> Weight {
		Weight::from_ref_time(86_412_000 as u64)
			// Standard Error: 12_569
			.saturating_add(Weight::from_ref_time(2_839_049 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Mul(r: u32, ) -> Weight {
		Weight::from_ref_time(83_301_000 as u64)
			// Standard Error: 12_530
			.saturating_add(Weight::from_ref_time(2_863_843 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivS(r: u32, ) -> Weight {
		Weight::from_ref_time(84_120_000 as u64)
			// Standard Error: 12_578
			.saturating_add(Weight::from_ref_time(3_529_468 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivU(r: u32, ) -> Weight {
		Weight::from_ref_time(82_941_000 as u64)
			// Standard Error: 12_486
			.saturating_add(Weight::from_ref_time(3_385_124 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64RemS(r: u32, ) -> Weight {
		Weight::from_ref_time(86_256_000 as u64)
			// Standard Error: 12_343
			.saturating_add(Weight::from_ref_time(3_456_231 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64And(r: u32, ) -> Weight {
		Weight::from_ref_time(83_989_000 as u64)
			// Standard Error: 12_199
			.saturating_add(Weight::from_ref_time(2_751_920 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Or(r: u32, ) -> Weight {
		Weight::from_ref_time(86_305_000 as u64)
			// Standard Error: 7_815
			.saturating_add(Weight::from_ref_time(2_612_440 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Xor(r: u32, ) -> Weight {
		Weight::from_ref_time(83_753_000 as u64)
			// Standard Error: 9_420
			.saturating_add(Weight::from_ref_time(2_704_554 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Shl(r: u32, ) -> Weight {
		Weight::from_ref_time(83_121_000 as u64)
			// Standard Error: 7_504
			.saturating_add(Weight::from_ref_time(2_716_610 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ShrS(r: u32, ) -> Weight {
		Weight::from_ref_time(83_157_000 as u64)
			// Standard Error: 7_327
			.saturating_add(Weight::from_ref_time(2_722_109 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotl(r: u32, ) -> Weight {
		Weight::from_ref_time(82_880_000 as u64)
			// Standard Error: 8_960
			.saturating_add(Weight::from_ref_time(2_742_722 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotr(r: u32, ) -> Weight {
		Weight::from_ref_time(83_143_000 as u64)
			// Standard Error: 6_580
			.saturating_add(Weight::from_ref_time(2_727_580 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight {
		Weight::from_ref_time(83_197_000 as u64)
			// Standard Error: 6_910
			.saturating_add(Weight::from_ref_time(1_980_863 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I32WrapI64(r: u32, ) -> Weight {
		Weight::from_ref_time(83_260_000 as u64)
			// Standard Error: 8_492
			.saturating_add(Weight::from_ref_time(1_908_991 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Eq(r: u32, ) -> Weight {
		Weight::from_ref_time(84_111_000 as u64)
			// Standard Error: 8_723
			.saturating_add(Weight::from_ref_time(2_689_983 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ne(r: u32, ) -> Weight {
		Weight::from_ref_time(84_372_000 as u64)
			// Standard Error: 6_581
			.saturating_add(Weight::from_ref_time(2_663_321 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Lt(r: u32, ) -> Weight {
		Weight::from_ref_time(82_979_000 as u64)
			// Standard Error: 6_791
			.saturating_add(Weight::from_ref_time(2_711_450 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Gt(r: u32, ) -> Weight {
		Weight::from_ref_time(83_100_000 as u64)
			// Standard Error: 13_128
			.saturating_add(Weight::from_ref_time(2_736_231 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Le(r: u32, ) -> Weight {
		Weight::from_ref_time(85_602_000 as u64)
			// Standard Error: 5_696
			.saturating_add(Weight::from_ref_time(2_641_982 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ge(r: u32, ) -> Weight {
		Weight::from_ref_time(84_935_000 as u64)
			// Standard Error: 7_485
			.saturating_add(Weight::from_ref_time(2_679_412 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Abs(r: u32, ) -> Weight {
		Weight::from_ref_time(87_867_000 as u64)
			// Standard Error: 5_217
			.saturating_add(Weight::from_ref_time(1_823_019 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Neg(r: u32, ) -> Weight {
		Weight::from_ref_time(83_232_000 as u64)
			// Standard Error: 6_330
			.saturating_add(Weight::from_ref_time(1_984_924 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ceil(r: u32, ) -> Weight {
		Weight::from_ref_time(84_013_000 as u64)
			// Standard Error: 5_646
			.saturating_add(Weight::from_ref_time(1_951_947 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Floor(r: u32, ) -> Weight {
		Weight::from_ref_time(83_380_000 as u64)
			// Standard Error: 7_305
			.saturating_add(Weight::from_ref_time(1_996_513 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Trunc(r: u32, ) -> Weight {
		Weight::from_ref_time(83_372_000 as u64)
			// Standard Error: 6_964
			.saturating_add(Weight::from_ref_time(1_980_671 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Nearest(r: u32, ) -> Weight {
		Weight::from_ref_time(83_958_000 as u64)
			// Standard Error: 7_178
			.saturating_add(Weight::from_ref_time(2_276_038 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sqrt(r: u32, ) -> Weight {
		Weight::from_ref_time(85_329_000 as u64)
			// Standard Error: 6_427
			.saturating_add(Weight::from_ref_time(2_007_555 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Add(r: u32, ) -> Weight {
		Weight::from_ref_time(84_180_000 as u64)
			// Standard Error: 7_790
			.saturating_add(Weight::from_ref_time(2_731_360 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sub(r: u32, ) -> Weight {
		Weight::from_ref_time(83_068_000 as u64)
			// Standard Error: 7_348
			.saturating_add(Weight::from_ref_time(2_772_184 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Mul(r: u32, ) -> Weight {
		Weight::from_ref_time(83_152_000 as u64)
			// Standard Error: 6_860
			.saturating_add(Weight::from_ref_time(2_723_027 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Div(r: u32, ) -> Weight {
		Weight::from_ref_time(85_449_000 as u64)
			// Standard Error: 7_343
			.saturating_add(Weight::from_ref_time(2_689_417 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Min(r: u32, ) -> Weight {
		Weight::from_ref_time(83_042_000 as u64)
			// Standard Error: 6_711
			.saturating_add(Weight::from_ref_time(2_777_348 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Max(r: u32, ) -> Weight {
		Weight::from_ref_time(83_319_000 as u64)
			// Standard Error: 8_808
			.saturating_add(Weight::from_ref_time(2_781_168 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Copysign(r: u32, ) -> Weight {
		Weight::from_ref_time(83_851_000 as u64)
			// Standard Error: 6_933
			.saturating_add(Weight::from_ref_time(2_716_202 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Select(r: u32, ) -> Weight {
		Weight::from_ref_time(85_521_000 as u64)
			// Standard Error: 6_602
			.saturating_add(Weight::from_ref_time(3_249_963 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_If(r: u32, ) -> Weight {
		Weight::from_ref_time(86_278_000 as u64)
			// Standard Error: 7_797
			.saturating_add(Weight::from_ref_time(1_211_288 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Else(r: u32, ) -> Weight {
		Weight::from_ref_time(84_448_000 as u64)
			// Standard Error: 6_372
			.saturating_add(Weight::from_ref_time(1_845_802 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetLocal(r: u32, ) -> Weight {
		Weight::from_ref_time(85_814_000 as u64)
			// Standard Error: 6_488
			.saturating_add(Weight::from_ref_time(1_432_542 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetLocal(r: u32, ) -> Weight {
		Weight::from_ref_time(83_870_000 as u64)
			// Standard Error: 7_282
			.saturating_add(Weight::from_ref_time(1_330_814 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_TeeLocal(r: u32, ) -> Weight {
		Weight::from_ref_time(83_242_000 as u64)
			// Standard Error: 8_983
			.saturating_add(Weight::from_ref_time(166_325 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetGlobal(r: u32, ) -> Weight {
		Weight::from_ref_time(83_163_000 as u64)
			// Standard Error: 8_657
			.saturating_add(Weight::from_ref_time(146_329 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetGlobal(r: u32, ) -> Weight {
		Weight::from_ref_time(83_167_000 as u64)
			// Standard Error: 9_850
			.saturating_add(Weight::from_ref_time(175_302 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CurrentMemory(r: u32, ) -> Weight {
		Weight::from_ref_time(84_507_000 as u64)
			// Standard Error: 6_661
			.saturating_add(Weight::from_ref_time(1_410_777 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 3]`.
	fn instruction_GrowMemory(r: u32, ) -> Weight {
		Weight::from_ref_time(84_683_000 as u64)
			// Standard Error: 34_508_787
			.saturating_add(Weight::from_ref_time(2_657_364_775 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Br(r: u32, ) -> Weight {
		Weight::from_ref_time(85_646_000 as u64)
			// Standard Error: 7_779
			.saturating_add(Weight::from_ref_time(644_997 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrIf(r: u32, ) -> Weight {
		Weight::from_ref_time(83_239_000 as u64)
			// Standard Error: 7_149
			.saturating_add(Weight::from_ref_time(1_341_874 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrTable(r: u32, ) -> Weight {
		Weight::from_ref_time(85_287_000 as u64)
			// Standard Error: 6_816
			.saturating_add(Weight::from_ref_time(1_607_393 as u64).saturating_mul(r as u64))
	}
	/// The range of component `s` is `[1, 50]`.
	fn instruction_BrTable_per_elem(s: u32, ) -> Weight {
		Weight::from_ref_time(85_259_000 as u64)
			// Standard Error: 6_723
			.saturating_add(Weight::from_ref_time(137_852 as u64).saturating_mul(s as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Call(r: u32, ) -> Weight {
		Weight::from_ref_time(84_120_000 as u64)
			// Standard Error: 12_051
			.saturating_add(Weight::from_ref_time(17_079_715 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CallIndirect(r: u32, ) -> Weight {
		Weight::from_ref_time(85_153_000 as u64)
			// Standard Error: 12_815
			.saturating_add(Weight::from_ref_time(20_576_288 as u64).saturating_mul(r as u64))
	}
}
