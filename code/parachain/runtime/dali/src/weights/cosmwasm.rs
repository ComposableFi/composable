
//! Autogenerated weights for `cosmwasm`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-08, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `05551ac21fb8`, CPU: `Intel(R) Xeon(R) CPU @ 3.10GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dali-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/9gdd70pyc12n9i1v6gx99rhz8q2n67z0-composable/bin/composable
// benchmark
// pallet
// --chain=dali-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=*
// --extrinsic=*
// --steps=50
// --repeat=10
// --output=code/parachain/runtime/dali/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `cosmwasm`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> cosmwasm::WeightInfo for WeightInfo<T> {
	// Storage: Cosmwasm CodeHashToId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CurrentCodeId (r:1 w:1)
	// Storage: Cosmwasm PristineCode (r:0 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:0 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:0 w:1)
	/// The range of component `n` is `[1, 514288]`.
	fn upload(n: u32, ) -> Weight {
		// Minimum execution time: 546_047 nanoseconds.
		Weight::from_ref_time(484_836_525 as u64)
			// Standard Error: 115
			.saturating_add(Weight::from_ref_time(116_413 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn instantiate(n: u32, ) -> Weight {
		// Minimum execution time: 374_936 nanoseconds.
		Weight::from_ref_time(402_485_097 as u64)
			// Standard Error: 83_390
			.saturating_add(Weight::from_ref_time(35_189_173 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn execute(n: u32, ) -> Weight {
		// Minimum execution time: 343_972 nanoseconds.
		Weight::from_ref_time(372_341_749 as u64)
			// Standard Error: 87_908
			.saturating_add(Weight::from_ref_time(35_033_622 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:2 w:2)
	// Storage: Cosmwasm InstrumentedCode (r:2 w:1)
	// Storage: Cosmwasm PristineCode (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CodeHashToId (r:0 w:1)
	fn migrate() -> Weight {
		// Minimum execution time: 654_002 nanoseconds.
		Weight::from_ref_time(657_375_000 as u64)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	fn update_admin() -> Weight {
		// Minimum execution time: 320_562 nanoseconds.
		Weight::from_ref_time(331_114_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read() -> Weight {
		// Minimum execution time: 20_455 nanoseconds.
		Weight::from_ref_time(21_122_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read_other_contract() -> Weight {
		// Minimum execution time: 20_984 nanoseconds.
		Weight::from_ref_time(21_793_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:1)
	fn db_write() -> Weight {
		// Minimum execution time: 21_556 nanoseconds.
		Weight::from_ref_time(22_257_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn db_scan() -> Weight {
		// Minimum execution time: 5_384 nanoseconds.
		Weight::from_ref_time(5_589_000 as u64)
	}
	// Storage: unknown [0x] (r:1 w:0)
	fn db_next() -> Weight {
		// Minimum execution time: 42_152 nanoseconds.
		Weight::from_ref_time(45_497_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:0 w:1)
	fn db_remove() -> Weight {
		// Minimum execution time: 9_833 nanoseconds.
		Weight::from_ref_time(10_138_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Tokens Accounts (r:1 w:0)
	fn balance() -> Weight {
		// Minimum execution time: 7_268 nanoseconds.
		Weight::from_ref_time(7_562_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn transfer(n: u32, ) -> Weight {
		// Minimum execution time: 406 nanoseconds.
		Weight::from_ref_time(26_173_588 as u64)
			// Standard Error: 75_487
			.saturating_add(Weight::from_ref_time(32_160_114 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	fn set_contract_meta() -> Weight {
		// Minimum execution time: 18_060 nanoseconds.
		Weight::from_ref_time(18_362_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn running_contract_meta() -> Weight {
		// Minimum execution time: 5_063 nanoseconds.
		Weight::from_ref_time(5_304_000 as u64)
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn contract_meta() -> Weight {
		// Minimum execution time: 13_955 nanoseconds.
		Weight::from_ref_time(14_584_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	fn addr_validate() -> Weight {
		// Minimum execution time: 3_514 nanoseconds.
		Weight::from_ref_time(3_620_000 as u64)
	}
	fn addr_canonicalize() -> Weight {
		// Minimum execution time: 3_492 nanoseconds.
		Weight::from_ref_time(3_605_000 as u64)
	}
	fn addr_humanize() -> Weight {
		// Minimum execution time: 311 nanoseconds.
		Weight::from_ref_time(336_000 as u64)
	}
	fn secp256k1_recover_pubkey() -> Weight {
		// Minimum execution time: 39_686 nanoseconds.
		Weight::from_ref_time(40_020_000 as u64)
	}
	fn secp256k1_verify() -> Weight {
		// Minimum execution time: 39_763 nanoseconds.
		Weight::from_ref_time(40_485_000 as u64)
	}
	fn ed25519_verify() -> Weight {
		// Minimum execution time: 57_089 nanoseconds.
		Weight::from_ref_time(57_902_000 as u64)
	}
	fn ed25519_batch_verify() -> Weight {
		// Minimum execution time: 134_136 nanoseconds.
		Weight::from_ref_time(143_468_000 as u64)
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn continue_instantiate(n: u32, ) -> Weight {
		// Minimum execution time: 314_823 nanoseconds.
		Weight::from_ref_time(348_272_653 as u64)
			// Standard Error: 92_526
			.saturating_add(Weight::from_ref_time(32_990_502 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	/// The range of component `n` is `[0, 23]`.
	fn continue_execute(n: u32, ) -> Weight {
		// Minimum execution time: 277_020 nanoseconds.
		Weight::from_ref_time(284_252_549 as u64)
			// Standard Error: 33_228
			.saturating_add(Weight::from_ref_time(1_625_803 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_migrate() -> Weight {
		// Minimum execution time: 278_782 nanoseconds.
		Weight::from_ref_time(286_992_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_query() -> Weight {
		// Minimum execution time: 264_635 nanoseconds.
		Weight::from_ref_time(269_795_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_reply() -> Weight {
		// Minimum execution time: 277_124 nanoseconds.
		Weight::from_ref_time(280_874_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_contract_info() -> Weight {
		// Minimum execution time: 27_956 nanoseconds.
		Weight::from_ref_time(28_533_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_code_info() -> Weight {
		// Minimum execution time: 19_298 nanoseconds.
		Weight::from_ref_time(19_914_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:0)
	fn query_raw() -> Weight {
		// Minimum execution time: 32_409 nanoseconds.
		Weight::from_ref_time(33_118_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Const(r: u32, ) -> Weight {
		// Minimum execution time: 3_820 nanoseconds.
		Weight::from_ref_time(4_274_259 as u64)
			// Standard Error: 3_060
			.saturating_add(Weight::from_ref_time(998_725 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Const(r: u32, ) -> Weight {
		// Minimum execution time: 3_895 nanoseconds.
		Weight::from_ref_time(4_168_275 as u64)
			// Standard Error: 2_315
			.saturating_add(Weight::from_ref_time(1_002_441 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Load(r: u32, ) -> Weight {
		// Minimum execution time: 3_871 nanoseconds.
		Weight::from_ref_time(4_271_767 as u64)
			// Standard Error: 4_483
			.saturating_add(Weight::from_ref_time(1_920_334 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Load(r: u32, ) -> Weight {
		// Minimum execution time: 3_866 nanoseconds.
		Weight::from_ref_time(4_411_688 as u64)
			// Standard Error: 5_331
			.saturating_add(Weight::from_ref_time(1_969_682 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Store(r: u32, ) -> Weight {
		// Minimum execution time: 3_932 nanoseconds.
		Weight::from_ref_time(4_368_904 as u64)
			// Standard Error: 6_530
			.saturating_add(Weight::from_ref_time(3_113_736 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Store(r: u32, ) -> Weight {
		// Minimum execution time: 3_981 nanoseconds.
		Weight::from_ref_time(4_102_031 as u64)
			// Standard Error: 4_701
			.saturating_add(Weight::from_ref_time(3_124_929 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eq(r: u32, ) -> Weight {
		// Minimum execution time: 3_955 nanoseconds.
		Weight::from_ref_time(4_495_997 as u64)
			// Standard Error: 4_168
			.saturating_add(Weight::from_ref_time(2_366_476 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eqz(r: u32, ) -> Weight {
		// Minimum execution time: 3_940 nanoseconds.
		Weight::from_ref_time(4_488_136 as u64)
			// Standard Error: 3_261
			.saturating_add(Weight::from_ref_time(1_758_912 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ne(r: u32, ) -> Weight {
		// Minimum execution time: 4_034 nanoseconds.
		Weight::from_ref_time(4_697_849 as u64)
			// Standard Error: 4_576
			.saturating_add(Weight::from_ref_time(2_362_472 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LtS(r: u32, ) -> Weight {
		// Minimum execution time: 4_046 nanoseconds.
		Weight::from_ref_time(4_837_285 as u64)
			// Standard Error: 3_347
			.saturating_add(Weight::from_ref_time(2_347_179 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GtS(r: u32, ) -> Weight {
		// Minimum execution time: 3_954 nanoseconds.
		Weight::from_ref_time(4_520_773 as u64)
			// Standard Error: 5_111
			.saturating_add(Weight::from_ref_time(2_368_533 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LeS(r: u32, ) -> Weight {
		// Minimum execution time: 3_973 nanoseconds.
		Weight::from_ref_time(4_493_349 as u64)
			// Standard Error: 4_301
			.saturating_add(Weight::from_ref_time(2_368_444 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GeS(r: u32, ) -> Weight {
		// Minimum execution time: 3_955 nanoseconds.
		Weight::from_ref_time(4_648_817 as u64)
			// Standard Error: 5_270
			.saturating_add(Weight::from_ref_time(2_373_877 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Clz(r: u32, ) -> Weight {
		// Minimum execution time: 4_033 nanoseconds.
		Weight::from_ref_time(4_542_691 as u64)
			// Standard Error: 2_816
			.saturating_add(Weight::from_ref_time(1_746_879 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ctz(r: u32, ) -> Weight {
		// Minimum execution time: 4_040 nanoseconds.
		Weight::from_ref_time(4_538_539 as u64)
			// Standard Error: 2_833
			.saturating_add(Weight::from_ref_time(1_751_490 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Popcnt(r: u32, ) -> Weight {
		// Minimum execution time: 3_971 nanoseconds.
		Weight::from_ref_time(4_287_438 as u64)
			// Standard Error: 7_451
			.saturating_add(Weight::from_ref_time(1_770_811 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Add(r: u32, ) -> Weight {
		// Minimum execution time: 4_078 nanoseconds.
		Weight::from_ref_time(5_014_577 as u64)
			// Standard Error: 5_334
			.saturating_add(Weight::from_ref_time(2_383_945 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Sub(r: u32, ) -> Weight {
		// Minimum execution time: 4_080 nanoseconds.
		Weight::from_ref_time(4_734_556 as u64)
			// Standard Error: 5_642
			.saturating_add(Weight::from_ref_time(2_396_713 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Mul(r: u32, ) -> Weight {
		// Minimum execution time: 3_921 nanoseconds.
		Weight::from_ref_time(4_637_762 as u64)
			// Standard Error: 4_911
			.saturating_add(Weight::from_ref_time(2_396_156 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivS(r: u32, ) -> Weight {
		// Minimum execution time: 4_067 nanoseconds.
		Weight::from_ref_time(4_603_395 as u64)
			// Standard Error: 5_097
			.saturating_add(Weight::from_ref_time(3_082_982 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivU(r: u32, ) -> Weight {
		// Minimum execution time: 4_075 nanoseconds.
		Weight::from_ref_time(4_624_663 as u64)
			// Standard Error: 6_094
			.saturating_add(Weight::from_ref_time(2_641_933 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64RemS(r: u32, ) -> Weight {
		// Minimum execution time: 3_972 nanoseconds.
		Weight::from_ref_time(4_503_976 as u64)
			// Standard Error: 6_211
			.saturating_add(Weight::from_ref_time(3_016_891 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64And(r: u32, ) -> Weight {
		// Minimum execution time: 4_004 nanoseconds.
		Weight::from_ref_time(4_910_293 as u64)
			// Standard Error: 4_382
			.saturating_add(Weight::from_ref_time(2_385_958 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Or(r: u32, ) -> Weight {
		// Minimum execution time: 3_935 nanoseconds.
		Weight::from_ref_time(4_691_698 as u64)
			// Standard Error: 4_526
			.saturating_add(Weight::from_ref_time(2_395_087 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Xor(r: u32, ) -> Weight {
		// Minimum execution time: 3_921 nanoseconds.
		Weight::from_ref_time(4_657_191 as u64)
			// Standard Error: 5_769
			.saturating_add(Weight::from_ref_time(2_401_717 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Shl(r: u32, ) -> Weight {
		// Minimum execution time: 3_950 nanoseconds.
		Weight::from_ref_time(4_740_048 as u64)
			// Standard Error: 4_622
			.saturating_add(Weight::from_ref_time(2_353_796 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ShrS(r: u32, ) -> Weight {
		// Minimum execution time: 3_894 nanoseconds.
		Weight::from_ref_time(4_468_036 as u64)
			// Standard Error: 5_132
			.saturating_add(Weight::from_ref_time(2_372_292 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotl(r: u32, ) -> Weight {
		// Minimum execution time: 3_866 nanoseconds.
		Weight::from_ref_time(4_860_442 as u64)
			// Standard Error: 4_379
			.saturating_add(Weight::from_ref_time(2_349_163 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotr(r: u32, ) -> Weight {
		// Minimum execution time: 3_999 nanoseconds.
		Weight::from_ref_time(4_728_731 as u64)
			// Standard Error: 3_468
			.saturating_add(Weight::from_ref_time(2_351_889 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight {
		// Minimum execution time: 3_957 nanoseconds.
		Weight::from_ref_time(4_765_017 as u64)
			// Standard Error: 3_034
			.saturating_add(Weight::from_ref_time(1_741_369 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I32WrapI64(r: u32, ) -> Weight {
		// Minimum execution time: 3_874 nanoseconds.
		Weight::from_ref_time(4_528_602 as u64)
			// Standard Error: 2_708
			.saturating_add(Weight::from_ref_time(1_737_130 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Eq(r: u32, ) -> Weight {
		// Minimum execution time: 3_930 nanoseconds.
		Weight::from_ref_time(4_890_786 as u64)
			// Standard Error: 4_763
			.saturating_add(Weight::from_ref_time(2_378_797 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ne(r: u32, ) -> Weight {
		// Minimum execution time: 3_963 nanoseconds.
		Weight::from_ref_time(4_730_112 as u64)
			// Standard Error: 4_805
			.saturating_add(Weight::from_ref_time(2_378_276 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Lt(r: u32, ) -> Weight {
		// Minimum execution time: 4_007 nanoseconds.
		Weight::from_ref_time(4_798_491 as u64)
			// Standard Error: 5_784
			.saturating_add(Weight::from_ref_time(2_355_897 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Gt(r: u32, ) -> Weight {
		// Minimum execution time: 4_042 nanoseconds.
		Weight::from_ref_time(4_830_533 as u64)
			// Standard Error: 3_734
			.saturating_add(Weight::from_ref_time(2_345_010 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Le(r: u32, ) -> Weight {
		// Minimum execution time: 3_998 nanoseconds.
		Weight::from_ref_time(4_678_231 as u64)
			// Standard Error: 4_811
			.saturating_add(Weight::from_ref_time(2_408_342 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ge(r: u32, ) -> Weight {
		// Minimum execution time: 4_085 nanoseconds.
		Weight::from_ref_time(4_918_116 as u64)
			// Standard Error: 7_955
			.saturating_add(Weight::from_ref_time(2_406_976 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Abs(r: u32, ) -> Weight {
		// Minimum execution time: 3_998 nanoseconds.
		Weight::from_ref_time(4_604_192 as u64)
			// Standard Error: 3_761
			.saturating_add(Weight::from_ref_time(1_751_419 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Neg(r: u32, ) -> Weight {
		// Minimum execution time: 4_109 nanoseconds.
		Weight::from_ref_time(4_688_508 as u64)
			// Standard Error: 3_489
			.saturating_add(Weight::from_ref_time(1_733_599 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ceil(r: u32, ) -> Weight {
		// Minimum execution time: 3_890 nanoseconds.
		Weight::from_ref_time(4_618_967 as u64)
			// Standard Error: 3_026
			.saturating_add(Weight::from_ref_time(1_723_946 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Floor(r: u32, ) -> Weight {
		// Minimum execution time: 3_973 nanoseconds.
		Weight::from_ref_time(4_681_185 as u64)
			// Standard Error: 4_098
			.saturating_add(Weight::from_ref_time(1_729_253 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Trunc(r: u32, ) -> Weight {
		// Minimum execution time: 3_956 nanoseconds.
		Weight::from_ref_time(4_694_989 as u64)
			// Standard Error: 3_617
			.saturating_add(Weight::from_ref_time(1_716_650 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Nearest(r: u32, ) -> Weight {
		// Minimum execution time: 3_970 nanoseconds.
		Weight::from_ref_time(4_551_454 as u64)
			// Standard Error: 4_420
			.saturating_add(Weight::from_ref_time(1_869_823 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sqrt(r: u32, ) -> Weight {
		// Minimum execution time: 3_921 nanoseconds.
		Weight::from_ref_time(4_652_256 as u64)
			// Standard Error: 3_353
			.saturating_add(Weight::from_ref_time(1_794_554 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Add(r: u32, ) -> Weight {
		// Minimum execution time: 3_982 nanoseconds.
		Weight::from_ref_time(4_651_618 as u64)
			// Standard Error: 4_365
			.saturating_add(Weight::from_ref_time(2_357_042 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sub(r: u32, ) -> Weight {
		// Minimum execution time: 3_938 nanoseconds.
		Weight::from_ref_time(4_738_385 as u64)
			// Standard Error: 2_106
			.saturating_add(Weight::from_ref_time(2_347_138 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Mul(r: u32, ) -> Weight {
		// Minimum execution time: 3_969 nanoseconds.
		Weight::from_ref_time(4_766_553 as u64)
			// Standard Error: 3_657
			.saturating_add(Weight::from_ref_time(2_353_309 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Div(r: u32, ) -> Weight {
		// Minimum execution time: 4_089 nanoseconds.
		Weight::from_ref_time(4_752_362 as u64)
			// Standard Error: 4_264
			.saturating_add(Weight::from_ref_time(2_359_739 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Min(r: u32, ) -> Weight {
		// Minimum execution time: 4_068 nanoseconds.
		Weight::from_ref_time(5_007_875 as u64)
			// Standard Error: 4_132
			.saturating_add(Weight::from_ref_time(2_400_972 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Max(r: u32, ) -> Weight {
		// Minimum execution time: 4_045 nanoseconds.
		Weight::from_ref_time(4_670_066 as u64)
			// Standard Error: 4_731
			.saturating_add(Weight::from_ref_time(2_426_282 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Copysign(r: u32, ) -> Weight {
		// Minimum execution time: 3_978 nanoseconds.
		Weight::from_ref_time(4_846_535 as u64)
			// Standard Error: 4_930
			.saturating_add(Weight::from_ref_time(2_346_775 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Select(r: u32, ) -> Weight {
		// Minimum execution time: 3_763 nanoseconds.
		Weight::from_ref_time(4_390_831 as u64)
			// Standard Error: 7_366
			.saturating_add(Weight::from_ref_time(3_104_683 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_If(r: u32, ) -> Weight {
		// Minimum execution time: 3_866 nanoseconds.
		Weight::from_ref_time(4_192_695 as u64)
			// Standard Error: 3_267
			.saturating_add(Weight::from_ref_time(1_400_315 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Else(r: u32, ) -> Weight {
		// Minimum execution time: 3_887 nanoseconds.
		Weight::from_ref_time(4_487_708 as u64)
			// Standard Error: 3_461
			.saturating_add(Weight::from_ref_time(2_124_121 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetLocal(r: u32, ) -> Weight {
		// Minimum execution time: 3_986 nanoseconds.
		Weight::from_ref_time(4_352_358 as u64)
			// Standard Error: 3_148
			.saturating_add(Weight::from_ref_time(1_060_896 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetLocal(r: u32, ) -> Weight {
		// Minimum execution time: 3_796 nanoseconds.
		Weight::from_ref_time(4_337_250 as u64)
			// Standard Error: 1_145
			.saturating_add(Weight::from_ref_time(1_299_504 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_TeeLocal(_r: u32, ) -> Weight {
		// Minimum execution time: 3_920 nanoseconds.
		Weight::from_ref_time(4_232_730 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetGlobal(r: u32, ) -> Weight {
		// Minimum execution time: 3_990 nanoseconds.
		Weight::from_ref_time(4_255_458 as u64)
			// Standard Error: 613
			.saturating_add(Weight::from_ref_time(2_271 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetGlobal(r: u32, ) -> Weight {
		// Minimum execution time: 3_962 nanoseconds.
		Weight::from_ref_time(4_305_185 as u64)
			// Standard Error: 1_253
			.saturating_add(Weight::from_ref_time(42 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CurrentMemory(r: u32, ) -> Weight {
		// Minimum execution time: 3_887 nanoseconds.
		Weight::from_ref_time(4_376_715 as u64)
			// Standard Error: 3_071
			.saturating_add(Weight::from_ref_time(1_373_491 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 3]`.
	fn instruction_GrowMemory(r: u32, ) -> Weight {
		// Minimum execution time: 3_737 nanoseconds.
		Weight::from_ref_time(3_905_000 as u64)
			// Standard Error: 19_169_155
			.saturating_add(Weight::from_ref_time(2_563_765_200 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Br(r: u32, ) -> Weight {
		// Minimum execution time: 3_839 nanoseconds.
		Weight::from_ref_time(4_176_354 as u64)
			// Standard Error: 1_734
			.saturating_add(Weight::from_ref_time(723_848 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrIf(r: u32, ) -> Weight {
		// Minimum execution time: 3_825 nanoseconds.
		Weight::from_ref_time(4_225_350 as u64)
			// Standard Error: 2_084
			.saturating_add(Weight::from_ref_time(1_372_033 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrTable(r: u32, ) -> Weight {
		// Minimum execution time: 3_822 nanoseconds.
		Weight::from_ref_time(4_598_927 as u64)
			// Standard Error: 3_592
			.saturating_add(Weight::from_ref_time(1_868_145 as u64).saturating_mul(r as u64))
	}
	/// The range of component `s` is `[1, 50]`.
	fn instruction_BrTable_per_elem(s: u32, ) -> Weight {
		// Minimum execution time: 6_089 nanoseconds.
		Weight::from_ref_time(6_310_207 as u64)
			// Standard Error: 680
			.saturating_add(Weight::from_ref_time(9_042 as u64).saturating_mul(s as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Call(r: u32, ) -> Weight {
		// Minimum execution time: 4_244 nanoseconds.
		Weight::from_ref_time(4_579_918 as u64)
			// Standard Error: 13_910
			.saturating_add(Weight::from_ref_time(9_576_010 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CallIndirect(r: u32, ) -> Weight {
		// Minimum execution time: 4_279 nanoseconds.
		Weight::from_ref_time(4_891_589 as u64)
			// Standard Error: 9_814
			.saturating_add(Weight::from_ref_time(11_216_801 as u64).saturating_mul(r as u64))
	}
}
