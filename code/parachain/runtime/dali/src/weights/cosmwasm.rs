
//! Autogenerated weights for `cosmwasm`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-25, STEPS: `2`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `dev`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dali-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/gpsh9wvfcrwyck2nw62gpkqhf0bhc0cw-composable/bin/composable
// benchmark
// pallet
// --chain=dali-dev
// --execution=wasm
// --wasm-execution=compiled
// --wasm-instantiation-strategy=legacy-instance-reuse
// --pallet=*
// --extrinsic=*
// --steps=2
// --repeat=2
// --output=code/parachain/runtime/dali/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `cosmwasm`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> cosmwasm::WeightInfo for WeightInfo<T> {
	// Storage: Cosmwasm CodeHashToId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CurrentCodeId (r:1 w:1)
	// Storage: Cosmwasm PristineCode (r:0 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:0 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:0 w:1)
	/// The range of component `n` is `[1, 514288]`.
	fn upload(n: u32, ) -> Weight {
		// Minimum execution time: 533_629 nanoseconds.
		Weight::from_ref_time(579_702_565 as u64)
			// Standard Error: 3_855
			.saturating_add(Weight::from_ref_time(113_434 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:44 w:44)
	/// The range of component `n` is `[0, 23]`.
	fn instantiate(n: u32, ) -> Weight {
		// Minimum execution time: 1_198_799 nanoseconds.
		Weight::from_ref_time(1_417_550_500 as u64)
			// Standard Error: 42_270_747
			.saturating_add(Weight::from_ref_time(52_817_369 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:44 w:44)
	/// The range of component `n` is `[0, 23]`.
	fn execute(n: u32, ) -> Weight {
		// Minimum execution time: 844_130 nanoseconds.
		Weight::from_ref_time(1_306_091_000 as u64)
			// Standard Error: 51_033_804
			.saturating_add(Weight::from_ref_time(55_848_195 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:2 w:2)
	// Storage: Cosmwasm InstrumentedCode (r:2 w:1)
	// Storage: Cosmwasm PristineCode (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CodeHashToId (r:0 w:1)
	fn migrate() -> Weight {
		// Minimum execution time: 1_136_424 nanoseconds.
		Weight::from_ref_time(1_171_757_000 as u64)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	fn update_admin() -> Weight {
		// Minimum execution time: 420_503 nanoseconds.
		Weight::from_ref_time(429_544_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read() -> Weight {
		// Minimum execution time: 21_167 nanoseconds.
		Weight::from_ref_time(42_834_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read_other_contract() -> Weight {
		// Minimum execution time: 18_791 nanoseconds.
		Weight::from_ref_time(23_208_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:1)
	fn db_write() -> Weight {
		// Minimum execution time: 14_417 nanoseconds.
		Weight::from_ref_time(22_875_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn db_scan() -> Weight {
		// Minimum execution time: 7_125 nanoseconds.
		Weight::from_ref_time(9_167_000 as u64)
	}
	// Storage: unknown [0x] (r:1 w:0)
	fn db_next() -> Weight {
		// Minimum execution time: 47_583 nanoseconds.
		Weight::from_ref_time(82_084_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:0 w:1)
	fn db_remove() -> Weight {
		// Minimum execution time: 9_458 nanoseconds.
		Weight::from_ref_time(10_458_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Tokens Accounts (r:1 w:0)
	fn balance() -> Weight {
		// Minimum execution time: 4_833 nanoseconds.
		Weight::from_ref_time(5_125_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:44 w:44)
	/// The range of component `n` is `[0, 23]`.
	fn transfer(n: u32, ) -> Weight {
		// Minimum execution time: 292 nanoseconds.
		Weight::from_ref_time(688_000 as u64)
			// Standard Error: 20_883_289
			.saturating_add(Weight::from_ref_time(45_339_021 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	fn set_contract_meta() -> Weight {
		// Minimum execution time: 12_209 nanoseconds.
		Weight::from_ref_time(27_833_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn running_contract_meta() -> Weight {
		// Minimum execution time: 6_750 nanoseconds.
		Weight::from_ref_time(6_958_000 as u64)
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn contract_meta() -> Weight {
		// Minimum execution time: 10_583 nanoseconds.
		Weight::from_ref_time(10_916_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	fn addr_validate() -> Weight {
		// Minimum execution time: 1_000 nanoseconds.
		Weight::from_ref_time(1_542_000 as u64)
	}
	fn addr_canonicalize() -> Weight {
		// Minimum execution time: 1_126 nanoseconds.
		Weight::from_ref_time(1_417_000 as u64)
	}
	fn addr_humanize() -> Weight {
		// Minimum execution time: 250 nanoseconds.
		Weight::from_ref_time(375_000 as u64)
	}
	fn secp256k1_recover_pubkey() -> Weight {
		// Minimum execution time: 35_709 nanoseconds.
		Weight::from_ref_time(37_625_000 as u64)
	}
	fn secp256k1_verify() -> Weight {
		// Minimum execution time: 104_792 nanoseconds.
		Weight::from_ref_time(146_835_000 as u64)
	}
	fn ed25519_verify() -> Weight {
		// Minimum execution time: 44_250 nanoseconds.
		Weight::from_ref_time(45_626_000 as u64)
	}
	fn ed25519_batch_verify() -> Weight {
		// Minimum execution time: 116_876 nanoseconds.
		Weight::from_ref_time(181_918_000 as u64)
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:44 w:44)
	/// The range of component `n` is `[0, 23]`.
	fn continue_instantiate(n: u32, ) -> Weight {
		// Minimum execution time: 831_297 nanoseconds.
		Weight::from_ref_time(837_859_500 as u64)
			// Standard Error: 4_825_464
			.saturating_add(Weight::from_ref_time(39_068_173 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	/// The range of component `n` is `[0, 23]`.
	fn continue_execute(_n: u32, ) -> Weight {
		// Minimum execution time: 849_131 nanoseconds.
		Weight::from_ref_time(1_518_343_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_migrate() -> Weight {
		// Minimum execution time: 875_172 nanoseconds.
		Weight::from_ref_time(1_018_673_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_query() -> Weight {
		// Minimum execution time: 839_630 nanoseconds.
		Weight::from_ref_time(1_251_424_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_reply() -> Weight {
		// Minimum execution time: 1_113_507 nanoseconds.
		Weight::from_ref_time(1_602_468_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_info() -> Weight {
		// Minimum execution time: 18_459 nanoseconds.
		Weight::from_ref_time(19_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:0)
	fn query_raw() -> Weight {
		// Minimum execution time: 29_667 nanoseconds.
		Weight::from_ref_time(162_126_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Const(r: u32, ) -> Weight {
		// Minimum execution time: 186_085 nanoseconds.
		Weight::from_ref_time(302_606_000 as u64)
			// Standard Error: 11_795_088
			.saturating_add(Weight::from_ref_time(14_113_000 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Const(_r: u32, ) -> Weight {
		// Minimum execution time: 93_834 nanoseconds.
		Weight::from_ref_time(6_009_641_500 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Load(r: u32, ) -> Weight {
		// Minimum execution time: 91_626 nanoseconds.
		Weight::from_ref_time(163_334_500 as u64)
			// Standard Error: 2_160_505
			.saturating_add(Weight::from_ref_time(8_060_890 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Load(r: u32, ) -> Weight {
		// Minimum execution time: 90_667 nanoseconds.
		Weight::from_ref_time(163_834_000 as u64)
			// Standard Error: 3_912_325
			.saturating_add(Weight::from_ref_time(10_153_410 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Store(r: u32, ) -> Weight {
		// Minimum execution time: 96_959 nanoseconds.
		Weight::from_ref_time(207_189_000 as u64)
			// Standard Error: 3_247_857
			.saturating_add(Weight::from_ref_time(6_887_960 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Store(r: u32, ) -> Weight {
		// Minimum execution time: 91_459 nanoseconds.
		Weight::from_ref_time(231_210_000 as u64)
			// Standard Error: 3_884_708
			.saturating_add(Weight::from_ref_time(6_809_630 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eq(r: u32, ) -> Weight {
		// Minimum execution time: 92_084 nanoseconds.
		Weight::from_ref_time(175_001_000 as u64)
			// Standard Error: 2_300_610
			.saturating_add(Weight::from_ref_time(8_405_470 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eqz(r: u32, ) -> Weight {
		// Minimum execution time: 92_626 nanoseconds.
		Weight::from_ref_time(178_043_000 as u64)
			// Standard Error: 2_735_338
			.saturating_add(Weight::from_ref_time(7_172_130 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ne(r: u32, ) -> Weight {
		// Minimum execution time: 91_792 nanoseconds.
		Weight::from_ref_time(473_336_000 as u64)
			// Standard Error: 8_474_786
			.saturating_add(Weight::from_ref_time(712_510 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LtS(r: u32, ) -> Weight {
		// Minimum execution time: 266_419 nanoseconds.
		Weight::from_ref_time(276_314_500 as u64)
			// Standard Error: 53_832_773
			.saturating_add(Weight::from_ref_time(58_367_860 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GtS(r: u32, ) -> Weight {
		// Minimum execution time: 94_709 nanoseconds.
		Weight::from_ref_time(158_063_500 as u64)
			// Standard Error: 1_492_312
			.saturating_add(Weight::from_ref_time(12_374_670 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LeS(r: u32, ) -> Weight {
		// Minimum execution time: 91_042 nanoseconds.
		Weight::from_ref_time(165_959_000 as u64)
			// Standard Error: 50_088_565
			.saturating_add(Weight::from_ref_time(57_352_870 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GeS(r: u32, ) -> Weight {
		// Minimum execution time: 92_376 nanoseconds.
		Weight::from_ref_time(162_626_000 as u64)
			// Standard Error: 4_599_857
			.saturating_add(Weight::from_ref_time(11_561_730 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Clz(r: u32, ) -> Weight {
		// Minimum execution time: 96_417 nanoseconds.
		Weight::from_ref_time(157_250_500 as u64)
			// Standard Error: 2_610_847
			.saturating_add(Weight::from_ref_time(7_767_560 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ctz(r: u32, ) -> Weight {
		// Minimum execution time: 94_918 nanoseconds.
		Weight::from_ref_time(161_772_000 as u64)
			// Standard Error: 2_169_379
			.saturating_add(Weight::from_ref_time(7_042_120 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Popcnt(r: u32, ) -> Weight {
		// Minimum execution time: 92_001 nanoseconds.
		Weight::from_ref_time(157_022_000 as u64)
			// Standard Error: 1_948_645
			.saturating_add(Weight::from_ref_time(7_049_210 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Add(r: u32, ) -> Weight {
		// Minimum execution time: 92_667 nanoseconds.
		Weight::from_ref_time(175_438_500 as u64)
			// Standard Error: 2_474_476
			.saturating_add(Weight::from_ref_time(8_647_130 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Sub(r: u32, ) -> Weight {
		// Minimum execution time: 98_459 nanoseconds.
		Weight::from_ref_time(174_709_500 as u64)
			// Standard Error: 2_555_699
			.saturating_add(Weight::from_ref_time(6_966_710 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Mul(r: u32, ) -> Weight {
		// Minimum execution time: 91_625 nanoseconds.
		Weight::from_ref_time(176_772_000 as u64)
			// Standard Error: 2_092_431
			.saturating_add(Weight::from_ref_time(7_797_140 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivS(r: u32, ) -> Weight {
		// Minimum execution time: 91_958 nanoseconds.
		Weight::from_ref_time(149_709_000 as u64)
			// Standard Error: 1_648_824
			.saturating_add(Weight::from_ref_time(8_398_390 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivU(r: u32, ) -> Weight {
		// Minimum execution time: 91_584 nanoseconds.
		Weight::from_ref_time(147_584_000 as u64)
			// Standard Error: 1_194_122
			.saturating_add(Weight::from_ref_time(7_669_220 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64RemS(r: u32, ) -> Weight {
		// Minimum execution time: 93_042 nanoseconds.
		Weight::from_ref_time(549_899_000 as u64)
			// Standard Error: 9_199_966
			.saturating_add(Weight::from_ref_time(1_142_080 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64And(r: u32, ) -> Weight {
		// Minimum execution time: 96_417 nanoseconds.
		Weight::from_ref_time(152_147_000 as u64)
			// Standard Error: 2_296_553
			.saturating_add(Weight::from_ref_time(9_134_220 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Or(r: u32, ) -> Weight {
		// Minimum execution time: 93_834 nanoseconds.
		Weight::from_ref_time(157_042_500 as u64)
			// Standard Error: 3_590_359
			.saturating_add(Weight::from_ref_time(6_592_130 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Xor(r: u32, ) -> Weight {
		// Minimum execution time: 174_335 nanoseconds.
		Weight::from_ref_time(303_023_000 as u64)
			// Standard Error: 3_864_337
			.saturating_add(Weight::from_ref_time(3_237_930 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Shl(r: u32, ) -> Weight {
		// Minimum execution time: 90_542 nanoseconds.
		Weight::from_ref_time(159_980_000 as u64)
			// Standard Error: 2_927_103
			.saturating_add(Weight::from_ref_time(12_413_000 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ShrS(_r: u32, ) -> Weight {
		// Minimum execution time: 170_709 nanoseconds.
		Weight::from_ref_time(4_451_610_500 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotl(r: u32, ) -> Weight {
		// Minimum execution time: 92_042 nanoseconds.
		Weight::from_ref_time(161_750_500 as u64)
			// Standard Error: 2_048_177
			.saturating_add(Weight::from_ref_time(8_612_150 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotr(r: u32, ) -> Weight {
		// Minimum execution time: 94_750 nanoseconds.
		Weight::from_ref_time(168_375_500 as u64)
			// Standard Error: 2_434_893
			.saturating_add(Weight::from_ref_time(8_613_390 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight {
		// Minimum execution time: 91_501 nanoseconds.
		Weight::from_ref_time(165_063_500 as u64)
			// Standard Error: 1_584_369
			.saturating_add(Weight::from_ref_time(5_898_370 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I32WrapI64(r: u32, ) -> Weight {
		// Minimum execution time: 167_334 nanoseconds.
		Weight::from_ref_time(185_459_000 as u64)
			// Standard Error: 1_277_519
			.saturating_add(Weight::from_ref_time(6_382_550 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Eq(r: u32, ) -> Weight {
		// Minimum execution time: 96_168 nanoseconds.
		Weight::from_ref_time(153_397_000 as u64)
			// Standard Error: 1_696_103
			.saturating_add(Weight::from_ref_time(8_435_460 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ne(r: u32, ) -> Weight {
		// Minimum execution time: 90_917 nanoseconds.
		Weight::from_ref_time(166_105_000 as u64)
			// Standard Error: 7_009_501
			.saturating_add(Weight::from_ref_time(14_434_260 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Lt(r: u32, ) -> Weight {
		// Minimum execution time: 93_751 nanoseconds.
		Weight::from_ref_time(316_002_500 as u64)
			// Standard Error: 4_808_114
			.saturating_add(Weight::from_ref_time(5_572_110 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Gt(r: u32, ) -> Weight {
		// Minimum execution time: 90_958 nanoseconds.
		Weight::from_ref_time(179_917_500 as u64)
			// Standard Error: 2_495_312
			.saturating_add(Weight::from_ref_time(8_607_140 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Le(r: u32, ) -> Weight {
		// Minimum execution time: 92_709 nanoseconds.
		Weight::from_ref_time(179_209_500 as u64)
			// Standard Error: 2_719_236
			.saturating_add(Weight::from_ref_time(8_957_140 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ge(r: u32, ) -> Weight {
		// Minimum execution time: 244_627 nanoseconds.
		Weight::from_ref_time(364_336_000 as u64)
			// Standard Error: 2_688_238
			.saturating_add(Weight::from_ref_time(4_156_690 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Abs(r: u32, ) -> Weight {
		// Minimum execution time: 96_209 nanoseconds.
		Weight::from_ref_time(158_668_000 as u64)
			// Standard Error: 4_387_851
			.saturating_add(Weight::from_ref_time(9_910_480 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Neg(r: u32, ) -> Weight {
		// Minimum execution time: 92_084 nanoseconds.
		Weight::from_ref_time(373_481_500 as u64)
			// Standard Error: 5_730_012
			.saturating_add(Weight::from_ref_time(2_279_600 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ceil(r: u32, ) -> Weight {
		// Minimum execution time: 96_417 nanoseconds.
		Weight::from_ref_time(186_834_000 as u64)
			// Standard Error: 2_317_891
			.saturating_add(Weight::from_ref_time(6_435_890 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Floor(r: u32, ) -> Weight {
		// Minimum execution time: 93_792 nanoseconds.
		Weight::from_ref_time(161_584_000 as u64)
			// Standard Error: 1_799_879
			.saturating_add(Weight::from_ref_time(8_080_470 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Trunc(r: u32, ) -> Weight {
		// Minimum execution time: 91_167 nanoseconds.
		Weight::from_ref_time(171_605_000 as u64)
			// Standard Error: 2_490_241
			.saturating_add(Weight::from_ref_time(8_880_480 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Nearest(r: u32, ) -> Weight {
		// Minimum execution time: 94_208 nanoseconds.
		Weight::from_ref_time(192_938_500 as u64)
			// Standard Error: 2_593_392
			.saturating_add(Weight::from_ref_time(7_565_880 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sqrt(r: u32, ) -> Weight {
		// Minimum execution time: 102_959 nanoseconds.
		Weight::from_ref_time(165_042_500 as u64)
			// Standard Error: 1_937_957
			.saturating_add(Weight::from_ref_time(6_998_800 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Add(r: u32, ) -> Weight {
		// Minimum execution time: 90_417 nanoseconds.
		Weight::from_ref_time(152_251_000 as u64)
			// Standard Error: 2_652_228
			.saturating_add(Weight::from_ref_time(9_802_140 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sub(r: u32, ) -> Weight {
		// Minimum execution time: 99_292 nanoseconds.
		Weight::from_ref_time(351_960_000 as u64)
			// Standard Error: 5_413_851
			.saturating_add(Weight::from_ref_time(4_789_210 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Mul(r: u32, ) -> Weight {
		// Minimum execution time: 100_501 nanoseconds.
		Weight::from_ref_time(167_855_500 as u64)
			// Standard Error: 6_722_628
			.saturating_add(Weight::from_ref_time(13_475_910 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Div(r: u32, ) -> Weight {
		// Minimum execution time: 95_126 nanoseconds.
		Weight::from_ref_time(186_585_000 as u64)
			// Standard Error: 2_949_150
			.saturating_add(Weight::from_ref_time(8_727_550 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Min(_r: u32, ) -> Weight {
		// Minimum execution time: 92_083 nanoseconds.
		Weight::from_ref_time(6_187_996_500 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Max(r: u32, ) -> Weight {
		// Minimum execution time: 91_042 nanoseconds.
		Weight::from_ref_time(164_668_000 as u64)
			// Standard Error: 1_789_161
			.saturating_add(Weight::from_ref_time(8_106_300 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Copysign(r: u32, ) -> Weight {
		// Minimum execution time: 90_834 nanoseconds.
		Weight::from_ref_time(170_668_000 as u64)
			// Standard Error: 1_978_733
			.saturating_add(Weight::from_ref_time(9_046_300 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Select(r: u32, ) -> Weight {
		// Minimum execution time: 90_584 nanoseconds.
		Weight::from_ref_time(175_543_000 as u64)
			// Standard Error: 3_879_811
			.saturating_add(Weight::from_ref_time(11_753_820 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_If(r: u32, ) -> Weight {
		// Minimum execution time: 107_375 nanoseconds.
		Weight::from_ref_time(251_355_500 as u64)
			// Standard Error: 3_168_612
			.saturating_add(Weight::from_ref_time(3_152_530 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Else(r: u32, ) -> Weight {
		// Minimum execution time: 92_834 nanoseconds.
		Weight::from_ref_time(166_626_000 as u64)
			// Standard Error: 2_320_930
			.saturating_add(Weight::from_ref_time(6_462_120 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetLocal(r: u32, ) -> Weight {
		// Minimum execution time: 91_084 nanoseconds.
		Weight::from_ref_time(162_605_500 as u64)
			// Standard Error: 2_248_634
			.saturating_add(Weight::from_ref_time(5_987_110 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetLocal(r: u32, ) -> Weight {
		// Minimum execution time: 191_501 nanoseconds.
		Weight::from_ref_time(218_647_000 as u64)
			// Standard Error: 2_196_505
			.saturating_add(Weight::from_ref_time(4_306_270 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_TeeLocal(_r: u32, ) -> Weight {
		// Minimum execution time: 92_292 nanoseconds.
		Weight::from_ref_time(171_146_500 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetGlobal(_r: u32, ) -> Weight {
		// Minimum execution time: 96_626 nanoseconds.
		Weight::from_ref_time(306_877_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetGlobal(r: u32, ) -> Weight {
		// Minimum execution time: 90_834 nanoseconds.
		Weight::from_ref_time(196_063_500 as u64)
			// Standard Error: 11_530_436
			.saturating_add(Weight::from_ref_time(9_331_310 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CurrentMemory(r: u32, ) -> Weight {
		// Minimum execution time: 90_667 nanoseconds.
		Weight::from_ref_time(199_292_500 as u64)
			// Standard Error: 2_822_122
			.saturating_add(Weight::from_ref_time(6_109_640 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 3]`.
	fn instruction_GrowMemory(r: u32, ) -> Weight {
		// Minimum execution time: 98_167 nanoseconds.
		Weight::from_ref_time(190_001_000 as u64)
			// Standard Error: 2_286_885_884
			.saturating_add(Weight::from_ref_time(10_837_942_333 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Br(_r: u32, ) -> Weight {
		// Minimum execution time: 93_126 nanoseconds.
		Weight::from_ref_time(2_219_514_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrIf(r: u32, ) -> Weight {
		// Minimum execution time: 90_168 nanoseconds.
		Weight::from_ref_time(156_897_500 as u64)
			// Standard Error: 1_827_425
			.saturating_add(Weight::from_ref_time(3_885_430 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrTable(r: u32, ) -> Weight {
		// Minimum execution time: 90_667 nanoseconds.
		Weight::from_ref_time(164_522_000 as u64)
			// Standard Error: 4_003_716
			.saturating_add(Weight::from_ref_time(5_851_700 as u64).saturating_mul(r as u64))
	}
	/// The range of component `s` is `[1, 50]`.
	fn instruction_BrTable_per_elem(s: u32, ) -> Weight {
		// Minimum execution time: 103_917 nanoseconds.
		Weight::from_ref_time(171_937_459 as u64)
			// Standard Error: 4_767_992
			.saturating_add(Weight::from_ref_time(3_167_540 as u64).saturating_mul(s as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Call(r: u32, ) -> Weight {
		// Minimum execution time: 92_458 nanoseconds.
		Weight::from_ref_time(152_896_000 as u64)
			// Standard Error: 1_277_747
			.saturating_add(Weight::from_ref_time(18_138_050 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CallIndirect(r: u32, ) -> Weight {
		// Minimum execution time: 91_501 nanoseconds.
		Weight::from_ref_time(173_001_500 as u64)
			// Standard Error: 2_287_285
			.saturating_add(Weight::from_ref_time(19_302_190 as u64).saturating_mul(r as u64))
	}
}
