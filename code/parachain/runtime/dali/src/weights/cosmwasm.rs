
//! Autogenerated weights for `cosmwasm`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-08, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `78ebec2363af`, CPU: `Intel(R) Xeon(R) CPU @ 2.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dali-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/z1s3w1l7y8l7kz077971f11vy9ih4pq2-composable/bin/composable
// benchmark
// pallet
// --chain=dali-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=*
// --extrinsic=*
// --steps=50
// --repeat=10
// --output=code/parachain/runtime/dali/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `cosmwasm`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> cosmwasm::WeightInfo for WeightInfo<T> {
	// Storage: Cosmwasm CodeHashToId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CurrentCodeId (r:1 w:1)
	// Storage: Cosmwasm PristineCode (r:0 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:0 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:0 w:1)
	/// The range of component `n` is `[1, 514288]`.
	fn upload(n: u32, ) -> Weight {
		// Minimum execution time: 767_717 nanoseconds.
		Weight::from_ref_time(759_805_442 as u64)
			// Standard Error: 163
			.saturating_add(Weight::from_ref_time(159_625 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn instantiate(n: u32, ) -> Weight {
		// Minimum execution time: 519_336 nanoseconds.
		Weight::from_ref_time(581_766_081 as u64)
			// Standard Error: 206_705
			.saturating_add(Weight::from_ref_time(52_251_870 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn execute(n: u32, ) -> Weight {
		// Minimum execution time: 475_469 nanoseconds.
		Weight::from_ref_time(526_041_906 as u64)
			// Standard Error: 181_235
			.saturating_add(Weight::from_ref_time(52_000_684 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm CodeIdToInfo (r:2 w:2)
	// Storage: Cosmwasm InstrumentedCode (r:2 w:1)
	// Storage: Cosmwasm PristineCode (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Cosmwasm CodeHashToId (r:0 w:1)
	fn migrate() -> Weight {
		// Minimum execution time: 911_748 nanoseconds.
		Weight::from_ref_time(925_645_000 as u64)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm InstrumentedCode (r:1 w:0)
	fn update_admin() -> Weight {
		// Minimum execution time: 444_955 nanoseconds.
		Weight::from_ref_time(460_615_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read() -> Weight {
		// Minimum execution time: 30_954 nanoseconds.
		Weight::from_ref_time(31_377_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0xe9a804b2e527fd3601d2ffc0bb023cd668656c6c6f20776f726c64] (r:1 w:0)
	fn db_read_other_contract() -> Weight {
		// Minimum execution time: 31_021 nanoseconds.
		Weight::from_ref_time(31_806_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:1)
	fn db_write() -> Weight {
		// Minimum execution time: 31_697 nanoseconds.
		Weight::from_ref_time(32_666_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn db_scan() -> Weight {
		// Minimum execution time: 7_434 nanoseconds.
		Weight::from_ref_time(7_651_000 as u64)
	}
	// Storage: unknown [0x] (r:1 w:0)
	fn db_next() -> Weight {
		// Minimum execution time: 68_479 nanoseconds.
		Weight::from_ref_time(72_405_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:0 w:1)
	fn db_remove() -> Weight {
		// Minimum execution time: 13_878 nanoseconds.
		Weight::from_ref_time(14_147_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Tokens Accounts (r:1 w:0)
	fn balance() -> Weight {
		// Minimum execution time: 12_533 nanoseconds.
		Weight::from_ref_time(13_842_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn transfer(n: u32, ) -> Weight {
		// Minimum execution time: 649 nanoseconds.
		Weight::from_ref_time(47_491_776 as u64)
			// Standard Error: 156_472
			.saturating_add(Weight::from_ref_time(47_109_627 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	fn set_contract_meta() -> Weight {
		// Minimum execution time: 27_007 nanoseconds.
		Weight::from_ref_time(27_830_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn running_contract_meta() -> Weight {
		// Minimum execution time: 6_986 nanoseconds.
		Weight::from_ref_time(7_188_000 as u64)
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn contract_meta() -> Weight {
		// Minimum execution time: 21_622 nanoseconds.
		Weight::from_ref_time(23_053_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	fn addr_validate() -> Weight {
		// Minimum execution time: 5_368 nanoseconds.
		Weight::from_ref_time(5_464_000 as u64)
	}
	fn addr_canonicalize() -> Weight {
		// Minimum execution time: 5_561 nanoseconds.
		Weight::from_ref_time(5_722_000 as u64)
	}
	fn addr_humanize() -> Weight {
		// Minimum execution time: 503 nanoseconds.
		Weight::from_ref_time(581_000 as u64)
	}
	fn secp256k1_recover_pubkey() -> Weight {
		// Minimum execution time: 62_187 nanoseconds.
		Weight::from_ref_time(63_268_000 as u64)
	}
	fn secp256k1_verify() -> Weight {
		// Minimum execution time: 61_744 nanoseconds.
		Weight::from_ref_time(63_486_000 as u64)
	}
	fn ed25519_verify() -> Weight {
		// Minimum execution time: 83_394 nanoseconds.
		Weight::from_ref_time(83_540_000 as u64)
	}
	fn ed25519_batch_verify() -> Weight {
		// Minimum execution time: 265_033 nanoseconds.
		Weight::from_ref_time(304_417_000 as u64)
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:1)
	// Storage: Cosmwasm ContractToInfo (r:1 w:1)
	// Storage: Cosmwasm CurrentNonce (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:2 w:2)
	/// The range of component `n` is `[0, 23]`.
	fn continue_instantiate(n: u32, ) -> Weight {
		// Minimum execution time: 434_682 nanoseconds.
		Weight::from_ref_time(490_618_429 as u64)
			// Standard Error: 134_252
			.saturating_add(Weight::from_ref_time(49_121_526 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	/// The range of component `n` is `[0, 23]`.
	fn continue_execute(n: u32, ) -> Weight {
		// Minimum execution time: 386_727 nanoseconds.
		Weight::from_ref_time(400_511_467 as u64)
			// Standard Error: 67_879
			.saturating_add(Weight::from_ref_time(2_096_047 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn continue_migrate() -> Weight {
		// Minimum execution time: 388_201 nanoseconds.
		Weight::from_ref_time(393_472_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_query() -> Weight {
		// Minimum execution time: 362_934 nanoseconds.
		Weight::from_ref_time(375_002_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	fn continue_reply() -> Weight {
		// Minimum execution time: 381_647 nanoseconds.
		Weight::from_ref_time(395_788_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_contract_info() -> Weight {
		// Minimum execution time: 40_513 nanoseconds.
		Weight::from_ref_time(41_329_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Cosmwasm CodeIdToInfo (r:1 w:0)
	fn query_code_info() -> Weight {
		// Minimum execution time: 29_552 nanoseconds.
		Weight::from_ref_time(30_140_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Cosmwasm ContractToInfo (r:1 w:0)
	// Storage: unknown [0x46fb7408d4f285228f4af516ea25851b68656c6c6f] (r:1 w:0)
	fn query_raw() -> Weight {
		// Minimum execution time: 49_375 nanoseconds.
		Weight::from_ref_time(50_254_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Const(r: u32, ) -> Weight {
		// Minimum execution time: 6_254 nanoseconds.
		Weight::from_ref_time(7_078_870 as u64)
			// Standard Error: 5_565
			.saturating_add(Weight::from_ref_time(1_465_211 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Const(r: u32, ) -> Weight {
		// Minimum execution time: 6_217 nanoseconds.
		Weight::from_ref_time(6_699_704 as u64)
			// Standard Error: 6_337
			.saturating_add(Weight::from_ref_time(1_481_954 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Load(r: u32, ) -> Weight {
		// Minimum execution time: 6_280 nanoseconds.
		Weight::from_ref_time(6_703_230 as u64)
			// Standard Error: 8_968
			.saturating_add(Weight::from_ref_time(2_719_230 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Load(r: u32, ) -> Weight {
		// Minimum execution time: 6_237 nanoseconds.
		Weight::from_ref_time(7_105_540 as u64)
			// Standard Error: 11_645
			.saturating_add(Weight::from_ref_time(2_723_535 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Store(r: u32, ) -> Weight {
		// Minimum execution time: 6_456 nanoseconds.
		Weight::from_ref_time(7_774_087 as u64)
			// Standard Error: 27_442
			.saturating_add(Weight::from_ref_time(4_715_431 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Store(r: u32, ) -> Weight {
		// Minimum execution time: 6_213 nanoseconds.
		Weight::from_ref_time(6_837_421 as u64)
			// Standard Error: 25_571
			.saturating_add(Weight::from_ref_time(4_756_566 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eq(r: u32, ) -> Weight {
		// Minimum execution time: 6_232 nanoseconds.
		Weight::from_ref_time(6_907_648 as u64)
			// Standard Error: 12_021
			.saturating_add(Weight::from_ref_time(3_463_949 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Eqz(r: u32, ) -> Weight {
		// Minimum execution time: 6_156 nanoseconds.
		Weight::from_ref_time(6_995_859 as u64)
			// Standard Error: 8_395
			.saturating_add(Weight::from_ref_time(2_422_250 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ne(r: u32, ) -> Weight {
		// Minimum execution time: 5_982 nanoseconds.
		Weight::from_ref_time(7_256_016 as u64)
			// Standard Error: 9_600
			.saturating_add(Weight::from_ref_time(3_442_118 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LtS(r: u32, ) -> Weight {
		// Minimum execution time: 6_079 nanoseconds.
		Weight::from_ref_time(6_686_347 as u64)
			// Standard Error: 10_967
			.saturating_add(Weight::from_ref_time(3_476_157 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GtS(r: u32, ) -> Weight {
		// Minimum execution time: 6_145 nanoseconds.
		Weight::from_ref_time(6_542_842 as u64)
			// Standard Error: 11_509
			.saturating_add(Weight::from_ref_time(3_483_971 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64LeS(r: u32, ) -> Weight {
		// Minimum execution time: 6_125 nanoseconds.
		Weight::from_ref_time(7_135_388 as u64)
			// Standard Error: 10_285
			.saturating_add(Weight::from_ref_time(3_458_390 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64GeS(r: u32, ) -> Weight {
		// Minimum execution time: 6_342 nanoseconds.
		Weight::from_ref_time(7_336_458 as u64)
			// Standard Error: 9_781
			.saturating_add(Weight::from_ref_time(3_451_440 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Clz(r: u32, ) -> Weight {
		// Minimum execution time: 6_473 nanoseconds.
		Weight::from_ref_time(7_201_728 as u64)
			// Standard Error: 11_781
			.saturating_add(Weight::from_ref_time(2_455_025 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Ctz(r: u32, ) -> Weight {
		// Minimum execution time: 6_379 nanoseconds.
		Weight::from_ref_time(7_148_810 as u64)
			// Standard Error: 10_124
			.saturating_add(Weight::from_ref_time(2_454_429 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Popcnt(r: u32, ) -> Weight {
		// Minimum execution time: 6_240 nanoseconds.
		Weight::from_ref_time(6_767_854 as u64)
			// Standard Error: 10_041
			.saturating_add(Weight::from_ref_time(2_469_284 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Add(r: u32, ) -> Weight {
		// Minimum execution time: 6_314 nanoseconds.
		Weight::from_ref_time(7_023_777 as u64)
			// Standard Error: 7_634
			.saturating_add(Weight::from_ref_time(3_424_494 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Sub(r: u32, ) -> Weight {
		// Minimum execution time: 6_580 nanoseconds.
		Weight::from_ref_time(7_072_796 as u64)
			// Standard Error: 9_869
			.saturating_add(Weight::from_ref_time(3_429_179 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Mul(r: u32, ) -> Weight {
		// Minimum execution time: 6_216 nanoseconds.
		Weight::from_ref_time(7_333_946 as u64)
			// Standard Error: 9_209
			.saturating_add(Weight::from_ref_time(3_418_971 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivS(r: u32, ) -> Weight {
		// Minimum execution time: 6_254 nanoseconds.
		Weight::from_ref_time(7_673_985 as u64)
			// Standard Error: 14_812
			.saturating_add(Weight::from_ref_time(4_450_214 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64DivU(r: u32, ) -> Weight {
		// Minimum execution time: 6_091 nanoseconds.
		Weight::from_ref_time(8_219_488 as u64)
			// Standard Error: 44_152
			.saturating_add(Weight::from_ref_time(3_852_303 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64RemS(r: u32, ) -> Weight {
		// Minimum execution time: 6_166 nanoseconds.
		Weight::from_ref_time(7_187_363 as u64)
			// Standard Error: 13_360
			.saturating_add(Weight::from_ref_time(4_389_457 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64And(r: u32, ) -> Weight {
		// Minimum execution time: 6_443 nanoseconds.
		Weight::from_ref_time(7_570_947 as u64)
			// Standard Error: 13_373
			.saturating_add(Weight::from_ref_time(3_436_985 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Or(r: u32, ) -> Weight {
		// Minimum execution time: 6_326 nanoseconds.
		Weight::from_ref_time(7_574_041 as u64)
			// Standard Error: 13_881
			.saturating_add(Weight::from_ref_time(3_431_718 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Xor(r: u32, ) -> Weight {
		// Minimum execution time: 6_213 nanoseconds.
		Weight::from_ref_time(7_598_036 as u64)
			// Standard Error: 11_387
			.saturating_add(Weight::from_ref_time(3_423_539 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Shl(r: u32, ) -> Weight {
		// Minimum execution time: 6_307 nanoseconds.
		Weight::from_ref_time(7_051_613 as u64)
			// Standard Error: 13_520
			.saturating_add(Weight::from_ref_time(3_456_853 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ShrS(r: u32, ) -> Weight {
		// Minimum execution time: 5_938 nanoseconds.
		Weight::from_ref_time(7_341_808 as u64)
			// Standard Error: 9_751
			.saturating_add(Weight::from_ref_time(3_425_374 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotl(r: u32, ) -> Weight {
		// Minimum execution time: 6_355 nanoseconds.
		Weight::from_ref_time(7_216_535 as u64)
			// Standard Error: 10_832
			.saturating_add(Weight::from_ref_time(3_442_507 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64Rotr(r: u32, ) -> Weight {
		// Minimum execution time: 6_415 nanoseconds.
		Weight::from_ref_time(7_057_165 as u64)
			// Standard Error: 9_028
			.saturating_add(Weight::from_ref_time(3_431_225 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I64ExtendSI32(r: u32, ) -> Weight {
		// Minimum execution time: 5_957 nanoseconds.
		Weight::from_ref_time(6_625_683 as u64)
			// Standard Error: 8_407
			.saturating_add(Weight::from_ref_time(2_448_162 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_I32WrapI64(r: u32, ) -> Weight {
		// Minimum execution time: 6_413 nanoseconds.
		Weight::from_ref_time(6_929_291 as u64)
			// Standard Error: 9_735
			.saturating_add(Weight::from_ref_time(2_500_601 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Eq(r: u32, ) -> Weight {
		// Minimum execution time: 6_124 nanoseconds.
		Weight::from_ref_time(6_260_253 as u64)
			// Standard Error: 11_007
			.saturating_add(Weight::from_ref_time(3_427_373 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ne(r: u32, ) -> Weight {
		// Minimum execution time: 6_104 nanoseconds.
		Weight::from_ref_time(6_459_115 as u64)
			// Standard Error: 10_120
			.saturating_add(Weight::from_ref_time(3_424_199 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Lt(r: u32, ) -> Weight {
		// Minimum execution time: 6_147 nanoseconds.
		Weight::from_ref_time(6_966_810 as u64)
			// Standard Error: 9_415
			.saturating_add(Weight::from_ref_time(3_410_245 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Gt(r: u32, ) -> Weight {
		// Minimum execution time: 6_128 nanoseconds.
		Weight::from_ref_time(6_847_643 as u64)
			// Standard Error: 11_627
			.saturating_add(Weight::from_ref_time(3_429_491 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Le(r: u32, ) -> Weight {
		// Minimum execution time: 6_203 nanoseconds.
		Weight::from_ref_time(7_747_854 as u64)
			// Standard Error: 11_104
			.saturating_add(Weight::from_ref_time(3_400_585 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ge(r: u32, ) -> Weight {
		// Minimum execution time: 6_210 nanoseconds.
		Weight::from_ref_time(7_185_978 as u64)
			// Standard Error: 10_091
			.saturating_add(Weight::from_ref_time(3_418_107 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Abs(r: u32, ) -> Weight {
		// Minimum execution time: 6_040 nanoseconds.
		Weight::from_ref_time(7_057_805 as u64)
			// Standard Error: 6_351
			.saturating_add(Weight::from_ref_time(2_403_265 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Neg(r: u32, ) -> Weight {
		// Minimum execution time: 6_237 nanoseconds.
		Weight::from_ref_time(7_295_362 as u64)
			// Standard Error: 6_776
			.saturating_add(Weight::from_ref_time(2_473_379 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Ceil(r: u32, ) -> Weight {
		// Minimum execution time: 6_316 nanoseconds.
		Weight::from_ref_time(7_231_870 as u64)
			// Standard Error: 11_303
			.saturating_add(Weight::from_ref_time(2_401_565 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Floor(r: u32, ) -> Weight {
		// Minimum execution time: 6_239 nanoseconds.
		Weight::from_ref_time(7_474_968 as u64)
			// Standard Error: 10_921
			.saturating_add(Weight::from_ref_time(2_399_300 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Trunc(r: u32, ) -> Weight {
		// Minimum execution time: 6_219 nanoseconds.
		Weight::from_ref_time(7_350_498 as u64)
			// Standard Error: 9_020
			.saturating_add(Weight::from_ref_time(2_433_899 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Nearest(r: u32, ) -> Weight {
		// Minimum execution time: 6_457 nanoseconds.
		Weight::from_ref_time(7_713_675 as u64)
			// Standard Error: 11_038
			.saturating_add(Weight::from_ref_time(2_877_506 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sqrt(r: u32, ) -> Weight {
		// Minimum execution time: 6_365 nanoseconds.
		Weight::from_ref_time(7_220_355 as u64)
			// Standard Error: 12_873
			.saturating_add(Weight::from_ref_time(2_633_821 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Add(r: u32, ) -> Weight {
		// Minimum execution time: 6_207 nanoseconds.
		Weight::from_ref_time(6_966_345 as u64)
			// Standard Error: 10_923
			.saturating_add(Weight::from_ref_time(3_439_820 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Sub(r: u32, ) -> Weight {
		// Minimum execution time: 6_371 nanoseconds.
		Weight::from_ref_time(6_704_698 as u64)
			// Standard Error: 11_456
			.saturating_add(Weight::from_ref_time(3_477_870 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Mul(r: u32, ) -> Weight {
		// Minimum execution time: 6_287 nanoseconds.
		Weight::from_ref_time(6_731_335 as u64)
			// Standard Error: 11_690
			.saturating_add(Weight::from_ref_time(3_468_948 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Div(r: u32, ) -> Weight {
		// Minimum execution time: 6_155 nanoseconds.
		Weight::from_ref_time(6_819_898 as u64)
			// Standard Error: 10_308
			.saturating_add(Weight::from_ref_time(3_447_581 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Min(r: u32, ) -> Weight {
		// Minimum execution time: 6_180 nanoseconds.
		Weight::from_ref_time(7_336_218 as u64)
			// Standard Error: 11_526
			.saturating_add(Weight::from_ref_time(3_365_332 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Max(r: u32, ) -> Weight {
		// Minimum execution time: 6_225 nanoseconds.
		Weight::from_ref_time(6_947_814 as u64)
			// Standard Error: 11_631
			.saturating_add(Weight::from_ref_time(3_389_018 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_F64Copysign(r: u32, ) -> Weight {
		// Minimum execution time: 6_407 nanoseconds.
		Weight::from_ref_time(6_685_306 as u64)
			// Standard Error: 11_265
			.saturating_add(Weight::from_ref_time(3_461_377 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Select(r: u32, ) -> Weight {
		// Minimum execution time: 6_120 nanoseconds.
		Weight::from_ref_time(6_837_420 as u64)
			// Standard Error: 16_368
			.saturating_add(Weight::from_ref_time(4_545_628 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_If(r: u32, ) -> Weight {
		// Minimum execution time: 6_201 nanoseconds.
		Weight::from_ref_time(6_797_612 as u64)
			// Standard Error: 4_511
			.saturating_add(Weight::from_ref_time(1_917_922 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Else(r: u32, ) -> Weight {
		// Minimum execution time: 6_328 nanoseconds.
		Weight::from_ref_time(7_211_411 as u64)
			// Standard Error: 9_292
			.saturating_add(Weight::from_ref_time(2_892_581 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetLocal(r: u32, ) -> Weight {
		// Minimum execution time: 6_048 nanoseconds.
		Weight::from_ref_time(7_118_640 as u64)
			// Standard Error: 4_834
			.saturating_add(Weight::from_ref_time(1_430_207 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetLocal(r: u32, ) -> Weight {
		// Minimum execution time: 6_181 nanoseconds.
		Weight::from_ref_time(7_609_381 as u64)
			// Standard Error: 6_029
			.saturating_add(Weight::from_ref_time(1_750_420 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_TeeLocal(_r: u32, ) -> Weight {
		// Minimum execution time: 6_236 nanoseconds.
		Weight::from_ref_time(6_919_481 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_GetGlobal(r: u32, ) -> Weight {
		// Minimum execution time: 6_225 nanoseconds.
		Weight::from_ref_time(6_845_799 as u64)
			// Standard Error: 910
			.saturating_add(Weight::from_ref_time(106 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_SetGlobal(_r: u32, ) -> Weight {
		// Minimum execution time: 6_165 nanoseconds.
		Weight::from_ref_time(6_943_652 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CurrentMemory(r: u32, ) -> Weight {
		// Minimum execution time: 6_325 nanoseconds.
		Weight::from_ref_time(6_983_418 as u64)
			// Standard Error: 8_108
			.saturating_add(Weight::from_ref_time(2_035_966 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 3]`.
	fn instruction_GrowMemory(r: u32, ) -> Weight {
		// Minimum execution time: 6_076 nanoseconds.
		Weight::from_ref_time(6_425_000 as u64)
			// Standard Error: 18_247_338
			.saturating_add(Weight::from_ref_time(2_578_109_378 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Br(r: u32, ) -> Weight {
		// Minimum execution time: 6_406 nanoseconds.
		Weight::from_ref_time(7_280_907 as u64)
			// Standard Error: 5_742
			.saturating_add(Weight::from_ref_time(926_007 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrIf(r: u32, ) -> Weight {
		// Minimum execution time: 6_095 nanoseconds.
		Weight::from_ref_time(6_789_220 as u64)
			// Standard Error: 8_157
			.saturating_add(Weight::from_ref_time(1_897_864 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_BrTable(r: u32, ) -> Weight {
		// Minimum execution time: 6_232 nanoseconds.
		Weight::from_ref_time(7_134_436 as u64)
			// Standard Error: 9_932
			.saturating_add(Weight::from_ref_time(2_533_105 as u64).saturating_mul(r as u64))
	}
	/// The range of component `s` is `[1, 50]`.
	fn instruction_BrTable_per_elem(s: u32, ) -> Weight {
		// Minimum execution time: 8_928 nanoseconds.
		Weight::from_ref_time(9_646_162 as u64)
			// Standard Error: 1_860
			.saturating_add(Weight::from_ref_time(9_965 as u64).saturating_mul(s as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_Call(r: u32, ) -> Weight {
		// Minimum execution time: 6_391 nanoseconds.
		Weight::from_ref_time(7_743_380 as u64)
			// Standard Error: 24_903
			.saturating_add(Weight::from_ref_time(13_320_007 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instruction_CallIndirect(r: u32, ) -> Weight {
		// Minimum execution time: 6_918 nanoseconds.
		Weight::from_ref_time(7_915_610 as u64)
			// Standard Error: 24_868
			.saturating_add(Weight::from_ref_time(15_875_800 as u64).saturating_mul(r as u64))
	}
}
