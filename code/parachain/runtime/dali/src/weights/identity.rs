
//! Autogenerated weights for `identity`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-25, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ad1a4849983a`, CPU: `Intel(R) Xeon(R) CPU @ 2.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dali-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/xqbipr3p6p4myn1blgznhki07d6sm1p8-composable/bin/composable
// benchmark
// pallet
// --chain=dali-dev
// --execution=wasm
// --wasm-execution=compiled
// --wasm-instantiation-strategy=legacy-instance-reuse
// --pallet=*
// --extrinsic=*
// --steps=50
// --repeat=20
// --output=code/parachain/runtime/dali/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `identity`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> identity::WeightInfo for WeightInfo<T> {
	// Storage: Identity Registrars (r:1 w:1)
	/// The range of component `r` is `[1, 7]`.
	fn add_registrar(r: u32, ) -> Weight {
		(40_187_000 as Weight)
			// Standard Error: 47_000
			.saturating_add((917_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Identity IdentityOf (r:1 w:1)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `x` is `[1, 32]`.
	fn set_identity(r: u32, x: u32, ) -> Weight {
		(78_613_000 as Weight)
			// Standard Error: 151_000
			.saturating_add((532_000 as Weight).saturating_mul(r as Weight))
			// Standard Error: 25_000
			.saturating_add((1_182_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity SuperOf (r:1 w:1)
	/// The range of component `s` is `[1, 32]`.
	fn set_subs_new(s: u32, ) -> Weight {
		(67_216_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((8_618_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(s as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity SuperOf (r:0 w:1)
	/// The range of component `p` is `[1, 32]`.
	fn set_subs_old(p: u32, ) -> Weight {
		(68_290_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_957_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(p as Weight)))
	}
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Storage: Identity SuperOf (r:0 w:32)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `s` is `[1, 32]`.
	/// The range of component `x` is `[1, 32]`.
	fn clear_identity(_r: u32, s: u32, x: u32, ) -> Weight {
		(90_925_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((2_878_000 as Weight).saturating_mul(s as Weight))
			// Standard Error: 18_000
			.saturating_add((564_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
	}
	// Storage: Identity Registrars (r:1 w:0)
	// Storage: Identity IdentityOf (r:1 w:1)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `x` is `[1, 32]`.
	fn request_judgement(r: u32, x: u32, ) -> Weight {
		(82_654_000 as Weight)
			// Standard Error: 44_000
			.saturating_add((859_000 as Weight).saturating_mul(r as Weight))
			// Standard Error: 7_000
			.saturating_add((1_170_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Identity IdentityOf (r:1 w:1)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `x` is `[1, 32]`.
	fn cancel_request(r: u32, x: u32, ) -> Weight {
		(76_627_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((720_000 as Weight).saturating_mul(r as Weight))
			// Standard Error: 12_000
			.saturating_add((1_162_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Identity Registrars (r:1 w:1)
	/// The range of component `r` is `[1, 7]`.
	fn set_fee(r: u32, ) -> Weight {
		(19_479_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((707_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Identity Registrars (r:1 w:1)
	/// The range of component `r` is `[1, 7]`.
	fn set_account_id(r: u32, ) -> Weight {
		(19_905_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((674_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Identity Registrars (r:1 w:1)
	/// The range of component `r` is `[1, 7]`.
	fn set_fields(r: u32, ) -> Weight {
		(19_206_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((749_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Identity Registrars (r:1 w:0)
	// Storage: Identity IdentityOf (r:1 w:1)
	/// The range of component `r` is `[1, 7]`.
	/// The range of component `x` is `[1, 32]`.
	fn provide_judgement(r: u32, x: u32, ) -> Weight {
		(57_132_000 as Weight)
			// Standard Error: 56_000
			.saturating_add((727_000 as Weight).saturating_mul(r as Weight))
			// Standard Error: 7_000
			.saturating_add((1_138_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Identity SuperOf (r:0 w:32)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `s` is `[1, 32]`.
	/// The range of component `x` is `[1, 32]`.
	fn kill_identity(r: u32, s: u32, _x: u32, ) -> Weight {
		(107_922_000 as Weight)
			// Standard Error: 208_000
			.saturating_add((1_065_000 as Weight).saturating_mul(r as Weight))
			// Standard Error: 31_000
			.saturating_add((3_102_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SuperOf (r:1 w:1)
	// Storage: Identity SubsOf (r:1 w:1)
	/// The range of component `s` is `[1, 31]`.
	fn add_sub(s: u32, ) -> Weight {
		(89_228_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((316_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SuperOf (r:1 w:1)
	/// The range of component `s` is `[1, 32]`.
	fn rename_sub(s: u32, ) -> Weight {
		(30_542_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((220_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SuperOf (r:1 w:1)
	// Storage: Identity SubsOf (r:1 w:1)
	/// The range of component `s` is `[1, 32]`.
	fn remove_sub(s: u32, ) -> Weight {
		(88_309_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((459_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Identity SuperOf (r:1 w:1)
	// Storage: Identity SubsOf (r:1 w:1)
	/// The range of component `s` is `[1, 31]`.
	fn quit_sub(s: u32, ) -> Weight {
		(60_672_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((445_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
}
