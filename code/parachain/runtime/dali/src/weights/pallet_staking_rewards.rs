
//! Autogenerated weights for `pallet_staking_rewards`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-25, STEPS: `2`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `dev`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dali-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/gpsh9wvfcrwyck2nw62gpkqhf0bhc0cw-composable/bin/composable
// benchmark
// pallet
// --chain=dali-dev
// --execution=wasm
// --wasm-execution=compiled
// --wasm-instantiation-strategy=legacy-instance-reuse
// --pallet=*
// --extrinsic=*
// --steps=2
// --repeat=2
// --output=code/parachain/runtime/dali/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_staking_rewards`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_staking_rewards::WeightInfo for WeightInfo<T> {
	// Storage: StakingRewards RewardPools (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Fnft Collection (r:1 w:1)
	/// The range of component `r` is `[1, 10]`.
	fn create_reward_pool(r: u32, ) -> Weight {
		// Minimum execution time: 43_208 nanoseconds.
		Weight::from_ref_time(57_798_166 as u64)
			// Standard Error: 2_417_559
			.saturating_add(Weight::from_ref_time(784_833 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: StakingRewards RewardPools (r:1 w:1)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: Tokens TotalIssuance (r:2 w:1)
	// Storage: Fnft FinancialNftId (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Tokens Locks (r:2 w:2)
	// Storage: Fnft Instance (r:1 w:1)
	// Storage: Fnft Collection (r:1 w:0)
	// Storage: Fnft OwnerInstances (r:1 w:1)
	// Storage: Proxy Proxies (r:1 w:1)
	// Storage: StakingRewards Stakes (r:0 w:1)
	/// The range of component `r` is `[1, 10]`.
	fn stake(r: u32, ) -> Weight {
		// Minimum execution time: 171_709 nanoseconds.
		Weight::from_ref_time(216_251_444 as u64)
			// Standard Error: 12_162_058
			.saturating_add(Weight::from_ref_time(11_187_555 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(15 as u64))
			.saturating_add(T::DbWeight::get().writes(13 as u64))
	}
	// Storage: Fnft Instance (r:1 w:0)
	// Storage: StakingRewards Stakes (r:1 w:1)
	// Storage: StakingRewards RewardPools (r:1 w:1)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: Tokens TotalIssuance (r:2 w:1)
	// Storage: Tokens Locks (r:2 w:2)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[1, 10]`.
	fn extend(r: u32, ) -> Weight {
		// Minimum execution time: 121_918 nanoseconds.
		Weight::from_ref_time(119_802_333 as u64)
			// Standard Error: 3_053_700
			.saturating_add(Weight::from_ref_time(4_553_166 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
	// Storage: Fnft Instance (r:1 w:1)
	// Storage: StakingRewards Stakes (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: StakingRewards RewardPools (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Tokens Locks (r:2 w:2)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: System Account (r:2 w:2)
	// Storage: Fnft OwnerInstances (r:1 w:1)
	/// The range of component `r` is `[1, 10]`.
	fn unstake(r: u32, ) -> Weight {
		// Minimum execution time: 173_751 nanoseconds.
		Weight::from_ref_time(180_847_944 as u64)
			// Standard Error: 2_044_016
			.saturating_add(Weight::from_ref_time(6_882_055 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(14 as u64))
			.saturating_add(T::DbWeight::get().writes(13 as u64))
	}
	// Storage: Fnft Instance (r:2 w:1)
	// Storage: StakingRewards Stakes (r:1 w:2)
	// Storage: StakingRewards RewardPools (r:1 w:0)
	// Storage: Fnft FinancialNftId (r:1 w:1)
	// Storage: Fnft Collection (r:1 w:0)
	// Storage: Fnft OwnerInstances (r:1 w:1)
	// Storage: Proxy Proxies (r:1 w:1)
	// Storage: Tokens Locks (r:4 w:4)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: System Account (r:2 w:1)
	/// The range of component `r` is `[1, 10]`.
	fn split(_r: u32, ) -> Weight {
		// Minimum execution time: 209_460 nanoseconds.
		Weight::from_ref_time(225_399_277 as u64)
			.saturating_add(T::DbWeight::get().reads(18 as u64))
			.saturating_add(T::DbWeight::get().writes(15 as u64))
	}
	// Storage: StakingRewards RewardsPotIsEmpty (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	fn reward_accumulation_hook_reward_update_calculation() -> Weight {
		// Minimum execution time: 30_208 nanoseconds.
		Weight::from_ref_time(34_042_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	fn unix_time_now() -> Weight {
		// Minimum execution time: 3_417 nanoseconds.
		Weight::from_ref_time(3_792_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: StakingRewards RewardPools (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: StakingRewards RewardsPotIsEmpty (r:1 w:0)
	/// The range of component `r` is `[1, 10]`.
	fn update_rewards_pool(r: u32, ) -> Weight {
		// Minimum execution time: 38_084 nanoseconds.
		Weight::from_ref_time(33_291_722 as u64)
			// Standard Error: 602_614
			.saturating_add(Weight::from_ref_time(6_791_777 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Fnft Instance (r:1 w:0)
	// Storage: StakingRewards Stakes (r:1 w:1)
	// Storage: StakingRewards RewardPools (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:0)
	/// The range of component `r` is `[1, 10]`.
	fn claim(r: u32, ) -> Weight {
		// Minimum execution time: 53_417 nanoseconds.
		Weight::from_ref_time(69_113_722 as u64)
			// Standard Error: 1_780_732
			.saturating_add(Weight::from_ref_time(240_777 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: StakingRewards RewardPools (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: StakingRewards RewardsPotIsEmpty (r:1 w:0)
	fn add_to_rewards_pot() -> Weight {
		// Minimum execution time: 73_417 nanoseconds.
		Weight::from_ref_time(111_501_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
}
