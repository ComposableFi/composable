
//! Autogenerated weights for `pallet_staking_rewards`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-14, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ddf18ea9c649`, CPU: `Intel(R) Xeon(R) CPU @ 3.10GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dali-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/7as5b27dws6pfhhpjrs68qfvfx2ldcli-composable/bin/composable
// benchmark
// pallet
// --chain=dali-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=*
// --extrinsic=*
// --steps=50
// --repeat=10
// --output=code/parachain/runtime/dali/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_staking_rewards`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_staking_rewards::WeightInfo for WeightInfo<T> {
	// Storage: StakingRewards RewardPools (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Fnft Collection (r:1 w:1)
	/// The range of component `r` is `[1, 10]`.
	fn create_reward_pool(r: u32, ) -> Weight {
		// Minimum execution time: 57_714 nanoseconds.
		Weight::from_ref_time(60_599_002)
			// Standard Error: 40_492
			.saturating_add(Weight::from_ref_time(702_540).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: StakingRewards RewardPools (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:3)
	// Storage: Tokens TotalIssuance (r:2 w:1)
	// Storage: Fnft FinancialNftId (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Tokens Locks (r:2 w:2)
	// Storage: Fnft Instance (r:1 w:1)
	// Storage: Fnft Collection (r:1 w:0)
	// Storage: Fnft OwnerInstances (r:1 w:1)
	// Storage: Proxy Proxies (r:1 w:1)
	// Storage: StakingRewards Stakes (r:0 w:1)
	/// The range of component `r` is `[1, 10]`.
	fn stake(r: u32, ) -> Weight {
		// Minimum execution time: 231_663 nanoseconds.
		Weight::from_ref_time(239_546_264)
			// Standard Error: 94_180
			.saturating_add(Weight::from_ref_time(1_137_393).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(16))
			.saturating_add(T::DbWeight::get().writes(13))
	}
	// Storage: Fnft Instance (r:1 w:0)
	// Storage: StakingRewards Stakes (r:1 w:1)
	// Storage: StakingRewards RewardPools (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:3)
	// Storage: Tokens TotalIssuance (r:2 w:1)
	// Storage: Tokens Locks (r:2 w:2)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[1, 10]`.
	fn extend(r: u32, ) -> Weight {
		// Minimum execution time: 173_434 nanoseconds.
		Weight::from_ref_time(180_414_966)
			// Standard Error: 65_480
			.saturating_add(Weight::from_ref_time(776_853).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: Fnft Instance (r:1 w:1)
	// Storage: StakingRewards Stakes (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: StakingRewards RewardPools (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:0)
	// Storage: Tokens Locks (r:2 w:2)
	// Storage: Tokens Accounts (r:5 w:5)
	// Storage: System Account (r:3 w:3)
	// Storage: Fnft OwnerInstances (r:1 w:1)
	/// The range of component `r` is `[1, 10]`.
	fn unstake(r: u32, ) -> Weight {
		// Minimum execution time: 248_173 nanoseconds.
		Weight::from_ref_time(253_963_203)
			// Standard Error: 83_849
			.saturating_add(Weight::from_ref_time(3_114_780).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(16))
			.saturating_add(T::DbWeight::get().writes(14))
	}
	// Storage: Fnft Instance (r:2 w:1)
	// Storage: StakingRewards Stakes (r:1 w:2)
	// Storage: StakingRewards RewardPools (r:1 w:0)
	// Storage: Fnft FinancialNftId (r:1 w:1)
	// Storage: Fnft Collection (r:1 w:0)
	// Storage: Fnft OwnerInstances (r:1 w:1)
	// Storage: Proxy Proxies (r:1 w:1)
	// Storage: Tokens Locks (r:4 w:4)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: System Account (r:2 w:1)
	/// The range of component `r` is `[1, 10]`.
	fn split(r: u32, ) -> Weight {
		// Minimum execution time: 289_535 nanoseconds.
		Weight::from_ref_time(296_882_162)
			// Standard Error: 89_621
			.saturating_add(Weight::from_ref_time(818_491).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(18))
			.saturating_add(T::DbWeight::get().writes(15))
	}
	// Storage: StakingRewards RewardsPotIsEmpty (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	fn reward_accumulation_hook_reward_update_calculation() -> Weight {
		// Minimum execution time: 42_667 nanoseconds.
		Weight::from_ref_time(47_434_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Timestamp Now (r:1 w:0)
	fn unix_time_now() -> Weight {
		// Minimum execution time: 4_348 nanoseconds.
		Weight::from_ref_time(4_538_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: StakingRewards RewardPools (r:1 w:1)
	// Storage: Tokens Accounts (r:1 w:0)
	// Storage: Tokens TotalIssuance (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: StakingRewards RewardsPotIsEmpty (r:1 w:0)
	/// The range of component `r` is `[1, 10]`.
	fn update_rewards_pool(r: u32, ) -> Weight {
		// Minimum execution time: 64_454 nanoseconds.
		Weight::from_ref_time(83_379_942)
			// Standard Error: 660_879
			.saturating_add(Weight::from_ref_time(9_422_172).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Fnft Instance (r:1 w:0)
	// Storage: StakingRewards Stakes (r:1 w:1)
	// Storage: StakingRewards RewardPools (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:0)
	/// The range of component `r` is `[1, 10]`.
	fn claim(r: u32, ) -> Weight {
		// Minimum execution time: 69_205 nanoseconds.
		Weight::from_ref_time(83_944_398)
			// Standard Error: 260_032
			.saturating_add(Weight::from_ref_time(1_190_557).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: StakingRewards RewardPools (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: StakingRewards RewardsPotIsEmpty (r:1 w:0)
	fn add_to_rewards_pot() -> Weight {
		// Minimum execution time: 99_079 nanoseconds.
		Weight::from_ref_time(102_075_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
}
