
//! Autogenerated weights for `collective`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-08, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `2d691eeb71e8`, CPU: `Intel(R) Xeon(R) CPU @ 2.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("composable-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/k90wdfhxs42v27wx2ddzxqfwcladfk40-composable/bin/composable
// benchmark
// pallet
// --chain=composable-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=*
// --extrinsic=*
// --steps=50
// --repeat=10
// --output=code/parachain/runtime/composable/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> collective::WeightInfo for WeightInfo<T> {
	// Storage: Council Members (r:1 w:1)
	// Storage: Council Proposals (r:1 w:0)
	// Storage: Council Prime (r:0 w:1)
	// Storage: Council Voting (r:100 w:100)
	/// The range of component `m` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Minimum execution time: 45_048 nanoseconds.
		Weight::from_ref_time(45_686_000 as u64)
			// Standard Error: 202_626
			.saturating_add(Weight::from_ref_time(12_137_958 as u64).saturating_mul(m as u64))
			// Standard Error: 202_626
			.saturating_add(Weight::from_ref_time(18_392_322 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: Council Members (r:1 w:0)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn execute(b: u32, m: u32, ) -> Weight {
		// Minimum execution time: 49_679 nanoseconds.
		Weight::from_ref_time(50_996_229 as u64)
			// Standard Error: 568
			.saturating_add(Weight::from_ref_time(2_363 as u64).saturating_mul(b as u64))
			// Standard Error: 5_860
			.saturating_add(Weight::from_ref_time(64_483 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Council Members (r:1 w:0)
	// Storage: Council ProposalOf (r:1 w:0)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Minimum execution time: 54_489 nanoseconds.
		Weight::from_ref_time(59_214_792 as u64)
			// Standard Error: 694
			.saturating_add(Weight::from_ref_time(25 as u64).saturating_mul(b as u64))
			// Standard Error: 7_160
			.saturating_add(Weight::from_ref_time(107_046 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}
	// Storage: Council Members (r:1 w:0)
	// Storage: Council ProposalOf (r:1 w:1)
	// Storage: Council Proposals (r:1 w:1)
	// Storage: Council ProposalCount (r:1 w:1)
	// Storage: Council Voting (r:0 w:1)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Minimum execution time: 75_220 nanoseconds.
		Weight::from_ref_time(60_177_274 as u64)
			// Standard Error: 1_703
			.saturating_add(Weight::from_ref_time(19_848 as u64).saturating_mul(b as u64))
			// Standard Error: 17_792
			.saturating_add(Weight::from_ref_time(29_285 as u64).saturating_mul(m as u64))
			// Standard Error: 17_567
			.saturating_add(Weight::from_ref_time(1_034_760 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Council Members (r:1 w:0)
	// Storage: Council Voting (r:1 w:1)
	/// The range of component `m` is `[5, 100]`.
	fn vote(m: u32, ) -> Weight {
		// Minimum execution time: 98_805 nanoseconds.
		Weight::from_ref_time(117_545_963 as u64)
			// Standard Error: 19_370
			.saturating_add(Weight::from_ref_time(236_098 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Storage: Council Members (r:1 w:0)
	// Storage: Council Proposals (r:1 w:1)
	// Storage: Council ProposalOf (r:0 w:1)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Minimum execution time: 81_566 nanoseconds.
		Weight::from_ref_time(69_333_627 as u64)
			// Standard Error: 17_233
			.saturating_add(Weight::from_ref_time(236_222 as u64).saturating_mul(m as u64))
			// Standard Error: 16_804
			.saturating_add(Weight::from_ref_time(877_663 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Storage: Council Members (r:1 w:0)
	// Storage: Council ProposalOf (r:1 w:1)
	// Storage: Council Proposals (r:1 w:1)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Minimum execution time: 115_035 nanoseconds.
		Weight::from_ref_time(117_149_527 as u64)
			// Standard Error: 1_589
			.saturating_add(Weight::from_ref_time(9_429 as u64).saturating_mul(b as u64))
			// Standard Error: 16_814
			.saturating_add(Weight::from_ref_time(57_614 as u64).saturating_mul(m as u64))
			// Standard Error: 16_390
			.saturating_add(Weight::from_ref_time(954_183 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Storage: Council Members (r:1 w:0)
	// Storage: Council Prime (r:1 w:0)
	// Storage: Council Proposals (r:1 w:1)
	// Storage: Council ProposalOf (r:0 w:1)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Minimum execution time: 87_927 nanoseconds.
		Weight::from_ref_time(81_460_981 as u64)
			// Standard Error: 16_387
			.saturating_add(Weight::from_ref_time(199_206 as u64).saturating_mul(m as u64))
			// Standard Error: 15_979
			.saturating_add(Weight::from_ref_time(882_709 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Storage: Council Members (r:1 w:0)
	// Storage: Council Prime (r:1 w:0)
	// Storage: Council ProposalOf (r:1 w:1)
	// Storage: Council Proposals (r:1 w:1)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Minimum execution time: 118_097 nanoseconds.
		Weight::from_ref_time(112_746_199 as u64)
			// Standard Error: 1_836
			.saturating_add(Weight::from_ref_time(13_263 as u64).saturating_mul(b as u64))
			// Standard Error: 19_424
			.saturating_add(Weight::from_ref_time(119_293 as u64).saturating_mul(m as u64))
			// Standard Error: 18_934
			.saturating_add(Weight::from_ref_time(998_020 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Council Proposals (r:1 w:1)
	// Storage: Council Voting (r:0 w:1)
	// Storage: Council ProposalOf (r:0 w:1)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32, ) -> Weight {
		// Minimum execution time: 50_994 nanoseconds.
		Weight::from_ref_time(50_958_232 as u64)
			// Standard Error: 16_449
			.saturating_add(Weight::from_ref_time(1_034_895 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
}
