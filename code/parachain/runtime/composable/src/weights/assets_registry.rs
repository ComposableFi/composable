
//! Autogenerated weights for `assets_registry`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-01, STEPS: `50`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `d10f4923b852`, CPU: `Intel(R) Xeon(R) CPU @ 3.10GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("composable-dev"), DB CACHE: 1024

// Executed Command:
// /nix/store/jif3kmz9kgiwz8hg8nzb9d2kiga1rnga-composable/bin/composable
// benchmark
// pallet
// --chain=composable-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=*
// --extrinsic=*
// --steps=50
// --repeat=10
// --output=code/parachain/runtime/composable/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `assets_registry`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> assets_registry::WeightInfo for WeightInfo<T> {
	/// Storage: AssetsRegistry ExistentialDeposit (r:1 w:1)
	/// Proof: AssetsRegistry ExistentialDeposit (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AssetsRegistry ForeignToLocal (r:1 w:1)
	/// Proof: AssetsRegistry ForeignToLocal (max_values: None, max_size: Some(2081), added: 4556, mode: MaxEncodedLen)
	/// Storage: AssetsRegistry LocalToForeign (r:1 w:1)
	/// Proof: AssetsRegistry LocalToForeign (max_values: None, max_size: Some(2081), added: 4556, mode: MaxEncodedLen)
	/// Storage: AssetsRegistry AssetName (r:0 w:1)
	/// Proof: AssetsRegistry AssetName (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
	/// Storage: AssetsRegistry AssetRatio (r:0 w:1)
	/// Proof: AssetsRegistry AssetRatio (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AssetsRegistry AssetSymbol (r:0 w:1)
	/// Proof: AssetsRegistry AssetSymbol (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AssetsRegistry AssetDecimals (r:0 w:1)
	/// Proof: AssetsRegistry AssetDecimals (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	fn register_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `712`
		//  Estimated: `11635`
		// Minimum execution time: 59_534 nanoseconds.
		Weight::from_ref_time(61_550_000)
			.saturating_add(Weight::from_proof_size(11635))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: AssetsRegistry ExistentialDeposit (r:1 w:1)
	/// Proof: AssetsRegistry ExistentialDeposit (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AssetsRegistry AssetName (r:0 w:1)
	/// Proof: AssetsRegistry AssetName (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
	/// Storage: AssetsRegistry AssetRatio (r:0 w:1)
	/// Proof: AssetsRegistry AssetRatio (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AssetsRegistry AssetSymbol (r:0 w:1)
	/// Proof: AssetsRegistry AssetSymbol (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AssetsRegistry AssetDecimals (r:0 w:1)
	/// Proof: AssetsRegistry AssetDecimals (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	fn update_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `490`
		//  Estimated: `2523`
		// Minimum execution time: 38_045 nanoseconds.
		Weight::from_ref_time(40_257_000)
			.saturating_add(Weight::from_proof_size(2523))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: AssetsRegistry MinFeeAmounts (r:1 w:1)
	/// Proof: AssetsRegistry MinFeeAmounts (max_values: None, max_size: Some(2101), added: 4576, mode: MaxEncodedLen)
	fn set_min_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `279`
		//  Estimated: `4576`
		// Minimum execution time: 23_131 nanoseconds.
		Weight::from_ref_time(24_055_000)
			.saturating_add(Weight::from_proof_size(4576))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: AssetsRegistry ExistentialDeposit (r:1 w:0)
	/// Proof: AssetsRegistry ExistentialDeposit (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AssetsRegistry ForeignToLocal (r:1 w:2)
	/// Proof: AssetsRegistry ForeignToLocal (max_values: None, max_size: Some(2081), added: 4556, mode: MaxEncodedLen)
	/// Storage: AssetsRegistry LocalToForeign (r:1 w:1)
	/// Proof: AssetsRegistry LocalToForeign (max_values: None, max_size: Some(2081), added: 4556, mode: MaxEncodedLen)
	fn update_asset_location() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `839`
		//  Estimated: `11635`
		// Minimum execution time: 42_993 nanoseconds.
		Weight::from_ref_time(44_687_000)
			.saturating_add(Weight::from_proof_size(11635))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
