// Copyright (C) 2022 ComposableFi.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ibc.lightclients.beefy.v1;

import "google/protobuf/timestamp.proto";

enum RelayChain {
  POLKADOT = 0;
  KUSAMA = 1;
  ROCOCO = 2;
}

// ClientState from Beefy tracks the current validator set, latest height,
// and a possible frozen height.
message ClientState {
  // Latest mmr root hash
  bytes mmr_root_hash = 1;

  // block number for the latest mmr_root_hash
  uint32 latest_beefy_height = 2;

  // Block height when the client was frozen due to a misbehaviour
  optional uint64 frozen_height = 3;

  /// Known relay chains
  RelayChain relay_chain = 4;

  /// ParaId of associated parachain
  uint32 para_id = 5;

  /// latest parachain height
  uint32 latest_para_height = 6;

  // block number that the beefy protocol was activated on the relay chain.
  // This should be the first block in the merkle-mountain-range tree.
  uint32 beefy_activation_block = 7;

  // authorities for the current round
  BeefyAuthoritySet authority = 8;

  // authorities for the next round
  BeefyAuthoritySet next_authority_set = 9;
}

// Actual payload items
message PayloadItem {
  // 2-byte payload id
  bytes payload_id = 1;

  // arbitrary length payload data., eg mmr_root_hash
  bytes payload_data = 2;
}

// Commitment message signed by beefy validators
message Commitment {
  // array of payload items signed by Beefy validators
  repeated PayloadItem payload = 1;

  // block number for this commitment
  uint32 block_numer = 2;

  // validator set that signed this commitment
  uint64 validator_set_id = 3;
}

// Signature belonging to a single validator
message CommitmentSignature {
  // actual signature bytes
  bytes signature = 1;

  // authority leaf index in the merkle tree.
  uint32 authority_index = 2;
}

// signed commitment data
message SignedCommitment {
  // commitment data being signed
  Commitment commitment = 1;

  // gotten from rpc subscription
  repeated CommitmentSignature signatures = 2;
}
// data needed to update the client
message ClientStateUpdateProof {
  BeefyMmrLeaf mmr_leaf = 1;

  // leaf index for the mmr_leaf
  uint64 mmr_leaf_index = 2;

  // proof that this mmr_leaf index is valid.
  repeated bytes mmr_proof = 3;

  // signed commitment data
  SignedCommitment signed_commitment = 4;

  // generated using full authority list from runtime
  repeated bytes authorities_proof = 5;
}

// ConsensusState defines the consensus state from Tendermint.
message ConsensusState {
  // timestamp that corresponds to the block height in which the ConsensusState
  // was stored.
  google.protobuf.Timestamp timestamp = 1;

  // packet commitment root
  bytes root = 2;
}

// Header contains the neccessary data to prove finality about IBC commitments
message Header {
  // optional payload to update ConsensusState
  ConsensusStateUpdateProof consensus_state = 1;

  // optional payload to update the ClientState.
  ClientStateUpdateProof client_state = 2;
}

/// Parachain headers and their mmr proofs.
message ConsensusStateUpdateProof {
  // parachain headers needed for proofs and ConsensusState
  repeated ParachainHeader parachain_headers = 1;

  // mmr proofs for the headers gotten from rpc "mmr_generateProofs"
  repeated bytes mmr_proofs = 2;

  // size of the mmr for the given proof
  uint64 mmr_size = 3;
}

// data needed to prove parachain header inclusion in mmr.
message ParachainHeader {
  // scale-encoded parachain header bytes
  bytes parachain_header = 1;

  // see beefy spec
  BeefyMmrLeafPartial mmr_leaf_partial = 2;

  // proofs for our header in the parachain heads root
  repeated bytes parachain_heads_proof = 3;

  // leaf index for parachain heads proof
  uint32 heads_leaf_index = 4;

  // total number of para heads in parachain_heads_root
  uint32 heads_total_count = 5;

  // trie merkle proof of inclusion in header.extrinsic_root
  repeated bytes extrinsic_proof = 6;

  // the actual timestamp extrinsic
  bytes timestamp_extrinsic = 7;
}

// Partial data for MmrLeaf
message BeefyMmrLeafPartial {
  // leaf version
  uint32 version = 1;

  // parent block for this leaf
  uint32 parent_number = 2;

  // parent hash for this leaf
  bytes parent_hash = 3;

  // next authority set.
  BeefyAuthoritySet beefy_next_authority_set = 4;
}

// Beefy Authority Info
message BeefyAuthoritySet {
  // Id of the authority set, it should be strictly increasing
  uint64 id = 1;

  // size of the authority set
  uint32 len = 2;

  // merkle root of the sorted authority public keys.
  bytes authority_root = 3;
}

// BeefyMmrLeaf leaf data
message BeefyMmrLeaf {

  // leaf version
  uint32 version = 1;

  // parent block for this leaf
  uint32 parent_number = 2;

  // parent hash for this leaf
  bytes parent_hash = 3;

  // beefy next authority set.
  BeefyAuthoritySet beefy_next_authority_set = 4;

  // merkle root hash of parachain heads included in the leaf.
  bytes parachain_heads = 5;
}

// BEEFY misbehaviour type
message Misbehaviour {
  // todo:
}

// ClientMessage for ics11-BEEFY
message ClientMessage {
  oneof message {
    // Header variant for updating the client
    Header header = 1;
    Misbehaviour misbehaviour = 2;
  }
}