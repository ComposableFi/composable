#[allow(dead_code, unused_imports, non_camel_case_types)]
pub mod api {
	use super::api as root_mod;
	pub static PALLETS: [&str; 55usize] = [
		"System",
		"Babe",
		"Timestamp",
		"Indices",
		"Balances",
		"TransactionPayment",
		"Authorship",
		"Staking",
		"Offences",
		"Historical",
		"Session",
		"Grandpa",
		"ImOnline",
		"AuthorityDiscovery",
		"Democracy",
		"Council",
		"TechnicalCommittee",
		"PhragmenElection",
		"TechnicalMembership",
		"Treasury",
		"Claims",
		"Utility",
		"Identity",
		"Society",
		"Recovery",
		"Vesting",
		"Scheduler",
		"Proxy",
		"Multisig",
		"Preimage",
		"Bounties",
		"ChildBounties",
		"Tips",
		"ElectionProviderMultiPhase",
		"Gilt",
		"VoterList",
		"NominationPools",
		"ParachainsOrigin",
		"Configuration",
		"ParasShared",
		"ParaInclusion",
		"ParaInherent",
		"ParaScheduler",
		"Paras",
		"Initializer",
		"Dmp",
		"Ump",
		"Hrmp",
		"ParaSessionInfo",
		"ParasDisputes",
		"Registrar",
		"Slots",
		"Auctions",
		"Crowdloan",
		"XcmPallet",
	];
	#[derive(:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug)]
	pub enum Event {
		#[codec(index = 0)]
		System(system::Event),
		#[codec(index = 3)]
		Indices(indices::Event),
		#[codec(index = 4)]
		Balances(balances::Event),
		#[codec(index = 33)]
		TransactionPayment(transaction_payment::Event),
		#[codec(index = 6)]
		Staking(staking::Event),
		#[codec(index = 7)]
		Offences(offences::Event),
		#[codec(index = 8)]
		Session(session::Event),
		#[codec(index = 10)]
		Grandpa(grandpa::Event),
		#[codec(index = 11)]
		ImOnline(im_online::Event),
		#[codec(index = 13)]
		Democracy(democracy::Event),
		#[codec(index = 14)]
		Council(council::Event),
		#[codec(index = 15)]
		TechnicalCommittee(technical_committee::Event),
		#[codec(index = 16)]
		PhragmenElection(phragmen_election::Event),
		#[codec(index = 17)]
		TechnicalMembership(technical_membership::Event),
		#[codec(index = 18)]
		Treasury(treasury::Event),
		#[codec(index = 19)]
		Claims(claims::Event),
		#[codec(index = 24)]
		Utility(utility::Event),
		#[codec(index = 25)]
		Identity(identity::Event),
		#[codec(index = 26)]
		Society(society::Event),
		#[codec(index = 27)]
		Recovery(recovery::Event),
		#[codec(index = 28)]
		Vesting(vesting::Event),
		#[codec(index = 29)]
		Scheduler(scheduler::Event),
		#[codec(index = 30)]
		Proxy(proxy::Event),
		#[codec(index = 31)]
		Multisig(multisig::Event),
		#[codec(index = 32)]
		Preimage(preimage::Event),
		#[codec(index = 35)]
		Bounties(bounties::Event),
		#[codec(index = 40)]
		ChildBounties(child_bounties::Event),
		#[codec(index = 36)]
		Tips(tips::Event),
		#[codec(index = 37)]
		ElectionProviderMultiPhase(election_provider_multi_phase::Event),
		#[codec(index = 38)]
		Gilt(gilt::Event),
		#[codec(index = 39)]
		VoterList(voter_list::Event),
		#[codec(index = 41)]
		NominationPools(nomination_pools::Event),
		#[codec(index = 53)]
		ParaInclusion(para_inclusion::Event),
		#[codec(index = 56)]
		Paras(paras::Event),
		#[codec(index = 59)]
		Ump(ump::Event),
		#[codec(index = 60)]
		Hrmp(hrmp::Event),
		#[codec(index = 62)]
		ParasDisputes(paras_disputes::Event),
		#[codec(index = 70)]
		Registrar(registrar::Event),
		#[codec(index = 71)]
		Slots(slots::Event),
		#[codec(index = 72)]
		Auctions(auctions::Event),
		#[codec(index = 73)]
		Crowdloan(crowdloan::Event),
		#[codec(index = 99)]
		XcmPallet(xcm_pallet::Event),
	}
	pub mod system {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct FillBlock {
				pub ratio: runtime_types::sp_arithmetic::per_things::Perbill,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Remark {
				pub remark: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetHeapPages {
				pub pages: ::core::primitive::u64,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetCode {
				pub code: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetCodeWithoutChecks {
				pub code: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetStorage {
				pub items: ::std::vec::Vec<(
					::std::vec::Vec<::core::primitive::u8>,
					::std::vec::Vec<::core::primitive::u8>,
				)>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct KillStorage {
				pub keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct KillPrefix {
				pub prefix: ::std::vec::Vec<::core::primitive::u8>,
				pub subkeys: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RemarkWithEvent {
				pub remark: ::std::vec::Vec<::core::primitive::u8>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "A dispatch that will fill the block weight up to the given ratio."]
				pub fn fill_block(
					&self,
					ratio: runtime_types::sp_arithmetic::per_things::Perbill,
				) -> ::subxt::tx::StaticTxPayload<FillBlock> {
					::subxt::tx::StaticTxPayload::new(
						"System",
						"fill_block",
						FillBlock { ratio },
						[
							48u8, 18u8, 205u8, 90u8, 222u8, 4u8, 20u8, 251u8, 173u8, 76u8, 167u8,
							4u8, 83u8, 203u8, 160u8, 89u8, 132u8, 218u8, 191u8, 145u8, 130u8,
							245u8, 177u8, 201u8, 169u8, 129u8, 173u8, 105u8, 88u8, 45u8, 136u8,
							191u8,
						],
					)
				}
				#[doc = "Make some on-chain remark."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(1)`"]
				#[doc = "# </weight>"]
				pub fn remark(
					&self,
					remark: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<Remark> {
					::subxt::tx::StaticTxPayload::new(
						"System",
						"remark",
						Remark { remark },
						[
							101u8, 80u8, 195u8, 226u8, 224u8, 247u8, 60u8, 128u8, 3u8, 101u8, 51u8,
							147u8, 96u8, 126u8, 76u8, 230u8, 194u8, 227u8, 191u8, 73u8, 160u8,
							146u8, 87u8, 147u8, 243u8, 28u8, 228u8, 116u8, 224u8, 181u8, 129u8,
							160u8,
						],
					)
				}
				#[doc = "Set the number of pages in the WebAssembly environment's heap."]
				pub fn set_heap_pages(
					&self,
					pages: ::core::primitive::u64,
				) -> ::subxt::tx::StaticTxPayload<SetHeapPages> {
					::subxt::tx::StaticTxPayload::new(
						"System",
						"set_heap_pages",
						SetHeapPages { pages },
						[
							43u8, 103u8, 128u8, 49u8, 156u8, 136u8, 11u8, 204u8, 80u8, 6u8, 244u8,
							86u8, 171u8, 44u8, 140u8, 225u8, 142u8, 198u8, 43u8, 87u8, 26u8, 45u8,
							125u8, 222u8, 165u8, 254u8, 172u8, 158u8, 39u8, 178u8, 86u8, 87u8,
						],
					)
				}
				#[doc = "Set the new runtime code."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"]
				#[doc = "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is"]
				#[doc = "  expensive)."]
				#[doc = "- 1 storage write (codec `O(C)`)."]
				#[doc = "- 1 digest item."]
				#[doc = "- 1 event."]
				#[doc = "The weight of this function is dependent on the runtime, but generally this is very"]
				#[doc = "expensive. We will treat this as a full block."]
				#[doc = "# </weight>"]
				pub fn set_code(
					&self,
					code: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<SetCode> {
					::subxt::tx::StaticTxPayload::new(
						"System",
						"set_code",
						SetCode { code },
						[
							27u8, 104u8, 244u8, 205u8, 188u8, 254u8, 121u8, 13u8, 106u8, 120u8,
							244u8, 108u8, 97u8, 84u8, 100u8, 68u8, 26u8, 69u8, 93u8, 128u8, 107u8,
							4u8, 3u8, 142u8, 13u8, 134u8, 196u8, 62u8, 113u8, 181u8, 14u8, 40u8,
						],
					)
				}
				#[doc = "Set the new runtime code without doing any checks of the given `code`."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(C)` where `C` length of `code`"]
				#[doc = "- 1 storage write (codec `O(C)`)."]
				#[doc = "- 1 digest item."]
				#[doc = "- 1 event."]
				#[doc = "The weight of this function is dependent on the runtime. We will treat this as a full"]
				#[doc = "block. # </weight>"]
				pub fn set_code_without_checks(
					&self,
					code: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<SetCodeWithoutChecks> {
					::subxt::tx::StaticTxPayload::new(
						"System",
						"set_code_without_checks",
						SetCodeWithoutChecks { code },
						[
							102u8, 160u8, 125u8, 235u8, 30u8, 23u8, 45u8, 239u8, 112u8, 148u8,
							159u8, 158u8, 42u8, 93u8, 206u8, 94u8, 80u8, 250u8, 66u8, 195u8, 60u8,
							40u8, 142u8, 169u8, 183u8, 80u8, 80u8, 96u8, 3u8, 231u8, 99u8, 216u8,
						],
					)
				}
				#[doc = "Set some items of storage."]
				pub fn set_storage(
					&self,
					items: ::std::vec::Vec<(
						::std::vec::Vec<::core::primitive::u8>,
						::std::vec::Vec<::core::primitive::u8>,
					)>,
				) -> ::subxt::tx::StaticTxPayload<SetStorage> {
					::subxt::tx::StaticTxPayload::new(
						"System",
						"set_storage",
						SetStorage { items },
						[
							74u8, 43u8, 106u8, 255u8, 50u8, 151u8, 192u8, 155u8, 14u8, 90u8, 19u8,
							45u8, 165u8, 16u8, 235u8, 242u8, 21u8, 131u8, 33u8, 172u8, 119u8, 78u8,
							140u8, 10u8, 107u8, 202u8, 122u8, 235u8, 181u8, 191u8, 22u8, 116u8,
						],
					)
				}
				#[doc = "Kill some items from storage."]
				pub fn kill_storage(
					&self,
					keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
				) -> ::subxt::tx::StaticTxPayload<KillStorage> {
					::subxt::tx::StaticTxPayload::new(
						"System",
						"kill_storage",
						KillStorage { keys },
						[
							174u8, 174u8, 13u8, 174u8, 75u8, 138u8, 128u8, 235u8, 222u8, 216u8,
							85u8, 18u8, 198u8, 1u8, 138u8, 70u8, 19u8, 108u8, 209u8, 41u8, 228u8,
							67u8, 130u8, 230u8, 160u8, 207u8, 11u8, 180u8, 139u8, 242u8, 41u8,
							15u8,
						],
					)
				}
				#[doc = "Kill all storage items with a key that starts with the given prefix."]
				#[doc = ""]
				#[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
				#[doc = "the prefix we are removing to accurately calculate the weight of this function."]
				pub fn kill_prefix(
					&self,
					prefix: ::std::vec::Vec<::core::primitive::u8>,
					subkeys: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<KillPrefix> {
					::subxt::tx::StaticTxPayload::new(
						"System",
						"kill_prefix",
						KillPrefix { prefix, subkeys },
						[
							203u8, 116u8, 217u8, 42u8, 154u8, 215u8, 77u8, 217u8, 13u8, 22u8,
							193u8, 2u8, 128u8, 115u8, 179u8, 115u8, 187u8, 218u8, 129u8, 34u8,
							80u8, 4u8, 173u8, 120u8, 92u8, 35u8, 237u8, 112u8, 201u8, 207u8, 200u8,
							48u8,
						],
					)
				}
				#[doc = "Make some on-chain remark and emit event."]
				pub fn remark_with_event(
					&self,
					remark: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<RemarkWithEvent> {
					::subxt::tx::StaticTxPayload::new(
						"System",
						"remark_with_event",
						RemarkWithEvent { remark },
						[
							123u8, 225u8, 180u8, 179u8, 144u8, 74u8, 27u8, 85u8, 101u8, 75u8,
							134u8, 44u8, 181u8, 25u8, 183u8, 158u8, 14u8, 213u8, 56u8, 225u8,
							136u8, 88u8, 26u8, 114u8, 178u8, 43u8, 176u8, 43u8, 240u8, 84u8, 116u8,
							46u8,
						],
					)
				}
			}
		}
		#[doc = "Event for the System pallet."]
		pub type Event = runtime_types::frame_system::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An extrinsic completed successfully."]
			pub struct ExtrinsicSuccess {
				pub dispatch_info: runtime_types::frame_support::weights::DispatchInfo,
			}
			impl ::subxt::events::StaticEvent for ExtrinsicSuccess {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "ExtrinsicSuccess";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An extrinsic failed."]
			pub struct ExtrinsicFailed {
				pub dispatch_error: runtime_types::sp_runtime::DispatchError,
				pub dispatch_info: runtime_types::frame_support::weights::DispatchInfo,
			}
			impl ::subxt::events::StaticEvent for ExtrinsicFailed {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "ExtrinsicFailed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "`:code` was updated."]
			pub struct CodeUpdated;
			impl ::subxt::events::StaticEvent for CodeUpdated {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "CodeUpdated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A new account was created."]
			pub struct NewAccount {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for NewAccount {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "NewAccount";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An account was reaped."]
			pub struct KilledAccount {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for KilledAccount {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "KilledAccount";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "On on-chain remark happened."]
			pub struct Remarked {
				pub sender: ::subxt::ext::sp_core::crypto::AccountId32,
				pub hash: ::subxt::ext::sp_core::H256,
			}
			impl ::subxt::events::StaticEvent for Remarked {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "Remarked";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The full account information for a particular account ID."]
				pub fn account(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::frame_system::AccountInfo<
							::core::primitive::u32,
							runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"Account",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Blake2_128Concat,
						)],
						[
							176u8, 187u8, 21u8, 220u8, 159u8, 204u8, 127u8, 14u8, 21u8, 69u8, 77u8,
							114u8, 230u8, 141u8, 107u8, 79u8, 23u8, 16u8, 174u8, 243u8, 252u8,
							42u8, 65u8, 120u8, 229u8, 38u8, 210u8, 255u8, 22u8, 40u8, 109u8, 223u8,
						],
					)
				}
				#[doc = " The full account information for a particular account ID."]
				pub fn account_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::frame_system::AccountInfo<
							::core::primitive::u32,
							runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"Account",
						Vec::new(),
						[
							176u8, 187u8, 21u8, 220u8, 159u8, 204u8, 127u8, 14u8, 21u8, 69u8, 77u8,
							114u8, 230u8, 141u8, 107u8, 79u8, 23u8, 16u8, 174u8, 243u8, 252u8,
							42u8, 65u8, 120u8, 229u8, 38u8, 210u8, 255u8, 22u8, 40u8, 109u8, 223u8,
						],
					)
				}
				#[doc = " Total extrinsics count for the current block."]
				pub fn extrinsic_count(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"ExtrinsicCount",
						vec![],
						[
							223u8, 60u8, 201u8, 120u8, 36u8, 44u8, 180u8, 210u8, 242u8, 53u8,
							222u8, 154u8, 123u8, 176u8, 249u8, 8u8, 225u8, 28u8, 232u8, 4u8, 136u8,
							41u8, 151u8, 82u8, 189u8, 149u8, 49u8, 166u8, 139u8, 9u8, 163u8, 231u8,
						],
					)
				}
				#[doc = " The current weight for the block."]
				pub fn block_weight(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::frame_support::weights::PerDispatchClass<
							::core::primitive::u64,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"BlockWeight",
						vec![],
						[
							91u8, 211u8, 177u8, 36u8, 147u8, 249u8, 55u8, 164u8, 48u8, 49u8, 55u8,
							11u8, 121u8, 193u8, 103u8, 69u8, 38u8, 142u8, 148u8, 36u8, 137u8, 41u8,
							115u8, 195u8, 31u8, 174u8, 163u8, 125u8, 69u8, 5u8, 94u8, 79u8,
						],
					)
				}
				#[doc = " Total length (in bytes) for all extrinsics put together, for the current block."]
				pub fn all_extrinsics_len(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"AllExtrinsicsLen",
						vec![],
						[
							202u8, 145u8, 209u8, 225u8, 40u8, 220u8, 174u8, 74u8, 93u8, 164u8,
							254u8, 248u8, 254u8, 192u8, 32u8, 117u8, 96u8, 149u8, 53u8, 145u8,
							219u8, 64u8, 234u8, 18u8, 217u8, 200u8, 203u8, 141u8, 145u8, 28u8,
							134u8, 60u8,
						],
					)
				}
				#[doc = " Map of block numbers to block hashes."]
				pub fn block_hash(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::H256>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"BlockHash",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							50u8, 112u8, 176u8, 239u8, 175u8, 18u8, 205u8, 20u8, 241u8, 195u8,
							21u8, 228u8, 186u8, 57u8, 200u8, 25u8, 38u8, 44u8, 106u8, 20u8, 168u8,
							80u8, 76u8, 235u8, 12u8, 51u8, 137u8, 149u8, 200u8, 4u8, 220u8, 237u8,
						],
					)
				}
				#[doc = " Map of block numbers to block hashes."]
				pub fn block_hash_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::H256>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"BlockHash",
						Vec::new(),
						[
							50u8, 112u8, 176u8, 239u8, 175u8, 18u8, 205u8, 20u8, 241u8, 195u8,
							21u8, 228u8, 186u8, 57u8, 200u8, 25u8, 38u8, 44u8, 106u8, 20u8, 168u8,
							80u8, 76u8, 235u8, 12u8, 51u8, 137u8, 149u8, 200u8, 4u8, 220u8, 237u8,
						],
					)
				}
				#[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
				pub fn extrinsic_data(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"ExtrinsicData",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							210u8, 224u8, 211u8, 186u8, 118u8, 210u8, 185u8, 194u8, 238u8, 211u8,
							254u8, 73u8, 67u8, 184u8, 31u8, 229u8, 168u8, 125u8, 98u8, 23u8, 241u8,
							59u8, 49u8, 86u8, 126u8, 9u8, 114u8, 163u8, 160u8, 62u8, 50u8, 67u8,
						],
					)
				}
				#[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
				pub fn extrinsic_data_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"ExtrinsicData",
						Vec::new(),
						[
							210u8, 224u8, 211u8, 186u8, 118u8, 210u8, 185u8, 194u8, 238u8, 211u8,
							254u8, 73u8, 67u8, 184u8, 31u8, 229u8, 168u8, 125u8, 98u8, 23u8, 241u8,
							59u8, 49u8, 86u8, 126u8, 9u8, 114u8, 163u8, 160u8, 62u8, 50u8, 67u8,
						],
					)
				}
				#[doc = " The current block number being processed. Set by `execute_block`."]
				pub fn number(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"Number",
						vec![],
						[
							228u8, 96u8, 102u8, 190u8, 252u8, 130u8, 239u8, 172u8, 126u8, 235u8,
							246u8, 139u8, 208u8, 15u8, 88u8, 245u8, 141u8, 232u8, 43u8, 204u8,
							36u8, 87u8, 211u8, 141u8, 187u8, 68u8, 236u8, 70u8, 193u8, 235u8,
							164u8, 191u8,
						],
					)
				}
				#[doc = " Hash of the previous block."]
				pub fn parent_hash(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::H256>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"ParentHash",
						vec![],
						[
							232u8, 206u8, 177u8, 119u8, 38u8, 57u8, 233u8, 50u8, 225u8, 49u8,
							169u8, 176u8, 210u8, 51u8, 231u8, 176u8, 234u8, 186u8, 188u8, 112u8,
							15u8, 152u8, 195u8, 232u8, 201u8, 97u8, 208u8, 249u8, 9u8, 163u8, 69u8,
							36u8,
						],
					)
				}
				#[doc = " Digest of the current block, also part of the block header."]
				pub fn digest(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::generic::digest::Digest,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"Digest",
						vec![],
						[
							83u8, 141u8, 200u8, 132u8, 182u8, 55u8, 197u8, 122u8, 13u8, 159u8,
							31u8, 42u8, 60u8, 191u8, 89u8, 221u8, 242u8, 47u8, 199u8, 213u8, 48u8,
							216u8, 131u8, 168u8, 245u8, 82u8, 56u8, 190u8, 62u8, 69u8, 96u8, 37u8,
						],
					)
				}
				#[doc = " Events deposited for the current block."]
				#[doc = ""]
				#[doc = " NOTE: The item is unbound and should therefore never be read on chain."]
				#[doc = " It could otherwise inflate the PoV size of a block."]
				#[doc = ""]
				#[doc = " Events have a large in-memory size. Box the events to not go out-of-memory"]
				#[doc = " just in case someone still reads them from within the runtime."]
				pub fn events(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							runtime_types::frame_system::EventRecord<
								runtime_types::kusama_runtime::Event,
								::subxt::ext::sp_core::H256,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"Events",
						vec![],
						[
							191u8, 197u8, 130u8, 144u8, 100u8, 207u8, 58u8, 167u8, 205u8, 85u8,
							122u8, 134u8, 180u8, 54u8, 17u8, 122u8, 31u8, 70u8, 72u8, 184u8, 242u8,
							94u8, 79u8, 199u8, 69u8, 212u8, 179u8, 55u8, 188u8, 117u8, 84u8, 23u8,
						],
					)
				}
				#[doc = " The number of events in the `Events<T>` list."]
				pub fn event_count(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"EventCount",
						vec![],
						[
							236u8, 93u8, 90u8, 177u8, 250u8, 211u8, 138u8, 187u8, 26u8, 208u8,
							203u8, 113u8, 221u8, 233u8, 227u8, 9u8, 249u8, 25u8, 202u8, 185u8,
							161u8, 144u8, 167u8, 104u8, 127u8, 187u8, 38u8, 18u8, 52u8, 61u8, 66u8,
							112u8,
						],
					)
				}
				#[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
				#[doc = " of events in the `<Events<T>>` list."]
				#[doc = ""]
				#[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
				#[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
				#[doc = " in case of changes fetch the list of events of interest."]
				#[doc = ""]
				#[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
				#[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
				#[doc = " no notification will be triggered thus the event might be lost."]
				pub fn event_topics(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::H256>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"EventTopics",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Blake2_128Concat,
						)],
						[
							205u8, 90u8, 142u8, 190u8, 176u8, 37u8, 94u8, 82u8, 98u8, 1u8, 129u8,
							63u8, 246u8, 101u8, 130u8, 58u8, 216u8, 16u8, 139u8, 196u8, 154u8,
							111u8, 110u8, 178u8, 24u8, 44u8, 183u8, 176u8, 232u8, 82u8, 223u8,
							38u8,
						],
					)
				}
				#[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
				#[doc = " of events in the `<Events<T>>` list."]
				#[doc = ""]
				#[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
				#[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
				#[doc = " in case of changes fetch the list of events of interest."]
				#[doc = ""]
				#[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
				#[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
				#[doc = " no notification will be triggered thus the event might be lost."]
				pub fn event_topics_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"EventTopics",
						Vec::new(),
						[
							205u8, 90u8, 142u8, 190u8, 176u8, 37u8, 94u8, 82u8, 98u8, 1u8, 129u8,
							63u8, 246u8, 101u8, 130u8, 58u8, 216u8, 16u8, 139u8, 196u8, 154u8,
							111u8, 110u8, 178u8, 24u8, 44u8, 183u8, 176u8, 232u8, 82u8, 223u8,
							38u8,
						],
					)
				}
				#[doc = " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]
				pub fn last_runtime_upgrade(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::frame_system::LastRuntimeUpgradeInfo,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"LastRuntimeUpgrade",
						vec![],
						[
							52u8, 37u8, 117u8, 111u8, 57u8, 130u8, 196u8, 14u8, 99u8, 77u8, 91u8,
							126u8, 178u8, 249u8, 78u8, 34u8, 9u8, 194u8, 92u8, 105u8, 113u8, 81u8,
							185u8, 127u8, 245u8, 184u8, 60u8, 29u8, 234u8, 182u8, 96u8, 196u8,
						],
					)
				}
				#[doc = " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]
				pub fn upgraded_to_u32_ref_count(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::bool>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"UpgradedToU32RefCount",
						vec![],
						[
							171u8, 88u8, 244u8, 92u8, 122u8, 67u8, 27u8, 18u8, 59u8, 175u8, 175u8,
							178u8, 20u8, 150u8, 213u8, 59u8, 222u8, 141u8, 32u8, 107u8, 3u8, 114u8,
							83u8, 250u8, 180u8, 233u8, 152u8, 54u8, 187u8, 99u8, 131u8, 204u8,
						],
					)
				}
				#[doc = " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False"]
				#[doc = " (default) if not."]
				pub fn upgraded_to_triple_ref_count(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::bool>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"UpgradedToTripleRefCount",
						vec![],
						[
							90u8, 33u8, 56u8, 86u8, 90u8, 101u8, 89u8, 133u8, 203u8, 56u8, 201u8,
							210u8, 244u8, 232u8, 150u8, 18u8, 51u8, 105u8, 14u8, 230u8, 103u8,
							155u8, 246u8, 99u8, 53u8, 207u8, 225u8, 128u8, 186u8, 76u8, 40u8,
							185u8,
						],
					)
				}
				#[doc = " The execution phase of the block."]
				pub fn execution_phase(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::frame_system::Phase>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"System",
						"ExecutionPhase",
						vec![],
						[
							230u8, 183u8, 221u8, 135u8, 226u8, 223u8, 55u8, 104u8, 138u8, 224u8,
							103u8, 156u8, 222u8, 99u8, 203u8, 199u8, 164u8, 168u8, 193u8, 133u8,
							201u8, 155u8, 63u8, 95u8, 17u8, 206u8, 165u8, 123u8, 161u8, 33u8,
							172u8, 93u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Block & extrinsics weights: base values and limits."]
				pub fn block_weights(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::frame_system::limits::BlockWeights,
					>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"System",
						"BlockWeights",
						[
							153u8, 164u8, 86u8, 79u8, 97u8, 114u8, 248u8, 181u8, 179u8, 186u8,
							214u8, 124u8, 215u8, 96u8, 116u8, 109u8, 215u8, 182u8, 61u8, 10u8,
							77u8, 74u8, 29u8, 125u8, 131u8, 111u8, 249u8, 208u8, 233u8, 170u8,
							11u8, 14u8,
						],
					)
				}
				#[doc = " The maximum length of a block (in bytes)."]
				pub fn block_length(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::frame_system::limits::BlockLength,
					>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"System",
						"BlockLength",
						[
							116u8, 184u8, 225u8, 228u8, 207u8, 203u8, 4u8, 220u8, 234u8, 198u8,
							150u8, 108u8, 205u8, 87u8, 194u8, 131u8, 229u8, 51u8, 140u8, 4u8, 47u8,
							12u8, 200u8, 144u8, 153u8, 62u8, 51u8, 39u8, 138u8, 205u8, 203u8,
							236u8,
						],
					)
				}
				#[doc = " Maximum number of block number to block hash mappings to keep (oldest pruned first)."]
				pub fn block_hash_count(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"System",
						"BlockHashCount",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The weight of runtime database operations the runtime can invoke."]
				pub fn db_weight(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::frame_support::weights::RuntimeDbWeight,
					>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"System",
						"DbWeight",
						[
							124u8, 162u8, 190u8, 149u8, 49u8, 177u8, 162u8, 231u8, 62u8, 167u8,
							199u8, 181u8, 43u8, 232u8, 185u8, 116u8, 195u8, 51u8, 233u8, 223u8,
							20u8, 129u8, 246u8, 13u8, 65u8, 180u8, 64u8, 9u8, 157u8, 59u8, 245u8,
							118u8,
						],
					)
				}
				#[doc = " Get the chain's current version."]
				pub fn version(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::sp_version::RuntimeVersion>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"System",
						"Version",
						[
							93u8, 98u8, 57u8, 243u8, 229u8, 8u8, 234u8, 231u8, 72u8, 230u8, 139u8,
							47u8, 63u8, 181u8, 17u8, 2u8, 220u8, 231u8, 104u8, 237u8, 185u8, 143u8,
							165u8, 253u8, 188u8, 76u8, 147u8, 12u8, 170u8, 26u8, 74u8, 200u8,
						],
					)
				}
				#[doc = " The designated SS85 prefix of this chain."]
				#[doc = ""]
				#[doc = " This replaces the \"ss58Format\" property declared in the chain spec. Reason is"]
				#[doc = " that the runtime should know about the prefix in order to make use of it as"]
				#[doc = " an identifier of the chain."]
				pub fn ss58_prefix(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u16>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"System",
						"SS58Prefix",
						[
							116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
							41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
							90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
						],
					)
				}
			}
		}
	}
	pub mod babe {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ReportEquivocation {
				pub equivocation_proof: ::std::boxed::Box<
					runtime_types::sp_consensus_slots::EquivocationProof<
						runtime_types::sp_runtime::generic::header::Header<
							::core::primitive::u32,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
						runtime_types::sp_consensus_babe::app::Public,
					>,
				>,
				pub key_owner_proof: runtime_types::sp_session::MembershipProof,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ReportEquivocationUnsigned {
				pub equivocation_proof: ::std::boxed::Box<
					runtime_types::sp_consensus_slots::EquivocationProof<
						runtime_types::sp_runtime::generic::header::Header<
							::core::primitive::u32,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
						runtime_types::sp_consensus_babe::app::Public,
					>,
				>,
				pub key_owner_proof: runtime_types::sp_session::MembershipProof,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct PlanConfigChange {
				pub config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Report authority equivocation/misbehavior. This method will verify"]
				#[doc = "the equivocation proof and validate the given key ownership proof"]
				#[doc = "against the extracted offender. If both are valid, the offence will"]
				#[doc = "be reported."]
				pub fn report_equivocation(
					&self,
					equivocation_proof: runtime_types::sp_consensus_slots::EquivocationProof<
						runtime_types::sp_runtime::generic::header::Header<
							::core::primitive::u32,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
						runtime_types::sp_consensus_babe::app::Public,
					>,
					key_owner_proof: runtime_types::sp_session::MembershipProof,
				) -> ::subxt::tx::StaticTxPayload<ReportEquivocation> {
					::subxt::tx::StaticTxPayload::new(
						"Babe",
						"report_equivocation",
						ReportEquivocation {
							equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
							key_owner_proof,
						},
						[
							177u8, 237u8, 107u8, 138u8, 237u8, 233u8, 30u8, 195u8, 112u8, 176u8,
							185u8, 113u8, 157u8, 221u8, 134u8, 151u8, 62u8, 151u8, 64u8, 164u8,
							254u8, 112u8, 2u8, 94u8, 175u8, 79u8, 160u8, 3u8, 72u8, 145u8, 244u8,
							137u8,
						],
					)
				}
				#[doc = "Report authority equivocation/misbehavior. This method will verify"]
				#[doc = "the equivocation proof and validate the given key ownership proof"]
				#[doc = "against the extracted offender. If both are valid, the offence will"]
				#[doc = "be reported."]
				#[doc = "This extrinsic must be called unsigned and it is expected that only"]
				#[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
				#[doc = "if the block author is defined it will be defined as the equivocation"]
				#[doc = "reporter."]
				pub fn report_equivocation_unsigned(
					&self,
					equivocation_proof: runtime_types::sp_consensus_slots::EquivocationProof<
						runtime_types::sp_runtime::generic::header::Header<
							::core::primitive::u32,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
						runtime_types::sp_consensus_babe::app::Public,
					>,
					key_owner_proof: runtime_types::sp_session::MembershipProof,
				) -> ::subxt::tx::StaticTxPayload<ReportEquivocationUnsigned> {
					::subxt::tx::StaticTxPayload::new(
						"Babe",
						"report_equivocation_unsigned",
						ReportEquivocationUnsigned {
							equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
							key_owner_proof,
						},
						[
							56u8, 103u8, 238u8, 118u8, 61u8, 192u8, 222u8, 87u8, 254u8, 24u8,
							138u8, 219u8, 210u8, 85u8, 201u8, 147u8, 128u8, 49u8, 199u8, 144u8,
							46u8, 158u8, 163u8, 31u8, 101u8, 224u8, 72u8, 98u8, 68u8, 120u8, 215u8,
							19u8,
						],
					)
				}
				#[doc = "Plan an epoch config change. The epoch config change is recorded and will be enacted on"]
				#[doc = "the next call to `enact_epoch_change`. The config will be activated one epoch after."]
				#[doc = "Multiple calls to this method will replace any existing planned config change that had"]
				#[doc = "not been enacted yet."]
				pub fn plan_config_change(
					&self,
					config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
				) -> ::subxt::tx::StaticTxPayload<PlanConfigChange> {
					::subxt::tx::StaticTxPayload::new(
						"Babe",
						"plan_config_change",
						PlanConfigChange { config },
						[
							229u8, 157u8, 41u8, 58u8, 56u8, 4u8, 52u8, 107u8, 104u8, 20u8, 42u8,
							110u8, 1u8, 17u8, 45u8, 196u8, 30u8, 135u8, 63u8, 46u8, 40u8, 137u8,
							209u8, 37u8, 24u8, 108u8, 251u8, 189u8, 77u8, 208u8, 74u8, 32u8,
						],
					)
				}
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Current epoch index."]
				pub fn epoch_index(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Babe",
						"EpochIndex",
						vec![],
						[
							51u8, 27u8, 91u8, 156u8, 118u8, 99u8, 46u8, 219u8, 190u8, 147u8, 205u8,
							23u8, 106u8, 169u8, 121u8, 218u8, 208u8, 235u8, 135u8, 127u8, 243u8,
							41u8, 55u8, 243u8, 235u8, 122u8, 57u8, 86u8, 37u8, 90u8, 208u8, 71u8,
						],
					)
				}
				#[doc = " Current epoch authorities."]
				pub fn authorities(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<(
							runtime_types::sp_consensus_babe::app::Public,
							::core::primitive::u64,
						)>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Babe",
						"Authorities",
						vec![],
						[
							61u8, 8u8, 133u8, 111u8, 169u8, 120u8, 0u8, 213u8, 31u8, 159u8, 204u8,
							212u8, 18u8, 205u8, 93u8, 84u8, 140u8, 108u8, 136u8, 209u8, 234u8,
							107u8, 145u8, 9u8, 204u8, 224u8, 105u8, 9u8, 238u8, 241u8, 65u8, 30u8,
						],
					)
				}
				#[doc = " The slot at which the first epoch actually started. This is 0"]
				#[doc = " until the first block of the chain."]
				pub fn genesis_slot(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::sp_consensus_slots::Slot>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Babe",
						"GenesisSlot",
						vec![],
						[
							234u8, 127u8, 243u8, 100u8, 124u8, 160u8, 66u8, 248u8, 48u8, 218u8,
							61u8, 52u8, 54u8, 142u8, 158u8, 77u8, 32u8, 63u8, 156u8, 39u8, 94u8,
							255u8, 192u8, 238u8, 170u8, 118u8, 58u8, 42u8, 199u8, 61u8, 199u8,
							77u8,
						],
					)
				}
				#[doc = " Current slot number."]
				pub fn current_slot(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::sp_consensus_slots::Slot>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Babe",
						"CurrentSlot",
						vec![],
						[
							139u8, 237u8, 185u8, 137u8, 251u8, 179u8, 69u8, 167u8, 133u8, 168u8,
							204u8, 64u8, 178u8, 123u8, 92u8, 250u8, 119u8, 190u8, 208u8, 178u8,
							208u8, 176u8, 124u8, 187u8, 74u8, 165u8, 33u8, 78u8, 161u8, 206u8, 8u8,
							108u8,
						],
					)
				}
				#[doc = " The epoch randomness for the *current* epoch."]
				#[doc = ""]
				#[doc = " # Security"]
				#[doc = ""]
				#[doc = " This MUST NOT be used for gambling, as it can be influenced by a"]
				#[doc = " malicious validator in the short term. It MAY be used in many"]
				#[doc = " cryptographic protocols, however, so long as one remembers that this"]
				#[doc = " (like everything else on-chain) it is public. For example, it can be"]
				#[doc = " used where a number is needed that cannot have been chosen by an"]
				#[doc = " adversary, for purposes such as public-coin zero-knowledge proofs."]
				pub fn randomness(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<[::core::primitive::u8; 32usize]>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Babe",
						"Randomness",
						vec![],
						[
							191u8, 197u8, 25u8, 164u8, 104u8, 248u8, 247u8, 193u8, 244u8, 60u8,
							181u8, 195u8, 248u8, 90u8, 41u8, 199u8, 82u8, 123u8, 72u8, 126u8, 18u8,
							17u8, 128u8, 215u8, 34u8, 251u8, 227u8, 70u8, 166u8, 10u8, 104u8,
							140u8,
						],
					)
				}
				#[doc = " Pending epoch configuration change that will be applied when the next epoch is enacted."]
				pub fn pending_epoch_config_change(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Babe",
						"PendingEpochConfigChange",
						vec![],
						[
							4u8, 201u8, 0u8, 204u8, 47u8, 246u8, 4u8, 185u8, 163u8, 242u8, 242u8,
							152u8, 29u8, 222u8, 71u8, 127u8, 49u8, 203u8, 206u8, 180u8, 244u8,
							50u8, 80u8, 49u8, 199u8, 97u8, 3u8, 170u8, 156u8, 139u8, 106u8, 113u8,
						],
					)
				}
				#[doc = " Next epoch randomness."]
				pub fn next_randomness(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<[::core::primitive::u8; 32usize]>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Babe",
						"NextRandomness",
						vec![],
						[
							185u8, 98u8, 45u8, 109u8, 253u8, 38u8, 238u8, 221u8, 240u8, 29u8, 38u8,
							107u8, 118u8, 117u8, 131u8, 115u8, 21u8, 255u8, 203u8, 81u8, 243u8,
							251u8, 91u8, 60u8, 163u8, 202u8, 125u8, 193u8, 173u8, 234u8, 166u8,
							92u8,
						],
					)
				}
				#[doc = " Next epoch authorities."]
				pub fn next_authorities(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<(
							runtime_types::sp_consensus_babe::app::Public,
							::core::primitive::u64,
						)>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Babe",
						"NextAuthorities",
						vec![],
						[
							201u8, 193u8, 164u8, 18u8, 155u8, 253u8, 124u8, 163u8, 143u8, 73u8,
							212u8, 20u8, 241u8, 108u8, 110u8, 5u8, 171u8, 66u8, 224u8, 208u8, 10u8,
							65u8, 148u8, 164u8, 1u8, 12u8, 216u8, 83u8, 20u8, 226u8, 254u8, 183u8,
						],
					)
				}
				#[doc = " Randomness under construction."]
				#[doc = ""]
				#[doc = " We make a trade-off between storage accesses and list length."]
				#[doc = " We store the under-construction randomness in segments of up to"]
				#[doc = " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`."]
				#[doc = ""]
				#[doc = " Once a segment reaches this length, we begin the next one."]
				#[doc = " We reset all segments and return to `0` at the beginning of every"]
				#[doc = " epoch."]
				pub fn segment_index(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Babe",
						"SegmentIndex",
						vec![],
						[
							128u8, 45u8, 87u8, 58u8, 174u8, 152u8, 241u8, 156u8, 56u8, 192u8, 19u8,
							45u8, 75u8, 160u8, 35u8, 253u8, 145u8, 11u8, 178u8, 81u8, 114u8, 117u8,
							112u8, 107u8, 163u8, 208u8, 240u8, 151u8, 102u8, 176u8, 246u8, 5u8,
						],
					)
				}
				#[doc = " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."]
				pub fn under_construction(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							[::core::primitive::u8; 32usize],
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Babe",
						"UnderConstruction",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							180u8, 4u8, 149u8, 245u8, 231u8, 92u8, 99u8, 170u8, 254u8, 172u8,
							182u8, 3u8, 152u8, 156u8, 132u8, 196u8, 140u8, 97u8, 7u8, 84u8, 220u8,
							89u8, 195u8, 177u8, 235u8, 51u8, 98u8, 144u8, 73u8, 238u8, 59u8, 164u8,
						],
					)
				}
				#[doc = " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."]
				pub fn under_construction_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							[::core::primitive::u8; 32usize],
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Babe",
						"UnderConstruction",
						Vec::new(),
						[
							180u8, 4u8, 149u8, 245u8, 231u8, 92u8, 99u8, 170u8, 254u8, 172u8,
							182u8, 3u8, 152u8, 156u8, 132u8, 196u8, 140u8, 97u8, 7u8, 84u8, 220u8,
							89u8, 195u8, 177u8, 235u8, 51u8, 98u8, 144u8, 73u8, 238u8, 59u8, 164u8,
						],
					)
				}
				#[doc = " Temporary value (cleared at block finalization) which is `Some`"]
				#[doc = " if per-block initialization has already been called for current block."]
				pub fn initialized(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::core::option::Option<
							runtime_types::sp_consensus_babe::digests::PreDigest,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Babe",
						"Initialized",
						vec![],
						[
							142u8, 101u8, 250u8, 113u8, 93u8, 201u8, 157u8, 18u8, 166u8, 153u8,
							59u8, 197u8, 107u8, 247u8, 124u8, 110u8, 202u8, 67u8, 62u8, 57u8,
							186u8, 134u8, 49u8, 182u8, 149u8, 44u8, 255u8, 85u8, 87u8, 177u8,
							149u8, 121u8,
						],
					)
				}
				#[doc = " This field should always be populated during block processing unless"]
				#[doc = " secondary plain slots are enabled (which don't contain a VRF output)."]
				#[doc = ""]
				#[doc = " It is set in `on_finalize`, before it will contain the value from the last block."]
				pub fn author_vrf_randomness(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::core::option::Option<[::core::primitive::u8; 32usize]>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Babe",
						"AuthorVrfRandomness",
						vec![],
						[
							66u8, 235u8, 74u8, 252u8, 222u8, 135u8, 19u8, 28u8, 74u8, 191u8, 170u8,
							197u8, 207u8, 127u8, 77u8, 121u8, 138u8, 138u8, 110u8, 187u8, 34u8,
							14u8, 230u8, 43u8, 241u8, 241u8, 63u8, 163u8, 53u8, 179u8, 250u8,
							247u8,
						],
					)
				}
				#[doc = " The block numbers when the last and current epoch have started, respectively `N-1` and"]
				#[doc = " `N`."]
				#[doc = " NOTE: We track this is in order to annotate the block number when a given pool of"]
				#[doc = " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in"]
				#[doc = " slots, which may be skipped, the block numbers may not line up with the slot numbers."]
				pub fn epoch_start(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Babe",
						"EpochStart",
						vec![],
						[
							196u8, 39u8, 241u8, 20u8, 150u8, 180u8, 136u8, 4u8, 195u8, 205u8,
							218u8, 10u8, 130u8, 131u8, 168u8, 243u8, 207u8, 249u8, 58u8, 195u8,
							177u8, 119u8, 110u8, 243u8, 241u8, 3u8, 245u8, 56u8, 157u8, 5u8, 68u8,
							60u8,
						],
					)
				}
				#[doc = " How late the current block is compared to its parent."]
				#[doc = ""]
				#[doc = " This entry is populated as part of block execution and is cleaned up"]
				#[doc = " on block finalization. Querying this storage entry outside of block"]
				#[doc = " execution context should always yield zero."]
				pub fn lateness(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Babe",
						"Lateness",
						vec![],
						[
							229u8, 230u8, 224u8, 89u8, 49u8, 213u8, 198u8, 236u8, 144u8, 56u8,
							193u8, 234u8, 62u8, 242u8, 191u8, 199u8, 105u8, 131u8, 74u8, 63u8,
							75u8, 1u8, 210u8, 49u8, 3u8, 128u8, 18u8, 77u8, 219u8, 146u8, 60u8,
							88u8,
						],
					)
				}
				#[doc = " The configuration for the current epoch. Should never be `None` as it is initialized in"]
				#[doc = " genesis."]
				pub fn epoch_config(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_consensus_babe::BabeEpochConfiguration,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Babe",
						"EpochConfig",
						vec![],
						[
							41u8, 118u8, 141u8, 244u8, 72u8, 17u8, 125u8, 203u8, 43u8, 153u8,
							203u8, 119u8, 117u8, 223u8, 123u8, 133u8, 73u8, 235u8, 130u8, 21u8,
							160u8, 167u8, 16u8, 173u8, 177u8, 35u8, 117u8, 97u8, 149u8, 49u8,
							220u8, 24u8,
						],
					)
				}
				#[doc = " The configuration for the next epoch, `None` if the config will not change"]
				#[doc = " (you can fallback to `EpochConfig` instead in that case)."]
				pub fn next_epoch_config(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_consensus_babe::BabeEpochConfiguration,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Babe",
						"NextEpochConfig",
						vec![],
						[
							111u8, 182u8, 144u8, 180u8, 92u8, 146u8, 102u8, 249u8, 196u8, 229u8,
							226u8, 30u8, 25u8, 198u8, 133u8, 9u8, 136u8, 95u8, 11u8, 151u8, 139u8,
							156u8, 105u8, 228u8, 181u8, 12u8, 175u8, 148u8, 174u8, 33u8, 233u8,
							228u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The amount of time, in slots, that each epoch should last."]
				#[doc = " NOTE: Currently it is not possible to change the epoch duration after"]
				#[doc = " the chain has started. Attempting to do so will brick block production."]
				pub fn epoch_duration(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Babe",
						"EpochDuration",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
				#[doc = " The expected average block time at which BABE should be creating"]
				#[doc = " blocks. Since BABE is probabilistic it is not trivial to figure out"]
				#[doc = " what the expected average block time should be based on the slot"]
				#[doc = " duration and the security parameter `c` (where `1 - c` represents"]
				#[doc = " the probability of a slot being empty)."]
				pub fn expected_block_time(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Babe",
						"ExpectedBlockTime",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
				#[doc = " Max number of authorities allowed"]
				pub fn max_authorities(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Babe",
						"MaxAuthorities",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod timestamp {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Set {
				#[codec(compact)]
				pub now: ::core::primitive::u64,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Set the current time."]
				#[doc = ""]
				#[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
				#[doc = "phase, if this call hasn't been invoked by that time."]
				#[doc = ""]
				#[doc = "The timestamp should be greater than the previous one by the amount specified by"]
				#[doc = "`MinimumPeriod`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Inherent`."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
				#[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
				#[doc = "  `on_finalize`)"]
				#[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
				#[doc = "# </weight>"]
				pub fn set(
					&self,
					now: ::core::primitive::u64,
				) -> ::subxt::tx::StaticTxPayload<Set> {
					::subxt::tx::StaticTxPayload::new(
						"Timestamp",
						"set",
						Set { now },
						[
							6u8, 97u8, 172u8, 236u8, 118u8, 238u8, 228u8, 114u8, 15u8, 115u8,
							102u8, 85u8, 66u8, 151u8, 16u8, 33u8, 187u8, 17u8, 166u8, 88u8, 127u8,
							214u8, 182u8, 51u8, 168u8, 88u8, 43u8, 101u8, 185u8, 8u8, 1u8, 28u8,
						],
					)
				}
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Current time for the current block."]
				pub fn now(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Timestamp",
						"Now",
						vec![],
						[
							148u8, 53u8, 50u8, 54u8, 13u8, 161u8, 57u8, 150u8, 16u8, 83u8, 144u8,
							221u8, 59u8, 75u8, 158u8, 130u8, 39u8, 123u8, 106u8, 134u8, 202u8,
							185u8, 83u8, 85u8, 60u8, 41u8, 120u8, 96u8, 210u8, 34u8, 2u8, 250u8,
						],
					)
				}
				#[doc = " Did the timestamp get updated in this block?"]
				pub fn did_update(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::bool>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Timestamp",
						"DidUpdate",
						vec![],
						[
							70u8, 13u8, 92u8, 186u8, 80u8, 151u8, 167u8, 90u8, 158u8, 232u8, 175u8,
							13u8, 103u8, 135u8, 2u8, 78u8, 16u8, 6u8, 39u8, 158u8, 167u8, 85u8,
							27u8, 47u8, 122u8, 73u8, 127u8, 26u8, 35u8, 168u8, 72u8, 204u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The minimum period between blocks. Beware that this is different to the *expected*"]
				#[doc = " period that the block production apparatus provides. Your chosen consensus system will"]
				#[doc = " generally work with this to determine a sensible block time. e.g. For Aura, it will be"]
				#[doc = " double this period on default settings."]
				pub fn minimum_period(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Timestamp",
						"MinimumPeriod",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
			}
		}
	}
	pub mod indices {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct Claim {
				pub index: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Transfer {
				pub new: ::subxt::ext::sp_core::crypto::AccountId32,
				pub index: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct Free {
				pub index: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceTransfer {
				pub new: ::subxt::ext::sp_core::crypto::AccountId32,
				pub index: ::core::primitive::u32,
				pub freeze: ::core::primitive::bool,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct Freeze {
				pub index: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Assign an previously unassigned index."]
				#[doc = ""]
				#[doc = "Payment: `Deposit` is reserved from the sender account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `index`: the index to be claimed. This must not be in use."]
				#[doc = ""]
				#[doc = "Emits `IndexAssigned` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(1)`."]
				#[doc = "- One storage mutation (codec `O(1)`)."]
				#[doc = "- One reserve operation."]
				#[doc = "- One event."]
				#[doc = "-------------------"]
				#[doc = "- DB Weight: 1 Read/Write (Accounts)"]
				#[doc = "# </weight>"]
				pub fn claim(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<Claim> {
					::subxt::tx::StaticTxPayload::new(
						"Indices",
						"claim",
						Claim { index },
						[
							5u8, 24u8, 11u8, 173u8, 226u8, 170u8, 0u8, 30u8, 193u8, 102u8, 214u8,
							59u8, 252u8, 32u8, 221u8, 88u8, 196u8, 189u8, 244u8, 18u8, 233u8, 37u8,
							228u8, 248u8, 76u8, 175u8, 212u8, 233u8, 238u8, 203u8, 162u8, 68u8,
						],
					)
				}
				#[doc = "Assign an index already owned by the sender to another account. The balance reservation"]
				#[doc = "is effectively transferred to the new account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `index`: the index to be re-assigned. This must be owned by the sender."]
				#[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
				#[doc = ""]
				#[doc = "Emits `IndexAssigned` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(1)`."]
				#[doc = "- One storage mutation (codec `O(1)`)."]
				#[doc = "- One transfer operation."]
				#[doc = "- One event."]
				#[doc = "-------------------"]
				#[doc = "- DB Weight:"]
				#[doc = "   - Reads: Indices Accounts, System Account (recipient)"]
				#[doc = "   - Writes: Indices Accounts, System Account (recipient)"]
				#[doc = "# </weight>"]
				pub fn transfer(
					&self,
					new: ::subxt::ext::sp_core::crypto::AccountId32,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<Transfer> {
					::subxt::tx::StaticTxPayload::new(
						"Indices",
						"transfer",
						Transfer { new, index },
						[
							229u8, 48u8, 45u8, 2u8, 206u8, 24u8, 60u8, 43u8, 202u8, 99u8, 80u8,
							172u8, 62u8, 134u8, 224u8, 128u8, 107u8, 219u8, 57u8, 87u8, 144u8,
							220u8, 207u8, 79u8, 7u8, 89u8, 208u8, 75u8, 158u8, 75u8, 10u8, 113u8,
						],
					)
				}
				#[doc = "Free up an index owned by the sender."]
				#[doc = ""]
				#[doc = "Payment: Any previous deposit placed for the index is unreserved in the sender account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must own the index."]
				#[doc = ""]
				#[doc = "- `index`: the index to be freed. This must be owned by the sender."]
				#[doc = ""]
				#[doc = "Emits `IndexFreed` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(1)`."]
				#[doc = "- One storage mutation (codec `O(1)`)."]
				#[doc = "- One reserve operation."]
				#[doc = "- One event."]
				#[doc = "-------------------"]
				#[doc = "- DB Weight: 1 Read/Write (Accounts)"]
				#[doc = "# </weight>"]
				pub fn free(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<Free> {
					::subxt::tx::StaticTxPayload::new(
						"Indices",
						"free",
						Free { index },
						[
							133u8, 202u8, 225u8, 127u8, 69u8, 145u8, 43u8, 13u8, 160u8, 248u8,
							215u8, 243u8, 232u8, 166u8, 74u8, 203u8, 235u8, 138u8, 255u8, 27u8,
							163u8, 71u8, 254u8, 217u8, 6u8, 208u8, 202u8, 204u8, 238u8, 70u8,
							126u8, 252u8,
						],
					)
				}
				#[doc = "Force an index to an account. This doesn't require a deposit. If the index is already"]
				#[doc = "held, then any deposit is reimbursed to its current owner."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Root_."]
				#[doc = ""]
				#[doc = "- `index`: the index to be (re-)assigned."]
				#[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
				#[doc = "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred."]
				#[doc = ""]
				#[doc = "Emits `IndexAssigned` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(1)`."]
				#[doc = "- One storage mutation (codec `O(1)`)."]
				#[doc = "- Up to one reserve operation."]
				#[doc = "- One event."]
				#[doc = "-------------------"]
				#[doc = "- DB Weight:"]
				#[doc = "   - Reads: Indices Accounts, System Account (original owner)"]
				#[doc = "   - Writes: Indices Accounts, System Account (original owner)"]
				#[doc = "# </weight>"]
				pub fn force_transfer(
					&self,
					new: ::subxt::ext::sp_core::crypto::AccountId32,
					index: ::core::primitive::u32,
					freeze: ::core::primitive::bool,
				) -> ::subxt::tx::StaticTxPayload<ForceTransfer> {
					::subxt::tx::StaticTxPayload::new(
						"Indices",
						"force_transfer",
						ForceTransfer { new, index, freeze },
						[
							2u8, 134u8, 200u8, 233u8, 224u8, 80u8, 237u8, 130u8, 28u8, 159u8,
							130u8, 223u8, 124u8, 205u8, 248u8, 70u8, 246u8, 77u8, 73u8, 193u8,
							78u8, 85u8, 58u8, 29u8, 191u8, 217u8, 252u8, 178u8, 113u8, 255u8,
							151u8, 49u8,
						],
					)
				}
				#[doc = "Freeze an index so it will always point to the sender account. This consumes the"]
				#[doc = "deposit."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the signing account must have a"]
				#[doc = "non-frozen account `index`."]
				#[doc = ""]
				#[doc = "- `index`: the index to be frozen in place."]
				#[doc = ""]
				#[doc = "Emits `IndexFrozen` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(1)`."]
				#[doc = "- One storage mutation (codec `O(1)`)."]
				#[doc = "- Up to one slash operation."]
				#[doc = "- One event."]
				#[doc = "-------------------"]
				#[doc = "- DB Weight: 1 Read/Write (Accounts)"]
				#[doc = "# </weight>"]
				pub fn freeze(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<Freeze> {
					::subxt::tx::StaticTxPayload::new(
						"Indices",
						"freeze",
						Freeze { index },
						[
							121u8, 45u8, 118u8, 2u8, 72u8, 48u8, 38u8, 7u8, 234u8, 204u8, 68u8,
							20u8, 76u8, 251u8, 205u8, 246u8, 149u8, 31u8, 168u8, 186u8, 208u8,
							90u8, 40u8, 47u8, 100u8, 228u8, 188u8, 33u8, 79u8, 220u8, 105u8, 209u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_indices::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A account index was assigned."]
			pub struct IndexAssigned {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for IndexAssigned {
				const PALLET: &'static str = "Indices";
				const EVENT: &'static str = "IndexAssigned";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "A account index has been freed up (unassigned)."]
			pub struct IndexFreed {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for IndexFreed {
				const PALLET: &'static str = "Indices";
				const EVENT: &'static str = "IndexFreed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A account index has been frozen to its current account ID."]
			pub struct IndexFrozen {
				pub index: ::core::primitive::u32,
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for IndexFrozen {
				const PALLET: &'static str = "Indices";
				const EVENT: &'static str = "IndexFrozen";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The lookup from index to account."]
				pub fn accounts(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::subxt::ext::sp_core::crypto::AccountId32,
						::core::primitive::u128,
						::core::primitive::bool,
					)>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Indices",
						"Accounts",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Blake2_128Concat,
						)],
						[
							211u8, 169u8, 54u8, 254u8, 88u8, 57u8, 22u8, 223u8, 108u8, 27u8, 38u8,
							9u8, 202u8, 209u8, 111u8, 209u8, 144u8, 13u8, 211u8, 114u8, 239u8,
							127u8, 75u8, 166u8, 234u8, 222u8, 225u8, 35u8, 160u8, 163u8, 112u8,
							242u8,
						],
					)
				}
				#[doc = " The lookup from index to account."]
				pub fn accounts_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::subxt::ext::sp_core::crypto::AccountId32,
						::core::primitive::u128,
						::core::primitive::bool,
					)>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Indices",
						"Accounts",
						Vec::new(),
						[
							211u8, 169u8, 54u8, 254u8, 88u8, 57u8, 22u8, 223u8, 108u8, 27u8, 38u8,
							9u8, 202u8, 209u8, 111u8, 209u8, 144u8, 13u8, 211u8, 114u8, 239u8,
							127u8, 75u8, 166u8, 234u8, 222u8, 225u8, 35u8, 160u8, 163u8, 112u8,
							242u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The deposit needed for reserving an index."]
				pub fn deposit(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Indices",
						"Deposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
			}
		}
	}
	pub mod balances {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Transfer {
				pub dest: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetBalance {
				pub who: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
				#[codec(compact)]
				pub new_free: ::core::primitive::u128,
				#[codec(compact)]
				pub new_reserved: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceTransfer {
				pub source: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
				pub dest: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct TransferKeepAlive {
				pub dest: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct TransferAll {
				pub dest: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
				pub keep_alive: ::core::primitive::bool,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceUnreserve {
				pub who: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
				pub amount: ::core::primitive::u128,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Transfer some liquid free balance to another account."]
				#[doc = ""]
				#[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
				#[doc = "If the sender's account is below the existential deposit as a result"]
				#[doc = "of the transfer, the account will be reaped."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Dependent on arguments but not critical, given proper implementations for input config"]
				#[doc = "  types. See related functions below."]
				#[doc = "- It contains a limited number of reads and writes internally and no complex"]
				#[doc = "  computation."]
				#[doc = ""]
				#[doc = "Related functions:"]
				#[doc = ""]
				#[doc = "  - `ensure_can_withdraw` is always called internally but has a bounded complexity."]
				#[doc = "  - Transferring balances to accounts that did not exist before will cause"]
				#[doc = "    `T::OnNewAccount::on_new_account` to be called."]
				#[doc = "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`."]
				#[doc = "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check"]
				#[doc = "    that the transfer will not kill the origin account."]
				#[doc = "---------------------------------"]
				#[doc = "- Origin account is already in memory, so no DB operations for them."]
				#[doc = "# </weight>"]
				pub fn transfer(
					&self,
					dest: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
					value: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<Transfer> {
					::subxt::tx::StaticTxPayload::new(
						"Balances",
						"transfer",
						Transfer { dest, value },
						[
							111u8, 222u8, 32u8, 56u8, 171u8, 77u8, 252u8, 29u8, 194u8, 155u8,
							200u8, 192u8, 198u8, 81u8, 23u8, 115u8, 236u8, 91u8, 218u8, 114u8,
							107u8, 141u8, 138u8, 100u8, 237u8, 21u8, 58u8, 172u8, 3u8, 20u8, 216u8,
							38u8,
						],
					)
				}
				#[doc = "Set the balances of a given account."]
				#[doc = ""]
				#[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it will"]
				#[doc = "also alter the total issuance of the system (`TotalIssuance`) appropriately."]
				#[doc = "If the new free or reserved balance is below the existential deposit,"]
				#[doc = "it will reset the account nonce (`frame_system::AccountNonce`)."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call is `root`."]
				pub fn set_balance(
					&self,
					who: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
					new_free: ::core::primitive::u128,
					new_reserved: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<SetBalance> {
					::subxt::tx::StaticTxPayload::new(
						"Balances",
						"set_balance",
						SetBalance { who, new_free, new_reserved },
						[
							234u8, 215u8, 97u8, 98u8, 243u8, 199u8, 57u8, 76u8, 59u8, 161u8, 118u8,
							207u8, 34u8, 197u8, 198u8, 61u8, 231u8, 210u8, 169u8, 235u8, 150u8,
							137u8, 173u8, 49u8, 28u8, 77u8, 84u8, 149u8, 143u8, 210u8, 139u8,
							193u8,
						],
					)
				}
				#[doc = "Exactly as `transfer`, except the origin must be root and the source account may be"]
				#[doc = "specified."]
				#[doc = "# <weight>"]
				#[doc = "- Same as transfer, but additional read and write because the source account is not"]
				#[doc = "  assumed to be in the overlay."]
				#[doc = "# </weight>"]
				pub fn force_transfer(
					&self,
					source: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
					dest: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
					value: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<ForceTransfer> {
					::subxt::tx::StaticTxPayload::new(
						"Balances",
						"force_transfer",
						ForceTransfer { source, dest, value },
						[
							79u8, 174u8, 212u8, 108u8, 184u8, 33u8, 170u8, 29u8, 232u8, 254u8,
							195u8, 218u8, 221u8, 134u8, 57u8, 99u8, 6u8, 70u8, 181u8, 227u8, 56u8,
							239u8, 243u8, 158u8, 157u8, 245u8, 36u8, 162u8, 11u8, 237u8, 147u8,
							15u8,
						],
					)
				}
				#[doc = "Same as the [`transfer`] call, but with a check that the transfer will not kill the"]
				#[doc = "origin account."]
				#[doc = ""]
				#[doc = "99% of the time you want [`transfer`] instead."]
				#[doc = ""]
				#[doc = "[`transfer`]: struct.Pallet.html#method.transfer"]
				pub fn transfer_keep_alive(
					&self,
					dest: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
					value: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<TransferKeepAlive> {
					::subxt::tx::StaticTxPayload::new(
						"Balances",
						"transfer_keep_alive",
						TransferKeepAlive { dest, value },
						[
							112u8, 179u8, 75u8, 168u8, 193u8, 221u8, 9u8, 82u8, 190u8, 113u8,
							253u8, 13u8, 130u8, 134u8, 170u8, 216u8, 136u8, 111u8, 242u8, 220u8,
							202u8, 112u8, 47u8, 79u8, 73u8, 244u8, 226u8, 59u8, 240u8, 188u8,
							210u8, 208u8,
						],
					)
				}
				#[doc = "Transfer the entire transferable balance from the caller account."]
				#[doc = ""]
				#[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
				#[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
				#[doc = "transferred by this function. To ensure that this function results in a killed account,"]
				#[doc = "you might need to prepare the account by removing any reference counters, storage"]
				#[doc = "deposits, etc..."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be Signed."]
				#[doc = ""]
				#[doc = "- `dest`: The recipient of the transfer."]
				#[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
				#[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
				#[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
				#[doc = "  keep the sender account alive (true). # <weight>"]
				#[doc = "- O(1). Just like transfer, but reading the user's transferable balance first."]
				#[doc = "  #</weight>"]
				pub fn transfer_all(
					&self,
					dest: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
					keep_alive: ::core::primitive::bool,
				) -> ::subxt::tx::StaticTxPayload<TransferAll> {
					::subxt::tx::StaticTxPayload::new(
						"Balances",
						"transfer_all",
						TransferAll { dest, keep_alive },
						[
							46u8, 129u8, 29u8, 177u8, 221u8, 107u8, 245u8, 69u8, 238u8, 126u8,
							145u8, 26u8, 219u8, 208u8, 14u8, 80u8, 149u8, 1u8, 214u8, 63u8, 67u8,
							201u8, 144u8, 45u8, 129u8, 145u8, 174u8, 71u8, 238u8, 113u8, 208u8,
							34u8,
						],
					)
				}
				#[doc = "Unreserve some balance from a user by force."]
				#[doc = ""]
				#[doc = "Can only be called by ROOT."]
				pub fn force_unreserve(
					&self,
					who: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
					amount: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<ForceUnreserve> {
					::subxt::tx::StaticTxPayload::new(
						"Balances",
						"force_unreserve",
						ForceUnreserve { who, amount },
						[
							160u8, 146u8, 137u8, 76u8, 157u8, 187u8, 66u8, 148u8, 207u8, 76u8,
							32u8, 254u8, 82u8, 215u8, 35u8, 161u8, 213u8, 52u8, 32u8, 98u8, 102u8,
							106u8, 234u8, 123u8, 6u8, 175u8, 184u8, 188u8, 174u8, 106u8, 176u8,
							78u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_balances::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An account was created with some free balance."]
			pub struct Endowed {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
				pub free_balance: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Endowed {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Endowed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
			#[doc = "resulting in an outright loss."]
			pub struct DustLost {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for DustLost {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "DustLost";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Transfer succeeded."]
			pub struct Transfer {
				pub from: ::subxt::ext::sp_core::crypto::AccountId32,
				pub to: ::subxt::ext::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Transfer {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Transfer";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A balance was set by root."]
			pub struct BalanceSet {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub free: ::core::primitive::u128,
				pub reserved: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for BalanceSet {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "BalanceSet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Some balance was reserved (moved from free to reserved)."]
			pub struct Reserved {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Reserved {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Reserved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Some balance was unreserved (moved from reserved to free)."]
			pub struct Unreserved {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Unreserved {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Unreserved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Some balance was moved from the reserve of the first account to the second account."]
			#[doc = "Final argument indicates the destination balance type."]
			pub struct ReserveRepatriated {
				pub from: ::subxt::ext::sp_core::crypto::AccountId32,
				pub to: ::subxt::ext::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
				pub destination_status:
					runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
			}
			impl ::subxt::events::StaticEvent for ReserveRepatriated {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "ReserveRepatriated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Some amount was deposited (e.g. for transaction fees)."]
			pub struct Deposit {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Deposit {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Deposit";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
			pub struct Withdraw {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Withdraw {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Withdraw";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
			pub struct Slashed {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Slashed {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Slashed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The total units issued in the system."]
				pub fn total_issuance(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Balances",
						"TotalIssuance",
						vec![],
						[
							1u8, 206u8, 252u8, 237u8, 6u8, 30u8, 20u8, 232u8, 164u8, 115u8, 51u8,
							156u8, 156u8, 206u8, 241u8, 187u8, 44u8, 84u8, 25u8, 164u8, 235u8,
							20u8, 86u8, 242u8, 124u8, 23u8, 28u8, 140u8, 26u8, 73u8, 231u8, 51u8,
						],
					)
				}
				#[doc = " The Balances pallet example of storing the balance of an account."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " You can also store the balance of an account in the `System` pallet."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "   type AccountStore = System"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
				#[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
				#[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
				#[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
				pub fn account(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Balances",
						"Account",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Blake2_128Concat,
						)],
						[
							246u8, 154u8, 253u8, 71u8, 192u8, 192u8, 192u8, 236u8, 128u8, 80u8,
							40u8, 252u8, 201u8, 43u8, 3u8, 131u8, 19u8, 49u8, 141u8, 240u8, 172u8,
							217u8, 215u8, 109u8, 87u8, 135u8, 248u8, 57u8, 98u8, 185u8, 22u8, 4u8,
						],
					)
				}
				#[doc = " The Balances pallet example of storing the balance of an account."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " You can also store the balance of an account in the `System` pallet."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "   type AccountStore = System"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
				#[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
				#[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
				#[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
				pub fn account_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Balances",
						"Account",
						Vec::new(),
						[
							246u8, 154u8, 253u8, 71u8, 192u8, 192u8, 192u8, 236u8, 128u8, 80u8,
							40u8, 252u8, 201u8, 43u8, 3u8, 131u8, 19u8, 49u8, 141u8, 240u8, 172u8,
							217u8, 215u8, 109u8, 87u8, 135u8, 248u8, 57u8, 98u8, 185u8, 22u8, 4u8,
						],
					)
				}
				#[doc = " Any liquidity locks on some account balances."]
				#[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
				pub fn locks(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<
							runtime_types::pallet_balances::BalanceLock<::core::primitive::u128>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Balances",
						"Locks",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Blake2_128Concat,
						)],
						[
							216u8, 253u8, 87u8, 73u8, 24u8, 218u8, 35u8, 0u8, 244u8, 134u8, 195u8,
							58u8, 255u8, 64u8, 153u8, 212u8, 210u8, 232u8, 4u8, 122u8, 90u8, 212u8,
							136u8, 14u8, 127u8, 232u8, 8u8, 192u8, 40u8, 233u8, 18u8, 250u8,
						],
					)
				}
				#[doc = " Any liquidity locks on some account balances."]
				#[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
				pub fn locks_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<
							runtime_types::pallet_balances::BalanceLock<::core::primitive::u128>,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Balances",
						"Locks",
						Vec::new(),
						[
							216u8, 253u8, 87u8, 73u8, 24u8, 218u8, 35u8, 0u8, 244u8, 134u8, 195u8,
							58u8, 255u8, 64u8, 153u8, 212u8, 210u8, 232u8, 4u8, 122u8, 90u8, 212u8,
							136u8, 14u8, 127u8, 232u8, 8u8, 192u8, 40u8, 233u8, 18u8, 250u8,
						],
					)
				}
				#[doc = " Named reserves on some account balances."]
				pub fn reserves(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							runtime_types::pallet_balances::ReserveData<
								[::core::primitive::u8; 8usize],
								::core::primitive::u128,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Balances",
						"Reserves",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Blake2_128Concat,
						)],
						[
							17u8, 32u8, 191u8, 46u8, 76u8, 220u8, 101u8, 100u8, 42u8, 250u8, 128u8,
							167u8, 117u8, 44u8, 85u8, 96u8, 105u8, 216u8, 16u8, 147u8, 74u8, 55u8,
							183u8, 94u8, 160u8, 177u8, 26u8, 187u8, 71u8, 197u8, 187u8, 163u8,
						],
					)
				}
				#[doc = " Named reserves on some account balances."]
				pub fn reserves_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							runtime_types::pallet_balances::ReserveData<
								[::core::primitive::u8; 8usize],
								::core::primitive::u128,
							>,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Balances",
						"Reserves",
						Vec::new(),
						[
							17u8, 32u8, 191u8, 46u8, 76u8, 220u8, 101u8, 100u8, 42u8, 250u8, 128u8,
							167u8, 117u8, 44u8, 85u8, 96u8, 105u8, 216u8, 16u8, 147u8, 74u8, 55u8,
							183u8, 94u8, 160u8, 177u8, 26u8, 187u8, 71u8, 197u8, 187u8, 163u8,
						],
					)
				}
				#[doc = " Storage version of the pallet."]
				#[doc = ""]
				#[doc = " This is set to v2.0.0 for new networks."]
				pub fn storage_version(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::pallet_balances::Releases>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Balances",
						"StorageVersion",
						vec![],
						[
							135u8, 96u8, 28u8, 234u8, 124u8, 212u8, 56u8, 140u8, 40u8, 101u8,
							235u8, 128u8, 136u8, 221u8, 182u8, 81u8, 17u8, 9u8, 184u8, 228u8,
							174u8, 165u8, 200u8, 162u8, 214u8, 178u8, 227u8, 72u8, 34u8, 5u8,
							173u8, 96u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The minimum amount required to keep an account open."]
				pub fn existential_deposit(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Balances",
						"ExistentialDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The maximum number of locks that should exist on an account."]
				#[doc = " Not strictly enforced, but used for weight estimation."]
				pub fn max_locks(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Balances",
						"MaxLocks",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of named reserves that can exist on an account."]
				pub fn max_reserves(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Balances",
						"MaxReserves",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod transaction_payment {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_transaction_payment::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
			#[doc = "has been paid by `who`."]
			pub struct TransactionFeePaid {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub actual_fee: ::core::primitive::u128,
				pub tip: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for TransactionFeePaid {
				const PALLET: &'static str = "TransactionPayment";
				const EVENT: &'static str = "TransactionFeePaid";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				pub fn next_fee_multiplier(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_arithmetic::fixed_point::FixedU128,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"TransactionPayment",
						"NextFeeMultiplier",
						vec![],
						[
							210u8, 0u8, 206u8, 165u8, 183u8, 10u8, 206u8, 52u8, 14u8, 90u8, 218u8,
							197u8, 189u8, 125u8, 113u8, 216u8, 52u8, 161u8, 45u8, 24u8, 245u8,
							237u8, 121u8, 41u8, 106u8, 29u8, 45u8, 129u8, 250u8, 203u8, 206u8,
							180u8,
						],
					)
				}
				pub fn storage_version(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_transaction_payment::Releases,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"TransactionPayment",
						"StorageVersion",
						vec![],
						[
							219u8, 243u8, 82u8, 176u8, 65u8, 5u8, 132u8, 114u8, 8u8, 82u8, 176u8,
							200u8, 97u8, 150u8, 177u8, 164u8, 166u8, 11u8, 34u8, 12u8, 12u8, 198u8,
							58u8, 191u8, 186u8, 221u8, 221u8, 119u8, 181u8, 253u8, 154u8, 228u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their"]
				#[doc = " `priority`"]
				#[doc = ""]
				#[doc = " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later"]
				#[doc = " added to a tip component in regular `priority` calculations."]
				#[doc = " It means that a `Normal` transaction can front-run a similarly-sized `Operational`"]
				#[doc = " extrinsic (with no tip), by including a tip value greater than the virtual tip."]
				#[doc = ""]
				#[doc = " ```rust,ignore"]
				#[doc = " // For `Normal`"]
				#[doc = " let priority = priority_calc(tip);"]
				#[doc = ""]
				#[doc = " // For `Operational`"]
				#[doc = " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;"]
				#[doc = " let priority = priority_calc(tip + virtual_tip);"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " Note that since we use `final_fee` the multiplier applies also to the regular `tip`"]
				#[doc = " sent with the transaction. So, not only does the transaction get a priority bump based"]
				#[doc = " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`"]
				#[doc = " transactions."]
				pub fn operational_fee_multiplier(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u8>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"TransactionPayment",
						"OperationalFeeMultiplier",
						[
							141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
							28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
							114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
							165u8,
						],
					)
				}
			}
		}
	}
	pub mod authorship {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetUncles {
				pub new_uncles: ::std::vec::Vec<
					runtime_types::sp_runtime::generic::header::Header<
						::core::primitive::u32,
						runtime_types::sp_runtime::traits::BlakeTwo256,
					>,
				>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Provide a set of uncles."]
				pub fn set_uncles(
					&self,
					new_uncles: ::std::vec::Vec<
						runtime_types::sp_runtime::generic::header::Header<
							::core::primitive::u32,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
					>,
				) -> ::subxt::tx::StaticTxPayload<SetUncles> {
					::subxt::tx::StaticTxPayload::new(
						"Authorship",
						"set_uncles",
						SetUncles { new_uncles },
						[
							181u8, 70u8, 222u8, 83u8, 154u8, 215u8, 200u8, 64u8, 154u8, 228u8,
							115u8, 247u8, 117u8, 89u8, 229u8, 102u8, 128u8, 189u8, 90u8, 60u8,
							223u8, 19u8, 111u8, 172u8, 5u8, 223u8, 132u8, 37u8, 235u8, 119u8, 42u8,
							64u8,
						],
					)
				}
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Uncles"]
				pub fn uncles(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							runtime_types::pallet_authorship::UncleEntryItem<
								::core::primitive::u32,
								::subxt::ext::sp_core::H256,
								::subxt::ext::sp_core::crypto::AccountId32,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Authorship",
						"Uncles",
						vec![],
						[
							193u8, 226u8, 196u8, 151u8, 233u8, 82u8, 60u8, 164u8, 27u8, 156u8,
							231u8, 51u8, 79u8, 134u8, 170u8, 166u8, 71u8, 120u8, 250u8, 255u8,
							52u8, 168u8, 74u8, 199u8, 122u8, 253u8, 248u8, 178u8, 39u8, 233u8,
							132u8, 67u8,
						],
					)
				}
				#[doc = " Author of current block."]
				pub fn author(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::crypto::AccountId32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Authorship",
						"Author",
						vec![],
						[
							149u8, 42u8, 33u8, 147u8, 190u8, 207u8, 174u8, 227u8, 190u8, 110u8,
							25u8, 131u8, 5u8, 167u8, 237u8, 188u8, 188u8, 33u8, 177u8, 126u8,
							181u8, 49u8, 126u8, 118u8, 46u8, 128u8, 154u8, 95u8, 15u8, 91u8, 103u8,
							113u8,
						],
					)
				}
				#[doc = " Whether uncles were already set in this block."]
				pub fn did_set_uncles(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::bool>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Authorship",
						"DidSetUncles",
						vec![],
						[
							64u8, 3u8, 208u8, 187u8, 50u8, 45u8, 37u8, 88u8, 163u8, 226u8, 37u8,
							126u8, 232u8, 107u8, 156u8, 187u8, 29u8, 15u8, 53u8, 46u8, 28u8, 73u8,
							83u8, 123u8, 14u8, 244u8, 243u8, 43u8, 245u8, 143u8, 15u8, 115u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The number of blocks back we should accept uncles."]
				#[doc = " This means that we will deal with uncle-parents that are"]
				#[doc = " `UncleGenerations + 1` before `now`."]
				pub fn uncle_generations(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Authorship",
						"UncleGenerations",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod staking {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Bond {
				pub controller: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
				pub payee: runtime_types::pallet_staking::RewardDestination<
					::subxt::ext::sp_core::crypto::AccountId32,
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct BondExtra {
				#[codec(compact)]
				pub max_additional: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Unbond {
				#[codec(compact)]
				pub value: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct WithdrawUnbonded {
				pub num_slashing_spans: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Validate {
				pub prefs: runtime_types::pallet_staking::ValidatorPrefs,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Nominate {
				pub targets: ::std::vec::Vec<
					::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Chill;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetPayee {
				pub payee: runtime_types::pallet_staking::RewardDestination<
					::subxt::ext::sp_core::crypto::AccountId32,
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetController {
				pub controller: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetValidatorCount {
				#[codec(compact)]
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct IncreaseValidatorCount {
				#[codec(compact)]
				pub additional: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ScaleValidatorCount {
				pub factor: runtime_types::sp_arithmetic::per_things::Percent,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceNoEras;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceNewEra;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetInvulnerables {
				pub invulnerables: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceUnstake {
				pub stash: ::subxt::ext::sp_core::crypto::AccountId32,
				pub num_slashing_spans: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceNewEraAlways;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct CancelDeferredSlash {
				pub era: ::core::primitive::u32,
				pub slash_indices: ::std::vec::Vec<::core::primitive::u32>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct PayoutStakers {
				pub validator_stash: ::subxt::ext::sp_core::crypto::AccountId32,
				pub era: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Rebond {
				#[codec(compact)]
				pub value: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetHistoryDepth {
				#[codec(compact)]
				pub new_history_depth: ::core::primitive::u32,
				#[codec(compact)]
				pub era_items_deleted: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ReapStash {
				pub stash: ::subxt::ext::sp_core::crypto::AccountId32,
				pub num_slashing_spans: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Kick {
				pub who: ::std::vec::Vec<
					::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetStakingConfigs {
				pub min_nominator_bond: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
					::core::primitive::u128,
				>,
				pub min_validator_bond: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
					::core::primitive::u128,
				>,
				pub max_nominator_count:
					runtime_types::pallet_staking::pallet::pallet::ConfigOp<::core::primitive::u32>,
				pub max_validator_count:
					runtime_types::pallet_staking::pallet::pallet::ConfigOp<::core::primitive::u32>,
				pub chill_threshold: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
					runtime_types::sp_arithmetic::per_things::Percent,
				>,
				pub min_commission: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
					runtime_types::sp_arithmetic::per_things::Perbill,
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ChillOther {
				pub controller: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceApplyMinCommission {
				pub validator_stash: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Take the origin account as a stash and lock up `value` of its balance. `controller` will"]
				#[doc = "be the account that controls it."]
				#[doc = ""]
				#[doc = "`value` must be more than the `minimum_balance` specified by `T::Currency`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ by the stash account."]
				#[doc = ""]
				#[doc = "Emits `Bonded`."]
				#[doc = "# <weight>"]
				#[doc = "- Independent of the arguments. Moderate complexity."]
				#[doc = "- O(1)."]
				#[doc = "- Three extra DB entries."]
				#[doc = ""]
				#[doc = "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned"]
				#[doc = "unless the `origin` falls below _existential deposit_ and gets removed as dust."]
				#[doc = "------------------"]
				#[doc = "# </weight>"]
				pub fn bond(
					&self,
					controller: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
					value: ::core::primitive::u128,
					payee: runtime_types::pallet_staking::RewardDestination<
						::subxt::ext::sp_core::crypto::AccountId32,
					>,
				) -> ::subxt::tx::StaticTxPayload<Bond> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"bond",
						Bond { controller, value, payee },
						[
							215u8, 211u8, 69u8, 215u8, 33u8, 158u8, 62u8, 3u8, 31u8, 216u8, 213u8,
							188u8, 151u8, 43u8, 165u8, 154u8, 117u8, 163u8, 190u8, 227u8, 116u8,
							70u8, 155u8, 178u8, 64u8, 174u8, 203u8, 179u8, 214u8, 187u8, 176u8,
							10u8,
						],
					)
				}
				#[doc = "Add some extra amount that have appeared in the stash `free_balance` into the balance up"]
				#[doc = "for staking."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ by the stash, not the controller."]
				#[doc = ""]
				#[doc = "Use this if there are additional funds in your stash account that you wish to bond."]
				#[doc = "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose"]
				#[doc = "any limitation on the amount that can be added."]
				#[doc = ""]
				#[doc = "Emits `Bonded`."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Independent of the arguments. Insignificant complexity."]
				#[doc = "- O(1)."]
				#[doc = "# </weight>"]
				pub fn bond_extra(
					&self,
					max_additional: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<BondExtra> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"bond_extra",
						BondExtra { max_additional },
						[
							60u8, 45u8, 82u8, 223u8, 113u8, 95u8, 0u8, 71u8, 59u8, 108u8, 228u8,
							9u8, 95u8, 210u8, 113u8, 106u8, 252u8, 15u8, 19u8, 128u8, 11u8, 187u8,
							4u8, 151u8, 103u8, 143u8, 24u8, 33u8, 149u8, 82u8, 35u8, 192u8,
						],
					)
				}
				#[doc = "Schedule a portion of the stash to be unlocked ready for transfer out after the bond"]
				#[doc = "period ends. If this leaves an amount actively bonded less than"]
				#[doc = "T::Currency::minimum_balance(), then it is increased to the full amount."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
				#[doc = ""]
				#[doc = "Once the unlock period is done, you can call `withdraw_unbonded` to actually move"]
				#[doc = "the funds out of management ready for transfer."]
				#[doc = ""]
				#[doc = "No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)"]
				#[doc = "can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need"]
				#[doc = "to be called first to remove some of the chunks (if possible)."]
				#[doc = ""]
				#[doc = "If a user encounters the `InsufficientBond` error when calling this extrinsic,"]
				#[doc = "they should call `chill` first in order to free up their bonded funds."]
				#[doc = ""]
				#[doc = "Emits `Unbonded`."]
				#[doc = ""]
				#[doc = "See also [`Call::withdraw_unbonded`]."]
				pub fn unbond(
					&self,
					value: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<Unbond> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"unbond",
						Unbond { value },
						[
							85u8, 62u8, 34u8, 127u8, 60u8, 241u8, 134u8, 60u8, 125u8, 91u8, 31u8,
							193u8, 50u8, 230u8, 237u8, 42u8, 114u8, 230u8, 240u8, 146u8, 14u8,
							109u8, 185u8, 151u8, 148u8, 44u8, 147u8, 182u8, 192u8, 253u8, 51u8,
							87u8,
						],
					)
				}
				#[doc = "Remove any unlocked chunks from the `unlocking` queue from our management."]
				#[doc = ""]
				#[doc = "This essentially frees up that balance to be used by the stash account to do"]
				#[doc = "whatever it wants."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ by the controller."]
				#[doc = ""]
				#[doc = "Emits `Withdrawn`."]
				#[doc = ""]
				#[doc = "See also [`Call::unbond`]."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Complexity O(S) where S is the number of slashing spans to remove"]
				#[doc = "NOTE: Weight annotation is the kill scenario, we refund otherwise."]
				#[doc = "# </weight>"]
				pub fn withdraw_unbonded(
					&self,
					num_slashing_spans: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<WithdrawUnbonded> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"withdraw_unbonded",
						WithdrawUnbonded { num_slashing_spans },
						[
							95u8, 223u8, 122u8, 217u8, 76u8, 208u8, 86u8, 129u8, 31u8, 104u8, 70u8,
							154u8, 23u8, 250u8, 165u8, 192u8, 149u8, 249u8, 158u8, 159u8, 194u8,
							224u8, 118u8, 134u8, 204u8, 157u8, 72u8, 136u8, 19u8, 193u8, 183u8,
							84u8,
						],
					)
				}
				#[doc = "Declare the desire to validate for the origin controller."]
				#[doc = ""]
				#[doc = "Effects will be felt at the beginning of the next era."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
				pub fn validate(
					&self,
					prefs: runtime_types::pallet_staking::ValidatorPrefs,
				) -> ::subxt::tx::StaticTxPayload<Validate> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"validate",
						Validate { prefs },
						[
							191u8, 116u8, 139u8, 35u8, 250u8, 211u8, 86u8, 240u8, 35u8, 9u8, 19u8,
							44u8, 148u8, 35u8, 91u8, 106u8, 200u8, 172u8, 108u8, 145u8, 194u8,
							146u8, 61u8, 145u8, 233u8, 168u8, 2u8, 26u8, 145u8, 101u8, 114u8,
							157u8,
						],
					)
				}
				#[doc = "Declare the desire to nominate `targets` for the origin controller."]
				#[doc = ""]
				#[doc = "Effects will be felt at the beginning of the next era."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- The transaction's complexity is proportional to the size of `targets` (N)"]
				#[doc = "which is capped at CompactAssignments::LIMIT (T::MaxNominations)."]
				#[doc = "- Both the reads and writes follow a similar pattern."]
				#[doc = "# </weight>"]
				pub fn nominate(
					&self,
					targets: ::std::vec::Vec<
						::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
					>,
				) -> ::subxt::tx::StaticTxPayload<Nominate> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"nominate",
						Nominate { targets },
						[
							112u8, 162u8, 70u8, 26u8, 74u8, 7u8, 188u8, 193u8, 210u8, 247u8, 27u8,
							189u8, 133u8, 137u8, 33u8, 155u8, 255u8, 171u8, 122u8, 68u8, 175u8,
							247u8, 139u8, 253u8, 97u8, 187u8, 254u8, 201u8, 66u8, 166u8, 226u8,
							90u8,
						],
					)
				}
				#[doc = "Declare no desire to either validate or nominate."]
				#[doc = ""]
				#[doc = "Effects will be felt at the beginning of the next era."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Independent of the arguments. Insignificant complexity."]
				#[doc = "- Contains one read."]
				#[doc = "- Writes are limited to the `origin` account key."]
				#[doc = "# </weight>"]
				pub fn chill(&self) -> ::subxt::tx::StaticTxPayload<Chill> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"chill",
						Chill {},
						[
							94u8, 20u8, 196u8, 31u8, 220u8, 125u8, 115u8, 167u8, 140u8, 3u8, 20u8,
							132u8, 81u8, 120u8, 215u8, 166u8, 230u8, 56u8, 16u8, 222u8, 31u8,
							153u8, 120u8, 62u8, 153u8, 67u8, 220u8, 239u8, 11u8, 234u8, 127u8,
							122u8,
						],
					)
				}
				#[doc = "(Re-)set the payment target for a controller."]
				#[doc = ""]
				#[doc = "Effects will be felt instantly (as soon as this function is completed successfully)."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Independent of the arguments. Insignificant complexity."]
				#[doc = "- Contains a limited number of reads."]
				#[doc = "- Writes are limited to the `origin` account key."]
				#[doc = "---------"]
				#[doc = "- Weight: O(1)"]
				#[doc = "- DB Weight:"]
				#[doc = "    - Read: Ledger"]
				#[doc = "    - Write: Payee"]
				#[doc = "# </weight>"]
				pub fn set_payee(
					&self,
					payee: runtime_types::pallet_staking::RewardDestination<
						::subxt::ext::sp_core::crypto::AccountId32,
					>,
				) -> ::subxt::tx::StaticTxPayload<SetPayee> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"set_payee",
						SetPayee { payee },
						[
							96u8, 8u8, 254u8, 164u8, 87u8, 46u8, 120u8, 11u8, 197u8, 63u8, 20u8,
							178u8, 167u8, 236u8, 149u8, 245u8, 14u8, 171u8, 108u8, 195u8, 250u8,
							133u8, 0u8, 75u8, 192u8, 159u8, 84u8, 220u8, 242u8, 133u8, 60u8, 62u8,
						],
					)
				}
				#[doc = "(Re-)set the controller of a stash."]
				#[doc = ""]
				#[doc = "Effects will be felt instantly (as soon as this function is completed successfully)."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ by the stash, not the controller."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Independent of the arguments. Insignificant complexity."]
				#[doc = "- Contains a limited number of reads."]
				#[doc = "- Writes are limited to the `origin` account key."]
				#[doc = "----------"]
				#[doc = "Weight: O(1)"]
				#[doc = "DB Weight:"]
				#[doc = "- Read: Bonded, Ledger New Controller, Ledger Old Controller"]
				#[doc = "- Write: Bonded, Ledger New Controller, Ledger Old Controller"]
				#[doc = "# </weight>"]
				pub fn set_controller(
					&self,
					controller: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
				) -> ::subxt::tx::StaticTxPayload<SetController> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"set_controller",
						SetController { controller },
						[
							165u8, 250u8, 213u8, 32u8, 179u8, 163u8, 15u8, 35u8, 14u8, 152u8, 56u8,
							171u8, 43u8, 101u8, 7u8, 167u8, 178u8, 60u8, 89u8, 186u8, 59u8, 28u8,
							82u8, 159u8, 13u8, 96u8, 168u8, 123u8, 194u8, 212u8, 205u8, 184u8,
						],
					)
				}
				#[doc = "Sets the ideal number of validators."]
				#[doc = ""]
				#[doc = "The dispatch origin must be Root."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight: O(1)"]
				#[doc = "Write: Validator Count"]
				#[doc = "# </weight>"]
				pub fn set_validator_count(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetValidatorCount> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"set_validator_count",
						SetValidatorCount { new },
						[
							55u8, 232u8, 95u8, 66u8, 228u8, 217u8, 11u8, 27u8, 3u8, 202u8, 199u8,
							242u8, 70u8, 160u8, 250u8, 187u8, 194u8, 91u8, 15u8, 36u8, 215u8, 36u8,
							160u8, 108u8, 251u8, 60u8, 240u8, 202u8, 249u8, 235u8, 28u8, 94u8,
						],
					)
				}
				#[doc = "Increments the ideal number of validators."]
				#[doc = ""]
				#[doc = "The dispatch origin must be Root."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Same as [`Self::set_validator_count`]."]
				#[doc = "# </weight>"]
				pub fn increase_validator_count(
					&self,
					additional: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<IncreaseValidatorCount> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"increase_validator_count",
						IncreaseValidatorCount { additional },
						[
							239u8, 184u8, 155u8, 213u8, 25u8, 22u8, 193u8, 13u8, 102u8, 192u8,
							82u8, 153u8, 249u8, 192u8, 60u8, 158u8, 8u8, 78u8, 175u8, 219u8, 46u8,
							51u8, 222u8, 193u8, 193u8, 201u8, 78u8, 90u8, 58u8, 86u8, 196u8, 17u8,
						],
					)
				}
				#[doc = "Scale up the ideal number of validators by a factor."]
				#[doc = ""]
				#[doc = "The dispatch origin must be Root."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Same as [`Self::set_validator_count`]."]
				#[doc = "# </weight>"]
				pub fn scale_validator_count(
					&self,
					factor: runtime_types::sp_arithmetic::per_things::Percent,
				) -> ::subxt::tx::StaticTxPayload<ScaleValidatorCount> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"scale_validator_count",
						ScaleValidatorCount { factor },
						[
							198u8, 68u8, 227u8, 94u8, 110u8, 157u8, 209u8, 217u8, 112u8, 37u8,
							78u8, 142u8, 12u8, 193u8, 219u8, 167u8, 149u8, 112u8, 49u8, 139u8,
							74u8, 81u8, 172u8, 72u8, 253u8, 224u8, 56u8, 194u8, 185u8, 90u8, 87u8,
							125u8,
						],
					)
				}
				#[doc = "Force there to be no new eras indefinitely."]
				#[doc = ""]
				#[doc = "The dispatch origin must be Root."]
				#[doc = ""]
				#[doc = "# Warning"]
				#[doc = ""]
				#[doc = "The election process starts multiple blocks before the end of the era."]
				#[doc = "Thus the election process may be ongoing when this is called. In this case the"]
				#[doc = "election will continue until the next era is triggered."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- No arguments."]
				#[doc = "- Weight: O(1)"]
				#[doc = "- Write: ForceEra"]
				#[doc = "# </weight>"]
				pub fn force_no_eras(&self) -> ::subxt::tx::StaticTxPayload<ForceNoEras> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"force_no_eras",
						ForceNoEras {},
						[
							16u8, 81u8, 207u8, 168u8, 23u8, 236u8, 11u8, 75u8, 141u8, 107u8, 92u8,
							2u8, 53u8, 111u8, 252u8, 116u8, 91u8, 120u8, 75u8, 24u8, 125u8, 53u8,
							9u8, 28u8, 242u8, 87u8, 245u8, 55u8, 40u8, 103u8, 151u8, 178u8,
						],
					)
				}
				#[doc = "Force there to be a new era at the end of the next session. After this, it will be"]
				#[doc = "reset to normal (non-forced) behaviour."]
				#[doc = ""]
				#[doc = "The dispatch origin must be Root."]
				#[doc = ""]
				#[doc = "# Warning"]
				#[doc = ""]
				#[doc = "The election process starts multiple blocks before the end of the era."]
				#[doc = "If this is called just before a new era is triggered, the election process may not"]
				#[doc = "have enough blocks to get a result."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- No arguments."]
				#[doc = "- Weight: O(1)"]
				#[doc = "- Write ForceEra"]
				#[doc = "# </weight>"]
				pub fn force_new_era(&self) -> ::subxt::tx::StaticTxPayload<ForceNewEra> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"force_new_era",
						ForceNewEra {},
						[
							230u8, 242u8, 169u8, 196u8, 78u8, 145u8, 24u8, 191u8, 113u8, 68u8, 5u8,
							138u8, 48u8, 51u8, 109u8, 126u8, 73u8, 136u8, 162u8, 158u8, 174u8,
							201u8, 213u8, 230u8, 215u8, 44u8, 200u8, 32u8, 75u8, 27u8, 23u8, 254u8,
						],
					)
				}
				#[doc = "Set the validators who cannot be slashed (if any)."]
				#[doc = ""]
				#[doc = "The dispatch origin must be Root."]
				pub fn set_invulnerables(
					&self,
					invulnerables: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::tx::StaticTxPayload<SetInvulnerables> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"set_invulnerables",
						SetInvulnerables { invulnerables },
						[
							2u8, 148u8, 221u8, 111u8, 153u8, 48u8, 222u8, 36u8, 228u8, 84u8, 18u8,
							35u8, 168u8, 239u8, 53u8, 245u8, 27u8, 76u8, 18u8, 203u8, 206u8, 9u8,
							8u8, 81u8, 35u8, 224u8, 22u8, 133u8, 58u8, 99u8, 103u8, 39u8,
						],
					)
				}
				#[doc = "Force a current staker to become completely unstaked, immediately."]
				#[doc = ""]
				#[doc = "The dispatch origin must be Root."]
				pub fn force_unstake(
					&self,
					stash: ::subxt::ext::sp_core::crypto::AccountId32,
					num_slashing_spans: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<ForceUnstake> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"force_unstake",
						ForceUnstake { stash, num_slashing_spans },
						[
							94u8, 247u8, 238u8, 47u8, 250u8, 6u8, 96u8, 175u8, 173u8, 123u8, 161u8,
							187u8, 162u8, 214u8, 176u8, 233u8, 33u8, 33u8, 167u8, 239u8, 40u8,
							223u8, 19u8, 131u8, 230u8, 39u8, 175u8, 200u8, 36u8, 182u8, 76u8,
							207u8,
						],
					)
				}
				#[doc = "Force there to be a new era at the end of sessions indefinitely."]
				#[doc = ""]
				#[doc = "The dispatch origin must be Root."]
				#[doc = ""]
				#[doc = "# Warning"]
				#[doc = ""]
				#[doc = "The election process starts multiple blocks before the end of the era."]
				#[doc = "If this is called just before a new era is triggered, the election process may not"]
				#[doc = "have enough blocks to get a result."]
				pub fn force_new_era_always(
					&self,
				) -> ::subxt::tx::StaticTxPayload<ForceNewEraAlways> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"force_new_era_always",
						ForceNewEraAlways {},
						[
							179u8, 118u8, 189u8, 54u8, 248u8, 141u8, 207u8, 142u8, 80u8, 37u8,
							241u8, 185u8, 138u8, 254u8, 117u8, 147u8, 225u8, 118u8, 34u8, 177u8,
							197u8, 158u8, 8u8, 82u8, 202u8, 108u8, 208u8, 26u8, 64u8, 33u8, 74u8,
							43u8,
						],
					)
				}
				#[doc = "Cancel enactment of a deferred slash."]
				#[doc = ""]
				#[doc = "Can be called by the `T::SlashCancelOrigin`."]
				#[doc = ""]
				#[doc = "Parameters: era and indices of the slashes for that era to kill."]
				pub fn cancel_deferred_slash(
					&self,
					era: ::core::primitive::u32,
					slash_indices: ::std::vec::Vec<::core::primitive::u32>,
				) -> ::subxt::tx::StaticTxPayload<CancelDeferredSlash> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"cancel_deferred_slash",
						CancelDeferredSlash { era, slash_indices },
						[
							120u8, 57u8, 162u8, 105u8, 91u8, 250u8, 129u8, 240u8, 110u8, 234u8,
							170u8, 98u8, 164u8, 65u8, 106u8, 101u8, 19u8, 88u8, 146u8, 210u8,
							171u8, 44u8, 37u8, 50u8, 65u8, 178u8, 37u8, 223u8, 239u8, 197u8, 116u8,
							168u8,
						],
					)
				}
				#[doc = "Pay out all the stakers behind a single validator for a single era."]
				#[doc = ""]
				#[doc = "- `validator_stash` is the stash account of the validator. Their nominators, up to"]
				#[doc = "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards."]
				#[doc = "- `era` may be any era between `[current_era - history_depth; current_era]`."]
				#[doc = ""]
				#[doc = "The origin of this call must be _Signed_. Any account can call this function, even if"]
				#[doc = "it is not one of the stakers."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Time complexity: at most O(MaxNominatorRewardedPerValidator)."]
				#[doc = "- Contains a limited number of reads and writes."]
				#[doc = "-----------"]
				#[doc = "N is the Number of payouts for the validator (including the validator)"]
				#[doc = "Weight:"]
				#[doc = "- Reward Destination Staked: O(N)"]
				#[doc = "- Reward Destination Controller (Creating): O(N)"]
				#[doc = ""]
				#[doc = "  NOTE: weights are assuming that payouts are made to alive stash account (Staked)."]
				#[doc = "  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here."]
				#[doc = "# </weight>"]
				pub fn payout_stakers(
					&self,
					validator_stash: ::subxt::ext::sp_core::crypto::AccountId32,
					era: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<PayoutStakers> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"payout_stakers",
						PayoutStakers { validator_stash, era },
						[
							184u8, 194u8, 33u8, 118u8, 7u8, 203u8, 89u8, 119u8, 214u8, 76u8, 178u8,
							20u8, 82u8, 111u8, 57u8, 132u8, 212u8, 43u8, 232u8, 91u8, 252u8, 49u8,
							42u8, 115u8, 1u8, 181u8, 154u8, 207u8, 144u8, 206u8, 205u8, 33u8,
						],
					)
				}
				#[doc = "Rebond a portion of the stash scheduled to be unlocked."]
				#[doc = ""]
				#[doc = "The dispatch origin must be signed by the controller."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Time complexity: O(L), where L is unlocking chunks"]
				#[doc = "- Bounded by `MaxUnlockingChunks`."]
				#[doc = "- Storage changes: Can't increase storage, only decrease it."]
				#[doc = "# </weight>"]
				pub fn rebond(
					&self,
					value: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<Rebond> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"rebond",
						Rebond { value },
						[
							25u8, 22u8, 191u8, 172u8, 133u8, 101u8, 139u8, 102u8, 134u8, 16u8,
							136u8, 56u8, 137u8, 162u8, 4u8, 253u8, 196u8, 30u8, 234u8, 49u8, 102u8,
							68u8, 145u8, 96u8, 148u8, 219u8, 162u8, 17u8, 177u8, 184u8, 34u8,
							113u8,
						],
					)
				}
				#[doc = "Set `HistoryDepth` value. This function will delete any history information"]
				#[doc = "when `HistoryDepth` is reduced."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `new_history_depth`: The new history depth you would like to set."]
				#[doc = "- `era_items_deleted`: The number of items that will be deleted by this dispatch. This"]
				#[doc = "  should report all the storage items that will be deleted by clearing old era history."]
				#[doc = "  Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an"]
				#[doc = "  accurate number."]
				#[doc = ""]
				#[doc = "Origin must be root."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- E: Number of history depths removed, i.e. 10 -> 7 = 3"]
				#[doc = "- Weight: O(E)"]
				#[doc = "- DB Weight:"]
				#[doc = "    - Reads: Current Era, History Depth"]
				#[doc = "    - Writes: History Depth"]
				#[doc = "    - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs"]
				#[doc = "    - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,"]
				#[doc = "      ErasStartSessionIndex"]
				#[doc = "# </weight>"]
				pub fn set_history_depth(
					&self,
					new_history_depth: ::core::primitive::u32,
					era_items_deleted: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetHistoryDepth> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"set_history_depth",
						SetHistoryDepth { new_history_depth, era_items_deleted },
						[
							174u8, 55u8, 231u8, 132u8, 219u8, 215u8, 118u8, 202u8, 13u8, 151u8,
							193u8, 248u8, 141u8, 180u8, 56u8, 103u8, 90u8, 182u8, 194u8, 198u8,
							120u8, 251u8, 143u8, 218u8, 81u8, 59u8, 13u8, 161u8, 247u8, 57u8,
							178u8, 122u8,
						],
					)
				}
				#[doc = "Remove all data structures concerning a staker/stash once it is at a state where it can"]
				#[doc = "be considered `dust` in the staking system. The requirements are:"]
				#[doc = ""]
				#[doc = "1. the `total_balance` of the stash is below existential deposit."]
				#[doc = "2. or, the `ledger.total` of the stash is below existential deposit."]
				#[doc = ""]
				#[doc = "The former can happen in cases like a slash; the latter when a fully unbonded account"]
				#[doc = "is still receiving staking rewards in `RewardDestination::Staked`."]
				#[doc = ""]
				#[doc = "It can be called by anyone, as long as `stash` meets the above requirements."]
				#[doc = ""]
				#[doc = "Refunds the transaction fees upon successful execution."]
				pub fn reap_stash(
					&self,
					stash: ::subxt::ext::sp_core::crypto::AccountId32,
					num_slashing_spans: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<ReapStash> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"reap_stash",
						ReapStash { stash, num_slashing_spans },
						[
							34u8, 168u8, 120u8, 161u8, 95u8, 199u8, 106u8, 233u8, 61u8, 240u8,
							166u8, 31u8, 183u8, 165u8, 158u8, 179u8, 32u8, 130u8, 27u8, 164u8,
							112u8, 44u8, 14u8, 125u8, 227u8, 87u8, 70u8, 203u8, 194u8, 24u8, 212u8,
							177u8,
						],
					)
				}
				#[doc = "Remove the given nominations from the calling validator."]
				#[doc = ""]
				#[doc = "Effects will be felt at the beginning of the next era."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
				#[doc = ""]
				#[doc = "- `who`: A list of nominator stash accounts who are nominating this validator which"]
				#[doc = "  should no longer be nominating this validator."]
				#[doc = ""]
				#[doc = "Note: Making this call only makes sense if you first set the validator preferences to"]
				#[doc = "block any further nominations."]
				pub fn kick(
					&self,
					who: ::std::vec::Vec<
						::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
					>,
				) -> ::subxt::tx::StaticTxPayload<Kick> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"kick",
						Kick { who },
						[
							32u8, 26u8, 202u8, 6u8, 186u8, 180u8, 58u8, 121u8, 185u8, 208u8, 123u8,
							10u8, 53u8, 179u8, 167u8, 203u8, 96u8, 229u8, 7u8, 144u8, 231u8, 172u8,
							145u8, 141u8, 162u8, 180u8, 212u8, 42u8, 34u8, 5u8, 199u8, 82u8,
						],
					)
				}
				#[doc = "Update the various staking configurations ."]
				#[doc = ""]
				#[doc = "* `min_nominator_bond`: The minimum active bond needed to be a nominator."]
				#[doc = "* `min_validator_bond`: The minimum active bond needed to be a validator."]
				#[doc = "* `max_nominator_count`: The max number of users who can be a nominator at once. When"]
				#[doc = "  set to `None`, no limit is enforced."]
				#[doc = "* `max_validator_count`: The max number of users who can be a validator at once. When"]
				#[doc = "  set to `None`, no limit is enforced."]
				#[doc = "* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which"]
				#[doc = "  should be filled in order for the `chill_other` transaction to work."]
				#[doc = "* `min_commission`: The minimum amount of commission that each validators must maintain."]
				#[doc = "  This is checked only upon calling `validate`. Existing validators are not affected."]
				#[doc = ""]
				#[doc = "Origin must be Root to call this function."]
				#[doc = ""]
				#[doc = "NOTE: Existing nominators and validators will not be affected by this update."]
				#[doc = "to kick people under the new limits, `chill_other` should be called."]
				pub fn set_staking_configs(
					&self,
					min_nominator_bond: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
						::core::primitive::u128,
					>,
					min_validator_bond: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
						::core::primitive::u128,
					>,
					max_nominator_count: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
						::core::primitive::u32,
					>,
					max_validator_count: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
						::core::primitive::u32,
					>,
					chill_threshold: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
						runtime_types::sp_arithmetic::per_things::Percent,
					>,
					min_commission: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
						runtime_types::sp_arithmetic::per_things::Perbill,
					>,
				) -> ::subxt::tx::StaticTxPayload<SetStakingConfigs> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"set_staking_configs",
						SetStakingConfigs {
							min_nominator_bond,
							min_validator_bond,
							max_nominator_count,
							max_validator_count,
							chill_threshold,
							min_commission,
						},
						[
							176u8, 168u8, 155u8, 176u8, 27u8, 79u8, 223u8, 92u8, 88u8, 93u8, 223u8,
							69u8, 179u8, 250u8, 138u8, 138u8, 87u8, 220u8, 36u8, 3u8, 126u8, 213u8,
							16u8, 68u8, 3u8, 16u8, 218u8, 151u8, 98u8, 169u8, 217u8, 75u8,
						],
					)
				}
				#[doc = "Declare a `controller` to stop participating as either a validator or nominator."]
				#[doc = ""]
				#[doc = "Effects will be felt at the beginning of the next era."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_, but can be called by anyone."]
				#[doc = ""]
				#[doc = "If the caller is the same as the controller being targeted, then no further checks are"]
				#[doc = "enforced, and this function behaves just like `chill`."]
				#[doc = ""]
				#[doc = "If the caller is different than the controller being targeted, the following conditions"]
				#[doc = "must be met:"]
				#[doc = ""]
				#[doc = "* `controller` must belong to a nominator who has become non-decodable,"]
				#[doc = ""]
				#[doc = "Or:"]
				#[doc = ""]
				#[doc = "* A `ChillThreshold` must be set and checked which defines how close to the max"]
				#[doc = "  nominators or validators we must reach before users can start chilling one-another."]
				#[doc = "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine"]
				#[doc = "  how close we are to the threshold."]
				#[doc = "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines"]
				#[doc = "  if this is a person that should be chilled because they have not met the threshold"]
				#[doc = "  bond required."]
				#[doc = ""]
				#[doc = "This can be helpful if bond requirements are updated, and we need to remove old users"]
				#[doc = "who do not satisfy these requirements."]
				pub fn chill_other(
					&self,
					controller: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<ChillOther> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"chill_other",
						ChillOther { controller },
						[
							140u8, 98u8, 4u8, 203u8, 91u8, 131u8, 123u8, 119u8, 169u8, 47u8, 188u8,
							23u8, 205u8, 170u8, 82u8, 220u8, 166u8, 170u8, 135u8, 176u8, 68u8,
							228u8, 14u8, 67u8, 42u8, 52u8, 140u8, 231u8, 62u8, 167u8, 80u8, 173u8,
						],
					)
				}
				#[doc = "Force a validator to have at least the minimum commission. This will not affect a"]
				#[doc = "validator who already has a commission greater than or equal to the minimum. Any account"]
				#[doc = "can call this."]
				pub fn force_apply_min_commission(
					&self,
					validator_stash: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<ForceApplyMinCommission> {
					::subxt::tx::StaticTxPayload::new(
						"Staking",
						"force_apply_min_commission",
						ForceApplyMinCommission { validator_stash },
						[
							136u8, 163u8, 85u8, 134u8, 240u8, 247u8, 183u8, 227u8, 226u8, 202u8,
							102u8, 186u8, 138u8, 119u8, 78u8, 123u8, 229u8, 135u8, 129u8, 241u8,
							119u8, 106u8, 41u8, 182u8, 121u8, 181u8, 242u8, 175u8, 74u8, 207u8,
							64u8, 106u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_staking::pallet::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The era payout has been set; the first balance is the validator-payout; the second is"]
			#[doc = "the remainder from the maximum amount of reward."]
			#[doc = "\\[era_index, validator_payout, remainder\\]"]
			pub struct EraPaid(
				pub ::core::primitive::u32,
				pub ::core::primitive::u128,
				pub ::core::primitive::u128,
			);
			impl ::subxt::events::StaticEvent for EraPaid {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "EraPaid";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The nominator has been rewarded by this amount. \\[stash, amount\\]"]
			pub struct Rewarded(
				pub ::subxt::ext::sp_core::crypto::AccountId32,
				pub ::core::primitive::u128,
			);
			impl ::subxt::events::StaticEvent for Rewarded {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "Rewarded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "One validator (and its nominators) has been slashed by the given amount."]
			#[doc = "\\[validator, amount\\]"]
			pub struct Slashed(
				pub ::subxt::ext::sp_core::crypto::AccountId32,
				pub ::core::primitive::u128,
			);
			impl ::subxt::events::StaticEvent for Slashed {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "Slashed";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "An old slashing report from a prior era was discarded because it could"]
			#[doc = "not be processed. \\[session_index\\]"]
			pub struct OldSlashingReportDiscarded(pub ::core::primitive::u32);
			impl ::subxt::events::StaticEvent for OldSlashingReportDiscarded {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "OldSlashingReportDiscarded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A new set of stakers was elected."]
			pub struct StakersElected;
			impl ::subxt::events::StaticEvent for StakersElected {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "StakersElected";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An account has bonded this amount. \\[stash, amount\\]"]
			#[doc = ""]
			#[doc = "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,"]
			#[doc = "it will not be emitted for staking rewards when they are added to stake."]
			pub struct Bonded(
				pub ::subxt::ext::sp_core::crypto::AccountId32,
				pub ::core::primitive::u128,
			);
			impl ::subxt::events::StaticEvent for Bonded {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "Bonded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An account has unbonded this amount. \\[stash, amount\\]"]
			pub struct Unbonded(
				pub ::subxt::ext::sp_core::crypto::AccountId32,
				pub ::core::primitive::u128,
			);
			impl ::subxt::events::StaticEvent for Unbonded {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "Unbonded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`"]
			#[doc = "from the unlocking queue. \\[stash, amount\\]"]
			pub struct Withdrawn(
				pub ::subxt::ext::sp_core::crypto::AccountId32,
				pub ::core::primitive::u128,
			);
			impl ::subxt::events::StaticEvent for Withdrawn {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "Withdrawn";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A nominator has been kicked from a validator. \\[nominator, stash\\]"]
			pub struct Kicked(
				pub ::subxt::ext::sp_core::crypto::AccountId32,
				pub ::subxt::ext::sp_core::crypto::AccountId32,
			);
			impl ::subxt::events::StaticEvent for Kicked {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "Kicked";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The election failed. No new era is planned."]
			pub struct StakingElectionFailed;
			impl ::subxt::events::StaticEvent for StakingElectionFailed {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "StakingElectionFailed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An account has stopped participating as either a validator or nominator."]
			#[doc = "\\[stash\\]"]
			pub struct Chilled(pub ::subxt::ext::sp_core::crypto::AccountId32);
			impl ::subxt::events::StaticEvent for Chilled {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "Chilled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The stakers' rewards are getting paid. \\[era_index, validator_stash\\]"]
			pub struct PayoutStarted(
				pub ::core::primitive::u32,
				pub ::subxt::ext::sp_core::crypto::AccountId32,
			);
			impl ::subxt::events::StaticEvent for PayoutStarted {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "PayoutStarted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A validator has set their preferences."]
			pub struct ValidatorPrefsSet(
				pub ::subxt::ext::sp_core::crypto::AccountId32,
				pub runtime_types::pallet_staking::ValidatorPrefs,
			);
			impl ::subxt::events::StaticEvent for ValidatorPrefsSet {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "ValidatorPrefsSet";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Number of eras to keep in history."]
				#[doc = ""]
				#[doc = " Information is kept for eras in `[current_era - history_depth; current_era]`."]
				#[doc = ""]
				#[doc = " Must be more than the number of eras delayed by session otherwise. I.e. active era must"]
				#[doc = " always be in history. I.e. `active_era > current_era - history_depth` must be"]
				#[doc = " guaranteed."]
				pub fn history_depth(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"HistoryDepth",
						vec![],
						[
							41u8, 54u8, 118u8, 245u8, 75u8, 136u8, 220u8, 25u8, 55u8, 255u8, 149u8,
							177u8, 49u8, 155u8, 167u8, 188u8, 170u8, 29u8, 251u8, 44u8, 240u8,
							250u8, 225u8, 205u8, 102u8, 74u8, 25u8, 47u8, 52u8, 235u8, 204u8,
							167u8,
						],
					)
				}
				#[doc = " The ideal number of staking participants."]
				pub fn validator_count(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ValidatorCount",
						vec![],
						[
							245u8, 75u8, 214u8, 110u8, 66u8, 164u8, 86u8, 206u8, 69u8, 89u8, 12u8,
							111u8, 117u8, 16u8, 228u8, 184u8, 207u8, 6u8, 0u8, 126u8, 221u8, 67u8,
							125u8, 218u8, 188u8, 245u8, 156u8, 188u8, 34u8, 85u8, 208u8, 197u8,
						],
					)
				}
				#[doc = " Minimum number of staking participants before emergency conditions are imposed."]
				pub fn minimum_validator_count(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"MinimumValidatorCount",
						vec![],
						[
							82u8, 95u8, 128u8, 55u8, 136u8, 134u8, 71u8, 117u8, 135u8, 76u8, 44u8,
							46u8, 174u8, 34u8, 170u8, 228u8, 175u8, 1u8, 234u8, 162u8, 91u8, 252u8,
							127u8, 68u8, 243u8, 241u8, 13u8, 107u8, 214u8, 70u8, 87u8, 249u8,
						],
					)
				}
				#[doc = " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're"]
				#[doc = " easy to initialize and the performance hit is minimal (we expect no more than four"]
				#[doc = " invulnerables) and restricted to testnets."]
				pub fn invulnerables(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"Invulnerables",
						vec![],
						[
							77u8, 78u8, 63u8, 199u8, 150u8, 167u8, 135u8, 130u8, 192u8, 51u8,
							202u8, 119u8, 68u8, 49u8, 241u8, 68u8, 82u8, 90u8, 226u8, 201u8, 96u8,
							170u8, 21u8, 173u8, 236u8, 116u8, 148u8, 8u8, 174u8, 92u8, 7u8, 11u8,
						],
					)
				}
				#[doc = " Map from all locked \"stash\" accounts to the controller account."]
				pub fn bonded(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::crypto::AccountId32>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"Bonded",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							35u8, 197u8, 156u8, 60u8, 22u8, 59u8, 103u8, 83u8, 77u8, 15u8, 118u8,
							193u8, 155u8, 97u8, 229u8, 36u8, 119u8, 128u8, 224u8, 162u8, 21u8,
							46u8, 199u8, 221u8, 15u8, 74u8, 59u8, 70u8, 77u8, 218u8, 73u8, 165u8,
						],
					)
				}
				#[doc = " Map from all locked \"stash\" accounts to the controller account."]
				pub fn bonded_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::crypto::AccountId32>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"Bonded",
						Vec::new(),
						[
							35u8, 197u8, 156u8, 60u8, 22u8, 59u8, 103u8, 83u8, 77u8, 15u8, 118u8,
							193u8, 155u8, 97u8, 229u8, 36u8, 119u8, 128u8, 224u8, 162u8, 21u8,
							46u8, 199u8, 221u8, 15u8, 74u8, 59u8, 70u8, 77u8, 218u8, 73u8, 165u8,
						],
					)
				}
				#[doc = " The minimum active bond to become and maintain the role of a nominator."]
				pub fn min_nominator_bond(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"MinNominatorBond",
						vec![],
						[
							187u8, 66u8, 149u8, 226u8, 72u8, 219u8, 57u8, 246u8, 102u8, 47u8, 71u8,
							12u8, 219u8, 204u8, 127u8, 223u8, 58u8, 134u8, 81u8, 165u8, 200u8,
							142u8, 196u8, 158u8, 26u8, 38u8, 165u8, 19u8, 91u8, 251u8, 119u8, 84u8,
						],
					)
				}
				#[doc = " The minimum active bond to become and maintain the role of a validator."]
				pub fn min_validator_bond(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"MinValidatorBond",
						vec![],
						[
							48u8, 105u8, 85u8, 178u8, 142u8, 208u8, 208u8, 19u8, 236u8, 130u8,
							129u8, 169u8, 35u8, 245u8, 66u8, 182u8, 92u8, 20u8, 22u8, 109u8, 155u8,
							174u8, 87u8, 118u8, 242u8, 216u8, 193u8, 154u8, 4u8, 5u8, 66u8, 56u8,
						],
					)
				}
				#[doc = " The minimum amount of commission that validators can set."]
				#[doc = ""]
				#[doc = " If set to `0`, no limit exists."]
				pub fn min_commission(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_arithmetic::per_things::Perbill,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"MinCommission",
						vec![],
						[
							61u8, 101u8, 69u8, 27u8, 220u8, 179u8, 5u8, 71u8, 66u8, 227u8, 84u8,
							98u8, 18u8, 141u8, 183u8, 49u8, 98u8, 46u8, 123u8, 114u8, 198u8, 85u8,
							15u8, 175u8, 243u8, 239u8, 133u8, 129u8, 146u8, 174u8, 254u8, 158u8,
						],
					)
				}
				#[doc = " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."]
				pub fn ledger(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::StakingLedger,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"Ledger",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Blake2_128Concat,
						)],
						[
							117u8, 177u8, 209u8, 237u8, 0u8, 30u8, 228u8, 128u8, 150u8, 69u8,
							138u8, 21u8, 9u8, 74u8, 178u8, 113u8, 238u8, 111u8, 57u8, 222u8, 242u8,
							241u8, 191u8, 50u8, 225u8, 51u8, 99u8, 211u8, 210u8, 163u8, 60u8,
							205u8,
						],
					)
				}
				#[doc = " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."]
				pub fn ledger_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::StakingLedger,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"Ledger",
						Vec::new(),
						[
							117u8, 177u8, 209u8, 237u8, 0u8, 30u8, 228u8, 128u8, 150u8, 69u8,
							138u8, 21u8, 9u8, 74u8, 178u8, 113u8, 238u8, 111u8, 57u8, 222u8, 242u8,
							241u8, 191u8, 50u8, 225u8, 51u8, 99u8, 211u8, 210u8, 163u8, 60u8,
							205u8,
						],
					)
				}
				#[doc = " Where the reward payment should be made. Keyed by stash."]
				pub fn payee(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::RewardDestination<
							::subxt::ext::sp_core::crypto::AccountId32,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"Payee",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							195u8, 125u8, 82u8, 213u8, 216u8, 64u8, 76u8, 63u8, 187u8, 163u8, 20u8,
							230u8, 153u8, 13u8, 189u8, 232u8, 119u8, 118u8, 107u8, 17u8, 102u8,
							245u8, 36u8, 42u8, 232u8, 137u8, 177u8, 165u8, 169u8, 246u8, 199u8,
							57u8,
						],
					)
				}
				#[doc = " Where the reward payment should be made. Keyed by stash."]
				pub fn payee_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::RewardDestination<
							::subxt::ext::sp_core::crypto::AccountId32,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"Payee",
						Vec::new(),
						[
							195u8, 125u8, 82u8, 213u8, 216u8, 64u8, 76u8, 63u8, 187u8, 163u8, 20u8,
							230u8, 153u8, 13u8, 189u8, 232u8, 119u8, 118u8, 107u8, 17u8, 102u8,
							245u8, 36u8, 42u8, 232u8, 137u8, 177u8, 165u8, 169u8, 246u8, 199u8,
							57u8,
						],
					)
				}
				#[doc = " The map from (wannabe) validator stash key to the preferences of that validator."]
				pub fn validators(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::ValidatorPrefs,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"Validators",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							80u8, 77u8, 66u8, 18u8, 197u8, 250u8, 41u8, 185u8, 43u8, 24u8, 149u8,
							164u8, 208u8, 60u8, 144u8, 29u8, 251u8, 195u8, 236u8, 196u8, 108u8,
							58u8, 80u8, 115u8, 246u8, 66u8, 226u8, 241u8, 201u8, 172u8, 229u8,
							152u8,
						],
					)
				}
				#[doc = " The map from (wannabe) validator stash key to the preferences of that validator."]
				pub fn validators_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::ValidatorPrefs,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"Validators",
						Vec::new(),
						[
							80u8, 77u8, 66u8, 18u8, 197u8, 250u8, 41u8, 185u8, 43u8, 24u8, 149u8,
							164u8, 208u8, 60u8, 144u8, 29u8, 251u8, 195u8, 236u8, 196u8, 108u8,
							58u8, 80u8, 115u8, 246u8, 66u8, 226u8, 241u8, 201u8, 172u8, 229u8,
							152u8,
						],
					)
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_validators(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"CounterForValidators",
						vec![],
						[
							139u8, 25u8, 223u8, 6u8, 160u8, 239u8, 212u8, 85u8, 36u8, 185u8, 69u8,
							63u8, 21u8, 156u8, 144u8, 241u8, 112u8, 85u8, 49u8, 78u8, 88u8, 11u8,
							8u8, 48u8, 118u8, 34u8, 62u8, 159u8, 239u8, 122u8, 90u8, 45u8,
						],
					)
				}
				#[doc = " The maximum validator count before we stop allowing new validators to join."]
				#[doc = ""]
				#[doc = " When this value is not set, no limits are enforced."]
				pub fn max_validators_count(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"MaxValidatorsCount",
						vec![],
						[
							250u8, 62u8, 16u8, 68u8, 192u8, 216u8, 236u8, 211u8, 217u8, 9u8, 213u8,
							49u8, 41u8, 37u8, 58u8, 62u8, 131u8, 112u8, 64u8, 26u8, 133u8, 7u8,
							130u8, 1u8, 71u8, 158u8, 14u8, 55u8, 169u8, 239u8, 223u8, 245u8,
						],
					)
				}
				#[doc = " The map from nominator stash key to their nomination preferences, namely the validators that"]
				#[doc = " they wish to support."]
				#[doc = ""]
				#[doc = " Note that the keys of this storage map might become non-decodable in case the"]
				#[doc = " [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators"]
				#[doc = " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`"]
				#[doc = " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable"]
				#[doc = " nominators will effectively not-exist, until they re-submit their preferences such that it"]
				#[doc = " is within the bounds of the newly set `Config::MaxNominations`."]
				#[doc = ""]
				#[doc = " This implies that `::iter_keys().count()` and `::iter().count()` might return different"]
				#[doc = " values for this map. Moreover, the main `::count()` is aligned with the former, namely the"]
				#[doc = " number of keys that exist."]
				#[doc = ""]
				#[doc = " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via"]
				#[doc = " [`Call::chill_other`] dispatchable by anyone."]
				pub fn nominators(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::pallet_staking::Nominations>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"Nominators",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							1u8, 154u8, 55u8, 170u8, 215u8, 64u8, 56u8, 83u8, 254u8, 19u8, 152u8,
							85u8, 164u8, 171u8, 206u8, 129u8, 184u8, 45u8, 221u8, 181u8, 229u8,
							133u8, 200u8, 231u8, 16u8, 146u8, 247u8, 21u8, 77u8, 122u8, 165u8,
							134u8,
						],
					)
				}
				#[doc = " The map from nominator stash key to their nomination preferences, namely the validators that"]
				#[doc = " they wish to support."]
				#[doc = ""]
				#[doc = " Note that the keys of this storage map might become non-decodable in case the"]
				#[doc = " [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators"]
				#[doc = " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`"]
				#[doc = " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable"]
				#[doc = " nominators will effectively not-exist, until they re-submit their preferences such that it"]
				#[doc = " is within the bounds of the newly set `Config::MaxNominations`."]
				#[doc = ""]
				#[doc = " This implies that `::iter_keys().count()` and `::iter().count()` might return different"]
				#[doc = " values for this map. Moreover, the main `::count()` is aligned with the former, namely the"]
				#[doc = " number of keys that exist."]
				#[doc = ""]
				#[doc = " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via"]
				#[doc = " [`Call::chill_other`] dispatchable by anyone."]
				pub fn nominators_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::pallet_staking::Nominations>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"Nominators",
						Vec::new(),
						[
							1u8, 154u8, 55u8, 170u8, 215u8, 64u8, 56u8, 83u8, 254u8, 19u8, 152u8,
							85u8, 164u8, 171u8, 206u8, 129u8, 184u8, 45u8, 221u8, 181u8, 229u8,
							133u8, 200u8, 231u8, 16u8, 146u8, 247u8, 21u8, 77u8, 122u8, 165u8,
							134u8,
						],
					)
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_nominators(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"CounterForNominators",
						vec![],
						[
							31u8, 94u8, 130u8, 138u8, 75u8, 8u8, 38u8, 162u8, 181u8, 5u8, 125u8,
							116u8, 9u8, 51u8, 22u8, 234u8, 40u8, 117u8, 215u8, 46u8, 82u8, 117u8,
							225u8, 1u8, 9u8, 208u8, 83u8, 63u8, 39u8, 187u8, 207u8, 191u8,
						],
					)
				}
				#[doc = " The maximum nominator count before we stop allowing new validators to join."]
				#[doc = ""]
				#[doc = " When this value is not set, no limits are enforced."]
				pub fn max_nominators_count(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"MaxNominatorsCount",
						vec![],
						[
							180u8, 190u8, 180u8, 66u8, 235u8, 173u8, 76u8, 160u8, 197u8, 92u8,
							96u8, 165u8, 220u8, 188u8, 32u8, 119u8, 3u8, 73u8, 86u8, 49u8, 104u8,
							17u8, 186u8, 98u8, 221u8, 175u8, 109u8, 254u8, 207u8, 245u8, 125u8,
							179u8,
						],
					)
				}
				#[doc = " The current era index."]
				#[doc = ""]
				#[doc = " This is the latest planned era, depending on how the Session pallet queues the validator"]
				#[doc = " set, it might be active or not."]
				pub fn current_era(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"CurrentEra",
						vec![],
						[
							105u8, 150u8, 49u8, 122u8, 4u8, 78u8, 8u8, 121u8, 34u8, 136u8, 157u8,
							227u8, 59u8, 139u8, 7u8, 253u8, 7u8, 10u8, 117u8, 71u8, 240u8, 74u8,
							86u8, 36u8, 198u8, 37u8, 153u8, 93u8, 196u8, 22u8, 192u8, 243u8,
						],
					)
				}
				#[doc = " The active era information, it holds index and start."]
				#[doc = ""]
				#[doc = " The active era is the era being currently rewarded. Validator set of this era must be"]
				#[doc = " equal to [`SessionInterface::validators`]."]
				pub fn active_era(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::ActiveEraInfo,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ActiveEra",
						vec![],
						[
							15u8, 112u8, 251u8, 183u8, 108u8, 61u8, 28u8, 71u8, 44u8, 150u8, 162u8,
							4u8, 143u8, 121u8, 11u8, 37u8, 83u8, 29u8, 193u8, 21u8, 210u8, 116u8,
							190u8, 236u8, 213u8, 235u8, 49u8, 97u8, 189u8, 142u8, 251u8, 124u8,
						],
					)
				}
				#[doc = " The session index at which the era start for the last `HISTORY_DEPTH` eras."]
				#[doc = ""]
				#[doc = " Note: This tracks the starting session (i.e. session index when era start being active)"]
				#[doc = " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."]
				pub fn eras_start_session_index(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ErasStartSessionIndex",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							92u8, 157u8, 168u8, 144u8, 132u8, 3u8, 212u8, 80u8, 230u8, 229u8,
							251u8, 218u8, 97u8, 55u8, 79u8, 100u8, 163u8, 91u8, 32u8, 246u8, 122u8,
							78u8, 149u8, 214u8, 103u8, 249u8, 119u8, 20u8, 101u8, 116u8, 110u8,
							185u8,
						],
					)
				}
				#[doc = " The session index at which the era start for the last `HISTORY_DEPTH` eras."]
				#[doc = ""]
				#[doc = " Note: This tracks the starting session (i.e. session index when era start being active)"]
				#[doc = " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."]
				pub fn eras_start_session_index_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ErasStartSessionIndex",
						Vec::new(),
						[
							92u8, 157u8, 168u8, 144u8, 132u8, 3u8, 212u8, 80u8, 230u8, 229u8,
							251u8, 218u8, 97u8, 55u8, 79u8, 100u8, 163u8, 91u8, 32u8, 246u8, 122u8,
							78u8, 149u8, 214u8, 103u8, 249u8, 119u8, 20u8, 101u8, 116u8, 110u8,
							185u8,
						],
					)
				}
				#[doc = " Exposure of validator at era."]
				#[doc = ""]
				#[doc = " This is keyed first by the era index to allow bulk deletion and then the stash account."]
				#[doc = ""]
				#[doc = " Is it removed after `HISTORY_DEPTH` eras."]
				#[doc = " If stakers hasn't been set or has been removed then empty exposure is returned."]
				pub fn eras_stakers(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::Exposure<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ErasStakers",
						vec![
							::subxt::storage::address::StorageMapKey::new(
								_0.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
							::subxt::storage::address::StorageMapKey::new(
								_1.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
						],
						[
							192u8, 50u8, 152u8, 151u8, 92u8, 180u8, 206u8, 15u8, 139u8, 210u8,
							128u8, 65u8, 92u8, 253u8, 43u8, 35u8, 139u8, 171u8, 73u8, 185u8, 32u8,
							78u8, 20u8, 197u8, 154u8, 90u8, 233u8, 231u8, 23u8, 22u8, 187u8, 156u8,
						],
					)
				}
				#[doc = " Exposure of validator at era."]
				#[doc = ""]
				#[doc = " This is keyed first by the era index to allow bulk deletion and then the stash account."]
				#[doc = ""]
				#[doc = " Is it removed after `HISTORY_DEPTH` eras."]
				#[doc = " If stakers hasn't been set or has been removed then empty exposure is returned."]
				pub fn eras_stakers_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::Exposure<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ErasStakers",
						Vec::new(),
						[
							192u8, 50u8, 152u8, 151u8, 92u8, 180u8, 206u8, 15u8, 139u8, 210u8,
							128u8, 65u8, 92u8, 253u8, 43u8, 35u8, 139u8, 171u8, 73u8, 185u8, 32u8,
							78u8, 20u8, 197u8, 154u8, 90u8, 233u8, 231u8, 23u8, 22u8, 187u8, 156u8,
						],
					)
				}
				#[doc = " Clipped Exposure of validator at era."]
				#[doc = ""]
				#[doc = " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the"]
				#[doc = " `T::MaxNominatorRewardedPerValidator` biggest stakers."]
				#[doc = " (Note: the field `total` and `own` of the exposure remains unchanged)."]
				#[doc = " This is used to limit the i/o cost for the nominator payout."]
				#[doc = ""]
				#[doc = " This is keyed fist by the era index to allow bulk deletion and then the stash account."]
				#[doc = ""]
				#[doc = " Is it removed after `HISTORY_DEPTH` eras."]
				#[doc = " If stakers hasn't been set or has been removed then empty exposure is returned."]
				pub fn eras_stakers_clipped(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::Exposure<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ErasStakersClipped",
						vec![
							::subxt::storage::address::StorageMapKey::new(
								_0.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
							::subxt::storage::address::StorageMapKey::new(
								_1.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
						],
						[
							43u8, 159u8, 113u8, 223u8, 122u8, 169u8, 98u8, 153u8, 26u8, 55u8, 71u8,
							119u8, 174u8, 48u8, 158u8, 45u8, 214u8, 26u8, 136u8, 215u8, 46u8,
							161u8, 185u8, 17u8, 174u8, 204u8, 206u8, 246u8, 49u8, 87u8, 134u8,
							169u8,
						],
					)
				}
				#[doc = " Clipped Exposure of validator at era."]
				#[doc = ""]
				#[doc = " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the"]
				#[doc = " `T::MaxNominatorRewardedPerValidator` biggest stakers."]
				#[doc = " (Note: the field `total` and `own` of the exposure remains unchanged)."]
				#[doc = " This is used to limit the i/o cost for the nominator payout."]
				#[doc = ""]
				#[doc = " This is keyed fist by the era index to allow bulk deletion and then the stash account."]
				#[doc = ""]
				#[doc = " Is it removed after `HISTORY_DEPTH` eras."]
				#[doc = " If stakers hasn't been set or has been removed then empty exposure is returned."]
				pub fn eras_stakers_clipped_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::Exposure<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ErasStakersClipped",
						Vec::new(),
						[
							43u8, 159u8, 113u8, 223u8, 122u8, 169u8, 98u8, 153u8, 26u8, 55u8, 71u8,
							119u8, 174u8, 48u8, 158u8, 45u8, 214u8, 26u8, 136u8, 215u8, 46u8,
							161u8, 185u8, 17u8, 174u8, 204u8, 206u8, 246u8, 49u8, 87u8, 134u8,
							169u8,
						],
					)
				}
				#[doc = " Similar to `ErasStakers`, this holds the preferences of validators."]
				#[doc = ""]
				#[doc = " This is keyed first by the era index to allow bulk deletion and then the stash account."]
				#[doc = ""]
				#[doc = " Is it removed after `HISTORY_DEPTH` eras."]
				pub fn eras_validator_prefs(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::ValidatorPrefs,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ErasValidatorPrefs",
						vec![
							::subxt::storage::address::StorageMapKey::new(
								_0.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
							::subxt::storage::address::StorageMapKey::new(
								_1.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
						],
						[
							6u8, 196u8, 209u8, 138u8, 252u8, 18u8, 203u8, 86u8, 129u8, 62u8, 4u8,
							56u8, 234u8, 114u8, 141u8, 136u8, 127u8, 224u8, 142u8, 89u8, 150u8,
							33u8, 31u8, 50u8, 140u8, 108u8, 124u8, 77u8, 188u8, 102u8, 230u8,
							174u8,
						],
					)
				}
				#[doc = " Similar to `ErasStakers`, this holds the preferences of validators."]
				#[doc = ""]
				#[doc = " This is keyed first by the era index to allow bulk deletion and then the stash account."]
				#[doc = ""]
				#[doc = " Is it removed after `HISTORY_DEPTH` eras."]
				pub fn eras_validator_prefs_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::ValidatorPrefs,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ErasValidatorPrefs",
						Vec::new(),
						[
							6u8, 196u8, 209u8, 138u8, 252u8, 18u8, 203u8, 86u8, 129u8, 62u8, 4u8,
							56u8, 234u8, 114u8, 141u8, 136u8, 127u8, 224u8, 142u8, 89u8, 150u8,
							33u8, 31u8, 50u8, 140u8, 108u8, 124u8, 77u8, 188u8, 102u8, 230u8,
							174u8,
						],
					)
				}
				#[doc = " The total validator era payout for the last `HISTORY_DEPTH` eras."]
				#[doc = ""]
				#[doc = " Eras that haven't finished yet or has been removed doesn't have reward."]
				pub fn eras_validator_reward(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ErasValidatorReward",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							87u8, 80u8, 156u8, 123u8, 107u8, 77u8, 203u8, 37u8, 231u8, 84u8, 124u8,
							155u8, 227u8, 212u8, 212u8, 179u8, 84u8, 161u8, 223u8, 255u8, 254u8,
							107u8, 52u8, 89u8, 98u8, 169u8, 136u8, 241u8, 104u8, 3u8, 244u8, 161u8,
						],
					)
				}
				#[doc = " The total validator era payout for the last `HISTORY_DEPTH` eras."]
				#[doc = ""]
				#[doc = " Eras that haven't finished yet or has been removed doesn't have reward."]
				pub fn eras_validator_reward_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ErasValidatorReward",
						Vec::new(),
						[
							87u8, 80u8, 156u8, 123u8, 107u8, 77u8, 203u8, 37u8, 231u8, 84u8, 124u8,
							155u8, 227u8, 212u8, 212u8, 179u8, 84u8, 161u8, 223u8, 255u8, 254u8,
							107u8, 52u8, 89u8, 98u8, 169u8, 136u8, 241u8, 104u8, 3u8, 244u8, 161u8,
						],
					)
				}
				#[doc = " Rewards for the last `HISTORY_DEPTH` eras."]
				#[doc = " If reward hasn't been set or has been removed then 0 reward is returned."]
				pub fn eras_reward_points(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::EraRewardPoints<
							::subxt::ext::sp_core::crypto::AccountId32,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ErasRewardPoints",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							194u8, 29u8, 20u8, 83u8, 200u8, 47u8, 158u8, 102u8, 88u8, 65u8, 24u8,
							255u8, 120u8, 178u8, 23u8, 232u8, 15u8, 64u8, 206u8, 0u8, 170u8, 40u8,
							18u8, 149u8, 45u8, 90u8, 179u8, 127u8, 52u8, 59u8, 37u8, 192u8,
						],
					)
				}
				#[doc = " Rewards for the last `HISTORY_DEPTH` eras."]
				#[doc = " If reward hasn't been set or has been removed then 0 reward is returned."]
				pub fn eras_reward_points_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::EraRewardPoints<
							::subxt::ext::sp_core::crypto::AccountId32,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ErasRewardPoints",
						Vec::new(),
						[
							194u8, 29u8, 20u8, 83u8, 200u8, 47u8, 158u8, 102u8, 88u8, 65u8, 24u8,
							255u8, 120u8, 178u8, 23u8, 232u8, 15u8, 64u8, 206u8, 0u8, 170u8, 40u8,
							18u8, 149u8, 45u8, 90u8, 179u8, 127u8, 52u8, 59u8, 37u8, 192u8,
						],
					)
				}
				#[doc = " The total amount staked for the last `HISTORY_DEPTH` eras."]
				#[doc = " If total hasn't been set or has been removed then 0 stake is returned."]
				pub fn eras_total_stake(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ErasTotalStake",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							224u8, 240u8, 168u8, 69u8, 148u8, 140u8, 249u8, 240u8, 4u8, 46u8, 77u8,
							11u8, 224u8, 65u8, 26u8, 239u8, 1u8, 110u8, 53u8, 11u8, 247u8, 235u8,
							142u8, 234u8, 22u8, 43u8, 24u8, 36u8, 37u8, 43u8, 170u8, 40u8,
						],
					)
				}
				#[doc = " The total amount staked for the last `HISTORY_DEPTH` eras."]
				#[doc = " If total hasn't been set or has been removed then 0 stake is returned."]
				pub fn eras_total_stake_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ErasTotalStake",
						Vec::new(),
						[
							224u8, 240u8, 168u8, 69u8, 148u8, 140u8, 249u8, 240u8, 4u8, 46u8, 77u8,
							11u8, 224u8, 65u8, 26u8, 239u8, 1u8, 110u8, 53u8, 11u8, 247u8, 235u8,
							142u8, 234u8, 22u8, 43u8, 24u8, 36u8, 37u8, 43u8, 170u8, 40u8,
						],
					)
				}
				#[doc = " Mode of era forcing."]
				pub fn force_era(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::pallet_staking::Forcing>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ForceEra",
						vec![],
						[
							221u8, 41u8, 71u8, 21u8, 28u8, 193u8, 65u8, 97u8, 103u8, 37u8, 145u8,
							146u8, 183u8, 194u8, 57u8, 131u8, 214u8, 136u8, 68u8, 156u8, 140u8,
							194u8, 69u8, 151u8, 115u8, 177u8, 92u8, 147u8, 29u8, 40u8, 41u8, 31u8,
						],
					)
				}
				#[doc = " The percentage of the slash that is distributed to reporters."]
				#[doc = ""]
				#[doc = " The rest of the slashed value is handled by the `Slash`."]
				pub fn slash_reward_fraction(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_arithmetic::per_things::Perbill,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"SlashRewardFraction",
						vec![],
						[
							167u8, 79u8, 143u8, 202u8, 199u8, 100u8, 129u8, 162u8, 23u8, 165u8,
							106u8, 170u8, 244u8, 86u8, 144u8, 242u8, 65u8, 207u8, 115u8, 224u8,
							231u8, 155u8, 55u8, 139u8, 101u8, 129u8, 242u8, 196u8, 130u8, 50u8,
							3u8, 117u8,
						],
					)
				}
				#[doc = " The amount of currency given to reporters of a slash event which was"]
				#[doc = " canceled by extraordinary circumstances (e.g. governance)."]
				pub fn canceled_slash_payout(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"CanceledSlashPayout",
						vec![],
						[
							126u8, 218u8, 66u8, 92u8, 82u8, 124u8, 145u8, 161u8, 40u8, 176u8, 14u8,
							211u8, 178u8, 216u8, 8u8, 156u8, 83u8, 14u8, 91u8, 15u8, 200u8, 170u8,
							3u8, 127u8, 141u8, 139u8, 151u8, 98u8, 74u8, 96u8, 238u8, 29u8,
						],
					)
				}
				#[doc = " All unapplied slashes that are queued for later."]
				pub fn unapplied_slashes(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							runtime_types::pallet_staking::UnappliedSlash<
								::subxt::ext::sp_core::crypto::AccountId32,
								::core::primitive::u128,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"UnappliedSlashes",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							130u8, 4u8, 163u8, 163u8, 28u8, 85u8, 34u8, 156u8, 47u8, 125u8, 57u8,
							0u8, 133u8, 176u8, 130u8, 2u8, 175u8, 180u8, 167u8, 203u8, 230u8, 82u8,
							198u8, 183u8, 55u8, 82u8, 221u8, 248u8, 100u8, 173u8, 206u8, 151u8,
						],
					)
				}
				#[doc = " All unapplied slashes that are queued for later."]
				pub fn unapplied_slashes_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							runtime_types::pallet_staking::UnappliedSlash<
								::subxt::ext::sp_core::crypto::AccountId32,
								::core::primitive::u128,
							>,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"UnappliedSlashes",
						Vec::new(),
						[
							130u8, 4u8, 163u8, 163u8, 28u8, 85u8, 34u8, 156u8, 47u8, 125u8, 57u8,
							0u8, 133u8, 176u8, 130u8, 2u8, 175u8, 180u8, 167u8, 203u8, 230u8, 82u8,
							198u8, 183u8, 55u8, 82u8, 221u8, 248u8, 100u8, 173u8, 206u8, 151u8,
						],
					)
				}
				#[doc = " A mapping from still-bonded eras to the first session index of that era."]
				#[doc = ""]
				#[doc = " Must contains information for eras for the range:"]
				#[doc = " `[active_era - bounding_duration; active_era]`"]
				pub fn bonded_eras(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"BondedEras",
						vec![],
						[
							243u8, 162u8, 236u8, 198u8, 122u8, 182u8, 37u8, 55u8, 171u8, 156u8,
							235u8, 223u8, 226u8, 129u8, 89u8, 206u8, 2u8, 155u8, 222u8, 154u8,
							116u8, 124u8, 4u8, 119u8, 155u8, 94u8, 248u8, 30u8, 171u8, 51u8, 78u8,
							106u8,
						],
					)
				}
				#[doc = " All slashing events on validators, mapped by era to the highest slash proportion"]
				#[doc = " and slash value of the era."]
				pub fn validator_slash_in_era(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						runtime_types::sp_arithmetic::per_things::Perbill,
						::core::primitive::u128,
					)>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ValidatorSlashInEra",
						vec![
							::subxt::storage::address::StorageMapKey::new(
								_0.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
							::subxt::storage::address::StorageMapKey::new(
								_1.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
						],
						[
							237u8, 80u8, 3u8, 237u8, 9u8, 40u8, 212u8, 15u8, 251u8, 196u8, 85u8,
							29u8, 27u8, 151u8, 98u8, 122u8, 189u8, 147u8, 205u8, 40u8, 202u8,
							194u8, 158u8, 96u8, 138u8, 16u8, 116u8, 71u8, 140u8, 163u8, 121u8,
							197u8,
						],
					)
				}
				#[doc = " All slashing events on validators, mapped by era to the highest slash proportion"]
				#[doc = " and slash value of the era."]
				pub fn validator_slash_in_era_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						runtime_types::sp_arithmetic::per_things::Perbill,
						::core::primitive::u128,
					)>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ValidatorSlashInEra",
						Vec::new(),
						[
							237u8, 80u8, 3u8, 237u8, 9u8, 40u8, 212u8, 15u8, 251u8, 196u8, 85u8,
							29u8, 27u8, 151u8, 98u8, 122u8, 189u8, 147u8, 205u8, 40u8, 202u8,
							194u8, 158u8, 96u8, 138u8, 16u8, 116u8, 71u8, 140u8, 163u8, 121u8,
							197u8,
						],
					)
				}
				#[doc = " All slashing events on nominators, mapped by era to the highest slash value of the era."]
				pub fn nominator_slash_in_era(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"NominatorSlashInEra",
						vec![
							::subxt::storage::address::StorageMapKey::new(
								_0.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
							::subxt::storage::address::StorageMapKey::new(
								_1.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
						],
						[
							249u8, 85u8, 170u8, 41u8, 179u8, 194u8, 180u8, 12u8, 53u8, 101u8, 80u8,
							96u8, 166u8, 71u8, 239u8, 23u8, 153u8, 19u8, 152u8, 38u8, 138u8, 136u8,
							221u8, 200u8, 18u8, 165u8, 26u8, 228u8, 195u8, 199u8, 62u8, 4u8,
						],
					)
				}
				#[doc = " All slashing events on nominators, mapped by era to the highest slash value of the era."]
				pub fn nominator_slash_in_era_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"NominatorSlashInEra",
						Vec::new(),
						[
							249u8, 85u8, 170u8, 41u8, 179u8, 194u8, 180u8, 12u8, 53u8, 101u8, 80u8,
							96u8, 166u8, 71u8, 239u8, 23u8, 153u8, 19u8, 152u8, 38u8, 138u8, 136u8,
							221u8, 200u8, 18u8, 165u8, 26u8, 228u8, 195u8, 199u8, 62u8, 4u8,
						],
					)
				}
				#[doc = " Slashing spans for stash accounts."]
				pub fn slashing_spans(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::slashing::SlashingSpans,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"SlashingSpans",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							106u8, 115u8, 118u8, 52u8, 89u8, 77u8, 246u8, 5u8, 255u8, 204u8, 44u8,
							5u8, 66u8, 36u8, 227u8, 252u8, 86u8, 159u8, 186u8, 152u8, 196u8, 21u8,
							74u8, 201u8, 133u8, 93u8, 142u8, 191u8, 20u8, 27u8, 218u8, 157u8,
						],
					)
				}
				#[doc = " Slashing spans for stash accounts."]
				pub fn slashing_spans_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::slashing::SlashingSpans,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"SlashingSpans",
						Vec::new(),
						[
							106u8, 115u8, 118u8, 52u8, 89u8, 77u8, 246u8, 5u8, 255u8, 204u8, 44u8,
							5u8, 66u8, 36u8, 227u8, 252u8, 86u8, 159u8, 186u8, 152u8, 196u8, 21u8,
							74u8, 201u8, 133u8, 93u8, 142u8, 191u8, 20u8, 27u8, 218u8, 157u8,
						],
					)
				}
				#[doc = " Records information about the maximum slash of a stash within a slashing span,"]
				#[doc = " as well as how much reward has been paid out."]
				pub fn span_slash(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::slashing::SpanRecord<
							::core::primitive::u128,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"SpanSlash",
						vec![::subxt::storage::address::StorageMapKey::new(
							&(_0.borrow(), _1.borrow()),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							160u8, 63u8, 115u8, 190u8, 233u8, 148u8, 75u8, 3u8, 11u8, 59u8, 184u8,
							220u8, 205u8, 64u8, 28u8, 190u8, 116u8, 210u8, 225u8, 230u8, 224u8,
							163u8, 103u8, 157u8, 100u8, 29u8, 86u8, 167u8, 84u8, 217u8, 109u8,
							200u8,
						],
					)
				}
				#[doc = " Records information about the maximum slash of a stash within a slashing span,"]
				#[doc = " as well as how much reward has been paid out."]
				pub fn span_slash_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_staking::slashing::SpanRecord<
							::core::primitive::u128,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"SpanSlash",
						Vec::new(),
						[
							160u8, 63u8, 115u8, 190u8, 233u8, 148u8, 75u8, 3u8, 11u8, 59u8, 184u8,
							220u8, 205u8, 64u8, 28u8, 190u8, 116u8, 210u8, 225u8, 230u8, 224u8,
							163u8, 103u8, 157u8, 100u8, 29u8, 86u8, 167u8, 84u8, 217u8, 109u8,
							200u8,
						],
					)
				}
				#[doc = " The last planned session scheduled by the session pallet."]
				#[doc = ""]
				#[doc = " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."]
				pub fn current_planned_session(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"CurrentPlannedSession",
						vec![],
						[
							38u8, 22u8, 56u8, 250u8, 17u8, 154u8, 99u8, 37u8, 155u8, 253u8, 100u8,
							117u8, 5u8, 239u8, 31u8, 190u8, 53u8, 241u8, 11u8, 185u8, 163u8, 227u8,
							10u8, 77u8, 210u8, 64u8, 156u8, 218u8, 105u8, 16u8, 1u8, 57u8,
						],
					)
				}
				#[doc = " Indices of validators that have offended in the active era and whether they are currently"]
				#[doc = " disabled."]
				#[doc = ""]
				#[doc = " This value should be a superset of disabled validators since not all offences lead to the"]
				#[doc = " validator being disabled (if there was no slash). This is needed to track the percentage of"]
				#[doc = " validators that have offended in the current era, ensuring a new era is forced if"]
				#[doc = " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find"]
				#[doc = " whether a given validator has previously offended using binary search. It gets cleared when"]
				#[doc = " the era ends."]
				pub fn offending_validators(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<(::core::primitive::u32, ::core::primitive::bool)>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"OffendingValidators",
						vec![],
						[
							94u8, 254u8, 0u8, 50u8, 76u8, 232u8, 51u8, 153u8, 118u8, 14u8, 70u8,
							101u8, 112u8, 215u8, 173u8, 82u8, 182u8, 104u8, 167u8, 103u8, 187u8,
							168u8, 86u8, 16u8, 51u8, 235u8, 51u8, 119u8, 38u8, 154u8, 42u8, 113u8,
						],
					)
				}
				#[doc = " True if network has been upgraded to this version."]
				#[doc = " Storage version of the pallet."]
				#[doc = ""]
				#[doc = " This is set to v7.0.0 for new networks."]
				pub fn storage_version(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::pallet_staking::Releases>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"StorageVersion",
						vec![],
						[
							8u8, 115u8, 68u8, 36u8, 142u8, 21u8, 152u8, 127u8, 211u8, 17u8, 75u8,
							76u8, 65u8, 237u8, 187u8, 193u8, 176u8, 44u8, 19u8, 166u8, 116u8,
							148u8, 110u8, 234u8, 115u8, 254u8, 73u8, 128u8, 111u8, 140u8, 2u8,
							168u8,
						],
					)
				}
				#[doc = " The threshold for when users can start calling `chill_other` for other validators /"]
				#[doc = " nominators. The threshold is compared to the actual number of validators / nominators"]
				#[doc = " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."]
				pub fn chill_threshold(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_arithmetic::per_things::Percent,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Staking",
						"ChillThreshold",
						vec![],
						[
							174u8, 165u8, 249u8, 105u8, 24u8, 151u8, 115u8, 166u8, 199u8, 251u8,
							28u8, 5u8, 50u8, 95u8, 144u8, 110u8, 220u8, 76u8, 14u8, 23u8, 179u8,
							41u8, 11u8, 248u8, 28u8, 154u8, 159u8, 255u8, 156u8, 109u8, 98u8, 92u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Maximum number of nominations per nominator."]
				pub fn max_nominations(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Staking",
						"MaxNominations",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Number of sessions per era."]
				pub fn sessions_per_era(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Staking",
						"SessionsPerEra",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Number of eras that staked funds must remain bonded for."]
				pub fn bonding_duration(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Staking",
						"BondingDuration",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Number of eras that slashes are deferred by, after computation."]
				#[doc = ""]
				#[doc = " This should be less than the bonding duration. Set to 0 if slashes"]
				#[doc = " should be applied immediately, without opportunity for intervention."]
				pub fn slash_defer_duration(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Staking",
						"SlashDeferDuration",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of nominators rewarded for each validator."]
				#[doc = ""]
				#[doc = " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can"]
				#[doc = " claim their reward. This used to limit the i/o cost for the nominator payout."]
				pub fn max_nominator_rewarded_per_validator(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Staking",
						"MaxNominatorRewardedPerValidator",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of `unlocking` chunks a [`StakingLedger`] can have. Effectively"]
				#[doc = " determines how many unique eras a staker may be unbonding in."]
				pub fn max_unlocking_chunks(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Staking",
						"MaxUnlockingChunks",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod offences {
		use super::{root_mod, runtime_types};
		#[doc = "Events type."]
		pub type Event = runtime_types::pallet_offences::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "There is an offence reported of the given `kind` happened at the `session_index` and"]
			#[doc = "(kind-specific) time slot. This event is not deposited for duplicate slashes."]
			#[doc = "\\[kind, timeslot\\]."]
			pub struct Offence {
				pub kind: [::core::primitive::u8; 16usize],
				pub timeslot: ::std::vec::Vec<::core::primitive::u8>,
			}
			impl ::subxt::events::StaticEvent for Offence {
				const PALLET: &'static str = "Offences";
				const EVENT: &'static str = "Offence";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The primary structure that holds all offence records keyed by report identifiers."]
				pub fn reports(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::H256>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_staking::offence::OffenceDetails<
							::subxt::ext::sp_core::crypto::AccountId32,
							(
								::subxt::ext::sp_core::crypto::AccountId32,
								runtime_types::pallet_staking::Exposure<
									::subxt::ext::sp_core::crypto::AccountId32,
									::core::primitive::u128,
								>,
							),
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Offences",
						"Reports",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							144u8, 30u8, 66u8, 199u8, 102u8, 236u8, 175u8, 201u8, 206u8, 170u8,
							55u8, 162u8, 137u8, 120u8, 220u8, 213u8, 57u8, 252u8, 0u8, 88u8, 210u8,
							68u8, 5u8, 25u8, 77u8, 114u8, 204u8, 23u8, 190u8, 32u8, 211u8, 30u8,
						],
					)
				}
				#[doc = " The primary structure that holds all offence records keyed by report identifiers."]
				pub fn reports_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_staking::offence::OffenceDetails<
							::subxt::ext::sp_core::crypto::AccountId32,
							(
								::subxt::ext::sp_core::crypto::AccountId32,
								runtime_types::pallet_staking::Exposure<
									::subxt::ext::sp_core::crypto::AccountId32,
									::core::primitive::u128,
								>,
							),
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Offences",
						"Reports",
						Vec::new(),
						[
							144u8, 30u8, 66u8, 199u8, 102u8, 236u8, 175u8, 201u8, 206u8, 170u8,
							55u8, 162u8, 137u8, 120u8, 220u8, 213u8, 57u8, 252u8, 0u8, 88u8, 210u8,
							68u8, 5u8, 25u8, 77u8, 114u8, 204u8, 23u8, 190u8, 32u8, 211u8, 30u8,
						],
					)
				}
				#[doc = " A vector of reports of the same kind that happened at the same time slot."]
				pub fn concurrent_reports_index(
					&self,
					_0: impl ::std::borrow::Borrow<[::core::primitive::u8; 16usize]>,
					_1: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<::subxt::ext::sp_core::H256>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Offences",
						"ConcurrentReportsIndex",
						vec![
							::subxt::storage::address::StorageMapKey::new(
								_0.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
							::subxt::storage::address::StorageMapKey::new(
								_1.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
						],
						[
							106u8, 21u8, 104u8, 5u8, 4u8, 66u8, 28u8, 70u8, 161u8, 195u8, 238u8,
							28u8, 69u8, 241u8, 221u8, 113u8, 140u8, 103u8, 181u8, 143u8, 60u8,
							177u8, 13u8, 129u8, 224u8, 149u8, 77u8, 32u8, 75u8, 74u8, 101u8, 65u8,
						],
					)
				}
				#[doc = " A vector of reports of the same kind that happened at the same time slot."]
				pub fn concurrent_reports_index_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<::subxt::ext::sp_core::H256>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Offences",
						"ConcurrentReportsIndex",
						Vec::new(),
						[
							106u8, 21u8, 104u8, 5u8, 4u8, 66u8, 28u8, 70u8, 161u8, 195u8, 238u8,
							28u8, 69u8, 241u8, 221u8, 113u8, 140u8, 103u8, 181u8, 143u8, 60u8,
							177u8, 13u8, 129u8, 224u8, 149u8, 77u8, 32u8, 75u8, 74u8, 101u8, 65u8,
						],
					)
				}
				#[doc = " Enumerates all reports of a kind along with the time they happened."]
				#[doc = ""]
				#[doc = " All reports are sorted by the time of offence."]
				#[doc = ""]
				#[doc = " Note that the actual type of this mapping is `Vec<u8>`, this is because values of"]
				#[doc = " different types are not supported at the moment so we are doing the manual serialization."]
				pub fn reports_by_kind_index(
					&self,
					_0: impl ::std::borrow::Borrow<[::core::primitive::u8; 16usize]>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Offences",
						"ReportsByKindIndex",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							162u8, 66u8, 131u8, 48u8, 250u8, 237u8, 179u8, 214u8, 36u8, 137u8,
							226u8, 136u8, 120u8, 61u8, 215u8, 43u8, 164u8, 50u8, 91u8, 164u8, 20u8,
							96u8, 189u8, 100u8, 242u8, 106u8, 21u8, 136u8, 98u8, 215u8, 180u8,
							145u8,
						],
					)
				}
				#[doc = " Enumerates all reports of a kind along with the time they happened."]
				#[doc = ""]
				#[doc = " All reports are sorted by the time of offence."]
				#[doc = ""]
				#[doc = " Note that the actual type of this mapping is `Vec<u8>`, this is because values of"]
				#[doc = " different types are not supported at the moment so we are doing the manual serialization."]
				pub fn reports_by_kind_index_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Offences",
						"ReportsByKindIndex",
						Vec::new(),
						[
							162u8, 66u8, 131u8, 48u8, 250u8, 237u8, 179u8, 214u8, 36u8, 137u8,
							226u8, 136u8, 120u8, 61u8, 215u8, 43u8, 164u8, 50u8, 91u8, 164u8, 20u8,
							96u8, 189u8, 100u8, 242u8, 106u8, 21u8, 136u8, 98u8, 215u8, 180u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod historical {
		use super::{root_mod, runtime_types};
	}
	pub mod session {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetKeys {
				pub keys: runtime_types::kusama_runtime::SessionKeys,
				pub proof: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct PurgeKeys;
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Sets the session key(s) of the function caller to `keys`."]
				#[doc = "Allows an account to set its session key prior to becoming a validator."]
				#[doc = "This doesn't take effect until the next session."]
				#[doc = ""]
				#[doc = "The dispatch origin of this function must be signed."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: `O(1)`. Actual cost depends on the number of length of"]
				#[doc = "  `T::Keys::key_ids()` which is fixed."]
				#[doc = "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`"]
				#[doc = "- DbWrites: `origin account`, `NextKeys`"]
				#[doc = "- DbReads per key id: `KeyOwner`"]
				#[doc = "- DbWrites per key id: `KeyOwner`"]
				#[doc = "# </weight>"]
				pub fn set_keys(
					&self,
					keys: runtime_types::kusama_runtime::SessionKeys,
					proof: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<SetKeys> {
					::subxt::tx::StaticTxPayload::new(
						"Session",
						"set_keys",
						SetKeys { keys, proof },
						[
							17u8, 127u8, 23u8, 71u8, 118u8, 133u8, 89u8, 105u8, 93u8, 52u8, 46u8,
							201u8, 151u8, 19u8, 124u8, 195u8, 228u8, 229u8, 22u8, 216u8, 32u8,
							54u8, 67u8, 222u8, 91u8, 175u8, 206u8, 7u8, 238u8, 118u8, 81u8, 112u8,
						],
					)
				}
				#[doc = "Removes any session key(s) of the function caller."]
				#[doc = ""]
				#[doc = "This doesn't take effect until the next session."]
				#[doc = ""]
				#[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
				#[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
				#[doc = "means being a controller account) or directly convertible into a validator ID (which"]
				#[doc = "usually means being a stash account)."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length"]
				#[doc = "  of `T::Keys::key_ids()` which is fixed."]
				#[doc = "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`"]
				#[doc = "- DbWrites: `NextKeys`, `origin account`"]
				#[doc = "- DbWrites per key id: `KeyOwner`"]
				#[doc = "# </weight>"]
				pub fn purge_keys(&self) -> ::subxt::tx::StaticTxPayload<PurgeKeys> {
					::subxt::tx::StaticTxPayload::new(
						"Session",
						"purge_keys",
						PurgeKeys {},
						[
							200u8, 255u8, 4u8, 213u8, 188u8, 92u8, 99u8, 116u8, 163u8, 152u8, 29u8,
							35u8, 133u8, 119u8, 246u8, 44u8, 91u8, 31u8, 145u8, 23u8, 213u8, 64u8,
							71u8, 242u8, 207u8, 239u8, 231u8, 37u8, 61u8, 63u8, 190u8, 35u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_session::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "New session has happened. Note that the argument is the session index, not the"]
			#[doc = "block number as the type might suggest."]
			pub struct NewSession {
				pub session_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for NewSession {
				const PALLET: &'static str = "Session";
				const EVENT: &'static str = "NewSession";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The current set of validators."]
				pub fn validators(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Session",
						"Validators",
						vec![],
						[
							144u8, 235u8, 200u8, 43u8, 151u8, 57u8, 147u8, 172u8, 201u8, 202u8,
							242u8, 96u8, 57u8, 76u8, 124u8, 77u8, 42u8, 113u8, 218u8, 220u8, 230u8,
							32u8, 151u8, 152u8, 172u8, 106u8, 60u8, 227u8, 122u8, 118u8, 137u8,
							68u8,
						],
					)
				}
				#[doc = " Current index of the session."]
				pub fn current_index(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Session",
						"CurrentIndex",
						vec![],
						[
							148u8, 179u8, 159u8, 15u8, 197u8, 95u8, 214u8, 30u8, 209u8, 251u8,
							183u8, 231u8, 91u8, 25u8, 181u8, 191u8, 143u8, 252u8, 227u8, 80u8,
							159u8, 66u8, 194u8, 67u8, 113u8, 74u8, 111u8, 91u8, 218u8, 187u8,
							130u8, 40u8,
						],
					)
				}
				#[doc = " True if the underlying economic identities or weighting behind the validators"]
				#[doc = " has changed in the queued validator set."]
				pub fn queued_changed(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::bool>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Session",
						"QueuedChanged",
						vec![],
						[
							105u8, 140u8, 235u8, 218u8, 96u8, 100u8, 252u8, 10u8, 58u8, 221u8,
							244u8, 251u8, 67u8, 91u8, 80u8, 202u8, 152u8, 42u8, 50u8, 113u8, 200u8,
							247u8, 59u8, 213u8, 77u8, 195u8, 1u8, 150u8, 220u8, 18u8, 245u8, 46u8,
						],
					)
				}
				#[doc = " The queued keys for the next session. When the next session begins, these keys"]
				#[doc = " will be used to determine the validator's session keys."]
				pub fn queued_keys(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<(
							::subxt::ext::sp_core::crypto::AccountId32,
							runtime_types::kusama_runtime::SessionKeys,
						)>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Session",
						"QueuedKeys",
						vec![],
						[
							197u8, 174u8, 245u8, 219u8, 36u8, 118u8, 73u8, 184u8, 156u8, 93u8,
							167u8, 107u8, 142u8, 7u8, 41u8, 51u8, 77u8, 191u8, 68u8, 95u8, 71u8,
							76u8, 253u8, 137u8, 73u8, 194u8, 169u8, 234u8, 217u8, 76u8, 157u8,
							223u8,
						],
					)
				}
				#[doc = " Indices of disabled validators."]
				#[doc = ""]
				#[doc = " The vec is always kept sorted so that we can find whether a given validator is"]
				#[doc = " disabled using binary search. It gets cleared when `on_session_ending` returns"]
				#[doc = " a new set of identities."]
				pub fn disabled_validators(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u32>>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Session",
						"DisabledValidators",
						vec![],
						[
							135u8, 22u8, 22u8, 97u8, 82u8, 217u8, 144u8, 141u8, 121u8, 240u8,
							189u8, 16u8, 176u8, 88u8, 177u8, 31u8, 20u8, 242u8, 73u8, 104u8, 11u8,
							110u8, 214u8, 34u8, 52u8, 217u8, 106u8, 33u8, 174u8, 174u8, 198u8,
							84u8,
						],
					)
				}
				#[doc = " The next session keys for a validator."]
				pub fn next_keys(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::kusama_runtime::SessionKeys>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Session",
						"NextKeys",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							94u8, 197u8, 147u8, 245u8, 165u8, 97u8, 186u8, 57u8, 142u8, 66u8,
							132u8, 213u8, 126u8, 3u8, 77u8, 88u8, 191u8, 33u8, 82u8, 153u8, 11u8,
							109u8, 96u8, 252u8, 193u8, 171u8, 158u8, 131u8, 29u8, 192u8, 248u8,
							166u8,
						],
					)
				}
				#[doc = " The next session keys for a validator."]
				pub fn next_keys_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::kusama_runtime::SessionKeys>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Session",
						"NextKeys",
						Vec::new(),
						[
							94u8, 197u8, 147u8, 245u8, 165u8, 97u8, 186u8, 57u8, 142u8, 66u8,
							132u8, 213u8, 126u8, 3u8, 77u8, 88u8, 191u8, 33u8, 82u8, 153u8, 11u8,
							109u8, 96u8, 252u8, 193u8, 171u8, 158u8, 131u8, 29u8, 192u8, 248u8,
							166u8,
						],
					)
				}
				#[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
				pub fn key_owner(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::sp_core::crypto::KeyTypeId>,
					_1: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::crypto::AccountId32>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Session",
						"KeyOwner",
						vec![::subxt::storage::address::StorageMapKey::new(
							&(_0.borrow(), _1.borrow()),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							4u8, 91u8, 25u8, 84u8, 250u8, 201u8, 174u8, 129u8, 201u8, 58u8, 197u8,
							199u8, 137u8, 240u8, 118u8, 33u8, 99u8, 2u8, 195u8, 57u8, 53u8, 172u8,
							0u8, 148u8, 203u8, 144u8, 149u8, 64u8, 135u8, 254u8, 242u8, 215u8,
						],
					)
				}
				#[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
				pub fn key_owner_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::crypto::AccountId32>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Session",
						"KeyOwner",
						Vec::new(),
						[
							4u8, 91u8, 25u8, 84u8, 250u8, 201u8, 174u8, 129u8, 201u8, 58u8, 197u8,
							199u8, 137u8, 240u8, 118u8, 33u8, 99u8, 2u8, 195u8, 57u8, 53u8, 172u8,
							0u8, 148u8, 203u8, 144u8, 149u8, 64u8, 135u8, 254u8, 242u8, 215u8,
						],
					)
				}
			}
		}
	}
	pub mod grandpa {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ReportEquivocation {
				pub equivocation_proof: ::std::boxed::Box<
					runtime_types::sp_finality_grandpa::EquivocationProof<
						::subxt::ext::sp_core::H256,
						::core::primitive::u32,
					>,
				>,
				pub key_owner_proof: runtime_types::sp_session::MembershipProof,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ReportEquivocationUnsigned {
				pub equivocation_proof: ::std::boxed::Box<
					runtime_types::sp_finality_grandpa::EquivocationProof<
						::subxt::ext::sp_core::H256,
						::core::primitive::u32,
					>,
				>,
				pub key_owner_proof: runtime_types::sp_session::MembershipProof,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct NoteStalled {
				pub delay: ::core::primitive::u32,
				pub best_finalized_block_number: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Report voter equivocation/misbehavior. This method will verify the"]
				#[doc = "equivocation proof and validate the given key ownership proof"]
				#[doc = "against the extracted offender. If both are valid, the offence"]
				#[doc = "will be reported."]
				pub fn report_equivocation(
					&self,
					equivocation_proof: runtime_types::sp_finality_grandpa::EquivocationProof<
						::subxt::ext::sp_core::H256,
						::core::primitive::u32,
					>,
					key_owner_proof: runtime_types::sp_session::MembershipProof,
				) -> ::subxt::tx::StaticTxPayload<ReportEquivocation> {
					::subxt::tx::StaticTxPayload::new(
						"Grandpa",
						"report_equivocation",
						ReportEquivocation {
							equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
							key_owner_proof,
						},
						[
							156u8, 162u8, 189u8, 89u8, 60u8, 156u8, 129u8, 176u8, 62u8, 35u8,
							214u8, 7u8, 68u8, 245u8, 130u8, 117u8, 30u8, 3u8, 73u8, 218u8, 142u8,
							82u8, 13u8, 141u8, 124u8, 19u8, 53u8, 138u8, 70u8, 4u8, 40u8, 32u8,
						],
					)
				}
				#[doc = "Report voter equivocation/misbehavior. This method will verify the"]
				#[doc = "equivocation proof and validate the given key ownership proof"]
				#[doc = "against the extracted offender. If both are valid, the offence"]
				#[doc = "will be reported."]
				#[doc = ""]
				#[doc = "This extrinsic must be called unsigned and it is expected that only"]
				#[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
				#[doc = "if the block author is defined it will be defined as the equivocation"]
				#[doc = "reporter."]
				pub fn report_equivocation_unsigned(
					&self,
					equivocation_proof: runtime_types::sp_finality_grandpa::EquivocationProof<
						::subxt::ext::sp_core::H256,
						::core::primitive::u32,
					>,
					key_owner_proof: runtime_types::sp_session::MembershipProof,
				) -> ::subxt::tx::StaticTxPayload<ReportEquivocationUnsigned> {
					::subxt::tx::StaticTxPayload::new(
						"Grandpa",
						"report_equivocation_unsigned",
						ReportEquivocationUnsigned {
							equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
							key_owner_proof,
						},
						[
							166u8, 26u8, 217u8, 185u8, 215u8, 37u8, 174u8, 170u8, 137u8, 160u8,
							151u8, 43u8, 246u8, 86u8, 58u8, 18u8, 248u8, 73u8, 99u8, 161u8, 158u8,
							93u8, 212u8, 186u8, 224u8, 253u8, 234u8, 18u8, 151u8, 111u8, 227u8,
							249u8,
						],
					)
				}
				#[doc = "Note that the current authority set of the GRANDPA finality gadget has stalled."]
				#[doc = ""]
				#[doc = "This will trigger a forced authority set change at the beginning of the next session, to"]
				#[doc = "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume"]
				#[doc = "that the block signalling the forced change will not be re-orged e.g. 1000 blocks."]
				#[doc = "The block production rate (which may be slowed down because of finality lagging) should"]
				#[doc = "be taken into account when choosing the `delay`. The GRANDPA voters based on the new"]
				#[doc = "authority will start voting on top of `best_finalized_block_number` for new finalized"]
				#[doc = "blocks. `best_finalized_block_number` should be the highest of the latest finalized"]
				#[doc = "block of all validators of the new authority set."]
				#[doc = ""]
				#[doc = "Only callable by root."]
				pub fn note_stalled(
					&self,
					delay: ::core::primitive::u32,
					best_finalized_block_number: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<NoteStalled> {
					::subxt::tx::StaticTxPayload::new(
						"Grandpa",
						"note_stalled",
						NoteStalled { delay, best_finalized_block_number },
						[
							197u8, 236u8, 137u8, 32u8, 46u8, 200u8, 144u8, 13u8, 89u8, 181u8,
							235u8, 73u8, 167u8, 131u8, 174u8, 93u8, 42u8, 136u8, 238u8, 59u8,
							129u8, 60u8, 83u8, 100u8, 5u8, 182u8, 99u8, 250u8, 145u8, 180u8, 1u8,
							199u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_grandpa::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "New authority set has been applied."]
			pub struct NewAuthorities {
				pub authority_set: ::std::vec::Vec<(
					runtime_types::sp_finality_grandpa::app::Public,
					::core::primitive::u64,
				)>,
			}
			impl ::subxt::events::StaticEvent for NewAuthorities {
				const PALLET: &'static str = "Grandpa";
				const EVENT: &'static str = "NewAuthorities";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Current authority set has been paused."]
			pub struct Paused;
			impl ::subxt::events::StaticEvent for Paused {
				const PALLET: &'static str = "Grandpa";
				const EVENT: &'static str = "Paused";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Current authority set has been resumed."]
			pub struct Resumed;
			impl ::subxt::events::StaticEvent for Resumed {
				const PALLET: &'static str = "Grandpa";
				const EVENT: &'static str = "Resumed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " State of the current authority set."]
				pub fn state(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_grandpa::StoredState<::core::primitive::u32>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Grandpa",
						"State",
						vec![],
						[
							211u8, 149u8, 114u8, 217u8, 206u8, 194u8, 115u8, 67u8, 12u8, 218u8,
							246u8, 213u8, 208u8, 29u8, 216u8, 104u8, 2u8, 39u8, 123u8, 172u8,
							252u8, 210u8, 52u8, 129u8, 147u8, 237u8, 244u8, 68u8, 252u8, 169u8,
							97u8, 148u8,
						],
					)
				}
				#[doc = " Pending change: (signaled at, scheduled change)."]
				pub fn pending_change(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_grandpa::StoredPendingChange<::core::primitive::u32>,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Grandpa",
						"PendingChange",
						vec![],
						[
							178u8, 24u8, 140u8, 7u8, 8u8, 196u8, 18u8, 58u8, 3u8, 226u8, 181u8,
							47u8, 155u8, 160u8, 70u8, 12u8, 75u8, 189u8, 38u8, 255u8, 104u8, 141u8,
							64u8, 34u8, 134u8, 201u8, 102u8, 21u8, 75u8, 81u8, 218u8, 60u8,
						],
					)
				}
				#[doc = " next block number where we can force a change."]
				pub fn next_forced(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Grandpa",
						"NextForced",
						vec![],
						[
							99u8, 43u8, 245u8, 201u8, 60u8, 9u8, 122u8, 99u8, 188u8, 29u8, 67u8,
							6u8, 193u8, 133u8, 179u8, 67u8, 202u8, 208u8, 62u8, 179u8, 19u8, 169u8,
							196u8, 119u8, 107u8, 75u8, 100u8, 3u8, 121u8, 18u8, 80u8, 156u8,
						],
					)
				}
				#[doc = " `true` if we are currently stalled."]
				pub fn stalled(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Grandpa",
						"Stalled",
						vec![],
						[
							219u8, 8u8, 37u8, 78u8, 150u8, 55u8, 0u8, 57u8, 201u8, 170u8, 186u8,
							189u8, 56u8, 161u8, 44u8, 15u8, 53u8, 178u8, 224u8, 208u8, 231u8,
							109u8, 14u8, 209u8, 57u8, 205u8, 237u8, 153u8, 231u8, 156u8, 24u8,
							185u8,
						],
					)
				}
				#[doc = " The number of changes (both in terms of keys and underlying economic responsibilities)"]
				#[doc = " in the \"set\" of Grandpa validators from genesis."]
				pub fn current_set_id(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Grandpa",
						"CurrentSetId",
						vec![],
						[
							129u8, 7u8, 62u8, 101u8, 199u8, 60u8, 56u8, 33u8, 54u8, 158u8, 20u8,
							178u8, 244u8, 145u8, 189u8, 197u8, 157u8, 163u8, 116u8, 36u8, 105u8,
							52u8, 149u8, 244u8, 108u8, 94u8, 109u8, 111u8, 244u8, 137u8, 7u8,
							108u8,
						],
					)
				}
				#[doc = " A mapping from grandpa set ID to the index of the *most recent* session for which its"]
				#[doc = " members were responsible."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: `SetId` is not under user control."]
				pub fn set_id_session(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u64>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Grandpa",
						"SetIdSession",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							91u8, 175u8, 145u8, 127u8, 242u8, 81u8, 13u8, 231u8, 110u8, 11u8,
							166u8, 169u8, 103u8, 146u8, 123u8, 133u8, 157u8, 15u8, 33u8, 234u8,
							108u8, 13u8, 88u8, 115u8, 254u8, 9u8, 145u8, 199u8, 102u8, 47u8, 53u8,
							134u8,
						],
					)
				}
				#[doc = " A mapping from grandpa set ID to the index of the *most recent* session for which its"]
				#[doc = " members were responsible."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: `SetId` is not under user control."]
				pub fn set_id_session_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Grandpa",
						"SetIdSession",
						Vec::new(),
						[
							91u8, 175u8, 145u8, 127u8, 242u8, 81u8, 13u8, 231u8, 110u8, 11u8,
							166u8, 169u8, 103u8, 146u8, 123u8, 133u8, 157u8, 15u8, 33u8, 234u8,
							108u8, 13u8, 88u8, 115u8, 254u8, 9u8, 145u8, 199u8, 102u8, 47u8, 53u8,
							134u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Max Authorities in use"]
				pub fn max_authorities(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Grandpa",
						"MaxAuthorities",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod im_online {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Heartbeat {
				pub heartbeat: runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
				pub signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "# <weight>"]
				#[doc = "- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is"]
				#[doc = "  length of `heartbeat.network_state.external_address`"]
				#[doc = "  - `O(K)`: decoding of length `K`"]
				#[doc = "  - `O(E)`: decoding/encoding of length `E`"]
				#[doc = "- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,"]
				#[doc = "  `ReceivedHeartbeats`"]
				#[doc = "- DbWrites: `ReceivedHeartbeats`"]
				#[doc = "# </weight>"]
				pub fn heartbeat(
					&self,
					heartbeat: runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
					signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
				) -> ::subxt::tx::StaticTxPayload<Heartbeat> {
					::subxt::tx::StaticTxPayload::new(
						"ImOnline",
						"heartbeat",
						Heartbeat { heartbeat, signature },
						[
							212u8, 23u8, 174u8, 246u8, 60u8, 220u8, 178u8, 137u8, 53u8, 146u8,
							165u8, 225u8, 179u8, 209u8, 233u8, 152u8, 129u8, 210u8, 126u8, 32u8,
							216u8, 22u8, 76u8, 196u8, 255u8, 128u8, 246u8, 161u8, 30u8, 186u8,
							249u8, 34u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_im_online::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A new heartbeat was received from `AuthorityId`."]
			pub struct HeartbeatReceived {
				pub authority_id: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
			}
			impl ::subxt::events::StaticEvent for HeartbeatReceived {
				const PALLET: &'static str = "ImOnline";
				const EVENT: &'static str = "HeartbeatReceived";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "At the end of the session, no offence was committed."]
			pub struct AllGood;
			impl ::subxt::events::StaticEvent for AllGood {
				const PALLET: &'static str = "ImOnline";
				const EVENT: &'static str = "AllGood";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "At the end of the session, at least one validator was found to be offline."]
			pub struct SomeOffline {
				pub offline: ::std::vec::Vec<(
					::subxt::ext::sp_core::crypto::AccountId32,
					runtime_types::pallet_staking::Exposure<
						::subxt::ext::sp_core::crypto::AccountId32,
						::core::primitive::u128,
					>,
				)>,
			}
			impl ::subxt::events::StaticEvent for SomeOffline {
				const PALLET: &'static str = "ImOnline";
				const EVENT: &'static str = "SomeOffline";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The block number after which it's ok to send heartbeats in the current"]
				#[doc = " session."]
				#[doc = ""]
				#[doc = " At the beginning of each session we set this to a value that should fall"]
				#[doc = " roughly in the middle of the session duration. The idea is to first wait for"]
				#[doc = " the validators to produce a block in the current session, so that the"]
				#[doc = " heartbeat later on will not be necessary."]
				#[doc = ""]
				#[doc = " This value will only be used as a fallback if we fail to get a proper session"]
				#[doc = " progress estimate from `NextSessionRotation`, as those estimates should be"]
				#[doc = " more accurate then the value we calculate for `HeartbeatAfter`."]
				pub fn heartbeat_after(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ImOnline",
						"HeartbeatAfter",
						vec![],
						[
							108u8, 100u8, 85u8, 198u8, 226u8, 122u8, 94u8, 225u8, 97u8, 154u8,
							135u8, 95u8, 106u8, 28u8, 185u8, 78u8, 192u8, 196u8, 35u8, 191u8, 12u8,
							19u8, 163u8, 46u8, 232u8, 235u8, 193u8, 81u8, 126u8, 204u8, 25u8,
							228u8,
						],
					)
				}
				#[doc = " The current set of keys that may issue a heartbeat."]
				pub fn keys(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<
							runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ImOnline",
						"Keys",
						vec![],
						[
							6u8, 198u8, 221u8, 58u8, 14u8, 166u8, 245u8, 103u8, 191u8, 20u8, 69u8,
							233u8, 147u8, 245u8, 24u8, 64u8, 207u8, 180u8, 39u8, 208u8, 252u8,
							236u8, 247u8, 112u8, 187u8, 97u8, 70u8, 11u8, 248u8, 148u8, 208u8,
							106u8,
						],
					)
				}
				#[doc = " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to"]
				#[doc = " `WrapperOpaque<BoundedOpaqueNetworkState>`."]
				pub fn received_heartbeats(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::frame_support::traits::misc::WrapperOpaque<
							runtime_types::pallet_im_online::BoundedOpaqueNetworkState,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ImOnline",
						"ReceivedHeartbeats",
						vec![
							::subxt::storage::address::StorageMapKey::new(
								_0.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
							::subxt::storage::address::StorageMapKey::new(
								_1.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
						],
						[
							233u8, 128u8, 140u8, 233u8, 55u8, 146u8, 172u8, 54u8, 54u8, 57u8,
							141u8, 106u8, 168u8, 59u8, 147u8, 253u8, 119u8, 48u8, 50u8, 251u8,
							242u8, 109u8, 251u8, 2u8, 136u8, 80u8, 146u8, 121u8, 180u8, 219u8,
							245u8, 37u8,
						],
					)
				}
				#[doc = " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to"]
				#[doc = " `WrapperOpaque<BoundedOpaqueNetworkState>`."]
				pub fn received_heartbeats_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::frame_support::traits::misc::WrapperOpaque<
							runtime_types::pallet_im_online::BoundedOpaqueNetworkState,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ImOnline",
						"ReceivedHeartbeats",
						Vec::new(),
						[
							233u8, 128u8, 140u8, 233u8, 55u8, 146u8, 172u8, 54u8, 54u8, 57u8,
							141u8, 106u8, 168u8, 59u8, 147u8, 253u8, 119u8, 48u8, 50u8, 251u8,
							242u8, 109u8, 251u8, 2u8, 136u8, 80u8, 146u8, 121u8, 180u8, 219u8,
							245u8, 37u8,
						],
					)
				}
				#[doc = " For each session index, we keep a mapping of `ValidatorId<T>` to the"]
				#[doc = " number of blocks authored by the given authority."]
				pub fn authored_blocks(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ImOnline",
						"AuthoredBlocks",
						vec![
							::subxt::storage::address::StorageMapKey::new(
								_0.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
							::subxt::storage::address::StorageMapKey::new(
								_1.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
						],
						[
							50u8, 4u8, 242u8, 240u8, 247u8, 184u8, 114u8, 245u8, 233u8, 170u8,
							24u8, 197u8, 18u8, 245u8, 8u8, 28u8, 33u8, 115u8, 166u8, 245u8, 221u8,
							223u8, 56u8, 144u8, 33u8, 139u8, 10u8, 227u8, 228u8, 223u8, 103u8,
							151u8,
						],
					)
				}
				#[doc = " For each session index, we keep a mapping of `ValidatorId<T>` to the"]
				#[doc = " number of blocks authored by the given authority."]
				pub fn authored_blocks_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ImOnline",
						"AuthoredBlocks",
						Vec::new(),
						[
							50u8, 4u8, 242u8, 240u8, 247u8, 184u8, 114u8, 245u8, 233u8, 170u8,
							24u8, 197u8, 18u8, 245u8, 8u8, 28u8, 33u8, 115u8, 166u8, 245u8, 221u8,
							223u8, 56u8, 144u8, 33u8, 139u8, 10u8, 227u8, 228u8, 223u8, 103u8,
							151u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " A configuration for base priority of unsigned transactions."]
				#[doc = ""]
				#[doc = " This is exposed so that it can be tuned for particular runtime, when"]
				#[doc = " multiple pallets send unsigned transactions."]
				pub fn unsigned_priority(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"ImOnline",
						"UnsignedPriority",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
			}
		}
	}
	pub mod authority_discovery {
		use super::{root_mod, runtime_types};
	}
	pub mod democracy {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Propose {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Second {
				#[codec(compact)]
				pub proposal: ::core::primitive::u32,
				#[codec(compact)]
				pub seconds_upper_bound: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Vote {
				#[codec(compact)]
				pub ref_index: ::core::primitive::u32,
				pub vote:
					runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct EmergencyCancel {
				pub ref_index: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ExternalPropose {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ExternalProposeMajority {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ExternalProposeDefault {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct FastTrack {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub voting_period: ::core::primitive::u32,
				pub delay: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct VetoExternal {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct CancelReferendum {
				#[codec(compact)]
				pub ref_index: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct CancelQueued {
				pub which: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Delegate {
				pub to: ::subxt::ext::sp_core::crypto::AccountId32,
				pub conviction: runtime_types::pallet_democracy::conviction::Conviction,
				pub balance: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Undelegate;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ClearPublicProposals;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct NotePreimage {
				pub encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct NotePreimageOperational {
				pub encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct NoteImminentPreimage {
				pub encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct NoteImminentPreimageOperational {
				pub encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ReapPreimage {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				#[codec(compact)]
				pub proposal_len_upper_bound: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Unlock {
				pub target: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct RemoveVote {
				pub index: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RemoveOtherVote {
				pub target: ::subxt::ext::sp_core::crypto::AccountId32,
				pub index: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct EnactProposal {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub index: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Blacklist {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct CancelProposal {
				#[codec(compact)]
				pub prop_index: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Propose a sensitive action to be taken."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_ and the sender must"]
				#[doc = "have funds to cover the deposit."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The hash of the proposal preimage."]
				#[doc = "- `value`: The amount of deposit (must be at least `MinimumDeposit`)."]
				#[doc = ""]
				#[doc = "Emits `Proposed`."]
				#[doc = ""]
				#[doc = "Weight: `O(p)`"]
				pub fn propose(
					&self,
					proposal_hash: ::subxt::ext::sp_core::H256,
					value: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<Propose> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"propose",
						Propose { proposal_hash, value },
						[
							151u8, 2u8, 117u8, 57u8, 201u8, 246u8, 181u8, 198u8, 83u8, 74u8, 99u8,
							211u8, 237u8, 53u8, 90u8, 173u8, 161u8, 250u8, 139u8, 253u8, 223u8,
							251u8, 39u8, 108u8, 254u8, 192u8, 233u8, 23u8, 9u8, 99u8, 169u8, 195u8,
						],
					)
				}
				#[doc = "Signals agreement with a particular proposal."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_ and the sender"]
				#[doc = "must have funds to cover the deposit, equal to the original deposit."]
				#[doc = ""]
				#[doc = "- `proposal`: The index of the proposal to second."]
				#[doc = "- `seconds_upper_bound`: an upper bound on the current number of seconds on this"]
				#[doc = "  proposal. Extrinsic is weighted according to this value with no refund."]
				#[doc = ""]
				#[doc = "Weight: `O(S)` where S is the number of seconds a proposal already has."]
				pub fn second(
					&self,
					proposal: ::core::primitive::u32,
					seconds_upper_bound: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<Second> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"second",
						Second { proposal, seconds_upper_bound },
						[
							152u8, 56u8, 134u8, 181u8, 88u8, 224u8, 68u8, 238u8, 231u8, 78u8,
							237u8, 142u8, 133u8, 16u8, 93u8, 63u8, 253u8, 81u8, 96u8, 200u8, 43u8,
							21u8, 249u8, 92u8, 78u8, 24u8, 101u8, 217u8, 143u8, 16u8, 213u8, 244u8,
						],
					)
				}
				#[doc = "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;"]
				#[doc = "otherwise it is a vote to keep the status quo."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `ref_index`: The index of the referendum to vote for."]
				#[doc = "- `vote`: The vote configuration."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` where R is the number of referendums the voter has voted on."]
				pub fn vote(
					&self,
					ref_index: ::core::primitive::u32,
					vote: runtime_types::pallet_democracy::vote::AccountVote<
						::core::primitive::u128,
					>,
				) -> ::subxt::tx::StaticTxPayload<Vote> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"vote",
						Vote { ref_index, vote },
						[
							138u8, 213u8, 229u8, 111u8, 1u8, 191u8, 73u8, 3u8, 145u8, 28u8, 44u8,
							88u8, 163u8, 188u8, 129u8, 188u8, 64u8, 15u8, 64u8, 103u8, 250u8, 97u8,
							234u8, 188u8, 29u8, 205u8, 51u8, 6u8, 116u8, 58u8, 156u8, 201u8,
						],
					)
				}
				#[doc = "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same"]
				#[doc = "referendum."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `CancellationOrigin`."]
				#[doc = ""]
				#[doc = "-`ref_index`: The index of the referendum to cancel."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`."]
				pub fn emergency_cancel(
					&self,
					ref_index: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<EmergencyCancel> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"emergency_cancel",
						EmergencyCancel { ref_index },
						[
							139u8, 213u8, 133u8, 75u8, 34u8, 206u8, 124u8, 245u8, 35u8, 237u8,
							132u8, 92u8, 49u8, 167u8, 117u8, 80u8, 188u8, 93u8, 198u8, 237u8,
							132u8, 77u8, 195u8, 65u8, 29u8, 37u8, 86u8, 74u8, 214u8, 119u8, 71u8,
							204u8,
						],
					)
				}
				#[doc = "Schedule a referendum to be tabled once it is legal to schedule an external"]
				#[doc = "referendum."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `ExternalOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
				#[doc = ""]
				#[doc = "Weight: `O(V)` with V number of vetoers in the blacklist of proposal."]
				#[doc = "  Decoding vec of length V. Charged as maximum"]
				pub fn external_propose(
					&self,
					proposal_hash: ::subxt::ext::sp_core::H256,
				) -> ::subxt::tx::StaticTxPayload<ExternalPropose> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"external_propose",
						ExternalPropose { proposal_hash },
						[
							8u8, 206u8, 229u8, 218u8, 203u8, 208u8, 253u8, 113u8, 43u8, 62u8,
							110u8, 155u8, 123u8, 35u8, 187u8, 211u8, 180u8, 225u8, 41u8, 30u8,
							204u8, 110u8, 202u8, 210u8, 143u8, 84u8, 117u8, 20u8, 215u8, 110u8,
							211u8, 89u8,
						],
					)
				}
				#[doc = "Schedule a majority-carries referendum to be tabled next once it is legal to schedule"]
				#[doc = "an external referendum."]
				#[doc = ""]
				#[doc = "The dispatch of this call must be `ExternalMajorityOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
				#[doc = ""]
				#[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
				#[doc = "pre-scheduled `external_propose` call."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`"]
				pub fn external_propose_majority(
					&self,
					proposal_hash: ::subxt::ext::sp_core::H256,
				) -> ::subxt::tx::StaticTxPayload<ExternalProposeMajority> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"external_propose_majority",
						ExternalProposeMajority { proposal_hash },
						[
							36u8, 47u8, 192u8, 177u8, 164u8, 82u8, 109u8, 215u8, 98u8, 28u8, 47u8,
							237u8, 159u8, 233u8, 53u8, 9u8, 158u8, 134u8, 232u8, 249u8, 55u8,
							189u8, 48u8, 133u8, 201u8, 46u8, 237u8, 158u8, 181u8, 163u8, 166u8,
							213u8,
						],
					)
				}
				#[doc = "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to"]
				#[doc = "schedule an external referendum."]
				#[doc = ""]
				#[doc = "The dispatch of this call must be `ExternalDefaultOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
				#[doc = ""]
				#[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
				#[doc = "pre-scheduled `external_propose` call."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`"]
				pub fn external_propose_default(
					&self,
					proposal_hash: ::subxt::ext::sp_core::H256,
				) -> ::subxt::tx::StaticTxPayload<ExternalProposeDefault> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"external_propose_default",
						ExternalProposeDefault { proposal_hash },
						[
							32u8, 100u8, 249u8, 175u8, 187u8, 77u8, 30u8, 65u8, 90u8, 103u8, 251u8,
							21u8, 21u8, 220u8, 8u8, 118u8, 97u8, 160u8, 152u8, 122u8, 71u8, 140u8,
							96u8, 8u8, 245u8, 74u8, 112u8, 164u8, 55u8, 130u8, 38u8, 14u8,
						],
					)
				}
				#[doc = "Schedule the currently externally-proposed majority-carries referendum to be tabled"]
				#[doc = "immediately. If there is no externally-proposed referendum currently, or if there is one"]
				#[doc = "but it is not a majority-carries referendum then it fails."]
				#[doc = ""]
				#[doc = "The dispatch of this call must be `FastTrackOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The hash of the current external proposal."]
				#[doc = "- `voting_period`: The period that is allowed for voting on this proposal."]
				#[doc = "\tMust be always greater than zero."]
				#[doc = "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`."]
				#[doc = "- `delay`: The number of block after voting has ended in approval and this should be"]
				#[doc = "  enacted. This doesn't have a minimum amount."]
				#[doc = ""]
				#[doc = "Emits `Started`."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`"]
				pub fn fast_track(
					&self,
					proposal_hash: ::subxt::ext::sp_core::H256,
					voting_period: ::core::primitive::u32,
					delay: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<FastTrack> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"fast_track",
						FastTrack { proposal_hash, voting_period, delay },
						[
							125u8, 209u8, 107u8, 120u8, 93u8, 205u8, 129u8, 147u8, 254u8, 126u8,
							45u8, 126u8, 39u8, 0u8, 56u8, 14u8, 233u8, 49u8, 245u8, 220u8, 156u8,
							10u8, 252u8, 31u8, 102u8, 90u8, 163u8, 236u8, 178u8, 85u8, 13u8, 24u8,
						],
					)
				}
				#[doc = "Veto and blacklist the external proposal hash."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `VetoOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist."]
				#[doc = ""]
				#[doc = "Emits `Vetoed`."]
				#[doc = ""]
				#[doc = "Weight: `O(V + log(V))` where V is number of `existing vetoers`"]
				pub fn veto_external(
					&self,
					proposal_hash: ::subxt::ext::sp_core::H256,
				) -> ::subxt::tx::StaticTxPayload<VetoExternal> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"veto_external",
						VetoExternal { proposal_hash },
						[
							209u8, 18u8, 18u8, 103u8, 186u8, 160u8, 214u8, 124u8, 150u8, 207u8,
							112u8, 90u8, 84u8, 197u8, 95u8, 157u8, 165u8, 65u8, 109u8, 101u8, 75u8,
							201u8, 41u8, 149u8, 75u8, 154u8, 37u8, 178u8, 239u8, 121u8, 124u8,
							23u8,
						],
					)
				}
				#[doc = "Remove a referendum."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Root_."]
				#[doc = ""]
				#[doc = "- `ref_index`: The index of the referendum to cancel."]
				#[doc = ""]
				#[doc = "# Weight: `O(1)`."]
				pub fn cancel_referendum(
					&self,
					ref_index: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<CancelReferendum> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"cancel_referendum",
						CancelReferendum { ref_index },
						[
							51u8, 25u8, 25u8, 251u8, 236u8, 115u8, 130u8, 230u8, 72u8, 186u8,
							119u8, 71u8, 165u8, 137u8, 55u8, 167u8, 187u8, 128u8, 55u8, 8u8, 212u8,
							139u8, 245u8, 232u8, 103u8, 136u8, 229u8, 113u8, 125u8, 36u8, 1u8,
							149u8,
						],
					)
				}
				#[doc = "Cancel a proposal queued for enactment."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Root_."]
				#[doc = ""]
				#[doc = "- `which`: The index of the referendum to cancel."]
				#[doc = ""]
				#[doc = "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."]
				pub fn cancel_queued(
					&self,
					which: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<CancelQueued> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"cancel_queued",
						CancelQueued { which },
						[
							6u8, 97u8, 182u8, 142u8, 165u8, 206u8, 218u8, 245u8, 206u8, 224u8,
							143u8, 164u8, 232u8, 129u8, 202u8, 141u8, 78u8, 65u8, 79u8, 206u8, 3u8,
							195u8, 151u8, 36u8, 8u8, 220u8, 184u8, 239u8, 28u8, 187u8, 208u8,
							174u8,
						],
					)
				}
				#[doc = "Delegate the voting power (with some given conviction) of the sending account."]
				#[doc = ""]
				#[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
				#[doc = "time appropriate for the conviction's lock period."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
				#[doc = "  - be delegating already; or"]
				#[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
				#[doc = "    through `reap_vote` or `unvote`)."]
				#[doc = ""]
				#[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
				#[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
				#[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
				#[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
				#[doc = "  be more than the account's current balance."]
				#[doc = ""]
				#[doc = "Emits `Delegated`."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
				#[doc = "  voted on. Weight is charged as if maximum votes."]
				pub fn delegate(
					&self,
					to: ::subxt::ext::sp_core::crypto::AccountId32,
					conviction: runtime_types::pallet_democracy::conviction::Conviction,
					balance: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<Delegate> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"delegate",
						Delegate { to, conviction, balance },
						[
							190u8, 241u8, 243u8, 105u8, 114u8, 112u8, 169u8, 52u8, 119u8, 174u8,
							61u8, 72u8, 165u8, 161u8, 192u8, 234u8, 32u8, 144u8, 89u8, 214u8,
							178u8, 227u8, 251u8, 198u8, 129u8, 21u8, 244u8, 183u8, 135u8, 33u8,
							1u8, 224u8,
						],
					)
				}
				#[doc = "Undelegate the voting power of the sending account."]
				#[doc = ""]
				#[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
				#[doc = "of the conviction with which the delegation was issued."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
				#[doc = "currently delegating."]
				#[doc = ""]
				#[doc = "Emits `Undelegated`."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
				#[doc = "  voted on. Weight is charged as if maximum votes."]
				pub fn undelegate(&self) -> ::subxt::tx::StaticTxPayload<Undelegate> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"undelegate",
						Undelegate {},
						[
							165u8, 40u8, 183u8, 209u8, 57u8, 153u8, 111u8, 29u8, 114u8, 109u8,
							107u8, 235u8, 97u8, 61u8, 53u8, 155u8, 44u8, 245u8, 28u8, 220u8, 56u8,
							134u8, 43u8, 122u8, 248u8, 156u8, 191u8, 154u8, 4u8, 121u8, 152u8,
							153u8,
						],
					)
				}
				#[doc = "Clears all public proposals."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Root_."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`."]
				pub fn clear_public_proposals(
					&self,
				) -> ::subxt::tx::StaticTxPayload<ClearPublicProposals> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"clear_public_proposals",
						ClearPublicProposals {},
						[
							59u8, 126u8, 254u8, 223u8, 252u8, 225u8, 75u8, 185u8, 188u8, 181u8,
							42u8, 179u8, 211u8, 73u8, 12u8, 141u8, 243u8, 197u8, 46u8, 130u8,
							215u8, 196u8, 225u8, 88u8, 48u8, 199u8, 231u8, 249u8, 195u8, 53u8,
							184u8, 204u8,
						],
					)
				}
				#[doc = "Register the preimage for an upcoming proposal. This doesn't require the proposal to be"]
				#[doc = "in the dispatch queue but does require a deposit, returned once enacted."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `encoded_proposal`: The preimage of a proposal."]
				#[doc = ""]
				#[doc = "Emits `PreimageNoted`."]
				#[doc = ""]
				#[doc = "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."]
				pub fn note_preimage(
					&self,
					encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<NotePreimage> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"note_preimage",
						NotePreimage { encoded_proposal },
						[
							31u8, 252u8, 248u8, 238u8, 103u8, 1u8, 82u8, 84u8, 135u8, 152u8, 246u8,
							234u8, 251u8, 124u8, 193u8, 73u8, 52u8, 255u8, 88u8, 31u8, 112u8, 99u8,
							191u8, 245u8, 251u8, 202u8, 51u8, 130u8, 136u8, 114u8, 177u8, 241u8,
						],
					)
				}
				#[doc = "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."]
				pub fn note_preimage_operational(
					&self,
					encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<NotePreimageOperational> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"note_preimage_operational",
						NotePreimageOperational { encoded_proposal },
						[
							184u8, 81u8, 31u8, 172u8, 81u8, 113u8, 84u8, 246u8, 189u8, 219u8,
							167u8, 32u8, 191u8, 126u8, 165u8, 250u8, 147u8, 199u8, 241u8, 196u8,
							253u8, 34u8, 51u8, 158u8, 2u8, 157u8, 16u8, 122u8, 210u8, 66u8, 110u8,
							234u8,
						],
					)
				}
				#[doc = "Register the preimage for an upcoming proposal. This requires the proposal to be"]
				#[doc = "in the dispatch queue. No deposit is needed. When this call is successful, i.e."]
				#[doc = "the preimage has not been uploaded before and matches some imminent proposal,"]
				#[doc = "no fee is paid."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `encoded_proposal`: The preimage of a proposal."]
				#[doc = ""]
				#[doc = "Emits `PreimageNoted`."]
				#[doc = ""]
				#[doc = "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."]
				pub fn note_imminent_preimage(
					&self,
					encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<NoteImminentPreimage> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"note_imminent_preimage",
						NoteImminentPreimage { encoded_proposal },
						[
							32u8, 188u8, 10u8, 215u8, 245u8, 132u8, 234u8, 124u8, 19u8, 90u8,
							225u8, 216u8, 169u8, 105u8, 95u8, 231u8, 12u8, 109u8, 16u8, 91u8,
							153u8, 134u8, 240u8, 82u8, 80u8, 254u8, 117u8, 230u8, 88u8, 203u8,
							68u8, 42u8,
						],
					)
				}
				#[doc = "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."]
				pub fn note_imminent_preimage_operational(
					&self,
					encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<NoteImminentPreimageOperational> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"note_imminent_preimage_operational",
						NoteImminentPreimageOperational { encoded_proposal },
						[
							7u8, 31u8, 49u8, 238u8, 155u8, 234u8, 187u8, 147u8, 123u8, 84u8, 50u8,
							98u8, 221u8, 39u8, 218u8, 204u8, 175u8, 136u8, 44u8, 93u8, 140u8,
							172u8, 73u8, 98u8, 168u8, 110u8, 31u8, 82u8, 22u8, 1u8, 205u8, 84u8,
						],
					)
				}
				#[doc = "Remove an expired proposal preimage and collect the deposit."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The preimage hash of a proposal."]
				#[doc = "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is"]
				#[doc = "  weighted according to this value with no refund."]
				#[doc = ""]
				#[doc = "This will only work after `VotingPeriod` blocks from the time that the preimage was"]
				#[doc = "noted, if it's the same account doing it. If it's a different account, then it'll only"]
				#[doc = "work an additional `EnactmentPeriod` later."]
				#[doc = ""]
				#[doc = "Emits `PreimageReaped`."]
				#[doc = ""]
				#[doc = "Weight: `O(D)` where D is length of proposal."]
				pub fn reap_preimage(
					&self,
					proposal_hash: ::subxt::ext::sp_core::H256,
					proposal_len_upper_bound: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<ReapPreimage> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"reap_preimage",
						ReapPreimage { proposal_hash, proposal_len_upper_bound },
						[
							135u8, 43u8, 115u8, 154u8, 93u8, 121u8, 112u8, 65u8, 145u8, 141u8,
							236u8, 252u8, 203u8, 155u8, 63u8, 130u8, 120u8, 221u8, 13u8, 105u8,
							81u8, 179u8, 167u8, 254u8, 213u8, 117u8, 146u8, 232u8, 18u8, 104u8,
							196u8, 112u8,
						],
					)
				}
				#[doc = "Unlock tokens that have an expired lock."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `target`: The account to remove the lock on."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` with R number of vote of target."]
				pub fn unlock(
					&self,
					target: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<Unlock> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"unlock",
						Unlock { target },
						[
							137u8, 93u8, 240u8, 75u8, 142u8, 148u8, 51u8, 55u8, 88u8, 159u8, 2u8,
							57u8, 24u8, 169u8, 120u8, 121u8, 115u8, 53u8, 225u8, 176u8, 67u8,
							156u8, 20u8, 132u8, 39u8, 54u8, 125u8, 203u8, 199u8, 85u8, 60u8, 211u8,
						],
					)
				}
				#[doc = "Remove a vote for a referendum."]
				#[doc = ""]
				#[doc = "If:"]
				#[doc = "- the referendum was cancelled, or"]
				#[doc = "- the referendum is ongoing, or"]
				#[doc = "- the referendum has ended such that"]
				#[doc = "  - the vote of the account was in opposition to the result; or"]
				#[doc = "  - there was no conviction to the account's vote; or"]
				#[doc = "  - the account made a split vote"]
				#[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
				#[doc = "funds being available."]
				#[doc = ""]
				#[doc = "If, however, the referendum has ended and:"]
				#[doc = "- it finished corresponding to the vote of the account, and"]
				#[doc = "- the account made a standard vote with conviction, and"]
				#[doc = "- the lock period of the conviction is not over"]
				#[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
				#[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
				#[doc = "of both the amount locked and the time is it locked for)."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
				#[doc = "registered for referendum `index`."]
				#[doc = ""]
				#[doc = "- `index`: The index of referendum of the vote to be removed."]
				#[doc = ""]
				#[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
				#[doc = "  Weight is calculated for the maximum number of vote."]
				pub fn remove_vote(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<RemoveVote> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"remove_vote",
						RemoveVote { index },
						[
							148u8, 120u8, 14u8, 172u8, 81u8, 152u8, 159u8, 178u8, 106u8, 244u8,
							36u8, 98u8, 120u8, 189u8, 213u8, 93u8, 119u8, 156u8, 112u8, 34u8,
							241u8, 72u8, 206u8, 113u8, 212u8, 161u8, 164u8, 126u8, 122u8, 82u8,
							160u8, 74u8,
						],
					)
				}
				#[doc = "Remove a vote for a referendum."]
				#[doc = ""]
				#[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
				#[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
				#[doc = "either because the referendum was cancelled, because the voter lost the referendum or"]
				#[doc = "because the conviction period is over."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `target`: The account of the vote to be removed; this account must have voted for"]
				#[doc = "  referendum `index`."]
				#[doc = "- `index`: The index of referendum of the vote to be removed."]
				#[doc = ""]
				#[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
				#[doc = "  Weight is calculated for the maximum number of vote."]
				pub fn remove_other_vote(
					&self,
					target: ::subxt::ext::sp_core::crypto::AccountId32,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<RemoveOtherVote> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"remove_other_vote",
						RemoveOtherVote { target, index },
						[
							137u8, 59u8, 51u8, 72u8, 97u8, 181u8, 74u8, 123u8, 65u8, 147u8, 63u8,
							23u8, 14u8, 6u8, 66u8, 186u8, 105u8, 72u8, 112u8, 120u8, 51u8, 229u8,
							247u8, 96u8, 218u8, 137u8, 220u8, 65u8, 95u8, 109u8, 253u8, 45u8,
						],
					)
				}
				#[doc = "Enact a proposal from a referendum. For now we just make the weight be the maximum."]
				pub fn enact_proposal(
					&self,
					proposal_hash: ::subxt::ext::sp_core::H256,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<EnactProposal> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"enact_proposal",
						EnactProposal { proposal_hash, index },
						[
							191u8, 244u8, 244u8, 174u8, 95u8, 86u8, 132u8, 63u8, 2u8, 94u8, 3u8,
							117u8, 96u8, 54u8, 100u8, 89u8, 124u8, 117u8, 205u8, 142u8, 214u8,
							192u8, 137u8, 141u8, 178u8, 145u8, 241u8, 167u8, 163u8, 76u8, 61u8,
							31u8,
						],
					)
				}
				#[doc = "Permanently place a proposal into the blacklist. This prevents it from ever being"]
				#[doc = "proposed again."]
				#[doc = ""]
				#[doc = "If called on a queued public or external proposal, then this will result in it being"]
				#[doc = "removed. If the `ref_index` supplied is an active referendum with the proposal hash,"]
				#[doc = "then it will be cancelled."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `BlacklistOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The proposal hash to blacklist permanently."]
				#[doc = "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be"]
				#[doc = "cancelled."]
				#[doc = ""]
				#[doc = "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a"]
				#[doc = "  reasonable value)."]
				pub fn blacklist(
					&self,
					proposal_hash: ::subxt::ext::sp_core::H256,
					maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
				) -> ::subxt::tx::StaticTxPayload<Blacklist> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"blacklist",
						Blacklist { proposal_hash, maybe_ref_index },
						[
							48u8, 144u8, 81u8, 164u8, 54u8, 111u8, 197u8, 134u8, 6u8, 98u8, 121u8,
							179u8, 254u8, 191u8, 204u8, 212u8, 84u8, 255u8, 86u8, 110u8, 225u8,
							130u8, 26u8, 65u8, 133u8, 56u8, 231u8, 15u8, 245u8, 137u8, 146u8,
							242u8,
						],
					)
				}
				#[doc = "Remove a proposal."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `CancelProposalOrigin`."]
				#[doc = ""]
				#[doc = "- `prop_index`: The index of the proposal to cancel."]
				#[doc = ""]
				#[doc = "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"]
				pub fn cancel_proposal(
					&self,
					prop_index: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<CancelProposal> {
					::subxt::tx::StaticTxPayload::new(
						"Democracy",
						"cancel_proposal",
						CancelProposal { prop_index },
						[
							179u8, 3u8, 198u8, 244u8, 241u8, 124u8, 205u8, 58u8, 100u8, 80u8,
							177u8, 254u8, 98u8, 220u8, 189u8, 63u8, 229u8, 60u8, 157u8, 83u8,
							142u8, 6u8, 236u8, 183u8, 193u8, 235u8, 253u8, 126u8, 153u8, 185u8,
							74u8, 117u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_democracy::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A motion has been proposed by a public account."]
			pub struct Proposed {
				pub proposal_index: ::core::primitive::u32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Proposed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A public proposal has been tabled for referendum vote."]
			pub struct Tabled {
				pub proposal_index: ::core::primitive::u32,
				pub deposit: ::core::primitive::u128,
				pub depositors: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
			}
			impl ::subxt::events::StaticEvent for Tabled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Tabled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An external proposal has been tabled."]
			pub struct ExternalTabled;
			impl ::subxt::events::StaticEvent for ExternalTabled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "ExternalTabled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A referendum has begun."]
			pub struct Started {
				pub ref_index: ::core::primitive::u32,
				pub threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
			}
			impl ::subxt::events::StaticEvent for Started {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Started";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "A proposal has been approved by referendum."]
			pub struct Passed {
				pub ref_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Passed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Passed";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "A proposal has been rejected by referendum."]
			pub struct NotPassed {
				pub ref_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for NotPassed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "NotPassed";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "A referendum has been cancelled."]
			pub struct Cancelled {
				pub ref_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Cancelled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Cancelled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A proposal has been enacted."]
			pub struct Executed {
				pub ref_index: ::core::primitive::u32,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for Executed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Executed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An account has delegated their vote to another account."]
			pub struct Delegated {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub target: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Delegated {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Delegated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An account has cancelled a previous delegation operation."]
			pub struct Undelegated {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Undelegated {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Undelegated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An external proposal has been vetoed."]
			pub struct Vetoed {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub until: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Vetoed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Vetoed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A proposal's preimage was noted, and the deposit taken."]
			pub struct PreimageNoted {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for PreimageNoted {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "PreimageNoted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A proposal preimage was removed and used (the deposit was returned)."]
			pub struct PreimageUsed {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub provider: ::subxt::ext::sp_core::crypto::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for PreimageUsed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "PreimageUsed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A proposal could not be executed because its preimage was invalid."]
			pub struct PreimageInvalid {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub ref_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for PreimageInvalid {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "PreimageInvalid";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A proposal could not be executed because its preimage was missing."]
			pub struct PreimageMissing {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub ref_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for PreimageMissing {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "PreimageMissing";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A registered preimage was removed and the deposit collected by the reaper."]
			pub struct PreimageReaped {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub provider: ::subxt::ext::sp_core::crypto::AccountId32,
				pub deposit: ::core::primitive::u128,
				pub reaper: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for PreimageReaped {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "PreimageReaped";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A proposal_hash has been blacklisted permanently."]
			pub struct Blacklisted {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
			}
			impl ::subxt::events::StaticEvent for Blacklisted {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Blacklisted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An account has voted in a referendum"]
			pub struct Voted {
				pub voter: ::subxt::ext::sp_core::crypto::AccountId32,
				pub ref_index: ::core::primitive::u32,
				pub vote:
					runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>,
			}
			impl ::subxt::events::StaticEvent for Voted {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Voted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An account has secconded a proposal"]
			pub struct Seconded {
				pub seconder: ::subxt::ext::sp_core::crypto::AccountId32,
				pub prop_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Seconded {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Seconded";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "A proposal got canceled."]
			pub struct ProposalCanceled {
				pub prop_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for ProposalCanceled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "ProposalCanceled";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The number of (public) proposals that have been made so far."]
				pub fn public_prop_count(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"PublicPropCount",
						vec![],
						[
							91u8, 14u8, 171u8, 94u8, 37u8, 157u8, 46u8, 157u8, 254u8, 13u8, 68u8,
							144u8, 23u8, 146u8, 128u8, 159u8, 9u8, 174u8, 74u8, 174u8, 218u8,
							197u8, 23u8, 235u8, 152u8, 226u8, 216u8, 4u8, 120u8, 121u8, 27u8,
							138u8,
						],
					)
				}
				#[doc = " The public proposals. Unsorted. The second item is the proposal's hash."]
				pub fn public_props(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<(
							::core::primitive::u32,
							::subxt::ext::sp_core::H256,
							::subxt::ext::sp_core::crypto::AccountId32,
						)>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"PublicProps",
						vec![],
						[
							151u8, 247u8, 196u8, 97u8, 171u8, 230u8, 55u8, 45u8, 220u8, 16u8, 12u8,
							28u8, 22u8, 58u8, 127u8, 179u8, 130u8, 192u8, 115u8, 165u8, 5u8, 173u8,
							87u8, 104u8, 7u8, 186u8, 114u8, 47u8, 162u8, 182u8, 252u8, 154u8,
						],
					)
				}
				#[doc = " Those who have locked a deposit."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: Safe, as increasing integer keys are safe."]
				pub fn deposit_of(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
						::core::primitive::u128,
					)>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"DepositOf",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							153u8, 236u8, 152u8, 224u8, 221u8, 90u8, 204u8, 183u8, 222u8, 160u8,
							227u8, 26u8, 8u8, 110u8, 230u8, 102u8, 133u8, 186u8, 66u8, 2u8, 84u8,
							31u8, 236u8, 228u8, 202u8, 75u8, 17u8, 97u8, 133u8, 232u8, 64u8, 7u8,
						],
					)
				}
				#[doc = " Those who have locked a deposit."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: Safe, as increasing integer keys are safe."]
				pub fn deposit_of_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
						::core::primitive::u128,
					)>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"DepositOf",
						Vec::new(),
						[
							153u8, 236u8, 152u8, 224u8, 221u8, 90u8, 204u8, 183u8, 222u8, 160u8,
							227u8, 26u8, 8u8, 110u8, 230u8, 102u8, 133u8, 186u8, 66u8, 2u8, 84u8,
							31u8, 236u8, 228u8, 202u8, 75u8, 17u8, 97u8, 133u8, 232u8, 64u8, 7u8,
						],
					)
				}
				#[doc = " Map of hashes to the proposal preimage, along with who registered it and their deposit."]
				#[doc = " The block number is the block at which it was deposited."]
				pub fn preimages(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::H256>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_democracy::PreimageStatus<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"Preimages",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							206u8, 131u8, 7u8, 129u8, 172u8, 231u8, 164u8, 220u8, 129u8, 0u8,
							204u8, 227u8, 231u8, 244u8, 61u8, 145u8, 144u8, 146u8, 173u8, 215u8,
							174u8, 218u8, 192u8, 83u8, 174u8, 99u8, 87u8, 102u8, 98u8, 235u8,
							138u8, 127u8,
						],
					)
				}
				#[doc = " Map of hashes to the proposal preimage, along with who registered it and their deposit."]
				#[doc = " The block number is the block at which it was deposited."]
				pub fn preimages_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_democracy::PreimageStatus<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"Preimages",
						Vec::new(),
						[
							206u8, 131u8, 7u8, 129u8, 172u8, 231u8, 164u8, 220u8, 129u8, 0u8,
							204u8, 227u8, 231u8, 244u8, 61u8, 145u8, 144u8, 146u8, 173u8, 215u8,
							174u8, 218u8, 192u8, 83u8, 174u8, 99u8, 87u8, 102u8, 98u8, 235u8,
							138u8, 127u8,
						],
					)
				}
				#[doc = " The next free referendum index, aka the number of referenda started so far."]
				pub fn referendum_count(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"ReferendumCount",
						vec![],
						[
							153u8, 210u8, 106u8, 244u8, 156u8, 70u8, 124u8, 251u8, 123u8, 75u8,
							7u8, 189u8, 199u8, 145u8, 95u8, 119u8, 137u8, 11u8, 240u8, 160u8,
							151u8, 248u8, 229u8, 231u8, 89u8, 222u8, 18u8, 237u8, 144u8, 78u8,
							99u8, 58u8,
						],
					)
				}
				#[doc = " The lowest referendum index representing an unbaked referendum. Equal to"]
				#[doc = " `ReferendumCount` if there isn't a unbaked referendum."]
				pub fn lowest_unbaked(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"LowestUnbaked",
						vec![],
						[
							4u8, 51u8, 108u8, 11u8, 48u8, 165u8, 19u8, 251u8, 182u8, 76u8, 163u8,
							73u8, 227u8, 2u8, 212u8, 74u8, 128u8, 27u8, 165u8, 164u8, 111u8, 22u8,
							209u8, 190u8, 103u8, 7u8, 116u8, 16u8, 160u8, 144u8, 123u8, 64u8,
						],
					)
				}
				#[doc = " Information concerning any given referendum."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]
				pub fn referendum_info_of(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_democracy::types::ReferendumInfo<
							::core::primitive::u32,
							::subxt::ext::sp_core::H256,
							::core::primitive::u128,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"ReferendumInfoOf",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							132u8, 4u8, 108u8, 126u8, 91u8, 168u8, 18u8, 17u8, 86u8, 79u8, 219u8,
							222u8, 195u8, 137u8, 149u8, 177u8, 101u8, 134u8, 130u8, 41u8, 217u8,
							109u8, 18u8, 18u8, 33u8, 206u8, 117u8, 131u8, 98u8, 26u8, 51u8, 8u8,
						],
					)
				}
				#[doc = " Information concerning any given referendum."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]
				pub fn referendum_info_of_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_democracy::types::ReferendumInfo<
							::core::primitive::u32,
							::subxt::ext::sp_core::H256,
							::core::primitive::u128,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"ReferendumInfoOf",
						Vec::new(),
						[
							132u8, 4u8, 108u8, 126u8, 91u8, 168u8, 18u8, 17u8, 86u8, 79u8, 219u8,
							222u8, 195u8, 137u8, 149u8, 177u8, 101u8, 134u8, 130u8, 41u8, 217u8,
							109u8, 18u8, 18u8, 33u8, 206u8, 117u8, 131u8, 98u8, 26u8, 51u8, 8u8,
						],
					)
				}
				#[doc = " All votes for a particular voter. We store the balance for the number of votes that we"]
				#[doc = " have recorded. The second item is the total amount of delegations, that will be added."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]
				pub fn voting_of(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_democracy::vote::Voting<
							::core::primitive::u128,
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"VotingOf",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							211u8, 38u8, 232u8, 65u8, 215u8, 97u8, 157u8, 208u8, 177u8, 150u8,
							250u8, 226u8, 72u8, 185u8, 187u8, 162u8, 80u8, 67u8, 195u8, 87u8,
							190u8, 180u8, 167u8, 137u8, 253u8, 142u8, 34u8, 158u8, 249u8, 168u8,
							209u8, 18u8,
						],
					)
				}
				#[doc = " All votes for a particular voter. We store the balance for the number of votes that we"]
				#[doc = " have recorded. The second item is the total amount of delegations, that will be added."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]
				pub fn voting_of_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_democracy::vote::Voting<
							::core::primitive::u128,
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"VotingOf",
						Vec::new(),
						[
							211u8, 38u8, 232u8, 65u8, 215u8, 97u8, 157u8, 208u8, 177u8, 150u8,
							250u8, 226u8, 72u8, 185u8, 187u8, 162u8, 80u8, 67u8, 195u8, 87u8,
							190u8, 180u8, 167u8, 137u8, 253u8, 142u8, 34u8, 158u8, 249u8, 168u8,
							209u8, 18u8,
						],
					)
				}
				#[doc = " True if the last referendum tabled was submitted externally. False if it was a public"]
				#[doc = " proposal."]
				pub fn last_tabled_was_external(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::bool>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"LastTabledWasExternal",
						vec![],
						[
							3u8, 67u8, 106u8, 1u8, 89u8, 204u8, 4u8, 145u8, 121u8, 44u8, 34u8,
							76u8, 18u8, 206u8, 65u8, 214u8, 222u8, 82u8, 31u8, 223u8, 144u8, 169u8,
							17u8, 6u8, 138u8, 36u8, 113u8, 155u8, 241u8, 106u8, 189u8, 218u8,
						],
					)
				}
				#[doc = " The referendum to be tabled whenever it would be valid to table an external proposal."]
				#[doc = " This happens when a referendum needs to be tabled and one of two conditions are met:"]
				#[doc = " - `LastTabledWasExternal` is `false`; or"]
				#[doc = " - `PublicProps` is empty."]
				pub fn next_external(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::subxt::ext::sp_core::H256,
						runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
					)>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"NextExternal",
						vec![],
						[
							123u8, 49u8, 252u8, 184u8, 75u8, 204u8, 16u8, 130u8, 43u8, 109u8, 62u8,
							113u8, 95u8, 0u8, 20u8, 163u8, 186u8, 210u8, 253u8, 33u8, 58u8, 121u8,
							36u8, 80u8, 9u8, 242u8, 180u8, 230u8, 167u8, 250u8, 32u8, 180u8,
						],
					)
				}
				#[doc = " A record of who vetoed what. Maps proposal hash to a possible existent block number"]
				#[doc = " (until when it may not be resubmitted) and who vetoed it."]
				pub fn blacklist(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::H256>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::core::primitive::u32,
						::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					)>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"Blacklist",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							93u8, 165u8, 219u8, 135u8, 41u8, 114u8, 144u8, 133u8, 171u8, 83u8,
							153u8, 157u8, 79u8, 14u8, 170u8, 29u8, 179u8, 23u8, 222u8, 124u8,
							237u8, 253u8, 122u8, 21u8, 186u8, 209u8, 184u8, 89u8, 197u8, 5u8,
							178u8, 255u8,
						],
					)
				}
				#[doc = " A record of who vetoed what. Maps proposal hash to a possible existent block number"]
				#[doc = " (until when it may not be resubmitted) and who vetoed it."]
				pub fn blacklist_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::core::primitive::u32,
						::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					)>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"Blacklist",
						Vec::new(),
						[
							93u8, 165u8, 219u8, 135u8, 41u8, 114u8, 144u8, 133u8, 171u8, 83u8,
							153u8, 157u8, 79u8, 14u8, 170u8, 29u8, 179u8, 23u8, 222u8, 124u8,
							237u8, 253u8, 122u8, 21u8, 186u8, 209u8, 184u8, 89u8, 197u8, 5u8,
							178u8, 255u8,
						],
					)
				}
				#[doc = " Record of all proposals that have been subject to emergency cancellation."]
				pub fn cancellations(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::H256>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::bool>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"Cancellations",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							154u8, 36u8, 172u8, 46u8, 65u8, 218u8, 30u8, 151u8, 173u8, 186u8,
							166u8, 79u8, 35u8, 226u8, 94u8, 200u8, 67u8, 44u8, 47u8, 7u8, 17u8,
							89u8, 169u8, 166u8, 236u8, 101u8, 68u8, 54u8, 114u8, 141u8, 177u8,
							135u8,
						],
					)
				}
				#[doc = " Record of all proposals that have been subject to emergency cancellation."]
				pub fn cancellations_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::bool>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"Cancellations",
						Vec::new(),
						[
							154u8, 36u8, 172u8, 46u8, 65u8, 218u8, 30u8, 151u8, 173u8, 186u8,
							166u8, 79u8, 35u8, 226u8, 94u8, 200u8, 67u8, 44u8, 47u8, 7u8, 17u8,
							89u8, 169u8, 166u8, 236u8, 101u8, 68u8, 54u8, 114u8, 141u8, 177u8,
							135u8,
						],
					)
				}
				#[doc = " Storage version of the pallet."]
				#[doc = ""]
				#[doc = " New networks start with last version."]
				pub fn storage_version(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::pallet_democracy::Releases>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Democracy",
						"StorageVersion",
						vec![],
						[
							39u8, 219u8, 134u8, 64u8, 250u8, 96u8, 95u8, 156u8, 100u8, 236u8, 18u8,
							78u8, 59u8, 146u8, 5u8, 245u8, 113u8, 125u8, 220u8, 140u8, 125u8, 5u8,
							194u8, 134u8, 248u8, 95u8, 250u8, 108u8, 142u8, 230u8, 21u8, 120u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The period between a proposal being approved and enacted."]
				#[doc = ""]
				#[doc = " It should generally be a little more than the unstake period to ensure that"]
				#[doc = " voting stakers have an opportunity to remove themselves from the system in the case"]
				#[doc = " where they are on the losing side of a vote."]
				pub fn enactment_period(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Democracy",
						"EnactmentPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " How often (in blocks) new public referenda are launched."]
				pub fn launch_period(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Democracy",
						"LaunchPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " How often (in blocks) to check for new votes."]
				pub fn voting_period(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Democracy",
						"VotingPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The minimum period of vote locking."]
				#[doc = ""]
				#[doc = " It should be no shorter than enactment period to ensure that in the case of an approval,"]
				#[doc = " those successful voters are locked into the consequences that their votes entail."]
				pub fn vote_locking_period(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Democracy",
						"VoteLockingPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The minimum amount to be used as a deposit for a public referendum proposal."]
				pub fn minimum_deposit(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Democracy",
						"MinimumDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Indicator for whether an emergency origin is even allowed to happen. Some chains may"]
				#[doc = " want to set this permanently to `false`, others may want to condition it on things such"]
				#[doc = " as an upgrade having happened recently."]
				pub fn instant_allowed(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::bool>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Democracy",
						"InstantAllowed",
						[
							165u8, 28u8, 112u8, 190u8, 18u8, 129u8, 182u8, 206u8, 237u8, 1u8, 68u8,
							252u8, 125u8, 234u8, 185u8, 50u8, 149u8, 164u8, 47u8, 126u8, 134u8,
							100u8, 14u8, 86u8, 209u8, 39u8, 20u8, 4u8, 233u8, 115u8, 102u8, 131u8,
						],
					)
				}
				#[doc = " Minimum voting period allowed for a fast-track referendum."]
				pub fn fast_track_voting_period(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Democracy",
						"FastTrackVotingPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Period in blocks where an external proposal may not be re-submitted after being vetoed."]
				pub fn cooloff_period(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Democracy",
						"CooloffPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The amount of balance that must be deposited per byte of preimage stored."]
				pub fn preimage_byte_deposit(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Democracy",
						"PreimageByteDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The maximum number of votes for an account."]
				#[doc = ""]
				#[doc = " Also used to compute weight, an overly big value can"]
				#[doc = " lead to extrinsic with very big weight: see `delegate` for instance."]
				pub fn max_votes(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Democracy",
						"MaxVotes",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of public proposals that can exist at any time."]
				pub fn max_proposals(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Democracy",
						"MaxProposals",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod council {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetMembers {
				pub new_members: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
				pub prime: ::core::option::Option<::subxt::ext::sp_core::crypto::AccountId32>,
				pub old_count: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Execute {
				pub proposal: ::std::boxed::Box<runtime_types::kusama_runtime::Call>,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Propose {
				#[codec(compact)]
				pub threshold: ::core::primitive::u32,
				pub proposal: ::std::boxed::Box<runtime_types::kusama_runtime::Call>,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Vote {
				pub proposal: ::subxt::ext::sp_core::H256,
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				pub approve: ::core::primitive::bool,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Close {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				#[codec(compact)]
				pub proposal_weight_bound: ::core::primitive::u64,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct DisapproveProposal {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Set the collective's membership."]
				#[doc = ""]
				#[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
				#[doc = "- `prime`: The prime member whose vote sets the default."]
				#[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
				#[doc = "  weight estimation."]
				#[doc = ""]
				#[doc = "Requires root origin."]
				#[doc = ""]
				#[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
				#[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
				#[doc = ""]
				#[doc = "# WARNING:"]
				#[doc = ""]
				#[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
				#[doc = "implementation of the trait [`ChangeMembers`]."]
				#[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
				#[doc = "with other logic managing the member set."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "## Weight"]
				#[doc = "- `O(MP + N)` where:"]
				#[doc = "  - `M` old-members-count (code- and governance-bounded)"]
				#[doc = "  - `N` new-members-count (code- and governance-bounded)"]
				#[doc = "  - `P` proposals-count (code-bounded)"]
				#[doc = "- DB:"]
				#[doc = "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the"]
				#[doc = "    members"]
				#[doc = "  - 1 storage read (codec `O(P)`) for reading the proposals"]
				#[doc = "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal"]
				#[doc = "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one"]
				#[doc = "# </weight>"]
				pub fn set_members(
					&self,
					new_members: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					prime: ::core::option::Option<::subxt::ext::sp_core::crypto::AccountId32>,
					old_count: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetMembers> {
					::subxt::tx::StaticTxPayload::new(
						"Council",
						"set_members",
						SetMembers { new_members, prime, old_count },
						[
							196u8, 103u8, 123u8, 125u8, 226u8, 177u8, 126u8, 37u8, 160u8, 114u8,
							34u8, 136u8, 219u8, 84u8, 199u8, 94u8, 242u8, 20u8, 126u8, 126u8,
							166u8, 190u8, 198u8, 33u8, 162u8, 113u8, 237u8, 222u8, 90u8, 1u8, 2u8,
							234u8,
						],
					)
				}
				#[doc = "Dispatch a proposal from a member using the `Member` origin."]
				#[doc = ""]
				#[doc = "Origin must be a member of the collective."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "## Weight"]
				#[doc = "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching"]
				#[doc = "  `proposal`"]
				#[doc = "- DB: 1 read (codec `O(M)`) + DB access of `proposal`"]
				#[doc = "- 1 event"]
				#[doc = "# </weight>"]
				pub fn execute(
					&self,
					proposal: runtime_types::kusama_runtime::Call,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<Execute> {
					::subxt::tx::StaticTxPayload::new(
						"Council",
						"execute",
						Execute { proposal: ::std::boxed::Box::new(proposal), length_bound },
						[
							63u8, 77u8, 3u8, 128u8, 200u8, 250u8, 146u8, 11u8, 202u8, 115u8, 147u8,
							181u8, 171u8, 16u8, 70u8, 67u8, 9u8, 31u8, 248u8, 102u8, 195u8, 130u8,
							60u8, 150u8, 171u8, 11u8, 103u8, 87u8, 97u8, 185u8, 90u8, 151u8,
						],
					)
				}
				#[doc = "Add a new proposal to either be voted on or executed directly."]
				#[doc = ""]
				#[doc = "Requires the sender to be member."]
				#[doc = ""]
				#[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
				#[doc = "or put up for voting."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "## Weight"]
				#[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
				#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "  - `M` is members-count (code- and governance-bounded)"]
				#[doc = "  - branching is influenced by `threshold` where:"]
				#[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
				#[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
				#[doc = "- DB:"]
				#[doc = "  - 1 storage read `is_member` (codec `O(M)`)"]
				#[doc = "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)"]
				#[doc = "  - DB accesses influenced by `threshold`:"]
				#[doc = "    - EITHER storage accesses done by `proposal` (`threshold < 2`)"]
				#[doc = "    - OR proposal insertion (`threshold <= 2`)"]
				#[doc = "      - 1 storage mutation `Proposals` (codec `O(P2)`)"]
				#[doc = "      - 1 storage mutation `ProposalCount` (codec `O(1)`)"]
				#[doc = "      - 1 storage write `ProposalOf` (codec `O(B)`)"]
				#[doc = "      - 1 storage write `Voting` (codec `O(M)`)"]
				#[doc = "  - 1 event"]
				#[doc = "# </weight>"]
				pub fn propose(
					&self,
					threshold: ::core::primitive::u32,
					proposal: runtime_types::kusama_runtime::Call,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<Propose> {
					::subxt::tx::StaticTxPayload::new(
						"Council",
						"propose",
						Propose {
							threshold,
							proposal: ::std::boxed::Box::new(proposal),
							length_bound,
						},
						[
							242u8, 239u8, 222u8, 80u8, 10u8, 136u8, 161u8, 190u8, 94u8, 119u8,
							36u8, 67u8, 182u8, 140u8, 177u8, 173u8, 87u8, 25u8, 66u8, 185u8, 44u8,
							196u8, 142u8, 109u8, 8u8, 84u8, 144u8, 161u8, 131u8, 120u8, 141u8,
							147u8,
						],
					)
				}
				#[doc = "Add an aye or nay vote for the sender to the given proposal."]
				#[doc = ""]
				#[doc = "Requires the sender to be a member."]
				#[doc = ""]
				#[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
				#[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
				#[doc = "fee."]
				#[doc = "# <weight>"]
				#[doc = "## Weight"]
				#[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
				#[doc = "- DB:"]
				#[doc = "  - 1 storage read `Members` (codec `O(M)`)"]
				#[doc = "  - 1 storage mutation `Voting` (codec `O(M)`)"]
				#[doc = "- 1 event"]
				#[doc = "# </weight>"]
				pub fn vote(
					&self,
					proposal: ::subxt::ext::sp_core::H256,
					index: ::core::primitive::u32,
					approve: ::core::primitive::bool,
				) -> ::subxt::tx::StaticTxPayload<Vote> {
					::subxt::tx::StaticTxPayload::new(
						"Council",
						"vote",
						Vote { proposal, index, approve },
						[
							108u8, 46u8, 180u8, 148u8, 145u8, 24u8, 173u8, 56u8, 36u8, 100u8,
							216u8, 43u8, 178u8, 202u8, 26u8, 136u8, 93u8, 84u8, 80u8, 134u8, 14u8,
							42u8, 248u8, 205u8, 68u8, 92u8, 79u8, 11u8, 113u8, 115u8, 157u8, 100u8,
						],
					)
				}
				#[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
				#[doc = ""]
				#[doc = "May be called by any signed account in order to finish voting and close the proposal."]
				#[doc = ""]
				#[doc = "If called before the end of the voting period it will only close the vote if it is"]
				#[doc = "has enough votes to be approved or disapproved."]
				#[doc = ""]
				#[doc = "If called after the end of the voting period abstentions are counted as rejections"]
				#[doc = "unless there is a prime member set and the prime member cast an approval."]
				#[doc = ""]
				#[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
				#[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
				#[doc = ""]
				#[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
				#[doc = "proposal."]
				#[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
				#[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "## Weight"]
				#[doc = "- `O(B + M + P1 + P2)` where:"]
				#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "  - `M` is members-count (code- and governance-bounded)"]
				#[doc = "  - `P1` is the complexity of `proposal` preimage."]
				#[doc = "  - `P2` is proposal-count (code-bounded)"]
				#[doc = "- DB:"]
				#[doc = " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)"]
				#[doc = " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec"]
				#[doc = "   `O(P2)`)"]
				#[doc = " - any mutations done while executing `proposal` (`P1`)"]
				#[doc = "- up to 3 events"]
				#[doc = "# </weight>"]
				pub fn close(
					&self,
					proposal_hash: ::subxt::ext::sp_core::H256,
					index: ::core::primitive::u32,
					proposal_weight_bound: ::core::primitive::u64,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<Close> {
					::subxt::tx::StaticTxPayload::new(
						"Council",
						"close",
						Close { proposal_hash, index, proposal_weight_bound, length_bound },
						[
							88u8, 8u8, 33u8, 184u8, 4u8, 97u8, 120u8, 237u8, 43u8, 183u8, 130u8,
							139u8, 65u8, 74u8, 166u8, 119u8, 246u8, 65u8, 132u8, 219u8, 118u8,
							69u8, 182u8, 195u8, 111u8, 204u8, 107u8, 78u8, 152u8, 218u8, 181u8,
							208u8,
						],
					)
				}
				#[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
				#[doc = "state."]
				#[doc = ""]
				#[doc = "Must be called by the Root origin."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Complexity: O(P) where P is the number of max proposals"]
				#[doc = "DB Weight:"]
				#[doc = "* Reads: Proposals"]
				#[doc = "* Writes: Voting, Proposals, ProposalOf"]
				#[doc = "# </weight>"]
				pub fn disapprove_proposal(
					&self,
					proposal_hash: ::subxt::ext::sp_core::H256,
				) -> ::subxt::tx::StaticTxPayload<DisapproveProposal> {
					::subxt::tx::StaticTxPayload::new(
						"Council",
						"disapprove_proposal",
						DisapproveProposal { proposal_hash },
						[
							25u8, 123u8, 1u8, 8u8, 74u8, 37u8, 3u8, 40u8, 97u8, 37u8, 175u8, 224u8,
							72u8, 155u8, 123u8, 109u8, 104u8, 43u8, 91u8, 125u8, 199u8, 51u8, 17u8,
							225u8, 133u8, 38u8, 120u8, 76u8, 164u8, 5u8, 194u8, 201u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_collective::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
			#[doc = "`MemberCount`)."]
			pub struct Proposed {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
				pub proposal_index: ::core::primitive::u32,
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub threshold: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Proposed {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A motion (given hash) has been voted on by given account, leaving"]
			#[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
			pub struct Voted {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub voted: ::core::primitive::bool,
				pub yes: ::core::primitive::u32,
				pub no: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Voted {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Voted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A motion was approved by the required threshold."]
			pub struct Approved {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
			}
			impl ::subxt::events::StaticEvent for Approved {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Approved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A motion was not approved by the required threshold."]
			pub struct Disapproved {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
			}
			impl ::subxt::events::StaticEvent for Disapproved {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Disapproved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A motion was executed; result will be `Ok` if it returned without error."]
			pub struct Executed {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for Executed {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Executed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A single member did some action; result will be `Ok` if it returned without error."]
			pub struct MemberExecuted {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for MemberExecuted {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "MemberExecuted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
			pub struct Closed {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub yes: ::core::primitive::u32,
				pub no: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Closed {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Closed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The hashes of the active proposals."]
				pub fn proposals(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							::subxt::ext::sp_core::H256,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Council",
						"Proposals",
						vec![],
						[
							10u8, 133u8, 82u8, 54u8, 193u8, 41u8, 253u8, 159u8, 56u8, 96u8, 249u8,
							148u8, 43u8, 57u8, 116u8, 43u8, 222u8, 243u8, 237u8, 231u8, 238u8,
							60u8, 26u8, 225u8, 19u8, 203u8, 213u8, 220u8, 114u8, 217u8, 100u8,
							27u8,
						],
					)
				}
				#[doc = " Actual proposal for a given hash, if it's current."]
				pub fn proposal_of(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::H256>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::kusama_runtime::Call>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Council",
						"ProposalOf",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							136u8, 5u8, 14u8, 81u8, 136u8, 149u8, 103u8, 123u8, 76u8, 126u8, 220u8,
							72u8, 239u8, 69u8, 77u8, 36u8, 177u8, 201u8, 221u8, 221u8, 146u8, 26u8,
							33u8, 202u8, 243u8, 3u8, 196u8, 122u8, 113u8, 248u8, 218u8, 52u8,
						],
					)
				}
				#[doc = " Actual proposal for a given hash, if it's current."]
				pub fn proposal_of_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::kusama_runtime::Call>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Council",
						"ProposalOf",
						Vec::new(),
						[
							136u8, 5u8, 14u8, 81u8, 136u8, 149u8, 103u8, 123u8, 76u8, 126u8, 220u8,
							72u8, 239u8, 69u8, 77u8, 36u8, 177u8, 201u8, 221u8, 221u8, 146u8, 26u8,
							33u8, 202u8, 243u8, 3u8, 196u8, 122u8, 113u8, 248u8, 218u8, 52u8,
						],
					)
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::H256>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_collective::Votes<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Council",
						"Voting",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							89u8, 108u8, 65u8, 58u8, 60u8, 116u8, 54u8, 68u8, 179u8, 73u8, 161u8,
							168u8, 78u8, 213u8, 208u8, 54u8, 244u8, 58u8, 70u8, 209u8, 170u8,
							136u8, 215u8, 3u8, 2u8, 105u8, 229u8, 217u8, 240u8, 230u8, 107u8,
							221u8,
						],
					)
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_collective::Votes<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Council",
						"Voting",
						Vec::new(),
						[
							89u8, 108u8, 65u8, 58u8, 60u8, 116u8, 54u8, 68u8, 179u8, 73u8, 161u8,
							168u8, 78u8, 213u8, 208u8, 54u8, 244u8, 58u8, 70u8, 209u8, 170u8,
							136u8, 215u8, 3u8, 2u8, 105u8, 229u8, 217u8, 240u8, 230u8, 107u8,
							221u8,
						],
					)
				}
				#[doc = " Proposals so far."]
				pub fn proposal_count(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Council",
						"ProposalCount",
						vec![],
						[
							132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8, 172u8, 143u8, 33u8,
							140u8, 99u8, 124u8, 208u8, 57u8, 232u8, 154u8, 110u8, 32u8, 142u8,
							24u8, 149u8, 109u8, 105u8, 30u8, 83u8, 39u8, 177u8, 127u8, 160u8, 34u8,
							70u8,
						],
					)
				}
				#[doc = " The current members of the collective. This is stored sorted (just by value)."]
				pub fn members(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Council",
						"Members",
						vec![],
						[
							162u8, 72u8, 174u8, 204u8, 140u8, 105u8, 205u8, 176u8, 197u8, 117u8,
							206u8, 134u8, 157u8, 110u8, 139u8, 54u8, 43u8, 233u8, 25u8, 51u8, 36u8,
							238u8, 94u8, 124u8, 221u8, 52u8, 237u8, 71u8, 125u8, 56u8, 129u8,
							222u8,
						],
					)
				}
				#[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
				pub fn prime(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::crypto::AccountId32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Council",
						"Prime",
						vec![],
						[
							108u8, 118u8, 54u8, 193u8, 207u8, 227u8, 119u8, 97u8, 23u8, 239u8,
							157u8, 69u8, 56u8, 142u8, 106u8, 17u8, 215u8, 159u8, 48u8, 42u8, 185u8,
							209u8, 49u8, 159u8, 32u8, 168u8, 111u8, 158u8, 159u8, 217u8, 244u8,
							158u8,
						],
					)
				}
			}
		}
	}
	pub mod technical_committee {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetMembers {
				pub new_members: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
				pub prime: ::core::option::Option<::subxt::ext::sp_core::crypto::AccountId32>,
				pub old_count: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Execute {
				pub proposal: ::std::boxed::Box<runtime_types::kusama_runtime::Call>,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Propose {
				#[codec(compact)]
				pub threshold: ::core::primitive::u32,
				pub proposal: ::std::boxed::Box<runtime_types::kusama_runtime::Call>,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Vote {
				pub proposal: ::subxt::ext::sp_core::H256,
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				pub approve: ::core::primitive::bool,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Close {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				#[codec(compact)]
				pub proposal_weight_bound: ::core::primitive::u64,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct DisapproveProposal {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Set the collective's membership."]
				#[doc = ""]
				#[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
				#[doc = "- `prime`: The prime member whose vote sets the default."]
				#[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
				#[doc = "  weight estimation."]
				#[doc = ""]
				#[doc = "Requires root origin."]
				#[doc = ""]
				#[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
				#[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
				#[doc = ""]
				#[doc = "# WARNING:"]
				#[doc = ""]
				#[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
				#[doc = "implementation of the trait [`ChangeMembers`]."]
				#[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
				#[doc = "with other logic managing the member set."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "## Weight"]
				#[doc = "- `O(MP + N)` where:"]
				#[doc = "  - `M` old-members-count (code- and governance-bounded)"]
				#[doc = "  - `N` new-members-count (code- and governance-bounded)"]
				#[doc = "  - `P` proposals-count (code-bounded)"]
				#[doc = "- DB:"]
				#[doc = "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the"]
				#[doc = "    members"]
				#[doc = "  - 1 storage read (codec `O(P)`) for reading the proposals"]
				#[doc = "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal"]
				#[doc = "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one"]
				#[doc = "# </weight>"]
				pub fn set_members(
					&self,
					new_members: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					prime: ::core::option::Option<::subxt::ext::sp_core::crypto::AccountId32>,
					old_count: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetMembers> {
					::subxt::tx::StaticTxPayload::new(
						"TechnicalCommittee",
						"set_members",
						SetMembers { new_members, prime, old_count },
						[
							196u8, 103u8, 123u8, 125u8, 226u8, 177u8, 126u8, 37u8, 160u8, 114u8,
							34u8, 136u8, 219u8, 84u8, 199u8, 94u8, 242u8, 20u8, 126u8, 126u8,
							166u8, 190u8, 198u8, 33u8, 162u8, 113u8, 237u8, 222u8, 90u8, 1u8, 2u8,
							234u8,
						],
					)
				}
				#[doc = "Dispatch a proposal from a member using the `Member` origin."]
				#[doc = ""]
				#[doc = "Origin must be a member of the collective."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "## Weight"]
				#[doc = "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching"]
				#[doc = "  `proposal`"]
				#[doc = "- DB: 1 read (codec `O(M)`) + DB access of `proposal`"]
				#[doc = "- 1 event"]
				#[doc = "# </weight>"]
				pub fn execute(
					&self,
					proposal: runtime_types::kusama_runtime::Call,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<Execute> {
					::subxt::tx::StaticTxPayload::new(
						"TechnicalCommittee",
						"execute",
						Execute { proposal: ::std::boxed::Box::new(proposal), length_bound },
						[
							63u8, 77u8, 3u8, 128u8, 200u8, 250u8, 146u8, 11u8, 202u8, 115u8, 147u8,
							181u8, 171u8, 16u8, 70u8, 67u8, 9u8, 31u8, 248u8, 102u8, 195u8, 130u8,
							60u8, 150u8, 171u8, 11u8, 103u8, 87u8, 97u8, 185u8, 90u8, 151u8,
						],
					)
				}
				#[doc = "Add a new proposal to either be voted on or executed directly."]
				#[doc = ""]
				#[doc = "Requires the sender to be member."]
				#[doc = ""]
				#[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
				#[doc = "or put up for voting."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "## Weight"]
				#[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
				#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "  - `M` is members-count (code- and governance-bounded)"]
				#[doc = "  - branching is influenced by `threshold` where:"]
				#[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
				#[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
				#[doc = "- DB:"]
				#[doc = "  - 1 storage read `is_member` (codec `O(M)`)"]
				#[doc = "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)"]
				#[doc = "  - DB accesses influenced by `threshold`:"]
				#[doc = "    - EITHER storage accesses done by `proposal` (`threshold < 2`)"]
				#[doc = "    - OR proposal insertion (`threshold <= 2`)"]
				#[doc = "      - 1 storage mutation `Proposals` (codec `O(P2)`)"]
				#[doc = "      - 1 storage mutation `ProposalCount` (codec `O(1)`)"]
				#[doc = "      - 1 storage write `ProposalOf` (codec `O(B)`)"]
				#[doc = "      - 1 storage write `Voting` (codec `O(M)`)"]
				#[doc = "  - 1 event"]
				#[doc = "# </weight>"]
				pub fn propose(
					&self,
					threshold: ::core::primitive::u32,
					proposal: runtime_types::kusama_runtime::Call,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<Propose> {
					::subxt::tx::StaticTxPayload::new(
						"TechnicalCommittee",
						"propose",
						Propose {
							threshold,
							proposal: ::std::boxed::Box::new(proposal),
							length_bound,
						},
						[
							242u8, 239u8, 222u8, 80u8, 10u8, 136u8, 161u8, 190u8, 94u8, 119u8,
							36u8, 67u8, 182u8, 140u8, 177u8, 173u8, 87u8, 25u8, 66u8, 185u8, 44u8,
							196u8, 142u8, 109u8, 8u8, 84u8, 144u8, 161u8, 131u8, 120u8, 141u8,
							147u8,
						],
					)
				}
				#[doc = "Add an aye or nay vote for the sender to the given proposal."]
				#[doc = ""]
				#[doc = "Requires the sender to be a member."]
				#[doc = ""]
				#[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
				#[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
				#[doc = "fee."]
				#[doc = "# <weight>"]
				#[doc = "## Weight"]
				#[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
				#[doc = "- DB:"]
				#[doc = "  - 1 storage read `Members` (codec `O(M)`)"]
				#[doc = "  - 1 storage mutation `Voting` (codec `O(M)`)"]
				#[doc = "- 1 event"]
				#[doc = "# </weight>"]
				pub fn vote(
					&self,
					proposal: ::subxt::ext::sp_core::H256,
					index: ::core::primitive::u32,
					approve: ::core::primitive::bool,
				) -> ::subxt::tx::StaticTxPayload<Vote> {
					::subxt::tx::StaticTxPayload::new(
						"TechnicalCommittee",
						"vote",
						Vote { proposal, index, approve },
						[
							108u8, 46u8, 180u8, 148u8, 145u8, 24u8, 173u8, 56u8, 36u8, 100u8,
							216u8, 43u8, 178u8, 202u8, 26u8, 136u8, 93u8, 84u8, 80u8, 134u8, 14u8,
							42u8, 248u8, 205u8, 68u8, 92u8, 79u8, 11u8, 113u8, 115u8, 157u8, 100u8,
						],
					)
				}
				#[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
				#[doc = ""]
				#[doc = "May be called by any signed account in order to finish voting and close the proposal."]
				#[doc = ""]
				#[doc = "If called before the end of the voting period it will only close the vote if it is"]
				#[doc = "has enough votes to be approved or disapproved."]
				#[doc = ""]
				#[doc = "If called after the end of the voting period abstentions are counted as rejections"]
				#[doc = "unless there is a prime member set and the prime member cast an approval."]
				#[doc = ""]
				#[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
				#[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
				#[doc = ""]
				#[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
				#[doc = "proposal."]
				#[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
				#[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "## Weight"]
				#[doc = "- `O(B + M + P1 + P2)` where:"]
				#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "  - `M` is members-count (code- and governance-bounded)"]
				#[doc = "  - `P1` is the complexity of `proposal` preimage."]
				#[doc = "  - `P2` is proposal-count (code-bounded)"]
				#[doc = "- DB:"]
				#[doc = " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)"]
				#[doc = " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec"]
				#[doc = "   `O(P2)`)"]
				#[doc = " - any mutations done while executing `proposal` (`P1`)"]
				#[doc = "- up to 3 events"]
				#[doc = "# </weight>"]
				pub fn close(
					&self,
					proposal_hash: ::subxt::ext::sp_core::H256,
					index: ::core::primitive::u32,
					proposal_weight_bound: ::core::primitive::u64,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<Close> {
					::subxt::tx::StaticTxPayload::new(
						"TechnicalCommittee",
						"close",
						Close { proposal_hash, index, proposal_weight_bound, length_bound },
						[
							88u8, 8u8, 33u8, 184u8, 4u8, 97u8, 120u8, 237u8, 43u8, 183u8, 130u8,
							139u8, 65u8, 74u8, 166u8, 119u8, 246u8, 65u8, 132u8, 219u8, 118u8,
							69u8, 182u8, 195u8, 111u8, 204u8, 107u8, 78u8, 152u8, 218u8, 181u8,
							208u8,
						],
					)
				}
				#[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
				#[doc = "state."]
				#[doc = ""]
				#[doc = "Must be called by the Root origin."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Complexity: O(P) where P is the number of max proposals"]
				#[doc = "DB Weight:"]
				#[doc = "* Reads: Proposals"]
				#[doc = "* Writes: Voting, Proposals, ProposalOf"]
				#[doc = "# </weight>"]
				pub fn disapprove_proposal(
					&self,
					proposal_hash: ::subxt::ext::sp_core::H256,
				) -> ::subxt::tx::StaticTxPayload<DisapproveProposal> {
					::subxt::tx::StaticTxPayload::new(
						"TechnicalCommittee",
						"disapprove_proposal",
						DisapproveProposal { proposal_hash },
						[
							25u8, 123u8, 1u8, 8u8, 74u8, 37u8, 3u8, 40u8, 97u8, 37u8, 175u8, 224u8,
							72u8, 155u8, 123u8, 109u8, 104u8, 43u8, 91u8, 125u8, 199u8, 51u8, 17u8,
							225u8, 133u8, 38u8, 120u8, 76u8, 164u8, 5u8, 194u8, 201u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_collective::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
			#[doc = "`MemberCount`)."]
			pub struct Proposed {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
				pub proposal_index: ::core::primitive::u32,
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub threshold: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Proposed {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A motion (given hash) has been voted on by given account, leaving"]
			#[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
			pub struct Voted {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub voted: ::core::primitive::bool,
				pub yes: ::core::primitive::u32,
				pub no: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Voted {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Voted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A motion was approved by the required threshold."]
			pub struct Approved {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
			}
			impl ::subxt::events::StaticEvent for Approved {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Approved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A motion was not approved by the required threshold."]
			pub struct Disapproved {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
			}
			impl ::subxt::events::StaticEvent for Disapproved {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Disapproved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A motion was executed; result will be `Ok` if it returned without error."]
			pub struct Executed {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for Executed {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Executed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A single member did some action; result will be `Ok` if it returned without error."]
			pub struct MemberExecuted {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for MemberExecuted {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "MemberExecuted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
			pub struct Closed {
				pub proposal_hash: ::subxt::ext::sp_core::H256,
				pub yes: ::core::primitive::u32,
				pub no: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Closed {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Closed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The hashes of the active proposals."]
				pub fn proposals(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							::subxt::ext::sp_core::H256,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"TechnicalCommittee",
						"Proposals",
						vec![],
						[
							10u8, 133u8, 82u8, 54u8, 193u8, 41u8, 253u8, 159u8, 56u8, 96u8, 249u8,
							148u8, 43u8, 57u8, 116u8, 43u8, 222u8, 243u8, 237u8, 231u8, 238u8,
							60u8, 26u8, 225u8, 19u8, 203u8, 213u8, 220u8, 114u8, 217u8, 100u8,
							27u8,
						],
					)
				}
				#[doc = " Actual proposal for a given hash, if it's current."]
				pub fn proposal_of(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::H256>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::kusama_runtime::Call>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"TechnicalCommittee",
						"ProposalOf",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							136u8, 5u8, 14u8, 81u8, 136u8, 149u8, 103u8, 123u8, 76u8, 126u8, 220u8,
							72u8, 239u8, 69u8, 77u8, 36u8, 177u8, 201u8, 221u8, 221u8, 146u8, 26u8,
							33u8, 202u8, 243u8, 3u8, 196u8, 122u8, 113u8, 248u8, 218u8, 52u8,
						],
					)
				}
				#[doc = " Actual proposal for a given hash, if it's current."]
				pub fn proposal_of_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::kusama_runtime::Call>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"TechnicalCommittee",
						"ProposalOf",
						Vec::new(),
						[
							136u8, 5u8, 14u8, 81u8, 136u8, 149u8, 103u8, 123u8, 76u8, 126u8, 220u8,
							72u8, 239u8, 69u8, 77u8, 36u8, 177u8, 201u8, 221u8, 221u8, 146u8, 26u8,
							33u8, 202u8, 243u8, 3u8, 196u8, 122u8, 113u8, 248u8, 218u8, 52u8,
						],
					)
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::H256>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_collective::Votes<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"TechnicalCommittee",
						"Voting",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							89u8, 108u8, 65u8, 58u8, 60u8, 116u8, 54u8, 68u8, 179u8, 73u8, 161u8,
							168u8, 78u8, 213u8, 208u8, 54u8, 244u8, 58u8, 70u8, 209u8, 170u8,
							136u8, 215u8, 3u8, 2u8, 105u8, 229u8, 217u8, 240u8, 230u8, 107u8,
							221u8,
						],
					)
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_collective::Votes<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"TechnicalCommittee",
						"Voting",
						Vec::new(),
						[
							89u8, 108u8, 65u8, 58u8, 60u8, 116u8, 54u8, 68u8, 179u8, 73u8, 161u8,
							168u8, 78u8, 213u8, 208u8, 54u8, 244u8, 58u8, 70u8, 209u8, 170u8,
							136u8, 215u8, 3u8, 2u8, 105u8, 229u8, 217u8, 240u8, 230u8, 107u8,
							221u8,
						],
					)
				}
				#[doc = " Proposals so far."]
				pub fn proposal_count(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"TechnicalCommittee",
						"ProposalCount",
						vec![],
						[
							132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8, 172u8, 143u8, 33u8,
							140u8, 99u8, 124u8, 208u8, 57u8, 232u8, 154u8, 110u8, 32u8, 142u8,
							24u8, 149u8, 109u8, 105u8, 30u8, 83u8, 39u8, 177u8, 127u8, 160u8, 34u8,
							70u8,
						],
					)
				}
				#[doc = " The current members of the collective. This is stored sorted (just by value)."]
				pub fn members(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"TechnicalCommittee",
						"Members",
						vec![],
						[
							162u8, 72u8, 174u8, 204u8, 140u8, 105u8, 205u8, 176u8, 197u8, 117u8,
							206u8, 134u8, 157u8, 110u8, 139u8, 54u8, 43u8, 233u8, 25u8, 51u8, 36u8,
							238u8, 94u8, 124u8, 221u8, 52u8, 237u8, 71u8, 125u8, 56u8, 129u8,
							222u8,
						],
					)
				}
				#[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
				pub fn prime(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::crypto::AccountId32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"TechnicalCommittee",
						"Prime",
						vec![],
						[
							108u8, 118u8, 54u8, 193u8, 207u8, 227u8, 119u8, 97u8, 23u8, 239u8,
							157u8, 69u8, 56u8, 142u8, 106u8, 17u8, 215u8, 159u8, 48u8, 42u8, 185u8,
							209u8, 49u8, 159u8, 32u8, 168u8, 111u8, 158u8, 159u8, 217u8, 244u8,
							158u8,
						],
					)
				}
			}
		}
	}
	pub mod phragmen_election {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Vote {
				pub votes: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RemoveVoter;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SubmitCandidacy {
				#[codec(compact)]
				pub candidate_count: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RenounceCandidacy {
				pub renouncing: runtime_types::pallet_elections_phragmen::Renouncing,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RemoveMember {
				pub who: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
				pub slash_bond: ::core::primitive::bool,
				pub rerun_election: ::core::primitive::bool,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct CleanDefunctVoters {
				pub num_voters: ::core::primitive::u32,
				pub num_defunct: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Vote for a set of candidates for the upcoming round of election. This can be called to"]
				#[doc = "set the initial votes, or update already existing votes."]
				#[doc = ""]
				#[doc = "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is"]
				#[doc = "reserved. The deposit is based on the number of votes and can be updated over time."]
				#[doc = ""]
				#[doc = "The `votes` should:"]
				#[doc = "  - not be empty."]
				#[doc = "  - be less than the number of possible candidates. Note that all current members and"]
				#[doc = "    runners-up are also automatically candidates for the next round."]
				#[doc = ""]
				#[doc = "If `value` is more than `who`'s free balance, then the maximum of the two is used."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be signed."]
				#[doc = ""]
				#[doc = "### Warning"]
				#[doc = ""]
				#[doc = "It is the responsibility of the caller to **NOT** place all of their balance into the"]
				#[doc = "lock and keep some for further operations."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less."]
				#[doc = "# </weight>"]
				pub fn vote(
					&self,
					votes: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					value: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<Vote> {
					::subxt::tx::StaticTxPayload::new(
						"PhragmenElection",
						"vote",
						Vote { votes, value },
						[
							71u8, 90u8, 175u8, 225u8, 51u8, 202u8, 197u8, 252u8, 183u8, 92u8,
							239u8, 83u8, 112u8, 144u8, 128u8, 211u8, 109u8, 33u8, 252u8, 6u8,
							156u8, 15u8, 91u8, 88u8, 70u8, 19u8, 32u8, 29u8, 224u8, 255u8, 26u8,
							145u8,
						],
					)
				}
				#[doc = "Remove `origin` as a voter."]
				#[doc = ""]
				#[doc = "This removes the lock and returns the deposit."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be signed and be a voter."]
				pub fn remove_voter(&self) -> ::subxt::tx::StaticTxPayload<RemoveVoter> {
					::subxt::tx::StaticTxPayload::new(
						"PhragmenElection",
						"remove_voter",
						RemoveVoter {},
						[
							254u8, 46u8, 140u8, 4u8, 218u8, 45u8, 150u8, 72u8, 67u8, 131u8, 108u8,
							201u8, 46u8, 157u8, 104u8, 161u8, 53u8, 155u8, 130u8, 50u8, 88u8,
							149u8, 255u8, 12u8, 17u8, 85u8, 95u8, 69u8, 153u8, 130u8, 221u8, 1u8,
						],
					)
				}
				#[doc = "Submit oneself for candidacy. A fixed amount of deposit is recorded."]
				#[doc = ""]
				#[doc = "All candidates are wiped at the end of the term. They either become a member/runner-up,"]
				#[doc = "or leave the system while their deposit is slashed."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be signed."]
				#[doc = ""]
				#[doc = "### Warning"]
				#[doc = ""]
				#[doc = "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]"]
				#[doc = "to get their deposit back. Losing the spot in an election will always lead to a slash."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "The number of current candidates must be provided as witness data."]
				#[doc = "# </weight>"]
				pub fn submit_candidacy(
					&self,
					candidate_count: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SubmitCandidacy> {
					::subxt::tx::StaticTxPayload::new(
						"PhragmenElection",
						"submit_candidacy",
						SubmitCandidacy { candidate_count },
						[
							228u8, 63u8, 217u8, 99u8, 128u8, 104u8, 175u8, 10u8, 30u8, 35u8, 47u8,
							14u8, 254u8, 122u8, 146u8, 239u8, 61u8, 145u8, 82u8, 7u8, 181u8, 98u8,
							238u8, 208u8, 23u8, 84u8, 48u8, 255u8, 177u8, 255u8, 84u8, 83u8,
						],
					)
				}
				#[doc = "Renounce one's intention to be a candidate for the next election round. 3 potential"]
				#[doc = "outcomes exist:"]
				#[doc = ""]
				#[doc = "- `origin` is a candidate and not elected in any set. In this case, the deposit is"]
				#[doc = "  unreserved, returned and origin is removed as a candidate."]
				#[doc = "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and"]
				#[doc = "  origin is removed as a runner-up."]
				#[doc = "- `origin` is a current member. In this case, the deposit is unreserved and origin is"]
				#[doc = "  removed as a member, consequently not being a candidate for the next round anymore."]
				#[doc = "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they"]
				#[doc = "  are immediately used. If the prime is renouncing, then no prime will exist until the"]
				#[doc = "  next round."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be signed, and have one of the above roles."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "The type of renouncing must be provided as witness data."]
				#[doc = "# </weight>"]
				pub fn renounce_candidacy(
					&self,
					renouncing: runtime_types::pallet_elections_phragmen::Renouncing,
				) -> ::subxt::tx::StaticTxPayload<RenounceCandidacy> {
					::subxt::tx::StaticTxPayload::new(
						"PhragmenElection",
						"renounce_candidacy",
						RenounceCandidacy { renouncing },
						[
							70u8, 72u8, 208u8, 36u8, 80u8, 245u8, 224u8, 75u8, 60u8, 142u8, 19u8,
							49u8, 142u8, 90u8, 14u8, 69u8, 15u8, 61u8, 170u8, 235u8, 16u8, 252u8,
							86u8, 200u8, 120u8, 127u8, 36u8, 42u8, 143u8, 130u8, 217u8, 128u8,
						],
					)
				}
				#[doc = "Remove a particular member from the set. This is effective immediately and the bond of"]
				#[doc = "the outgoing member is slashed."]
				#[doc = ""]
				#[doc = "If a runner-up is available, then the best runner-up will be removed and replaces the"]
				#[doc = "outgoing member. Otherwise, if `rerun_election` is `true`, a new phragmen election is"]
				#[doc = "started, else, nothing happens."]
				#[doc = ""]
				#[doc = "If `slash_bond` is set to true, the bond of the member being removed is slashed. Else,"]
				#[doc = "it is returned."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be root."]
				#[doc = ""]
				#[doc = "Note that this does not affect the designated block number of the next election."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "If we have a replacement, we use a small weight. Else, since this is a root call and"]
				#[doc = "will go into phragmen, we assume full block for now."]
				#[doc = "# </weight>"]
				pub fn remove_member(
					&self,
					who: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
					slash_bond: ::core::primitive::bool,
					rerun_election: ::core::primitive::bool,
				) -> ::subxt::tx::StaticTxPayload<RemoveMember> {
					::subxt::tx::StaticTxPayload::new(
						"PhragmenElection",
						"remove_member",
						RemoveMember { who, slash_bond, rerun_election },
						[
							45u8, 106u8, 9u8, 19u8, 133u8, 38u8, 20u8, 233u8, 12u8, 169u8, 216u8,
							40u8, 23u8, 139u8, 184u8, 202u8, 2u8, 124u8, 202u8, 48u8, 205u8, 176u8,
							161u8, 43u8, 66u8, 24u8, 189u8, 183u8, 233u8, 62u8, 102u8, 237u8,
						],
					)
				}
				#[doc = "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The"]
				#[doc = "deposit of the removed voters are returned."]
				#[doc = ""]
				#[doc = "This is an root function to be used only for cleaning the state."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be root."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "The total number of voters and those that are defunct must be provided as witness data."]
				#[doc = "# </weight>"]
				pub fn clean_defunct_voters(
					&self,
					num_voters: ::core::primitive::u32,
					num_defunct: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<CleanDefunctVoters> {
					::subxt::tx::StaticTxPayload::new(
						"PhragmenElection",
						"clean_defunct_voters",
						CleanDefunctVoters { num_voters, num_defunct },
						[
							198u8, 162u8, 30u8, 249u8, 191u8, 38u8, 141u8, 123u8, 230u8, 90u8,
							213u8, 103u8, 168u8, 28u8, 5u8, 215u8, 213u8, 152u8, 46u8, 189u8,
							238u8, 209u8, 209u8, 142u8, 159u8, 222u8, 161u8, 26u8, 161u8, 250u8,
							9u8, 100u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_elections_phragmen::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A new term with new_members. This indicates that enough candidates existed to run"]
			#[doc = "the election, not that enough have has been elected. The inner value must be examined"]
			#[doc = "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond"]
			#[doc = "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to"]
			#[doc = "begin with."]
			pub struct NewTerm {
				pub new_members: ::std::vec::Vec<(
					::subxt::ext::sp_core::crypto::AccountId32,
					::core::primitive::u128,
				)>,
			}
			impl ::subxt::events::StaticEvent for NewTerm {
				const PALLET: &'static str = "PhragmenElection";
				const EVENT: &'static str = "NewTerm";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "No (or not enough) candidates existed for this round. This is different from"]
			#[doc = "`NewTerm(\\[\\])`. See the description of `NewTerm`."]
			pub struct EmptyTerm;
			impl ::subxt::events::StaticEvent for EmptyTerm {
				const PALLET: &'static str = "PhragmenElection";
				const EVENT: &'static str = "EmptyTerm";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Internal error happened while trying to perform election."]
			pub struct ElectionError;
			impl ::subxt::events::StaticEvent for ElectionError {
				const PALLET: &'static str = "PhragmenElection";
				const EVENT: &'static str = "ElectionError";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A member has been removed. This should always be followed by either `NewTerm` or"]
			#[doc = "`EmptyTerm`."]
			pub struct MemberKicked {
				pub member: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for MemberKicked {
				const PALLET: &'static str = "PhragmenElection";
				const EVENT: &'static str = "MemberKicked";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Someone has renounced their candidacy."]
			pub struct Renounced {
				pub candidate: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Renounced {
				const PALLET: &'static str = "PhragmenElection";
				const EVENT: &'static str = "Renounced";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A candidate was slashed by amount due to failing to obtain a seat as member or"]
			#[doc = "runner-up."]
			#[doc = ""]
			#[doc = "Note that old members and runners-up are also candidates."]
			pub struct CandidateSlashed {
				pub candidate: ::subxt::ext::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for CandidateSlashed {
				const PALLET: &'static str = "PhragmenElection";
				const EVENT: &'static str = "CandidateSlashed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A seat holder was slashed by amount by being forcefully removed from the set."]
			pub struct SeatHolderSlashed {
				pub seat_holder: ::subxt::ext::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for SeatHolderSlashed {
				const PALLET: &'static str = "PhragmenElection";
				const EVENT: &'static str = "SeatHolderSlashed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The current elected members."]
				#[doc = ""]
				#[doc = " Invariant: Always sorted based on account id."]
				pub fn members(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							runtime_types::pallet_elections_phragmen::SeatHolder<
								::subxt::ext::sp_core::crypto::AccountId32,
								::core::primitive::u128,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"PhragmenElection",
						"Members",
						vec![],
						[
							2u8, 182u8, 43u8, 180u8, 87u8, 185u8, 26u8, 79u8, 196u8, 55u8, 28u8,
							26u8, 174u8, 133u8, 158u8, 221u8, 101u8, 161u8, 83u8, 9u8, 221u8,
							175u8, 221u8, 220u8, 81u8, 80u8, 1u8, 236u8, 74u8, 121u8, 10u8, 82u8,
						],
					)
				}
				#[doc = " The current reserved runners-up."]
				#[doc = ""]
				#[doc = " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the"]
				#[doc = " last (i.e. _best_) runner-up will be replaced."]
				pub fn runners_up(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							runtime_types::pallet_elections_phragmen::SeatHolder<
								::subxt::ext::sp_core::crypto::AccountId32,
								::core::primitive::u128,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"PhragmenElection",
						"RunnersUp",
						vec![],
						[
							248u8, 81u8, 190u8, 53u8, 121u8, 49u8, 55u8, 69u8, 116u8, 177u8, 46u8,
							30u8, 131u8, 14u8, 32u8, 198u8, 10u8, 132u8, 73u8, 117u8, 2u8, 146u8,
							188u8, 146u8, 214u8, 227u8, 97u8, 77u8, 7u8, 131u8, 208u8, 209u8,
						],
					)
				}
				#[doc = " The present candidate list. A current member or runner-up can never enter this vector"]
				#[doc = " and is always implicitly assumed to be a candidate."]
				#[doc = ""]
				#[doc = " Second element is the deposit."]
				#[doc = ""]
				#[doc = " Invariant: Always sorted based on account id."]
				pub fn candidates(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<(
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						)>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"PhragmenElection",
						"Candidates",
						vec![],
						[
							224u8, 107u8, 141u8, 11u8, 54u8, 86u8, 117u8, 45u8, 195u8, 252u8,
							152u8, 21u8, 165u8, 23u8, 198u8, 117u8, 5u8, 216u8, 183u8, 163u8,
							243u8, 56u8, 11u8, 102u8, 85u8, 107u8, 219u8, 250u8, 45u8, 80u8, 108u8,
							127u8,
						],
					)
				}
				#[doc = " The total number of vote rounds that have happened, excluding the upcoming one."]
				pub fn election_rounds(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"PhragmenElection",
						"ElectionRounds",
						vec![],
						[
							144u8, 146u8, 10u8, 32u8, 149u8, 147u8, 59u8, 205u8, 61u8, 246u8, 28u8,
							169u8, 130u8, 136u8, 143u8, 104u8, 253u8, 86u8, 228u8, 68u8, 19u8,
							184u8, 166u8, 214u8, 58u8, 103u8, 176u8, 160u8, 240u8, 249u8, 117u8,
							115u8,
						],
					)
				}
				#[doc = " Votes and locked stake of a particular voter."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."]
				pub fn voting(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_elections_phragmen::Voter<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"PhragmenElection",
						"Voting",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							9u8, 135u8, 76u8, 194u8, 240u8, 182u8, 111u8, 207u8, 102u8, 37u8,
							126u8, 36u8, 84u8, 112u8, 26u8, 216u8, 175u8, 5u8, 14u8, 189u8, 83u8,
							185u8, 136u8, 39u8, 171u8, 221u8, 147u8, 20u8, 168u8, 126u8, 111u8,
							137u8,
						],
					)
				}
				#[doc = " Votes and locked stake of a particular voter."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."]
				pub fn voting_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_elections_phragmen::Voter<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"PhragmenElection",
						"Voting",
						Vec::new(),
						[
							9u8, 135u8, 76u8, 194u8, 240u8, 182u8, 111u8, 207u8, 102u8, 37u8,
							126u8, 36u8, 84u8, 112u8, 26u8, 216u8, 175u8, 5u8, 14u8, 189u8, 83u8,
							185u8, 136u8, 39u8, 171u8, 221u8, 147u8, 20u8, 168u8, 126u8, 111u8,
							137u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Identifier for the elections-phragmen pallet's lock"]
				pub fn pallet_id(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<[::core::primitive::u8; 8usize]>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"PhragmenElection",
						"PalletId",
						[
							224u8, 197u8, 247u8, 125u8, 62u8, 180u8, 69u8, 91u8, 226u8, 36u8, 82u8,
							148u8, 70u8, 147u8, 209u8, 40u8, 210u8, 229u8, 181u8, 191u8, 170u8,
							205u8, 138u8, 97u8, 127u8, 59u8, 124u8, 244u8, 252u8, 30u8, 213u8,
							179u8,
						],
					)
				}
				#[doc = " How much should be locked up in order to submit one's candidacy."]
				pub fn candidacy_bond(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"PhragmenElection",
						"CandidacyBond",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Base deposit associated with voting."]
				#[doc = ""]
				#[doc = " This should be sensibly high to economically ensure the pallet cannot be attacked by"]
				#[doc = " creating a gigantic number of votes."]
				pub fn voting_bond_base(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"PhragmenElection",
						"VotingBondBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount of bond that need to be locked for each vote (32 bytes)."]
				pub fn voting_bond_factor(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"PhragmenElection",
						"VotingBondFactor",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Number of members to elect."]
				pub fn desired_members(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"PhragmenElection",
						"DesiredMembers",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Number of runners_up to keep."]
				pub fn desired_runners_up(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"PhragmenElection",
						"DesiredRunnersUp",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " How long each seat is kept. This defines the next block number at which an election"]
				#[doc = " round will happen. If set to zero, no elections are ever triggered and the module will"]
				#[doc = " be in passive mode."]
				pub fn term_duration(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"PhragmenElection",
						"TermDuration",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of candidates in a phragmen election."]
				#[doc = ""]
				#[doc = " Warning: The election happens onchain, and this value will determine"]
				#[doc = " the size of the election. When this limit is reached no more"]
				#[doc = " candidates are accepted in the election."]
				pub fn max_candidates(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"PhragmenElection",
						"MaxCandidates",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of voters to allow in a phragmen election."]
				#[doc = ""]
				#[doc = " Warning: This impacts the size of the election which is run onchain."]
				#[doc = " When the limit is reached the new voters are ignored."]
				pub fn max_voters(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"PhragmenElection",
						"MaxVoters",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod technical_membership {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct AddMember {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RemoveMember {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SwapMember {
				pub remove: ::subxt::ext::sp_core::crypto::AccountId32,
				pub add: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ResetMembers {
				pub members: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ChangeKey {
				pub new: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetPrime {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ClearPrime;
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Add a member `who` to the set."]
				#[doc = ""]
				#[doc = "May only be called from `T::AddOrigin`."]
				pub fn add_member(
					&self,
					who: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<AddMember> {
					::subxt::tx::StaticTxPayload::new(
						"TechnicalMembership",
						"add_member",
						AddMember { who },
						[
							106u8, 33u8, 171u8, 114u8, 223u8, 105u8, 71u8, 15u8, 77u8, 253u8, 40u8,
							204u8, 244u8, 142u8, 103u8, 177u8, 200u8, 243u8, 114u8, 241u8, 36u8,
							135u8, 175u8, 255u8, 124u8, 193u8, 30u8, 46u8, 186u8, 172u8, 176u8,
							98u8,
						],
					)
				}
				#[doc = "Remove a member `who` from the set."]
				#[doc = ""]
				#[doc = "May only be called from `T::RemoveOrigin`."]
				pub fn remove_member(
					&self,
					who: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<RemoveMember> {
					::subxt::tx::StaticTxPayload::new(
						"TechnicalMembership",
						"remove_member",
						RemoveMember { who },
						[
							100u8, 17u8, 75u8, 92u8, 58u8, 100u8, 34u8, 187u8, 41u8, 160u8, 137u8,
							58u8, 78u8, 166u8, 161u8, 116u8, 1u8, 67u8, 201u8, 144u8, 103u8, 84u8,
							55u8, 246u8, 133u8, 180u8, 148u8, 86u8, 175u8, 175u8, 70u8, 73u8,
						],
					)
				}
				#[doc = "Swap out one member `remove` for another `add`."]
				#[doc = ""]
				#[doc = "May only be called from `T::SwapOrigin`."]
				#[doc = ""]
				#[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
				pub fn swap_member(
					&self,
					remove: ::subxt::ext::sp_core::crypto::AccountId32,
					add: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<SwapMember> {
					::subxt::tx::StaticTxPayload::new(
						"TechnicalMembership",
						"swap_member",
						SwapMember { remove, add },
						[
							66u8, 84u8, 183u8, 29u8, 104u8, 163u8, 220u8, 217u8, 103u8, 234u8,
							233u8, 138u8, 191u8, 147u8, 51u8, 98u8, 46u8, 51u8, 179u8, 200u8, 23u8,
							59u8, 112u8, 53u8, 8u8, 75u8, 135u8, 232u8, 116u8, 201u8, 60u8, 249u8,
						],
					)
				}
				#[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
				#[doc = "pass `members` pre-sorted."]
				#[doc = ""]
				#[doc = "May only be called from `T::ResetOrigin`."]
				pub fn reset_members(
					&self,
					members: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::tx::StaticTxPayload<ResetMembers> {
					::subxt::tx::StaticTxPayload::new(
						"TechnicalMembership",
						"reset_members",
						ResetMembers { members },
						[
							9u8, 35u8, 28u8, 59u8, 158u8, 232u8, 89u8, 78u8, 101u8, 53u8, 240u8,
							98u8, 13u8, 104u8, 235u8, 161u8, 201u8, 150u8, 117u8, 32u8, 75u8,
							209u8, 166u8, 252u8, 57u8, 131u8, 96u8, 215u8, 51u8, 81u8, 42u8, 123u8,
						],
					)
				}
				#[doc = "Swap out the sending member for some other key `new`."]
				#[doc = ""]
				#[doc = "May only be called from `Signed` origin of a current member."]
				#[doc = ""]
				#[doc = "Prime membership is passed from the origin account to `new`, if extant."]
				pub fn change_key(
					&self,
					new: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<ChangeKey> {
					::subxt::tx::StaticTxPayload::new(
						"TechnicalMembership",
						"change_key",
						ChangeKey { new },
						[
							53u8, 60u8, 54u8, 231u8, 151u8, 0u8, 27u8, 175u8, 250u8, 80u8, 74u8,
							184u8, 184u8, 63u8, 90u8, 216u8, 186u8, 136u8, 74u8, 214u8, 111u8,
							186u8, 137u8, 140u8, 108u8, 194u8, 128u8, 97u8, 168u8, 184u8, 112u8,
							60u8,
						],
					)
				}
				#[doc = "Set the prime member. Must be a current member."]
				#[doc = ""]
				#[doc = "May only be called from `T::PrimeOrigin`."]
				pub fn set_prime(
					&self,
					who: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<SetPrime> {
					::subxt::tx::StaticTxPayload::new(
						"TechnicalMembership",
						"set_prime",
						SetPrime { who },
						[
							123u8, 95u8, 75u8, 129u8, 19u8, 34u8, 192u8, 65u8, 169u8, 47u8, 184u8,
							246u8, 55u8, 250u8, 31u8, 158u8, 57u8, 197u8, 22u8, 112u8, 167u8,
							198u8, 136u8, 17u8, 15u8, 203u8, 101u8, 149u8, 15u8, 39u8, 16u8, 232u8,
						],
					)
				}
				#[doc = "Remove the prime member if it exists."]
				#[doc = ""]
				#[doc = "May only be called from `T::PrimeOrigin`."]
				pub fn clear_prime(&self) -> ::subxt::tx::StaticTxPayload<ClearPrime> {
					::subxt::tx::StaticTxPayload::new(
						"TechnicalMembership",
						"clear_prime",
						ClearPrime {},
						[
							186u8, 182u8, 225u8, 90u8, 71u8, 124u8, 69u8, 100u8, 234u8, 25u8, 53u8,
							23u8, 182u8, 32u8, 176u8, 81u8, 54u8, 140u8, 235u8, 126u8, 247u8, 7u8,
							155u8, 62u8, 35u8, 135u8, 48u8, 61u8, 88u8, 160u8, 183u8, 72u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_membership::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The given member was added; see the transaction for who."]
			pub struct MemberAdded;
			impl ::subxt::events::StaticEvent for MemberAdded {
				const PALLET: &'static str = "TechnicalMembership";
				const EVENT: &'static str = "MemberAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The given member was removed; see the transaction for who."]
			pub struct MemberRemoved;
			impl ::subxt::events::StaticEvent for MemberRemoved {
				const PALLET: &'static str = "TechnicalMembership";
				const EVENT: &'static str = "MemberRemoved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Two members were swapped; see the transaction for who."]
			pub struct MembersSwapped;
			impl ::subxt::events::StaticEvent for MembersSwapped {
				const PALLET: &'static str = "TechnicalMembership";
				const EVENT: &'static str = "MembersSwapped";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The membership was reset; see the transaction for who the new set is."]
			pub struct MembersReset;
			impl ::subxt::events::StaticEvent for MembersReset {
				const PALLET: &'static str = "TechnicalMembership";
				const EVENT: &'static str = "MembersReset";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "One of the members' keys changed."]
			pub struct KeyChanged;
			impl ::subxt::events::StaticEvent for KeyChanged {
				const PALLET: &'static str = "TechnicalMembership";
				const EVENT: &'static str = "KeyChanged";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Phantom member, never used."]
			pub struct Dummy;
			impl ::subxt::events::StaticEvent for Dummy {
				const PALLET: &'static str = "TechnicalMembership";
				const EVENT: &'static str = "Dummy";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The current membership, stored as an ordered Vec."]
				pub fn members(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							::subxt::ext::sp_core::crypto::AccountId32,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"TechnicalMembership",
						"Members",
						vec![],
						[
							56u8, 56u8, 29u8, 90u8, 26u8, 115u8, 252u8, 185u8, 37u8, 108u8, 16u8,
							46u8, 136u8, 139u8, 30u8, 19u8, 235u8, 78u8, 176u8, 129u8, 180u8, 57u8,
							178u8, 239u8, 211u8, 6u8, 64u8, 129u8, 195u8, 46u8, 178u8, 157u8,
						],
					)
				}
				#[doc = " The current prime member, if one exists."]
				pub fn prime(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::crypto::AccountId32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"TechnicalMembership",
						"Prime",
						vec![],
						[
							108u8, 118u8, 54u8, 193u8, 207u8, 227u8, 119u8, 97u8, 23u8, 239u8,
							157u8, 69u8, 56u8, 142u8, 106u8, 17u8, 215u8, 159u8, 48u8, 42u8, 185u8,
							209u8, 49u8, 159u8, 32u8, 168u8, 111u8, 158u8, 159u8, 217u8, 244u8,
							158u8,
						],
					)
				}
			}
		}
	}
	pub mod treasury {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ProposeSpend {
				#[codec(compact)]
				pub value: ::core::primitive::u128,
				pub beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RejectProposal {
				#[codec(compact)]
				pub proposal_id: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ApproveProposal {
				#[codec(compact)]
				pub proposal_id: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Spend {
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
				pub beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RemoveApproval {
				#[codec(compact)]
				pub proposal_id: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Put forward a suggestion for spending. A deposit proportional to the value"]
				#[doc = "is reserved and slashed if the proposal is rejected. It is returned once the"]
				#[doc = "proposal is awarded."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: O(1)"]
				#[doc = "- DbReads: `ProposalCount`, `origin account`"]
				#[doc = "- DbWrites: `ProposalCount`, `Proposals`, `origin account`"]
				#[doc = "# </weight>"]
				pub fn propose_spend(
					&self,
					value: ::core::primitive::u128,
					beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
				) -> ::subxt::tx::StaticTxPayload<ProposeSpend> {
					::subxt::tx::StaticTxPayload::new(
						"Treasury",
						"propose_spend",
						ProposeSpend { value, beneficiary },
						[
							109u8, 46u8, 8u8, 159u8, 127u8, 79u8, 27u8, 100u8, 92u8, 244u8, 78u8,
							46u8, 105u8, 246u8, 169u8, 210u8, 149u8, 7u8, 108u8, 153u8, 203u8,
							223u8, 8u8, 117u8, 126u8, 250u8, 255u8, 52u8, 245u8, 69u8, 45u8, 136u8,
						],
					)
				}
				#[doc = "Reject a proposed spend. The original deposit will be slashed."]
				#[doc = ""]
				#[doc = "May only be called from `T::RejectOrigin`."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: O(1)"]
				#[doc = "- DbReads: `Proposals`, `rejected proposer account`"]
				#[doc = "- DbWrites: `Proposals`, `rejected proposer account`"]
				#[doc = "# </weight>"]
				pub fn reject_proposal(
					&self,
					proposal_id: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<RejectProposal> {
					::subxt::tx::StaticTxPayload::new(
						"Treasury",
						"reject_proposal",
						RejectProposal { proposal_id },
						[
							106u8, 223u8, 97u8, 22u8, 111u8, 208u8, 128u8, 26u8, 198u8, 140u8,
							118u8, 126u8, 187u8, 51u8, 193u8, 50u8, 193u8, 68u8, 143u8, 144u8,
							34u8, 132u8, 44u8, 244u8, 105u8, 186u8, 223u8, 234u8, 17u8, 145u8,
							209u8, 145u8,
						],
					)
				}
				#[doc = "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary"]
				#[doc = "and the original deposit will be returned."]
				#[doc = ""]
				#[doc = "May only be called from `T::ApproveOrigin`."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: O(1)."]
				#[doc = "- DbReads: `Proposals`, `Approvals`"]
				#[doc = "- DbWrite: `Approvals`"]
				#[doc = "# </weight>"]
				pub fn approve_proposal(
					&self,
					proposal_id: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<ApproveProposal> {
					::subxt::tx::StaticTxPayload::new(
						"Treasury",
						"approve_proposal",
						ApproveProposal { proposal_id },
						[
							164u8, 229u8, 172u8, 98u8, 129u8, 62u8, 84u8, 128u8, 47u8, 108u8, 33u8,
							120u8, 89u8, 79u8, 57u8, 121u8, 4u8, 197u8, 170u8, 153u8, 156u8, 17u8,
							59u8, 164u8, 123u8, 227u8, 175u8, 195u8, 220u8, 160u8, 60u8, 186u8,
						],
					)
				}
				#[doc = "Propose and approve a spend of treasury funds."]
				#[doc = ""]
				#[doc = "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`."]
				#[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
				#[doc = "- `beneficiary`: The destination account for the transfer."]
				#[doc = ""]
				#[doc = "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the"]
				#[doc = "beneficiary."]
				pub fn spend(
					&self,
					amount: ::core::primitive::u128,
					beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
				) -> ::subxt::tx::StaticTxPayload<Spend> {
					::subxt::tx::StaticTxPayload::new(
						"Treasury",
						"spend",
						Spend { amount, beneficiary },
						[
							177u8, 178u8, 242u8, 136u8, 135u8, 237u8, 114u8, 71u8, 233u8, 239u8,
							7u8, 84u8, 14u8, 228u8, 58u8, 31u8, 158u8, 185u8, 25u8, 91u8, 70u8,
							33u8, 19u8, 92u8, 100u8, 162u8, 5u8, 48u8, 20u8, 120u8, 9u8, 109u8,
						],
					)
				}
				#[doc = "Force a previously approved proposal to be removed from the approval queue."]
				#[doc = "The original deposit will no longer be returned."]
				#[doc = ""]
				#[doc = "May only be called from `T::RejectOrigin`."]
				#[doc = "- `proposal_id`: The index of a proposal"]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: O(A) where `A` is the number of approvals"]
				#[doc = "- Db reads and writes: `Approvals`"]
				#[doc = "# </weight>"]
				#[doc = ""]
				#[doc = "Errors:"]
				#[doc = "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,"]
				#[doc = "i.e., the proposal has not been approved. This could also mean the proposal does not"]
				#[doc = "exist altogether, thus there is no way it would have been approved in the first place."]
				pub fn remove_approval(
					&self,
					proposal_id: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<RemoveApproval> {
					::subxt::tx::StaticTxPayload::new(
						"Treasury",
						"remove_approval",
						RemoveApproval { proposal_id },
						[
							133u8, 126u8, 181u8, 47u8, 196u8, 243u8, 7u8, 46u8, 25u8, 251u8, 154u8,
							125u8, 217u8, 77u8, 54u8, 245u8, 240u8, 180u8, 97u8, 34u8, 186u8, 53u8,
							225u8, 144u8, 155u8, 107u8, 172u8, 54u8, 250u8, 184u8, 178u8, 86u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_treasury::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "New proposal."]
			pub struct Proposed {
				pub proposal_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Proposed {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "We have ended a spend period and will now allocate funds."]
			pub struct Spending {
				pub budget_remaining: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Spending {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Spending";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Some funds have been allocated."]
			pub struct Awarded {
				pub proposal_index: ::core::primitive::u32,
				pub award: ::core::primitive::u128,
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Awarded {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Awarded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A proposal was rejected; funds were slashed."]
			pub struct Rejected {
				pub proposal_index: ::core::primitive::u32,
				pub slashed: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Rejected {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Rejected";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "Some of our funds have been burnt."]
			pub struct Burnt {
				pub burnt_funds: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Burnt {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Burnt";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "Spending has finished; this is the amount that rolls over until next spend."]
			pub struct Rollover {
				pub rollover_balance: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Rollover {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Rollover";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "Some funds have been deposited."]
			pub struct Deposit {
				pub value: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Deposit {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Deposit";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A new spend proposal has been approved."]
			pub struct SpendApproved {
				pub proposal_index: ::core::primitive::u32,
				pub amount: ::core::primitive::u128,
				pub beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for SpendApproved {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "SpendApproved";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Number of proposals that have been made."]
				pub fn proposal_count(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Treasury",
						"ProposalCount",
						vec![],
						[
							132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8, 172u8, 143u8, 33u8,
							140u8, 99u8, 124u8, 208u8, 57u8, 232u8, 154u8, 110u8, 32u8, 142u8,
							24u8, 149u8, 109u8, 105u8, 30u8, 83u8, 39u8, 177u8, 127u8, 160u8, 34u8,
							70u8,
						],
					)
				}
				#[doc = " Proposals that have been made."]
				pub fn proposals(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_treasury::Proposal<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Treasury",
						"Proposals",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							62u8, 223u8, 55u8, 209u8, 151u8, 134u8, 122u8, 65u8, 207u8, 38u8,
							113u8, 213u8, 237u8, 48u8, 129u8, 32u8, 91u8, 228u8, 108u8, 91u8, 37u8,
							49u8, 94u8, 4u8, 75u8, 122u8, 25u8, 34u8, 198u8, 224u8, 246u8, 160u8,
						],
					)
				}
				#[doc = " Proposals that have been made."]
				pub fn proposals_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_treasury::Proposal<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Treasury",
						"Proposals",
						Vec::new(),
						[
							62u8, 223u8, 55u8, 209u8, 151u8, 134u8, 122u8, 65u8, 207u8, 38u8,
							113u8, 213u8, 237u8, 48u8, 129u8, 32u8, 91u8, 228u8, 108u8, 91u8, 37u8,
							49u8, 94u8, 4u8, 75u8, 122u8, 25u8, 34u8, 198u8, 224u8, 246u8, 160u8,
						],
					)
				}
				#[doc = " Proposal indices that have been approved but not yet awarded."]
				pub fn approvals(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							::core::primitive::u32,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Treasury",
						"Approvals",
						vec![],
						[
							202u8, 106u8, 189u8, 40u8, 127u8, 172u8, 108u8, 50u8, 193u8, 4u8,
							248u8, 226u8, 176u8, 101u8, 212u8, 222u8, 64u8, 206u8, 244u8, 175u8,
							111u8, 106u8, 86u8, 96u8, 19u8, 109u8, 218u8, 152u8, 30u8, 59u8, 96u8,
							1u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Fraction of a proposal's value that should be bonded in order to place the proposal."]
				#[doc = " An accepted proposal gets these back. A rejected proposal does not."]
				pub fn proposal_bond(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_arithmetic::per_things::Permill,
					>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Treasury",
						"ProposalBond",
						[
							225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8, 192u8, 254u8, 19u8, 87u8,
							80u8, 16u8, 62u8, 42u8, 204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
							177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8, 86u8, 227u8,
						],
					)
				}
				#[doc = " Minimum amount of funds that should be placed in a deposit for making a proposal."]
				pub fn proposal_bond_minimum(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Treasury",
						"ProposalBondMinimum",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Maximum amount of funds that should be placed in a deposit for making a proposal."]
				pub fn proposal_bond_maximum(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<
						::core::option::Option<::core::primitive::u128>,
					>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Treasury",
						"ProposalBondMaximum",
						[
							84u8, 154u8, 218u8, 83u8, 84u8, 189u8, 32u8, 20u8, 120u8, 194u8, 88u8,
							205u8, 109u8, 216u8, 114u8, 193u8, 120u8, 198u8, 154u8, 237u8, 134u8,
							204u8, 102u8, 247u8, 52u8, 103u8, 231u8, 43u8, 243u8, 122u8, 60u8,
							216u8,
						],
					)
				}
				#[doc = " Period between successive spends."]
				pub fn spend_period(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Treasury",
						"SpendPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Percentage of spare funds (if any) that are burnt per spend period."]
				pub fn burn(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_arithmetic::per_things::Permill,
					>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Treasury",
						"Burn",
						[
							225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8, 192u8, 254u8, 19u8, 87u8,
							80u8, 16u8, 62u8, 42u8, 204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
							177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8, 86u8, 227u8,
						],
					)
				}
				#[doc = " The treasury's pallet id, used for deriving its sovereign account ID."]
				pub fn pallet_id(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::frame_support::PalletId>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Treasury",
						"PalletId",
						[
							139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
							174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
							9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
						],
					)
				}
				#[doc = " The maximum number of approvals that can wait in the spending queue."]
				#[doc = ""]
				#[doc = " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."]
				pub fn max_approvals(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Treasury",
						"MaxApprovals",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod claims {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Claim {
				pub dest: ::subxt::ext::sp_core::crypto::AccountId32,
				pub ethereum_signature:
					runtime_types::polkadot_runtime_common::claims::EcdsaSignature,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct MintClaim {
				pub who: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
				pub value: ::core::primitive::u128,
				pub vesting_schedule: ::core::option::Option<(
					::core::primitive::u128,
					::core::primitive::u128,
					::core::primitive::u32,
				)>,
				pub statement: ::core::option::Option<
					runtime_types::polkadot_runtime_common::claims::StatementKind,
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ClaimAttest {
				pub dest: ::subxt::ext::sp_core::crypto::AccountId32,
				pub ethereum_signature:
					runtime_types::polkadot_runtime_common::claims::EcdsaSignature,
				pub statement: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Attest {
				pub statement: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct MoveClaim {
				pub old: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
				pub new: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
				pub maybe_preclaim:
					::core::option::Option<::subxt::ext::sp_core::crypto::AccountId32>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Make a claim to collect your DOTs."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _None_."]
				#[doc = ""]
				#[doc = "Unsigned Validation:"]
				#[doc = "A call to claim is deemed valid if the signature provided matches"]
				#[doc = "the expected signed message of:"]
				#[doc = ""]
				#[doc = "> Ethereum Signed Message:"]
				#[doc = "> (configured prefix string)(address)"]
				#[doc = ""]
				#[doc = "and `address` matches the `dest` account."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `dest`: The destination account to payout the claim."]
				#[doc = "- `ethereum_signature`: The signature of an ethereum signed message"]
				#[doc = "   matching the format described above."]
				#[doc = ""]
				#[doc = "<weight>"]
				#[doc = "The weight of this call is invariant over the input parameters."]
				#[doc = "Weight includes logic to validate unsigned `claim` call."]
				#[doc = ""]
				#[doc = "Total Complexity: O(1)"]
				#[doc = "</weight>"]
				pub fn claim(
					&self,
					dest: ::subxt::ext::sp_core::crypto::AccountId32,
					ethereum_signature : runtime_types :: polkadot_runtime_common :: claims :: EcdsaSignature,
				) -> ::subxt::tx::StaticTxPayload<Claim> {
					::subxt::tx::StaticTxPayload::new(
						"Claims",
						"claim",
						Claim { dest, ethereum_signature },
						[
							33u8, 63u8, 71u8, 104u8, 200u8, 179u8, 248u8, 38u8, 193u8, 198u8,
							250u8, 49u8, 106u8, 26u8, 109u8, 183u8, 33u8, 50u8, 217u8, 28u8, 50u8,
							107u8, 249u8, 80u8, 199u8, 10u8, 192u8, 1u8, 54u8, 41u8, 146u8, 11u8,
						],
					)
				}
				#[doc = "Mint a new claim to collect DOTs."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Root_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `who`: The Ethereum address allowed to collect this claim."]
				#[doc = "- `value`: The number of DOTs that will be claimed."]
				#[doc = "- `vesting_schedule`: An optional vesting schedule for these DOTs."]
				#[doc = ""]
				#[doc = "<weight>"]
				#[doc = "The weight of this call is invariant over the input parameters."]
				#[doc = "We assume worst case that both vesting and statement is being inserted."]
				#[doc = ""]
				#[doc = "Total Complexity: O(1)"]
				#[doc = "</weight>"]
				pub fn mint_claim(
					&self,
					who: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
					value: ::core::primitive::u128,
					vesting_schedule: ::core::option::Option<(
						::core::primitive::u128,
						::core::primitive::u128,
						::core::primitive::u32,
					)>,
					statement: ::core::option::Option<
						runtime_types::polkadot_runtime_common::claims::StatementKind,
					>,
				) -> ::subxt::tx::StaticTxPayload<MintClaim> {
					::subxt::tx::StaticTxPayload::new(
						"Claims",
						"mint_claim",
						MintClaim { who, value, vesting_schedule, statement },
						[
							213u8, 79u8, 204u8, 40u8, 104u8, 84u8, 82u8, 62u8, 193u8, 93u8, 246u8,
							21u8, 37u8, 244u8, 166u8, 132u8, 208u8, 18u8, 86u8, 195u8, 156u8, 9u8,
							220u8, 120u8, 40u8, 183u8, 28u8, 103u8, 84u8, 163u8, 153u8, 110u8,
						],
					)
				}
				#[doc = "Make a claim to collect your DOTs by signing a statement."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _None_."]
				#[doc = ""]
				#[doc = "Unsigned Validation:"]
				#[doc = "A call to `claim_attest` is deemed valid if the signature provided matches"]
				#[doc = "the expected signed message of:"]
				#[doc = ""]
				#[doc = "> Ethereum Signed Message:"]
				#[doc = "> (configured prefix string)(address)(statement)"]
				#[doc = ""]
				#[doc = "and `address` matches the `dest` account; the `statement` must match that which is"]
				#[doc = "expected according to your purchase arrangement."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `dest`: The destination account to payout the claim."]
				#[doc = "- `ethereum_signature`: The signature of an ethereum signed message"]
				#[doc = "   matching the format described above."]
				#[doc = "- `statement`: The identity of the statement which is being attested to in the signature."]
				#[doc = ""]
				#[doc = "<weight>"]
				#[doc = "The weight of this call is invariant over the input parameters."]
				#[doc = "Weight includes logic to validate unsigned `claim_attest` call."]
				#[doc = ""]
				#[doc = "Total Complexity: O(1)"]
				#[doc = "</weight>"]
				pub fn claim_attest(
					&self,
					dest: ::subxt::ext::sp_core::crypto::AccountId32,
					ethereum_signature : runtime_types :: polkadot_runtime_common :: claims :: EcdsaSignature,
					statement: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<ClaimAttest> {
					::subxt::tx::StaticTxPayload::new(
						"Claims",
						"claim_attest",
						ClaimAttest { dest, ethereum_signature, statement },
						[
							255u8, 10u8, 87u8, 106u8, 101u8, 195u8, 249u8, 25u8, 109u8, 82u8,
							213u8, 95u8, 203u8, 145u8, 224u8, 113u8, 92u8, 141u8, 31u8, 54u8,
							218u8, 47u8, 218u8, 239u8, 211u8, 206u8, 77u8, 176u8, 19u8, 176u8,
							175u8, 135u8,
						],
					)
				}
				#[doc = "Attest to a statement, needed to finalize the claims process."]
				#[doc = ""]
				#[doc = "WARNING: Insecure unless your chain includes `PrevalidateAttests` as a `SignedExtension`."]
				#[doc = ""]
				#[doc = "Unsigned Validation:"]
				#[doc = "A call to attest is deemed valid if the sender has a `Preclaim` registered"]
				#[doc = "and provides a `statement` which is expected for the account."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `statement`: The identity of the statement which is being attested to in the signature."]
				#[doc = ""]
				#[doc = "<weight>"]
				#[doc = "The weight of this call is invariant over the input parameters."]
				#[doc = "Weight includes logic to do pre-validation on `attest` call."]
				#[doc = ""]
				#[doc = "Total Complexity: O(1)"]
				#[doc = "</weight>"]
				pub fn attest(
					&self,
					statement: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<Attest> {
					::subxt::tx::StaticTxPayload::new(
						"Claims",
						"attest",
						Attest { statement },
						[
							8u8, 218u8, 97u8, 237u8, 185u8, 61u8, 55u8, 4u8, 134u8, 18u8, 244u8,
							226u8, 40u8, 97u8, 222u8, 246u8, 221u8, 74u8, 253u8, 22u8, 52u8, 223u8,
							224u8, 83u8, 21u8, 218u8, 248u8, 100u8, 107u8, 58u8, 247u8, 10u8,
						],
					)
				}
				pub fn move_claim(
					&self,
					old: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
					new: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
					maybe_preclaim: ::core::option::Option<
						::subxt::ext::sp_core::crypto::AccountId32,
					>,
				) -> ::subxt::tx::StaticTxPayload<MoveClaim> {
					::subxt::tx::StaticTxPayload::new(
						"Claims",
						"move_claim",
						MoveClaim { old, new, maybe_preclaim },
						[
							63u8, 48u8, 217u8, 16u8, 161u8, 102u8, 165u8, 241u8, 57u8, 185u8,
							230u8, 161u8, 202u8, 11u8, 223u8, 15u8, 57u8, 181u8, 34u8, 131u8,
							235u8, 168u8, 227u8, 152u8, 157u8, 4u8, 192u8, 243u8, 194u8, 120u8,
							130u8, 202u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::polkadot_runtime_common::claims::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Someone claimed some DOTs."]
			pub struct Claimed {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub ethereum_address:
					runtime_types::polkadot_runtime_common::claims::EthereumAddress,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Claimed {
				const PALLET: &'static str = "Claims";
				const EVENT: &'static str = "Claimed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				pub fn claims(
					&self,
					_0: impl ::std::borrow::Borrow<
						runtime_types::polkadot_runtime_common::claims::EthereumAddress,
					>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Claims",
						"Claims",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							36u8, 247u8, 169u8, 171u8, 103u8, 176u8, 70u8, 213u8, 255u8, 175u8,
							97u8, 142u8, 231u8, 70u8, 90u8, 213u8, 128u8, 67u8, 50u8, 37u8, 51u8,
							184u8, 72u8, 27u8, 193u8, 254u8, 12u8, 253u8, 91u8, 60u8, 88u8, 182u8,
						],
					)
				}
				pub fn claims_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Claims",
						"Claims",
						Vec::new(),
						[
							36u8, 247u8, 169u8, 171u8, 103u8, 176u8, 70u8, 213u8, 255u8, 175u8,
							97u8, 142u8, 231u8, 70u8, 90u8, 213u8, 128u8, 67u8, 50u8, 37u8, 51u8,
							184u8, 72u8, 27u8, 193u8, 254u8, 12u8, 253u8, 91u8, 60u8, 88u8, 182u8,
						],
					)
				}
				pub fn total(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Claims",
						"Total",
						vec![],
						[
							162u8, 59u8, 237u8, 63u8, 23u8, 44u8, 74u8, 169u8, 131u8, 166u8, 174u8,
							61u8, 127u8, 165u8, 32u8, 115u8, 73u8, 171u8, 36u8, 10u8, 6u8, 23u8,
							19u8, 202u8, 3u8, 189u8, 29u8, 169u8, 144u8, 187u8, 235u8, 77u8,
						],
					)
				}
				#[doc = " Vesting schedule for a claim."]
				#[doc = " First balance is the total amount that should be held for vesting."]
				#[doc = " Second balance is how much should be unlocked per block."]
				#[doc = " The block number is when the vesting should start."]
				pub fn vesting(
					&self,
					_0: impl ::std::borrow::Borrow<
						runtime_types::polkadot_runtime_common::claims::EthereumAddress,
					>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::core::primitive::u128,
						::core::primitive::u128,
						::core::primitive::u32,
					)>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Claims",
						"Vesting",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							112u8, 174u8, 151u8, 185u8, 225u8, 170u8, 63u8, 147u8, 100u8, 23u8,
							102u8, 148u8, 244u8, 47u8, 87u8, 99u8, 28u8, 59u8, 48u8, 205u8, 43u8,
							41u8, 87u8, 225u8, 191u8, 164u8, 31u8, 208u8, 80u8, 53u8, 25u8, 205u8,
						],
					)
				}
				#[doc = " Vesting schedule for a claim."]
				#[doc = " First balance is the total amount that should be held for vesting."]
				#[doc = " Second balance is how much should be unlocked per block."]
				#[doc = " The block number is when the vesting should start."]
				pub fn vesting_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::core::primitive::u128,
						::core::primitive::u128,
						::core::primitive::u32,
					)>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Claims",
						"Vesting",
						Vec::new(),
						[
							112u8, 174u8, 151u8, 185u8, 225u8, 170u8, 63u8, 147u8, 100u8, 23u8,
							102u8, 148u8, 244u8, 47u8, 87u8, 99u8, 28u8, 59u8, 48u8, 205u8, 43u8,
							41u8, 87u8, 225u8, 191u8, 164u8, 31u8, 208u8, 80u8, 53u8, 25u8, 205u8,
						],
					)
				}
				#[doc = " The statement kind that must be signed, if any."]
				pub fn signing(
					&self,
					_0: impl ::std::borrow::Borrow<
						runtime_types::polkadot_runtime_common::claims::EthereumAddress,
					>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_common::claims::StatementKind,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Claims",
						"Signing",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							51u8, 184u8, 211u8, 207u8, 13u8, 194u8, 181u8, 153u8, 25u8, 212u8,
							106u8, 189u8, 149u8, 14u8, 19u8, 61u8, 210u8, 109u8, 23u8, 168u8,
							191u8, 74u8, 112u8, 190u8, 242u8, 112u8, 183u8, 17u8, 30u8, 125u8,
							85u8, 107u8,
						],
					)
				}
				#[doc = " The statement kind that must be signed, if any."]
				pub fn signing_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_common::claims::StatementKind,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Claims",
						"Signing",
						Vec::new(),
						[
							51u8, 184u8, 211u8, 207u8, 13u8, 194u8, 181u8, 153u8, 25u8, 212u8,
							106u8, 189u8, 149u8, 14u8, 19u8, 61u8, 210u8, 109u8, 23u8, 168u8,
							191u8, 74u8, 112u8, 190u8, 242u8, 112u8, 183u8, 17u8, 30u8, 125u8,
							85u8, 107u8,
						],
					)
				}
				#[doc = " Pre-claimed Ethereum accounts, by the Account ID that they are claimed to."]
				pub fn preclaims(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_common::claims::EthereumAddress,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Claims",
						"Preclaims",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							149u8, 61u8, 170u8, 170u8, 60u8, 212u8, 29u8, 214u8, 141u8, 136u8,
							207u8, 248u8, 51u8, 135u8, 242u8, 105u8, 121u8, 91u8, 186u8, 30u8, 0u8,
							173u8, 154u8, 133u8, 20u8, 244u8, 58u8, 184u8, 133u8, 214u8, 67u8,
							95u8,
						],
					)
				}
				#[doc = " Pre-claimed Ethereum accounts, by the Account ID that they are claimed to."]
				pub fn preclaims_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_common::claims::EthereumAddress,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Claims",
						"Preclaims",
						Vec::new(),
						[
							149u8, 61u8, 170u8, 170u8, 60u8, 212u8, 29u8, 214u8, 141u8, 136u8,
							207u8, 248u8, 51u8, 135u8, 242u8, 105u8, 121u8, 91u8, 186u8, 30u8, 0u8,
							173u8, 154u8, 133u8, 20u8, 244u8, 58u8, 184u8, 133u8, 214u8, 67u8,
							95u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				pub fn prefix(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Claims",
						"Prefix",
						[
							106u8, 50u8, 57u8, 116u8, 43u8, 202u8, 37u8, 248u8, 102u8, 22u8, 62u8,
							22u8, 242u8, 54u8, 152u8, 168u8, 107u8, 64u8, 72u8, 172u8, 124u8, 40u8,
							42u8, 110u8, 104u8, 145u8, 31u8, 144u8, 242u8, 189u8, 145u8, 208u8,
						],
					)
				}
			}
		}
	}
	pub mod utility {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Batch {
				pub calls: ::std::vec::Vec<runtime_types::kusama_runtime::Call>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct AsDerivative {
				pub index: ::core::primitive::u16,
				pub call: ::std::boxed::Box<runtime_types::kusama_runtime::Call>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct BatchAll {
				pub calls: ::std::vec::Vec<runtime_types::kusama_runtime::Call>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct DispatchAs {
				pub as_origin: ::std::boxed::Box<runtime_types::kusama_runtime::OriginCaller>,
				pub call: ::std::boxed::Box<runtime_types::kusama_runtime::Call>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceBatch {
				pub calls: ::std::vec::Vec<runtime_types::kusama_runtime::Call>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Send a batch of dispatch calls."]
				#[doc = ""]
				#[doc = "May be called from any origin."]
				#[doc = ""]
				#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
				#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
				#[doc = ""]
				#[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
				#[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
				#[doc = "# </weight>"]
				#[doc = ""]
				#[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
				#[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
				#[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
				#[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
				#[doc = "event is deposited."]
				pub fn batch(
					&self,
					calls: ::std::vec::Vec<runtime_types::kusama_runtime::Call>,
				) -> ::subxt::tx::StaticTxPayload<Batch> {
					::subxt::tx::StaticTxPayload::new(
						"Utility",
						"batch",
						Batch { calls },
						[
							132u8, 179u8, 146u8, 205u8, 180u8, 137u8, 202u8, 171u8, 222u8, 203u8,
							117u8, 211u8, 46u8, 14u8, 44u8, 67u8, 118u8, 235u8, 24u8, 142u8, 154u8,
							249u8, 130u8, 225u8, 195u8, 85u8, 33u8, 124u8, 16u8, 168u8, 179u8,
							134u8,
						],
					)
				}
				#[doc = "Send a call through an indexed pseudonym of the sender."]
				#[doc = ""]
				#[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
				#[doc = "use the same filter as the origin of this call."]
				#[doc = ""]
				#[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
				#[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
				#[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
				#[doc = "in the Multisig pallet instead."]
				#[doc = ""]
				#[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				pub fn as_derivative(
					&self,
					index: ::core::primitive::u16,
					call: runtime_types::kusama_runtime::Call,
				) -> ::subxt::tx::StaticTxPayload<AsDerivative> {
					::subxt::tx::StaticTxPayload::new(
						"Utility",
						"as_derivative",
						AsDerivative { index, call: ::std::boxed::Box::new(call) },
						[
							141u8, 44u8, 72u8, 13u8, 113u8, 230u8, 8u8, 10u8, 75u8, 12u8, 14u8,
							238u8, 73u8, 223u8, 7u8, 72u8, 150u8, 197u8, 139u8, 211u8, 87u8, 61u8,
							230u8, 147u8, 229u8, 151u8, 154u8, 159u8, 12u8, 202u8, 30u8, 227u8,
						],
					)
				}
				#[doc = "Send a batch of dispatch calls and atomically execute them."]
				#[doc = "The whole transaction will rollback and fail if any of the calls failed."]
				#[doc = ""]
				#[doc = "May be called from any origin."]
				#[doc = ""]
				#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
				#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
				#[doc = ""]
				#[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
				#[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
				#[doc = "# </weight>"]
				pub fn batch_all(
					&self,
					calls: ::std::vec::Vec<runtime_types::kusama_runtime::Call>,
				) -> ::subxt::tx::StaticTxPayload<BatchAll> {
					::subxt::tx::StaticTxPayload::new(
						"Utility",
						"batch_all",
						BatchAll { calls },
						[
							199u8, 153u8, 224u8, 57u8, 159u8, 68u8, 138u8, 184u8, 54u8, 138u8,
							254u8, 63u8, 86u8, 226u8, 184u8, 59u8, 206u8, 251u8, 147u8, 191u8, 2u8,
							191u8, 195u8, 218u8, 250u8, 51u8, 214u8, 18u8, 7u8, 131u8, 119u8,
							116u8,
						],
					)
				}
				#[doc = "Dispatches a function call with a provided origin."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Root_."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- O(1)."]
				#[doc = "- Limited storage reads."]
				#[doc = "- One DB write (event)."]
				#[doc = "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as()."]
				#[doc = "# </weight>"]
				pub fn dispatch_as(
					&self,
					as_origin: runtime_types::kusama_runtime::OriginCaller,
					call: runtime_types::kusama_runtime::Call,
				) -> ::subxt::tx::StaticTxPayload<DispatchAs> {
					::subxt::tx::StaticTxPayload::new(
						"Utility",
						"dispatch_as",
						DispatchAs {
							as_origin: ::std::boxed::Box::new(as_origin),
							call: ::std::boxed::Box::new(call),
						},
						[
							86u8, 143u8, 157u8, 226u8, 214u8, 7u8, 141u8, 215u8, 30u8, 68u8, 183u8,
							66u8, 88u8, 117u8, 12u8, 233u8, 220u8, 63u8, 207u8, 147u8, 116u8, 70u8,
							50u8, 173u8, 185u8, 239u8, 125u8, 224u8, 124u8, 69u8, 8u8, 9u8,
						],
					)
				}
				#[doc = "Send a batch of dispatch calls."]
				#[doc = "Unlike `batch`, it allows errors and won't interrupt."]
				#[doc = ""]
				#[doc = "May be called from any origin."]
				#[doc = ""]
				#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
				#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
				#[doc = ""]
				#[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
				#[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
				#[doc = "# </weight>"]
				pub fn force_batch(
					&self,
					calls: ::std::vec::Vec<runtime_types::kusama_runtime::Call>,
				) -> ::subxt::tx::StaticTxPayload<ForceBatch> {
					::subxt::tx::StaticTxPayload::new(
						"Utility",
						"force_batch",
						ForceBatch { calls },
						[
							94u8, 134u8, 60u8, 40u8, 81u8, 129u8, 11u8, 251u8, 137u8, 48u8, 45u8,
							55u8, 94u8, 197u8, 70u8, 137u8, 190u8, 254u8, 59u8, 70u8, 56u8, 33u8,
							116u8, 80u8, 126u8, 182u8, 58u8, 219u8, 60u8, 131u8, 214u8, 66u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_utility::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
			#[doc = "well as the error."]
			pub struct BatchInterrupted {
				pub index: ::core::primitive::u32,
				pub error: runtime_types::sp_runtime::DispatchError,
			}
			impl ::subxt::events::StaticEvent for BatchInterrupted {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "BatchInterrupted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Batch of dispatches completed fully with no error."]
			pub struct BatchCompleted;
			impl ::subxt::events::StaticEvent for BatchCompleted {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "BatchCompleted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Batch of dispatches completed but has errors."]
			pub struct BatchCompletedWithErrors;
			impl ::subxt::events::StaticEvent for BatchCompletedWithErrors {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "BatchCompletedWithErrors";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A single item within a Batch of dispatches has completed with no error."]
			pub struct ItemCompleted;
			impl ::subxt::events::StaticEvent for ItemCompleted {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "ItemCompleted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A single item within a Batch of dispatches has completed with error."]
			pub struct ItemFailed {
				pub error: runtime_types::sp_runtime::DispatchError,
			}
			impl ::subxt::events::StaticEvent for ItemFailed {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "ItemFailed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A call was dispatched."]
			pub struct DispatchedAs {
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for DispatchedAs {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "DispatchedAs";
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The limit on the number of batched calls."]
				pub fn batched_calls_limit(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Utility",
						"batched_calls_limit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod identity {
		use super::{root_mod, runtime_types};
		#[doc = "Identity pallet declaration."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct AddRegistrar {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetIdentity {
				pub info: ::std::boxed::Box<runtime_types::pallet_identity::types::IdentityInfo>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetSubs {
				pub subs: ::std::vec::Vec<(
					::subxt::ext::sp_core::crypto::AccountId32,
					runtime_types::pallet_identity::types::Data,
				)>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ClearIdentity;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RequestJudgement {
				#[codec(compact)]
				pub reg_index: ::core::primitive::u32,
				#[codec(compact)]
				pub max_fee: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct CancelRequest {
				pub reg_index: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetFee {
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				#[codec(compact)]
				pub fee: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetAccountId {
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				pub new: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetFields {
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				pub fields: runtime_types::pallet_identity::types::BitFlags<
					runtime_types::pallet_identity::types::IdentityField,
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ProvideJudgement {
				#[codec(compact)]
				pub reg_index: ::core::primitive::u32,
				pub target: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
				pub judgement:
					runtime_types::pallet_identity::types::Judgement<::core::primitive::u128>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct KillIdentity {
				pub target: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct AddSub {
				pub sub: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
				pub data: runtime_types::pallet_identity::types::Data,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RenameSub {
				pub sub: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
				pub data: runtime_types::pallet_identity::types::Data,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RemoveSub {
				pub sub: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct QuitSub;
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Add a registrar to the system."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `T::RegistrarOrigin`."]
				#[doc = ""]
				#[doc = "- `account`: the account of the registrar."]
				#[doc = ""]
				#[doc = "Emits `RegistrarAdded` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded)."]
				#[doc = "- One storage mutation (codec `O(R)`)."]
				#[doc = "- One event."]
				#[doc = "# </weight>"]
				pub fn add_registrar(
					&self,
					account: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<AddRegistrar> {
					::subxt::tx::StaticTxPayload::new(
						"Identity",
						"add_registrar",
						AddRegistrar { account },
						[
							231u8, 221u8, 79u8, 233u8, 107u8, 34u8, 195u8, 186u8, 192u8, 129u8,
							103u8, 159u8, 159u8, 83u8, 151u8, 161u8, 137u8, 164u8, 143u8, 31u8,
							75u8, 42u8, 27u8, 203u8, 19u8, 70u8, 173u8, 11u8, 241u8, 189u8, 137u8,
							127u8,
						],
					)
				}
				#[doc = "Set an account's identity information and reserve the appropriate deposit."]
				#[doc = ""]
				#[doc = "If the account already has identity information, the deposit is taken as part payment"]
				#[doc = "for the new deposit."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `info`: The identity information."]
				#[doc = ""]
				#[doc = "Emits `IdentitySet` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(X + X' + R)`"]
				#[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)"]
				#[doc = "  - where `R` judgements-count (registrar-count-bounded)"]
				#[doc = "- One balance reserve operation."]
				#[doc = "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`)."]
				#[doc = "- One event."]
				#[doc = "# </weight>"]
				pub fn set_identity(
					&self,
					info: runtime_types::pallet_identity::types::IdentityInfo,
				) -> ::subxt::tx::StaticTxPayload<SetIdentity> {
					::subxt::tx::StaticTxPayload::new(
						"Identity",
						"set_identity",
						SetIdentity { info: ::std::boxed::Box::new(info) },
						[
							130u8, 89u8, 118u8, 6u8, 134u8, 166u8, 35u8, 192u8, 73u8, 6u8, 171u8,
							20u8, 225u8, 255u8, 152u8, 142u8, 111u8, 8u8, 206u8, 200u8, 64u8, 52u8,
							110u8, 123u8, 42u8, 101u8, 191u8, 242u8, 133u8, 139u8, 154u8, 205u8,
						],
					)
				}
				#[doc = "Set the sub-accounts of the sender."]
				#[doc = ""]
				#[doc = "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned"]
				#[doc = "and an amount `SubAccountDeposit` will be reserved for each item in `subs`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
				#[doc = "identity."]
				#[doc = ""]
				#[doc = "- `subs`: The identity's (new) sub-accounts."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(P + S)`"]
				#[doc = "  - where `P` old-subs-count (hard- and deposit-bounded)."]
				#[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
				#[doc = "- At most one balance operations."]
				#[doc = "- DB:"]
				#[doc = "  - `P + S` storage mutations (codec complexity `O(1)`)"]
				#[doc = "  - One storage read (codec complexity `O(P)`)."]
				#[doc = "  - One storage write (codec complexity `O(S)`)."]
				#[doc = "  - One storage-exists (`IdentityOf::contains_key`)."]
				#[doc = "# </weight>"]
				pub fn set_subs(
					&self,
					subs: ::std::vec::Vec<(
						::subxt::ext::sp_core::crypto::AccountId32,
						runtime_types::pallet_identity::types::Data,
					)>,
				) -> ::subxt::tx::StaticTxPayload<SetSubs> {
					::subxt::tx::StaticTxPayload::new(
						"Identity",
						"set_subs",
						SetSubs { subs },
						[
							177u8, 219u8, 84u8, 183u8, 5u8, 32u8, 192u8, 82u8, 174u8, 68u8, 198u8,
							224u8, 56u8, 85u8, 134u8, 171u8, 30u8, 132u8, 140u8, 236u8, 117u8,
							24u8, 150u8, 218u8, 146u8, 194u8, 144u8, 92u8, 103u8, 206u8, 46u8,
							90u8,
						],
					)
				}
				#[doc = "Clear an account's identity info and all sub-accounts and return all deposits."]
				#[doc = ""]
				#[doc = "Payment: All reserved balances on the account are returned."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
				#[doc = "identity."]
				#[doc = ""]
				#[doc = "Emits `IdentityCleared` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(R + S + X)`"]
				#[doc = "  - where `R` registrar-count (governance-bounded)."]
				#[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
				#[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)."]
				#[doc = "- One balance-unreserve operation."]
				#[doc = "- `2` storage reads and `S + 2` storage deletions."]
				#[doc = "- One event."]
				#[doc = "# </weight>"]
				pub fn clear_identity(&self) -> ::subxt::tx::StaticTxPayload<ClearIdentity> {
					::subxt::tx::StaticTxPayload::new(
						"Identity",
						"clear_identity",
						ClearIdentity {},
						[
							75u8, 44u8, 74u8, 122u8, 149u8, 202u8, 114u8, 230u8, 0u8, 255u8, 140u8,
							122u8, 14u8, 196u8, 205u8, 249u8, 220u8, 94u8, 216u8, 34u8, 63u8, 14u8,
							8u8, 205u8, 74u8, 23u8, 181u8, 129u8, 252u8, 110u8, 231u8, 114u8,
						],
					)
				}
				#[doc = "Request a judgement from a registrar."]
				#[doc = ""]
				#[doc = "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement"]
				#[doc = "given."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
				#[doc = "registered identity."]
				#[doc = ""]
				#[doc = "- `reg_index`: The index of the registrar whose judgement is requested."]
				#[doc = "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:"]
				#[doc = ""]
				#[doc = "```nocompile"]
				#[doc = "Self::registrars().get(reg_index).unwrap().fee"]
				#[doc = "```"]
				#[doc = ""]
				#[doc = "Emits `JudgementRequested` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(R + X)`."]
				#[doc = "- One balance-reserve operation."]
				#[doc = "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`."]
				#[doc = "- One event."]
				#[doc = "# </weight>"]
				pub fn request_judgement(
					&self,
					reg_index: ::core::primitive::u32,
					max_fee: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<RequestJudgement> {
					::subxt::tx::StaticTxPayload::new(
						"Identity",
						"request_judgement",
						RequestJudgement { reg_index, max_fee },
						[
							186u8, 149u8, 61u8, 54u8, 159u8, 194u8, 77u8, 161u8, 220u8, 157u8, 3u8,
							216u8, 23u8, 105u8, 119u8, 76u8, 144u8, 198u8, 157u8, 45u8, 235u8,
							139u8, 87u8, 82u8, 81u8, 12u8, 25u8, 134u8, 225u8, 92u8, 182u8, 101u8,
						],
					)
				}
				#[doc = "Cancel a previous request."]
				#[doc = ""]
				#[doc = "Payment: A previously reserved deposit is returned on success."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
				#[doc = "registered identity."]
				#[doc = ""]
				#[doc = "- `reg_index`: The index of the registrar whose judgement is no longer requested."]
				#[doc = ""]
				#[doc = "Emits `JudgementUnrequested` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(R + X)`."]
				#[doc = "- One balance-reserve operation."]
				#[doc = "- One storage mutation `O(R + X)`."]
				#[doc = "- One event"]
				#[doc = "# </weight>"]
				pub fn cancel_request(
					&self,
					reg_index: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<CancelRequest> {
					::subxt::tx::StaticTxPayload::new(
						"Identity",
						"cancel_request",
						CancelRequest { reg_index },
						[
							83u8, 180u8, 239u8, 126u8, 32u8, 51u8, 17u8, 20u8, 180u8, 3u8, 59u8,
							96u8, 24u8, 32u8, 136u8, 92u8, 58u8, 254u8, 68u8, 70u8, 50u8, 11u8,
							51u8, 91u8, 180u8, 79u8, 81u8, 84u8, 216u8, 138u8, 6u8, 215u8,
						],
					)
				}
				#[doc = "Set the fee required for a judgement to be requested from a registrar."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
				#[doc = "of the registrar whose index is `index`."]
				#[doc = ""]
				#[doc = "- `index`: the index of the registrar whose fee is to be set."]
				#[doc = "- `fee`: the new fee."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(R)`."]
				#[doc = "- One storage mutation `O(R)`."]
				#[doc = "- Benchmark: 7.315 + R * 0.329 µs (min squares analysis)"]
				#[doc = "# </weight>"]
				pub fn set_fee(
					&self,
					index: ::core::primitive::u32,
					fee: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<SetFee> {
					::subxt::tx::StaticTxPayload::new(
						"Identity",
						"set_fee",
						SetFee { index, fee },
						[
							21u8, 157u8, 123u8, 182u8, 160u8, 190u8, 117u8, 37u8, 136u8, 133u8,
							104u8, 234u8, 31u8, 145u8, 115u8, 154u8, 125u8, 40u8, 2u8, 87u8, 118u8,
							56u8, 247u8, 73u8, 89u8, 0u8, 251u8, 3u8, 58u8, 105u8, 239u8, 211u8,
						],
					)
				}
				#[doc = "Change the account associated with a registrar."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
				#[doc = "of the registrar whose index is `index`."]
				#[doc = ""]
				#[doc = "- `index`: the index of the registrar whose fee is to be set."]
				#[doc = "- `new`: the new account ID."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(R)`."]
				#[doc = "- One storage mutation `O(R)`."]
				#[doc = "- Benchmark: 8.823 + R * 0.32 µs (min squares analysis)"]
				#[doc = "# </weight>"]
				pub fn set_account_id(
					&self,
					index: ::core::primitive::u32,
					new: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<SetAccountId> {
					::subxt::tx::StaticTxPayload::new(
						"Identity",
						"set_account_id",
						SetAccountId { index, new },
						[
							245u8, 76u8, 110u8, 237u8, 219u8, 246u8, 219u8, 136u8, 146u8, 42u8,
							139u8, 60u8, 30u8, 188u8, 87u8, 10u8, 231u8, 89u8, 225u8, 24u8, 152u8,
							188u8, 59u8, 194u8, 199u8, 78u8, 169u8, 90u8, 122u8, 29u8, 80u8, 42u8,
						],
					)
				}
				#[doc = "Set the field information for a registrar."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
				#[doc = "of the registrar whose index is `index`."]
				#[doc = ""]
				#[doc = "- `index`: the index of the registrar whose fee is to be set."]
				#[doc = "- `fields`: the fields that the registrar concerns themselves with."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(R)`."]
				#[doc = "- One storage mutation `O(R)`."]
				#[doc = "- Benchmark: 7.464 + R * 0.325 µs (min squares analysis)"]
				#[doc = "# </weight>"]
				pub fn set_fields(
					&self,
					index: ::core::primitive::u32,
					fields: runtime_types::pallet_identity::types::BitFlags<
						runtime_types::pallet_identity::types::IdentityField,
					>,
				) -> ::subxt::tx::StaticTxPayload<SetFields> {
					::subxt::tx::StaticTxPayload::new(
						"Identity",
						"set_fields",
						SetFields { index, fields },
						[
							50u8, 196u8, 179u8, 71u8, 66u8, 65u8, 235u8, 7u8, 51u8, 14u8, 81u8,
							173u8, 201u8, 58u8, 6u8, 151u8, 174u8, 245u8, 102u8, 184u8, 28u8, 84u8,
							125u8, 93u8, 126u8, 134u8, 92u8, 203u8, 200u8, 129u8, 240u8, 252u8,
						],
					)
				}
				#[doc = "Provide a judgement for an account's identity."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
				#[doc = "of the registrar whose index is `reg_index`."]
				#[doc = ""]
				#[doc = "- `reg_index`: the index of the registrar whose judgement is being made."]
				#[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
				#[doc = "  with a registered identity."]
				#[doc = "- `judgement`: the judgement of the registrar of index `reg_index` about `target`."]
				#[doc = ""]
				#[doc = "Emits `JudgementGiven` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(R + X)`."]
				#[doc = "- One balance-transfer operation."]
				#[doc = "- Up to one account-lookup operation."]
				#[doc = "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`."]
				#[doc = "- One event."]
				#[doc = "# </weight>"]
				pub fn provide_judgement(
					&self,
					reg_index: ::core::primitive::u32,
					target: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
					judgement: runtime_types::pallet_identity::types::Judgement<
						::core::primitive::u128,
					>,
				) -> ::subxt::tx::StaticTxPayload<ProvideJudgement> {
					::subxt::tx::StaticTxPayload::new(
						"Identity",
						"provide_judgement",
						ProvideJudgement { reg_index, target, judgement },
						[
							221u8, 244u8, 12u8, 17u8, 197u8, 130u8, 189u8, 136u8, 253u8, 143u8,
							5u8, 145u8, 177u8, 105u8, 220u8, 8u8, 157u8, 63u8, 131u8, 5u8, 152u8,
							167u8, 158u8, 47u8, 123u8, 86u8, 225u8, 88u8, 218u8, 20u8, 82u8, 230u8,
						],
					)
				}
				#[doc = "Remove an account's identity and sub-account information and slash the deposits."]
				#[doc = ""]
				#[doc = "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by"]
				#[doc = "`Slash`. Verification request deposits are not returned; they should be cancelled"]
				#[doc = "manually using `cancel_request`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must match `T::ForceOrigin`."]
				#[doc = ""]
				#[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
				#[doc = "  with a registered identity."]
				#[doc = ""]
				#[doc = "Emits `IdentityKilled` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(R + S + X)`."]
				#[doc = "- One balance-reserve operation."]
				#[doc = "- `S + 2` storage mutations."]
				#[doc = "- One event."]
				#[doc = "# </weight>"]
				pub fn kill_identity(
					&self,
					target: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
				) -> ::subxt::tx::StaticTxPayload<KillIdentity> {
					::subxt::tx::StaticTxPayload::new(
						"Identity",
						"kill_identity",
						KillIdentity { target },
						[
							76u8, 13u8, 158u8, 219u8, 221u8, 0u8, 151u8, 241u8, 137u8, 136u8,
							179u8, 194u8, 188u8, 230u8, 56u8, 16u8, 254u8, 28u8, 127u8, 216u8,
							205u8, 117u8, 224u8, 121u8, 240u8, 231u8, 126u8, 181u8, 230u8, 68u8,
							13u8, 174u8,
						],
					)
				}
				#[doc = "Add the given account to the sender's subs."]
				#[doc = ""]
				#[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
				#[doc = "to the sender."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
				#[doc = "sub identity of `sub`."]
				pub fn add_sub(
					&self,
					sub: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
					data: runtime_types::pallet_identity::types::Data,
				) -> ::subxt::tx::StaticTxPayload<AddSub> {
					::subxt::tx::StaticTxPayload::new(
						"Identity",
						"add_sub",
						AddSub { sub, data },
						[
							122u8, 218u8, 25u8, 93u8, 33u8, 176u8, 191u8, 254u8, 223u8, 147u8,
							100u8, 135u8, 86u8, 71u8, 47u8, 163u8, 105u8, 222u8, 162u8, 173u8,
							207u8, 182u8, 130u8, 128u8, 214u8, 242u8, 101u8, 250u8, 242u8, 24u8,
							17u8, 84u8,
						],
					)
				}
				#[doc = "Alter the associated name of the given sub-account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
				#[doc = "sub identity of `sub`."]
				pub fn rename_sub(
					&self,
					sub: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
					data: runtime_types::pallet_identity::types::Data,
				) -> ::subxt::tx::StaticTxPayload<RenameSub> {
					::subxt::tx::StaticTxPayload::new(
						"Identity",
						"rename_sub",
						RenameSub { sub, data },
						[
							166u8, 167u8, 49u8, 114u8, 199u8, 168u8, 187u8, 221u8, 100u8, 85u8,
							147u8, 211u8, 157u8, 31u8, 109u8, 135u8, 194u8, 135u8, 15u8, 89u8,
							59u8, 57u8, 252u8, 163u8, 9u8, 138u8, 216u8, 189u8, 177u8, 42u8, 96u8,
							34u8,
						],
					)
				}
				#[doc = "Remove the given account from the sender's subs."]
				#[doc = ""]
				#[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
				#[doc = "to the sender."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
				#[doc = "sub identity of `sub`."]
				pub fn remove_sub(
					&self,
					sub: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
				) -> ::subxt::tx::StaticTxPayload<RemoveSub> {
					::subxt::tx::StaticTxPayload::new(
						"Identity",
						"remove_sub",
						RemoveSub { sub },
						[
							106u8, 223u8, 210u8, 67u8, 54u8, 11u8, 144u8, 222u8, 42u8, 46u8, 157u8,
							33u8, 13u8, 245u8, 166u8, 195u8, 227u8, 81u8, 224u8, 149u8, 154u8,
							158u8, 187u8, 203u8, 215u8, 91u8, 43u8, 105u8, 69u8, 213u8, 141u8,
							124u8,
						],
					)
				}
				#[doc = "Remove the sender as a sub-account."]
				#[doc = ""]
				#[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
				#[doc = "to the sender (*not* the original depositor)."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
				#[doc = "super-identity."]
				#[doc = ""]
				#[doc = "NOTE: This should not normally be used, but is provided in the case that the non-"]
				#[doc = "controller of an account is maliciously registered as a sub-account."]
				pub fn quit_sub(&self) -> ::subxt::tx::StaticTxPayload<QuitSub> {
					::subxt::tx::StaticTxPayload::new(
						"Identity",
						"quit_sub",
						QuitSub {},
						[
							62u8, 57u8, 73u8, 72u8, 119u8, 216u8, 250u8, 155u8, 57u8, 169u8, 157u8,
							44u8, 87u8, 51u8, 63u8, 231u8, 77u8, 7u8, 0u8, 119u8, 244u8, 42u8,
							179u8, 51u8, 254u8, 240u8, 55u8, 25u8, 142u8, 38u8, 87u8, 44u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_identity::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A name was set or reset (which will remove all judgements)."]
			pub struct IdentitySet {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for IdentitySet {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "IdentitySet";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A name was cleared, and the given balance returned."]
			pub struct IdentityCleared {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for IdentityCleared {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "IdentityCleared";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A name was removed and the given balance slashed."]
			pub struct IdentityKilled {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for IdentityKilled {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "IdentityKilled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A judgement was asked from a registrar."]
			pub struct JudgementRequested {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub registrar_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for JudgementRequested {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "JudgementRequested";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A judgement request was retracted."]
			pub struct JudgementUnrequested {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub registrar_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for JudgementUnrequested {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "JudgementUnrequested";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A judgement was given by a registrar."]
			pub struct JudgementGiven {
				pub target: ::subxt::ext::sp_core::crypto::AccountId32,
				pub registrar_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for JudgementGiven {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "JudgementGiven";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "A registrar was added."]
			pub struct RegistrarAdded {
				pub registrar_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for RegistrarAdded {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "RegistrarAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A sub-identity was added to an identity and the deposit paid."]
			pub struct SubIdentityAdded {
				pub sub: ::subxt::ext::sp_core::crypto::AccountId32,
				pub main: ::subxt::ext::sp_core::crypto::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for SubIdentityAdded {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "SubIdentityAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A sub-identity was removed from an identity and the deposit freed."]
			pub struct SubIdentityRemoved {
				pub sub: ::subxt::ext::sp_core::crypto::AccountId32,
				pub main: ::subxt::ext::sp_core::crypto::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for SubIdentityRemoved {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "SubIdentityRemoved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A sub-identity was cleared, and the given deposit repatriated from the"]
			#[doc = "main identity account to the sub-identity account."]
			pub struct SubIdentityRevoked {
				pub sub: ::subxt::ext::sp_core::crypto::AccountId32,
				pub main: ::subxt::ext::sp_core::crypto::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for SubIdentityRevoked {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "SubIdentityRevoked";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Information that is pertinent to identify the entity behind an account."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
				pub fn identity_of(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_identity::types::Registration<
							::core::primitive::u128,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Identity",
						"IdentityOf",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							193u8, 195u8, 180u8, 188u8, 129u8, 250u8, 180u8, 219u8, 22u8, 95u8,
							175u8, 170u8, 143u8, 188u8, 80u8, 124u8, 234u8, 228u8, 245u8, 39u8,
							72u8, 153u8, 107u8, 199u8, 23u8, 75u8, 47u8, 247u8, 104u8, 208u8,
							171u8, 82u8,
						],
					)
				}
				#[doc = " Information that is pertinent to identify the entity behind an account."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
				pub fn identity_of_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_identity::types::Registration<
							::core::primitive::u128,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Identity",
						"IdentityOf",
						Vec::new(),
						[
							193u8, 195u8, 180u8, 188u8, 129u8, 250u8, 180u8, 219u8, 22u8, 95u8,
							175u8, 170u8, 143u8, 188u8, 80u8, 124u8, 234u8, 228u8, 245u8, 39u8,
							72u8, 153u8, 107u8, 199u8, 23u8, 75u8, 47u8, 247u8, 104u8, 208u8,
							171u8, 82u8,
						],
					)
				}
				#[doc = " The super-identity of an alternative \"sub\" identity together with its name, within that"]
				#[doc = " context. If the account is not some other account's sub-identity, then just `None`."]
				pub fn super_of(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::subxt::ext::sp_core::crypto::AccountId32,
						runtime_types::pallet_identity::types::Data,
					)>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Identity",
						"SuperOf",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Blake2_128Concat,
						)],
						[
							170u8, 249u8, 112u8, 249u8, 75u8, 176u8, 21u8, 29u8, 152u8, 149u8,
							69u8, 113u8, 20u8, 92u8, 113u8, 130u8, 135u8, 62u8, 18u8, 204u8, 166u8,
							193u8, 133u8, 167u8, 248u8, 117u8, 80u8, 137u8, 158u8, 111u8, 100u8,
							137u8,
						],
					)
				}
				#[doc = " The super-identity of an alternative \"sub\" identity together with its name, within that"]
				#[doc = " context. If the account is not some other account's sub-identity, then just `None`."]
				pub fn super_of_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::subxt::ext::sp_core::crypto::AccountId32,
						runtime_types::pallet_identity::types::Data,
					)>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Identity",
						"SuperOf",
						Vec::new(),
						[
							170u8, 249u8, 112u8, 249u8, 75u8, 176u8, 21u8, 29u8, 152u8, 149u8,
							69u8, 113u8, 20u8, 92u8, 113u8, 130u8, 135u8, 62u8, 18u8, 204u8, 166u8,
							193u8, 133u8, 167u8, 248u8, 117u8, 80u8, 137u8, 158u8, 111u8, 100u8,
							137u8,
						],
					)
				}
				#[doc = " Alternative \"sub\" identities of this account."]
				#[doc = ""]
				#[doc = " The first item is the deposit, the second is a vector of the accounts."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
				pub fn subs_of(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::core::primitive::u128,
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							::subxt::ext::sp_core::crypto::AccountId32,
						>,
					)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Identity",
						"SubsOf",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							128u8, 15u8, 175u8, 155u8, 216u8, 225u8, 200u8, 169u8, 215u8, 206u8,
							110u8, 22u8, 204u8, 89u8, 212u8, 210u8, 159u8, 169u8, 53u8, 7u8, 44u8,
							164u8, 91u8, 151u8, 7u8, 227u8, 38u8, 230u8, 175u8, 84u8, 6u8, 4u8,
						],
					)
				}
				#[doc = " Alternative \"sub\" identities of this account."]
				#[doc = ""]
				#[doc = " The first item is the deposit, the second is a vector of the accounts."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
				pub fn subs_of_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::core::primitive::u128,
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							::subxt::ext::sp_core::crypto::AccountId32,
						>,
					)>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Identity",
						"SubsOf",
						Vec::new(),
						[
							128u8, 15u8, 175u8, 155u8, 216u8, 225u8, 200u8, 169u8, 215u8, 206u8,
							110u8, 22u8, 204u8, 89u8, 212u8, 210u8, 159u8, 169u8, 53u8, 7u8, 44u8,
							164u8, 91u8, 151u8, 7u8, 227u8, 38u8, 230u8, 175u8, 84u8, 6u8, 4u8,
						],
					)
				}
				#[doc = " The set of registrars. Not expected to get very big as can only be added through a"]
				#[doc = " special origin (likely a council motion)."]
				#[doc = ""]
				#[doc = " The index into this can be cast to `RegistrarIndex` to get a valid value."]
				pub fn registrars(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							::core::option::Option<
								runtime_types::pallet_identity::types::RegistrarInfo<
									::core::primitive::u128,
									::subxt::ext::sp_core::crypto::AccountId32,
								>,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Identity",
						"Registrars",
						vec![],
						[
							157u8, 87u8, 39u8, 240u8, 154u8, 54u8, 241u8, 229u8, 76u8, 9u8, 62u8,
							252u8, 40u8, 143u8, 186u8, 182u8, 233u8, 187u8, 251u8, 61u8, 236u8,
							229u8, 19u8, 55u8, 42u8, 36u8, 82u8, 173u8, 215u8, 155u8, 229u8, 111u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The amount held on deposit for a registered identity"]
				pub fn basic_deposit(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Identity",
						"BasicDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount held on deposit per additional field for a registered identity."]
				pub fn field_deposit(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Identity",
						"FieldDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount held on deposit for a registered subaccount. This should account for the fact"]
				#[doc = " that one storage item's value will increase by the size of an account ID, and there will"]
				#[doc = " be another trie item whose value is the size of an account ID plus 32 bytes."]
				pub fn sub_account_deposit(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Identity",
						"SubAccountDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The maximum number of sub-accounts allowed per identified account."]
				pub fn max_sub_accounts(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Identity",
						"MaxSubAccounts",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O"]
				#[doc = " required to access an identity, but can be pretty high."]
				pub fn max_additional_fields(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Identity",
						"MaxAdditionalFields",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Maxmimum number of registrars allowed in the system. Needed to bound the complexity"]
				#[doc = " of, e.g., updating judgements."]
				pub fn max_registrars(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Identity",
						"MaxRegistrars",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod society {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct Bid {
				pub value: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct Unbid {
				pub pos: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Vouch {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub value: ::core::primitive::u128,
				pub tip: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct Unvouch {
				pub pos: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Vote {
				pub candidate: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
				pub approve: ::core::primitive::bool,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct DefenderVote {
				pub approve: ::core::primitive::bool,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Payout;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Found {
				pub founder: ::subxt::ext::sp_core::crypto::AccountId32,
				pub max_members: ::core::primitive::u32,
				pub rules: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Unfound;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct JudgeSuspendedMember {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub forgive: ::core::primitive::bool,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct JudgeSuspendedCandidate {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub judgement: runtime_types::pallet_society::Judgement,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetMaxMembers {
				pub max: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "A user outside of the society can make a bid for entry."]
				#[doc = ""]
				#[doc = "Payment: `CandidateDeposit` will be reserved for making a bid. It is returned"]
				#[doc = "when the bid becomes a member, or if the bid calls `unbid`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `value`: A one time payment the bid would like to receive when joining the society."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Key: B (len of bids), C (len of candidates), M (len of members), X (balance reserve)"]
				#[doc = "- Storage Reads:"]
				#[doc = "\t- One storage read to check for suspended candidate. O(1)"]
				#[doc = "\t- One storage read to check for suspended member. O(1)"]
				#[doc = "\t- One storage read to retrieve all current bids. O(B)"]
				#[doc = "\t- One storage read to retrieve all current candidates. O(C)"]
				#[doc = "\t- One storage read to retrieve all members. O(M)"]
				#[doc = "- Storage Writes:"]
				#[doc = "\t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization"]
				#[doc = "   w/ read)"]
				#[doc = "\t- Up to one storage removal if bid.len() > MAX_BID_COUNT. O(1)"]
				#[doc = "- Notable Computation:"]
				#[doc = "\t- O(B + C + log M) search to check user is not already a part of society."]
				#[doc = "\t- O(log B) search to insert the new bid sorted."]
				#[doc = "- External Pallet Operations:"]
				#[doc = "\t- One balance reserve operation. O(X)"]
				#[doc = "\t- Up to one balance unreserve operation if bids.len() > MAX_BID_COUNT."]
				#[doc = "- Events:"]
				#[doc = "\t- One event for new bid."]
				#[doc = "\t- Up to one event for AutoUnbid if bid.len() > MAX_BID_COUNT."]
				#[doc = ""]
				#[doc = "Total Complexity: O(M + B + C + logM + logB + X)"]
				#[doc = "# </weight>"]
				pub fn bid(
					&self,
					value: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<Bid> {
					::subxt::tx::StaticTxPayload::new(
						"Society",
						"bid",
						Bid { value },
						[
							101u8, 242u8, 48u8, 240u8, 74u8, 51u8, 49u8, 61u8, 6u8, 7u8, 47u8,
							200u8, 185u8, 217u8, 176u8, 139u8, 44u8, 167u8, 131u8, 23u8, 219u8,
							69u8, 216u8, 213u8, 177u8, 50u8, 8u8, 213u8, 130u8, 90u8, 81u8, 4u8,
						],
					)
				}
				#[doc = "A bidder can remove their bid for entry into society."]
				#[doc = "By doing so, they will have their candidate deposit returned or"]
				#[doc = "they will unvouch their voucher."]
				#[doc = ""]
				#[doc = "Payment: The bid deposit is unreserved if the user made a bid."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and a bidder."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `pos`: Position in the `Bids` vector of the bid who wants to unbid."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Key: B (len of bids), X (balance unreserve)"]
				#[doc = "- One storage read and write to retrieve and update the bids. O(B)"]
				#[doc = "- Either one unreserve balance action O(X) or one vouching storage removal. O(1)"]
				#[doc = "- One event."]
				#[doc = ""]
				#[doc = "Total Complexity: O(B + X)"]
				#[doc = "# </weight>"]
				pub fn unbid(
					&self,
					pos: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<Unbid> {
					::subxt::tx::StaticTxPayload::new(
						"Society",
						"unbid",
						Unbid { pos },
						[
							255u8, 165u8, 200u8, 241u8, 93u8, 213u8, 155u8, 12u8, 178u8, 108u8,
							222u8, 14u8, 26u8, 226u8, 107u8, 129u8, 162u8, 151u8, 81u8, 83u8, 39u8,
							106u8, 151u8, 149u8, 19u8, 85u8, 28u8, 222u8, 227u8, 9u8, 189u8, 39u8,
						],
					)
				}
				#[doc = "As a member, vouch for someone to join society by placing a bid on their behalf."]
				#[doc = ""]
				#[doc = "There is no deposit required to vouch for a new bid, but a member can only vouch for"]
				#[doc = "one bid at a time. If the bid becomes a suspended candidate and ultimately rejected by"]
				#[doc = "the suspension judgement origin, the member will be banned from vouching again."]
				#[doc = ""]
				#[doc = "As a vouching member, you can claim a tip if the candidate is accepted. This tip will"]
				#[doc = "be paid as a portion of the reward the member will receive for joining the society."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and a member."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `who`: The user who you would like to vouch for."]
				#[doc = "- `value`: The total reward to be paid between you and the candidate if they become"]
				#[doc = "a member in the society."]
				#[doc = "- `tip`: Your cut of the total `value` payout when the candidate is inducted into"]
				#[doc = "the society. Tips larger than `value` will be saturated upon payout."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Key: B (len of bids), C (len of candidates), M (len of members)"]
				#[doc = "- Storage Reads:"]
				#[doc = "\t- One storage read to retrieve all members. O(M)"]
				#[doc = "\t- One storage read to check member is not already vouching. O(1)"]
				#[doc = "\t- One storage read to check for suspended candidate. O(1)"]
				#[doc = "\t- One storage read to check for suspended member. O(1)"]
				#[doc = "\t- One storage read to retrieve all current bids. O(B)"]
				#[doc = "\t- One storage read to retrieve all current candidates. O(C)"]
				#[doc = "- Storage Writes:"]
				#[doc = "\t- One storage write to insert vouching status to the member. O(1)"]
				#[doc = "\t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization"]
				#[doc = "   w/ read)"]
				#[doc = "\t- Up to one storage removal if bid.len() > MAX_BID_COUNT. O(1)"]
				#[doc = "- Notable Computation:"]
				#[doc = "\t- O(log M) search to check sender is a member."]
				#[doc = "\t- O(B + C + log M) search to check user is not already a part of society."]
				#[doc = "\t- O(log B) search to insert the new bid sorted."]
				#[doc = "- External Pallet Operations:"]
				#[doc = "\t- One balance reserve operation. O(X)"]
				#[doc = "\t- Up to one balance unreserve operation if bids.len() > MAX_BID_COUNT."]
				#[doc = "- Events:"]
				#[doc = "\t- One event for vouch."]
				#[doc = "\t- Up to one event for AutoUnbid if bid.len() > MAX_BID_COUNT."]
				#[doc = ""]
				#[doc = "Total Complexity: O(M + B + C + logM + logB + X)"]
				#[doc = "# </weight>"]
				pub fn vouch(
					&self,
					who: ::subxt::ext::sp_core::crypto::AccountId32,
					value: ::core::primitive::u128,
					tip: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<Vouch> {
					::subxt::tx::StaticTxPayload::new(
						"Society",
						"vouch",
						Vouch { who, value, tip },
						[
							227u8, 47u8, 65u8, 63u8, 41u8, 103u8, 102u8, 181u8, 148u8, 25u8, 101u8,
							1u8, 150u8, 94u8, 26u8, 244u8, 103u8, 101u8, 67u8, 237u8, 142u8, 146u8,
							47u8, 170u8, 82u8, 253u8, 82u8, 106u8, 56u8, 98u8, 169u8, 51u8,
						],
					)
				}
				#[doc = "As a vouching member, unvouch a bid. This only works while vouched user is"]
				#[doc = "only a bidder (and not a candidate)."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and a vouching member."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `pos`: Position in the `Bids` vector of the bid who should be unvouched."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Key: B (len of bids)"]
				#[doc = "- One storage read O(1) to check the signer is a vouching member."]
				#[doc = "- One storage mutate to retrieve and update the bids. O(B)"]
				#[doc = "- One vouching storage removal. O(1)"]
				#[doc = "- One event."]
				#[doc = ""]
				#[doc = "Total Complexity: O(B)"]
				#[doc = "# </weight>"]
				pub fn unvouch(
					&self,
					pos: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<Unvouch> {
					::subxt::tx::StaticTxPayload::new(
						"Society",
						"unvouch",
						Unvouch { pos },
						[
							242u8, 181u8, 109u8, 170u8, 197u8, 53u8, 8u8, 241u8, 47u8, 28u8, 1u8,
							209u8, 142u8, 106u8, 136u8, 163u8, 42u8, 169u8, 7u8, 1u8, 202u8, 38u8,
							199u8, 232u8, 13u8, 111u8, 92u8, 69u8, 237u8, 90u8, 134u8, 84u8,
						],
					)
				}
				#[doc = "As a member, vote on a candidate."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and a member."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `candidate`: The candidate that the member would like to bid on."]
				#[doc = "- `approve`: A boolean which says if the candidate should be approved (`true`) or"]
				#[doc = "  rejected (`false`)."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Key: C (len of candidates), M (len of members)"]
				#[doc = "- One storage read O(M) and O(log M) search to check user is a member."]
				#[doc = "- One account lookup."]
				#[doc = "- One storage read O(C) and O(C) search to check that user is a candidate."]
				#[doc = "- One storage write to add vote to votes. O(1)"]
				#[doc = "- One event."]
				#[doc = ""]
				#[doc = "Total Complexity: O(M + logM + C)"]
				#[doc = "# </weight>"]
				pub fn vote(
					&self,
					candidate: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
					approve: ::core::primitive::bool,
				) -> ::subxt::tx::StaticTxPayload<Vote> {
					::subxt::tx::StaticTxPayload::new(
						"Society",
						"vote",
						Vote { candidate, approve },
						[
							21u8, 51u8, 196u8, 128u8, 99u8, 32u8, 196u8, 78u8, 129u8, 161u8, 94u8,
							208u8, 242u8, 249u8, 146u8, 62u8, 184u8, 75u8, 150u8, 114u8, 117u8,
							17u8, 14u8, 9u8, 93u8, 61u8, 91u8, 170u8, 239u8, 21u8, 235u8, 154u8,
						],
					)
				}
				#[doc = "As a member, vote on the defender."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and a member."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `approve`: A boolean which says if the candidate should be"]
				#[doc = "approved (`true`) or rejected (`false`)."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Key: M (len of members)"]
				#[doc = "- One storage read O(M) and O(log M) search to check user is a member."]
				#[doc = "- One storage write to add vote to votes. O(1)"]
				#[doc = "- One event."]
				#[doc = ""]
				#[doc = "Total Complexity: O(M + logM)"]
				#[doc = "# </weight>"]
				pub fn defender_vote(
					&self,
					approve: ::core::primitive::bool,
				) -> ::subxt::tx::StaticTxPayload<DefenderVote> {
					::subxt::tx::StaticTxPayload::new(
						"Society",
						"defender_vote",
						DefenderVote { approve },
						[
							248u8, 232u8, 243u8, 44u8, 252u8, 68u8, 118u8, 143u8, 57u8, 34u8,
							196u8, 4u8, 71u8, 14u8, 28u8, 164u8, 139u8, 184u8, 20u8, 71u8, 86u8,
							227u8, 172u8, 84u8, 213u8, 221u8, 155u8, 198u8, 56u8, 93u8, 209u8,
							211u8,
						],
					)
				}
				#[doc = "Transfer the first matured payout for the sender and remove it from the records."]
				#[doc = ""]
				#[doc = "NOTE: This extrinsic needs to be called multiple times to claim multiple matured"]
				#[doc = "payouts."]
				#[doc = ""]
				#[doc = "Payment: The member will receive a payment equal to their first matured"]
				#[doc = "payout to their free balance."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and a member with"]
				#[doc = "payouts remaining."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Key: M (len of members), P (number of payouts for a particular member)"]
				#[doc = "- One storage read O(M) and O(log M) search to check signer is a member."]
				#[doc = "- One storage read O(P) to get all payouts for a member."]
				#[doc = "- One storage read O(1) to get the current block number."]
				#[doc = "- One currency transfer call. O(X)"]
				#[doc = "- One storage write or removal to update the member's payouts. O(P)"]
				#[doc = ""]
				#[doc = "Total Complexity: O(M + logM + P + X)"]
				#[doc = "# </weight>"]
				pub fn payout(&self) -> ::subxt::tx::StaticTxPayload<Payout> {
					::subxt::tx::StaticTxPayload::new(
						"Society",
						"payout",
						Payout {},
						[
							255u8, 171u8, 227u8, 58u8, 244u8, 95u8, 239u8, 127u8, 129u8, 211u8,
							131u8, 191u8, 154u8, 234u8, 85u8, 69u8, 173u8, 135u8, 179u8, 83u8,
							17u8, 41u8, 34u8, 137u8, 174u8, 251u8, 127u8, 62u8, 74u8, 255u8, 19u8,
							234u8,
						],
					)
				}
				#[doc = "Found the society."]
				#[doc = ""]
				#[doc = "This is done as a discrete action in order to allow for the"]
				#[doc = "pallet to be included into a running chain and can only be done once."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be from the _FounderSetOrigin_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `founder` - The first member and head of the newly founded society."]
				#[doc = "- `max_members` - The initial max number of members for the society."]
				#[doc = "- `rules` - The rules of this society concerning membership."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Two storage mutates to set `Head` and `Founder`. O(1)"]
				#[doc = "- One storage write to add the first member to society. O(1)"]
				#[doc = "- One event."]
				#[doc = ""]
				#[doc = "Total Complexity: O(1)"]
				#[doc = "# </weight>"]
				pub fn found(
					&self,
					founder: ::subxt::ext::sp_core::crypto::AccountId32,
					max_members: ::core::primitive::u32,
					rules: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<Found> {
					::subxt::tx::StaticTxPayload::new(
						"Society",
						"found",
						Found { founder, max_members, rules },
						[
							154u8, 197u8, 227u8, 144u8, 189u8, 52u8, 251u8, 218u8, 159u8, 155u8,
							145u8, 49u8, 178u8, 160u8, 91u8, 150u8, 129u8, 53u8, 146u8, 17u8, 39u8,
							43u8, 126u8, 140u8, 101u8, 4u8, 175u8, 151u8, 92u8, 74u8, 33u8, 194u8,
						],
					)
				}
				#[doc = "Annul the founding of the society."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be Signed, and the signing account must be both"]
				#[doc = "the `Founder` and the `Head`. This implies that it may only be done when there is one"]
				#[doc = "member."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Two storage reads O(1)."]
				#[doc = "- Four storage removals O(1)."]
				#[doc = "- One event."]
				#[doc = ""]
				#[doc = "Total Complexity: O(1)"]
				#[doc = "# </weight>"]
				pub fn unfound(&self) -> ::subxt::tx::StaticTxPayload<Unfound> {
					::subxt::tx::StaticTxPayload::new(
						"Society",
						"unfound",
						Unfound {},
						[
							30u8, 120u8, 137u8, 175u8, 237u8, 121u8, 90u8, 9u8, 111u8, 75u8, 51u8,
							85u8, 86u8, 182u8, 6u8, 249u8, 62u8, 246u8, 21u8, 150u8, 70u8, 148u8,
							39u8, 14u8, 168u8, 250u8, 164u8, 235u8, 23u8, 18u8, 164u8, 97u8,
						],
					)
				}
				#[doc = "Allow suspension judgement origin to make judgement on a suspended member."]
				#[doc = ""]
				#[doc = "If a suspended member is forgiven, we simply add them back as a member, not affecting"]
				#[doc = "any of the existing storage items for that member."]
				#[doc = ""]
				#[doc = "If a suspended member is rejected, remove all associated storage items, including"]
				#[doc = "their payouts, and remove any vouched bids they currently have."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be from the _SuspensionJudgementOrigin_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `who` - The suspended member to be judged."]
				#[doc = "- `forgive` - A boolean representing whether the suspension judgement origin forgives"]
				#[doc = "  (`true`) or rejects (`false`) a suspended member."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Key: B (len of bids), M (len of members)"]
				#[doc = "- One storage read to check `who` is a suspended member. O(1)"]
				#[doc = "- Up to one storage write O(M) with O(log M) binary search to add a member back to"]
				#[doc = "  society."]
				#[doc = "- Up to 3 storage removals O(1) to clean up a removed member."]
				#[doc = "- Up to one storage write O(B) with O(B) search to remove vouched bid from bids."]
				#[doc = "- Up to one additional event if unvouch takes place."]
				#[doc = "- One storage removal. O(1)"]
				#[doc = "- One event for the judgement."]
				#[doc = ""]
				#[doc = "Total Complexity: O(M + logM + B)"]
				#[doc = "# </weight>"]
				pub fn judge_suspended_member(
					&self,
					who: ::subxt::ext::sp_core::crypto::AccountId32,
					forgive: ::core::primitive::bool,
				) -> ::subxt::tx::StaticTxPayload<JudgeSuspendedMember> {
					::subxt::tx::StaticTxPayload::new(
						"Society",
						"judge_suspended_member",
						JudgeSuspendedMember { who, forgive },
						[
							1u8, 30u8, 178u8, 183u8, 159u8, 160u8, 121u8, 156u8, 150u8, 47u8, 35u8,
							27u8, 131u8, 222u8, 79u8, 217u8, 129u8, 90u8, 14u8, 194u8, 102u8,
							196u8, 141u8, 22u8, 220u8, 154u8, 28u8, 85u8, 1u8, 228u8, 116u8, 189u8,
						],
					)
				}
				#[doc = "Allow suspended judgement origin to make judgement on a suspended candidate."]
				#[doc = ""]
				#[doc = "If the judgement is `Approve`, we add them to society as a member with the appropriate"]
				#[doc = "payment for joining society."]
				#[doc = ""]
				#[doc = "If the judgement is `Reject`, we either slash the deposit of the bid, giving it back"]
				#[doc = "to the society treasury, or we ban the voucher from vouching again."]
				#[doc = ""]
				#[doc = "If the judgement is `Rebid`, we put the candidate back in the bid pool and let them go"]
				#[doc = "through the induction process again."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be from the _SuspensionJudgementOrigin_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `who` - The suspended candidate to be judged."]
				#[doc = "- `judgement` - `Approve`, `Reject`, or `Rebid`."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Key: B (len of bids), M (len of members), X (balance action)"]
				#[doc = "- One storage read to check `who` is a suspended candidate."]
				#[doc = "- One storage removal of the suspended candidate."]
				#[doc = "- Approve Logic"]
				#[doc = "\t- One storage read to get the available pot to pay users with. O(1)"]
				#[doc = "\t- One storage write to update the available pot. O(1)"]
				#[doc = "\t- One storage read to get the current block number. O(1)"]
				#[doc = "\t- One storage read to get all members. O(M)"]
				#[doc = "\t- Up to one unreserve currency action."]
				#[doc = "\t- Up to two new storage writes to payouts."]
				#[doc = "\t- Up to one storage write with O(log M) binary search to add a member to society."]
				#[doc = "- Reject Logic"]
				#[doc = "\t- Up to one repatriate reserved currency action. O(X)"]
				#[doc = "\t- Up to one storage write to ban the vouching member from vouching again."]
				#[doc = "- Rebid Logic"]
				#[doc = "\t- Storage mutate with O(log B) binary search to place the user back into bids."]
				#[doc = "- Up to one additional event if unvouch takes place."]
				#[doc = "- One storage removal."]
				#[doc = "- One event for the judgement."]
				#[doc = ""]
				#[doc = "Total Complexity: O(M + logM + B + X)"]
				#[doc = "# </weight>"]
				pub fn judge_suspended_candidate(
					&self,
					who: ::subxt::ext::sp_core::crypto::AccountId32,
					judgement: runtime_types::pallet_society::Judgement,
				) -> ::subxt::tx::StaticTxPayload<JudgeSuspendedCandidate> {
					::subxt::tx::StaticTxPayload::new(
						"Society",
						"judge_suspended_candidate",
						JudgeSuspendedCandidate { who, judgement },
						[
							181u8, 132u8, 237u8, 24u8, 255u8, 109u8, 111u8, 99u8, 162u8, 40u8,
							96u8, 239u8, 78u8, 205u8, 33u8, 185u8, 233u8, 22u8, 194u8, 80u8, 88u8,
							77u8, 239u8, 165u8, 70u8, 204u8, 13u8, 64u8, 218u8, 128u8, 170u8,
							103u8,
						],
					)
				}
				#[doc = "Allows root origin to change the maximum number of members in society."]
				#[doc = "Max membership count must be greater than 1."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be from _ROOT_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `max` - The maximum number of members for the society."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- One storage write to update the max. O(1)"]
				#[doc = "- One event."]
				#[doc = ""]
				#[doc = "Total Complexity: O(1)"]
				#[doc = "# </weight>"]
				pub fn set_max_members(
					&self,
					max: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetMaxMembers> {
					::subxt::tx::StaticTxPayload::new(
						"Society",
						"set_max_members",
						SetMaxMembers { max },
						[
							4u8, 120u8, 194u8, 207u8, 5u8, 93u8, 40u8, 12u8, 1u8, 151u8, 127u8,
							162u8, 218u8, 228u8, 1u8, 249u8, 148u8, 139u8, 124u8, 171u8, 94u8,
							151u8, 40u8, 164u8, 171u8, 122u8, 65u8, 233u8, 27u8, 82u8, 74u8, 67u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_society::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The society is founded by the given identity."]
			pub struct Founded {
				pub founder: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Founded {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Founded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A membership bid just happened. The given account is the candidate's ID and their offer"]
			#[doc = "is the second."]
			pub struct Bid {
				pub candidate_id: ::subxt::ext::sp_core::crypto::AccountId32,
				pub offer: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Bid {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Bid";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A membership bid just happened by vouching. The given account is the candidate's ID and"]
			#[doc = "their offer is the second. The vouching party is the third."]
			pub struct Vouch {
				pub candidate_id: ::subxt::ext::sp_core::crypto::AccountId32,
				pub offer: ::core::primitive::u128,
				pub vouching: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Vouch {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Vouch";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A candidate was dropped (due to an excess of bids in the system)."]
			pub struct AutoUnbid {
				pub candidate: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for AutoUnbid {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "AutoUnbid";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A candidate was dropped (by their request)."]
			pub struct Unbid {
				pub candidate: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Unbid {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Unbid";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A candidate was dropped (by request of who vouched for them)."]
			pub struct Unvouch {
				pub candidate: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Unvouch {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Unvouch";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A group of candidates have been inducted. The batch's primary is the first value, the"]
			#[doc = "batch in full is the second."]
			pub struct Inducted {
				pub primary: ::subxt::ext::sp_core::crypto::AccountId32,
				pub candidates: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
			}
			impl ::subxt::events::StaticEvent for Inducted {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Inducted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A suspended member has been judged."]
			pub struct SuspendedMemberJudgement {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub judged: ::core::primitive::bool,
			}
			impl ::subxt::events::StaticEvent for SuspendedMemberJudgement {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "SuspendedMemberJudgement";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A candidate has been suspended"]
			pub struct CandidateSuspended {
				pub candidate: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for CandidateSuspended {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "CandidateSuspended";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A member has been suspended"]
			pub struct MemberSuspended {
				pub member: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for MemberSuspended {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "MemberSuspended";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A member has been challenged"]
			pub struct Challenged {
				pub member: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Challenged {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Challenged";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A vote has been placed"]
			pub struct Vote {
				pub candidate: ::subxt::ext::sp_core::crypto::AccountId32,
				pub voter: ::subxt::ext::sp_core::crypto::AccountId32,
				pub vote: ::core::primitive::bool,
			}
			impl ::subxt::events::StaticEvent for Vote {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Vote";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A vote has been placed for a defending member"]
			pub struct DefenderVote {
				pub voter: ::subxt::ext::sp_core::crypto::AccountId32,
				pub vote: ::core::primitive::bool,
			}
			impl ::subxt::events::StaticEvent for DefenderVote {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "DefenderVote";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "A new \\[max\\] member count has been set"]
			pub struct NewMaxMembers {
				pub max: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for NewMaxMembers {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "NewMaxMembers";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Society is unfounded."]
			pub struct Unfounded {
				pub founder: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Unfounded {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Unfounded";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "Some funds were deposited into the society account."]
			pub struct Deposit {
				pub value: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Deposit {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Deposit";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The first member."]
				pub fn founder(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::crypto::AccountId32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"Founder",
						vec![],
						[
							50u8, 222u8, 149u8, 14u8, 31u8, 163u8, 129u8, 123u8, 150u8, 220u8,
							16u8, 136u8, 150u8, 245u8, 171u8, 231u8, 75u8, 203u8, 249u8, 123u8,
							86u8, 43u8, 208u8, 65u8, 41u8, 111u8, 114u8, 254u8, 131u8, 13u8, 26u8,
							43u8,
						],
					)
				}
				#[doc = " A hash of the rules of this society concerning membership. Can only be set once and"]
				#[doc = " only by the founder."]
				pub fn rules(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::H256>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"Rules",
						vec![],
						[
							10u8, 206u8, 100u8, 24u8, 227u8, 138u8, 82u8, 125u8, 247u8, 160u8,
							124u8, 121u8, 148u8, 98u8, 252u8, 214u8, 215u8, 232u8, 160u8, 204u8,
							23u8, 95u8, 240u8, 16u8, 201u8, 245u8, 13u8, 178u8, 99u8, 61u8, 247u8,
							137u8,
						],
					)
				}
				#[doc = " The current set of candidates; bidders that are attempting to become members."]
				pub fn candidates(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							runtime_types::pallet_society::Bid<
								::subxt::ext::sp_core::crypto::AccountId32,
								::core::primitive::u128,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"Candidates",
						vec![],
						[
							88u8, 231u8, 247u8, 115u8, 122u8, 18u8, 106u8, 195u8, 238u8, 219u8,
							174u8, 23u8, 179u8, 228u8, 82u8, 26u8, 141u8, 190u8, 206u8, 46u8,
							177u8, 218u8, 123u8, 152u8, 208u8, 79u8, 57u8, 68u8, 3u8, 208u8, 174u8,
							193u8,
						],
					)
				}
				#[doc = " The set of suspended candidates."]
				pub fn suspended_candidates(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::core::primitive::u128,
						runtime_types::pallet_society::BidKind<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						>,
					)>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"SuspendedCandidates",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							35u8, 46u8, 78u8, 1u8, 132u8, 103u8, 152u8, 33u8, 86u8, 137u8, 125u8,
							122u8, 63u8, 175u8, 197u8, 39u8, 255u8, 0u8, 49u8, 53u8, 154u8, 40u8,
							196u8, 158u8, 133u8, 113u8, 159u8, 168u8, 148u8, 154u8, 57u8, 70u8,
						],
					)
				}
				#[doc = " The set of suspended candidates."]
				pub fn suspended_candidates_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::core::primitive::u128,
						runtime_types::pallet_society::BidKind<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						>,
					)>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"SuspendedCandidates",
						Vec::new(),
						[
							35u8, 46u8, 78u8, 1u8, 132u8, 103u8, 152u8, 33u8, 86u8, 137u8, 125u8,
							122u8, 63u8, 175u8, 197u8, 39u8, 255u8, 0u8, 49u8, 53u8, 154u8, 40u8,
							196u8, 158u8, 133u8, 113u8, 159u8, 168u8, 148u8, 154u8, 57u8, 70u8,
						],
					)
				}
				#[doc = " Amount of our account balance that is specifically for the next round's bid(s)."]
				pub fn pot(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"Pot",
						vec![],
						[
							242u8, 124u8, 22u8, 252u8, 4u8, 178u8, 161u8, 120u8, 8u8, 185u8, 182u8,
							177u8, 205u8, 205u8, 192u8, 248u8, 42u8, 8u8, 216u8, 92u8, 194u8,
							219u8, 74u8, 248u8, 135u8, 105u8, 210u8, 207u8, 159u8, 24u8, 149u8,
							190u8,
						],
					)
				}
				#[doc = " The most primary from the most recently approved members."]
				pub fn head(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::crypto::AccountId32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"Head",
						vec![],
						[
							162u8, 185u8, 82u8, 237u8, 221u8, 60u8, 77u8, 96u8, 89u8, 41u8, 162u8,
							7u8, 174u8, 251u8, 121u8, 247u8, 196u8, 118u8, 57u8, 24u8, 142u8,
							129u8, 142u8, 106u8, 166u8, 7u8, 86u8, 54u8, 108u8, 110u8, 118u8, 75u8,
						],
					)
				}
				#[doc = " The current set of members, ordered."]
				pub fn members(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"Members",
						vec![],
						[
							162u8, 72u8, 174u8, 204u8, 140u8, 105u8, 205u8, 176u8, 197u8, 117u8,
							206u8, 134u8, 157u8, 110u8, 139u8, 54u8, 43u8, 233u8, 25u8, 51u8, 36u8,
							238u8, 94u8, 124u8, 221u8, 52u8, 237u8, 71u8, 125u8, 56u8, 129u8,
							222u8,
						],
					)
				}
				#[doc = " The set of suspended members."]
				pub fn suspended_members(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::bool>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"SuspendedMembers",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							158u8, 26u8, 34u8, 152u8, 137u8, 151u8, 205u8, 19u8, 12u8, 138u8,
							107u8, 21u8, 14u8, 162u8, 103u8, 25u8, 181u8, 13u8, 59u8, 3u8, 225u8,
							23u8, 242u8, 184u8, 225u8, 122u8, 55u8, 53u8, 79u8, 163u8, 65u8, 57u8,
						],
					)
				}
				#[doc = " The set of suspended members."]
				pub fn suspended_members_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::bool>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"SuspendedMembers",
						Vec::new(),
						[
							158u8, 26u8, 34u8, 152u8, 137u8, 151u8, 205u8, 19u8, 12u8, 138u8,
							107u8, 21u8, 14u8, 162u8, 103u8, 25u8, 181u8, 13u8, 59u8, 3u8, 225u8,
							23u8, 242u8, 184u8, 225u8, 122u8, 55u8, 53u8, 79u8, 163u8, 65u8, 57u8,
						],
					)
				}
				#[doc = " The current bids, stored ordered by the value of the bid."]
				pub fn bids(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							runtime_types::pallet_society::Bid<
								::subxt::ext::sp_core::crypto::AccountId32,
								::core::primitive::u128,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"Bids",
						vec![],
						[
							8u8, 152u8, 107u8, 47u8, 7u8, 45u8, 86u8, 149u8, 230u8, 81u8, 253u8,
							110u8, 255u8, 83u8, 16u8, 168u8, 169u8, 70u8, 196u8, 167u8, 168u8,
							98u8, 36u8, 122u8, 124u8, 77u8, 61u8, 245u8, 248u8, 48u8, 224u8, 125u8,
						],
					)
				}
				#[doc = " Members currently vouching or banned from vouching again"]
				pub fn vouching(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_society::VouchingStatus,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"Vouching",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							189u8, 212u8, 60u8, 171u8, 135u8, 82u8, 34u8, 93u8, 206u8, 206u8, 31u8,
							99u8, 197u8, 0u8, 97u8, 228u8, 118u8, 200u8, 123u8, 81u8, 242u8, 93u8,
							31u8, 1u8, 9u8, 121u8, 215u8, 223u8, 15u8, 56u8, 223u8, 96u8,
						],
					)
				}
				#[doc = " Members currently vouching or banned from vouching again"]
				pub fn vouching_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_society::VouchingStatus,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"Vouching",
						Vec::new(),
						[
							189u8, 212u8, 60u8, 171u8, 135u8, 82u8, 34u8, 93u8, 206u8, 206u8, 31u8,
							99u8, 197u8, 0u8, 97u8, 228u8, 118u8, 200u8, 123u8, 81u8, 242u8, 93u8,
							31u8, 1u8, 9u8, 121u8, 215u8, 223u8, 15u8, 56u8, 223u8, 96u8,
						],
					)
				}
				#[doc = " Pending payouts; ordered by block number, with the amount that should be paid out."]
				pub fn payouts(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u128)>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"Payouts",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							88u8, 208u8, 72u8, 186u8, 175u8, 77u8, 18u8, 108u8, 69u8, 117u8, 227u8,
							73u8, 126u8, 56u8, 32u8, 1u8, 198u8, 6u8, 231u8, 172u8, 3u8, 155u8,
							72u8, 152u8, 68u8, 222u8, 19u8, 229u8, 69u8, 181u8, 196u8, 202u8,
						],
					)
				}
				#[doc = " Pending payouts; ordered by block number, with the amount that should be paid out."]
				pub fn payouts_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u128)>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"Payouts",
						Vec::new(),
						[
							88u8, 208u8, 72u8, 186u8, 175u8, 77u8, 18u8, 108u8, 69u8, 117u8, 227u8,
							73u8, 126u8, 56u8, 32u8, 1u8, 198u8, 6u8, 231u8, 172u8, 3u8, 155u8,
							72u8, 152u8, 68u8, 222u8, 19u8, 229u8, 69u8, 181u8, 196u8, 202u8,
						],
					)
				}
				#[doc = " The ongoing number of losing votes cast by the member."]
				pub fn strikes(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"Strikes",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							120u8, 174u8, 185u8, 72u8, 167u8, 85u8, 204u8, 187u8, 139u8, 103u8,
							124u8, 14u8, 65u8, 243u8, 40u8, 114u8, 231u8, 200u8, 174u8, 56u8,
							159u8, 242u8, 102u8, 221u8, 26u8, 153u8, 154u8, 238u8, 109u8, 255u8,
							64u8, 135u8,
						],
					)
				}
				#[doc = " The ongoing number of losing votes cast by the member."]
				pub fn strikes_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"Strikes",
						Vec::new(),
						[
							120u8, 174u8, 185u8, 72u8, 167u8, 85u8, 204u8, 187u8, 139u8, 103u8,
							124u8, 14u8, 65u8, 243u8, 40u8, 114u8, 231u8, 200u8, 174u8, 56u8,
							159u8, 242u8, 102u8, 221u8, 26u8, 153u8, 154u8, 238u8, 109u8, 255u8,
							64u8, 135u8,
						],
					)
				}
				#[doc = " Double map from Candidate -> Voter -> (Maybe) Vote."]
				pub fn votes(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
					_1: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::pallet_society::Vote>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"Votes",
						vec![
							::subxt::storage::address::StorageMapKey::new(
								_0.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
							::subxt::storage::address::StorageMapKey::new(
								_1.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
						],
						[
							82u8, 0u8, 111u8, 217u8, 223u8, 52u8, 99u8, 140u8, 145u8, 35u8, 207u8,
							54u8, 69u8, 86u8, 133u8, 103u8, 122u8, 3u8, 153u8, 68u8, 233u8, 71u8,
							62u8, 132u8, 218u8, 2u8, 126u8, 136u8, 245u8, 150u8, 102u8, 77u8,
						],
					)
				}
				#[doc = " Double map from Candidate -> Voter -> (Maybe) Vote."]
				pub fn votes_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::pallet_society::Vote>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"Votes",
						Vec::new(),
						[
							82u8, 0u8, 111u8, 217u8, 223u8, 52u8, 99u8, 140u8, 145u8, 35u8, 207u8,
							54u8, 69u8, 86u8, 133u8, 103u8, 122u8, 3u8, 153u8, 68u8, 233u8, 71u8,
							62u8, 132u8, 218u8, 2u8, 126u8, 136u8, 245u8, 150u8, 102u8, 77u8,
						],
					)
				}
				#[doc = " The defending member currently being challenged."]
				pub fn defender(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::crypto::AccountId32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"Defender",
						vec![],
						[
							116u8, 251u8, 243u8, 93u8, 242u8, 69u8, 62u8, 163u8, 154u8, 55u8,
							243u8, 204u8, 205u8, 210u8, 205u8, 5u8, 202u8, 177u8, 153u8, 199u8,
							126u8, 142u8, 248u8, 65u8, 88u8, 226u8, 101u8, 116u8, 74u8, 170u8,
							93u8, 146u8,
						],
					)
				}
				#[doc = " Votes for the defender."]
				pub fn defender_votes(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::pallet_society::Vote>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"DefenderVotes",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							90u8, 131u8, 201u8, 228u8, 138u8, 115u8, 75u8, 188u8, 29u8, 229u8,
							221u8, 218u8, 154u8, 78u8, 152u8, 166u8, 184u8, 93u8, 156u8, 0u8,
							110u8, 58u8, 135u8, 124u8, 179u8, 98u8, 5u8, 218u8, 47u8, 145u8, 163u8,
							245u8,
						],
					)
				}
				#[doc = " Votes for the defender."]
				pub fn defender_votes_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::pallet_society::Vote>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"DefenderVotes",
						Vec::new(),
						[
							90u8, 131u8, 201u8, 228u8, 138u8, 115u8, 75u8, 188u8, 29u8, 229u8,
							221u8, 218u8, 154u8, 78u8, 152u8, 166u8, 184u8, 93u8, 156u8, 0u8,
							110u8, 58u8, 135u8, 124u8, 179u8, 98u8, 5u8, 218u8, 47u8, 145u8, 163u8,
							245u8,
						],
					)
				}
				#[doc = " The max number of members for the society at one time."]
				pub fn max_members(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Society",
						"MaxMembers",
						vec![],
						[
							54u8, 113u8, 4u8, 248u8, 5u8, 42u8, 67u8, 237u8, 91u8, 159u8, 63u8,
							239u8, 3u8, 196u8, 202u8, 135u8, 182u8, 137u8, 204u8, 58u8, 39u8, 11u8,
							42u8, 79u8, 129u8, 85u8, 37u8, 154u8, 178u8, 189u8, 123u8, 184u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The societies's pallet id"]
				pub fn pallet_id(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::frame_support::PalletId>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Society",
						"PalletId",
						[
							139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
							174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
							9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
						],
					)
				}
				#[doc = " The minimum amount of a deposit required for a bid to be made."]
				pub fn candidate_deposit(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Society",
						"CandidateDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount of the unpaid reward that gets deducted in the case that either a skeptic"]
				#[doc = " doesn't vote or someone votes in the wrong way."]
				pub fn wrong_side_deduction(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Society",
						"WrongSideDeduction",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The number of times a member may vote the wrong way (or not at all, when they are a"]
				#[doc = " skeptic) before they become suspended."]
				pub fn max_strikes(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Society",
						"MaxStrikes",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The amount of incentive paid within each period. Doesn't include VoterTip."]
				pub fn period_spend(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Society",
						"PeriodSpend",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The number of blocks between candidate/membership rotation periods."]
				pub fn rotation_period(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Society",
						"RotationPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum duration of the payout lock."]
				pub fn max_lock_duration(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Society",
						"MaxLockDuration",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The number of blocks between membership challenges."]
				pub fn challenge_period(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Society",
						"ChallengePeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of candidates that we accept per round."]
				pub fn max_candidate_intake(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Society",
						"MaxCandidateIntake",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod recovery {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct AsRecovered {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
				pub call: ::std::boxed::Box<runtime_types::kusama_runtime::Call>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetRecovered {
				pub lost: ::subxt::ext::sp_core::crypto::AccountId32,
				pub rescuer: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct CreateRecovery {
				pub friends: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
				pub threshold: ::core::primitive::u16,
				pub delay_period: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct InitiateRecovery {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct VouchRecovery {
				pub lost: ::subxt::ext::sp_core::crypto::AccountId32,
				pub rescuer: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ClaimRecovery {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct CloseRecovery {
				pub rescuer: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RemoveRecovery;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct CancelRecovered {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Send a call through a recovered account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and registered to"]
				#[doc = "be able to make calls on behalf of the recovered account."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `account`: The recovered account you want to make a call on-behalf-of."]
				#[doc = "- `call`: The call you want to make with the recovered account."]
				pub fn as_recovered(
					&self,
					account: ::subxt::ext::sp_core::crypto::AccountId32,
					call: runtime_types::kusama_runtime::Call,
				) -> ::subxt::tx::StaticTxPayload<AsRecovered> {
					::subxt::tx::StaticTxPayload::new(
						"Recovery",
						"as_recovered",
						AsRecovered { account, call: ::std::boxed::Box::new(call) },
						[
							38u8, 16u8, 130u8, 104u8, 85u8, 114u8, 119u8, 233u8, 88u8, 183u8, 41u8,
							225u8, 240u8, 245u8, 58u8, 23u8, 177u8, 249u8, 192u8, 38u8, 48u8,
							192u8, 126u8, 78u8, 229u8, 14u8, 1u8, 105u8, 236u8, 122u8, 37u8, 102u8,
						],
					)
				}
				#[doc = "Allow ROOT to bypass the recovery process and set an a rescuer account"]
				#[doc = "for a lost account directly."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _ROOT_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `lost`: The \"lost account\" to be recovered."]
				#[doc = "- `rescuer`: The \"rescuer account\" which can call as the lost account."]
				pub fn set_recovered(
					&self,
					lost: ::subxt::ext::sp_core::crypto::AccountId32,
					rescuer: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<SetRecovered> {
					::subxt::tx::StaticTxPayload::new(
						"Recovery",
						"set_recovered",
						SetRecovered { lost, rescuer },
						[
							225u8, 79u8, 123u8, 16u8, 75u8, 9u8, 29u8, 220u8, 53u8, 236u8, 244u8,
							4u8, 162u8, 72u8, 77u8, 96u8, 204u8, 166u8, 215u8, 122u8, 249u8, 64u8,
							205u8, 122u8, 80u8, 30u8, 26u8, 214u8, 151u8, 241u8, 33u8, 107u8,
						],
					)
				}
				#[doc = "Create a recovery configuration for your account. This makes your account recoverable."]
				#[doc = ""]
				#[doc = "Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance"]
				#[doc = "will be reserved for storing the recovery configuration. This deposit is returned"]
				#[doc = "in full when the user calls `remove_recovery`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `friends`: A list of friends you trust to vouch for recovery attempts. Should be"]
				#[doc = "  ordered and contain no duplicate values."]
				#[doc = "- `threshold`: The number of friends that must vouch for a recovery attempt before the"]
				#[doc = "  account can be recovered. Should be less than or equal to the length of the list of"]
				#[doc = "  friends."]
				#[doc = "- `delay_period`: The number of blocks after a recovery attempt is initialized that"]
				#[doc = "  needs to pass before the account can be recovered."]
				pub fn create_recovery(
					&self,
					friends: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					threshold: ::core::primitive::u16,
					delay_period: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<CreateRecovery> {
					::subxt::tx::StaticTxPayload::new(
						"Recovery",
						"create_recovery",
						CreateRecovery { friends, threshold, delay_period },
						[
							80u8, 233u8, 68u8, 224u8, 181u8, 127u8, 8u8, 35u8, 135u8, 121u8, 73u8,
							25u8, 255u8, 192u8, 177u8, 140u8, 67u8, 113u8, 112u8, 35u8, 63u8, 96u8,
							1u8, 138u8, 93u8, 27u8, 219u8, 52u8, 74u8, 251u8, 65u8, 96u8,
						],
					)
				}
				#[doc = "Initiate the process for recovering a recoverable account."]
				#[doc = ""]
				#[doc = "Payment: `RecoveryDeposit` balance will be reserved for initiating the"]
				#[doc = "recovery process. This deposit will always be repatriated to the account"]
				#[doc = "trying to be recovered. See `close_recovery`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `account`: The lost account that you want to recover. This account needs to be"]
				#[doc = "  recoverable (i.e. have a recovery configuration)."]
				pub fn initiate_recovery(
					&self,
					account: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<InitiateRecovery> {
					::subxt::tx::StaticTxPayload::new(
						"Recovery",
						"initiate_recovery",
						InitiateRecovery { account },
						[
							87u8, 112u8, 13u8, 179u8, 190u8, 84u8, 179u8, 12u8, 212u8, 120u8,
							218u8, 58u8, 79u8, 151u8, 113u8, 223u8, 5u8, 153u8, 21u8, 179u8, 199u8,
							197u8, 153u8, 25u8, 132u8, 201u8, 98u8, 95u8, 250u8, 160u8, 224u8,
							227u8,
						],
					)
				}
				#[doc = "Allow a \"friend\" of a recoverable account to vouch for an active recovery"]
				#[doc = "process for that account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and must be a \"friend\""]
				#[doc = "for the recoverable account."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `lost`: The lost account that you want to recover."]
				#[doc = "- `rescuer`: The account trying to rescue the lost account that you want to vouch for."]
				#[doc = ""]
				#[doc = "The combination of these two parameters must point to an active recovery"]
				#[doc = "process."]
				pub fn vouch_recovery(
					&self,
					lost: ::subxt::ext::sp_core::crypto::AccountId32,
					rescuer: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<VouchRecovery> {
					::subxt::tx::StaticTxPayload::new(
						"Recovery",
						"vouch_recovery",
						VouchRecovery { lost, rescuer },
						[
							210u8, 161u8, 245u8, 160u8, 187u8, 245u8, 128u8, 156u8, 28u8, 24u8,
							38u8, 143u8, 220u8, 239u8, 237u8, 233u8, 34u8, 31u8, 19u8, 51u8, 38u8,
							87u8, 101u8, 54u8, 209u8, 105u8, 54u8, 95u8, 173u8, 195u8, 41u8, 181u8,
						],
					)
				}
				#[doc = "Allow a successful rescuer to claim their recovered account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and must be a \"rescuer\""]
				#[doc = "who has successfully completed the account recovery process: collected"]
				#[doc = "`threshold` or more vouches, waited `delay_period` blocks since initiation."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `account`: The lost account that you want to claim has been successfully recovered by"]
				#[doc = "  you."]
				pub fn claim_recovery(
					&self,
					account: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<ClaimRecovery> {
					::subxt::tx::StaticTxPayload::new(
						"Recovery",
						"claim_recovery",
						ClaimRecovery { account },
						[
							54u8, 40u8, 50u8, 108u8, 149u8, 76u8, 108u8, 66u8, 39u8, 48u8, 248u8,
							196u8, 166u8, 215u8, 162u8, 94u8, 151u8, 137u8, 247u8, 118u8, 247u8,
							208u8, 41u8, 146u8, 129u8, 14u8, 20u8, 140u8, 246u8, 2u8, 208u8, 208u8,
						],
					)
				}
				#[doc = "As the controller of a recoverable account, close an active recovery"]
				#[doc = "process for your account."]
				#[doc = ""]
				#[doc = "Payment: By calling this function, the recoverable account will receive"]
				#[doc = "the recovery deposit `RecoveryDeposit` placed by the rescuer."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and must be a"]
				#[doc = "recoverable account with an active recovery process for it."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `rescuer`: The account trying to rescue this recoverable account."]
				pub fn close_recovery(
					&self,
					rescuer: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<CloseRecovery> {
					::subxt::tx::StaticTxPayload::new(
						"Recovery",
						"close_recovery",
						CloseRecovery { rescuer },
						[
							37u8, 82u8, 8u8, 179u8, 253u8, 34u8, 153u8, 107u8, 222u8, 17u8, 219u8,
							71u8, 166u8, 231u8, 245u8, 107u8, 205u8, 231u8, 53u8, 54u8, 249u8,
							85u8, 61u8, 138u8, 154u8, 255u8, 18u8, 47u8, 205u8, 86u8, 168u8, 50u8,
						],
					)
				}
				#[doc = "Remove the recovery process for your account. Recovered accounts are still accessible."]
				#[doc = ""]
				#[doc = "NOTE: The user must make sure to call `close_recovery` on all active"]
				#[doc = "recovery attempts before calling this function else it will fail."]
				#[doc = ""]
				#[doc = "Payment: By calling this function the recoverable account will unreserve"]
				#[doc = "their recovery configuration deposit."]
				#[doc = "(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)"]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and must be a"]
				#[doc = "recoverable account (i.e. has a recovery configuration)."]
				pub fn remove_recovery(&self) -> ::subxt::tx::StaticTxPayload<RemoveRecovery> {
					::subxt::tx::StaticTxPayload::new(
						"Recovery",
						"remove_recovery",
						RemoveRecovery {},
						[
							14u8, 1u8, 44u8, 24u8, 242u8, 16u8, 67u8, 192u8, 79u8, 206u8, 104u8,
							233u8, 91u8, 202u8, 253u8, 100u8, 48u8, 78u8, 233u8, 24u8, 124u8,
							176u8, 211u8, 87u8, 63u8, 110u8, 2u8, 7u8, 231u8, 53u8, 177u8, 196u8,
						],
					)
				}
				#[doc = "Cancel the ability to use `as_recovered` for `account`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and registered to"]
				#[doc = "be able to make calls on behalf of the recovered account."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `account`: The recovered account you are able to call on-behalf-of."]
				pub fn cancel_recovered(
					&self,
					account: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<CancelRecovered> {
					::subxt::tx::StaticTxPayload::new(
						"Recovery",
						"cancel_recovered",
						CancelRecovered { account },
						[
							207u8, 77u8, 154u8, 157u8, 210u8, 140u8, 170u8, 76u8, 43u8, 67u8,
							248u8, 250u8, 42u8, 255u8, 94u8, 171u8, 25u8, 78u8, 10u8, 49u8, 2u8,
							57u8, 71u8, 232u8, 235u8, 45u8, 118u8, 121u8, 169u8, 63u8, 9u8, 138u8,
						],
					)
				}
			}
		}
		#[doc = "Events type."]
		pub type Event = runtime_types::pallet_recovery::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A recovery process has been set up for an account."]
			pub struct RecoveryCreated {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for RecoveryCreated {
				const PALLET: &'static str = "Recovery";
				const EVENT: &'static str = "RecoveryCreated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A recovery process has been initiated for lost account by rescuer account."]
			pub struct RecoveryInitiated {
				pub lost_account: ::subxt::ext::sp_core::crypto::AccountId32,
				pub rescuer_account: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for RecoveryInitiated {
				const PALLET: &'static str = "Recovery";
				const EVENT: &'static str = "RecoveryInitiated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A recovery process for lost account by rescuer account has been vouched for by sender."]
			pub struct RecoveryVouched {
				pub lost_account: ::subxt::ext::sp_core::crypto::AccountId32,
				pub rescuer_account: ::subxt::ext::sp_core::crypto::AccountId32,
				pub sender: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for RecoveryVouched {
				const PALLET: &'static str = "Recovery";
				const EVENT: &'static str = "RecoveryVouched";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A recovery process for lost account by rescuer account has been closed."]
			pub struct RecoveryClosed {
				pub lost_account: ::subxt::ext::sp_core::crypto::AccountId32,
				pub rescuer_account: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for RecoveryClosed {
				const PALLET: &'static str = "Recovery";
				const EVENT: &'static str = "RecoveryClosed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Lost account has been successfully recovered by rescuer account."]
			pub struct AccountRecovered {
				pub lost_account: ::subxt::ext::sp_core::crypto::AccountId32,
				pub rescuer_account: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for AccountRecovered {
				const PALLET: &'static str = "Recovery";
				const EVENT: &'static str = "AccountRecovered";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A recovery process has been removed for an account."]
			pub struct RecoveryRemoved {
				pub lost_account: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for RecoveryRemoved {
				const PALLET: &'static str = "Recovery";
				const EVENT: &'static str = "RecoveryRemoved";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The set of recoverable accounts and their recovery configuration."]
				pub fn recoverable(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_recovery::RecoveryConfig<
							::core::primitive::u32,
							::core::primitive::u128,
							runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
								::subxt::ext::sp_core::crypto::AccountId32,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Recovery",
						"Recoverable",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							77u8, 165u8, 1u8, 120u8, 139u8, 195u8, 113u8, 101u8, 31u8, 182u8,
							235u8, 20u8, 225u8, 108u8, 173u8, 70u8, 96u8, 14u8, 95u8, 36u8, 146u8,
							171u8, 61u8, 209u8, 37u8, 154u8, 6u8, 197u8, 212u8, 20u8, 167u8, 142u8,
						],
					)
				}
				#[doc = " The set of recoverable accounts and their recovery configuration."]
				pub fn recoverable_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_recovery::RecoveryConfig<
							::core::primitive::u32,
							::core::primitive::u128,
							runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
								::subxt::ext::sp_core::crypto::AccountId32,
							>,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Recovery",
						"Recoverable",
						Vec::new(),
						[
							77u8, 165u8, 1u8, 120u8, 139u8, 195u8, 113u8, 101u8, 31u8, 182u8,
							235u8, 20u8, 225u8, 108u8, 173u8, 70u8, 96u8, 14u8, 95u8, 36u8, 146u8,
							171u8, 61u8, 209u8, 37u8, 154u8, 6u8, 197u8, 212u8, 20u8, 167u8, 142u8,
						],
					)
				}
				#[doc = " Active recovery attempts."]
				#[doc = ""]
				#[doc = " First account is the account to be recovered, and the second account"]
				#[doc = " is the user trying to recover the account."]
				pub fn active_recoveries(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
					_1: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_recovery::ActiveRecovery<
							::core::primitive::u32,
							::core::primitive::u128,
							runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
								::subxt::ext::sp_core::crypto::AccountId32,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Recovery",
						"ActiveRecoveries",
						vec![
							::subxt::storage::address::StorageMapKey::new(
								_0.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
							::subxt::storage::address::StorageMapKey::new(
								_1.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
						],
						[
							105u8, 72u8, 0u8, 48u8, 187u8, 107u8, 42u8, 95u8, 221u8, 206u8, 105u8,
							207u8, 228u8, 150u8, 103u8, 62u8, 195u8, 177u8, 233u8, 97u8, 12u8,
							17u8, 76u8, 204u8, 236u8, 29u8, 225u8, 60u8, 228u8, 44u8, 103u8, 39u8,
						],
					)
				}
				#[doc = " Active recovery attempts."]
				#[doc = ""]
				#[doc = " First account is the account to be recovered, and the second account"]
				#[doc = " is the user trying to recover the account."]
				pub fn active_recoveries_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_recovery::ActiveRecovery<
							::core::primitive::u32,
							::core::primitive::u128,
							runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
								::subxt::ext::sp_core::crypto::AccountId32,
							>,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Recovery",
						"ActiveRecoveries",
						Vec::new(),
						[
							105u8, 72u8, 0u8, 48u8, 187u8, 107u8, 42u8, 95u8, 221u8, 206u8, 105u8,
							207u8, 228u8, 150u8, 103u8, 62u8, 195u8, 177u8, 233u8, 97u8, 12u8,
							17u8, 76u8, 204u8, 236u8, 29u8, 225u8, 60u8, 228u8, 44u8, 103u8, 39u8,
						],
					)
				}
				#[doc = " The list of allowed proxy accounts."]
				#[doc = ""]
				#[doc = " Map from the user who can access it to the recovered account."]
				pub fn proxy(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::crypto::AccountId32>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Recovery",
						"Proxy",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Blake2_128Concat,
						)],
						[
							100u8, 137u8, 55u8, 32u8, 228u8, 27u8, 3u8, 84u8, 255u8, 68u8, 45u8,
							4u8, 215u8, 84u8, 189u8, 81u8, 175u8, 61u8, 252u8, 254u8, 68u8, 179u8,
							57u8, 134u8, 223u8, 49u8, 158u8, 165u8, 108u8, 172u8, 70u8, 108u8,
						],
					)
				}
				#[doc = " The list of allowed proxy accounts."]
				#[doc = ""]
				#[doc = " Map from the user who can access it to the recovered account."]
				pub fn proxy_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::crypto::AccountId32>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Recovery",
						"Proxy",
						Vec::new(),
						[
							100u8, 137u8, 55u8, 32u8, 228u8, 27u8, 3u8, 84u8, 255u8, 68u8, 45u8,
							4u8, 215u8, 84u8, 189u8, 81u8, 175u8, 61u8, 252u8, 254u8, 68u8, 179u8,
							57u8, 134u8, 223u8, 49u8, 158u8, 165u8, 108u8, 172u8, 70u8, 108u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The base amount of currency needed to reserve for creating a recovery configuration."]
				#[doc = ""]
				#[doc = " This is held for an additional storage item whose value size is"]
				#[doc = " `2 + sizeof(BlockNumber, Balance)` bytes."]
				pub fn config_deposit_base(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Recovery",
						"ConfigDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount of currency needed per additional user when creating a recovery"]
				#[doc = " configuration."]
				#[doc = ""]
				#[doc = " This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage"]
				#[doc = " value."]
				pub fn friend_deposit_factor(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Recovery",
						"FriendDepositFactor",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The maximum amount of friends allowed in a recovery configuration."]
				#[doc = ""]
				#[doc = " NOTE: The threshold programmed in this Pallet uses u16, so it does"]
				#[doc = " not really make sense to have a limit here greater than u16::MAX."]
				#[doc = " But also, that is a lot more than you should probably set this value"]
				#[doc = " to anyway..."]
				pub fn max_friends(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Recovery",
						"MaxFriends",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The base amount of currency needed to reserve for starting a recovery."]
				#[doc = ""]
				#[doc = " This is primarily held for deterring malicious recovery attempts, and should"]
				#[doc = " have a value large enough that a bad actor would choose not to place this"]
				#[doc = " deposit. It also acts to fund additional storage item whose value size is"]
				#[doc = " `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable"]
				#[doc = " threshold."]
				pub fn recovery_deposit(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Recovery",
						"RecoveryDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
			}
		}
	}
	pub mod vesting {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Vest;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct VestOther {
				pub target: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct VestedTransfer {
				pub target: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
				pub schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
					::core::primitive::u128,
					::core::primitive::u32,
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceVestedTransfer {
				pub source: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
				pub target: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
				pub schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
					::core::primitive::u128,
					::core::primitive::u32,
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct MergeSchedules {
				pub schedule1_index: ::core::primitive::u32,
				pub schedule2_index: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Unlock any vested funds of the sender account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have funds still"]
				#[doc = "locked under this pallet."]
				#[doc = ""]
				#[doc = "Emits either `VestingCompleted` or `VestingUpdated`."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(1)`."]
				#[doc = "- DbWeight: 2 Reads, 2 Writes"]
				#[doc = "    - Reads: Vesting Storage, Balances Locks, [Sender Account]"]
				#[doc = "    - Writes: Vesting Storage, Balances Locks, [Sender Account]"]
				#[doc = "# </weight>"]
				pub fn vest(&self) -> ::subxt::tx::StaticTxPayload<Vest> {
					::subxt::tx::StaticTxPayload::new(
						"Vesting",
						"vest",
						Vest {},
						[
							123u8, 54u8, 10u8, 208u8, 154u8, 24u8, 39u8, 166u8, 64u8, 27u8, 74u8,
							29u8, 243u8, 97u8, 155u8, 5u8, 130u8, 155u8, 65u8, 181u8, 196u8, 125u8,
							45u8, 133u8, 25u8, 33u8, 3u8, 34u8, 21u8, 167u8, 172u8, 54u8,
						],
					)
				}
				#[doc = "Unlock any vested funds of a `target` account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `target`: The account whose vested funds should be unlocked. Must have funds still"]
				#[doc = "locked under this pallet."]
				#[doc = ""]
				#[doc = "Emits either `VestingCompleted` or `VestingUpdated`."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(1)`."]
				#[doc = "- DbWeight: 3 Reads, 3 Writes"]
				#[doc = "    - Reads: Vesting Storage, Balances Locks, Target Account"]
				#[doc = "    - Writes: Vesting Storage, Balances Locks, Target Account"]
				#[doc = "# </weight>"]
				pub fn vest_other(
					&self,
					target: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
				) -> ::subxt::tx::StaticTxPayload<VestOther> {
					::subxt::tx::StaticTxPayload::new(
						"Vesting",
						"vest_other",
						VestOther { target },
						[
							164u8, 19u8, 93u8, 81u8, 235u8, 101u8, 18u8, 52u8, 187u8, 81u8, 243u8,
							216u8, 116u8, 84u8, 188u8, 135u8, 1u8, 241u8, 128u8, 90u8, 117u8,
							164u8, 111u8, 0u8, 251u8, 148u8, 250u8, 248u8, 102u8, 79u8, 165u8,
							175u8,
						],
					)
				}
				#[doc = "Create a vested transfer."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `target`: The account receiving the vested funds."]
				#[doc = "- `schedule`: The vesting schedule attached to the transfer."]
				#[doc = ""]
				#[doc = "Emits `VestingCreated`."]
				#[doc = ""]
				#[doc = "NOTE: This will unlock all schedules through the current block."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(1)`."]
				#[doc = "- DbWeight: 3 Reads, 3 Writes"]
				#[doc = "    - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]"]
				#[doc = "    - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]"]
				#[doc = "# </weight>"]
				pub fn vested_transfer(
					&self,
					target: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
					schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
						::core::primitive::u128,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::StaticTxPayload<VestedTransfer> {
					::subxt::tx::StaticTxPayload::new(
						"Vesting",
						"vested_transfer",
						VestedTransfer { target, schedule },
						[
							135u8, 172u8, 56u8, 97u8, 45u8, 141u8, 93u8, 173u8, 111u8, 252u8, 75u8,
							246u8, 92u8, 181u8, 138u8, 87u8, 145u8, 174u8, 71u8, 108u8, 126u8,
							118u8, 49u8, 122u8, 249u8, 132u8, 19u8, 2u8, 132u8, 160u8, 247u8,
							195u8,
						],
					)
				}
				#[doc = "Force a vested transfer."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Root_."]
				#[doc = ""]
				#[doc = "- `source`: The account whose funds should be transferred."]
				#[doc = "- `target`: The account that should be transferred the vested funds."]
				#[doc = "- `schedule`: The vesting schedule attached to the transfer."]
				#[doc = ""]
				#[doc = "Emits `VestingCreated`."]
				#[doc = ""]
				#[doc = "NOTE: This will unlock all schedules through the current block."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(1)`."]
				#[doc = "- DbWeight: 4 Reads, 4 Writes"]
				#[doc = "    - Reads: Vesting Storage, Balances Locks, Target Account, Source Account"]
				#[doc = "    - Writes: Vesting Storage, Balances Locks, Target Account, Source Account"]
				#[doc = "# </weight>"]
				pub fn force_vested_transfer(
					&self,
					source: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
					target: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
					schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
						::core::primitive::u128,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::StaticTxPayload<ForceVestedTransfer> {
					::subxt::tx::StaticTxPayload::new(
						"Vesting",
						"force_vested_transfer",
						ForceVestedTransfer { source, target, schedule },
						[
							110u8, 142u8, 63u8, 148u8, 90u8, 229u8, 237u8, 183u8, 240u8, 237u8,
							242u8, 32u8, 88u8, 48u8, 220u8, 101u8, 210u8, 212u8, 27u8, 7u8, 186u8,
							98u8, 28u8, 197u8, 148u8, 140u8, 77u8, 59u8, 202u8, 166u8, 63u8, 97u8,
						],
					)
				}
				#[doc = "Merge two vesting schedules together, creating a new vesting schedule that unlocks over"]
				#[doc = "the highest possible start and end blocks. If both schedules have already started the"]
				#[doc = "current block will be used as the schedule start; with the caveat that if one schedule"]
				#[doc = "is finished by the current block, the other will be treated as the new merged schedule,"]
				#[doc = "unmodified."]
				#[doc = ""]
				#[doc = "NOTE: If `schedule1_index == schedule2_index` this is a no-op."]
				#[doc = "NOTE: This will unlock all schedules through the current block prior to merging."]
				#[doc = "NOTE: If both schedules have ended by the current block, no new schedule will be created"]
				#[doc = "and both will be removed."]
				#[doc = ""]
				#[doc = "Merged schedule attributes:"]
				#[doc = "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,"]
				#[doc = "  current_block)`."]
				#[doc = "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`."]
				#[doc = "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `schedule1_index`: index of the first schedule to merge."]
				#[doc = "- `schedule2_index`: index of the second schedule to merge."]
				pub fn merge_schedules(
					&self,
					schedule1_index: ::core::primitive::u32,
					schedule2_index: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<MergeSchedules> {
					::subxt::tx::StaticTxPayload::new(
						"Vesting",
						"merge_schedules",
						MergeSchedules { schedule1_index, schedule2_index },
						[
							95u8, 255u8, 147u8, 12u8, 49u8, 25u8, 70u8, 112u8, 55u8, 154u8, 183u8,
							97u8, 56u8, 244u8, 148u8, 61u8, 107u8, 163u8, 220u8, 31u8, 153u8, 25u8,
							193u8, 251u8, 131u8, 26u8, 166u8, 157u8, 75u8, 4u8, 110u8, 125u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_vesting::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The amount vested has been updated. This could indicate a change in funds available."]
			#[doc = "The balance given is the amount which is left unvested (and thus locked)."]
			pub struct VestingUpdated {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
				pub unvested: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for VestingUpdated {
				const PALLET: &'static str = "Vesting";
				const EVENT: &'static str = "VestingUpdated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An \\[account\\] has become fully vested."]
			pub struct VestingCompleted {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for VestingCompleted {
				const PALLET: &'static str = "Vesting";
				const EVENT: &'static str = "VestingCompleted";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Information regarding the vesting of a given account."]
				pub fn vesting(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							runtime_types::pallet_vesting::vesting_info::VestingInfo<
								::core::primitive::u128,
								::core::primitive::u32,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Vesting",
						"Vesting",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Blake2_128Concat,
						)],
						[
							23u8, 209u8, 233u8, 126u8, 89u8, 156u8, 193u8, 204u8, 100u8, 90u8,
							14u8, 120u8, 36u8, 167u8, 148u8, 239u8, 179u8, 74u8, 207u8, 83u8, 54u8,
							77u8, 27u8, 135u8, 74u8, 31u8, 33u8, 11u8, 168u8, 239u8, 212u8, 36u8,
						],
					)
				}
				#[doc = " Information regarding the vesting of a given account."]
				pub fn vesting_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							runtime_types::pallet_vesting::vesting_info::VestingInfo<
								::core::primitive::u128,
								::core::primitive::u32,
							>,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Vesting",
						"Vesting",
						Vec::new(),
						[
							23u8, 209u8, 233u8, 126u8, 89u8, 156u8, 193u8, 204u8, 100u8, 90u8,
							14u8, 120u8, 36u8, 167u8, 148u8, 239u8, 179u8, 74u8, 207u8, 83u8, 54u8,
							77u8, 27u8, 135u8, 74u8, 31u8, 33u8, 11u8, 168u8, 239u8, 212u8, 36u8,
						],
					)
				}
				#[doc = " Storage version of the pallet."]
				#[doc = ""]
				#[doc = " New networks start with latest version, as determined by the genesis build."]
				pub fn storage_version(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::pallet_vesting::Releases>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Vesting",
						"StorageVersion",
						vec![],
						[
							50u8, 143u8, 26u8, 88u8, 129u8, 31u8, 61u8, 118u8, 19u8, 202u8, 119u8,
							160u8, 34u8, 219u8, 60u8, 57u8, 189u8, 66u8, 93u8, 239u8, 121u8, 114u8,
							241u8, 116u8, 0u8, 122u8, 232u8, 94u8, 189u8, 23u8, 45u8, 191u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The minimum amount transferred to call `vested_transfer`."]
				pub fn min_vested_transfer(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Vesting",
						"MinVestedTransfer",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				pub fn max_vesting_schedules(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Vesting",
						"MaxVestingSchedules",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod scheduler {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Schedule {
				pub when: ::core::primitive::u32,
				pub maybe_periodic:
					::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
				pub priority: ::core::primitive::u8,
				pub call: ::std::boxed::Box<
					runtime_types::frame_support::traits::schedule::MaybeHashed<
						runtime_types::kusama_runtime::Call,
						::subxt::ext::sp_core::H256,
					>,
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Cancel {
				pub when: ::core::primitive::u32,
				pub index: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ScheduleNamed {
				pub id: ::std::vec::Vec<::core::primitive::u8>,
				pub when: ::core::primitive::u32,
				pub maybe_periodic:
					::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
				pub priority: ::core::primitive::u8,
				pub call: ::std::boxed::Box<
					runtime_types::frame_support::traits::schedule::MaybeHashed<
						runtime_types::kusama_runtime::Call,
						::subxt::ext::sp_core::H256,
					>,
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct CancelNamed {
				pub id: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ScheduleAfter {
				pub after: ::core::primitive::u32,
				pub maybe_periodic:
					::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
				pub priority: ::core::primitive::u8,
				pub call: ::std::boxed::Box<
					runtime_types::frame_support::traits::schedule::MaybeHashed<
						runtime_types::kusama_runtime::Call,
						::subxt::ext::sp_core::H256,
					>,
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ScheduleNamedAfter {
				pub id: ::std::vec::Vec<::core::primitive::u8>,
				pub after: ::core::primitive::u32,
				pub maybe_periodic:
					::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
				pub priority: ::core::primitive::u8,
				pub call: ::std::boxed::Box<
					runtime_types::frame_support::traits::schedule::MaybeHashed<
						runtime_types::kusama_runtime::Call,
						::subxt::ext::sp_core::H256,
					>,
				>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Anonymously schedule a task."]
				pub fn schedule(
					&self,
					when: ::core::primitive::u32,
					maybe_periodic: ::core::option::Option<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					priority: ::core::primitive::u8,
					call: runtime_types::frame_support::traits::schedule::MaybeHashed<
						runtime_types::kusama_runtime::Call,
						::subxt::ext::sp_core::H256,
					>,
				) -> ::subxt::tx::StaticTxPayload<Schedule> {
					::subxt::tx::StaticTxPayload::new(
						"Scheduler",
						"schedule",
						Schedule {
							when,
							maybe_periodic,
							priority,
							call: ::std::boxed::Box::new(call),
						},
						[
							42u8, 223u8, 253u8, 202u8, 20u8, 157u8, 134u8, 3u8, 245u8, 130u8,
							144u8, 150u8, 9u8, 109u8, 36u8, 76u8, 128u8, 124u8, 201u8, 243u8, 86u8,
							46u8, 21u8, 228u8, 31u8, 113u8, 91u8, 140u8, 221u8, 75u8, 166u8, 209u8,
						],
					)
				}
				#[doc = "Cancel an anonymously scheduled task."]
				pub fn cancel(
					&self,
					when: ::core::primitive::u32,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<Cancel> {
					::subxt::tx::StaticTxPayload::new(
						"Scheduler",
						"cancel",
						Cancel { when, index },
						[
							81u8, 251u8, 234u8, 17u8, 214u8, 75u8, 19u8, 59u8, 19u8, 30u8, 89u8,
							74u8, 6u8, 216u8, 238u8, 165u8, 7u8, 19u8, 153u8, 253u8, 161u8, 103u8,
							178u8, 227u8, 152u8, 180u8, 80u8, 156u8, 82u8, 126u8, 132u8, 120u8,
						],
					)
				}
				#[doc = "Schedule a named task."]
				pub fn schedule_named(
					&self,
					id: ::std::vec::Vec<::core::primitive::u8>,
					when: ::core::primitive::u32,
					maybe_periodic: ::core::option::Option<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					priority: ::core::primitive::u8,
					call: runtime_types::frame_support::traits::schedule::MaybeHashed<
						runtime_types::kusama_runtime::Call,
						::subxt::ext::sp_core::H256,
					>,
				) -> ::subxt::tx::StaticTxPayload<ScheduleNamed> {
					::subxt::tx::StaticTxPayload::new(
						"Scheduler",
						"schedule_named",
						ScheduleNamed {
							id,
							when,
							maybe_periodic,
							priority,
							call: ::std::boxed::Box::new(call),
						},
						[
							179u8, 242u8, 138u8, 138u8, 126u8, 40u8, 255u8, 233u8, 8u8, 234u8,
							57u8, 46u8, 126u8, 237u8, 110u8, 92u8, 193u8, 157u8, 228u8, 142u8, 8u8,
							43u8, 204u8, 225u8, 247u8, 221u8, 191u8, 135u8, 195u8, 89u8, 67u8,
							136u8,
						],
					)
				}
				#[doc = "Cancel a named scheduled task."]
				pub fn cancel_named(
					&self,
					id: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<CancelNamed> {
					::subxt::tx::StaticTxPayload::new(
						"Scheduler",
						"cancel_named",
						CancelNamed { id },
						[
							42u8, 232u8, 92u8, 167u8, 113u8, 136u8, 7u8, 215u8, 88u8, 117u8, 74u8,
							26u8, 225u8, 230u8, 244u8, 106u8, 150u8, 112u8, 46u8, 228u8, 96u8,
							252u8, 78u8, 126u8, 39u8, 207u8, 36u8, 110u8, 83u8, 62u8, 84u8, 241u8,
						],
					)
				}
				#[doc = "Anonymously schedule a task after a delay."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Same as [`schedule`]."]
				#[doc = "# </weight>"]
				pub fn schedule_after(
					&self,
					after: ::core::primitive::u32,
					maybe_periodic: ::core::option::Option<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					priority: ::core::primitive::u8,
					call: runtime_types::frame_support::traits::schedule::MaybeHashed<
						runtime_types::kusama_runtime::Call,
						::subxt::ext::sp_core::H256,
					>,
				) -> ::subxt::tx::StaticTxPayload<ScheduleAfter> {
					::subxt::tx::StaticTxPayload::new(
						"Scheduler",
						"schedule_after",
						ScheduleAfter {
							after,
							maybe_periodic,
							priority,
							call: ::std::boxed::Box::new(call),
						},
						[
							186u8, 110u8, 86u8, 118u8, 131u8, 209u8, 117u8, 164u8, 194u8, 234u8,
							154u8, 125u8, 62u8, 159u8, 211u8, 165u8, 198u8, 153u8, 179u8, 133u8,
							75u8, 191u8, 210u8, 153u8, 126u8, 144u8, 2u8, 215u8, 147u8, 162u8,
							41u8, 247u8,
						],
					)
				}
				#[doc = "Schedule a named task after a delay."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Same as [`schedule_named`](Self::schedule_named)."]
				#[doc = "# </weight>"]
				pub fn schedule_named_after(
					&self,
					id: ::std::vec::Vec<::core::primitive::u8>,
					after: ::core::primitive::u32,
					maybe_periodic: ::core::option::Option<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					priority: ::core::primitive::u8,
					call: runtime_types::frame_support::traits::schedule::MaybeHashed<
						runtime_types::kusama_runtime::Call,
						::subxt::ext::sp_core::H256,
					>,
				) -> ::subxt::tx::StaticTxPayload<ScheduleNamedAfter> {
					::subxt::tx::StaticTxPayload::new(
						"Scheduler",
						"schedule_named_after",
						ScheduleNamedAfter {
							id,
							after,
							maybe_periodic,
							priority,
							call: ::std::boxed::Box::new(call),
						},
						[
							209u8, 21u8, 53u8, 44u8, 65u8, 125u8, 164u8, 171u8, 73u8, 89u8, 54u8,
							168u8, 249u8, 106u8, 168u8, 174u8, 153u8, 68u8, 213u8, 4u8, 55u8,
							240u8, 95u8, 18u8, 79u8, 206u8, 170u8, 168u8, 38u8, 253u8, 90u8, 251u8,
						],
					)
				}
			}
		}
		#[doc = "Events type."]
		pub type Event = runtime_types::pallet_scheduler::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Scheduled some task."]
			pub struct Scheduled {
				pub when: ::core::primitive::u32,
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Scheduled {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "Scheduled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Canceled some task."]
			pub struct Canceled {
				pub when: ::core::primitive::u32,
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Canceled {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "Canceled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Dispatched some task."]
			pub struct Dispatched {
				pub task: (::core::primitive::u32, ::core::primitive::u32),
				pub id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for Dispatched {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "Dispatched";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The call for the provided hash was not found so the task has been aborted."]
			pub struct CallLookupFailed {
				pub task: (::core::primitive::u32, ::core::primitive::u32),
				pub id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
				pub error: runtime_types::frame_support::traits::schedule::LookupError,
			}
			impl ::subxt::events::StaticEvent for CallLookupFailed {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "CallLookupFailed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Items to be executed, indexed by the block number that they should be executed on."]
				pub fn agenda(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							::core::option::Option<
								runtime_types::pallet_scheduler::ScheduledV3<
									runtime_types::frame_support::traits::schedule::MaybeHashed<
										runtime_types::kusama_runtime::Call,
										::subxt::ext::sp_core::H256,
									>,
									::core::primitive::u32,
									runtime_types::kusama_runtime::OriginCaller,
									::subxt::ext::sp_core::crypto::AccountId32,
								>,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Scheduler",
						"Agenda",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							235u8, 234u8, 182u8, 247u8, 63u8, 218u8, 124u8, 143u8, 238u8, 0u8,
							83u8, 13u8, 59u8, 115u8, 50u8, 104u8, 119u8, 203u8, 78u8, 131u8, 68u8,
							118u8, 192u8, 220u8, 175u8, 186u8, 157u8, 94u8, 163u8, 36u8, 237u8,
							145u8,
						],
					)
				}
				#[doc = " Items to be executed, indexed by the block number that they should be executed on."]
				pub fn agenda_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							::core::option::Option<
								runtime_types::pallet_scheduler::ScheduledV3<
									runtime_types::frame_support::traits::schedule::MaybeHashed<
										runtime_types::kusama_runtime::Call,
										::subxt::ext::sp_core::H256,
									>,
									::core::primitive::u32,
									runtime_types::kusama_runtime::OriginCaller,
									::subxt::ext::sp_core::crypto::AccountId32,
								>,
							>,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Scheduler",
						"Agenda",
						Vec::new(),
						[
							235u8, 234u8, 182u8, 247u8, 63u8, 218u8, 124u8, 143u8, 238u8, 0u8,
							83u8, 13u8, 59u8, 115u8, 50u8, 104u8, 119u8, 203u8, 78u8, 131u8, 68u8,
							118u8, 192u8, 220u8, 175u8, 186u8, 157u8, 94u8, 163u8, 36u8, 237u8,
							145u8,
						],
					)
				}
				#[doc = " Lookup from identity to the block number and index of the task."]
				pub fn lookup(
					&self,
					_0: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Scheduler",
						"Lookup",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							56u8, 105u8, 156u8, 110u8, 251u8, 141u8, 219u8, 56u8, 131u8, 57u8,
							180u8, 33u8, 48u8, 30u8, 193u8, 194u8, 169u8, 182u8, 168u8, 43u8, 36u8,
							202u8, 222u8, 182u8, 41u8, 216u8, 222u8, 1u8, 72u8, 165u8, 62u8, 166u8,
						],
					)
				}
				#[doc = " Lookup from identity to the block number and index of the task."]
				pub fn lookup_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Scheduler",
						"Lookup",
						Vec::new(),
						[
							56u8, 105u8, 156u8, 110u8, 251u8, 141u8, 219u8, 56u8, 131u8, 57u8,
							180u8, 33u8, 48u8, 30u8, 193u8, 194u8, 169u8, 182u8, 168u8, 43u8, 36u8,
							202u8, 222u8, 182u8, 41u8, 216u8, 222u8, 1u8, 72u8, 165u8, 62u8, 166u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The maximum weight that may be scheduled per block for any dispatchables of less"]
				#[doc = " priority than `schedule::HARD_DEADLINE`."]
				pub fn maximum_weight(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Scheduler",
						"MaximumWeight",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
				#[doc = " The maximum number of scheduled calls in the queue for a single block."]
				#[doc = " Not strictly enforced, but used for weight estimation."]
				pub fn max_scheduled_per_block(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Scheduler",
						"MaxScheduledPerBlock",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod proxy {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Proxy {
				pub real: ::subxt::ext::sp_core::crypto::AccountId32,
				pub force_proxy_type:
					::core::option::Option<runtime_types::kusama_runtime::ProxyType>,
				pub call: ::std::boxed::Box<runtime_types::kusama_runtime::Call>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct AddProxy {
				pub delegate: ::subxt::ext::sp_core::crypto::AccountId32,
				pub proxy_type: runtime_types::kusama_runtime::ProxyType,
				pub delay: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RemoveProxy {
				pub delegate: ::subxt::ext::sp_core::crypto::AccountId32,
				pub proxy_type: runtime_types::kusama_runtime::ProxyType,
				pub delay: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RemoveProxies;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Anonymous {
				pub proxy_type: runtime_types::kusama_runtime::ProxyType,
				pub delay: ::core::primitive::u32,
				pub index: ::core::primitive::u16,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct KillAnonymous {
				pub spawner: ::subxt::ext::sp_core::crypto::AccountId32,
				pub proxy_type: runtime_types::kusama_runtime::ProxyType,
				pub index: ::core::primitive::u16,
				#[codec(compact)]
				pub height: ::core::primitive::u32,
				#[codec(compact)]
				pub ext_index: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Announce {
				pub real: ::subxt::ext::sp_core::crypto::AccountId32,
				pub call_hash: ::subxt::ext::sp_core::H256,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RemoveAnnouncement {
				pub real: ::subxt::ext::sp_core::crypto::AccountId32,
				pub call_hash: ::subxt::ext::sp_core::H256,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RejectAnnouncement {
				pub delegate: ::subxt::ext::sp_core::crypto::AccountId32,
				pub call_hash: ::subxt::ext::sp_core::H256,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ProxyAnnounced {
				pub delegate: ::subxt::ext::sp_core::crypto::AccountId32,
				pub real: ::subxt::ext::sp_core::crypto::AccountId32,
				pub force_proxy_type:
					::core::option::Option<runtime_types::kusama_runtime::ProxyType>,
				pub call: ::std::boxed::Box<runtime_types::kusama_runtime::Call>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
				#[doc = "`add_proxy`."]
				#[doc = ""]
				#[doc = "Removes any corresponding announcement(s)."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
				#[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
				#[doc = "- `call`: The call to be made by the `real` account."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of the number of proxies the user has (P)."]
				#[doc = "# </weight>"]
				pub fn proxy(
					&self,
					real: ::subxt::ext::sp_core::crypto::AccountId32,
					force_proxy_type: ::core::option::Option<
						runtime_types::kusama_runtime::ProxyType,
					>,
					call: runtime_types::kusama_runtime::Call,
				) -> ::subxt::tx::StaticTxPayload<Proxy> {
					::subxt::tx::StaticTxPayload::new(
						"Proxy",
						"proxy",
						Proxy { real, force_proxy_type, call: ::std::boxed::Box::new(call) },
						[
							142u8, 57u8, 111u8, 197u8, 113u8, 134u8, 242u8, 188u8, 238u8, 85u8,
							89u8, 212u8, 175u8, 80u8, 225u8, 207u8, 190u8, 21u8, 185u8, 161u8,
							47u8, 246u8, 61u8, 116u8, 96u8, 89u8, 165u8, 237u8, 190u8, 213u8, 20u8,
							60u8,
						],
					)
				}
				#[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
				#[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
				#[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
				#[doc = "zero."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of the number of proxies the user has (P)."]
				#[doc = "# </weight>"]
				pub fn add_proxy(
					&self,
					delegate: ::subxt::ext::sp_core::crypto::AccountId32,
					proxy_type: runtime_types::kusama_runtime::ProxyType,
					delay: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<AddProxy> {
					::subxt::tx::StaticTxPayload::new(
						"Proxy",
						"add_proxy",
						AddProxy { delegate, proxy_type, delay },
						[
							229u8, 136u8, 13u8, 106u8, 250u8, 254u8, 19u8, 101u8, 240u8, 255u8,
							69u8, 59u8, 57u8, 26u8, 154u8, 37u8, 226u8, 191u8, 138u8, 50u8, 116u8,
							75u8, 55u8, 147u8, 26u8, 15u8, 179u8, 17u8, 171u8, 192u8, 185u8, 87u8,
						],
					)
				}
				#[doc = "Unregister a proxy account for the sender."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
				#[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of the number of proxies the user has (P)."]
				#[doc = "# </weight>"]
				pub fn remove_proxy(
					&self,
					delegate: ::subxt::ext::sp_core::crypto::AccountId32,
					proxy_type: runtime_types::kusama_runtime::ProxyType,
					delay: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<RemoveProxy> {
					::subxt::tx::StaticTxPayload::new(
						"Proxy",
						"remove_proxy",
						RemoveProxy { delegate, proxy_type, delay },
						[
							181u8, 22u8, 2u8, 85u8, 106u8, 71u8, 121u8, 70u8, 116u8, 85u8, 54u8,
							71u8, 123u8, 105u8, 151u8, 173u8, 27u8, 228u8, 193u8, 74u8, 255u8,
							181u8, 42u8, 233u8, 251u8, 73u8, 98u8, 12u8, 79u8, 190u8, 162u8, 158u8,
						],
					)
				}
				#[doc = "Unregister all proxy accounts for the sender."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "WARNING: This may be called on accounts created by `anonymous`, however if done, then"]
				#[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of the number of proxies the user has (P)."]
				#[doc = "# </weight>"]
				pub fn remove_proxies(&self) -> ::subxt::tx::StaticTxPayload<RemoveProxies> {
					::subxt::tx::StaticTxPayload::new(
						"Proxy",
						"remove_proxies",
						RemoveProxies {},
						[
							15u8, 237u8, 27u8, 166u8, 254u8, 218u8, 92u8, 5u8, 213u8, 239u8, 99u8,
							59u8, 1u8, 26u8, 73u8, 252u8, 81u8, 94u8, 214u8, 227u8, 169u8, 58u8,
							40u8, 253u8, 187u8, 225u8, 192u8, 26u8, 19u8, 23u8, 121u8, 129u8,
						],
					)
				}
				#[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
				#[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
				#[doc = ""]
				#[doc = "Requires a `Signed` origin."]
				#[doc = ""]
				#[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
				#[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
				#[doc = "allow for maximum flexibility."]
				#[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
				#[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
				#[doc = "want to use `0`."]
				#[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
				#[doc = "zero."]
				#[doc = ""]
				#[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
				#[doc = "same sender, with the same parameters."]
				#[doc = ""]
				#[doc = "Fails if there are insufficient funds to pay for deposit."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of the number of proxies the user has (P)."]
				#[doc = "# </weight>"]
				#[doc = "TODO: Might be over counting 1 read"]
				pub fn anonymous(
					&self,
					proxy_type: runtime_types::kusama_runtime::ProxyType,
					delay: ::core::primitive::u32,
					index: ::core::primitive::u16,
				) -> ::subxt::tx::StaticTxPayload<Anonymous> {
					::subxt::tx::StaticTxPayload::new(
						"Proxy",
						"anonymous",
						Anonymous { proxy_type, delay, index },
						[
							7u8, 121u8, 180u8, 187u8, 64u8, 76u8, 218u8, 231u8, 16u8, 130u8, 50u8,
							135u8, 2u8, 109u8, 127u8, 138u8, 110u8, 74u8, 13u8, 140u8, 9u8, 135u8,
							3u8, 189u8, 109u8, 243u8, 192u8, 181u8, 119u8, 98u8, 10u8, 22u8,
						],
					)
				}
				#[doc = "Removes a previously spawned anonymous proxy."]
				#[doc = ""]
				#[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
				#[doc = "inaccessible."]
				#[doc = ""]
				#[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
				#[doc = "`anonymous` with corresponding parameters."]
				#[doc = ""]
				#[doc = "- `spawner`: The account that originally called `anonymous` to create this account."]
				#[doc = "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`."]
				#[doc = "- `proxy_type`: The proxy type originally passed to `anonymous`."]
				#[doc = "- `height`: The height of the chain when the call to `anonymous` was processed."]
				#[doc = "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed."]
				#[doc = ""]
				#[doc = "Fails with `NoPermission` in case the caller is not a previously created anonymous"]
				#[doc = "account whose `anonymous` call has corresponding parameters."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of the number of proxies the user has (P)."]
				#[doc = "# </weight>"]
				pub fn kill_anonymous(
					&self,
					spawner: ::subxt::ext::sp_core::crypto::AccountId32,
					proxy_type: runtime_types::kusama_runtime::ProxyType,
					index: ::core::primitive::u16,
					height: ::core::primitive::u32,
					ext_index: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<KillAnonymous> {
					::subxt::tx::StaticTxPayload::new(
						"Proxy",
						"kill_anonymous",
						KillAnonymous { spawner, proxy_type, index, height, ext_index },
						[
							20u8, 155u8, 246u8, 138u8, 149u8, 74u8, 227u8, 234u8, 167u8, 56u8,
							104u8, 53u8, 130u8, 43u8, 145u8, 62u8, 49u8, 50u8, 240u8, 176u8, 77u8,
							41u8, 80u8, 39u8, 181u8, 112u8, 143u8, 199u8, 88u8, 110u8, 121u8,
							205u8,
						],
					)
				}
				#[doc = "Publish the hash of a proxy-call that will be made in the future."]
				#[doc = ""]
				#[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
				#[doc = "if the delay associated with the proxy relationship is greater than zero."]
				#[doc = ""]
				#[doc = "No more than `MaxPending` announcements may be made at any one time."]
				#[doc = ""]
				#[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
				#[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
				#[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of:"]
				#[doc = "- A: the number of announcements made."]
				#[doc = "- P: the number of proxies the user has."]
				#[doc = "# </weight>"]
				pub fn announce(
					&self,
					real: ::subxt::ext::sp_core::crypto::AccountId32,
					call_hash: ::subxt::ext::sp_core::H256,
				) -> ::subxt::tx::StaticTxPayload<Announce> {
					::subxt::tx::StaticTxPayload::new(
						"Proxy",
						"announce",
						Announce { real, call_hash },
						[
							99u8, 237u8, 158u8, 131u8, 185u8, 119u8, 88u8, 167u8, 253u8, 29u8,
							82u8, 216u8, 225u8, 33u8, 181u8, 244u8, 85u8, 176u8, 106u8, 66u8,
							166u8, 174u8, 218u8, 98u8, 119u8, 86u8, 218u8, 89u8, 150u8, 255u8,
							86u8, 40u8,
						],
					)
				}
				#[doc = "Remove a given announcement."]
				#[doc = ""]
				#[doc = "May be called by a proxy account to remove a call they previously announced and return"]
				#[doc = "the deposit."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
				#[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of:"]
				#[doc = "- A: the number of announcements made."]
				#[doc = "- P: the number of proxies the user has."]
				#[doc = "# </weight>"]
				pub fn remove_announcement(
					&self,
					real: ::subxt::ext::sp_core::crypto::AccountId32,
					call_hash: ::subxt::ext::sp_core::H256,
				) -> ::subxt::tx::StaticTxPayload<RemoveAnnouncement> {
					::subxt::tx::StaticTxPayload::new(
						"Proxy",
						"remove_announcement",
						RemoveAnnouncement { real, call_hash },
						[
							197u8, 54u8, 240u8, 51u8, 65u8, 218u8, 154u8, 165u8, 24u8, 54u8, 157u8,
							30u8, 144u8, 22u8, 247u8, 177u8, 105u8, 38u8, 9u8, 25u8, 127u8, 36u8,
							97u8, 84u8, 18u8, 3u8, 246u8, 238u8, 60u8, 17u8, 236u8, 69u8,
						],
					)
				}
				#[doc = "Remove the given announcement of a delegate."]
				#[doc = ""]
				#[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
				#[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `delegate`: The account that previously announced the call."]
				#[doc = "- `call_hash`: The hash of the call to be made."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of:"]
				#[doc = "- A: the number of announcements made."]
				#[doc = "- P: the number of proxies the user has."]
				#[doc = "# </weight>"]
				pub fn reject_announcement(
					&self,
					delegate: ::subxt::ext::sp_core::crypto::AccountId32,
					call_hash: ::subxt::ext::sp_core::H256,
				) -> ::subxt::tx::StaticTxPayload<RejectAnnouncement> {
					::subxt::tx::StaticTxPayload::new(
						"Proxy",
						"reject_announcement",
						RejectAnnouncement { delegate, call_hash },
						[
							205u8, 123u8, 102u8, 30u8, 196u8, 250u8, 247u8, 50u8, 243u8, 55u8,
							67u8, 66u8, 160u8, 147u8, 92u8, 204u8, 75u8, 69u8, 68u8, 140u8, 40u8,
							250u8, 53u8, 203u8, 228u8, 239u8, 62u8, 66u8, 254u8, 30u8, 126u8,
							206u8,
						],
					)
				}
				#[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
				#[doc = "`add_proxy`."]
				#[doc = ""]
				#[doc = "Removes any corresponding announcement(s)."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
				#[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
				#[doc = "- `call`: The call to be made by the `real` account."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "Weight is a function of:"]
				#[doc = "- A: the number of announcements made."]
				#[doc = "- P: the number of proxies the user has."]
				#[doc = "# </weight>"]
				pub fn proxy_announced(
					&self,
					delegate: ::subxt::ext::sp_core::crypto::AccountId32,
					real: ::subxt::ext::sp_core::crypto::AccountId32,
					force_proxy_type: ::core::option::Option<
						runtime_types::kusama_runtime::ProxyType,
					>,
					call: runtime_types::kusama_runtime::Call,
				) -> ::subxt::tx::StaticTxPayload<ProxyAnnounced> {
					::subxt::tx::StaticTxPayload::new(
						"Proxy",
						"proxy_announced",
						ProxyAnnounced {
							delegate,
							real,
							force_proxy_type,
							call: ::std::boxed::Box::new(call),
						},
						[
							22u8, 229u8, 237u8, 151u8, 123u8, 115u8, 245u8, 109u8, 95u8, 183u8,
							182u8, 78u8, 96u8, 102u8, 174u8, 196u8, 57u8, 234u8, 66u8, 244u8, 38u8,
							142u8, 34u8, 65u8, 55u8, 145u8, 213u8, 255u8, 214u8, 65u8, 11u8, 124u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_proxy::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A proxy was executed correctly, with the given."]
			pub struct ProxyExecuted {
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for ProxyExecuted {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "ProxyExecuted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Anonymous account has been created by new proxy with given"]
			#[doc = "disambiguation index and proxy type."]
			pub struct AnonymousCreated {
				pub anonymous: ::subxt::ext::sp_core::crypto::AccountId32,
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub proxy_type: runtime_types::kusama_runtime::ProxyType,
				pub disambiguation_index: ::core::primitive::u16,
			}
			impl ::subxt::events::StaticEvent for AnonymousCreated {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "AnonymousCreated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An announcement was placed to make a call in the future."]
			pub struct Announced {
				pub real: ::subxt::ext::sp_core::crypto::AccountId32,
				pub proxy: ::subxt::ext::sp_core::crypto::AccountId32,
				pub call_hash: ::subxt::ext::sp_core::H256,
			}
			impl ::subxt::events::StaticEvent for Announced {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "Announced";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A proxy was added."]
			pub struct ProxyAdded {
				pub delegator: ::subxt::ext::sp_core::crypto::AccountId32,
				pub delegatee: ::subxt::ext::sp_core::crypto::AccountId32,
				pub proxy_type: runtime_types::kusama_runtime::ProxyType,
				pub delay: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for ProxyAdded {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "ProxyAdded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A proxy was removed."]
			pub struct ProxyRemoved {
				pub delegator: ::subxt::ext::sp_core::crypto::AccountId32,
				pub delegatee: ::subxt::ext::sp_core::crypto::AccountId32,
				pub proxy_type: runtime_types::kusama_runtime::ProxyType,
				pub delay: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for ProxyRemoved {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "ProxyRemoved";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
				#[doc = " which are being delegated to, together with the amount held on deposit."]
				pub fn proxies(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							runtime_types::pallet_proxy::ProxyDefinition<
								::subxt::ext::sp_core::crypto::AccountId32,
								runtime_types::kusama_runtime::ProxyType,
								::core::primitive::u32,
							>,
						>,
						::core::primitive::u128,
					)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Proxy",
						"Proxies",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							232u8, 174u8, 79u8, 202u8, 162u8, 211u8, 182u8, 4u8, 222u8, 70u8, 75u8,
							15u8, 44u8, 113u8, 110u8, 202u8, 211u8, 139u8, 54u8, 209u8, 5u8, 34u8,
							227u8, 115u8, 80u8, 254u8, 170u8, 209u8, 47u8, 245u8, 226u8, 26u8,
						],
					)
				}
				#[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
				#[doc = " which are being delegated to, together with the amount held on deposit."]
				pub fn proxies_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							runtime_types::pallet_proxy::ProxyDefinition<
								::subxt::ext::sp_core::crypto::AccountId32,
								runtime_types::kusama_runtime::ProxyType,
								::core::primitive::u32,
							>,
						>,
						::core::primitive::u128,
					)>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Proxy",
						"Proxies",
						Vec::new(),
						[
							232u8, 174u8, 79u8, 202u8, 162u8, 211u8, 182u8, 4u8, 222u8, 70u8, 75u8,
							15u8, 44u8, 113u8, 110u8, 202u8, 211u8, 139u8, 54u8, 209u8, 5u8, 34u8,
							227u8, 115u8, 80u8, 254u8, 170u8, 209u8, 47u8, 245u8, 226u8, 26u8,
						],
					)
				}
				#[doc = " The announcements made by the proxy (key)."]
				pub fn announcements(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							runtime_types::pallet_proxy::Announcement<
								::subxt::ext::sp_core::crypto::AccountId32,
								::subxt::ext::sp_core::H256,
								::core::primitive::u32,
							>,
						>,
						::core::primitive::u128,
					)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Proxy",
						"Announcements",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							233u8, 38u8, 249u8, 89u8, 103u8, 87u8, 64u8, 52u8, 140u8, 228u8, 110u8,
							37u8, 8u8, 92u8, 48u8, 7u8, 46u8, 99u8, 179u8, 83u8, 232u8, 171u8,
							160u8, 45u8, 37u8, 23u8, 151u8, 198u8, 237u8, 103u8, 217u8, 53u8,
						],
					)
				}
				#[doc = " The announcements made by the proxy (key)."]
				pub fn announcements_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							runtime_types::pallet_proxy::Announcement<
								::subxt::ext::sp_core::crypto::AccountId32,
								::subxt::ext::sp_core::H256,
								::core::primitive::u32,
							>,
						>,
						::core::primitive::u128,
					)>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Proxy",
						"Announcements",
						Vec::new(),
						[
							233u8, 38u8, 249u8, 89u8, 103u8, 87u8, 64u8, 52u8, 140u8, 228u8, 110u8,
							37u8, 8u8, 92u8, 48u8, 7u8, 46u8, 99u8, 179u8, 83u8, 232u8, 171u8,
							160u8, 45u8, 37u8, 23u8, 151u8, 198u8, 237u8, 103u8, 217u8, 53u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The base amount of currency needed to reserve for creating a proxy."]
				#[doc = ""]
				#[doc = " This is held for an additional storage item whose value size is"]
				#[doc = " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."]
				pub fn proxy_deposit_base(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Proxy",
						"ProxyDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount of currency needed per proxy added."]
				#[doc = ""]
				#[doc = " This is held for adding 32 bytes plus an instance of `ProxyType` more into a"]
				#[doc = " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take"]
				#[doc = " into account `32 + proxy_type.encode().len()` bytes of data."]
				pub fn proxy_deposit_factor(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Proxy",
						"ProxyDepositFactor",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The maximum amount of proxies allowed for a single account."]
				pub fn max_proxies(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Proxy",
						"MaxProxies",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum amount of time-delayed announcements that are allowed to be pending."]
				pub fn max_pending(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Proxy",
						"MaxPending",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The base amount of currency needed to reserve for creating an announcement."]
				#[doc = ""]
				#[doc = " This is held when a new storage item holding a `Balance` is created (typically 16"]
				#[doc = " bytes)."]
				pub fn announcement_deposit_base(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Proxy",
						"AnnouncementDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount of currency needed per announcement made."]
				#[doc = ""]
				#[doc = " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)"]
				#[doc = " into a pre-existing storage value."]
				pub fn announcement_deposit_factor(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Proxy",
						"AnnouncementDepositFactor",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
			}
		}
	}
	pub mod multisig {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct AsMultiThreshold1 {
				pub other_signatories: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
				pub call: ::std::boxed::Box<runtime_types::kusama_runtime::Call>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct AsMulti {
				pub threshold: ::core::primitive::u16,
				pub other_signatories: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
				pub maybe_timepoint: ::core::option::Option<
					runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
				>,
				pub call: ::subxt::utils::WrapperKeepOpaque<runtime_types::kusama_runtime::Call>,
				pub store_call: ::core::primitive::bool,
				pub max_weight: ::core::primitive::u64,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ApproveAsMulti {
				pub threshold: ::core::primitive::u16,
				pub other_signatories: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
				pub maybe_timepoint: ::core::option::Option<
					runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
				>,
				pub call_hash: [::core::primitive::u8; 32usize],
				pub max_weight: ::core::primitive::u64,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct CancelAsMulti {
				pub threshold: ::core::primitive::u16,
				pub other_signatories: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
				pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
				pub call_hash: [::core::primitive::u8; 32usize],
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
				#[doc = "multi-signature, but do not participate in the approval process."]
				#[doc = "- `call`: The call to be executed."]
				#[doc = ""]
				#[doc = "Result is equivalent to the dispatched result."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
				#[doc = "-------------------------------"]
				#[doc = "- DB Weight: None"]
				#[doc = "- Plus Call Weight"]
				#[doc = "# </weight>"]
				pub fn as_multi_threshold_1(
					&self,
					other_signatories: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					call: runtime_types::kusama_runtime::Call,
				) -> ::subxt::tx::StaticTxPayload<AsMultiThreshold1> {
					::subxt::tx::StaticTxPayload::new(
						"Multisig",
						"as_multi_threshold_1",
						AsMultiThreshold1 { other_signatories, call: ::std::boxed::Box::new(call) },
						[
							254u8, 96u8, 195u8, 27u8, 153u8, 90u8, 100u8, 191u8, 243u8, 103u8,
							194u8, 168u8, 64u8, 61u8, 179u8, 223u8, 105u8, 73u8, 17u8, 119u8,
							170u8, 217u8, 110u8, 123u8, 177u8, 12u8, 104u8, 213u8, 47u8, 93u8,
							175u8, 83u8,
						],
					)
				}
				#[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
				#[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
				#[doc = ""]
				#[doc = "If there are enough, then dispatch the call."]
				#[doc = ""]
				#[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
				#[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
				#[doc = "is cancelled."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
				#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
				#[doc = "dispatch. May not be empty."]
				#[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
				#[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
				#[doc = "transaction index) of the first approval transaction."]
				#[doc = "- `call`: The call to be executed."]
				#[doc = ""]
				#[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
				#[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
				#[doc = ""]
				#[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
				#[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
				#[doc = "may be found in the deposited `MultisigExecuted` event."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(S + Z + Call)`."]
				#[doc = "- Up to one balance-reserve or unreserve operation."]
				#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
				#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
				#[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
				#[doc = "- One encode & hash, both of complexity `O(S)`."]
				#[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
				#[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
				#[doc = "- One event."]
				#[doc = "- The weight of the `call`."]
				#[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
				#[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
				#[doc = "-------------------------------"]
				#[doc = "- DB Weight:"]
				#[doc = "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
				#[doc = "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
				#[doc = "- Plus Call Weight"]
				#[doc = "# </weight>"]
				pub fn as_multi(
					&self,
					threshold: ::core::primitive::u16,
					other_signatories: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					maybe_timepoint: ::core::option::Option<
						runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
					>,
					call: ::subxt::utils::WrapperKeepOpaque<runtime_types::kusama_runtime::Call>,
					store_call: ::core::primitive::bool,
					max_weight: ::core::primitive::u64,
				) -> ::subxt::tx::StaticTxPayload<AsMulti> {
					::subxt::tx::StaticTxPayload::new(
						"Multisig",
						"as_multi",
						AsMulti {
							threshold,
							other_signatories,
							maybe_timepoint,
							call,
							store_call,
							max_weight,
						},
						[
							58u8, 194u8, 42u8, 29u8, 180u8, 93u8, 37u8, 152u8, 111u8, 206u8, 23u8,
							225u8, 43u8, 31u8, 253u8, 57u8, 61u8, 233u8, 108u8, 52u8, 242u8, 201u8,
							209u8, 67u8, 30u8, 184u8, 165u8, 81u8, 205u8, 249u8, 124u8, 97u8,
						],
					)
				}
				#[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
				#[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
				#[doc = ""]
				#[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
				#[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
				#[doc = "is cancelled."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
				#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
				#[doc = "dispatch. May not be empty."]
				#[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
				#[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
				#[doc = "transaction index) of the first approval transaction."]
				#[doc = "- `call_hash`: The hash of the call to be executed."]
				#[doc = ""]
				#[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(S)`."]
				#[doc = "- Up to one balance-reserve or unreserve operation."]
				#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
				#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
				#[doc = "- One encode & hash, both of complexity `O(S)`."]
				#[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
				#[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
				#[doc = "- One event."]
				#[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
				#[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
				#[doc = "----------------------------------"]
				#[doc = "- DB Weight:"]
				#[doc = "    - Read: Multisig Storage, [Caller Account]"]
				#[doc = "    - Write: Multisig Storage, [Caller Account]"]
				#[doc = "# </weight>"]
				pub fn approve_as_multi(
					&self,
					threshold: ::core::primitive::u16,
					other_signatories: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					maybe_timepoint: ::core::option::Option<
						runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
					>,
					call_hash: [::core::primitive::u8; 32usize],
					max_weight: ::core::primitive::u64,
				) -> ::subxt::tx::StaticTxPayload<ApproveAsMulti> {
					::subxt::tx::StaticTxPayload::new(
						"Multisig",
						"approve_as_multi",
						ApproveAsMulti {
							threshold,
							other_signatories,
							maybe_timepoint,
							call_hash,
							max_weight,
						},
						[
							55u8, 94u8, 230u8, 217u8, 37u8, 143u8, 44u8, 108u8, 123u8, 250u8, 26u8,
							44u8, 236u8, 69u8, 63u8, 90u8, 126u8, 15u8, 233u8, 142u8, 213u8, 11u8,
							141u8, 147u8, 151u8, 24u8, 167u8, 62u8, 96u8, 227u8, 181u8, 140u8,
						],
					)
				}
				#[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
				#[doc = "for this operation will be unreserved on success."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
				#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
				#[doc = "dispatch. May not be empty."]
				#[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
				#[doc = "transaction for this dispatch."]
				#[doc = "- `call_hash`: The hash of the call to be executed."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- `O(S)`."]
				#[doc = "- Up to one balance-reserve or unreserve operation."]
				#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
				#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
				#[doc = "- One encode & hash, both of complexity `O(S)`."]
				#[doc = "- One event."]
				#[doc = "- I/O: 1 read `O(S)`, one remove."]
				#[doc = "- Storage: removes one item."]
				#[doc = "----------------------------------"]
				#[doc = "- DB Weight:"]
				#[doc = "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls"]
				#[doc = "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls"]
				#[doc = "# </weight>"]
				pub fn cancel_as_multi(
					&self,
					threshold: ::core::primitive::u16,
					other_signatories: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
					call_hash: [::core::primitive::u8; 32usize],
				) -> ::subxt::tx::StaticTxPayload<CancelAsMulti> {
					::subxt::tx::StaticTxPayload::new(
						"Multisig",
						"cancel_as_multi",
						CancelAsMulti { threshold, other_signatories, timepoint, call_hash },
						[
							30u8, 25u8, 186u8, 142u8, 168u8, 81u8, 235u8, 164u8, 82u8, 209u8, 66u8,
							129u8, 209u8, 78u8, 172u8, 9u8, 163u8, 222u8, 125u8, 57u8, 2u8, 43u8,
							169u8, 174u8, 159u8, 167u8, 25u8, 226u8, 254u8, 110u8, 80u8, 216u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_multisig::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A new multisig operation has begun."]
			pub struct NewMultisig {
				pub approving: ::subxt::ext::sp_core::crypto::AccountId32,
				pub multisig: ::subxt::ext::sp_core::crypto::AccountId32,
				pub call_hash: [::core::primitive::u8; 32usize],
			}
			impl ::subxt::events::StaticEvent for NewMultisig {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "NewMultisig";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A multisig operation has been approved by someone."]
			pub struct MultisigApproval {
				pub approving: ::subxt::ext::sp_core::crypto::AccountId32,
				pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
				pub multisig: ::subxt::ext::sp_core::crypto::AccountId32,
				pub call_hash: [::core::primitive::u8; 32usize],
			}
			impl ::subxt::events::StaticEvent for MultisigApproval {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "MultisigApproval";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A multisig operation has been executed."]
			pub struct MultisigExecuted {
				pub approving: ::subxt::ext::sp_core::crypto::AccountId32,
				pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
				pub multisig: ::subxt::ext::sp_core::crypto::AccountId32,
				pub call_hash: [::core::primitive::u8; 32usize],
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for MultisigExecuted {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "MultisigExecuted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A multisig operation has been cancelled."]
			pub struct MultisigCancelled {
				pub cancelling: ::subxt::ext::sp_core::crypto::AccountId32,
				pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
				pub multisig: ::subxt::ext::sp_core::crypto::AccountId32,
				pub call_hash: [::core::primitive::u8; 32usize],
			}
			impl ::subxt::events::StaticEvent for MultisigCancelled {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "MultisigCancelled";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The set of open multisig operations."]
				pub fn multisigs(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
					_1: impl ::std::borrow::Borrow<[::core::primitive::u8; 32usize]>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_multisig::Multisig<
							::core::primitive::u32,
							::core::primitive::u128,
							::subxt::ext::sp_core::crypto::AccountId32,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Multisig",
						"Multisigs",
						vec![
							::subxt::storage::address::StorageMapKey::new(
								_0.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
							::subxt::storage::address::StorageMapKey::new(
								_1.borrow(),
								::subxt::storage::address::StorageHasher::Blake2_128Concat,
							),
						],
						[
							145u8, 78u8, 57u8, 171u8, 199u8, 158u8, 226u8, 250u8, 224u8, 133u8,
							45u8, 251u8, 202u8, 22u8, 171u8, 132u8, 229u8, 110u8, 248u8, 233u8,
							38u8, 2u8, 247u8, 140u8, 150u8, 103u8, 211u8, 209u8, 160u8, 158u8,
							23u8, 215u8,
						],
					)
				}
				#[doc = " The set of open multisig operations."]
				pub fn multisigs_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_multisig::Multisig<
							::core::primitive::u32,
							::core::primitive::u128,
							::subxt::ext::sp_core::crypto::AccountId32,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Multisig",
						"Multisigs",
						Vec::new(),
						[
							145u8, 78u8, 57u8, 171u8, 199u8, 158u8, 226u8, 250u8, 224u8, 133u8,
							45u8, 251u8, 202u8, 22u8, 171u8, 132u8, 229u8, 110u8, 248u8, 233u8,
							38u8, 2u8, 247u8, 140u8, 150u8, 103u8, 211u8, 209u8, 160u8, 158u8,
							23u8, 215u8,
						],
					)
				}
				pub fn calls(
					&self,
					_0: impl ::std::borrow::Borrow<[::core::primitive::u8; 32usize]>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::subxt::utils::WrapperKeepOpaque<runtime_types::kusama_runtime::Call>,
						::subxt::ext::sp_core::crypto::AccountId32,
						::core::primitive::u128,
					)>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Multisig",
						"Calls",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							72u8, 87u8, 113u8, 46u8, 207u8, 17u8, 219u8, 183u8, 84u8, 186u8, 63u8,
							183u8, 77u8, 172u8, 56u8, 250u8, 32u8, 143u8, 234u8, 15u8, 202u8,
							159u8, 97u8, 179u8, 3u8, 240u8, 35u8, 123u8, 14u8, 106u8, 72u8, 216u8,
						],
					)
				}
				pub fn calls_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::subxt::utils::WrapperKeepOpaque<runtime_types::kusama_runtime::Call>,
						::subxt::ext::sp_core::crypto::AccountId32,
						::core::primitive::u128,
					)>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Multisig",
						"Calls",
						Vec::new(),
						[
							72u8, 87u8, 113u8, 46u8, 207u8, 17u8, 219u8, 183u8, 84u8, 186u8, 63u8,
							183u8, 77u8, 172u8, 56u8, 250u8, 32u8, 143u8, 234u8, 15u8, 202u8,
							159u8, 97u8, 179u8, 3u8, 240u8, 35u8, 123u8, 14u8, 106u8, 72u8, 216u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The base amount of currency needed to reserve for creating a multisig execution or to"]
				#[doc = " store a dispatch call for later."]
				#[doc = ""]
				#[doc = " This is held for an additional storage item whose value size is"]
				#[doc = " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is"]
				#[doc = " `32 + sizeof(AccountId)` bytes."]
				pub fn deposit_base(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Multisig",
						"DepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount of currency needed per unit threshold when creating a multisig execution."]
				#[doc = ""]
				#[doc = " This is held for adding 32 bytes more into a pre-existing storage value."]
				pub fn deposit_factor(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Multisig",
						"DepositFactor",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The maximum amount of signatories allowed in the multisig."]
				pub fn max_signatories(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u16>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Multisig",
						"MaxSignatories",
						[
							116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
							41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
							90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
						],
					)
				}
			}
		}
	}
	pub mod preimage {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct NotePreimage {
				pub bytes: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct UnnotePreimage {
				pub hash: ::subxt::ext::sp_core::H256,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RequestPreimage {
				pub hash: ::subxt::ext::sp_core::H256,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct UnrequestPreimage {
				pub hash: ::subxt::ext::sp_core::H256,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Register a preimage on-chain."]
				#[doc = ""]
				#[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
				#[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
				pub fn note_preimage(
					&self,
					bytes: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<NotePreimage> {
					::subxt::tx::StaticTxPayload::new(
						"Preimage",
						"note_preimage",
						NotePreimage { bytes },
						[
							77u8, 48u8, 104u8, 3u8, 254u8, 65u8, 106u8, 95u8, 204u8, 89u8, 149u8,
							29u8, 144u8, 188u8, 99u8, 23u8, 146u8, 142u8, 35u8, 17u8, 125u8, 130u8,
							31u8, 206u8, 106u8, 83u8, 163u8, 192u8, 81u8, 23u8, 232u8, 230u8,
						],
					)
				}
				#[doc = "Clear an unrequested preimage from the runtime storage."]
				pub fn unnote_preimage(
					&self,
					hash: ::subxt::ext::sp_core::H256,
				) -> ::subxt::tx::StaticTxPayload<UnnotePreimage> {
					::subxt::tx::StaticTxPayload::new(
						"Preimage",
						"unnote_preimage",
						UnnotePreimage { hash },
						[
							211u8, 204u8, 205u8, 58u8, 33u8, 179u8, 68u8, 74u8, 149u8, 138u8,
							213u8, 45u8, 140u8, 27u8, 106u8, 81u8, 68u8, 212u8, 147u8, 116u8, 27u8,
							130u8, 84u8, 34u8, 231u8, 197u8, 135u8, 8u8, 19u8, 242u8, 207u8, 17u8,
						],
					)
				}
				#[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
				#[doc = ""]
				#[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
				#[doc = "a user may have paid, and take the control of the preimage out of their hands."]
				pub fn request_preimage(
					&self,
					hash: ::subxt::ext::sp_core::H256,
				) -> ::subxt::tx::StaticTxPayload<RequestPreimage> {
					::subxt::tx::StaticTxPayload::new(
						"Preimage",
						"request_preimage",
						RequestPreimage { hash },
						[
							195u8, 26u8, 146u8, 255u8, 79u8, 43u8, 73u8, 60u8, 115u8, 78u8, 99u8,
							197u8, 137u8, 95u8, 139u8, 141u8, 79u8, 213u8, 170u8, 169u8, 127u8,
							30u8, 236u8, 65u8, 38u8, 16u8, 118u8, 228u8, 141u8, 83u8, 162u8, 233u8,
						],
					)
				}
				#[doc = "Clear a previously made request for a preimage."]
				#[doc = ""]
				#[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
				pub fn unrequest_preimage(
					&self,
					hash: ::subxt::ext::sp_core::H256,
				) -> ::subxt::tx::StaticTxPayload<UnrequestPreimage> {
					::subxt::tx::StaticTxPayload::new(
						"Preimage",
						"unrequest_preimage",
						UnrequestPreimage { hash },
						[
							143u8, 225u8, 239u8, 44u8, 237u8, 83u8, 18u8, 105u8, 101u8, 68u8,
							111u8, 116u8, 66u8, 212u8, 63u8, 190u8, 38u8, 32u8, 105u8, 152u8, 69u8,
							177u8, 193u8, 15u8, 60u8, 26u8, 95u8, 130u8, 11u8, 113u8, 187u8, 108u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_preimage::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A preimage has been noted."]
			pub struct Noted {
				pub hash: ::subxt::ext::sp_core::H256,
			}
			impl ::subxt::events::StaticEvent for Noted {
				const PALLET: &'static str = "Preimage";
				const EVENT: &'static str = "Noted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A preimage has been requested."]
			pub struct Requested {
				pub hash: ::subxt::ext::sp_core::H256,
			}
			impl ::subxt::events::StaticEvent for Requested {
				const PALLET: &'static str = "Preimage";
				const EVENT: &'static str = "Requested";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A preimage has ben cleared."]
			pub struct Cleared {
				pub hash: ::subxt::ext::sp_core::H256,
			}
			impl ::subxt::events::StaticEvent for Cleared {
				const PALLET: &'static str = "Preimage";
				const EVENT: &'static str = "Cleared";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The request status of a given hash."]
				pub fn status_for(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::H256>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_preimage::RequestStatus<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Preimage",
						"StatusFor",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							244u8, 6u8, 120u8, 75u8, 164u8, 32u8, 39u8, 15u8, 107u8, 127u8, 19u8,
							242u8, 80u8, 121u8, 18u8, 219u8, 253u8, 174u8, 138u8, 9u8, 76u8, 219u8,
							156u8, 229u8, 78u8, 155u8, 233u8, 162u8, 215u8, 237u8, 23u8, 123u8,
						],
					)
				}
				#[doc = " The request status of a given hash."]
				pub fn status_for_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_preimage::RequestStatus<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Preimage",
						"StatusFor",
						Vec::new(),
						[
							244u8, 6u8, 120u8, 75u8, 164u8, 32u8, 39u8, 15u8, 107u8, 127u8, 19u8,
							242u8, 80u8, 121u8, 18u8, 219u8, 253u8, 174u8, 138u8, 9u8, 76u8, 219u8,
							156u8, 229u8, 78u8, 155u8, 233u8, 162u8, 215u8, 237u8, 23u8, 123u8,
						],
					)
				}
				#[doc = " The preimages stored by this pallet."]
				pub fn preimage_for(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::H256>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Preimage",
						"PreimageFor",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							82u8, 216u8, 233u8, 5u8, 102u8, 206u8, 96u8, 64u8, 133u8, 179u8, 63u8,
							45u8, 53u8, 42u8, 190u8, 95u8, 77u8, 197u8, 60u8, 11u8, 59u8, 231u8,
							190u8, 219u8, 87u8, 149u8, 112u8, 196u8, 33u8, 238u8, 247u8, 117u8,
						],
					)
				}
				#[doc = " The preimages stored by this pallet."]
				pub fn preimage_for_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Preimage",
						"PreimageFor",
						Vec::new(),
						[
							82u8, 216u8, 233u8, 5u8, 102u8, 206u8, 96u8, 64u8, 133u8, 179u8, 63u8,
							45u8, 53u8, 42u8, 190u8, 95u8, 77u8, 197u8, 60u8, 11u8, 59u8, 231u8,
							190u8, 219u8, 87u8, 149u8, 112u8, 196u8, 33u8, 238u8, 247u8, 117u8,
						],
					)
				}
			}
		}
	}
	pub mod bounties {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ProposeBounty {
				#[codec(compact)]
				pub value: ::core::primitive::u128,
				pub description: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ApproveBounty {
				#[codec(compact)]
				pub bounty_id: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ProposeCurator {
				#[codec(compact)]
				pub bounty_id: ::core::primitive::u32,
				pub curator: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
				#[codec(compact)]
				pub fee: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct UnassignCurator {
				#[codec(compact)]
				pub bounty_id: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct AcceptCurator {
				#[codec(compact)]
				pub bounty_id: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct AwardBounty {
				#[codec(compact)]
				pub bounty_id: ::core::primitive::u32,
				pub beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ClaimBounty {
				#[codec(compact)]
				pub bounty_id: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct CloseBounty {
				#[codec(compact)]
				pub bounty_id: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ExtendBountyExpiry {
				#[codec(compact)]
				pub bounty_id: ::core::primitive::u32,
				pub remark: ::std::vec::Vec<::core::primitive::u8>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Propose a new bounty."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as"]
				#[doc = "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,"]
				#[doc = "or slashed when rejected."]
				#[doc = ""]
				#[doc = "- `curator`: The curator account whom will manage this bounty."]
				#[doc = "- `fee`: The curator fee."]
				#[doc = "- `value`: The total payment amount of this bounty, curator fee included."]
				#[doc = "- `description`: The description of this bounty."]
				pub fn propose_bounty(
					&self,
					value: ::core::primitive::u128,
					description: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<ProposeBounty> {
					::subxt::tx::StaticTxPayload::new(
						"Bounties",
						"propose_bounty",
						ProposeBounty { value, description },
						[
							99u8, 160u8, 94u8, 74u8, 105u8, 161u8, 123u8, 239u8, 241u8, 117u8,
							97u8, 99u8, 84u8, 101u8, 87u8, 3u8, 88u8, 175u8, 75u8, 59u8, 114u8,
							87u8, 18u8, 113u8, 126u8, 26u8, 42u8, 104u8, 201u8, 128u8, 102u8,
							219u8,
						],
					)
				}
				#[doc = "Approve a bounty proposal. At a later time, the bounty will be funded and become active"]
				#[doc = "and the original deposit will be returned."]
				#[doc = ""]
				#[doc = "May only be called from `T::ApproveOrigin`."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- O(1)."]
				#[doc = "# </weight>"]
				pub fn approve_bounty(
					&self,
					bounty_id: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<ApproveBounty> {
					::subxt::tx::StaticTxPayload::new(
						"Bounties",
						"approve_bounty",
						ApproveBounty { bounty_id },
						[
							82u8, 228u8, 232u8, 103u8, 198u8, 173u8, 190u8, 148u8, 159u8, 86u8,
							48u8, 4u8, 32u8, 169u8, 1u8, 129u8, 96u8, 145u8, 235u8, 68u8, 48u8,
							34u8, 5u8, 1u8, 76u8, 26u8, 100u8, 228u8, 92u8, 198u8, 183u8, 173u8,
						],
					)
				}
				#[doc = "Assign a curator to a funded bounty."]
				#[doc = ""]
				#[doc = "May only be called from `T::ApproveOrigin`."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- O(1)."]
				#[doc = "# </weight>"]
				pub fn propose_curator(
					&self,
					bounty_id: ::core::primitive::u32,
					curator: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
					fee: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<ProposeCurator> {
					::subxt::tx::StaticTxPayload::new(
						"Bounties",
						"propose_curator",
						ProposeCurator { bounty_id, curator, fee },
						[
							123u8, 148u8, 21u8, 204u8, 216u8, 6u8, 47u8, 83u8, 182u8, 30u8, 171u8,
							48u8, 193u8, 200u8, 197u8, 147u8, 111u8, 88u8, 14u8, 242u8, 66u8,
							175u8, 241u8, 208u8, 95u8, 151u8, 41u8, 46u8, 213u8, 188u8, 65u8,
							196u8,
						],
					)
				}
				#[doc = "Unassign curator from a bounty."]
				#[doc = ""]
				#[doc = "This function can only be called by the `RejectOrigin` a signed origin."]
				#[doc = ""]
				#[doc = "If this function is called by the `RejectOrigin`, we assume that the curator is"]
				#[doc = "malicious or inactive. As a result, we will slash the curator when possible."]
				#[doc = ""]
				#[doc = "If the origin is the curator, we take this as a sign they are unable to do their job and"]
				#[doc = "they willingly give up. We could slash them, but for now we allow them to recover their"]
				#[doc = "deposit and exit without issue. (We may want to change this if it is abused.)"]
				#[doc = ""]
				#[doc = "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows"]
				#[doc = "anyone in the community to call out that a curator is not doing their due diligence, and"]
				#[doc = "we should pick a new curator. In this case the curator should also be slashed."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- O(1)."]
				#[doc = "# </weight>"]
				pub fn unassign_curator(
					&self,
					bounty_id: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<UnassignCurator> {
					::subxt::tx::StaticTxPayload::new(
						"Bounties",
						"unassign_curator",
						UnassignCurator { bounty_id },
						[
							218u8, 241u8, 247u8, 89u8, 95u8, 120u8, 93u8, 18u8, 85u8, 114u8, 158u8,
							254u8, 68u8, 77u8, 230u8, 186u8, 230u8, 201u8, 63u8, 223u8, 28u8,
							173u8, 244u8, 82u8, 113u8, 177u8, 99u8, 27u8, 207u8, 247u8, 207u8,
							213u8,
						],
					)
				}
				#[doc = "Accept the curator role for a bounty."]
				#[doc = "A deposit will be reserved from curator and refund upon successful payout."]
				#[doc = ""]
				#[doc = "May only be called from the curator."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- O(1)."]
				#[doc = "# </weight>"]
				pub fn accept_curator(
					&self,
					bounty_id: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<AcceptCurator> {
					::subxt::tx::StaticTxPayload::new(
						"Bounties",
						"accept_curator",
						AcceptCurator { bounty_id },
						[
							106u8, 96u8, 22u8, 67u8, 52u8, 109u8, 180u8, 225u8, 122u8, 253u8,
							209u8, 214u8, 132u8, 131u8, 247u8, 131u8, 162u8, 51u8, 144u8, 30u8,
							12u8, 126u8, 50u8, 152u8, 229u8, 119u8, 54u8, 116u8, 112u8, 235u8,
							34u8, 166u8,
						],
					)
				}
				#[doc = "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds"]
				#[doc = "after a delay."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be the curator of this bounty."]
				#[doc = ""]
				#[doc = "- `bounty_id`: Bounty ID to award."]
				#[doc = "- `beneficiary`: The beneficiary account whom will receive the payout."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- O(1)."]
				#[doc = "# </weight>"]
				pub fn award_bounty(
					&self,
					bounty_id: ::core::primitive::u32,
					beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
				) -> ::subxt::tx::StaticTxPayload<AwardBounty> {
					::subxt::tx::StaticTxPayload::new(
						"Bounties",
						"award_bounty",
						AwardBounty { bounty_id, beneficiary },
						[
							203u8, 164u8, 214u8, 242u8, 1u8, 11u8, 217u8, 32u8, 189u8, 136u8, 29u8,
							230u8, 88u8, 17u8, 134u8, 189u8, 15u8, 204u8, 223u8, 20u8, 168u8,
							182u8, 129u8, 48u8, 83u8, 25u8, 125u8, 25u8, 209u8, 155u8, 170u8, 68u8,
						],
					)
				}
				#[doc = "Claim the payout from an awarded bounty after payout delay."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be the beneficiary of this bounty."]
				#[doc = ""]
				#[doc = "- `bounty_id`: Bounty ID to claim."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- O(1)."]
				#[doc = "# </weight>"]
				pub fn claim_bounty(
					&self,
					bounty_id: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<ClaimBounty> {
					::subxt::tx::StaticTxPayload::new(
						"Bounties",
						"claim_bounty",
						ClaimBounty { bounty_id },
						[
							102u8, 95u8, 8u8, 89u8, 4u8, 126u8, 189u8, 28u8, 241u8, 16u8, 125u8,
							218u8, 42u8, 92u8, 177u8, 91u8, 8u8, 235u8, 33u8, 48u8, 64u8, 115u8,
							177u8, 95u8, 242u8, 97u8, 181u8, 50u8, 68u8, 37u8, 59u8, 85u8,
						],
					)
				}
				#[doc = "Cancel a proposed or active bounty. All the funds will be sent to treasury and"]
				#[doc = "the curator deposit will be unreserved if possible."]
				#[doc = ""]
				#[doc = "Only `T::RejectOrigin` is able to cancel a bounty."]
				#[doc = ""]
				#[doc = "- `bounty_id`: Bounty ID to cancel."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- O(1)."]
				#[doc = "# </weight>"]
				pub fn close_bounty(
					&self,
					bounty_id: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<CloseBounty> {
					::subxt::tx::StaticTxPayload::new(
						"Bounties",
						"close_bounty",
						CloseBounty { bounty_id },
						[
							64u8, 113u8, 151u8, 228u8, 90u8, 55u8, 251u8, 63u8, 27u8, 211u8, 119u8,
							229u8, 137u8, 137u8, 183u8, 240u8, 241u8, 146u8, 69u8, 169u8, 124u8,
							220u8, 236u8, 111u8, 98u8, 188u8, 100u8, 52u8, 127u8, 245u8, 244u8,
							92u8,
						],
					)
				}
				#[doc = "Extend the expiry time of an active bounty."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be the curator of this bounty."]
				#[doc = ""]
				#[doc = "- `bounty_id`: Bounty ID to extend."]
				#[doc = "- `remark`: additional information."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- O(1)."]
				#[doc = "# </weight>"]
				pub fn extend_bounty_expiry(
					&self,
					bounty_id: ::core::primitive::u32,
					remark: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<ExtendBountyExpiry> {
					::subxt::tx::StaticTxPayload::new(
						"Bounties",
						"extend_bounty_expiry",
						ExtendBountyExpiry { bounty_id, remark },
						[
							97u8, 69u8, 157u8, 39u8, 59u8, 72u8, 79u8, 88u8, 104u8, 119u8, 91u8,
							26u8, 73u8, 216u8, 174u8, 95u8, 254u8, 214u8, 63u8, 138u8, 100u8,
							112u8, 185u8, 81u8, 159u8, 247u8, 221u8, 60u8, 87u8, 40u8, 80u8, 202u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_bounties::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "New bounty proposal."]
			pub struct BountyProposed {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for BountyProposed {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyProposed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A bounty proposal was rejected; funds were slashed."]
			pub struct BountyRejected {
				pub index: ::core::primitive::u32,
				pub bond: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for BountyRejected {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyRejected";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "A bounty proposal is funded and became active."]
			pub struct BountyBecameActive {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for BountyBecameActive {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyBecameActive";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A bounty is awarded to a beneficiary."]
			pub struct BountyAwarded {
				pub index: ::core::primitive::u32,
				pub beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for BountyAwarded {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyAwarded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A bounty is claimed by beneficiary."]
			pub struct BountyClaimed {
				pub index: ::core::primitive::u32,
				pub payout: ::core::primitive::u128,
				pub beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for BountyClaimed {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyClaimed";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "A bounty is cancelled."]
			pub struct BountyCanceled {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for BountyCanceled {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyCanceled";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "A bounty expiry is extended."]
			pub struct BountyExtended {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for BountyExtended {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyExtended";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Number of bounty proposals that have been made."]
				pub fn bounty_count(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Bounties",
						"BountyCount",
						vec![],
						[
							5u8, 188u8, 134u8, 220u8, 64u8, 49u8, 188u8, 98u8, 185u8, 186u8, 230u8,
							65u8, 247u8, 199u8, 28u8, 178u8, 202u8, 193u8, 41u8, 83u8, 115u8,
							253u8, 182u8, 123u8, 92u8, 138u8, 12u8, 31u8, 31u8, 213u8, 23u8, 118u8,
						],
					)
				}
				#[doc = " Bounties that have been made."]
				pub fn bounties(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_bounties::Bounty<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Bounties",
						"Bounties",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							111u8, 149u8, 33u8, 54u8, 172u8, 143u8, 41u8, 231u8, 184u8, 255u8,
							238u8, 206u8, 87u8, 142u8, 84u8, 10u8, 236u8, 141u8, 190u8, 193u8,
							72u8, 170u8, 19u8, 110u8, 135u8, 136u8, 220u8, 11u8, 99u8, 126u8,
							225u8, 208u8,
						],
					)
				}
				#[doc = " Bounties that have been made."]
				pub fn bounties_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_bounties::Bounty<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Bounties",
						"Bounties",
						Vec::new(),
						[
							111u8, 149u8, 33u8, 54u8, 172u8, 143u8, 41u8, 231u8, 184u8, 255u8,
							238u8, 206u8, 87u8, 142u8, 84u8, 10u8, 236u8, 141u8, 190u8, 193u8,
							72u8, 170u8, 19u8, 110u8, 135u8, 136u8, 220u8, 11u8, 99u8, 126u8,
							225u8, 208u8,
						],
					)
				}
				#[doc = " The description of each bounty."]
				pub fn bounty_descriptions(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Bounties",
						"BountyDescriptions",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							252u8, 0u8, 9u8, 225u8, 13u8, 135u8, 7u8, 121u8, 154u8, 155u8, 116u8,
							83u8, 160u8, 37u8, 72u8, 11u8, 72u8, 0u8, 248u8, 73u8, 158u8, 84u8,
							125u8, 221u8, 176u8, 231u8, 100u8, 239u8, 111u8, 22u8, 29u8, 13u8,
						],
					)
				}
				#[doc = " The description of each bounty."]
				pub fn bounty_descriptions_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Bounties",
						"BountyDescriptions",
						Vec::new(),
						[
							252u8, 0u8, 9u8, 225u8, 13u8, 135u8, 7u8, 121u8, 154u8, 155u8, 116u8,
							83u8, 160u8, 37u8, 72u8, 11u8, 72u8, 0u8, 248u8, 73u8, 158u8, 84u8,
							125u8, 221u8, 176u8, 231u8, 100u8, 239u8, 111u8, 22u8, 29u8, 13u8,
						],
					)
				}
				#[doc = " Bounty indices that have been approved but not yet funded."]
				pub fn bounty_approvals(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							::core::primitive::u32,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Bounties",
						"BountyApprovals",
						vec![],
						[
							64u8, 93u8, 54u8, 94u8, 122u8, 9u8, 246u8, 86u8, 234u8, 30u8, 125u8,
							132u8, 49u8, 128u8, 1u8, 219u8, 241u8, 13u8, 217u8, 186u8, 48u8, 21u8,
							5u8, 227u8, 71u8, 157u8, 128u8, 226u8, 214u8, 49u8, 249u8, 183u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The amount held on deposit for placing a bounty proposal."]
				pub fn bounty_deposit_base(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Bounties",
						"BountyDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The delay period for which a bounty beneficiary need to wait before claim the payout."]
				pub fn bounty_deposit_payout_delay(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Bounties",
						"BountyDepositPayoutDelay",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Bounty duration in blocks."]
				pub fn bounty_update_period(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Bounties",
						"BountyUpdatePeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The curator deposit is calculated as a percentage of the curator fee."]
				#[doc = ""]
				#[doc = " This deposit has optional upper and lower bounds with `CuratorDepositMax` and"]
				#[doc = " `CuratorDepositMin`."]
				pub fn curator_deposit_multiplier(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_arithmetic::per_things::Permill,
					>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Bounties",
						"CuratorDepositMultiplier",
						[
							225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8, 192u8, 254u8, 19u8, 87u8,
							80u8, 16u8, 62u8, 42u8, 204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
							177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8, 86u8, 227u8,
						],
					)
				}
				#[doc = " Maximum amount of funds that should be placed in a deposit for making a proposal."]
				pub fn curator_deposit_max(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<
						::core::option::Option<::core::primitive::u128>,
					>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Bounties",
						"CuratorDepositMax",
						[
							84u8, 154u8, 218u8, 83u8, 84u8, 189u8, 32u8, 20u8, 120u8, 194u8, 88u8,
							205u8, 109u8, 216u8, 114u8, 193u8, 120u8, 198u8, 154u8, 237u8, 134u8,
							204u8, 102u8, 247u8, 52u8, 103u8, 231u8, 43u8, 243u8, 122u8, 60u8,
							216u8,
						],
					)
				}
				#[doc = " Minimum amount of funds that should be placed in a deposit for making a proposal."]
				pub fn curator_deposit_min(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<
						::core::option::Option<::core::primitive::u128>,
					>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Bounties",
						"CuratorDepositMin",
						[
							84u8, 154u8, 218u8, 83u8, 84u8, 189u8, 32u8, 20u8, 120u8, 194u8, 88u8,
							205u8, 109u8, 216u8, 114u8, 193u8, 120u8, 198u8, 154u8, 237u8, 134u8,
							204u8, 102u8, 247u8, 52u8, 103u8, 231u8, 43u8, 243u8, 122u8, 60u8,
							216u8,
						],
					)
				}
				#[doc = " Minimum value for a bounty."]
				pub fn bounty_value_minimum(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Bounties",
						"BountyValueMinimum",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount held on deposit per byte within the tip report reason or bounty description."]
				pub fn data_deposit_per_byte(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Bounties",
						"DataDepositPerByte",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Maximum acceptable reason length."]
				#[doc = ""]
				#[doc = " Benchmarks depend on this value, be sure to update weights file when changing this value"]
				pub fn maximum_reason_length(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Bounties",
						"MaximumReasonLength",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod child_bounties {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct AddChildBounty {
				#[codec(compact)]
				pub parent_bounty_id: ::core::primitive::u32,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
				pub description: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ProposeCurator {
				#[codec(compact)]
				pub parent_bounty_id: ::core::primitive::u32,
				#[codec(compact)]
				pub child_bounty_id: ::core::primitive::u32,
				pub curator: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
				#[codec(compact)]
				pub fee: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct AcceptCurator {
				#[codec(compact)]
				pub parent_bounty_id: ::core::primitive::u32,
				#[codec(compact)]
				pub child_bounty_id: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct UnassignCurator {
				#[codec(compact)]
				pub parent_bounty_id: ::core::primitive::u32,
				#[codec(compact)]
				pub child_bounty_id: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct AwardChildBounty {
				#[codec(compact)]
				pub parent_bounty_id: ::core::primitive::u32,
				#[codec(compact)]
				pub child_bounty_id: ::core::primitive::u32,
				pub beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
					::subxt::ext::sp_core::crypto::AccountId32,
					(),
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ClaimChildBounty {
				#[codec(compact)]
				pub parent_bounty_id: ::core::primitive::u32,
				#[codec(compact)]
				pub child_bounty_id: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct CloseChildBounty {
				#[codec(compact)]
				pub parent_bounty_id: ::core::primitive::u32,
				#[codec(compact)]
				pub child_bounty_id: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Add a new child-bounty."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be the curator of parent"]
				#[doc = "bounty and the parent bounty must be in \"active\" state."]
				#[doc = ""]
				#[doc = "Child-bounty gets added successfully & fund gets transferred from"]
				#[doc = "parent bounty to child-bounty account, if parent bounty has enough"]
				#[doc = "funds, else the call fails."]
				#[doc = ""]
				#[doc = "Upper bound to maximum number of active  child bounties that can be"]
				#[doc = "added are managed via runtime trait config"]
				#[doc = "[`Config::MaxActiveChildBountyCount`]."]
				#[doc = ""]
				#[doc = "If the call is success, the status of child-bounty is updated to"]
				#[doc = "\"Added\"."]
				#[doc = ""]
				#[doc = "- `parent_bounty_id`: Index of parent bounty for which child-bounty is being added."]
				#[doc = "- `value`: Value for executing the proposal."]
				#[doc = "- `description`: Text description for the child-bounty."]
				pub fn add_child_bounty(
					&self,
					parent_bounty_id: ::core::primitive::u32,
					value: ::core::primitive::u128,
					description: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<AddChildBounty> {
					::subxt::tx::StaticTxPayload::new(
						"ChildBounties",
						"add_child_bounty",
						AddChildBounty { parent_bounty_id, value, description },
						[
							210u8, 156u8, 242u8, 121u8, 28u8, 214u8, 212u8, 203u8, 46u8, 45u8,
							110u8, 25u8, 33u8, 138u8, 136u8, 71u8, 23u8, 102u8, 203u8, 122u8, 77u8,
							162u8, 112u8, 133u8, 43u8, 73u8, 201u8, 176u8, 102u8, 68u8, 188u8, 8u8,
						],
					)
				}
				#[doc = "Propose curator for funded child-bounty."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be curator of parent bounty."]
				#[doc = ""]
				#[doc = "Parent bounty must be in active state, for this child-bounty call to"]
				#[doc = "work."]
				#[doc = ""]
				#[doc = "Child-bounty must be in \"Added\" state, for processing the call. And"]
				#[doc = "state of child-bounty is moved to \"CuratorProposed\" on successful"]
				#[doc = "call completion."]
				#[doc = ""]
				#[doc = "- `parent_bounty_id`: Index of parent bounty."]
				#[doc = "- `child_bounty_id`: Index of child bounty."]
				#[doc = "- `curator`: Address of child-bounty curator."]
				#[doc = "- `fee`: payment fee to child-bounty curator for execution."]
				pub fn propose_curator(
					&self,
					parent_bounty_id: ::core::primitive::u32,
					child_bounty_id: ::core::primitive::u32,
					curator: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
					fee: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<ProposeCurator> {
					::subxt::tx::StaticTxPayload::new(
						"ChildBounties",
						"propose_curator",
						ProposeCurator { parent_bounty_id, child_bounty_id, curator, fee },
						[
							37u8, 101u8, 96u8, 75u8, 254u8, 212u8, 42u8, 140u8, 72u8, 107u8, 157u8,
							110u8, 147u8, 236u8, 17u8, 138u8, 161u8, 153u8, 119u8, 177u8, 225u8,
							22u8, 83u8, 5u8, 123u8, 38u8, 30u8, 240u8, 134u8, 208u8, 183u8, 247u8,
						],
					)
				}
				#[doc = "Accept the curator role for the child-bounty."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be the curator of this"]
				#[doc = "child-bounty."]
				#[doc = ""]
				#[doc = "A deposit will be reserved from the curator and refund upon"]
				#[doc = "successful payout or cancellation."]
				#[doc = ""]
				#[doc = "Fee for curator is deducted from curator fee of parent bounty."]
				#[doc = ""]
				#[doc = "Parent bounty must be in active state, for this child-bounty call to"]
				#[doc = "work."]
				#[doc = ""]
				#[doc = "Child-bounty must be in \"CuratorProposed\" state, for processing the"]
				#[doc = "call. And state of child-bounty is moved to \"Active\" on successful"]
				#[doc = "call completion."]
				#[doc = ""]
				#[doc = "- `parent_bounty_id`: Index of parent bounty."]
				#[doc = "- `child_bounty_id`: Index of child bounty."]
				pub fn accept_curator(
					&self,
					parent_bounty_id: ::core::primitive::u32,
					child_bounty_id: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<AcceptCurator> {
					::subxt::tx::StaticTxPayload::new(
						"ChildBounties",
						"accept_curator",
						AcceptCurator { parent_bounty_id, child_bounty_id },
						[
							112u8, 175u8, 238u8, 54u8, 132u8, 20u8, 206u8, 59u8, 220u8, 228u8,
							207u8, 222u8, 132u8, 240u8, 188u8, 0u8, 210u8, 225u8, 234u8, 142u8,
							232u8, 53u8, 64u8, 89u8, 220u8, 29u8, 28u8, 123u8, 125u8, 207u8, 10u8,
							52u8,
						],
					)
				}
				#[doc = "Unassign curator from a child-bounty."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call can be either `RejectOrigin`, or"]
				#[doc = "the curator of the parent bounty, or any signed origin."]
				#[doc = ""]
				#[doc = "For the origin other than T::RejectOrigin and the child-bounty"]
				#[doc = "curator, parent bounty must be in active state, for this call to"]
				#[doc = "work. We allow child-bounty curator and T::RejectOrigin to execute"]
				#[doc = "this call irrespective of the parent bounty state."]
				#[doc = ""]
				#[doc = "If this function is called by the `RejectOrigin` or the"]
				#[doc = "parent bounty curator, we assume that the child-bounty curator is"]
				#[doc = "malicious or inactive. As a result, child-bounty curator deposit is"]
				#[doc = "slashed."]
				#[doc = ""]
				#[doc = "If the origin is the child-bounty curator, we take this as a sign"]
				#[doc = "that they are unable to do their job, and are willingly giving up."]
				#[doc = "We could slash the deposit, but for now we allow them to unreserve"]
				#[doc = "their deposit and exit without issue. (We may want to change this if"]
				#[doc = "it is abused.)"]
				#[doc = ""]
				#[doc = "Finally, the origin can be anyone iff the child-bounty curator is"]
				#[doc = "\"inactive\". Expiry update due of parent bounty is used to estimate"]
				#[doc = "inactive state of child-bounty curator."]
				#[doc = ""]
				#[doc = "This allows anyone in the community to call out that a child-bounty"]
				#[doc = "curator is not doing their due diligence, and we should pick a new"]
				#[doc = "one. In this case the child-bounty curator deposit is slashed."]
				#[doc = ""]
				#[doc = "State of child-bounty is moved to Added state on successful call"]
				#[doc = "completion."]
				#[doc = ""]
				#[doc = "- `parent_bounty_id`: Index of parent bounty."]
				#[doc = "- `child_bounty_id`: Index of child bounty."]
				pub fn unassign_curator(
					&self,
					parent_bounty_id: ::core::primitive::u32,
					child_bounty_id: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<UnassignCurator> {
					::subxt::tx::StaticTxPayload::new(
						"ChildBounties",
						"unassign_curator",
						UnassignCurator { parent_bounty_id, child_bounty_id },
						[
							228u8, 189u8, 46u8, 75u8, 121u8, 161u8, 150u8, 87u8, 207u8, 86u8,
							192u8, 50u8, 52u8, 61u8, 49u8, 88u8, 178u8, 182u8, 89u8, 72u8, 203u8,
							45u8, 41u8, 26u8, 149u8, 114u8, 154u8, 169u8, 118u8, 128u8, 13u8,
							211u8,
						],
					)
				}
				#[doc = "Award child-bounty to a beneficiary."]
				#[doc = ""]
				#[doc = "The beneficiary will be able to claim the funds after a delay."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be the parent curator or"]
				#[doc = "curator of this child-bounty."]
				#[doc = ""]
				#[doc = "Parent bounty must be in active state, for this child-bounty call to"]
				#[doc = "work."]
				#[doc = ""]
				#[doc = "Child-bounty must be in active state, for processing the call. And"]
				#[doc = "state of child-bounty is moved to \"PendingPayout\" on successful call"]
				#[doc = "completion."]
				#[doc = ""]
				#[doc = "- `parent_bounty_id`: Index of parent bounty."]
				#[doc = "- `child_bounty_id`: Index of child bounty."]
				#[doc = "- `beneficiary`: Beneficiary account."]
				pub fn award_child_bounty(
					&self,
					parent_bounty_id: ::core::primitive::u32,
					child_bounty_id: ::core::primitive::u32,
					beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
						::subxt::ext::sp_core::crypto::AccountId32,
						(),
					>,
				) -> ::subxt::tx::StaticTxPayload<AwardChildBounty> {
					::subxt::tx::StaticTxPayload::new(
						"ChildBounties",
						"award_child_bounty",
						AwardChildBounty { parent_bounty_id, child_bounty_id, beneficiary },
						[
							231u8, 185u8, 73u8, 232u8, 92u8, 116u8, 204u8, 165u8, 216u8, 194u8,
							151u8, 21u8, 127u8, 239u8, 78u8, 45u8, 27u8, 252u8, 119u8, 23u8, 71u8,
							140u8, 137u8, 209u8, 189u8, 128u8, 126u8, 247u8, 13u8, 42u8, 68u8,
							134u8,
						],
					)
				}
				#[doc = "Claim the payout from an awarded child-bounty after payout delay."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call may be any signed origin."]
				#[doc = ""]
				#[doc = "Call works independent of parent bounty state, No need for parent"]
				#[doc = "bounty to be in active state."]
				#[doc = ""]
				#[doc = "The Beneficiary is paid out with agreed bounty value. Curator fee is"]
				#[doc = "paid & curator deposit is unreserved."]
				#[doc = ""]
				#[doc = "Child-bounty must be in \"PendingPayout\" state, for processing the"]
				#[doc = "call. And instance of child-bounty is removed from the state on"]
				#[doc = "successful call completion."]
				#[doc = ""]
				#[doc = "- `parent_bounty_id`: Index of parent bounty."]
				#[doc = "- `child_bounty_id`: Index of child bounty."]
				pub fn claim_child_bounty(
					&self,
					parent_bounty_id: ::core::primitive::u32,
					child_bounty_id: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<ClaimChildBounty> {
					::subxt::tx::StaticTxPayload::new(
						"ChildBounties",
						"claim_child_bounty",
						ClaimChildBounty { parent_bounty_id, child_bounty_id },
						[
							134u8, 243u8, 151u8, 228u8, 38u8, 174u8, 96u8, 140u8, 104u8, 124u8,
							166u8, 206u8, 126u8, 211u8, 17u8, 100u8, 172u8, 5u8, 234u8, 171u8,
							125u8, 2u8, 191u8, 163u8, 72u8, 29u8, 163u8, 107u8, 65u8, 92u8, 41u8,
							45u8,
						],
					)
				}
				#[doc = "Cancel a proposed or active child-bounty. Child-bounty account funds"]
				#[doc = "are transferred to parent bounty account. The child-bounty curator"]
				#[doc = "deposit may be unreserved if possible."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be either parent curator or"]
				#[doc = "`T::RejectOrigin`."]
				#[doc = ""]
				#[doc = "If the state of child-bounty is `Active`, curator deposit is"]
				#[doc = "unreserved."]
				#[doc = ""]
				#[doc = "If the state of child-bounty is `PendingPayout`, call fails &"]
				#[doc = "returns `PendingPayout` error."]
				#[doc = ""]
				#[doc = "For the origin other than T::RejectOrigin, parent bounty must be in"]
				#[doc = "active state, for this child-bounty call to work. For origin"]
				#[doc = "T::RejectOrigin execution is forced."]
				#[doc = ""]
				#[doc = "Instance of child-bounty is removed from the state on successful"]
				#[doc = "call completion."]
				#[doc = ""]
				#[doc = "- `parent_bounty_id`: Index of parent bounty."]
				#[doc = "- `child_bounty_id`: Index of child bounty."]
				pub fn close_child_bounty(
					&self,
					parent_bounty_id: ::core::primitive::u32,
					child_bounty_id: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<CloseChildBounty> {
					::subxt::tx::StaticTxPayload::new(
						"ChildBounties",
						"close_child_bounty",
						CloseChildBounty { parent_bounty_id, child_bounty_id },
						[
							40u8, 0u8, 235u8, 75u8, 36u8, 196u8, 29u8, 26u8, 30u8, 172u8, 240u8,
							44u8, 129u8, 243u8, 55u8, 211u8, 96u8, 159u8, 72u8, 96u8, 142u8, 68u8,
							41u8, 238u8, 157u8, 167u8, 90u8, 141u8, 213u8, 249u8, 222u8, 22u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_child_bounties::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A child-bounty is added."]
			pub struct Added {
				pub index: ::core::primitive::u32,
				pub child_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Added {
				const PALLET: &'static str = "ChildBounties";
				const EVENT: &'static str = "Added";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A child-bounty is awarded to a beneficiary."]
			pub struct Awarded {
				pub index: ::core::primitive::u32,
				pub child_index: ::core::primitive::u32,
				pub beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Awarded {
				const PALLET: &'static str = "ChildBounties";
				const EVENT: &'static str = "Awarded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A child-bounty is claimed by beneficiary."]
			pub struct Claimed {
				pub index: ::core::primitive::u32,
				pub child_index: ::core::primitive::u32,
				pub payout: ::core::primitive::u128,
				pub beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Claimed {
				const PALLET: &'static str = "ChildBounties";
				const EVENT: &'static str = "Claimed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A child-bounty is cancelled."]
			pub struct Canceled {
				pub index: ::core::primitive::u32,
				pub child_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Canceled {
				const PALLET: &'static str = "ChildBounties";
				const EVENT: &'static str = "Canceled";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Number of total child bounties."]
				pub fn child_bounty_count(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ChildBounties",
						"ChildBountyCount",
						vec![],
						[
							46u8, 10u8, 183u8, 160u8, 98u8, 215u8, 39u8, 253u8, 81u8, 94u8, 114u8,
							147u8, 115u8, 162u8, 33u8, 117u8, 160u8, 214u8, 167u8, 7u8, 109u8,
							143u8, 158u8, 1u8, 200u8, 205u8, 17u8, 93u8, 89u8, 26u8, 30u8, 95u8,
						],
					)
				}
				#[doc = " Number of child bounties per parent bounty."]
				#[doc = " Map of parent bounty index to number of child bounties."]
				pub fn parent_child_bounties(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ChildBounties",
						"ParentChildBounties",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							127u8, 161u8, 181u8, 79u8, 235u8, 196u8, 252u8, 162u8, 39u8, 15u8,
							251u8, 49u8, 125u8, 80u8, 101u8, 24u8, 234u8, 88u8, 212u8, 126u8, 63u8,
							63u8, 19u8, 75u8, 137u8, 125u8, 38u8, 250u8, 77u8, 49u8, 76u8, 188u8,
						],
					)
				}
				#[doc = " Number of child bounties per parent bounty."]
				#[doc = " Map of parent bounty index to number of child bounties."]
				pub fn parent_child_bounties_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ChildBounties",
						"ParentChildBounties",
						Vec::new(),
						[
							127u8, 161u8, 181u8, 79u8, 235u8, 196u8, 252u8, 162u8, 39u8, 15u8,
							251u8, 49u8, 125u8, 80u8, 101u8, 24u8, 234u8, 88u8, 212u8, 126u8, 63u8,
							63u8, 19u8, 75u8, 137u8, 125u8, 38u8, 250u8, 77u8, 49u8, 76u8, 188u8,
						],
					)
				}
				#[doc = " Child bounties that have been added."]
				pub fn child_bounties(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_child_bounties::ChildBounty<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ChildBounties",
						"ChildBounties",
						vec![
							::subxt::storage::address::StorageMapKey::new(
								_0.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
							::subxt::storage::address::StorageMapKey::new(
								_1.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
						],
						[
							66u8, 132u8, 251u8, 223u8, 216u8, 52u8, 162u8, 150u8, 229u8, 239u8,
							219u8, 182u8, 211u8, 228u8, 181u8, 46u8, 243u8, 151u8, 111u8, 235u8,
							105u8, 40u8, 39u8, 10u8, 245u8, 113u8, 78u8, 116u8, 219u8, 186u8,
							165u8, 91u8,
						],
					)
				}
				#[doc = " Child bounties that have been added."]
				pub fn child_bounties_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_child_bounties::ChildBounty<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ChildBounties",
						"ChildBounties",
						Vec::new(),
						[
							66u8, 132u8, 251u8, 223u8, 216u8, 52u8, 162u8, 150u8, 229u8, 239u8,
							219u8, 182u8, 211u8, 228u8, 181u8, 46u8, 243u8, 151u8, 111u8, 235u8,
							105u8, 40u8, 39u8, 10u8, 245u8, 113u8, 78u8, 116u8, 219u8, 186u8,
							165u8, 91u8,
						],
					)
				}
				#[doc = " The description of each child-bounty."]
				pub fn child_bounty_descriptions(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ChildBounties",
						"ChildBountyDescriptions",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							193u8, 200u8, 40u8, 30u8, 14u8, 71u8, 90u8, 42u8, 58u8, 253u8, 225u8,
							158u8, 172u8, 10u8, 45u8, 238u8, 36u8, 144u8, 184u8, 153u8, 11u8,
							157u8, 125u8, 220u8, 175u8, 31u8, 28u8, 93u8, 207u8, 212u8, 141u8,
							74u8,
						],
					)
				}
				#[doc = " The description of each child-bounty."]
				pub fn child_bounty_descriptions_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ChildBounties",
						"ChildBountyDescriptions",
						Vec::new(),
						[
							193u8, 200u8, 40u8, 30u8, 14u8, 71u8, 90u8, 42u8, 58u8, 253u8, 225u8,
							158u8, 172u8, 10u8, 45u8, 238u8, 36u8, 144u8, 184u8, 153u8, 11u8,
							157u8, 125u8, 220u8, 175u8, 31u8, 28u8, 93u8, 207u8, 212u8, 141u8,
							74u8,
						],
					)
				}
				#[doc = " The cumulative child-bounty curator fee for each parent bounty."]
				pub fn children_curator_fees(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ChildBounties",
						"ChildrenCuratorFees",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							174u8, 128u8, 86u8, 179u8, 133u8, 76u8, 98u8, 169u8, 234u8, 166u8,
							249u8, 214u8, 172u8, 171u8, 8u8, 161u8, 105u8, 69u8, 148u8, 151u8,
							35u8, 174u8, 118u8, 139u8, 101u8, 56u8, 85u8, 211u8, 121u8, 168u8, 0u8,
							216u8,
						],
					)
				}
				#[doc = " The cumulative child-bounty curator fee for each parent bounty."]
				pub fn children_curator_fees_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ChildBounties",
						"ChildrenCuratorFees",
						Vec::new(),
						[
							174u8, 128u8, 86u8, 179u8, 133u8, 76u8, 98u8, 169u8, 234u8, 166u8,
							249u8, 214u8, 172u8, 171u8, 8u8, 161u8, 105u8, 69u8, 148u8, 151u8,
							35u8, 174u8, 118u8, 139u8, 101u8, 56u8, 85u8, 211u8, 121u8, 168u8, 0u8,
							216u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Maximum number of child bounties that can be added to a parent bounty."]
				pub fn max_active_child_bounty_count(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"ChildBounties",
						"MaxActiveChildBountyCount",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Minimum value for a child-bounty."]
				pub fn child_bounty_value_minimum(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"ChildBounties",
						"ChildBountyValueMinimum",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
			}
		}
	}
	pub mod tips {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ReportAwesome {
				pub reason: ::std::vec::Vec<::core::primitive::u8>,
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RetractTip {
				pub hash: ::subxt::ext::sp_core::H256,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct TipNew {
				pub reason: ::std::vec::Vec<::core::primitive::u8>,
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				#[codec(compact)]
				pub tip_value: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Tip {
				pub hash: ::subxt::ext::sp_core::H256,
				#[codec(compact)]
				pub tip_value: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct CloseTip {
				pub hash: ::subxt::ext::sp_core::H256,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SlashTip {
				pub hash: ::subxt::ext::sp_core::H256,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Report something `reason` that deserves a tip and claim any eventual the finder's fee."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as"]
				#[doc = "`DataDepositPerByte` for each byte in `reason`."]
				#[doc = ""]
				#[doc = "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be"]
				#[doc = "  a UTF-8-encoded URL."]
				#[doc = "- `who`: The account which should be credited for the tip."]
				#[doc = ""]
				#[doc = "Emits `NewTip` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: `O(R)` where `R` length of `reason`."]
				#[doc = "  - encoding and hashing of 'reason'"]
				#[doc = "- DbReads: `Reasons`, `Tips`"]
				#[doc = "- DbWrites: `Reasons`, `Tips`"]
				#[doc = "# </weight>"]
				pub fn report_awesome(
					&self,
					reason: ::std::vec::Vec<::core::primitive::u8>,
					who: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<ReportAwesome> {
					::subxt::tx::StaticTxPayload::new(
						"Tips",
						"report_awesome",
						ReportAwesome { reason, who },
						[
							43u8, 6u8, 185u8, 209u8, 110u8, 99u8, 94u8, 100u8, 33u8, 5u8, 27u8,
							199u8, 67u8, 255u8, 252u8, 26u8, 104u8, 192u8, 55u8, 122u8, 106u8,
							129u8, 249u8, 181u8, 246u8, 205u8, 213u8, 175u8, 241u8, 59u8, 151u8,
							197u8,
						],
					)
				}
				#[doc = "Retract a prior tip-report from `report_awesome`, and cancel the process of tipping."]
				#[doc = ""]
				#[doc = "If successful, the original deposit will be unreserved."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the tip identified by `hash`"]
				#[doc = "must have been reported by the signing account through `report_awesome` (and not"]
				#[doc = "through `tip_new`)."]
				#[doc = ""]
				#[doc = "- `hash`: The identity of the open tip for which a tip value is declared. This is formed"]
				#[doc = "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID."]
				#[doc = ""]
				#[doc = "Emits `TipRetracted` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: `O(1)`"]
				#[doc = "  - Depends on the length of `T::Hash` which is fixed."]
				#[doc = "- DbReads: `Tips`, `origin account`"]
				#[doc = "- DbWrites: `Reasons`, `Tips`, `origin account`"]
				#[doc = "# </weight>"]
				pub fn retract_tip(
					&self,
					hash: ::subxt::ext::sp_core::H256,
				) -> ::subxt::tx::StaticTxPayload<RetractTip> {
					::subxt::tx::StaticTxPayload::new(
						"Tips",
						"retract_tip",
						RetractTip { hash },
						[
							137u8, 42u8, 229u8, 188u8, 157u8, 195u8, 184u8, 176u8, 64u8, 142u8,
							67u8, 175u8, 185u8, 207u8, 214u8, 71u8, 165u8, 29u8, 137u8, 227u8,
							132u8, 195u8, 255u8, 66u8, 186u8, 57u8, 34u8, 184u8, 187u8, 65u8,
							129u8, 131u8,
						],
					)
				}
				#[doc = "Give a tip for something new; no finder's fee will be taken."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the signing account must be a"]
				#[doc = "member of the `Tippers` set."]
				#[doc = ""]
				#[doc = "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be"]
				#[doc = "  a UTF-8-encoded URL."]
				#[doc = "- `who`: The account which should be credited for the tip."]
				#[doc = "- `tip_value`: The amount of tip that the sender would like to give. The median tip"]
				#[doc = "  value of active tippers will be given to the `who`."]
				#[doc = ""]
				#[doc = "Emits `NewTip` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers."]
				#[doc = "  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound given by"]
				#[doc = "    `ContainsLengthBound`. The actual cost depends on the implementation of"]
				#[doc = "    `T::Tippers`."]
				#[doc = "  - `O(R)`: hashing and encoding of reason of length `R`"]
				#[doc = "- DbReads: `Tippers`, `Reasons`"]
				#[doc = "- DbWrites: `Reasons`, `Tips`"]
				#[doc = "# </weight>"]
				pub fn tip_new(
					&self,
					reason: ::std::vec::Vec<::core::primitive::u8>,
					who: ::subxt::ext::sp_core::crypto::AccountId32,
					tip_value: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<TipNew> {
					::subxt::tx::StaticTxPayload::new(
						"Tips",
						"tip_new",
						TipNew { reason, who, tip_value },
						[
							146u8, 216u8, 159u8, 132u8, 163u8, 180u8, 42u8, 203u8, 181u8, 76u8,
							217u8, 120u8, 75u8, 32u8, 165u8, 41u8, 250u8, 222u8, 204u8, 63u8, 61u8,
							218u8, 161u8, 37u8, 172u8, 10u8, 66u8, 218u8, 14u8, 130u8, 160u8,
							126u8,
						],
					)
				}
				#[doc = "Declare a tip value for an already-open tip."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the signing account must be a"]
				#[doc = "member of the `Tippers` set."]
				#[doc = ""]
				#[doc = "- `hash`: The identity of the open tip for which a tip value is declared. This is formed"]
				#[doc = "  as the hash of the tuple of the hash of the original tip `reason` and the beneficiary"]
				#[doc = "  account ID."]
				#[doc = "- `tip_value`: The amount of tip that the sender would like to give. The median tip"]
				#[doc = "  value of active tippers will be given to the `who`."]
				#[doc = ""]
				#[doc = "Emits `TipClosing` if the threshold of tippers has been reached and the countdown period"]
				#[doc = "has started."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length"]
				#[doc = "  `T`, insert tip and check closing, `T` is charged as upper bound given by"]
				#[doc = "  `ContainsLengthBound`. The actual cost depends on the implementation of `T::Tippers`."]
				#[doc = ""]
				#[doc = "  Actually weight could be lower as it depends on how many tips are in `OpenTip` but it"]
				#[doc = "  is weighted as if almost full i.e of length `T-1`."]
				#[doc = "- DbReads: `Tippers`, `Tips`"]
				#[doc = "- DbWrites: `Tips`"]
				#[doc = "# </weight>"]
				pub fn tip(
					&self,
					hash: ::subxt::ext::sp_core::H256,
					tip_value: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<Tip> {
					::subxt::tx::StaticTxPayload::new(
						"Tips",
						"tip",
						Tip { hash, tip_value },
						[
							133u8, 52u8, 131u8, 14u8, 71u8, 232u8, 254u8, 31u8, 33u8, 206u8, 50u8,
							76u8, 56u8, 167u8, 228u8, 202u8, 195u8, 0u8, 164u8, 107u8, 170u8, 98u8,
							192u8, 37u8, 209u8, 199u8, 130u8, 15u8, 168u8, 63u8, 181u8, 134u8,
						],
					)
				}
				#[doc = "Close and payout a tip."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "The tip identified by `hash` must have finished its countdown period."]
				#[doc = ""]
				#[doc = "- `hash`: The identity of the open tip for which a tip value is declared. This is formed"]
				#[doc = "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length"]
				#[doc = "  `T`. `T` is charged as upper bound given by `ContainsLengthBound`. The actual cost"]
				#[doc = "  depends on the implementation of `T::Tippers`."]
				#[doc = "- DbReads: `Tips`, `Tippers`, `tip finder`"]
				#[doc = "- DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`"]
				#[doc = "# </weight>"]
				pub fn close_tip(
					&self,
					hash: ::subxt::ext::sp_core::H256,
				) -> ::subxt::tx::StaticTxPayload<CloseTip> {
					::subxt::tx::StaticTxPayload::new(
						"Tips",
						"close_tip",
						CloseTip { hash },
						[
							32u8, 53u8, 0u8, 222u8, 45u8, 157u8, 107u8, 174u8, 203u8, 50u8, 81u8,
							230u8, 6u8, 111u8, 79u8, 55u8, 49u8, 151u8, 107u8, 114u8, 81u8, 200u8,
							144u8, 175u8, 29u8, 142u8, 115u8, 184u8, 102u8, 116u8, 156u8, 173u8,
						],
					)
				}
				#[doc = "Remove and slash an already-open tip."]
				#[doc = ""]
				#[doc = "May only be called from `T::RejectOrigin`."]
				#[doc = ""]
				#[doc = "As a result, the finder is slashed and the deposits are lost."]
				#[doc = ""]
				#[doc = "Emits `TipSlashed` if successful."]
				#[doc = ""]
				#[doc = "# <weight>"]
				#[doc = "  `T` is charged as upper bound given by `ContainsLengthBound`."]
				#[doc = "  The actual cost depends on the implementation of `T::Tippers`."]
				#[doc = "# </weight>"]
				pub fn slash_tip(
					&self,
					hash: ::subxt::ext::sp_core::H256,
				) -> ::subxt::tx::StaticTxPayload<SlashTip> {
					::subxt::tx::StaticTxPayload::new(
						"Tips",
						"slash_tip",
						SlashTip { hash },
						[
							222u8, 209u8, 22u8, 47u8, 114u8, 230u8, 81u8, 200u8, 131u8, 0u8, 209u8,
							54u8, 17u8, 200u8, 175u8, 125u8, 100u8, 254u8, 41u8, 178u8, 20u8, 27u8,
							9u8, 184u8, 79u8, 93u8, 208u8, 148u8, 27u8, 190u8, 176u8, 169u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_tips::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A new tip suggestion has been opened."]
			pub struct NewTip {
				pub tip_hash: ::subxt::ext::sp_core::H256,
			}
			impl ::subxt::events::StaticEvent for NewTip {
				const PALLET: &'static str = "Tips";
				const EVENT: &'static str = "NewTip";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A tip suggestion has reached threshold and is closing."]
			pub struct TipClosing {
				pub tip_hash: ::subxt::ext::sp_core::H256,
			}
			impl ::subxt::events::StaticEvent for TipClosing {
				const PALLET: &'static str = "Tips";
				const EVENT: &'static str = "TipClosing";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A tip suggestion has been closed."]
			pub struct TipClosed {
				pub tip_hash: ::subxt::ext::sp_core::H256,
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub payout: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for TipClosed {
				const PALLET: &'static str = "Tips";
				const EVENT: &'static str = "TipClosed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A tip suggestion has been retracted."]
			pub struct TipRetracted {
				pub tip_hash: ::subxt::ext::sp_core::H256,
			}
			impl ::subxt::events::StaticEvent for TipRetracted {
				const PALLET: &'static str = "Tips";
				const EVENT: &'static str = "TipRetracted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A tip suggestion has been slashed."]
			pub struct TipSlashed {
				pub tip_hash: ::subxt::ext::sp_core::H256,
				pub finder: ::subxt::ext::sp_core::crypto::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for TipSlashed {
				const PALLET: &'static str = "Tips";
				const EVENT: &'static str = "TipSlashed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value."]
				#[doc = " This has the insecure enumerable hash function since the key itself is already"]
				#[doc = " guaranteed to be a secure hash."]
				pub fn tips(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::H256>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_tips::OpenTip<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
							::core::primitive::u32,
							::subxt::ext::sp_core::H256,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Tips",
						"Tips",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							241u8, 196u8, 105u8, 248u8, 29u8, 66u8, 86u8, 98u8, 6u8, 159u8, 191u8,
							0u8, 227u8, 232u8, 147u8, 248u8, 173u8, 20u8, 225u8, 12u8, 232u8, 5u8,
							93u8, 78u8, 18u8, 154u8, 130u8, 38u8, 142u8, 36u8, 66u8, 0u8,
						],
					)
				}
				#[doc = " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value."]
				#[doc = " This has the insecure enumerable hash function since the key itself is already"]
				#[doc = " guaranteed to be a secure hash."]
				pub fn tips_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_tips::OpenTip<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
							::core::primitive::u32,
							::subxt::ext::sp_core::H256,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Tips",
						"Tips",
						Vec::new(),
						[
							241u8, 196u8, 105u8, 248u8, 29u8, 66u8, 86u8, 98u8, 6u8, 159u8, 191u8,
							0u8, 227u8, 232u8, 147u8, 248u8, 173u8, 20u8, 225u8, 12u8, 232u8, 5u8,
							93u8, 78u8, 18u8, 154u8, 130u8, 38u8, 142u8, 36u8, 66u8, 0u8,
						],
					)
				}
				#[doc = " Simple preimage lookup from the reason's hash to the original data. Again, has an"]
				#[doc = " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."]
				pub fn reasons(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::H256>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Tips",
						"Reasons",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							202u8, 191u8, 36u8, 162u8, 156u8, 102u8, 115u8, 10u8, 203u8, 35u8,
							201u8, 70u8, 195u8, 151u8, 89u8, 82u8, 202u8, 35u8, 210u8, 176u8, 82u8,
							1u8, 77u8, 94u8, 31u8, 70u8, 252u8, 194u8, 166u8, 91u8, 189u8, 134u8,
						],
					)
				}
				#[doc = " Simple preimage lookup from the reason's hash to the original data. Again, has an"]
				#[doc = " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."]
				pub fn reasons_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u8>>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Tips",
						"Reasons",
						Vec::new(),
						[
							202u8, 191u8, 36u8, 162u8, 156u8, 102u8, 115u8, 10u8, 203u8, 35u8,
							201u8, 70u8, 195u8, 151u8, 89u8, 82u8, 202u8, 35u8, 210u8, 176u8, 82u8,
							1u8, 77u8, 94u8, 31u8, 70u8, 252u8, 194u8, 166u8, 91u8, 189u8, 134u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Maximum acceptable reason length."]
				#[doc = ""]
				#[doc = " Benchmarks depend on this value, be sure to update weights file when changing this value"]
				pub fn maximum_reason_length(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Tips",
						"MaximumReasonLength",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The amount held on deposit per byte within the tip report reason or bounty description."]
				pub fn data_deposit_per_byte(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Tips",
						"DataDepositPerByte",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The period for which a tip remains open after is has achieved threshold tippers."]
				pub fn tip_countdown(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Tips",
						"TipCountdown",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The percent of the final tip which goes to the original reporter of the tip."]
				pub fn tip_finders_fee(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_arithmetic::per_things::Percent,
					>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Tips",
						"TipFindersFee",
						[
							99u8, 121u8, 176u8, 172u8, 235u8, 159u8, 116u8, 114u8, 179u8, 91u8,
							129u8, 117u8, 204u8, 135u8, 53u8, 7u8, 151u8, 26u8, 124u8, 151u8,
							202u8, 171u8, 171u8, 207u8, 183u8, 177u8, 24u8, 53u8, 109u8, 185u8,
							71u8, 183u8,
						],
					)
				}
				#[doc = " The amount held on deposit for placing a tip report."]
				pub fn tip_report_deposit_base(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Tips",
						"TipReportDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
			}
		}
	}
	pub mod election_provider_multi_phase {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SubmitUnsigned {
				pub raw_solution: ::std::boxed::Box<
					runtime_types::pallet_election_provider_multi_phase::RawSolution<
						runtime_types::kusama_runtime::NposCompactSolution24,
					>,
				>,
				pub witness:
					runtime_types::pallet_election_provider_multi_phase::SolutionOrSnapshotSize,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetMinimumUntrustedScore {
				pub maybe_next_score:
					::core::option::Option<runtime_types::sp_npos_elections::ElectionScore>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetEmergencyElectionResult {
				pub supports: ::std::vec::Vec<(
					::subxt::ext::sp_core::crypto::AccountId32,
					runtime_types::sp_npos_elections::Support<
						::subxt::ext::sp_core::crypto::AccountId32,
					>,
				)>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Submit {
				pub raw_solution: ::std::boxed::Box<
					runtime_types::pallet_election_provider_multi_phase::RawSolution<
						runtime_types::kusama_runtime::NposCompactSolution24,
					>,
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct GovernanceFallback {
				pub maybe_max_voters: ::core::option::Option<::core::primitive::u32>,
				pub maybe_max_targets: ::core::option::Option<::core::primitive::u32>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Submit a solution for the unsigned phase."]
				#[doc = ""]
				#[doc = "The dispatch origin fo this call must be __none__."]
				#[doc = ""]
				#[doc = "This submission is checked on the fly. Moreover, this unsigned solution is only"]
				#[doc = "validated when submitted to the pool from the **local** node. Effectively, this means"]
				#[doc = "that only active validators can submit this transaction when authoring a block (similar"]
				#[doc = "to an inherent)."]
				#[doc = ""]
				#[doc = "To prevent any incorrect solution (and thus wasted time/weight), this transaction will"]
				#[doc = "panic if the solution submitted by the validator is invalid in any way, effectively"]
				#[doc = "putting their authoring reward at risk."]
				#[doc = ""]
				#[doc = "No deposit or reward is associated with this submission."]
				pub fn submit_unsigned(
					&self,
					raw_solution: runtime_types::pallet_election_provider_multi_phase::RawSolution<
						runtime_types::kusama_runtime::NposCompactSolution24,
					>,
					witness : runtime_types :: pallet_election_provider_multi_phase :: SolutionOrSnapshotSize,
				) -> ::subxt::tx::StaticTxPayload<SubmitUnsigned> {
					::subxt::tx::StaticTxPayload::new(
						"ElectionProviderMultiPhase",
						"submit_unsigned",
						SubmitUnsigned {
							raw_solution: ::std::boxed::Box::new(raw_solution),
							witness,
						},
						[
							219u8, 168u8, 154u8, 229u8, 123u8, 173u8, 109u8, 246u8, 70u8, 92u8,
							43u8, 202u8, 63u8, 14u8, 234u8, 16u8, 66u8, 116u8, 213u8, 192u8, 124u8,
							86u8, 175u8, 177u8, 200u8, 156u8, 86u8, 75u8, 137u8, 111u8, 1u8, 147u8,
						],
					)
				}
				#[doc = "Set a new value for `MinimumUntrustedScore`."]
				#[doc = ""]
				#[doc = "Dispatch origin must be aligned with `T::ForceOrigin`."]
				#[doc = ""]
				#[doc = "This check can be turned off by setting the value to `None`."]
				pub fn set_minimum_untrusted_score(
					&self,
					maybe_next_score: ::core::option::Option<
						runtime_types::sp_npos_elections::ElectionScore,
					>,
				) -> ::subxt::tx::StaticTxPayload<SetMinimumUntrustedScore> {
					::subxt::tx::StaticTxPayload::new(
						"ElectionProviderMultiPhase",
						"set_minimum_untrusted_score",
						SetMinimumUntrustedScore { maybe_next_score },
						[
							63u8, 101u8, 105u8, 146u8, 133u8, 162u8, 149u8, 112u8, 150u8, 219u8,
							183u8, 213u8, 234u8, 211u8, 144u8, 74u8, 106u8, 15u8, 62u8, 196u8,
							247u8, 49u8, 20u8, 48u8, 3u8, 105u8, 85u8, 46u8, 76u8, 4u8, 67u8, 81u8,
						],
					)
				}
				#[doc = "Set a solution in the queue, to be handed out to the client of this pallet in the next"]
				#[doc = "call to `ElectionProvider::elect`."]
				#[doc = ""]
				#[doc = "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`."]
				#[doc = ""]
				#[doc = "The solution is not checked for any feasibility and is assumed to be trustworthy, as any"]
				#[doc = "feasibility check itself can in principle cause the election process to fail (due to"]
				#[doc = "memory/weight constrains)."]
				pub fn set_emergency_election_result(
					&self,
					supports: ::std::vec::Vec<(
						::subxt::ext::sp_core::crypto::AccountId32,
						runtime_types::sp_npos_elections::Support<
							::subxt::ext::sp_core::crypto::AccountId32,
						>,
					)>,
				) -> ::subxt::tx::StaticTxPayload<SetEmergencyElectionResult> {
					::subxt::tx::StaticTxPayload::new(
						"ElectionProviderMultiPhase",
						"set_emergency_election_result",
						SetEmergencyElectionResult { supports },
						[
							115u8, 255u8, 205u8, 58u8, 153u8, 1u8, 246u8, 8u8, 225u8, 36u8, 66u8,
							144u8, 250u8, 145u8, 70u8, 76u8, 54u8, 63u8, 251u8, 51u8, 214u8, 204u8,
							55u8, 112u8, 46u8, 228u8, 255u8, 250u8, 151u8, 5u8, 44u8, 133u8,
						],
					)
				}
				#[doc = "Submit a solution for the signed phase."]
				#[doc = ""]
				#[doc = "The dispatch origin fo this call must be __signed__."]
				#[doc = ""]
				#[doc = "The solution is potentially queued, based on the claimed score and processed at the end"]
				#[doc = "of the signed phase."]
				#[doc = ""]
				#[doc = "A deposit is reserved and recorded for the solution. Based on the outcome, the solution"]
				#[doc = "might be rewarded, slashed, or get all or a part of the deposit back."]
				pub fn submit(
					&self,
					raw_solution: runtime_types::pallet_election_provider_multi_phase::RawSolution<
						runtime_types::kusama_runtime::NposCompactSolution24,
					>,
				) -> ::subxt::tx::StaticTxPayload<Submit> {
					::subxt::tx::StaticTxPayload::new(
						"ElectionProviderMultiPhase",
						"submit",
						Submit { raw_solution: ::std::boxed::Box::new(raw_solution) },
						[
							188u8, 170u8, 122u8, 64u8, 230u8, 18u8, 186u8, 163u8, 223u8, 113u8,
							114u8, 101u8, 200u8, 0u8, 16u8, 138u8, 141u8, 159u8, 86u8, 83u8, 193u8,
							9u8, 143u8, 162u8, 127u8, 6u8, 125u8, 17u8, 74u8, 224u8, 99u8, 127u8,
						],
					)
				}
				#[doc = "Trigger the governance fallback."]
				#[doc = ""]
				#[doc = "This can only be called when [`Phase::Emergency`] is enabled, as an alternative to"]
				#[doc = "calling [`Call::set_emergency_election_result`]."]
				pub fn governance_fallback(
					&self,
					maybe_max_voters: ::core::option::Option<::core::primitive::u32>,
					maybe_max_targets: ::core::option::Option<::core::primitive::u32>,
				) -> ::subxt::tx::StaticTxPayload<GovernanceFallback> {
					::subxt::tx::StaticTxPayload::new(
						"ElectionProviderMultiPhase",
						"governance_fallback",
						GovernanceFallback { maybe_max_voters, maybe_max_targets },
						[
							206u8, 247u8, 76u8, 85u8, 7u8, 24u8, 231u8, 226u8, 192u8, 143u8, 43u8,
							67u8, 91u8, 202u8, 88u8, 176u8, 130u8, 1u8, 83u8, 229u8, 227u8, 200u8,
							179u8, 4u8, 113u8, 60u8, 99u8, 190u8, 53u8, 226u8, 142u8, 182u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_election_provider_multi_phase::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A solution was stored with the given compute."]
			#[doc = ""]
			#[doc = "If the solution is signed, this means that it hasn't yet been processed. If the"]
			#[doc = "solution is unsigned, this means that it has also been processed."]
			#[doc = ""]
			#[doc = "The `bool` is `true` when a previous solution was ejected to make room for this one."]
			pub struct SolutionStored {
				pub election_compute:
					runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
				pub prev_ejected: ::core::primitive::bool,
			}
			impl ::subxt::events::StaticEvent for SolutionStored {
				const PALLET: &'static str = "ElectionProviderMultiPhase";
				const EVENT: &'static str = "SolutionStored";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The election has been finalized, with `Some` of the given computation, or else if the"]
			#[doc = "election failed, `None`."]
			pub struct ElectionFinalized {
				pub election_compute: ::core::option::Option<
					runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
				>,
			}
			impl ::subxt::events::StaticEvent for ElectionFinalized {
				const PALLET: &'static str = "ElectionProviderMultiPhase";
				const EVENT: &'static str = "ElectionFinalized";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An account has been rewarded for their signed submission being finalized."]
			pub struct Rewarded {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
				pub value: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Rewarded {
				const PALLET: &'static str = "ElectionProviderMultiPhase";
				const EVENT: &'static str = "Rewarded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An account has been slashed for submitting an invalid signed submission."]
			pub struct Slashed {
				pub account: ::subxt::ext::sp_core::crypto::AccountId32,
				pub value: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Slashed {
				const PALLET: &'static str = "ElectionProviderMultiPhase";
				const EVENT: &'static str = "Slashed";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "The signed phase of the given round has started."]
			pub struct SignedPhaseStarted {
				pub round: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for SignedPhaseStarted {
				const PALLET: &'static str = "ElectionProviderMultiPhase";
				const EVENT: &'static str = "SignedPhaseStarted";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "The unsigned phase of the given round has started."]
			pub struct UnsignedPhaseStarted {
				pub round: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for UnsignedPhaseStarted {
				const PALLET: &'static str = "ElectionProviderMultiPhase";
				const EVENT: &'static str = "UnsignedPhaseStarted";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Internal counter for the number of rounds."]
				#[doc = ""]
				#[doc = " This is useful for de-duplication of transactions submitted to the pool, and general"]
				#[doc = " diagnostics of the pallet."]
				#[doc = ""]
				#[doc = " This is merely incremented once per every time that an upstream `elect` is called."]
				pub fn round(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ElectionProviderMultiPhase",
						"Round",
						vec![],
						[
							16u8, 49u8, 176u8, 52u8, 202u8, 111u8, 120u8, 8u8, 217u8, 96u8, 35u8,
							14u8, 233u8, 130u8, 47u8, 98u8, 34u8, 44u8, 166u8, 188u8, 199u8, 210u8,
							21u8, 19u8, 70u8, 96u8, 139u8, 8u8, 53u8, 82u8, 165u8, 239u8,
						],
					)
				}
				#[doc = " Current phase."]
				pub fn current_phase(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_election_provider_multi_phase::Phase<
							::core::primitive::u32,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ElectionProviderMultiPhase",
						"CurrentPhase",
						vec![],
						[
							236u8, 101u8, 8u8, 52u8, 68u8, 240u8, 74u8, 159u8, 181u8, 53u8, 153u8,
							101u8, 228u8, 81u8, 96u8, 161u8, 34u8, 67u8, 35u8, 28u8, 121u8, 44u8,
							229u8, 45u8, 196u8, 87u8, 73u8, 125u8, 216u8, 245u8, 255u8, 15u8,
						],
					)
				}
				#[doc = " Current best solution, signed or unsigned, queued to be returned upon `elect`."]
				pub fn queued_solution(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_election_provider_multi_phase::ReadySolution<
							::subxt::ext::sp_core::crypto::AccountId32,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ElectionProviderMultiPhase",
						"QueuedSolution",
						vec![],
						[
							149u8, 246u8, 152u8, 57u8, 54u8, 217u8, 14u8, 124u8, 125u8, 202u8,
							242u8, 149u8, 147u8, 201u8, 168u8, 99u8, 249u8, 17u8, 163u8, 184u8,
							254u8, 115u8, 100u8, 108u8, 28u8, 14u8, 139u8, 215u8, 26u8, 93u8,
							215u8, 251u8,
						],
					)
				}
				#[doc = " Snapshot data of the round."]
				#[doc = ""]
				#[doc = " This is created at the beginning of the signed phase and cleared upon calling `elect`."]
				pub fn snapshot(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_election_provider_multi_phase::RoundSnapshot,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ElectionProviderMultiPhase",
						"Snapshot",
						vec![],
						[
							239u8, 56u8, 191u8, 77u8, 150u8, 224u8, 248u8, 88u8, 132u8, 224u8,
							164u8, 83u8, 253u8, 36u8, 46u8, 156u8, 72u8, 152u8, 36u8, 206u8, 72u8,
							27u8, 226u8, 87u8, 146u8, 220u8, 93u8, 178u8, 26u8, 115u8, 232u8, 71u8,
						],
					)
				}
				#[doc = " Desired number of targets to elect for this round."]
				#[doc = ""]
				#[doc = " Only exists when [`Snapshot`] is present."]
				pub fn desired_targets(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ElectionProviderMultiPhase",
						"DesiredTargets",
						vec![],
						[
							16u8, 247u8, 4u8, 181u8, 93u8, 79u8, 12u8, 212u8, 146u8, 167u8, 80u8,
							58u8, 118u8, 52u8, 68u8, 87u8, 90u8, 140u8, 31u8, 210u8, 2u8, 116u8,
							220u8, 231u8, 115u8, 112u8, 118u8, 118u8, 68u8, 34u8, 151u8, 165u8,
						],
					)
				}
				#[doc = " The metadata of the [`RoundSnapshot`]"]
				#[doc = ""]
				#[doc = " Only exists when [`Snapshot`] is present."]
				pub fn snapshot_metadata(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_election_provider_multi_phase::SolutionOrSnapshotSize,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ElectionProviderMultiPhase",
						"SnapshotMetadata",
						vec![],
						[
							135u8, 122u8, 60u8, 75u8, 194u8, 240u8, 187u8, 96u8, 240u8, 203u8,
							192u8, 22u8, 117u8, 148u8, 118u8, 24u8, 240u8, 213u8, 94u8, 22u8,
							194u8, 47u8, 181u8, 245u8, 77u8, 149u8, 11u8, 251u8, 117u8, 220u8,
							205u8, 78u8,
						],
					)
				}
				#[doc = " The next index to be assigned to an incoming signed submission."]
				#[doc = ""]
				#[doc = " Every accepted submission is assigned a unique index; that index is bound to that particular"]
				#[doc = " submission for the duration of the election. On election finalization, the next index is"]
				#[doc = " reset to 0."]
				#[doc = ""]
				#[doc = " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its"]
				#[doc = " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,"]
				#[doc = " because iteration is slow. Instead, we store the value here."]
				pub fn signed_submission_next_index(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ElectionProviderMultiPhase",
						"SignedSubmissionNextIndex",
						vec![],
						[
							242u8, 11u8, 157u8, 105u8, 96u8, 7u8, 31u8, 20u8, 51u8, 141u8, 182u8,
							180u8, 13u8, 172u8, 155u8, 59u8, 42u8, 238u8, 115u8, 8u8, 6u8, 137u8,
							45u8, 2u8, 123u8, 187u8, 53u8, 215u8, 19u8, 129u8, 54u8, 22u8,
						],
					)
				}
				#[doc = " A sorted, bounded set of `(score, index)`, where each `index` points to a value in"]
				#[doc = " `SignedSubmissions`."]
				#[doc = ""]
				#[doc = " We never need to process more than a single signed submission at a time. Signed submissions"]
				#[doc = " can be quite large, so we're willing to pay the cost of multiple database accesses to access"]
				#[doc = " them one at a time instead of reading and decoding all of them at once."]
				pub fn signed_submission_indices(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
							runtime_types::sp_npos_elections::ElectionScore,
							::core::primitive::u32,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ElectionProviderMultiPhase",
						"SignedSubmissionIndices",
						vec![],
						[
							121u8, 119u8, 26u8, 183u8, 167u8, 33u8, 230u8, 159u8, 230u8, 171u8,
							8u8, 52u8, 178u8, 214u8, 245u8, 148u8, 202u8, 6u8, 7u8, 50u8, 84u8,
							174u8, 253u8, 131u8, 235u8, 136u8, 40u8, 83u8, 2u8, 64u8, 9u8, 83u8,
						],
					)
				}
				#[doc = " Unchecked, signed solutions."]
				#[doc = ""]
				#[doc = " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while"]
				#[doc = " allowing us to keep only a single one in memory at a time."]
				#[doc = ""]
				#[doc = " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or"]
				#[doc = " affect; we shouldn't need a cryptographically secure hasher."]				pub fn signed_submissions_map (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_election_provider_multi_phase :: signed :: SignedSubmission < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 , runtime_types :: kusama_runtime :: NposCompactSolution24 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
					::subxt::storage::address::StaticStorageAddress::new(
						"ElectionProviderMultiPhase",
						"SignedSubmissionsMap",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							55u8, 36u8, 106u8, 128u8, 99u8, 33u8, 8u8, 233u8, 211u8, 54u8, 231u8,
							98u8, 18u8, 90u8, 179u8, 169u8, 126u8, 145u8, 171u8, 52u8, 131u8,
							118u8, 207u8, 136u8, 210u8, 36u8, 173u8, 163u8, 79u8, 109u8, 216u8,
							40u8,
						],
					)
				}
				#[doc = " Unchecked, signed solutions."]
				#[doc = ""]
				#[doc = " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while"]
				#[doc = " allowing us to keep only a single one in memory at a time."]
				#[doc = ""]
				#[doc = " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or"]
				#[doc = " affect; we shouldn't need a cryptographically secure hasher."]				pub fn signed_submissions_map_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_election_provider_multi_phase :: signed :: SignedSubmission < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 , runtime_types :: kusama_runtime :: NposCompactSolution24 > > , () , () , :: subxt :: storage :: address :: Yes >{
					::subxt::storage::address::StaticStorageAddress::new(
						"ElectionProviderMultiPhase",
						"SignedSubmissionsMap",
						Vec::new(),
						[
							55u8, 36u8, 106u8, 128u8, 99u8, 33u8, 8u8, 233u8, 211u8, 54u8, 231u8,
							98u8, 18u8, 90u8, 179u8, 169u8, 126u8, 145u8, 171u8, 52u8, 131u8,
							118u8, 207u8, 136u8, 210u8, 36u8, 173u8, 163u8, 79u8, 109u8, 216u8,
							40u8,
						],
					)
				}
				#[doc = " The minimum score that each 'untrusted' solution must attain in order to be considered"]
				#[doc = " feasible."]
				#[doc = ""]
				#[doc = " Can be set via `set_minimum_untrusted_score`."]
				pub fn minimum_untrusted_score(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_npos_elections::ElectionScore,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ElectionProviderMultiPhase",
						"MinimumUntrustedScore",
						vec![],
						[
							77u8, 235u8, 181u8, 45u8, 230u8, 12u8, 0u8, 179u8, 152u8, 38u8, 74u8,
							199u8, 47u8, 84u8, 85u8, 55u8, 171u8, 226u8, 217u8, 125u8, 17u8, 194u8,
							95u8, 157u8, 73u8, 245u8, 75u8, 130u8, 248u8, 7u8, 53u8, 226u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Duration of the unsigned phase."]
				pub fn unsigned_phase(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"ElectionProviderMultiPhase",
						"UnsignedPhase",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Duration of the signed phase."]
				pub fn signed_phase(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"ElectionProviderMultiPhase",
						"SignedPhase",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The minimum amount of improvement to the solution score that defines a solution as"]
				#[doc = " \"better\" in the Signed phase."]
				pub fn better_signed_threshold(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_arithmetic::per_things::Perbill,
					>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"ElectionProviderMultiPhase",
						"BetterSignedThreshold",
						[
							225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8, 192u8, 254u8, 19u8, 87u8,
							80u8, 16u8, 62u8, 42u8, 204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
							177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8, 86u8, 227u8,
						],
					)
				}
				#[doc = " The minimum amount of improvement to the solution score that defines a solution as"]
				#[doc = " \"better\" in the Unsigned phase."]
				pub fn better_unsigned_threshold(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_arithmetic::per_things::Perbill,
					>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"ElectionProviderMultiPhase",
						"BetterUnsignedThreshold",
						[
							225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8, 192u8, 254u8, 19u8, 87u8,
							80u8, 16u8, 62u8, 42u8, 204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
							177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8, 86u8, 227u8,
						],
					)
				}
				#[doc = " The repeat threshold of the offchain worker."]
				#[doc = ""]
				#[doc = " For example, if it is 5, that means that at least 5 blocks will elapse between attempts"]
				#[doc = " to submit the worker's solution."]
				pub fn offchain_repeat(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"ElectionProviderMultiPhase",
						"OffchainRepeat",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The priority of the unsigned transaction submitted in the unsigned-phase"]
				pub fn miner_tx_priority(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"ElectionProviderMultiPhase",
						"MinerTxPriority",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
				#[doc = " Maximum number of signed submissions that can be queued."]
				#[doc = ""]
				#[doc = " It is best to avoid adjusting this during an election, as it impacts downstream data"]
				#[doc = " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you"]
				#[doc = " update this value during an election, you _must_ ensure that"]
				#[doc = " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,"]
				#[doc = " attempts to submit new solutions may cause a runtime panic."]
				pub fn signed_max_submissions(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"ElectionProviderMultiPhase",
						"SignedMaxSubmissions",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Maximum weight of a signed solution."]
				#[doc = ""]
				#[doc = " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of"]
				#[doc = " this pallet), then [`MinerConfig::solution_weight`] is used to compare against"]
				#[doc = " this value."]
				pub fn signed_max_weight(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"ElectionProviderMultiPhase",
						"SignedMaxWeight",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
				#[doc = " The maximum amount of unchecked solutions to refund the call fee for."]
				pub fn signed_max_refunds(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"ElectionProviderMultiPhase",
						"SignedMaxRefunds",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Base reward for a signed solution"]
				pub fn signed_reward_base(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"ElectionProviderMultiPhase",
						"SignedRewardBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Base deposit for a signed solution."]
				pub fn signed_deposit_base(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"ElectionProviderMultiPhase",
						"SignedDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Per-byte deposit for a signed solution."]
				pub fn signed_deposit_byte(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"ElectionProviderMultiPhase",
						"SignedDepositByte",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Per-weight deposit for a signed solution."]
				pub fn signed_deposit_weight(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"ElectionProviderMultiPhase",
						"SignedDepositWeight",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The maximum number of electing voters to put in the snapshot. At the moment, snapshots"]
				#[doc = " are only over a single block, but once multi-block elections are introduced they will"]
				#[doc = " take place over multiple blocks."]
				pub fn max_electing_voters(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"ElectionProviderMultiPhase",
						"MaxElectingVoters",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of electable targets to put in the snapshot."]
				pub fn max_electable_targets(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u16>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"ElectionProviderMultiPhase",
						"MaxElectableTargets",
						[
							116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
							41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
							90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
						],
					)
				}
			}
		}
	}
	pub mod gilt {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct PlaceBid {
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
				pub duration: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RetractBid {
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
				pub duration: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetTarget {
				#[codec(compact)]
				pub target: runtime_types::sp_arithmetic::per_things::Perquintill,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Thaw {
				#[codec(compact)]
				pub index: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Place a bid for a gilt to be issued."]
				#[doc = ""]
				#[doc = "Origin must be Signed, and account must have at least `amount` in free balance."]
				#[doc = ""]
				#[doc = "- `amount`: The amount of the bid; these funds will be reserved. If the bid is"]
				#[doc = "successfully elevated into an issued gilt, then these funds will continue to be"]
				#[doc = "reserved until the gilt expires. Must be at least `MinFreeze`."]
				#[doc = "- `duration`: The number of periods for which the funds will be locked if the gilt is"]
				#[doc = "issued. It will expire only after this period has elapsed after the point of issuance."]
				#[doc = "Must be greater than 1 and no more than `QueueCount`."]
				#[doc = ""]
				#[doc = "Complexities:"]
				#[doc = "- `Queues[duration].len()` (just take max)."]
				pub fn place_bid(
					&self,
					amount: ::core::primitive::u128,
					duration: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<PlaceBid> {
					::subxt::tx::StaticTxPayload::new(
						"Gilt",
						"place_bid",
						PlaceBid { amount, duration },
						[
							197u8, 16u8, 24u8, 59u8, 72u8, 162u8, 72u8, 124u8, 149u8, 28u8, 208u8,
							47u8, 208u8, 0u8, 110u8, 122u8, 32u8, 225u8, 29u8, 21u8, 144u8, 75u8,
							138u8, 188u8, 213u8, 188u8, 34u8, 231u8, 52u8, 191u8, 210u8, 158u8,
						],
					)
				}
				#[doc = "Retract a previously placed bid."]
				#[doc = ""]
				#[doc = "Origin must be Signed, and the account should have previously issued a still-active bid"]
				#[doc = "of `amount` for `duration`."]
				#[doc = ""]
				#[doc = "- `amount`: The amount of the previous bid."]
				#[doc = "- `duration`: The duration of the previous bid."]
				pub fn retract_bid(
					&self,
					amount: ::core::primitive::u128,
					duration: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<RetractBid> {
					::subxt::tx::StaticTxPayload::new(
						"Gilt",
						"retract_bid",
						RetractBid { amount, duration },
						[
							139u8, 141u8, 178u8, 24u8, 250u8, 206u8, 70u8, 51u8, 249u8, 82u8,
							172u8, 68u8, 157u8, 50u8, 110u8, 233u8, 163u8, 46u8, 204u8, 54u8,
							154u8, 20u8, 18u8, 205u8, 137u8, 95u8, 187u8, 74u8, 250u8, 161u8,
							220u8, 22u8,
						],
					)
				}
				#[doc = "Set target proportion of gilt-funds."]
				#[doc = ""]
				#[doc = "Origin must be `AdminOrigin`."]
				#[doc = ""]
				#[doc = "- `target`: The target proportion of effective issued funds that should be under gilts"]
				#[doc = "at any one time."]
				pub fn set_target(
					&self,
					target: runtime_types::sp_arithmetic::per_things::Perquintill,
				) -> ::subxt::tx::StaticTxPayload<SetTarget> {
					::subxt::tx::StaticTxPayload::new(
						"Gilt",
						"set_target",
						SetTarget { target },
						[
							198u8, 122u8, 110u8, 138u8, 98u8, 219u8, 5u8, 242u8, 19u8, 38u8, 226u8,
							47u8, 151u8, 89u8, 246u8, 63u8, 88u8, 165u8, 251u8, 48u8, 249u8, 64u8,
							147u8, 86u8, 19u8, 35u8, 163u8, 37u8, 83u8, 126u8, 65u8, 199u8,
						],
					)
				}
				#[doc = "Remove an active but expired gilt. Reserved funds under gilt are freed and balance is"]
				#[doc = "adjusted to ensure that the funds grow or shrink to maintain the equivalent proportion"]
				#[doc = "of effective total issued funds."]
				#[doc = ""]
				#[doc = "Origin must be Signed and the account must be the owner of the gilt of the given index."]
				#[doc = ""]
				#[doc = "- `index`: The index of the gilt to be thawed."]
				pub fn thaw(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<Thaw> {
					::subxt::tx::StaticTxPayload::new(
						"Gilt",
						"thaw",
						Thaw { index },
						[
							137u8, 21u8, 206u8, 3u8, 17u8, 81u8, 235u8, 38u8, 174u8, 129u8, 150u8,
							41u8, 161u8, 202u8, 92u8, 4u8, 196u8, 36u8, 64u8, 251u8, 24u8, 231u8,
							8u8, 100u8, 222u8, 148u8, 116u8, 27u8, 255u8, 72u8, 9u8, 200u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_gilt::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A bid was successfully placed."]
			pub struct BidPlaced {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
				pub duration: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for BidPlaced {
				const PALLET: &'static str = "Gilt";
				const EVENT: &'static str = "BidPlaced";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A bid was successfully removed (before being accepted as a gilt)."]
			pub struct BidRetracted {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
				pub duration: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for BidRetracted {
				const PALLET: &'static str = "Gilt";
				const EVENT: &'static str = "BidRetracted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A bid was accepted as a gilt. The balance may not be released until expiry."]
			pub struct GiltIssued {
				pub index: ::core::primitive::u32,
				pub expiry: ::core::primitive::u32,
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for GiltIssued {
				const PALLET: &'static str = "Gilt";
				const EVENT: &'static str = "GiltIssued";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An expired gilt has been thawed."]
			pub struct GiltThawed {
				pub index: ::core::primitive::u32,
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub original_amount: ::core::primitive::u128,
				pub additional_amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for GiltThawed {
				const PALLET: &'static str = "Gilt";
				const EVENT: &'static str = "GiltThawed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The totals of items and balances within each queue. Saves a lot of storage reads in the"]
				#[doc = " case of sparsely packed queues."]
				#[doc = ""]
				#[doc = " The vector is indexed by duration in `Period`s, offset by one, so information on the queue"]
				#[doc = " whose duration is one `Period` would be storage `0`."]
				pub fn queue_totals(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<(
							::core::primitive::u32,
							::core::primitive::u128,
						)>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Gilt",
						"QueueTotals",
						vec![],
						[
							242u8, 45u8, 21u8, 164u8, 112u8, 11u8, 73u8, 198u8, 234u8, 222u8,
							218u8, 32u8, 250u8, 129u8, 28u8, 114u8, 83u8, 200u8, 132u8, 28u8, 34u8,
							14u8, 84u8, 175u8, 13u8, 172u8, 91u8, 146u8, 236u8, 194u8, 254u8, 73u8,
						],
					)
				}
				#[doc = " The queues of bids ready to become gilts. Indexed by duration (in `Period`s)."]
				pub fn queues(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							runtime_types::pallet_gilt::pallet::GiltBid<
								::core::primitive::u128,
								::subxt::ext::sp_core::crypto::AccountId32,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Gilt",
						"Queues",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Blake2_128Concat,
						)],
						[
							11u8, 50u8, 58u8, 232u8, 240u8, 243u8, 90u8, 103u8, 252u8, 238u8, 15u8,
							75u8, 189u8, 241u8, 231u8, 50u8, 194u8, 134u8, 162u8, 220u8, 97u8,
							217u8, 215u8, 135u8, 138u8, 189u8, 167u8, 15u8, 162u8, 247u8, 6u8,
							74u8,
						],
					)
				}
				#[doc = " The queues of bids ready to become gilts. Indexed by duration (in `Period`s)."]
				pub fn queues_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							runtime_types::pallet_gilt::pallet::GiltBid<
								::core::primitive::u128,
								::subxt::ext::sp_core::crypto::AccountId32,
							>,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Gilt",
						"Queues",
						Vec::new(),
						[
							11u8, 50u8, 58u8, 232u8, 240u8, 243u8, 90u8, 103u8, 252u8, 238u8, 15u8,
							75u8, 189u8, 241u8, 231u8, 50u8, 194u8, 134u8, 162u8, 220u8, 97u8,
							217u8, 215u8, 135u8, 138u8, 189u8, 167u8, 15u8, 162u8, 247u8, 6u8,
							74u8,
						],
					)
				}
				#[doc = " Information relating to the gilts currently active."]
				pub fn active_total(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_gilt::pallet::ActiveGiltsTotal<
							::core::primitive::u128,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Gilt",
						"ActiveTotal",
						vec![],
						[
							124u8, 20u8, 47u8, 161u8, 189u8, 34u8, 35u8, 178u8, 41u8, 27u8, 205u8,
							204u8, 210u8, 216u8, 142u8, 152u8, 132u8, 254u8, 183u8, 23u8, 220u8,
							87u8, 110u8, 54u8, 230u8, 243u8, 119u8, 43u8, 133u8, 22u8, 14u8, 56u8,
						],
					)
				}
				#[doc = " The currently active gilts, indexed according to the order of creation."]
				pub fn active(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_gilt::pallet::ActiveGilt<
							::core::primitive::u128,
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Gilt",
						"Active",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Blake2_128Concat,
						)],
						[
							142u8, 254u8, 225u8, 202u8, 110u8, 103u8, 3u8, 14u8, 243u8, 200u8,
							100u8, 95u8, 66u8, 239u8, 107u8, 240u8, 184u8, 75u8, 54u8, 25u8, 65u8,
							215u8, 244u8, 84u8, 218u8, 52u8, 135u8, 236u8, 119u8, 11u8, 214u8,
							237u8,
						],
					)
				}
				#[doc = " The currently active gilts, indexed according to the order of creation."]
				pub fn active_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_gilt::pallet::ActiveGilt<
							::core::primitive::u128,
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u32,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Gilt",
						"Active",
						Vec::new(),
						[
							142u8, 254u8, 225u8, 202u8, 110u8, 103u8, 3u8, 14u8, 243u8, 200u8,
							100u8, 95u8, 66u8, 239u8, 107u8, 240u8, 184u8, 75u8, 54u8, 25u8, 65u8,
							215u8, 244u8, 84u8, 218u8, 52u8, 135u8, 236u8, 119u8, 11u8, 214u8,
							237u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Number of duration queues in total. This sets the maximum duration supported, which is"]
				#[doc = " this value multiplied by `Period`."]
				pub fn queue_count(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Gilt",
						"QueueCount",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Maximum number of items that may be in each duration queue."]
				pub fn max_queue_len(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Gilt",
						"MaxQueueLen",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Portion of the queue which is free from ordering and just a FIFO."]
				#[doc = ""]
				#[doc = " Must be no greater than `MaxQueueLen`."]
				pub fn fifo_queue_len(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Gilt",
						"FifoQueueLen",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The base period for the duration queues. This is the common multiple across all"]
				#[doc = " supported freezing durations that can be bid upon."]
				pub fn period(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Gilt",
						"Period",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The minimum amount of funds that may be offered to freeze for a gilt. Note that this"]
				#[doc = " does not actually limit the amount which may be frozen in a gilt since gilts may be"]
				#[doc = " split up in order to satisfy the desired amount of funds under gilts."]
				#[doc = ""]
				#[doc = " It should be at least big enough to ensure that there is no possible storage spam attack"]
				#[doc = " or queue-filling attack."]
				pub fn min_freeze(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Gilt",
						"MinFreeze",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The number of blocks between consecutive attempts to issue more gilts in an effort to"]
				#[doc = " get to the target amount to be frozen."]
				#[doc = ""]
				#[doc = " A larger value results in fewer storage hits each block, but a slower period to get to"]
				#[doc = " the target."]
				pub fn intake_period(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Gilt",
						"IntakePeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum amount of bids that can be turned into issued gilts each block. A larger"]
				#[doc = " value here means less of the block available for transactions should there be a glut of"]
				#[doc = " bids to make into gilts to reach the target."]
				pub fn max_intake_bids(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Gilt",
						"MaxIntakeBids",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod voter_list {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Rebag {
				pub dislocated: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct PutInFrontOf {
				pub lighter: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Declare that some `dislocated` account has, through rewards or penalties, sufficiently"]
				#[doc = "changed its score that it should properly fall into a different bag than its current"]
				#[doc = "one."]
				#[doc = ""]
				#[doc = "Anyone can call this function about any potentially dislocated account."]
				#[doc = ""]
				#[doc = "Will always update the stored score of `dislocated` to the correct score, based on"]
				#[doc = "`ScoreProvider`."]
				#[doc = ""]
				#[doc = "If `dislocated` does not exists, it returns an error."]
				pub fn rebag(
					&self,
					dislocated: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<Rebag> {
					::subxt::tx::StaticTxPayload::new(
						"VoterList",
						"rebag",
						Rebag { dislocated },
						[
							8u8, 182u8, 221u8, 221u8, 242u8, 48u8, 178u8, 182u8, 236u8, 54u8,
							188u8, 107u8, 32u8, 24u8, 90u8, 76u8, 28u8, 67u8, 8u8, 231u8, 6u8,
							162u8, 169u8, 77u8, 246u8, 88u8, 156u8, 189u8, 248u8, 19u8, 235u8,
							236u8,
						],
					)
				}
				#[doc = "Move the caller's Id directly in front of `lighter`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and can only be called by the Id of"]
				#[doc = "the account going in front of `lighter`."]
				#[doc = ""]
				#[doc = "Only works if"]
				#[doc = "- both nodes are within the same bag,"]
				#[doc = "- and `origin` has a greater `Score` than `lighter`."]
				pub fn put_in_front_of(
					&self,
					lighter: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<PutInFrontOf> {
					::subxt::tx::StaticTxPayload::new(
						"VoterList",
						"put_in_front_of",
						PutInFrontOf { lighter },
						[
							247u8, 154u8, 37u8, 142u8, 28u8, 130u8, 53u8, 223u8, 255u8, 154u8,
							21u8, 149u8, 244u8, 21u8, 105u8, 77u8, 189u8, 74u8, 182u8, 160u8, 30u8,
							157u8, 133u8, 5u8, 167u8, 158u8, 131u8, 244u8, 130u8, 172u8, 146u8,
							167u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_bags_list::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Moved an account from one bag to another."]
			pub struct Rebagged {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub from: ::core::primitive::u64,
				pub to: ::core::primitive::u64,
			}
			impl ::subxt::events::StaticEvent for Rebagged {
				const PALLET: &'static str = "VoterList";
				const EVENT: &'static str = "Rebagged";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Updated the score of some account to the given amount."]
			pub struct ScoreUpdated {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub new_score: ::core::primitive::u64,
			}
			impl ::subxt::events::StaticEvent for ScoreUpdated {
				const PALLET: &'static str = "VoterList";
				const EVENT: &'static str = "ScoreUpdated";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " A single node, within some bag."]
				#[doc = ""]
				#[doc = " Nodes store links forward and back within their respective bags."]
				pub fn list_nodes(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_bags_list::list::Node,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"VoterList",
						"ListNodes",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							176u8, 186u8, 93u8, 51u8, 100u8, 184u8, 240u8, 29u8, 70u8, 3u8, 117u8,
							47u8, 23u8, 66u8, 231u8, 234u8, 53u8, 8u8, 234u8, 175u8, 181u8, 8u8,
							161u8, 154u8, 48u8, 178u8, 147u8, 227u8, 122u8, 115u8, 57u8, 97u8,
						],
					)
				}
				#[doc = " A single node, within some bag."]
				#[doc = ""]
				#[doc = " Nodes store links forward and back within their respective bags."]
				pub fn list_nodes_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_bags_list::list::Node,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"VoterList",
						"ListNodes",
						Vec::new(),
						[
							176u8, 186u8, 93u8, 51u8, 100u8, 184u8, 240u8, 29u8, 70u8, 3u8, 117u8,
							47u8, 23u8, 66u8, 231u8, 234u8, 53u8, 8u8, 234u8, 175u8, 181u8, 8u8,
							161u8, 154u8, 48u8, 178u8, 147u8, 227u8, 122u8, 115u8, 57u8, 97u8,
						],
					)
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_list_nodes(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"VoterList",
						"CounterForListNodes",
						vec![],
						[
							156u8, 168u8, 97u8, 33u8, 84u8, 117u8, 220u8, 89u8, 62u8, 182u8, 24u8,
							88u8, 231u8, 244u8, 41u8, 19u8, 210u8, 131u8, 87u8, 0u8, 241u8, 230u8,
							160u8, 142u8, 128u8, 153u8, 83u8, 36u8, 88u8, 247u8, 70u8, 130u8,
						],
					)
				}
				#[doc = " A bag stored in storage."]
				#[doc = ""]
				#[doc = " Stores a `Bag` struct, which stores head and tail pointers to itself."]
				pub fn list_bags(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u64>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::pallet_bags_list::list::Bag>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"VoterList",
						"ListBags",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							38u8, 86u8, 63u8, 92u8, 85u8, 59u8, 225u8, 244u8, 14u8, 155u8, 76u8,
							249u8, 153u8, 140u8, 179u8, 7u8, 96u8, 170u8, 236u8, 179u8, 4u8, 18u8,
							232u8, 146u8, 216u8, 51u8, 135u8, 116u8, 196u8, 117u8, 143u8, 153u8,
						],
					)
				}
				#[doc = " A bag stored in storage."]
				#[doc = ""]
				#[doc = " Stores a `Bag` struct, which stores head and tail pointers to itself."]
				pub fn list_bags_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::pallet_bags_list::list::Bag>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"VoterList",
						"ListBags",
						Vec::new(),
						[
							38u8, 86u8, 63u8, 92u8, 85u8, 59u8, 225u8, 244u8, 14u8, 155u8, 76u8,
							249u8, 153u8, 140u8, 179u8, 7u8, 96u8, 170u8, 236u8, 179u8, 4u8, 18u8,
							232u8, 146u8, 216u8, 51u8, 135u8, 116u8, 196u8, 117u8, 143u8, 153u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The list of thresholds separating the various bags."]
				#[doc = ""]
				#[doc = " Ids are separated into unsorted bags according to their score. This specifies the"]
				#[doc = " thresholds separating the bags. An id's bag is the largest bag for which the id's score"]
				#[doc = " is less than or equal to its upper threshold."]
				#[doc = ""]
				#[doc = " When ids are iterated, higher bags are iterated completely before lower bags. This means"]
				#[doc = " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower"]
				#[doc = " score, but peer ids within a particular bag are sorted in insertion order."]
				#[doc = ""]
				#[doc = " # Expressing the constant"]
				#[doc = ""]
				#[doc = " This constant must be sorted in strictly increasing order. Duplicate items are not"]
				#[doc = " permitted."]
				#[doc = ""]
				#[doc = " There is an implied upper limit of `Score::MAX`; that value does not need to be"]
				#[doc = " specified within the bag. For any two threshold lists, if one ends with"]
				#[doc = " `Score::MAX`, the other one does not, and they are otherwise equal, the two"]
				#[doc = " lists will behave identically."]
				#[doc = ""]
				#[doc = " # Calculation"]
				#[doc = ""]
				#[doc = " It is recommended to generate the set of thresholds in a geometric series, such that"]
				#[doc = " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *"]
				#[doc = " constant_ratio).max(threshold[k] + 1)` for all `k`."]
				#[doc = ""]
				#[doc = " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation."]
				#[doc = ""]
				#[doc = " # Examples"]
				#[doc = ""]
				#[doc = " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and"]
				#[doc = "   iteration is strictly in insertion order."]
				#[doc = " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to"]
				#[doc = "   the procedure given above, then the constant ratio is equal to 2."]
				#[doc = " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to"]
				#[doc = "   the procedure given above, then the constant ratio is approximately equal to 1.248."]
				#[doc = " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall"]
				#[doc = "   into bag 0, an id with score 2 will fall into bag 1, etc."]
				#[doc = ""]
				#[doc = " # Migration"]
				#[doc = ""]
				#[doc = " In the event that this list ever changes, a copy of the old bags list must be retained."]
				#[doc = " With that `List::migrate` can be called, which will perform the appropriate migration."]
				pub fn bag_thresholds(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u64>>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"VoterList",
						"BagThresholds",
						[
							103u8, 102u8, 255u8, 165u8, 124u8, 54u8, 5u8, 172u8, 112u8, 234u8,
							25u8, 175u8, 178u8, 19u8, 251u8, 73u8, 91u8, 192u8, 227u8, 81u8, 249u8,
							45u8, 126u8, 116u8, 7u8, 37u8, 9u8, 200u8, 167u8, 182u8, 12u8, 131u8,
						],
					)
				}
			}
		}
	}
	pub mod nomination_pools {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Join {
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
				pub pool_id: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct BondExtra {
				pub extra:
					runtime_types::pallet_nomination_pools::BondExtra<::core::primitive::u128>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ClaimPayout;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Unbond {
				pub member_account: ::subxt::ext::sp_core::crypto::AccountId32,
				#[codec(compact)]
				pub unbonding_points: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct PoolWithdrawUnbonded {
				pub pool_id: ::core::primitive::u32,
				pub num_slashing_spans: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct WithdrawUnbonded {
				pub member_account: ::subxt::ext::sp_core::crypto::AccountId32,
				pub num_slashing_spans: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Create {
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
				pub root: ::subxt::ext::sp_core::crypto::AccountId32,
				pub nominator: ::subxt::ext::sp_core::crypto::AccountId32,
				pub state_toggler: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Nominate {
				pub pool_id: ::core::primitive::u32,
				pub validators: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetState {
				pub pool_id: ::core::primitive::u32,
				pub state: runtime_types::pallet_nomination_pools::PoolState,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetMetadata {
				pub pool_id: ::core::primitive::u32,
				pub metadata: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetConfigs {
				pub min_join_bond:
					runtime_types::pallet_nomination_pools::ConfigOp<::core::primitive::u128>,
				pub min_create_bond:
					runtime_types::pallet_nomination_pools::ConfigOp<::core::primitive::u128>,
				pub max_pools:
					runtime_types::pallet_nomination_pools::ConfigOp<::core::primitive::u32>,
				pub max_members:
					runtime_types::pallet_nomination_pools::ConfigOp<::core::primitive::u32>,
				pub max_members_per_pool:
					runtime_types::pallet_nomination_pools::ConfigOp<::core::primitive::u32>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct UpdateRoles {
				pub pool_id: ::core::primitive::u32,
				pub new_root: runtime_types::pallet_nomination_pools::ConfigOp<
					::subxt::ext::sp_core::crypto::AccountId32,
				>,
				pub new_nominator: runtime_types::pallet_nomination_pools::ConfigOp<
					::subxt::ext::sp_core::crypto::AccountId32,
				>,
				pub new_state_toggler: runtime_types::pallet_nomination_pools::ConfigOp<
					::subxt::ext::sp_core::crypto::AccountId32,
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct Chill {
				pub pool_id: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Stake funds with a pool. The amount to bond is transferred from the member to the"]
				#[doc = "pools account and immediately increases the pools bond."]
				#[doc = ""]
				#[doc = "# Note"]
				#[doc = ""]
				#[doc = "* An account can only be a member of a single pool."]
				#[doc = "* An account cannot join the same pool multiple times."]
				#[doc = "* This call will *not* dust the member account, so the member must have at least"]
				#[doc = "  `existential deposit + amount` in their account."]
				#[doc = "* Only a pool with [`PoolState::Open`] can be joined"]
				pub fn join(
					&self,
					amount: ::core::primitive::u128,
					pool_id: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<Join> {
					::subxt::tx::StaticTxPayload::new(
						"NominationPools",
						"join",
						Join { amount, pool_id },
						[
							205u8, 66u8, 42u8, 72u8, 146u8, 148u8, 119u8, 162u8, 101u8, 183u8,
							46u8, 176u8, 221u8, 204u8, 197u8, 20u8, 75u8, 226u8, 29u8, 118u8,
							208u8, 60u8, 192u8, 247u8, 222u8, 100u8, 69u8, 80u8, 172u8, 13u8, 69u8,
							250u8,
						],
					)
				}
				#[doc = "Bond `extra` more funds from `origin` into the pool to which they already belong."]
				#[doc = ""]
				#[doc = "Additional funds can come from either the free balance of the account, of from the"]
				#[doc = "accumulated rewards, see [`BondExtra`]."]
				#[doc = ""]
				#[doc = "Bonding extra funds implies an automatic payout of all pending rewards as well."]
				pub fn bond_extra(
					&self,
					extra: runtime_types::pallet_nomination_pools::BondExtra<
						::core::primitive::u128,
					>,
				) -> ::subxt::tx::StaticTxPayload<BondExtra> {
					::subxt::tx::StaticTxPayload::new(
						"NominationPools",
						"bond_extra",
						BondExtra { extra },
						[
							50u8, 72u8, 181u8, 216u8, 249u8, 27u8, 250u8, 177u8, 253u8, 22u8,
							240u8, 100u8, 184u8, 202u8, 197u8, 34u8, 21u8, 188u8, 248u8, 191u8,
							11u8, 10u8, 236u8, 161u8, 168u8, 37u8, 38u8, 238u8, 61u8, 183u8, 86u8,
							55u8,
						],
					)
				}
				#[doc = "A bonded member can use this to claim their payout based on the rewards that the pool"]
				#[doc = "has accumulated since their last claimed payout (OR since joining if this is there first"]
				#[doc = "time claiming rewards). The payout will be transferred to the member's account."]
				#[doc = ""]
				#[doc = "The member will earn rewards pro rata based on the members stake vs the sum of the"]
				#[doc = "members in the pools stake. Rewards do not \"expire\"."]
				pub fn claim_payout(&self) -> ::subxt::tx::StaticTxPayload<ClaimPayout> {
					::subxt::tx::StaticTxPayload::new(
						"NominationPools",
						"claim_payout",
						ClaimPayout {},
						[
							128u8, 58u8, 138u8, 55u8, 64u8, 16u8, 129u8, 25u8, 211u8, 229u8, 193u8,
							115u8, 47u8, 45u8, 155u8, 221u8, 218u8, 1u8, 222u8, 5u8, 236u8, 32u8,
							88u8, 0u8, 198u8, 72u8, 196u8, 181u8, 104u8, 16u8, 212u8, 29u8,
						],
					)
				}
				#[doc = "Unbond up to `unbonding_points` of the `member_account`'s funds from the pool. It"]
				#[doc = "implicitly collects the rewards one last time, since not doing so would mean some"]
				#[doc = "rewards would be forfeited."]
				#[doc = ""]
				#[doc = "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any"]
				#[doc = "account)."]
				#[doc = ""]
				#[doc = "# Conditions for a permissionless dispatch."]
				#[doc = ""]
				#[doc = "* The pool is blocked and the caller is either the root or state-toggler. This is"]
				#[doc = "  refereed to as a kick."]
				#[doc = "* The pool is destroying and the member is not the depositor."]
				#[doc = "* The pool is destroying, the member is the depositor and no other members are in the"]
				#[doc = "  pool."]
				#[doc = ""]
				#[doc = "## Conditions for permissioned dispatch (i.e. the caller is also the"]
				#[doc = "`member_account`):"]
				#[doc = ""]
				#[doc = "* The caller is not the depositor."]
				#[doc = "* The caller is the depositor, the pool is destroying and no other members are in the"]
				#[doc = "  pool."]
				#[doc = ""]
				#[doc = "# Note"]
				#[doc = ""]
				#[doc = "If there are too many unlocking chunks to unbond with the pool account,"]
				#[doc = "[`Call::pool_withdraw_unbonded`] can be called to try and minimize unlocking chunks. If"]
				#[doc = "there are too many unlocking chunks, the result of this call will likely be the"]
				#[doc = "`NoMoreChunks` error from the staking system."]
				pub fn unbond(
					&self,
					member_account: ::subxt::ext::sp_core::crypto::AccountId32,
					unbonding_points: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<Unbond> {
					::subxt::tx::StaticTxPayload::new(
						"NominationPools",
						"unbond",
						Unbond { member_account, unbonding_points },
						[
							59u8, 250u8, 74u8, 2u8, 210u8, 41u8, 108u8, 239u8, 55u8, 4u8, 232u8,
							77u8, 115u8, 224u8, 60u8, 216u8, 107u8, 47u8, 3u8, 178u8, 245u8, 113u8,
							67u8, 227u8, 199u8, 241u8, 223u8, 123u8, 97u8, 79u8, 245u8, 239u8,
						],
					)
				}
				#[doc = "Call `withdraw_unbonded` for the pools account. This call can be made by any account."]
				#[doc = ""]
				#[doc = "This is useful if their are too many unlocking chunks to call `unbond`, and some"]
				#[doc = "can be cleared by withdrawing. In the case there are too many unlocking chunks, the user"]
				#[doc = "would probably see an error like `NoMoreChunks` emitted from the staking system when"]
				#[doc = "they attempt to unbond."]
				pub fn pool_withdraw_unbonded(
					&self,
					pool_id: ::core::primitive::u32,
					num_slashing_spans: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<PoolWithdrawUnbonded> {
					::subxt::tx::StaticTxPayload::new(
						"NominationPools",
						"pool_withdraw_unbonded",
						PoolWithdrawUnbonded { pool_id, num_slashing_spans },
						[
							152u8, 245u8, 131u8, 247u8, 106u8, 214u8, 154u8, 8u8, 7u8, 210u8,
							149u8, 218u8, 118u8, 46u8, 242u8, 182u8, 191u8, 119u8, 28u8, 199u8,
							36u8, 49u8, 219u8, 123u8, 58u8, 203u8, 211u8, 226u8, 217u8, 36u8, 56u8,
							0u8,
						],
					)
				}
				#[doc = "Withdraw unbonded funds from `member_account`. If no bonded funds can be unbonded, an"]
				#[doc = "error is returned."]
				#[doc = ""]
				#[doc = "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any"]
				#[doc = "account)."]
				#[doc = ""]
				#[doc = "# Conditions for a permissionless dispatch"]
				#[doc = ""]
				#[doc = "* The pool is in destroy mode and the target is not the depositor."]
				#[doc = "* The target is the depositor and they are the only member in the sub pools."]
				#[doc = "* The pool is blocked and the caller is either the root or state-toggler."]
				#[doc = ""]
				#[doc = "# Conditions for permissioned dispatch"]
				#[doc = ""]
				#[doc = "* The caller is the target and they are not the depositor."]
				#[doc = ""]
				#[doc = "# Note"]
				#[doc = ""]
				#[doc = "If the target is the depositor, the pool will be destroyed."]
				pub fn withdraw_unbonded(
					&self,
					member_account: ::subxt::ext::sp_core::crypto::AccountId32,
					num_slashing_spans: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<WithdrawUnbonded> {
					::subxt::tx::StaticTxPayload::new(
						"NominationPools",
						"withdraw_unbonded",
						WithdrawUnbonded { member_account, num_slashing_spans },
						[
							123u8, 29u8, 174u8, 20u8, 225u8, 121u8, 34u8, 168u8, 62u8, 199u8,
							115u8, 154u8, 36u8, 12u8, 228u8, 181u8, 179u8, 25u8, 141u8, 8u8, 189u8,
							146u8, 117u8, 178u8, 211u8, 236u8, 194u8, 154u8, 35u8, 51u8, 158u8,
							255u8,
						],
					)
				}
				#[doc = "Create a new delegation pool."]
				#[doc = ""]
				#[doc = "# Arguments"]
				#[doc = ""]
				#[doc = "* `amount` - The amount of funds to delegate to the pool. This also acts of a sort of"]
				#[doc = "  deposit since the pools creator cannot fully unbond funds until the pool is being"]
				#[doc = "  destroyed."]
				#[doc = "* `index` - A disambiguation index for creating the account. Likely only useful when"]
				#[doc = "  creating multiple pools in the same extrinsic."]
				#[doc = "* `root` - The account to set as [`PoolRoles::root`]."]
				#[doc = "* `nominator` - The account to set as the [`PoolRoles::nominator`]."]
				#[doc = "* `state_toggler` - The account to set as the [`PoolRoles::state_toggler`]."]
				#[doc = ""]
				#[doc = "# Note"]
				#[doc = ""]
				#[doc = "In addition to `amount`, the caller will transfer the existential deposit; so the caller"]
				#[doc = "needs at have at least `amount + existential_deposit` transferrable."]
				pub fn create(
					&self,
					amount: ::core::primitive::u128,
					root: ::subxt::ext::sp_core::crypto::AccountId32,
					nominator: ::subxt::ext::sp_core::crypto::AccountId32,
					state_toggler: ::subxt::ext::sp_core::crypto::AccountId32,
				) -> ::subxt::tx::StaticTxPayload<Create> {
					::subxt::tx::StaticTxPayload::new(
						"NominationPools",
						"create",
						Create { amount, root, nominator, state_toggler },
						[
							82u8, 231u8, 186u8, 244u8, 193u8, 132u8, 21u8, 23u8, 49u8, 163u8,
							151u8, 181u8, 77u8, 181u8, 191u8, 170u8, 175u8, 62u8, 253u8, 2u8,
							162u8, 229u8, 78u8, 147u8, 79u8, 12u8, 215u8, 9u8, 100u8, 27u8, 95u8,
							242u8,
						],
					)
				}
				#[doc = "Nominate on behalf of the pool."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be signed by the pool nominator or the pool"]
				#[doc = "root role."]
				#[doc = ""]
				#[doc = "This directly forward the call to the staking pallet, on behalf of the pool bonded"]
				#[doc = "account."]
				pub fn nominate(
					&self,
					pool_id: ::core::primitive::u32,
					validators: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::tx::StaticTxPayload<Nominate> {
					::subxt::tx::StaticTxPayload::new(
						"NominationPools",
						"nominate",
						Nominate { pool_id, validators },
						[
							10u8, 235u8, 64u8, 157u8, 36u8, 249u8, 186u8, 27u8, 79u8, 172u8, 25u8,
							3u8, 203u8, 19u8, 192u8, 182u8, 36u8, 103u8, 13u8, 20u8, 89u8, 140u8,
							159u8, 4u8, 132u8, 242u8, 192u8, 146u8, 55u8, 251u8, 216u8, 255u8,
						],
					)
				}
				#[doc = "Set a new state for the pool."]
				#[doc = ""]
				#[doc = "If a pool is already in the `Destroying` state, then under no condition can its state"]
				#[doc = "change again."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be either:"]
				#[doc = ""]
				#[doc = "1. signed by the state toggler, or the root role of the pool,"]
				#[doc = "2. if the pool conditions to be open are NOT met (as described by `ok_to_be_open`), and"]
				#[doc = "   then the state of the pool can be permissionlessly changed to `Destroying`."]
				pub fn set_state(
					&self,
					pool_id: ::core::primitive::u32,
					state: runtime_types::pallet_nomination_pools::PoolState,
				) -> ::subxt::tx::StaticTxPayload<SetState> {
					::subxt::tx::StaticTxPayload::new(
						"NominationPools",
						"set_state",
						SetState { pool_id, state },
						[
							104u8, 40u8, 213u8, 88u8, 159u8, 115u8, 35u8, 249u8, 78u8, 180u8, 99u8,
							1u8, 225u8, 218u8, 192u8, 151u8, 25u8, 194u8, 192u8, 187u8, 39u8,
							170u8, 212u8, 125u8, 75u8, 250u8, 248u8, 175u8, 159u8, 161u8, 151u8,
							162u8,
						],
					)
				}
				#[doc = "Set a new metadata for the pool."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be signed by the state toggler, or the root role"]
				#[doc = "of the pool."]
				pub fn set_metadata(
					&self,
					pool_id: ::core::primitive::u32,
					metadata: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<SetMetadata> {
					::subxt::tx::StaticTxPayload::new(
						"NominationPools",
						"set_metadata",
						SetMetadata { pool_id, metadata },
						[
							156u8, 81u8, 170u8, 161u8, 34u8, 100u8, 183u8, 174u8, 5u8, 81u8, 31u8,
							76u8, 12u8, 42u8, 77u8, 1u8, 6u8, 26u8, 168u8, 7u8, 8u8, 115u8, 158u8,
							151u8, 30u8, 211u8, 52u8, 177u8, 234u8, 87u8, 125u8, 127u8,
						],
					)
				}
				#[doc = "Update configurations for the nomination pools. The origin for this call must be"]
				#[doc = "Root."]
				#[doc = ""]
				#[doc = "# Arguments"]
				#[doc = ""]
				#[doc = "* `min_join_bond` - Set [`MinJoinBond`]."]
				#[doc = "* `min_create_bond` - Set [`MinCreateBond`]."]
				#[doc = "* `max_pools` - Set [`MaxPools`]."]
				#[doc = "* `max_members` - Set [`MaxPoolMembers`]."]
				#[doc = "* `max_members_per_pool` - Set [`MaxPoolMembersPerPool`]."]
				pub fn set_configs(
					&self,
					min_join_bond: runtime_types::pallet_nomination_pools::ConfigOp<
						::core::primitive::u128,
					>,
					min_create_bond: runtime_types::pallet_nomination_pools::ConfigOp<
						::core::primitive::u128,
					>,
					max_pools: runtime_types::pallet_nomination_pools::ConfigOp<
						::core::primitive::u32,
					>,
					max_members: runtime_types::pallet_nomination_pools::ConfigOp<
						::core::primitive::u32,
					>,
					max_members_per_pool: runtime_types::pallet_nomination_pools::ConfigOp<
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::StaticTxPayload<SetConfigs> {
					::subxt::tx::StaticTxPayload::new(
						"NominationPools",
						"set_configs",
						SetConfigs {
							min_join_bond,
							min_create_bond,
							max_pools,
							max_members,
							max_members_per_pool,
						},
						[
							143u8, 196u8, 211u8, 30u8, 71u8, 15u8, 150u8, 243u8, 7u8, 178u8, 179u8,
							168u8, 40u8, 116u8, 220u8, 140u8, 18u8, 206u8, 6u8, 189u8, 190u8, 37u8,
							68u8, 41u8, 45u8, 233u8, 247u8, 172u8, 185u8, 34u8, 243u8, 187u8,
						],
					)
				}
				#[doc = "Update the roles of the pool."]
				#[doc = ""]
				#[doc = "The root is the only entity that can change any of the roles, including itself,"]
				#[doc = "excluding the depositor, who can never change."]
				#[doc = ""]
				#[doc = "It emits an event, notifying UIs of the role change. This event is quite relevant to"]
				#[doc = "most pool members and they should be informed of changes to pool roles."]
				pub fn update_roles(
					&self,
					pool_id: ::core::primitive::u32,
					new_root: runtime_types::pallet_nomination_pools::ConfigOp<
						::subxt::ext::sp_core::crypto::AccountId32,
					>,
					new_nominator: runtime_types::pallet_nomination_pools::ConfigOp<
						::subxt::ext::sp_core::crypto::AccountId32,
					>,
					new_state_toggler: runtime_types::pallet_nomination_pools::ConfigOp<
						::subxt::ext::sp_core::crypto::AccountId32,
					>,
				) -> ::subxt::tx::StaticTxPayload<UpdateRoles> {
					::subxt::tx::StaticTxPayload::new(
						"NominationPools",
						"update_roles",
						UpdateRoles { pool_id, new_root, new_nominator, new_state_toggler },
						[
							247u8, 95u8, 234u8, 56u8, 181u8, 229u8, 158u8, 97u8, 69u8, 165u8, 38u8,
							17u8, 27u8, 209u8, 204u8, 250u8, 91u8, 193u8, 35u8, 93u8, 215u8, 131u8,
							148u8, 73u8, 67u8, 188u8, 92u8, 32u8, 34u8, 37u8, 113u8, 93u8,
						],
					)
				}
				#[doc = "Chill on behalf of the pool."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be signed by the pool nominator or the pool"]
				#[doc = "root role, same as [`Pallet::nominate`]."]
				#[doc = ""]
				#[doc = "This directly forward the call to the staking pallet, on behalf of the pool bonded"]
				#[doc = "account."]
				pub fn chill(
					&self,
					pool_id: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<Chill> {
					::subxt::tx::StaticTxPayload::new(
						"NominationPools",
						"chill",
						Chill { pool_id },
						[
							41u8, 114u8, 128u8, 121u8, 244u8, 15u8, 15u8, 52u8, 129u8, 88u8, 239u8,
							167u8, 216u8, 38u8, 123u8, 240u8, 172u8, 229u8, 132u8, 64u8, 175u8,
							87u8, 217u8, 27u8, 11u8, 124u8, 1u8, 140u8, 40u8, 191u8, 187u8, 36u8,
						],
					)
				}
			}
		}
		#[doc = "Events of this pallet."]
		pub type Event = runtime_types::pallet_nomination_pools::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A pool has been created."]
			pub struct Created {
				pub depositor: ::subxt::ext::sp_core::crypto::AccountId32,
				pub pool_id: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Created {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "Created";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A member has became bonded in a pool."]
			pub struct Bonded {
				pub member: ::subxt::ext::sp_core::crypto::AccountId32,
				pub pool_id: ::core::primitive::u32,
				pub bonded: ::core::primitive::u128,
				pub joined: ::core::primitive::bool,
			}
			impl ::subxt::events::StaticEvent for Bonded {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "Bonded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A payout has been made to a member."]
			pub struct PaidOut {
				pub member: ::subxt::ext::sp_core::crypto::AccountId32,
				pub pool_id: ::core::primitive::u32,
				pub payout: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for PaidOut {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "PaidOut";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A member has unbonded from their pool."]
			#[doc = ""]
			#[doc = "- `balance` is the corresponding balance of the number of points that has been"]
			#[doc = "  requested to be unbonded (the argument of the `unbond` transaction) from the bonded"]
			#[doc = "  pool."]
			#[doc = "- `points` is the number of points that are issued as a result of `balance` being"]
			#[doc = "dissolved into the corresponding unbonding pool."]
			#[doc = "- `era` is the era in which the balance will be unbonded."]
			#[doc = "In the absence of slashing, these values will match. In the presence of slashing, the"]
			#[doc = "number of points that are issued in the unbonding pool will be less than the amount"]
			#[doc = "requested to be unbonded."]
			pub struct Unbonded {
				pub member: ::subxt::ext::sp_core::crypto::AccountId32,
				pub pool_id: ::core::primitive::u32,
				pub balance: ::core::primitive::u128,
				pub points: ::core::primitive::u128,
				pub era: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Unbonded {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "Unbonded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A member has withdrawn from their pool."]
			#[doc = ""]
			#[doc = "The given number of `points` have been dissolved in return of `balance`."]
			#[doc = ""]
			#[doc = "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance"]
			#[doc = "will be 1."]
			pub struct Withdrawn {
				pub member: ::subxt::ext::sp_core::crypto::AccountId32,
				pub pool_id: ::core::primitive::u32,
				pub balance: ::core::primitive::u128,
				pub points: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Withdrawn {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "Withdrawn";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "A pool has been destroyed."]
			pub struct Destroyed {
				pub pool_id: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Destroyed {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "Destroyed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The state of a pool has changed"]
			pub struct StateChanged {
				pub pool_id: ::core::primitive::u32,
				pub new_state: runtime_types::pallet_nomination_pools::PoolState,
			}
			impl ::subxt::events::StaticEvent for StateChanged {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "StateChanged";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A member has been removed from a pool."]
			#[doc = ""]
			#[doc = "The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked)."]
			pub struct MemberRemoved {
				pub pool_id: ::core::primitive::u32,
				pub member: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for MemberRemoved {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "MemberRemoved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The roles of a pool have been updated to the given new roles. Note that the depositor"]
			#[doc = "can never change."]
			pub struct RolesUpdated {
				pub root: ::core::option::Option<::subxt::ext::sp_core::crypto::AccountId32>,
				pub state_toggler:
					::core::option::Option<::subxt::ext::sp_core::crypto::AccountId32>,
				pub nominator: ::core::option::Option<::subxt::ext::sp_core::crypto::AccountId32>,
			}
			impl ::subxt::events::StaticEvent for RolesUpdated {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "RolesUpdated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The active balance of pool `pool_id` has been slashed to `balance`."]
			pub struct PoolSlashed {
				pub pool_id: ::core::primitive::u32,
				pub balance: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for PoolSlashed {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "PoolSlashed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."]
			pub struct UnbondingPoolSlashed {
				pub pool_id: ::core::primitive::u32,
				pub era: ::core::primitive::u32,
				pub balance: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for UnbondingPoolSlashed {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "UnbondingPoolSlashed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Minimum amount to bond to join a pool."]
				pub fn min_join_bond(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"MinJoinBond",
						vec![],
						[
							125u8, 239u8, 45u8, 225u8, 74u8, 129u8, 247u8, 184u8, 205u8, 58u8,
							45u8, 186u8, 126u8, 170u8, 112u8, 120u8, 23u8, 190u8, 247u8, 97u8,
							131u8, 126u8, 215u8, 44u8, 147u8, 122u8, 132u8, 212u8, 217u8, 84u8,
							240u8, 91u8,
						],
					)
				}
				#[doc = " Minimum bond required to create a pool."]
				#[doc = ""]
				#[doc = " This is the amount that the depositor must put as their initial stake in the pool, as an"]
				#[doc = " indication of \"skin in the game\"."]
				#[doc = ""]
				#[doc = " This is the value that will always exist in the staking ledger of the pool bonded account"]
				#[doc = " while all other accounts leave."]
				pub fn min_create_bond(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"MinCreateBond",
						vec![],
						[
							31u8, 208u8, 240u8, 158u8, 23u8, 218u8, 212u8, 138u8, 92u8, 210u8,
							207u8, 170u8, 32u8, 60u8, 5u8, 21u8, 84u8, 162u8, 1u8, 111u8, 181u8,
							243u8, 24u8, 148u8, 193u8, 253u8, 248u8, 190u8, 16u8, 222u8, 219u8,
							67u8,
						],
					)
				}
				#[doc = " Maximum number of nomination pools that can exist. If `None`, then an unbounded number of"]
				#[doc = " pools can exist."]
				pub fn max_pools(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"MaxPools",
						vec![],
						[
							216u8, 111u8, 68u8, 103u8, 33u8, 50u8, 109u8, 3u8, 176u8, 195u8, 23u8,
							73u8, 112u8, 138u8, 9u8, 194u8, 233u8, 73u8, 68u8, 215u8, 162u8, 255u8,
							217u8, 173u8, 141u8, 27u8, 72u8, 199u8, 7u8, 240u8, 25u8, 34u8,
						],
					)
				}
				#[doc = " Maximum number of members that can exist in the system. If `None`, then the count"]
				#[doc = " members are not bound on a system wide basis."]
				pub fn max_pool_members(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"MaxPoolMembers",
						vec![],
						[
							82u8, 217u8, 26u8, 234u8, 223u8, 241u8, 66u8, 182u8, 43u8, 233u8, 59u8,
							242u8, 202u8, 254u8, 69u8, 50u8, 254u8, 196u8, 166u8, 89u8, 120u8,
							87u8, 76u8, 148u8, 31u8, 197u8, 49u8, 88u8, 206u8, 41u8, 242u8, 62u8,
						],
					)
				}
				#[doc = " Maximum number of members that may belong to pool. If `None`, then the count of"]
				#[doc = " members is not bound on a per pool basis."]
				pub fn max_pool_members_per_pool(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"MaxPoolMembersPerPool",
						vec![],
						[
							93u8, 241u8, 16u8, 169u8, 138u8, 199u8, 128u8, 149u8, 65u8, 30u8, 55u8,
							11u8, 41u8, 252u8, 83u8, 250u8, 9u8, 33u8, 152u8, 239u8, 195u8, 147u8,
							16u8, 248u8, 180u8, 153u8, 88u8, 231u8, 248u8, 169u8, 186u8, 48u8,
						],
					)
				}
				#[doc = " Active members."]
				pub fn pool_members(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_nomination_pools::PoolMember,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"PoolMembers",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							252u8, 236u8, 201u8, 127u8, 219u8, 1u8, 19u8, 144u8, 5u8, 108u8, 70u8,
							30u8, 177u8, 232u8, 253u8, 237u8, 211u8, 91u8, 63u8, 62u8, 155u8,
							151u8, 153u8, 165u8, 206u8, 53u8, 111u8, 31u8, 60u8, 120u8, 100u8,
							249u8,
						],
					)
				}
				#[doc = " Active members."]
				pub fn pool_members_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_nomination_pools::PoolMember,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"PoolMembers",
						Vec::new(),
						[
							252u8, 236u8, 201u8, 127u8, 219u8, 1u8, 19u8, 144u8, 5u8, 108u8, 70u8,
							30u8, 177u8, 232u8, 253u8, 237u8, 211u8, 91u8, 63u8, 62u8, 155u8,
							151u8, 153u8, 165u8, 206u8, 53u8, 111u8, 31u8, 60u8, 120u8, 100u8,
							249u8,
						],
					)
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_pool_members(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"CounterForPoolMembers",
						vec![],
						[
							114u8, 126u8, 27u8, 138u8, 119u8, 44u8, 45u8, 129u8, 84u8, 107u8,
							171u8, 206u8, 117u8, 141u8, 20u8, 75u8, 229u8, 237u8, 31u8, 229u8,
							124u8, 190u8, 27u8, 124u8, 63u8, 59u8, 167u8, 42u8, 62u8, 212u8, 160u8,
							2u8,
						],
					)
				}
				#[doc = " Storage for bonded pools."]
				pub fn bonded_pools(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_nomination_pools::BondedPoolInner,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"BondedPools",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							34u8, 51u8, 86u8, 95u8, 237u8, 118u8, 40u8, 212u8, 128u8, 227u8, 113u8,
							6u8, 116u8, 28u8, 96u8, 223u8, 63u8, 249u8, 33u8, 152u8, 61u8, 7u8,
							205u8, 220u8, 221u8, 174u8, 207u8, 39u8, 53u8, 176u8, 13u8, 74u8,
						],
					)
				}
				#[doc = " Storage for bonded pools."]
				pub fn bonded_pools_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_nomination_pools::BondedPoolInner,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"BondedPools",
						Vec::new(),
						[
							34u8, 51u8, 86u8, 95u8, 237u8, 118u8, 40u8, 212u8, 128u8, 227u8, 113u8,
							6u8, 116u8, 28u8, 96u8, 223u8, 63u8, 249u8, 33u8, 152u8, 61u8, 7u8,
							205u8, 220u8, 221u8, 174u8, 207u8, 39u8, 53u8, 176u8, 13u8, 74u8,
						],
					)
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_bonded_pools(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"CounterForBondedPools",
						vec![],
						[
							134u8, 94u8, 199u8, 73u8, 174u8, 253u8, 66u8, 242u8, 233u8, 244u8,
							140u8, 170u8, 242u8, 40u8, 41u8, 185u8, 183u8, 151u8, 58u8, 111u8,
							221u8, 225u8, 81u8, 71u8, 169u8, 219u8, 223u8, 135u8, 8u8, 171u8,
							180u8, 236u8,
						],
					)
				}
				#[doc = " Reward pools. This is where there rewards for each pool accumulate. When a members payout"]
				#[doc = " is claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account."]
				pub fn reward_pools(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_nomination_pools::RewardPool,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"RewardPools",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							139u8, 123u8, 46u8, 107u8, 9u8, 83u8, 141u8, 12u8, 188u8, 225u8, 170u8,
							215u8, 154u8, 21u8, 100u8, 95u8, 237u8, 245u8, 46u8, 216u8, 199u8,
							184u8, 187u8, 155u8, 8u8, 16u8, 34u8, 177u8, 153u8, 65u8, 109u8, 198u8,
						],
					)
				}
				#[doc = " Reward pools. This is where there rewards for each pool accumulate. When a members payout"]
				#[doc = " is claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account."]
				pub fn reward_pools_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_nomination_pools::RewardPool,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"RewardPools",
						Vec::new(),
						[
							139u8, 123u8, 46u8, 107u8, 9u8, 83u8, 141u8, 12u8, 188u8, 225u8, 170u8,
							215u8, 154u8, 21u8, 100u8, 95u8, 237u8, 245u8, 46u8, 216u8, 199u8,
							184u8, 187u8, 155u8, 8u8, 16u8, 34u8, 177u8, 153u8, 65u8, 109u8, 198u8,
						],
					)
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_reward_pools(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"CounterForRewardPools",
						vec![],
						[
							209u8, 139u8, 212u8, 116u8, 210u8, 178u8, 213u8, 38u8, 75u8, 23u8,
							188u8, 57u8, 253u8, 213u8, 95u8, 118u8, 182u8, 250u8, 45u8, 205u8,
							17u8, 175u8, 17u8, 201u8, 234u8, 14u8, 98u8, 49u8, 143u8, 135u8, 201u8,
							81u8,
						],
					)
				}
				#[doc = " Groups of unbonding pools. Each group of unbonding pools belongs to a bonded pool,"]
				#[doc = " hence the name sub-pools. Keyed by the bonded pools account."]
				pub fn sub_pools_storage(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_nomination_pools::SubPools,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"SubPoolsStorage",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							231u8, 13u8, 111u8, 248u8, 1u8, 208u8, 179u8, 134u8, 224u8, 196u8,
							94u8, 201u8, 229u8, 29u8, 155u8, 211u8, 163u8, 150u8, 157u8, 34u8,
							68u8, 238u8, 55u8, 4u8, 222u8, 96u8, 186u8, 29u8, 205u8, 237u8, 80u8,
							42u8,
						],
					)
				}
				#[doc = " Groups of unbonding pools. Each group of unbonding pools belongs to a bonded pool,"]
				#[doc = " hence the name sub-pools. Keyed by the bonded pools account."]
				pub fn sub_pools_storage_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_nomination_pools::SubPools,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"SubPoolsStorage",
						Vec::new(),
						[
							231u8, 13u8, 111u8, 248u8, 1u8, 208u8, 179u8, 134u8, 224u8, 196u8,
							94u8, 201u8, 229u8, 29u8, 155u8, 211u8, 163u8, 150u8, 157u8, 34u8,
							68u8, 238u8, 55u8, 4u8, 222u8, 96u8, 186u8, 29u8, 205u8, 237u8, 80u8,
							42u8,
						],
					)
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_sub_pools_storage(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"CounterForSubPoolsStorage",
						vec![],
						[
							212u8, 145u8, 212u8, 226u8, 234u8, 31u8, 26u8, 240u8, 107u8, 91u8,
							171u8, 120u8, 41u8, 195u8, 16u8, 86u8, 55u8, 127u8, 103u8, 93u8, 128u8,
							48u8, 69u8, 104u8, 168u8, 236u8, 81u8, 54u8, 2u8, 184u8, 215u8, 51u8,
						],
					)
				}
				#[doc = " Metadata for the pool."]
				pub fn metadata(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"Metadata",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							108u8, 250u8, 163u8, 54u8, 192u8, 143u8, 239u8, 62u8, 97u8, 163u8,
							161u8, 215u8, 171u8, 225u8, 49u8, 18u8, 37u8, 200u8, 143u8, 254u8,
							136u8, 26u8, 54u8, 187u8, 39u8, 3u8, 216u8, 24u8, 188u8, 25u8, 243u8,
							251u8,
						],
					)
				}
				#[doc = " Metadata for the pool."]
				pub fn metadata_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"Metadata",
						Vec::new(),
						[
							108u8, 250u8, 163u8, 54u8, 192u8, 143u8, 239u8, 62u8, 97u8, 163u8,
							161u8, 215u8, 171u8, 225u8, 49u8, 18u8, 37u8, 200u8, 143u8, 254u8,
							136u8, 26u8, 54u8, 187u8, 39u8, 3u8, 216u8, 24u8, 188u8, 25u8, 243u8,
							251u8,
						],
					)
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_metadata(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"CounterForMetadata",
						vec![],
						[
							190u8, 232u8, 77u8, 134u8, 245u8, 89u8, 160u8, 187u8, 163u8, 68u8,
							188u8, 204u8, 31u8, 145u8, 219u8, 165u8, 213u8, 1u8, 167u8, 90u8,
							175u8, 218u8, 147u8, 144u8, 158u8, 226u8, 23u8, 233u8, 55u8, 168u8,
							161u8, 237u8,
						],
					)
				}
				#[doc = " Ever increasing number of all pools created so far."]
				pub fn last_pool_id(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"LastPoolId",
						vec![],
						[
							50u8, 254u8, 218u8, 41u8, 213u8, 184u8, 170u8, 166u8, 31u8, 29u8,
							196u8, 57u8, 215u8, 20u8, 40u8, 40u8, 19u8, 22u8, 9u8, 184u8, 11u8,
							21u8, 21u8, 125u8, 97u8, 38u8, 219u8, 209u8, 2u8, 238u8, 247u8, 51u8,
						],
					)
				}
				#[doc = " A reverse lookup from the pool's account id to its id."]
				#[doc = ""]
				#[doc = " This is only used for slashing. In all other instances, the pool id is used, and the"]
				#[doc = " accounts are deterministically derived from it."]
				pub fn reverse_pool_id_lookup(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"ReversePoolIdLookup",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							178u8, 161u8, 51u8, 220u8, 128u8, 1u8, 135u8, 83u8, 236u8, 159u8, 36u8,
							237u8, 120u8, 128u8, 6u8, 191u8, 41u8, 159u8, 94u8, 178u8, 174u8,
							235u8, 221u8, 173u8, 44u8, 81u8, 211u8, 255u8, 231u8, 81u8, 16u8, 87u8,
						],
					)
				}
				#[doc = " A reverse lookup from the pool's account id to its id."]
				#[doc = ""]
				#[doc = " This is only used for slashing. In all other instances, the pool id is used, and the"]
				#[doc = " accounts are deterministically derived from it."]
				pub fn reverse_pool_id_lookup_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"ReversePoolIdLookup",
						Vec::new(),
						[
							178u8, 161u8, 51u8, 220u8, 128u8, 1u8, 135u8, 83u8, 236u8, 159u8, 36u8,
							237u8, 120u8, 128u8, 6u8, 191u8, 41u8, 159u8, 94u8, 178u8, 174u8,
							235u8, 221u8, 173u8, 44u8, 81u8, 211u8, 255u8, 231u8, 81u8, 16u8, 87u8,
						],
					)
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_reverse_pool_id_lookup(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"NominationPools",
						"CounterForReversePoolIdLookup",
						vec![],
						[
							148u8, 83u8, 81u8, 33u8, 188u8, 72u8, 148u8, 208u8, 245u8, 178u8, 52u8,
							245u8, 229u8, 140u8, 100u8, 152u8, 8u8, 217u8, 161u8, 80u8, 226u8,
							42u8, 15u8, 252u8, 90u8, 197u8, 120u8, 114u8, 144u8, 90u8, 199u8,
							123u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The nomination pool's pallet id."]
				pub fn pallet_id(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::frame_support::PalletId>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"NominationPools",
						"PalletId",
						[
							139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
							174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
							9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
						],
					)
				}
				#[doc = " The maximum pool points-to-balance ratio that an `open` pool can have."]
				#[doc = ""]
				#[doc = " This is important in the event slashing takes place and the pool's points-to-balance"]
				#[doc = " ratio becomes disproportional."]
				#[doc = ""]
				#[doc = " Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations"]
				#[doc = " are a function of number of points, and by setting this value to e.g. 10, you ensure"]
				#[doc = " that the total number of points in the system are at most 10 times the total_issuance of"]
				#[doc = " the chain, in the absolute worse case."]
				#[doc = ""]
				#[doc = " For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1."]
				#[doc = " Such a scenario would also be the equivalent of the pool being 90% slashed."]
				pub fn max_points_to_balance(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u8>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"NominationPools",
						"MaxPointsToBalance",
						[
							141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
							28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
							114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
							165u8,
						],
					)
				}
			}
		}
	}
	pub mod parachains_origin {
		use super::{root_mod, runtime_types};
	}
	pub mod configuration {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetValidationUpgradeCooldown {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetValidationUpgradeDelay {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetCodeRetentionPeriod {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetMaxCodeSize {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetMaxPovSize {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetMaxHeadDataSize {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetParathreadCores {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetParathreadRetries {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetGroupRotationFrequency {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetChainAvailabilityPeriod {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetThreadAvailabilityPeriod {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetSchedulingLookahead {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetMaxValidatorsPerCore {
				pub new: ::core::option::Option<::core::primitive::u32>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetMaxValidators {
				pub new: ::core::option::Option<::core::primitive::u32>,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetDisputePeriod {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetDisputePostConclusionAcceptancePeriod {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetDisputeMaxSpamSlots {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetDisputeConclusionByTimeOutPeriod {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetNoShowSlots {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetNDelayTranches {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetZerothDelayTrancheWidth {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetNeededApprovals {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetRelayVrfModuloSamples {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetMaxUpwardQueueCount {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetMaxUpwardQueueSize {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetMaxDownwardMessageSize {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetUmpServiceTotalWeight {
				pub new: ::core::primitive::u64,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetMaxUpwardMessageSize {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetMaxUpwardMessageNumPerCandidate {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetHrmpOpenRequestTtl {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetHrmpSenderDeposit {
				pub new: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetHrmpRecipientDeposit {
				pub new: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetHrmpChannelMaxCapacity {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetHrmpChannelMaxTotalSize {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetHrmpMaxParachainInboundChannels {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetHrmpMaxParathreadInboundChannels {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetHrmpChannelMaxMessageSize {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetHrmpMaxParachainOutboundChannels {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetHrmpMaxParathreadOutboundChannels {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetHrmpMaxMessageNumPerCandidate {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetUmpMaxIndividualWeight {
				pub new: ::core::primitive::u64,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetPvfCheckingEnabled {
				pub new: ::core::primitive::bool,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetPvfVotingTtl {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct SetMinimumValidationUpgradeDelay {
				pub new: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SetBypassConsistencyCheck {
				pub new: ::core::primitive::bool,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Set the validation upgrade cooldown."]
				pub fn set_validation_upgrade_cooldown(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetValidationUpgradeCooldown> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_validation_upgrade_cooldown",
						SetValidationUpgradeCooldown { new },
						[
							109u8, 185u8, 0u8, 59u8, 177u8, 198u8, 76u8, 90u8, 108u8, 190u8, 56u8,
							126u8, 147u8, 110u8, 76u8, 111u8, 38u8, 200u8, 230u8, 144u8, 42u8,
							167u8, 175u8, 220u8, 102u8, 37u8, 60u8, 10u8, 118u8, 79u8, 146u8,
							203u8,
						],
					)
				}
				#[doc = "Set the validation upgrade delay."]
				pub fn set_validation_upgrade_delay(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetValidationUpgradeDelay> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_validation_upgrade_delay",
						SetValidationUpgradeDelay { new },
						[
							18u8, 130u8, 158u8, 253u8, 160u8, 194u8, 220u8, 120u8, 9u8, 68u8,
							232u8, 176u8, 34u8, 81u8, 200u8, 236u8, 141u8, 139u8, 62u8, 110u8,
							76u8, 9u8, 218u8, 69u8, 55u8, 2u8, 233u8, 109u8, 83u8, 117u8, 141u8,
							253u8,
						],
					)
				}
				#[doc = "Set the acceptance period for an included candidate."]
				pub fn set_code_retention_period(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetCodeRetentionPeriod> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_code_retention_period",
						SetCodeRetentionPeriod { new },
						[
							221u8, 140u8, 253u8, 111u8, 64u8, 236u8, 93u8, 52u8, 214u8, 245u8,
							178u8, 30u8, 77u8, 166u8, 242u8, 252u8, 203u8, 106u8, 12u8, 195u8,
							27u8, 159u8, 96u8, 197u8, 145u8, 69u8, 241u8, 59u8, 74u8, 220u8, 62u8,
							205u8,
						],
					)
				}
				#[doc = "Set the max validation code size for incoming upgrades."]
				pub fn set_max_code_size(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetMaxCodeSize> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_max_code_size",
						SetMaxCodeSize { new },
						[
							232u8, 106u8, 45u8, 195u8, 27u8, 162u8, 188u8, 213u8, 137u8, 13u8,
							123u8, 89u8, 215u8, 141u8, 231u8, 82u8, 205u8, 215u8, 73u8, 142u8,
							115u8, 109u8, 132u8, 118u8, 194u8, 211u8, 82u8, 20u8, 75u8, 55u8,
							218u8, 46u8,
						],
					)
				}
				#[doc = "Set the max POV block size for incoming upgrades."]
				pub fn set_max_pov_size(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetMaxPovSize> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_max_pov_size",
						SetMaxPovSize { new },
						[
							15u8, 176u8, 13u8, 19u8, 177u8, 160u8, 211u8, 238u8, 29u8, 194u8,
							187u8, 235u8, 244u8, 65u8, 158u8, 47u8, 102u8, 221u8, 95u8, 10u8, 21u8,
							33u8, 219u8, 234u8, 82u8, 122u8, 75u8, 53u8, 14u8, 126u8, 218u8, 23u8,
						],
					)
				}
				#[doc = "Set the max head data size for paras."]
				pub fn set_max_head_data_size(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetMaxHeadDataSize> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_max_head_data_size",
						SetMaxHeadDataSize { new },
						[
							219u8, 128u8, 213u8, 65u8, 190u8, 224u8, 87u8, 80u8, 172u8, 112u8,
							160u8, 229u8, 52u8, 1u8, 189u8, 125u8, 177u8, 139u8, 103u8, 39u8, 21u8,
							125u8, 62u8, 177u8, 74u8, 25u8, 41u8, 11u8, 200u8, 79u8, 139u8, 171u8,
						],
					)
				}
				#[doc = "Set the number of parathread execution cores."]
				pub fn set_parathread_cores(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetParathreadCores> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_parathread_cores",
						SetParathreadCores { new },
						[
							155u8, 102u8, 168u8, 202u8, 236u8, 87u8, 16u8, 128u8, 141u8, 99u8,
							154u8, 162u8, 216u8, 198u8, 236u8, 233u8, 104u8, 230u8, 137u8, 132u8,
							41u8, 106u8, 167u8, 81u8, 195u8, 172u8, 107u8, 28u8, 138u8, 254u8,
							180u8, 61u8,
						],
					)
				}
				#[doc = "Set the number of retries for a particular parathread."]
				pub fn set_parathread_retries(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetParathreadRetries> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_parathread_retries",
						SetParathreadRetries { new },
						[
							192u8, 81u8, 152u8, 41u8, 40u8, 3u8, 251u8, 205u8, 244u8, 133u8, 42u8,
							197u8, 21u8, 221u8, 80u8, 196u8, 222u8, 69u8, 153u8, 39u8, 161u8, 90u8,
							4u8, 38u8, 167u8, 131u8, 237u8, 42u8, 135u8, 37u8, 156u8, 108u8,
						],
					)
				}
				#[doc = "Set the parachain validator-group rotation frequency"]
				pub fn set_group_rotation_frequency(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetGroupRotationFrequency> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_group_rotation_frequency",
						SetGroupRotationFrequency { new },
						[
							205u8, 222u8, 129u8, 36u8, 136u8, 186u8, 114u8, 70u8, 214u8, 22u8,
							112u8, 65u8, 56u8, 42u8, 103u8, 93u8, 108u8, 242u8, 188u8, 229u8,
							150u8, 19u8, 12u8, 222u8, 25u8, 254u8, 48u8, 218u8, 200u8, 208u8,
							132u8, 251u8,
						],
					)
				}
				#[doc = "Set the availability period for parachains."]
				pub fn set_chain_availability_period(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetChainAvailabilityPeriod> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_chain_availability_period",
						SetChainAvailabilityPeriod { new },
						[
							171u8, 21u8, 54u8, 241u8, 19u8, 100u8, 54u8, 143u8, 97u8, 191u8, 193u8,
							96u8, 7u8, 86u8, 255u8, 109u8, 255u8, 93u8, 113u8, 28u8, 182u8, 75u8,
							120u8, 208u8, 91u8, 125u8, 156u8, 38u8, 56u8, 230u8, 24u8, 139u8,
						],
					)
				}
				#[doc = "Set the availability period for parathreads."]
				pub fn set_thread_availability_period(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetThreadAvailabilityPeriod> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_thread_availability_period",
						SetThreadAvailabilityPeriod { new },
						[
							208u8, 27u8, 246u8, 33u8, 90u8, 200u8, 75u8, 177u8, 19u8, 107u8, 236u8,
							43u8, 159u8, 156u8, 184u8, 10u8, 146u8, 71u8, 212u8, 129u8, 44u8, 19u8,
							162u8, 172u8, 162u8, 46u8, 166u8, 10u8, 67u8, 112u8, 206u8, 50u8,
						],
					)
				}
				#[doc = "Set the scheduling lookahead, in expected number of blocks at peak throughput."]
				pub fn set_scheduling_lookahead(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetSchedulingLookahead> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_scheduling_lookahead",
						SetSchedulingLookahead { new },
						[
							220u8, 74u8, 0u8, 150u8, 45u8, 29u8, 56u8, 210u8, 66u8, 12u8, 119u8,
							176u8, 103u8, 24u8, 216u8, 55u8, 211u8, 120u8, 233u8, 204u8, 167u8,
							100u8, 199u8, 157u8, 186u8, 174u8, 40u8, 218u8, 19u8, 230u8, 253u8,
							7u8,
						],
					)
				}
				#[doc = "Set the maximum number of validators to assign to any core."]
				pub fn set_max_validators_per_core(
					&self,
					new: ::core::option::Option<::core::primitive::u32>,
				) -> ::subxt::tx::StaticTxPayload<SetMaxValidatorsPerCore> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_max_validators_per_core",
						SetMaxValidatorsPerCore { new },
						[
							227u8, 113u8, 192u8, 116u8, 114u8, 171u8, 27u8, 22u8, 84u8, 117u8,
							146u8, 152u8, 94u8, 101u8, 14u8, 52u8, 228u8, 170u8, 163u8, 82u8,
							248u8, 130u8, 32u8, 103u8, 225u8, 151u8, 145u8, 36u8, 98u8, 158u8, 6u8,
							245u8,
						],
					)
				}
				#[doc = "Set the maximum number of validators to use in parachain consensus."]
				pub fn set_max_validators(
					&self,
					new: ::core::option::Option<::core::primitive::u32>,
				) -> ::subxt::tx::StaticTxPayload<SetMaxValidators> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_max_validators",
						SetMaxValidators { new },
						[
							143u8, 212u8, 59u8, 147u8, 4u8, 55u8, 142u8, 209u8, 237u8, 76u8, 7u8,
							178u8, 41u8, 81u8, 4u8, 203u8, 184u8, 149u8, 32u8, 1u8, 106u8, 180u8,
							121u8, 20u8, 137u8, 169u8, 144u8, 77u8, 38u8, 53u8, 243u8, 127u8,
						],
					)
				}
				#[doc = "Set the dispute period, in number of sessions to keep for disputes."]
				pub fn set_dispute_period(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetDisputePeriod> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_dispute_period",
						SetDisputePeriod { new },
						[
							36u8, 191u8, 142u8, 240u8, 48u8, 101u8, 10u8, 197u8, 117u8, 125u8,
							156u8, 189u8, 130u8, 77u8, 242u8, 130u8, 205u8, 154u8, 152u8, 47u8,
							75u8, 56u8, 63u8, 61u8, 33u8, 163u8, 151u8, 97u8, 105u8, 99u8, 55u8,
							180u8,
						],
					)
				}
				#[doc = "Set the dispute post conclusion acceptance period."]
				pub fn set_dispute_post_conclusion_acceptance_period(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetDisputePostConclusionAcceptancePeriod> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_dispute_post_conclusion_acceptance_period",
						SetDisputePostConclusionAcceptancePeriod { new },
						[
							66u8, 56u8, 45u8, 87u8, 51u8, 49u8, 91u8, 95u8, 255u8, 185u8, 54u8,
							165u8, 85u8, 142u8, 238u8, 251u8, 174u8, 81u8, 3u8, 61u8, 92u8, 97u8,
							203u8, 20u8, 107u8, 50u8, 208u8, 250u8, 208u8, 159u8, 225u8, 175u8,
						],
					)
				}
				#[doc = "Set the maximum number of dispute spam slots."]
				pub fn set_dispute_max_spam_slots(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetDisputeMaxSpamSlots> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_dispute_max_spam_slots",
						SetDisputeMaxSpamSlots { new },
						[
							177u8, 58u8, 3u8, 205u8, 145u8, 85u8, 160u8, 162u8, 13u8, 171u8, 124u8,
							54u8, 58u8, 209u8, 88u8, 131u8, 230u8, 248u8, 142u8, 18u8, 121u8,
							129u8, 196u8, 121u8, 25u8, 15u8, 252u8, 229u8, 89u8, 230u8, 14u8, 68u8,
						],
					)
				}
				#[doc = "Set the dispute conclusion by time out period."]
				pub fn set_dispute_conclusion_by_time_out_period(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetDisputeConclusionByTimeOutPeriod> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_dispute_conclusion_by_time_out_period",
						SetDisputeConclusionByTimeOutPeriod { new },
						[
							238u8, 102u8, 27u8, 169u8, 68u8, 116u8, 198u8, 64u8, 190u8, 33u8, 36u8,
							98u8, 176u8, 157u8, 123u8, 148u8, 126u8, 85u8, 32u8, 19u8, 49u8, 40u8,
							172u8, 41u8, 195u8, 182u8, 44u8, 255u8, 136u8, 204u8, 250u8, 6u8,
						],
					)
				}
				#[doc = "Set the no show slots, in number of number of consensus slots."]
				#[doc = "Must be at least 1."]
				pub fn set_no_show_slots(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetNoShowSlots> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_no_show_slots",
						SetNoShowSlots { new },
						[
							94u8, 230u8, 89u8, 131u8, 188u8, 246u8, 251u8, 34u8, 249u8, 16u8,
							134u8, 63u8, 238u8, 115u8, 19u8, 97u8, 97u8, 218u8, 238u8, 115u8,
							126u8, 140u8, 236u8, 17u8, 177u8, 192u8, 210u8, 239u8, 126u8, 107u8,
							117u8, 207u8,
						],
					)
				}
				#[doc = "Set the total number of delay tranches."]
				pub fn set_n_delay_tranches(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetNDelayTranches> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_n_delay_tranches",
						SetNDelayTranches { new },
						[
							195u8, 168u8, 178u8, 51u8, 20u8, 107u8, 227u8, 236u8, 57u8, 30u8,
							130u8, 93u8, 149u8, 2u8, 161u8, 66u8, 48u8, 37u8, 71u8, 108u8, 195u8,
							65u8, 153u8, 30u8, 181u8, 181u8, 158u8, 252u8, 120u8, 119u8, 36u8,
							146u8,
						],
					)
				}
				#[doc = "Set the zeroth delay tranche width."]
				pub fn set_zeroth_delay_tranche_width(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetZerothDelayTrancheWidth> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_zeroth_delay_tranche_width",
						SetZerothDelayTrancheWidth { new },
						[
							69u8, 56u8, 125u8, 24u8, 181u8, 62u8, 99u8, 92u8, 166u8, 107u8, 91u8,
							134u8, 230u8, 128u8, 214u8, 135u8, 245u8, 64u8, 62u8, 78u8, 96u8,
							231u8, 195u8, 29u8, 158u8, 113u8, 46u8, 96u8, 29u8, 0u8, 154u8, 80u8,
						],
					)
				}
				#[doc = "Set the number of validators needed to approve a block."]
				pub fn set_needed_approvals(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetNeededApprovals> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_needed_approvals",
						SetNeededApprovals { new },
						[
							238u8, 55u8, 134u8, 30u8, 67u8, 153u8, 150u8, 5u8, 226u8, 227u8, 185u8,
							188u8, 66u8, 60u8, 147u8, 118u8, 46u8, 174u8, 104u8, 100u8, 26u8,
							162u8, 65u8, 58u8, 162u8, 52u8, 211u8, 66u8, 242u8, 177u8, 230u8, 98u8,
						],
					)
				}
				#[doc = "Set the number of samples to do of the `RelayVRFModulo` approval assignment criterion."]
				pub fn set_relay_vrf_modulo_samples(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetRelayVrfModuloSamples> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_relay_vrf_modulo_samples",
						SetRelayVrfModuloSamples { new },
						[
							76u8, 101u8, 207u8, 184u8, 211u8, 8u8, 43u8, 4u8, 165u8, 147u8, 166u8,
							3u8, 189u8, 42u8, 125u8, 130u8, 21u8, 43u8, 189u8, 120u8, 239u8, 131u8,
							235u8, 35u8, 151u8, 15u8, 30u8, 81u8, 0u8, 2u8, 64u8, 21u8,
						],
					)
				}
				#[doc = "Sets the maximum items that can present in a upward dispatch queue at once."]
				pub fn set_max_upward_queue_count(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetMaxUpwardQueueCount> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_max_upward_queue_count",
						SetMaxUpwardQueueCount { new },
						[
							116u8, 186u8, 216u8, 17u8, 150u8, 187u8, 86u8, 154u8, 92u8, 122u8,
							178u8, 167u8, 215u8, 165u8, 55u8, 86u8, 229u8, 114u8, 10u8, 149u8,
							50u8, 183u8, 165u8, 32u8, 233u8, 105u8, 82u8, 177u8, 120u8, 25u8, 44u8,
							130u8,
						],
					)
				}
				#[doc = "Sets the maximum total size of items that can present in a upward dispatch queue at once."]
				pub fn set_max_upward_queue_size(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetMaxUpwardQueueSize> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_max_upward_queue_size",
						SetMaxUpwardQueueSize { new },
						[
							18u8, 60u8, 141u8, 57u8, 134u8, 96u8, 140u8, 85u8, 137u8, 9u8, 209u8,
							123u8, 10u8, 165u8, 33u8, 184u8, 34u8, 82u8, 59u8, 60u8, 30u8, 47u8,
							22u8, 163u8, 119u8, 200u8, 197u8, 192u8, 112u8, 243u8, 156u8, 12u8,
						],
					)
				}
				#[doc = "Set the critical downward message size."]
				pub fn set_max_downward_message_size(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetMaxDownwardMessageSize> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_max_downward_message_size",
						SetMaxDownwardMessageSize { new },
						[
							104u8, 25u8, 229u8, 184u8, 53u8, 246u8, 206u8, 180u8, 13u8, 156u8,
							14u8, 224u8, 215u8, 115u8, 104u8, 127u8, 167u8, 189u8, 239u8, 183u8,
							68u8, 124u8, 55u8, 211u8, 186u8, 115u8, 70u8, 195u8, 61u8, 151u8, 32u8,
							218u8,
						],
					)
				}
				#[doc = "Sets the soft limit for the phase of dispatching dispatchable upward messages."]
				pub fn set_ump_service_total_weight(
					&self,
					new: ::core::primitive::u64,
				) -> ::subxt::tx::StaticTxPayload<SetUmpServiceTotalWeight> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_ump_service_total_weight",
						SetUmpServiceTotalWeight { new },
						[
							253u8, 228u8, 226u8, 127u8, 202u8, 30u8, 148u8, 254u8, 133u8, 38u8,
							2u8, 83u8, 173u8, 147u8, 113u8, 224u8, 16u8, 160u8, 13u8, 238u8, 196u8,
							174u8, 104u8, 147u8, 57u8, 14u8, 213u8, 32u8, 220u8, 162u8, 89u8,
							244u8,
						],
					)
				}
				#[doc = "Sets the maximum size of an upward message that can be sent by a candidate."]
				pub fn set_max_upward_message_size(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetMaxUpwardMessageSize> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_max_upward_message_size",
						SetMaxUpwardMessageSize { new },
						[
							213u8, 120u8, 21u8, 247u8, 101u8, 21u8, 164u8, 228u8, 33u8, 115u8,
							20u8, 138u8, 28u8, 174u8, 247u8, 39u8, 194u8, 113u8, 34u8, 73u8, 142u8,
							94u8, 116u8, 151u8, 113u8, 92u8, 151u8, 227u8, 116u8, 250u8, 101u8,
							179u8,
						],
					)
				}
				#[doc = "Sets the maximum number of messages that a candidate can contain."]
				pub fn set_max_upward_message_num_per_candidate(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetMaxUpwardMessageNumPerCandidate> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_max_upward_message_num_per_candidate",
						SetMaxUpwardMessageNumPerCandidate { new },
						[
							54u8, 133u8, 226u8, 138u8, 184u8, 27u8, 130u8, 153u8, 130u8, 196u8,
							54u8, 79u8, 124u8, 10u8, 37u8, 139u8, 59u8, 190u8, 169u8, 87u8, 255u8,
							211u8, 38u8, 142u8, 37u8, 74u8, 144u8, 204u8, 75u8, 94u8, 154u8, 149u8,
						],
					)
				}
				#[doc = "Sets the number of sessions after which an HRMP open channel request expires."]
				pub fn set_hrmp_open_request_ttl(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetHrmpOpenRequestTtl> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_hrmp_open_request_ttl",
						SetHrmpOpenRequestTtl { new },
						[
							192u8, 113u8, 113u8, 133u8, 197u8, 75u8, 88u8, 67u8, 130u8, 207u8,
							37u8, 192u8, 157u8, 159u8, 114u8, 75u8, 83u8, 180u8, 194u8, 180u8,
							96u8, 129u8, 7u8, 138u8, 110u8, 14u8, 229u8, 98u8, 71u8, 22u8, 229u8,
							247u8,
						],
					)
				}
				#[doc = "Sets the amount of funds that the sender should provide for opening an HRMP channel."]
				pub fn set_hrmp_sender_deposit(
					&self,
					new: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<SetHrmpSenderDeposit> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_hrmp_sender_deposit",
						SetHrmpSenderDeposit { new },
						[
							49u8, 38u8, 173u8, 114u8, 66u8, 140u8, 15u8, 151u8, 193u8, 54u8, 128u8,
							108u8, 72u8, 71u8, 28u8, 65u8, 129u8, 199u8, 105u8, 61u8, 96u8, 119u8,
							16u8, 53u8, 115u8, 120u8, 152u8, 122u8, 182u8, 171u8, 233u8, 48u8,
						],
					)
				}
				#[doc = "Sets the amount of funds that the recipient should provide for accepting opening an HRMP"]
				#[doc = "channel."]
				pub fn set_hrmp_recipient_deposit(
					&self,
					new: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<SetHrmpRecipientDeposit> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_hrmp_recipient_deposit",
						SetHrmpRecipientDeposit { new },
						[
							209u8, 212u8, 164u8, 56u8, 71u8, 215u8, 98u8, 250u8, 202u8, 150u8,
							228u8, 6u8, 166u8, 94u8, 171u8, 142u8, 10u8, 253u8, 89u8, 43u8, 6u8,
							173u8, 8u8, 235u8, 52u8, 18u8, 78u8, 129u8, 227u8, 61u8, 74u8, 83u8,
						],
					)
				}
				#[doc = "Sets the maximum number of messages allowed in an HRMP channel at once."]
				pub fn set_hrmp_channel_max_capacity(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetHrmpChannelMaxCapacity> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_hrmp_channel_max_capacity",
						SetHrmpChannelMaxCapacity { new },
						[
							148u8, 109u8, 67u8, 220u8, 1u8, 115u8, 70u8, 93u8, 138u8, 190u8, 60u8,
							220u8, 80u8, 137u8, 246u8, 230u8, 115u8, 162u8, 30u8, 197u8, 11u8,
							33u8, 211u8, 224u8, 49u8, 165u8, 149u8, 155u8, 197u8, 44u8, 6u8, 167u8,
						],
					)
				}
				#[doc = "Sets the maximum total size of messages in bytes allowed in an HRMP channel at once."]
				pub fn set_hrmp_channel_max_total_size(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetHrmpChannelMaxTotalSize> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_hrmp_channel_max_total_size",
						SetHrmpChannelMaxTotalSize { new },
						[
							79u8, 40u8, 207u8, 173u8, 168u8, 143u8, 130u8, 240u8, 205u8, 34u8,
							61u8, 217u8, 215u8, 106u8, 61u8, 181u8, 8u8, 21u8, 105u8, 64u8, 183u8,
							235u8, 39u8, 133u8, 70u8, 77u8, 233u8, 201u8, 222u8, 8u8, 43u8, 159u8,
						],
					)
				}
				#[doc = "Sets the maximum number of inbound HRMP channels a parachain is allowed to accept."]
				pub fn set_hrmp_max_parachain_inbound_channels(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetHrmpMaxParachainInboundChannels> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_hrmp_max_parachain_inbound_channels",
						SetHrmpMaxParachainInboundChannels { new },
						[
							91u8, 215u8, 212u8, 131u8, 140u8, 185u8, 119u8, 184u8, 61u8, 121u8,
							120u8, 73u8, 202u8, 98u8, 124u8, 187u8, 171u8, 84u8, 136u8, 77u8,
							103u8, 169u8, 185u8, 8u8, 214u8, 214u8, 23u8, 195u8, 100u8, 72u8, 45u8,
							12u8,
						],
					)
				}
				#[doc = "Sets the maximum number of inbound HRMP channels a parathread is allowed to accept."]
				pub fn set_hrmp_max_parathread_inbound_channels(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetHrmpMaxParathreadInboundChannels> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_hrmp_max_parathread_inbound_channels",
						SetHrmpMaxParathreadInboundChannels { new },
						[
							209u8, 66u8, 180u8, 20u8, 87u8, 242u8, 219u8, 71u8, 22u8, 145u8, 220u8,
							48u8, 44u8, 42u8, 77u8, 69u8, 255u8, 82u8, 27u8, 125u8, 231u8, 111u8,
							23u8, 32u8, 239u8, 28u8, 200u8, 255u8, 91u8, 207u8, 99u8, 107u8,
						],
					)
				}
				#[doc = "Sets the maximum size of a message that could ever be put into an HRMP channel."]
				pub fn set_hrmp_channel_max_message_size(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetHrmpChannelMaxMessageSize> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_hrmp_channel_max_message_size",
						SetHrmpChannelMaxMessageSize { new },
						[
							17u8, 224u8, 230u8, 9u8, 114u8, 221u8, 138u8, 46u8, 234u8, 151u8, 27u8,
							34u8, 179u8, 67u8, 113u8, 228u8, 128u8, 212u8, 209u8, 125u8, 122u8,
							1u8, 79u8, 28u8, 10u8, 14u8, 83u8, 65u8, 253u8, 173u8, 116u8, 209u8,
						],
					)
				}
				#[doc = "Sets the maximum number of outbound HRMP channels a parachain is allowed to open."]
				pub fn set_hrmp_max_parachain_outbound_channels(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetHrmpMaxParachainOutboundChannels> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_hrmp_max_parachain_outbound_channels",
						SetHrmpMaxParachainOutboundChannels { new },
						[
							26u8, 146u8, 150u8, 88u8, 236u8, 8u8, 63u8, 103u8, 71u8, 11u8, 20u8,
							210u8, 205u8, 106u8, 101u8, 112u8, 116u8, 73u8, 116u8, 136u8, 149u8,
							181u8, 207u8, 95u8, 151u8, 7u8, 98u8, 17u8, 224u8, 157u8, 117u8, 88u8,
						],
					)
				}
				#[doc = "Sets the maximum number of outbound HRMP channels a parathread is allowed to open."]
				pub fn set_hrmp_max_parathread_outbound_channels(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetHrmpMaxParathreadOutboundChannels> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_hrmp_max_parathread_outbound_channels",
						SetHrmpMaxParathreadOutboundChannels { new },
						[
							31u8, 72u8, 93u8, 21u8, 180u8, 156u8, 101u8, 24u8, 145u8, 220u8, 194u8,
							93u8, 176u8, 164u8, 53u8, 123u8, 36u8, 113u8, 152u8, 13u8, 222u8, 54u8,
							175u8, 170u8, 235u8, 68u8, 236u8, 130u8, 178u8, 56u8, 140u8, 31u8,
						],
					)
				}
				#[doc = "Sets the maximum number of outbound HRMP messages can be sent by a candidate."]
				pub fn set_hrmp_max_message_num_per_candidate(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetHrmpMaxMessageNumPerCandidate> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_hrmp_max_message_num_per_candidate",
						SetHrmpMaxMessageNumPerCandidate { new },
						[
							244u8, 94u8, 225u8, 194u8, 133u8, 116u8, 202u8, 238u8, 8u8, 57u8,
							122u8, 125u8, 6u8, 131u8, 84u8, 102u8, 180u8, 67u8, 250u8, 136u8, 30u8,
							29u8, 110u8, 105u8, 219u8, 166u8, 91u8, 140u8, 44u8, 192u8, 37u8,
							185u8,
						],
					)
				}
				#[doc = "Sets the maximum amount of weight any individual upward message may consume."]
				pub fn set_ump_max_individual_weight(
					&self,
					new: ::core::primitive::u64,
				) -> ::subxt::tx::StaticTxPayload<SetUmpMaxIndividualWeight> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_ump_max_individual_weight",
						SetUmpMaxIndividualWeight { new },
						[
							122u8, 12u8, 77u8, 188u8, 26u8, 100u8, 16u8, 182u8, 66u8, 159u8, 127u8,
							111u8, 193u8, 204u8, 119u8, 102u8, 186u8, 12u8, 25u8, 193u8, 178u8,
							253u8, 85u8, 171u8, 199u8, 161u8, 167u8, 242u8, 104u8, 242u8, 149u8,
							161u8,
						],
					)
				}
				#[doc = "Enable or disable PVF pre-checking. Consult the field documentation prior executing."]
				pub fn set_pvf_checking_enabled(
					&self,
					new: ::core::primitive::bool,
				) -> ::subxt::tx::StaticTxPayload<SetPvfCheckingEnabled> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_pvf_checking_enabled",
						SetPvfCheckingEnabled { new },
						[
							123u8, 76u8, 1u8, 112u8, 174u8, 245u8, 18u8, 67u8, 13u8, 29u8, 219u8,
							197u8, 201u8, 112u8, 230u8, 191u8, 37u8, 148u8, 73u8, 125u8, 54u8,
							236u8, 3u8, 80u8, 114u8, 155u8, 244u8, 132u8, 57u8, 63u8, 158u8, 248u8,
						],
					)
				}
				#[doc = "Set the number of session changes after which a PVF pre-checking voting is rejected."]
				pub fn set_pvf_voting_ttl(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetPvfVotingTtl> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_pvf_voting_ttl",
						SetPvfVotingTtl { new },
						[
							17u8, 11u8, 98u8, 217u8, 208u8, 102u8, 238u8, 83u8, 118u8, 123u8, 20u8,
							18u8, 46u8, 212u8, 21u8, 164u8, 61u8, 104u8, 208u8, 204u8, 91u8, 210u8,
							40u8, 6u8, 201u8, 147u8, 46u8, 166u8, 219u8, 227u8, 121u8, 187u8,
						],
					)
				}
				#[doc = "Sets the minimum delay between announcing the upgrade block for a parachain until the"]
				#[doc = "upgrade taking place."]
				#[doc = ""]
				#[doc = "See the field documentation for information and constraints for the new value."]
				pub fn set_minimum_validation_upgrade_delay(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<SetMinimumValidationUpgradeDelay> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_minimum_validation_upgrade_delay",
						SetMinimumValidationUpgradeDelay { new },
						[
							205u8, 188u8, 75u8, 136u8, 228u8, 26u8, 112u8, 27u8, 119u8, 37u8,
							252u8, 109u8, 23u8, 145u8, 21u8, 212u8, 7u8, 28u8, 242u8, 210u8, 182u8,
							111u8, 121u8, 109u8, 50u8, 130u8, 46u8, 127u8, 122u8, 40u8, 141u8,
							242u8,
						],
					)
				}
				#[doc = "Setting this to true will disable consistency checks for the configuration setters."]
				#[doc = "Use with caution."]
				pub fn set_bypass_consistency_check(
					&self,
					new: ::core::primitive::bool,
				) -> ::subxt::tx::StaticTxPayload<SetBypassConsistencyCheck> {
					::subxt::tx::StaticTxPayload::new(
						"Configuration",
						"set_bypass_consistency_check",
						SetBypassConsistencyCheck { new },
						[
							80u8, 66u8, 200u8, 98u8, 54u8, 207u8, 64u8, 99u8, 162u8, 121u8, 26u8,
							173u8, 113u8, 224u8, 240u8, 106u8, 69u8, 191u8, 177u8, 107u8, 34u8,
							74u8, 103u8, 128u8, 252u8, 160u8, 169u8, 246u8, 125u8, 127u8, 153u8,
							129u8,
						],
					)
				}
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The active configuration for the current session."]				pub fn active_config (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: polkadot_runtime_parachains :: configuration :: HostConfiguration < :: core :: primitive :: u32 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
					::subxt::storage::address::StaticStorageAddress::new(
						"Configuration",
						"ActiveConfig",
						vec![],
						[
							159u8, 121u8, 140u8, 88u8, 122u8, 8u8, 91u8, 46u8, 13u8, 126u8, 128u8,
							7u8, 29u8, 95u8, 160u8, 50u8, 194u8, 59u8, 249u8, 41u8, 224u8, 158u8,
							251u8, 44u8, 146u8, 17u8, 34u8, 244u8, 18u8, 0u8, 156u8, 17u8,
						],
					)
				}
				#[doc = " Pending configuration changes."]
				#[doc = ""]
				#[doc = " This is a list of configuration changes, each with a session index at which it should"]
				#[doc = " be applied."]
				#[doc = ""]
				#[doc = " The list is sorted ascending by session index. Also, this list can only contain at most"]
				#[doc = " 2 items: for the next session and for the `scheduled_session`."]				pub fn pending_configs (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < (:: core :: primitive :: u32 , runtime_types :: polkadot_runtime_parachains :: configuration :: HostConfiguration < :: core :: primitive :: u32 > ,) > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
					::subxt::storage::address::StaticStorageAddress::new(
						"Configuration",
						"PendingConfigs",
						vec![],
						[
							143u8, 101u8, 164u8, 41u8, 30u8, 112u8, 74u8, 127u8, 88u8, 27u8, 144u8,
							27u8, 134u8, 253u8, 172u8, 17u8, 247u8, 247u8, 75u8, 186u8, 137u8,
							195u8, 91u8, 37u8, 148u8, 77u8, 29u8, 45u8, 131u8, 28u8, 208u8, 241u8,
						],
					)
				}
				#[doc = " If this is set, then the configuration setters will bypass the consistency checks. This"]
				#[doc = " is meant to be used only as the last resort."]
				pub fn bypass_consistency_check(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::bool>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Configuration",
						"BypassConsistencyCheck",
						vec![],
						[
							42u8, 191u8, 122u8, 163u8, 112u8, 2u8, 148u8, 59u8, 79u8, 219u8, 184u8,
							172u8, 246u8, 136u8, 185u8, 251u8, 189u8, 226u8, 83u8, 129u8, 162u8,
							109u8, 148u8, 75u8, 120u8, 216u8, 44u8, 28u8, 221u8, 78u8, 177u8, 94u8,
						],
					)
				}
			}
		}
	}
	pub mod paras_shared {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub struct TransactionApi;
			impl TransactionApi {}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The current session index."]
				pub fn current_session_index(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParasShared",
						"CurrentSessionIndex",
						vec![],
						[
							83u8, 15u8, 20u8, 55u8, 103u8, 65u8, 76u8, 202u8, 69u8, 14u8, 221u8,
							93u8, 38u8, 163u8, 167u8, 83u8, 18u8, 245u8, 33u8, 175u8, 7u8, 97u8,
							67u8, 186u8, 96u8, 57u8, 147u8, 120u8, 107u8, 91u8, 147u8, 64u8,
						],
					)
				}
				#[doc = " All the validators actively participating in parachain consensus."]
				#[doc = " Indices are into the broader validator set."]
				pub fn active_validator_indices(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<runtime_types::polkadot_primitives::v2::ValidatorIndex>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParasShared",
						"ActiveValidatorIndices",
						vec![],
						[
							123u8, 26u8, 202u8, 53u8, 219u8, 42u8, 54u8, 92u8, 144u8, 74u8, 228u8,
							234u8, 129u8, 216u8, 161u8, 98u8, 199u8, 12u8, 13u8, 231u8, 23u8,
							166u8, 185u8, 209u8, 191u8, 33u8, 231u8, 252u8, 232u8, 44u8, 213u8,
							221u8,
						],
					)
				}
				#[doc = " The parachain attestation keys of the validators actively participating in parachain consensus."]
				#[doc = " This should be the same length as `ActiveValidatorIndices`."]
				pub fn active_validator_keys(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							runtime_types::polkadot_primitives::v2::validator_app::Public,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParasShared",
						"ActiveValidatorKeys",
						vec![],
						[
							33u8, 14u8, 54u8, 86u8, 184u8, 171u8, 194u8, 35u8, 187u8, 252u8, 181u8,
							79u8, 229u8, 134u8, 50u8, 235u8, 162u8, 216u8, 108u8, 160u8, 175u8,
							172u8, 239u8, 114u8, 57u8, 238u8, 9u8, 54u8, 57u8, 196u8, 105u8, 15u8,
						],
					)
				}
			}
		}
	}
	pub mod para_inclusion {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub struct TransactionApi;
			impl TransactionApi {}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::polkadot_runtime_parachains::inclusion::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A candidate was backed. `[candidate, head_data]`"]
			pub struct CandidateBacked(
				pub  runtime_types::polkadot_primitives::v2::CandidateReceipt<
					::subxt::ext::sp_core::H256,
				>,
				pub runtime_types::polkadot_parachain::primitives::HeadData,
				pub runtime_types::polkadot_primitives::v2::CoreIndex,
				pub runtime_types::polkadot_primitives::v2::GroupIndex,
			);
			impl ::subxt::events::StaticEvent for CandidateBacked {
				const PALLET: &'static str = "ParaInclusion";
				const EVENT: &'static str = "CandidateBacked";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A candidate was included. `[candidate, head_data]`"]
			pub struct CandidateIncluded(
				pub  runtime_types::polkadot_primitives::v2::CandidateReceipt<
					::subxt::ext::sp_core::H256,
				>,
				pub runtime_types::polkadot_parachain::primitives::HeadData,
				pub runtime_types::polkadot_primitives::v2::CoreIndex,
				pub runtime_types::polkadot_primitives::v2::GroupIndex,
			);
			impl ::subxt::events::StaticEvent for CandidateIncluded {
				const PALLET: &'static str = "ParaInclusion";
				const EVENT: &'static str = "CandidateIncluded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A candidate timed out. `[candidate, head_data]`"]
			pub struct CandidateTimedOut(
				pub  runtime_types::polkadot_primitives::v2::CandidateReceipt<
					::subxt::ext::sp_core::H256,
				>,
				pub runtime_types::polkadot_parachain::primitives::HeadData,
				pub runtime_types::polkadot_primitives::v2::CoreIndex,
			);
			impl ::subxt::events::StaticEvent for CandidateTimedOut {
				const PALLET: &'static str = "ParaInclusion";
				const EVENT: &'static str = "CandidateTimedOut";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The latest bitfield for each validator, referred to by their index in the validator set."]				pub fn availability_bitfields (& self , _0 : impl :: std :: borrow :: Borrow < runtime_types :: polkadot_primitives :: v2 :: ValidatorIndex > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: polkadot_runtime_parachains :: inclusion :: AvailabilityBitfieldRecord < :: core :: primitive :: u32 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaInclusion",
						"AvailabilityBitfields",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							149u8, 215u8, 123u8, 226u8, 73u8, 240u8, 102u8, 39u8, 243u8, 232u8,
							226u8, 116u8, 65u8, 180u8, 110u8, 4u8, 194u8, 50u8, 60u8, 193u8, 142u8,
							62u8, 20u8, 148u8, 106u8, 162u8, 96u8, 114u8, 215u8, 250u8, 111u8,
							225u8,
						],
					)
				}
				#[doc = " The latest bitfield for each validator, referred to by their index in the validator set."]				pub fn availability_bitfields_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: polkadot_runtime_parachains :: inclusion :: AvailabilityBitfieldRecord < :: core :: primitive :: u32 > > , () , () , :: subxt :: storage :: address :: Yes >{
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaInclusion",
						"AvailabilityBitfields",
						Vec::new(),
						[
							149u8, 215u8, 123u8, 226u8, 73u8, 240u8, 102u8, 39u8, 243u8, 232u8,
							226u8, 116u8, 65u8, 180u8, 110u8, 4u8, 194u8, 50u8, 60u8, 193u8, 142u8,
							62u8, 20u8, 148u8, 106u8, 162u8, 96u8, 114u8, 215u8, 250u8, 111u8,
							225u8,
						],
					)
				}
				#[doc = " Candidates pending availability by `ParaId`."]				pub fn pending_availability (& self , _0 : impl :: std :: borrow :: Borrow < runtime_types :: polkadot_parachain :: primitives :: Id > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: polkadot_runtime_parachains :: inclusion :: CandidatePendingAvailability < :: subxt :: ext :: sp_core :: H256 , :: core :: primitive :: u32 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaInclusion",
						"PendingAvailability",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							54u8, 166u8, 18u8, 56u8, 51u8, 241u8, 31u8, 165u8, 220u8, 138u8, 67u8,
							171u8, 23u8, 101u8, 109u8, 26u8, 211u8, 237u8, 81u8, 143u8, 192u8,
							214u8, 49u8, 42u8, 69u8, 30u8, 168u8, 113u8, 72u8, 12u8, 140u8, 242u8,
						],
					)
				}
				#[doc = " Candidates pending availability by `ParaId`."]				pub fn pending_availability_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: polkadot_runtime_parachains :: inclusion :: CandidatePendingAvailability < :: subxt :: ext :: sp_core :: H256 , :: core :: primitive :: u32 > > , () , () , :: subxt :: storage :: address :: Yes >{
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaInclusion",
						"PendingAvailability",
						Vec::new(),
						[
							54u8, 166u8, 18u8, 56u8, 51u8, 241u8, 31u8, 165u8, 220u8, 138u8, 67u8,
							171u8, 23u8, 101u8, 109u8, 26u8, 211u8, 237u8, 81u8, 143u8, 192u8,
							214u8, 49u8, 42u8, 69u8, 30u8, 168u8, 113u8, 72u8, 12u8, 140u8, 242u8,
						],
					)
				}
				#[doc = " The commitments of candidates pending availability, by `ParaId`."]
				pub fn pending_availability_commitments(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_primitives::v2::CandidateCommitments<
							::core::primitive::u32,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaInclusion",
						"PendingAvailabilityCommitments",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							146u8, 206u8, 148u8, 102u8, 55u8, 101u8, 144u8, 33u8, 197u8, 232u8,
							64u8, 205u8, 216u8, 21u8, 247u8, 170u8, 237u8, 115u8, 144u8, 43u8,
							106u8, 87u8, 82u8, 39u8, 11u8, 87u8, 149u8, 195u8, 56u8, 59u8, 54u8,
							8u8,
						],
					)
				}
				#[doc = " The commitments of candidates pending availability, by `ParaId`."]
				pub fn pending_availability_commitments_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_primitives::v2::CandidateCommitments<
							::core::primitive::u32,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaInclusion",
						"PendingAvailabilityCommitments",
						Vec::new(),
						[
							146u8, 206u8, 148u8, 102u8, 55u8, 101u8, 144u8, 33u8, 197u8, 232u8,
							64u8, 205u8, 216u8, 21u8, 247u8, 170u8, 237u8, 115u8, 144u8, 43u8,
							106u8, 87u8, 82u8, 39u8, 11u8, 87u8, 149u8, 195u8, 56u8, 59u8, 54u8,
							8u8,
						],
					)
				}
			}
		}
	}
	pub mod para_inherent {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Enter {
				pub data: runtime_types::polkadot_primitives::v2::InherentData<
					runtime_types::sp_runtime::generic::header::Header<
						::core::primitive::u32,
						runtime_types::sp_runtime::traits::BlakeTwo256,
					>,
				>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Enter the paras inherent. This will process bitfields and backed candidates."]
				pub fn enter(
					&self,
					data: runtime_types::polkadot_primitives::v2::InherentData<
						runtime_types::sp_runtime::generic::header::Header<
							::core::primitive::u32,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
					>,
				) -> ::subxt::tx::StaticTxPayload<Enter> {
					::subxt::tx::StaticTxPayload::new(
						"ParaInherent",
						"enter",
						Enter { data },
						[
							92u8, 247u8, 59u8, 6u8, 2u8, 102u8, 76u8, 147u8, 46u8, 232u8, 38u8,
							191u8, 145u8, 155u8, 23u8, 39u8, 228u8, 95u8, 57u8, 249u8, 247u8, 20u8,
							9u8, 189u8, 156u8, 187u8, 207u8, 107u8, 0u8, 13u8, 228u8, 6u8,
						],
					)
				}
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Whether the paras inherent was included within this block."]
				#[doc = ""]
				#[doc = " The `Option<()>` is effectively a `bool`, but it never hits storage in the `None` variant"]
				#[doc = " due to the guarantees of FRAME's storage APIs."]
				#[doc = ""]
				#[doc = " If this is `None` at the end of the block, we panic and render the block invalid."]
				pub fn included(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<()>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaInherent",
						"Included",
						vec![],
						[
							208u8, 213u8, 76u8, 64u8, 90u8, 141u8, 144u8, 52u8, 220u8, 35u8, 143u8,
							171u8, 45u8, 59u8, 9u8, 218u8, 29u8, 186u8, 139u8, 203u8, 205u8, 12u8,
							10u8, 2u8, 27u8, 167u8, 182u8, 244u8, 167u8, 220u8, 44u8, 16u8,
						],
					)
				}
				#[doc = " Scraped on chain data for extracting resolved disputes as well as backing votes."]
				pub fn on_chain_votes(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_primitives::v2::ScrapedOnChainVotes<
							::subxt::ext::sp_core::H256,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaInherent",
						"OnChainVotes",
						vec![],
						[
							187u8, 34u8, 219u8, 197u8, 202u8, 214u8, 140u8, 152u8, 253u8, 65u8,
							206u8, 217u8, 36u8, 40u8, 107u8, 215u8, 135u8, 115u8, 35u8, 61u8,
							180u8, 131u8, 0u8, 184u8, 193u8, 76u8, 165u8, 63u8, 106u8, 222u8,
							126u8, 113u8,
						],
					)
				}
			}
		}
	}
	pub mod para_scheduler {
		use super::{root_mod, runtime_types};
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " All the validator groups. One for each core. Indices are into `ActiveValidators` - not the"]
				#[doc = " broader set of Polkadot validators, but instead just the subset used for parachains during"]
				#[doc = " this session."]
				#[doc = ""]
				#[doc = " Bound: The number of cores is the sum of the numbers of parachains and parathread multiplexers."]
				#[doc = " Reasonably, 100-1000. The dominant factor is the number of validators: safe upper bound at 10k."]
				pub fn validator_groups(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							::std::vec::Vec<runtime_types::polkadot_primitives::v2::ValidatorIndex>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaScheduler",
						"ValidatorGroups",
						vec![],
						[
							175u8, 187u8, 69u8, 76u8, 211u8, 36u8, 162u8, 147u8, 83u8, 65u8, 83u8,
							44u8, 241u8, 112u8, 246u8, 14u8, 237u8, 255u8, 248u8, 58u8, 44u8,
							207u8, 159u8, 112u8, 31u8, 90u8, 15u8, 85u8, 4u8, 212u8, 215u8, 211u8,
						],
					)
				}
				#[doc = " A queue of upcoming claims and which core they should be mapped onto."]
				#[doc = ""]
				#[doc = " The number of queued claims is bounded at the `scheduling_lookahead`"]
				#[doc = " multiplied by the number of parathread multiplexer cores. Reasonably, 10 * 50 = 500."]
				pub fn parathread_queue(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_parachains::scheduler::ParathreadClaimQueue,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaScheduler",
						"ParathreadQueue",
						vec![],
						[
							79u8, 144u8, 191u8, 114u8, 235u8, 55u8, 133u8, 208u8, 73u8, 97u8, 73u8,
							148u8, 96u8, 185u8, 110u8, 95u8, 132u8, 54u8, 244u8, 86u8, 50u8, 218u8,
							121u8, 226u8, 153u8, 58u8, 232u8, 202u8, 132u8, 147u8, 168u8, 48u8,
						],
					)
				}
				#[doc = " One entry for each availability core. Entries are `None` if the core is not currently occupied. Can be"]
				#[doc = " temporarily `Some` if scheduled but not occupied."]
				#[doc = " The i'th parachain belongs to the i'th core, with the remaining cores all being"]
				#[doc = " parathread-multiplexers."]
				#[doc = ""]
				#[doc = " Bounded by the maximum of either of these two values:"]
				#[doc = "   * The number of parachains and parathread multiplexers"]
				#[doc = "   * The number of validators divided by `configuration.max_validators_per_core`."]
				pub fn availability_cores(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							::core::option::Option<
								runtime_types::polkadot_primitives::v2::CoreOccupied,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaScheduler",
						"AvailabilityCores",
						vec![],
						[
							103u8, 94u8, 52u8, 17u8, 118u8, 25u8, 254u8, 190u8, 74u8, 91u8, 64u8,
							205u8, 243u8, 113u8, 143u8, 166u8, 193u8, 110u8, 214u8, 151u8, 24u8,
							112u8, 69u8, 131u8, 235u8, 78u8, 240u8, 120u8, 240u8, 68u8, 56u8,
							215u8,
						],
					)
				}
				#[doc = " An index used to ensure that only one claim on a parathread exists in the queue or is"]
				#[doc = " currently being handled by an occupied core."]
				#[doc = ""]
				#[doc = " Bounded by the number of parathread cores and scheduling lookahead. Reasonably, 10 * 50 = 500."]
				pub fn parathread_claim_index(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaScheduler",
						"ParathreadClaimIndex",
						vec![],
						[
							64u8, 17u8, 173u8, 35u8, 14u8, 16u8, 149u8, 200u8, 118u8, 211u8, 130u8,
							15u8, 124u8, 112u8, 44u8, 220u8, 156u8, 132u8, 119u8, 148u8, 24u8,
							120u8, 252u8, 246u8, 204u8, 119u8, 206u8, 85u8, 44u8, 210u8, 135u8,
							83u8,
						],
					)
				}
				#[doc = " The block number where the session start occurred. Used to track how many group rotations have occurred."]
				#[doc = ""]
				#[doc = " Note that in the context of parachains modules the session change is signaled during"]
				#[doc = " the block and enacted at the end of the block (at the finalization stage, to be exact)."]
				#[doc = " Thus for all intents and purposes the effect of the session change is observed at the"]
				#[doc = " block following the session change, block number of which we save in this storage value."]
				pub fn session_start_block(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaScheduler",
						"SessionStartBlock",
						vec![],
						[
							122u8, 37u8, 150u8, 1u8, 185u8, 201u8, 168u8, 67u8, 55u8, 17u8, 101u8,
							18u8, 133u8, 212u8, 6u8, 73u8, 191u8, 204u8, 229u8, 22u8, 185u8, 120u8,
							24u8, 245u8, 121u8, 215u8, 124u8, 210u8, 49u8, 28u8, 26u8, 80u8,
						],
					)
				}
				#[doc = " Currently scheduled cores - free but up to be occupied."]
				#[doc = ""]
				#[doc = " Bounded by the number of cores: one for each parachain and parathread multiplexer."]
				#[doc = ""]
				#[doc = " The value contained here will not be valid after the end of a block. Runtime APIs should be used to determine scheduled cores/"]
				#[doc = " for the upcoming block."]
				pub fn scheduled(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							runtime_types::polkadot_runtime_parachains::scheduler::CoreAssignment,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaScheduler",
						"Scheduled",
						vec![],
						[
							246u8, 105u8, 102u8, 107u8, 143u8, 92u8, 220u8, 69u8, 71u8, 102u8,
							212u8, 157u8, 56u8, 112u8, 42u8, 179u8, 183u8, 139u8, 128u8, 81u8,
							239u8, 84u8, 103u8, 126u8, 82u8, 247u8, 39u8, 39u8, 231u8, 218u8,
							131u8, 53u8,
						],
					)
				}
			}
		}
	}
	pub mod paras {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceSetCurrentCode {
				pub para: runtime_types::polkadot_parachain::primitives::Id,
				pub new_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceSetCurrentHead {
				pub para: runtime_types::polkadot_parachain::primitives::Id,
				pub new_head: runtime_types::polkadot_parachain::primitives::HeadData,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceScheduleCodeUpgrade {
				pub para: runtime_types::polkadot_parachain::primitives::Id,
				pub new_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
				pub relay_parent_number: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceNoteNewHead {
				pub para: runtime_types::polkadot_parachain::primitives::Id,
				pub new_head: runtime_types::polkadot_parachain::primitives::HeadData,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceQueueAction {
				pub para: runtime_types::polkadot_parachain::primitives::Id,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct AddTrustedValidationCode {
				pub validation_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct PokeUnusedValidationCode {
				pub validation_code_hash:
					runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct IncludePvfCheckStatement {
				pub stmt: runtime_types::polkadot_primitives::v2::PvfCheckStatement,
				pub signature: runtime_types::polkadot_primitives::v2::validator_app::Signature,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Set the storage for the parachain validation code immediately."]
				pub fn force_set_current_code(
					&self,
					para: runtime_types::polkadot_parachain::primitives::Id,
					new_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
				) -> ::subxt::tx::StaticTxPayload<ForceSetCurrentCode> {
					::subxt::tx::StaticTxPayload::new(
						"Paras",
						"force_set_current_code",
						ForceSetCurrentCode { para, new_code },
						[
							56u8, 59u8, 48u8, 185u8, 106u8, 99u8, 250u8, 32u8, 207u8, 2u8, 4u8,
							110u8, 165u8, 131u8, 22u8, 33u8, 248u8, 175u8, 186u8, 6u8, 118u8, 51u8,
							74u8, 239u8, 68u8, 122u8, 148u8, 242u8, 193u8, 131u8, 6u8, 135u8,
						],
					)
				}
				#[doc = "Set the storage for the current parachain head data immediately."]
				pub fn force_set_current_head(
					&self,
					para: runtime_types::polkadot_parachain::primitives::Id,
					new_head: runtime_types::polkadot_parachain::primitives::HeadData,
				) -> ::subxt::tx::StaticTxPayload<ForceSetCurrentHead> {
					::subxt::tx::StaticTxPayload::new(
						"Paras",
						"force_set_current_head",
						ForceSetCurrentHead { para, new_head },
						[
							203u8, 70u8, 33u8, 168u8, 133u8, 64u8, 146u8, 137u8, 156u8, 104u8,
							183u8, 26u8, 74u8, 227u8, 154u8, 224u8, 75u8, 85u8, 143u8, 51u8, 60u8,
							194u8, 59u8, 94u8, 100u8, 84u8, 194u8, 100u8, 153u8, 9u8, 222u8, 63u8,
						],
					)
				}
				#[doc = "Schedule an upgrade as if it was scheduled in the given relay parent block."]
				pub fn force_schedule_code_upgrade(
					&self,
					para: runtime_types::polkadot_parachain::primitives::Id,
					new_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
					relay_parent_number: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<ForceScheduleCodeUpgrade> {
					::subxt::tx::StaticTxPayload::new(
						"Paras",
						"force_schedule_code_upgrade",
						ForceScheduleCodeUpgrade { para, new_code, relay_parent_number },
						[
							30u8, 210u8, 178u8, 31u8, 48u8, 144u8, 167u8, 117u8, 220u8, 36u8,
							175u8, 220u8, 145u8, 193u8, 20u8, 98u8, 149u8, 130u8, 66u8, 54u8, 20u8,
							204u8, 231u8, 116u8, 203u8, 179u8, 253u8, 106u8, 55u8, 58u8, 116u8,
							109u8,
						],
					)
				}
				#[doc = "Note a new block head for para within the context of the current block."]
				pub fn force_note_new_head(
					&self,
					para: runtime_types::polkadot_parachain::primitives::Id,
					new_head: runtime_types::polkadot_parachain::primitives::HeadData,
				) -> ::subxt::tx::StaticTxPayload<ForceNoteNewHead> {
					::subxt::tx::StaticTxPayload::new(
						"Paras",
						"force_note_new_head",
						ForceNoteNewHead { para, new_head },
						[
							83u8, 93u8, 166u8, 142u8, 213u8, 1u8, 243u8, 73u8, 192u8, 164u8, 104u8,
							206u8, 99u8, 250u8, 31u8, 222u8, 231u8, 54u8, 12u8, 45u8, 92u8, 74u8,
							248u8, 50u8, 180u8, 86u8, 251u8, 172u8, 227u8, 88u8, 45u8, 127u8,
						],
					)
				}
				#[doc = "Put a parachain directly into the next session's action queue."]
				#[doc = "We can't queue it any sooner than this without going into the"]
				#[doc = "initializer..."]
				pub fn force_queue_action(
					&self,
					para: runtime_types::polkadot_parachain::primitives::Id,
				) -> ::subxt::tx::StaticTxPayload<ForceQueueAction> {
					::subxt::tx::StaticTxPayload::new(
						"Paras",
						"force_queue_action",
						ForceQueueAction { para },
						[
							195u8, 243u8, 79u8, 34u8, 111u8, 246u8, 109u8, 90u8, 251u8, 137u8,
							48u8, 23u8, 117u8, 29u8, 26u8, 200u8, 37u8, 64u8, 36u8, 254u8, 224u8,
							99u8, 165u8, 246u8, 8u8, 76u8, 250u8, 36u8, 141u8, 67u8, 185u8, 17u8,
						],
					)
				}
				#[doc = "Adds the validation code to the storage."]
				#[doc = ""]
				#[doc = "The code will not be added if it is already present. Additionally, if PVF pre-checking"]
				#[doc = "is running for that code, it will be instantly accepted."]
				#[doc = ""]
				#[doc = "Otherwise, the code will be added into the storage. Note that the code will be added"]
				#[doc = "into storage with reference count 0. This is to account the fact that there are no users"]
				#[doc = "for this code yet. The caller will have to make sure that this code eventually gets"]
				#[doc = "used by some parachain or removed from the storage to avoid storage leaks. For the latter"]
				#[doc = "prefer to use the `poke_unused_validation_code` dispatchable to raw storage manipulation."]
				#[doc = ""]
				#[doc = "This function is mainly meant to be used for upgrading parachains that do not follow"]
				#[doc = "the go-ahead signal while the PVF pre-checking feature is enabled."]
				pub fn add_trusted_validation_code(
					&self,
					validation_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
				) -> ::subxt::tx::StaticTxPayload<AddTrustedValidationCode> {
					::subxt::tx::StaticTxPayload::new(
						"Paras",
						"add_trusted_validation_code",
						AddTrustedValidationCode { validation_code },
						[
							160u8, 199u8, 245u8, 178u8, 58u8, 65u8, 79u8, 199u8, 53u8, 60u8, 84u8,
							225u8, 2u8, 145u8, 154u8, 204u8, 165u8, 171u8, 173u8, 223u8, 59u8,
							196u8, 37u8, 12u8, 243u8, 158u8, 77u8, 184u8, 58u8, 64u8, 133u8, 71u8,
						],
					)
				}
				#[doc = "Remove the validation code from the storage iff the reference count is 0."]
				#[doc = ""]
				#[doc = "This is better than removing the storage directly, because it will not remove the code"]
				#[doc = "that was suddenly got used by some parachain while this dispatchable was pending"]
				#[doc = "dispatching."]
				pub fn poke_unused_validation_code(
					&self,
					validation_code_hash : runtime_types :: polkadot_parachain :: primitives :: ValidationCodeHash,
				) -> ::subxt::tx::StaticTxPayload<PokeUnusedValidationCode> {
					::subxt::tx::StaticTxPayload::new(
						"Paras",
						"poke_unused_validation_code",
						PokeUnusedValidationCode { validation_code_hash },
						[
							98u8, 9u8, 24u8, 180u8, 8u8, 144u8, 36u8, 28u8, 111u8, 83u8, 162u8,
							160u8, 66u8, 119u8, 177u8, 117u8, 143u8, 233u8, 241u8, 128u8, 189u8,
							118u8, 241u8, 30u8, 74u8, 171u8, 193u8, 177u8, 233u8, 12u8, 254u8,
							146u8,
						],
					)
				}
				#[doc = "Includes a statement for a PVF pre-checking vote. Potentially, finalizes the vote and"]
				#[doc = "enacts the results if that was the last vote before achieving the supermajority."]
				pub fn include_pvf_check_statement(
					&self,
					stmt: runtime_types::polkadot_primitives::v2::PvfCheckStatement,
					signature: runtime_types::polkadot_primitives::v2::validator_app::Signature,
				) -> ::subxt::tx::StaticTxPayload<IncludePvfCheckStatement> {
					::subxt::tx::StaticTxPayload::new(
						"Paras",
						"include_pvf_check_statement",
						IncludePvfCheckStatement { stmt, signature },
						[
							22u8, 136u8, 241u8, 59u8, 36u8, 249u8, 239u8, 255u8, 169u8, 117u8,
							19u8, 58u8, 214u8, 16u8, 135u8, 65u8, 13u8, 250u8, 5u8, 41u8, 144u8,
							29u8, 207u8, 73u8, 215u8, 221u8, 1u8, 253u8, 123u8, 110u8, 6u8, 196u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::polkadot_runtime_parachains::paras::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Current code has been updated for a Para. `para_id`"]
			pub struct CurrentCodeUpdated(pub runtime_types::polkadot_parachain::primitives::Id);
			impl ::subxt::events::StaticEvent for CurrentCodeUpdated {
				const PALLET: &'static str = "Paras";
				const EVENT: &'static str = "CurrentCodeUpdated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Current head has been updated for a Para. `para_id`"]
			pub struct CurrentHeadUpdated(pub runtime_types::polkadot_parachain::primitives::Id);
			impl ::subxt::events::StaticEvent for CurrentHeadUpdated {
				const PALLET: &'static str = "Paras";
				const EVENT: &'static str = "CurrentHeadUpdated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A code upgrade has been scheduled for a Para. `para_id`"]
			pub struct CodeUpgradeScheduled(pub runtime_types::polkadot_parachain::primitives::Id);
			impl ::subxt::events::StaticEvent for CodeUpgradeScheduled {
				const PALLET: &'static str = "Paras";
				const EVENT: &'static str = "CodeUpgradeScheduled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A new head has been noted for a Para. `para_id`"]
			pub struct NewHeadNoted(pub runtime_types::polkadot_parachain::primitives::Id);
			impl ::subxt::events::StaticEvent for NewHeadNoted {
				const PALLET: &'static str = "Paras";
				const EVENT: &'static str = "NewHeadNoted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A para has been queued to execute pending actions. `para_id`"]
			pub struct ActionQueued(
				pub runtime_types::polkadot_parachain::primitives::Id,
				pub ::core::primitive::u32,
			);
			impl ::subxt::events::StaticEvent for ActionQueued {
				const PALLET: &'static str = "Paras";
				const EVENT: &'static str = "ActionQueued";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The given para either initiated or subscribed to a PVF check for the given validation"]
			#[doc = "code. `code_hash` `para_id`"]
			pub struct PvfCheckStarted(
				pub runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
				pub runtime_types::polkadot_parachain::primitives::Id,
			);
			impl ::subxt::events::StaticEvent for PvfCheckStarted {
				const PALLET: &'static str = "Paras";
				const EVENT: &'static str = "PvfCheckStarted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The given validation code was accepted by the PVF pre-checking vote."]
			#[doc = "`code_hash` `para_id`"]
			pub struct PvfCheckAccepted(
				pub runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
				pub runtime_types::polkadot_parachain::primitives::Id,
			);
			impl ::subxt::events::StaticEvent for PvfCheckAccepted {
				const PALLET: &'static str = "Paras";
				const EVENT: &'static str = "PvfCheckAccepted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The given validation code was rejected by the PVF pre-checking vote."]
			#[doc = "`code_hash` `para_id`"]
			pub struct PvfCheckRejected(
				pub runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
				pub runtime_types::polkadot_parachain::primitives::Id,
			);
			impl ::subxt::events::StaticEvent for PvfCheckRejected {
				const PALLET: &'static str = "Paras";
				const EVENT: &'static str = "PvfCheckRejected";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " All currently active PVF pre-checking votes."]
				#[doc = ""]
				#[doc = " Invariant:"]
				#[doc = " - There are no PVF pre-checking votes that exists in list but not in the set and vice versa."]
				pub fn pvf_active_vote_map(
					&self,
					_0: impl ::std::borrow::Borrow<
						runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
					>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_parachains::paras::PvfCheckActiveVoteState<
							::core::primitive::u32,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"PvfActiveVoteMap",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							84u8, 214u8, 221u8, 221u8, 244u8, 56u8, 135u8, 87u8, 252u8, 39u8,
							188u8, 13u8, 196u8, 25u8, 214u8, 186u8, 152u8, 181u8, 190u8, 39u8,
							235u8, 211u8, 236u8, 114u8, 67u8, 85u8, 138u8, 43u8, 248u8, 134u8,
							124u8, 73u8,
						],
					)
				}
				#[doc = " All currently active PVF pre-checking votes."]
				#[doc = ""]
				#[doc = " Invariant:"]
				#[doc = " - There are no PVF pre-checking votes that exists in list but not in the set and vice versa."]
				pub fn pvf_active_vote_map_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_parachains::paras::PvfCheckActiveVoteState<
							::core::primitive::u32,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"PvfActiveVoteMap",
						Vec::new(),
						[
							84u8, 214u8, 221u8, 221u8, 244u8, 56u8, 135u8, 87u8, 252u8, 39u8,
							188u8, 13u8, 196u8, 25u8, 214u8, 186u8, 152u8, 181u8, 190u8, 39u8,
							235u8, 211u8, 236u8, 114u8, 67u8, 85u8, 138u8, 43u8, 248u8, 134u8,
							124u8, 73u8,
						],
					)
				}
				#[doc = " The list of all currently active PVF votes. Auxiliary to `PvfActiveVoteMap`."]
				pub fn pvf_active_vote_list(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"PvfActiveVoteList",
						vec![],
						[
							196u8, 23u8, 108u8, 162u8, 29u8, 33u8, 49u8, 219u8, 127u8, 26u8, 241u8,
							58u8, 102u8, 43u8, 156u8, 3u8, 87u8, 153u8, 195u8, 96u8, 68u8, 132u8,
							170u8, 162u8, 18u8, 156u8, 121u8, 63u8, 53u8, 91u8, 68u8, 69u8,
						],
					)
				}
				#[doc = " All parachains. Ordered ascending by `ParaId`. Parathreads are not included."]
				#[doc = ""]
				#[doc = " Consider using the [`ParachainsCache`] type of modifying."]
				pub fn parachains(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"Parachains",
						vec![],
						[
							85u8, 234u8, 218u8, 69u8, 20u8, 169u8, 235u8, 6u8, 69u8, 126u8, 28u8,
							18u8, 57u8, 93u8, 238u8, 7u8, 167u8, 221u8, 75u8, 35u8, 36u8, 4u8,
							46u8, 55u8, 234u8, 123u8, 122u8, 173u8, 13u8, 205u8, 58u8, 226u8,
						],
					)
				}
				#[doc = " The current lifecycle of a all known Para IDs."]
				pub fn para_lifecycles(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_parachains::paras::ParaLifecycle,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"ParaLifecycles",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							221u8, 103u8, 112u8, 222u8, 86u8, 2u8, 172u8, 187u8, 174u8, 106u8, 4u8,
							253u8, 35u8, 73u8, 18u8, 78u8, 25u8, 31u8, 124u8, 110u8, 81u8, 62u8,
							215u8, 228u8, 183u8, 132u8, 138u8, 213u8, 186u8, 209u8, 191u8, 186u8,
						],
					)
				}
				#[doc = " The current lifecycle of a all known Para IDs."]
				pub fn para_lifecycles_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_parachains::paras::ParaLifecycle,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"ParaLifecycles",
						Vec::new(),
						[
							221u8, 103u8, 112u8, 222u8, 86u8, 2u8, 172u8, 187u8, 174u8, 106u8, 4u8,
							253u8, 35u8, 73u8, 18u8, 78u8, 25u8, 31u8, 124u8, 110u8, 81u8, 62u8,
							215u8, 228u8, 183u8, 132u8, 138u8, 213u8, 186u8, 209u8, 191u8, 186u8,
						],
					)
				}
				#[doc = " The head-data of every registered para."]
				pub fn heads(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_parachain::primitives::HeadData,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"Heads",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							122u8, 38u8, 181u8, 121u8, 245u8, 100u8, 136u8, 233u8, 237u8, 248u8,
							127u8, 2u8, 147u8, 41u8, 202u8, 242u8, 238u8, 70u8, 55u8, 200u8, 15u8,
							106u8, 138u8, 108u8, 192u8, 61u8, 158u8, 134u8, 131u8, 142u8, 70u8,
							3u8,
						],
					)
				}
				#[doc = " The head-data of every registered para."]
				pub fn heads_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_parachain::primitives::HeadData,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"Heads",
						Vec::new(),
						[
							122u8, 38u8, 181u8, 121u8, 245u8, 100u8, 136u8, 233u8, 237u8, 248u8,
							127u8, 2u8, 147u8, 41u8, 202u8, 242u8, 238u8, 70u8, 55u8, 200u8, 15u8,
							106u8, 138u8, 108u8, 192u8, 61u8, 158u8, 134u8, 131u8, 142u8, 70u8,
							3u8,
						],
					)
				}
				#[doc = " The validation code hash of every live para."]
				#[doc = ""]
				#[doc = " Corresponding code can be retrieved with [`CodeByHash`]."]
				pub fn current_code_hash(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"CurrentCodeHash",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							179u8, 145u8, 45u8, 44u8, 130u8, 240u8, 50u8, 128u8, 190u8, 133u8,
							66u8, 85u8, 47u8, 141u8, 56u8, 87u8, 131u8, 99u8, 170u8, 203u8, 8u8,
							51u8, 123u8, 73u8, 206u8, 30u8, 173u8, 35u8, 157u8, 195u8, 104u8,
							236u8,
						],
					)
				}
				#[doc = " The validation code hash of every live para."]
				#[doc = ""]
				#[doc = " Corresponding code can be retrieved with [`CodeByHash`]."]
				pub fn current_code_hash_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"CurrentCodeHash",
						Vec::new(),
						[
							179u8, 145u8, 45u8, 44u8, 130u8, 240u8, 50u8, 128u8, 190u8, 133u8,
							66u8, 85u8, 47u8, 141u8, 56u8, 87u8, 131u8, 99u8, 170u8, 203u8, 8u8,
							51u8, 123u8, 73u8, 206u8, 30u8, 173u8, 35u8, 157u8, 195u8, 104u8,
							236u8,
						],
					)
				}
				#[doc = " Actual past code hash, indicated by the para id as well as the block number at which it"]
				#[doc = " became outdated."]
				#[doc = ""]
				#[doc = " Corresponding code can be retrieved with [`CodeByHash`]."]
				pub fn past_code_hash(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"PastCodeHash",
						vec![::subxt::storage::address::StorageMapKey::new(
							&(_0.borrow(), _1.borrow()),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							241u8, 112u8, 128u8, 226u8, 163u8, 193u8, 77u8, 78u8, 177u8, 146u8,
							31u8, 143u8, 44u8, 140u8, 159u8, 134u8, 221u8, 129u8, 36u8, 224u8,
							46u8, 119u8, 245u8, 253u8, 55u8, 22u8, 137u8, 187u8, 71u8, 94u8, 88u8,
							124u8,
						],
					)
				}
				#[doc = " Actual past code hash, indicated by the para id as well as the block number at which it"]
				#[doc = " became outdated."]
				#[doc = ""]
				#[doc = " Corresponding code can be retrieved with [`CodeByHash`]."]
				pub fn past_code_hash_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"PastCodeHash",
						Vec::new(),
						[
							241u8, 112u8, 128u8, 226u8, 163u8, 193u8, 77u8, 78u8, 177u8, 146u8,
							31u8, 143u8, 44u8, 140u8, 159u8, 134u8, 221u8, 129u8, 36u8, 224u8,
							46u8, 119u8, 245u8, 253u8, 55u8, 22u8, 137u8, 187u8, 71u8, 94u8, 88u8,
							124u8,
						],
					)
				}
				#[doc = " Past code of parachains. The parachains themselves may not be registered anymore,"]
				#[doc = " but we also keep their code on-chain for the same amount of time as outdated code"]
				#[doc = " to keep it available for secondary checkers."]
				pub fn past_code_meta(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_parachains::paras::ParaPastCodeMeta<
							::core::primitive::u32,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"PastCodeMeta",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							251u8, 52u8, 126u8, 12u8, 21u8, 178u8, 151u8, 195u8, 153u8, 17u8,
							215u8, 242u8, 118u8, 192u8, 86u8, 72u8, 36u8, 97u8, 245u8, 134u8,
							155u8, 117u8, 85u8, 93u8, 225u8, 209u8, 63u8, 164u8, 168u8, 72u8,
							171u8, 228u8,
						],
					)
				}
				#[doc = " Past code of parachains. The parachains themselves may not be registered anymore,"]
				#[doc = " but we also keep their code on-chain for the same amount of time as outdated code"]
				#[doc = " to keep it available for secondary checkers."]
				pub fn past_code_meta_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_parachains::paras::ParaPastCodeMeta<
							::core::primitive::u32,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"PastCodeMeta",
						Vec::new(),
						[
							251u8, 52u8, 126u8, 12u8, 21u8, 178u8, 151u8, 195u8, 153u8, 17u8,
							215u8, 242u8, 118u8, 192u8, 86u8, 72u8, 36u8, 97u8, 245u8, 134u8,
							155u8, 117u8, 85u8, 93u8, 225u8, 209u8, 63u8, 164u8, 168u8, 72u8,
							171u8, 228u8,
						],
					)
				}
				#[doc = " Which paras have past code that needs pruning and the relay-chain block at which the code was replaced."]
				#[doc = " Note that this is the actual height of the included block, not the expected height at which the"]
				#[doc = " code upgrade would be applied, although they may be equal."]
				#[doc = " This is to ensure the entire acceptance period is covered, not an offset acceptance period starting"]
				#[doc = " from the time at which the parachain perceives a code upgrade as having occurred."]
				#[doc = " Multiple entries for a single para are permitted. Ordered ascending by block number."]
				pub fn past_code_pruning(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<(
							runtime_types::polkadot_parachain::primitives::Id,
							::core::primitive::u32,
						)>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"PastCodePruning",
						vec![],
						[
							59u8, 26u8, 175u8, 129u8, 174u8, 27u8, 239u8, 77u8, 38u8, 130u8, 37u8,
							134u8, 62u8, 28u8, 218u8, 176u8, 16u8, 137u8, 175u8, 90u8, 248u8, 44u8,
							248u8, 172u8, 231u8, 6u8, 36u8, 190u8, 109u8, 237u8, 228u8, 135u8,
						],
					)
				}
				#[doc = " The block number at which the planned code change is expected for a para."]
				#[doc = " The change will be applied after the first parablock for this ID included which executes"]
				#[doc = " in the context of a relay chain block with a number >= `expected_at`."]
				pub fn future_code_upgrades(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"FutureCodeUpgrades",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							40u8, 134u8, 185u8, 28u8, 48u8, 105u8, 152u8, 229u8, 166u8, 235u8,
							32u8, 173u8, 64u8, 63u8, 151u8, 157u8, 190u8, 214u8, 7u8, 8u8, 6u8,
							128u8, 21u8, 104u8, 175u8, 71u8, 130u8, 207u8, 158u8, 115u8, 172u8,
							149u8,
						],
					)
				}
				#[doc = " The block number at which the planned code change is expected for a para."]
				#[doc = " The change will be applied after the first parablock for this ID included which executes"]
				#[doc = " in the context of a relay chain block with a number >= `expected_at`."]
				pub fn future_code_upgrades_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"FutureCodeUpgrades",
						Vec::new(),
						[
							40u8, 134u8, 185u8, 28u8, 48u8, 105u8, 152u8, 229u8, 166u8, 235u8,
							32u8, 173u8, 64u8, 63u8, 151u8, 157u8, 190u8, 214u8, 7u8, 8u8, 6u8,
							128u8, 21u8, 104u8, 175u8, 71u8, 130u8, 207u8, 158u8, 115u8, 172u8,
							149u8,
						],
					)
				}
				#[doc = " The actual future code hash of a para."]
				#[doc = ""]
				#[doc = " Corresponding code can be retrieved with [`CodeByHash`]."]
				pub fn future_code_hash(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"FutureCodeHash",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							252u8, 24u8, 95u8, 200u8, 207u8, 91u8, 66u8, 103u8, 54u8, 171u8, 191u8,
							187u8, 73u8, 170u8, 132u8, 59u8, 205u8, 125u8, 68u8, 194u8, 122u8,
							124u8, 190u8, 53u8, 241u8, 225u8, 131u8, 53u8, 44u8, 145u8, 244u8,
							216u8,
						],
					)
				}
				#[doc = " The actual future code hash of a para."]
				#[doc = ""]
				#[doc = " Corresponding code can be retrieved with [`CodeByHash`]."]
				pub fn future_code_hash_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"FutureCodeHash",
						Vec::new(),
						[
							252u8, 24u8, 95u8, 200u8, 207u8, 91u8, 66u8, 103u8, 54u8, 171u8, 191u8,
							187u8, 73u8, 170u8, 132u8, 59u8, 205u8, 125u8, 68u8, 194u8, 122u8,
							124u8, 190u8, 53u8, 241u8, 225u8, 131u8, 53u8, 44u8, 145u8, 244u8,
							216u8,
						],
					)
				}
				#[doc = " This is used by the relay-chain to communicate to a parachain a go-ahead with in the upgrade procedure."]
				#[doc = ""]
				#[doc = " This value is absent when there are no upgrades scheduled or during the time the relay chain"]
				#[doc = " performs the checks. It is set at the first relay-chain block when the corresponding parachain"]
				#[doc = " can switch its upgrade function. As soon as the parachain's block is included, the value"]
				#[doc = " gets reset to `None`."]
				#[doc = ""]
				#[doc = " NOTE that this field is used by parachains via merkle storage proofs, therefore changing"]
				#[doc = " the format will require migration of parachains."]
				pub fn upgrade_go_ahead_signal(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_primitives::v2::UpgradeGoAhead,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"UpgradeGoAheadSignal",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							159u8, 47u8, 247u8, 154u8, 54u8, 20u8, 235u8, 49u8, 74u8, 41u8, 65u8,
							51u8, 52u8, 187u8, 242u8, 6u8, 84u8, 144u8, 200u8, 176u8, 222u8, 232u8,
							70u8, 50u8, 70u8, 97u8, 61u8, 249u8, 245u8, 120u8, 98u8, 183u8,
						],
					)
				}
				#[doc = " This is used by the relay-chain to communicate to a parachain a go-ahead with in the upgrade procedure."]
				#[doc = ""]
				#[doc = " This value is absent when there are no upgrades scheduled or during the time the relay chain"]
				#[doc = " performs the checks. It is set at the first relay-chain block when the corresponding parachain"]
				#[doc = " can switch its upgrade function. As soon as the parachain's block is included, the value"]
				#[doc = " gets reset to `None`."]
				#[doc = ""]
				#[doc = " NOTE that this field is used by parachains via merkle storage proofs, therefore changing"]
				#[doc = " the format will require migration of parachains."]
				pub fn upgrade_go_ahead_signal_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_primitives::v2::UpgradeGoAhead,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"UpgradeGoAheadSignal",
						Vec::new(),
						[
							159u8, 47u8, 247u8, 154u8, 54u8, 20u8, 235u8, 49u8, 74u8, 41u8, 65u8,
							51u8, 52u8, 187u8, 242u8, 6u8, 84u8, 144u8, 200u8, 176u8, 222u8, 232u8,
							70u8, 50u8, 70u8, 97u8, 61u8, 249u8, 245u8, 120u8, 98u8, 183u8,
						],
					)
				}
				#[doc = " This is used by the relay-chain to communicate that there are restrictions for performing"]
				#[doc = " an upgrade for this parachain."]
				#[doc = ""]
				#[doc = " This may be a because the parachain waits for the upgrade cooldown to expire. Another"]
				#[doc = " potential use case is when we want to perform some maintenance (such as storage migration)"]
				#[doc = " we could restrict upgrades to make the process simpler."]
				#[doc = ""]
				#[doc = " NOTE that this field is used by parachains via merkle storage proofs, therefore changing"]
				#[doc = " the format will require migration of parachains."]
				pub fn upgrade_restriction_signal(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_primitives::v2::UpgradeRestriction,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"UpgradeRestrictionSignal",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							86u8, 190u8, 41u8, 79u8, 66u8, 68u8, 46u8, 87u8, 212u8, 176u8, 255u8,
							134u8, 104u8, 121u8, 44u8, 143u8, 248u8, 100u8, 35u8, 157u8, 91u8,
							165u8, 118u8, 38u8, 49u8, 171u8, 158u8, 163u8, 45u8, 92u8, 44u8, 11u8,
						],
					)
				}
				#[doc = " This is used by the relay-chain to communicate that there are restrictions for performing"]
				#[doc = " an upgrade for this parachain."]
				#[doc = ""]
				#[doc = " This may be a because the parachain waits for the upgrade cooldown to expire. Another"]
				#[doc = " potential use case is when we want to perform some maintenance (such as storage migration)"]
				#[doc = " we could restrict upgrades to make the process simpler."]
				#[doc = ""]
				#[doc = " NOTE that this field is used by parachains via merkle storage proofs, therefore changing"]
				#[doc = " the format will require migration of parachains."]
				pub fn upgrade_restriction_signal_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_primitives::v2::UpgradeRestriction,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"UpgradeRestrictionSignal",
						Vec::new(),
						[
							86u8, 190u8, 41u8, 79u8, 66u8, 68u8, 46u8, 87u8, 212u8, 176u8, 255u8,
							134u8, 104u8, 121u8, 44u8, 143u8, 248u8, 100u8, 35u8, 157u8, 91u8,
							165u8, 118u8, 38u8, 49u8, 171u8, 158u8, 163u8, 45u8, 92u8, 44u8, 11u8,
						],
					)
				}
				#[doc = " The list of parachains that are awaiting for their upgrade restriction to cooldown."]
				#[doc = ""]
				#[doc = " Ordered ascending by block number."]
				pub fn upgrade_cooldowns(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<(
							runtime_types::polkadot_parachain::primitives::Id,
							::core::primitive::u32,
						)>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"UpgradeCooldowns",
						vec![],
						[
							205u8, 236u8, 140u8, 145u8, 241u8, 245u8, 60u8, 68u8, 23u8, 175u8,
							226u8, 174u8, 154u8, 107u8, 243u8, 197u8, 61u8, 218u8, 7u8, 24u8,
							109u8, 221u8, 178u8, 80u8, 242u8, 123u8, 33u8, 119u8, 5u8, 241u8,
							179u8, 13u8,
						],
					)
				}
				#[doc = " The list of upcoming code upgrades. Each item is a pair of which para performs a code"]
				#[doc = " upgrade and at which relay-chain block it is expected at."]
				#[doc = ""]
				#[doc = " Ordered ascending by block number."]
				pub fn upcoming_upgrades(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<(
							runtime_types::polkadot_parachain::primitives::Id,
							::core::primitive::u32,
						)>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"UpcomingUpgrades",
						vec![],
						[
							165u8, 112u8, 215u8, 149u8, 125u8, 175u8, 206u8, 195u8, 214u8, 173u8,
							0u8, 144u8, 46u8, 197u8, 55u8, 204u8, 144u8, 68u8, 158u8, 156u8, 145u8,
							230u8, 173u8, 101u8, 255u8, 108u8, 52u8, 199u8, 142u8, 37u8, 55u8,
							32u8,
						],
					)
				}
				#[doc = " The actions to perform during the start of a specific session index."]
				pub fn actions_queue(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"ActionsQueue",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							209u8, 106u8, 198u8, 228u8, 148u8, 75u8, 246u8, 248u8, 12u8, 143u8,
							175u8, 56u8, 168u8, 243u8, 67u8, 166u8, 59u8, 92u8, 219u8, 184u8, 1u8,
							34u8, 241u8, 66u8, 245u8, 48u8, 174u8, 41u8, 123u8, 16u8, 178u8, 161u8,
						],
					)
				}
				#[doc = " The actions to perform during the start of a specific session index."]
				pub fn actions_queue_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"ActionsQueue",
						Vec::new(),
						[
							209u8, 106u8, 198u8, 228u8, 148u8, 75u8, 246u8, 248u8, 12u8, 143u8,
							175u8, 56u8, 168u8, 243u8, 67u8, 166u8, 59u8, 92u8, 219u8, 184u8, 1u8,
							34u8, 241u8, 66u8, 245u8, 48u8, 174u8, 41u8, 123u8, 16u8, 178u8, 161u8,
						],
					)
				}
				#[doc = " Upcoming paras instantiation arguments."]
				#[doc = ""]
				#[doc = " NOTE that after PVF pre-checking is enabled the para genesis arg will have it's code set"]
				#[doc = " to empty. Instead, the code will be saved into the storage right away via `CodeByHash`."]
				pub fn upcoming_paras_genesis(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_parachains::paras::ParaGenesisArgs,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"UpcomingParasGenesis",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							84u8, 41u8, 210u8, 81u8, 237u8, 249u8, 162u8, 208u8, 247u8, 223u8,
							208u8, 201u8, 54u8, 43u8, 222u8, 187u8, 8u8, 116u8, 184u8, 221u8,
							107u8, 243u8, 48u8, 168u8, 108u8, 47u8, 133u8, 236u8, 184u8, 174u8,
							130u8, 145u8,
						],
					)
				}
				#[doc = " Upcoming paras instantiation arguments."]
				#[doc = ""]
				#[doc = " NOTE that after PVF pre-checking is enabled the para genesis arg will have it's code set"]
				#[doc = " to empty. Instead, the code will be saved into the storage right away via `CodeByHash`."]
				pub fn upcoming_paras_genesis_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_parachains::paras::ParaGenesisArgs,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"UpcomingParasGenesis",
						Vec::new(),
						[
							84u8, 41u8, 210u8, 81u8, 237u8, 249u8, 162u8, 208u8, 247u8, 223u8,
							208u8, 201u8, 54u8, 43u8, 222u8, 187u8, 8u8, 116u8, 184u8, 221u8,
							107u8, 243u8, 48u8, 168u8, 108u8, 47u8, 133u8, 236u8, 184u8, 174u8,
							130u8, 145u8,
						],
					)
				}
				#[doc = " The number of reference on the validation code in [`CodeByHash`] storage."]
				pub fn code_by_hash_refs(
					&self,
					_0: impl ::std::borrow::Borrow<
						runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
					>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"CodeByHashRefs",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							24u8, 6u8, 23u8, 50u8, 105u8, 203u8, 126u8, 161u8, 0u8, 5u8, 121u8,
							165u8, 204u8, 106u8, 68u8, 91u8, 84u8, 126u8, 29u8, 239u8, 236u8,
							138u8, 32u8, 237u8, 241u8, 226u8, 190u8, 233u8, 160u8, 143u8, 88u8,
							168u8,
						],
					)
				}
				#[doc = " The number of reference on the validation code in [`CodeByHash`] storage."]
				pub fn code_by_hash_refs_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"CodeByHashRefs",
						Vec::new(),
						[
							24u8, 6u8, 23u8, 50u8, 105u8, 203u8, 126u8, 161u8, 0u8, 5u8, 121u8,
							165u8, 204u8, 106u8, 68u8, 91u8, 84u8, 126u8, 29u8, 239u8, 236u8,
							138u8, 32u8, 237u8, 241u8, 226u8, 190u8, 233u8, 160u8, 143u8, 88u8,
							168u8,
						],
					)
				}
				#[doc = " Validation code stored by its hash."]
				#[doc = ""]
				#[doc = " This storage is consistent with [`FutureCodeHash`], [`CurrentCodeHash`] and"]
				#[doc = " [`PastCodeHash`]."]
				pub fn code_by_hash(
					&self,
					_0: impl ::std::borrow::Borrow<
						runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
					>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_parachain::primitives::ValidationCode,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"CodeByHash",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							58u8, 104u8, 36u8, 34u8, 226u8, 210u8, 253u8, 90u8, 23u8, 3u8, 6u8,
							202u8, 9u8, 44u8, 107u8, 108u8, 41u8, 149u8, 255u8, 173u8, 119u8,
							206u8, 201u8, 180u8, 32u8, 193u8, 44u8, 232u8, 73u8, 15u8, 210u8,
							226u8,
						],
					)
				}
				#[doc = " Validation code stored by its hash."]
				#[doc = ""]
				#[doc = " This storage is consistent with [`FutureCodeHash`], [`CurrentCodeHash`] and"]
				#[doc = " [`PastCodeHash`]."]
				pub fn code_by_hash_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_parachain::primitives::ValidationCode,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Paras",
						"CodeByHash",
						Vec::new(),
						[
							58u8, 104u8, 36u8, 34u8, 226u8, 210u8, 253u8, 90u8, 23u8, 3u8, 6u8,
							202u8, 9u8, 44u8, 107u8, 108u8, 41u8, 149u8, 255u8, 173u8, 119u8,
							206u8, 201u8, 180u8, 32u8, 193u8, 44u8, 232u8, 73u8, 15u8, 210u8,
							226u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				pub fn unsigned_priority(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Paras",
						"UnsignedPriority",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
			}
		}
	}
	pub mod initializer {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct ForceApprove {
				pub up_to: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Issue a signal to the consensus engine to forcibly act as though all parachain"]
				#[doc = "blocks in all relay chain blocks up to and including the given number in the current"]
				#[doc = "chain are valid and should be finalized."]
				pub fn force_approve(
					&self,
					up_to: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<ForceApprove> {
					::subxt::tx::StaticTxPayload::new(
						"Initializer",
						"force_approve",
						ForceApprove { up_to },
						[
							28u8, 117u8, 86u8, 182u8, 19u8, 127u8, 43u8, 17u8, 153u8, 80u8, 193u8,
							53u8, 120u8, 41u8, 205u8, 23u8, 252u8, 148u8, 77u8, 227u8, 138u8, 35u8,
							182u8, 122u8, 112u8, 232u8, 246u8, 69u8, 173u8, 97u8, 42u8, 103u8,
						],
					)
				}
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Whether the parachains modules have been initialized within this block."]
				#[doc = ""]
				#[doc = " Semantically a `bool`, but this guarantees it should never hit the trie,"]
				#[doc = " as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values."]
				#[doc = ""]
				#[doc = " As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one of"]
				#[doc = " them writes to the trie and one does not. This confusion makes `Option<()>` more suitable for"]
				#[doc = " the semantics of this variable."]
				pub fn has_initialized(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<()>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Initializer",
						"HasInitialized",
						vec![],
						[
							251u8, 135u8, 247u8, 61u8, 139u8, 102u8, 12u8, 122u8, 227u8, 123u8,
							11u8, 232u8, 120u8, 80u8, 81u8, 48u8, 216u8, 115u8, 159u8, 131u8,
							133u8, 105u8, 200u8, 122u8, 114u8, 6u8, 109u8, 4u8, 164u8, 204u8,
							214u8, 111u8,
						],
					)
				}
				#[doc = " Buffered session changes along with the block number at which they should be applied."]
				#[doc = ""]
				#[doc = " Typically this will be empty or one element long. Apart from that this item never hits"]
				#[doc = " the storage."]
				#[doc = ""]
				#[doc = " However this is a `Vec` regardless to handle various edge cases that may occur at runtime"]
				#[doc = " upgrade boundaries or if governance intervenes."]				pub fn buffered_session_changes (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < runtime_types :: polkadot_runtime_parachains :: initializer :: BufferedSessionChange > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
					::subxt::storage::address::StaticStorageAddress::new(
						"Initializer",
						"BufferedSessionChanges",
						vec![],
						[
							176u8, 60u8, 165u8, 138u8, 99u8, 140u8, 22u8, 169u8, 121u8, 65u8,
							203u8, 85u8, 39u8, 198u8, 91u8, 167u8, 118u8, 49u8, 129u8, 128u8,
							171u8, 232u8, 249u8, 39u8, 6u8, 101u8, 57u8, 193u8, 85u8, 143u8, 105u8,
							29u8,
						],
					)
				}
			}
		}
	}
	pub mod dmp {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub struct TransactionApi;
			impl TransactionApi {}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The downward messages addressed for a certain para."]
				pub fn downward_message_queues(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							runtime_types::polkadot_core_primitives::InboundDownwardMessage<
								::core::primitive::u32,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Dmp",
						"DownwardMessageQueues",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							57u8, 115u8, 112u8, 195u8, 25u8, 43u8, 104u8, 199u8, 107u8, 238u8,
							93u8, 129u8, 141u8, 167u8, 167u8, 9u8, 85u8, 34u8, 53u8, 117u8, 148u8,
							246u8, 196u8, 46u8, 96u8, 114u8, 15u8, 88u8, 94u8, 40u8, 18u8, 31u8,
						],
					)
				}
				#[doc = " The downward messages addressed for a certain para."]
				pub fn downward_message_queues_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							runtime_types::polkadot_core_primitives::InboundDownwardMessage<
								::core::primitive::u32,
							>,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Dmp",
						"DownwardMessageQueues",
						Vec::new(),
						[
							57u8, 115u8, 112u8, 195u8, 25u8, 43u8, 104u8, 199u8, 107u8, 238u8,
							93u8, 129u8, 141u8, 167u8, 167u8, 9u8, 85u8, 34u8, 53u8, 117u8, 148u8,
							246u8, 196u8, 46u8, 96u8, 114u8, 15u8, 88u8, 94u8, 40u8, 18u8, 31u8,
						],
					)
				}
				#[doc = " A mapping that stores the downward message queue MQC head for each para."]
				#[doc = ""]
				#[doc = " Each link in this chain has a form:"]
				#[doc = " `(prev_head, B, H(M))`, where"]
				#[doc = " - `prev_head`: is the previous head hash or zero if none."]
				#[doc = " - `B`: is the relay-chain block number in which a message was appended."]
				#[doc = " - `H(M)`: is the hash of the message being appended."]
				pub fn downward_message_queue_heads(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::H256>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Dmp",
						"DownwardMessageQueueHeads",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							137u8, 70u8, 108u8, 184u8, 177u8, 204u8, 17u8, 187u8, 250u8, 134u8,
							85u8, 18u8, 239u8, 185u8, 167u8, 224u8, 70u8, 18u8, 38u8, 245u8, 176u8,
							122u8, 254u8, 251u8, 204u8, 126u8, 34u8, 207u8, 163u8, 104u8, 103u8,
							38u8,
						],
					)
				}
				#[doc = " A mapping that stores the downward message queue MQC head for each para."]
				#[doc = ""]
				#[doc = " Each link in this chain has a form:"]
				#[doc = " `(prev_head, B, H(M))`, where"]
				#[doc = " - `prev_head`: is the previous head hash or zero if none."]
				#[doc = " - `B`: is the relay-chain block number in which a message was appended."]
				#[doc = " - `H(M)`: is the hash of the message being appended."]
				pub fn downward_message_queue_heads_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::subxt::ext::sp_core::H256>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Dmp",
						"DownwardMessageQueueHeads",
						Vec::new(),
						[
							137u8, 70u8, 108u8, 184u8, 177u8, 204u8, 17u8, 187u8, 250u8, 134u8,
							85u8, 18u8, 239u8, 185u8, 167u8, 224u8, 70u8, 18u8, 38u8, 245u8, 176u8,
							122u8, 254u8, 251u8, 204u8, 126u8, 34u8, 207u8, 163u8, 104u8, 103u8,
							38u8,
						],
					)
				}
			}
		}
	}
	pub mod ump {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ServiceOverweight {
				pub index: ::core::primitive::u64,
				pub weight_limit: ::core::primitive::u64,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Service a single overweight upward message."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `ExecuteOverweightOrigin`."]
				#[doc = "- `index`: The index of the overweight message to service."]
				#[doc = "- `weight_limit`: The amount of weight that message execution may take."]
				#[doc = ""]
				#[doc = "Errors:"]
				#[doc = "- `UnknownMessageIndex`: Message of `index` is unknown."]
				#[doc = "- `WeightOverLimit`: Message execution may use greater than `weight_limit`."]
				#[doc = ""]
				#[doc = "Events:"]
				#[doc = "- `OverweightServiced`: On success."]
				pub fn service_overweight(
					&self,
					index: ::core::primitive::u64,
					weight_limit: ::core::primitive::u64,
				) -> ::subxt::tx::StaticTxPayload<ServiceOverweight> {
					::subxt::tx::StaticTxPayload::new(
						"Ump",
						"service_overweight",
						ServiceOverweight { index, weight_limit },
						[
							225u8, 41u8, 132u8, 91u8, 28u8, 116u8, 89u8, 197u8, 194u8, 131u8, 28u8,
							217u8, 102u8, 241u8, 122u8, 230u8, 242u8, 75u8, 83u8, 67u8, 104u8,
							55u8, 133u8, 129u8, 91u8, 25u8, 185u8, 131u8, 22u8, 253u8, 84u8, 221u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::polkadot_runtime_parachains::ump::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Upward message is invalid XCM."]
			#[doc = "\\[ id \\]"]
			pub struct InvalidFormat(pub [::core::primitive::u8; 32usize]);
			impl ::subxt::events::StaticEvent for InvalidFormat {
				const PALLET: &'static str = "Ump";
				const EVENT: &'static str = "InvalidFormat";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Upward message is unsupported version of XCM."]
			#[doc = "\\[ id \\]"]
			pub struct UnsupportedVersion(pub [::core::primitive::u8; 32usize]);
			impl ::subxt::events::StaticEvent for UnsupportedVersion {
				const PALLET: &'static str = "Ump";
				const EVENT: &'static str = "UnsupportedVersion";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Upward message executed with the given outcome."]
			#[doc = "\\[ id, outcome \\]"]
			pub struct ExecutedUpward(
				pub [::core::primitive::u8; 32usize],
				pub runtime_types::xcm::v2::traits::Outcome,
			);
			impl ::subxt::events::StaticEvent for ExecutedUpward {
				const PALLET: &'static str = "Ump";
				const EVENT: &'static str = "ExecutedUpward";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The weight limit for handling upward messages was reached."]
			#[doc = "\\[ id, remaining, required \\]"]
			pub struct WeightExhausted(
				pub [::core::primitive::u8; 32usize],
				pub ::core::primitive::u64,
				pub ::core::primitive::u64,
			);
			impl ::subxt::events::StaticEvent for WeightExhausted {
				const PALLET: &'static str = "Ump";
				const EVENT: &'static str = "WeightExhausted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Some upward messages have been received and will be processed."]
			#[doc = "\\[ para, count, size \\]"]
			pub struct UpwardMessagesReceived(
				pub runtime_types::polkadot_parachain::primitives::Id,
				pub ::core::primitive::u32,
				pub ::core::primitive::u32,
			);
			impl ::subxt::events::StaticEvent for UpwardMessagesReceived {
				const PALLET: &'static str = "Ump";
				const EVENT: &'static str = "UpwardMessagesReceived";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The weight budget was exceeded for an individual upward message."]
			#[doc = ""]
			#[doc = "This message can be later dispatched manually using `service_overweight` dispatchable"]
			#[doc = "using the assigned `overweight_index`."]
			#[doc = ""]
			#[doc = "\\[ para, id, overweight_index, required \\]"]
			pub struct OverweightEnqueued(
				pub runtime_types::polkadot_parachain::primitives::Id,
				pub [::core::primitive::u8; 32usize],
				pub ::core::primitive::u64,
				pub ::core::primitive::u64,
			);
			impl ::subxt::events::StaticEvent for OverweightEnqueued {
				const PALLET: &'static str = "Ump";
				const EVENT: &'static str = "OverweightEnqueued";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Upward message from the overweight queue was executed with the given actual weight"]
			#[doc = "used."]
			#[doc = ""]
			#[doc = "\\[ overweight_index, used \\]"]
			pub struct OverweightServiced(pub ::core::primitive::u64, pub ::core::primitive::u64);
			impl ::subxt::events::StaticEvent for OverweightServiced {
				const PALLET: &'static str = "Ump";
				const EVENT: &'static str = "OverweightServiced";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The messages waiting to be handled by the relay-chain originating from a certain parachain."]
				#[doc = ""]
				#[doc = " Note that some upward messages might have been already processed by the inclusion logic. E.g."]
				#[doc = " channel management messages."]
				#[doc = ""]
				#[doc = " The messages are processed in FIFO order."]
				pub fn relay_dispatch_queues(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Ump",
						"RelayDispatchQueues",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							237u8, 72u8, 167u8, 6u8, 67u8, 106u8, 186u8, 191u8, 160u8, 9u8, 62u8,
							102u8, 229u8, 164u8, 100u8, 24u8, 202u8, 109u8, 90u8, 24u8, 192u8,
							233u8, 26u8, 239u8, 23u8, 127u8, 77u8, 191u8, 144u8, 14u8, 3u8, 141u8,
						],
					)
				}
				#[doc = " The messages waiting to be handled by the relay-chain originating from a certain parachain."]
				#[doc = ""]
				#[doc = " Note that some upward messages might have been already processed by the inclusion logic. E.g."]
				#[doc = " channel management messages."]
				#[doc = ""]
				#[doc = " The messages are processed in FIFO order."]
				pub fn relay_dispatch_queues_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Ump",
						"RelayDispatchQueues",
						Vec::new(),
						[
							237u8, 72u8, 167u8, 6u8, 67u8, 106u8, 186u8, 191u8, 160u8, 9u8, 62u8,
							102u8, 229u8, 164u8, 100u8, 24u8, 202u8, 109u8, 90u8, 24u8, 192u8,
							233u8, 26u8, 239u8, 23u8, 127u8, 77u8, 191u8, 144u8, 14u8, 3u8, 141u8,
						],
					)
				}
				#[doc = " Size of the dispatch queues. Caches sizes of the queues in `RelayDispatchQueue`."]
				#[doc = ""]
				#[doc = " First item in the tuple is the count of messages and second"]
				#[doc = " is the total length (in bytes) of the message payloads."]
				#[doc = ""]
				#[doc = " Note that this is an auxiliary mapping: it's possible to tell the byte size and the number of"]
				#[doc = " messages only looking at `RelayDispatchQueues`. This mapping is separate to avoid the cost of"]
				#[doc = " loading the whole message queue if only the total size and count are required."]
				#[doc = ""]
				#[doc = " Invariant:"]
				#[doc = " - The set of keys should exactly match the set of keys of `RelayDispatchQueues`."]
				pub fn relay_dispatch_queue_size(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Ump",
						"RelayDispatchQueueSize",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							243u8, 120u8, 70u8, 2u8, 208u8, 105u8, 180u8, 25u8, 86u8, 219u8, 151u8,
							227u8, 233u8, 53u8, 151u8, 29u8, 231u8, 40u8, 84u8, 163u8, 71u8, 254u8,
							19u8, 47u8, 174u8, 63u8, 200u8, 173u8, 86u8, 199u8, 207u8, 138u8,
						],
					)
				}
				#[doc = " Size of the dispatch queues. Caches sizes of the queues in `RelayDispatchQueue`."]
				#[doc = ""]
				#[doc = " First item in the tuple is the count of messages and second"]
				#[doc = " is the total length (in bytes) of the message payloads."]
				#[doc = ""]
				#[doc = " Note that this is an auxiliary mapping: it's possible to tell the byte size and the number of"]
				#[doc = " messages only looking at `RelayDispatchQueues`. This mapping is separate to avoid the cost of"]
				#[doc = " loading the whole message queue if only the total size and count are required."]
				#[doc = ""]
				#[doc = " Invariant:"]
				#[doc = " - The set of keys should exactly match the set of keys of `RelayDispatchQueues`."]
				pub fn relay_dispatch_queue_size_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Ump",
						"RelayDispatchQueueSize",
						Vec::new(),
						[
							243u8, 120u8, 70u8, 2u8, 208u8, 105u8, 180u8, 25u8, 86u8, 219u8, 151u8,
							227u8, 233u8, 53u8, 151u8, 29u8, 231u8, 40u8, 84u8, 163u8, 71u8, 254u8,
							19u8, 47u8, 174u8, 63u8, 200u8, 173u8, 86u8, 199u8, 207u8, 138u8,
						],
					)
				}
				#[doc = " The ordered list of `ParaId`s that have a `RelayDispatchQueue` entry."]
				#[doc = ""]
				#[doc = " Invariant:"]
				#[doc = " - The set of items from this vector should be exactly the set of the keys in"]
				#[doc = "   `RelayDispatchQueues` and `RelayDispatchQueueSize`."]
				pub fn needs_dispatch(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Ump",
						"NeedsDispatch",
						vec![],
						[
							176u8, 94u8, 152u8, 112u8, 46u8, 124u8, 89u8, 29u8, 92u8, 104u8, 192u8,
							58u8, 59u8, 186u8, 81u8, 150u8, 157u8, 61u8, 235u8, 182u8, 222u8,
							127u8, 109u8, 11u8, 104u8, 175u8, 141u8, 219u8, 15u8, 152u8, 255u8,
							40u8,
						],
					)
				}
				#[doc = " This is the para that gets will get dispatched first during the next upward dispatchable queue"]
				#[doc = " execution round."]
				#[doc = ""]
				#[doc = " Invariant:"]
				#[doc = " - If `Some(para)`, then `para` must be present in `NeedsDispatch`."]
				pub fn next_dispatch_round_start_with(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_parachain::primitives::Id,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Ump",
						"NextDispatchRoundStartWith",
						vec![],
						[
							157u8, 221u8, 6u8, 175u8, 61u8, 99u8, 250u8, 30u8, 177u8, 53u8, 37u8,
							191u8, 138u8, 65u8, 251u8, 216u8, 37u8, 84u8, 246u8, 76u8, 8u8, 29u8,
							18u8, 253u8, 143u8, 75u8, 129u8, 141u8, 48u8, 178u8, 135u8, 197u8,
						],
					)
				}
				#[doc = " The messages that exceeded max individual message weight budget."]
				#[doc = ""]
				#[doc = " These messages stay there until manually dispatched."]
				pub fn overweight(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u64>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						runtime_types::polkadot_parachain::primitives::Id,
						::std::vec::Vec<::core::primitive::u8>,
					)>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Ump",
						"Overweight",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							49u8, 4u8, 221u8, 218u8, 249u8, 183u8, 49u8, 198u8, 48u8, 42u8, 110u8,
							67u8, 47u8, 50u8, 181u8, 141u8, 184u8, 47u8, 114u8, 3u8, 232u8, 132u8,
							32u8, 201u8, 13u8, 213u8, 175u8, 236u8, 111u8, 87u8, 146u8, 212u8,
						],
					)
				}
				#[doc = " The messages that exceeded max individual message weight budget."]
				#[doc = ""]
				#[doc = " These messages stay there until manually dispatched."]
				pub fn overweight_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						runtime_types::polkadot_parachain::primitives::Id,
						::std::vec::Vec<::core::primitive::u8>,
					)>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Ump",
						"Overweight",
						Vec::new(),
						[
							49u8, 4u8, 221u8, 218u8, 249u8, 183u8, 49u8, 198u8, 48u8, 42u8, 110u8,
							67u8, 47u8, 50u8, 181u8, 141u8, 184u8, 47u8, 114u8, 3u8, 232u8, 132u8,
							32u8, 201u8, 13u8, 213u8, 175u8, 236u8, 111u8, 87u8, 146u8, 212u8,
						],
					)
				}
				#[doc = " The number of overweight messages ever recorded in `Overweight` (and thus the lowest free"]
				#[doc = " index)."]
				pub fn overweight_count(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Ump",
						"OverweightCount",
						vec![],
						[
							102u8, 180u8, 196u8, 148u8, 115u8, 62u8, 46u8, 238u8, 97u8, 116u8,
							117u8, 42u8, 14u8, 5u8, 72u8, 237u8, 230u8, 46u8, 150u8, 126u8, 89u8,
							64u8, 233u8, 166u8, 180u8, 137u8, 52u8, 233u8, 252u8, 255u8, 36u8,
							20u8,
						],
					)
				}
			}
		}
	}
	pub mod hrmp {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct HrmpInitOpenChannel {
				pub recipient: runtime_types::polkadot_parachain::primitives::Id,
				pub proposed_max_capacity: ::core::primitive::u32,
				pub proposed_max_message_size: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct HrmpAcceptOpenChannel {
				pub sender: runtime_types::polkadot_parachain::primitives::Id,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct HrmpCloseChannel {
				pub channel_id: runtime_types::polkadot_parachain::primitives::HrmpChannelId,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceCleanHrmp {
				pub para: runtime_types::polkadot_parachain::primitives::Id,
				pub inbound: ::core::primitive::u32,
				pub outbound: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct ForceProcessHrmpOpen {
				pub channels: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct ForceProcessHrmpClose {
				pub channels: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct HrmpCancelOpenRequest {
				pub channel_id: runtime_types::polkadot_parachain::primitives::HrmpChannelId,
				pub open_requests: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Initiate opening a channel from a parachain to a given recipient with given channel"]
				#[doc = "parameters."]
				#[doc = ""]
				#[doc = "- `proposed_max_capacity` - specifies how many messages can be in the channel at once."]
				#[doc = "- `proposed_max_message_size` - specifies the maximum size of the messages."]
				#[doc = ""]
				#[doc = "These numbers are a subject to the relay-chain configuration limits."]
				#[doc = ""]
				#[doc = "The channel can be opened only after the recipient confirms it and only on a session"]
				#[doc = "change."]
				pub fn hrmp_init_open_channel(
					&self,
					recipient: runtime_types::polkadot_parachain::primitives::Id,
					proposed_max_capacity: ::core::primitive::u32,
					proposed_max_message_size: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<HrmpInitOpenChannel> {
					::subxt::tx::StaticTxPayload::new(
						"Hrmp",
						"hrmp_init_open_channel",
						HrmpInitOpenChannel {
							recipient,
							proposed_max_capacity,
							proposed_max_message_size,
						},
						[
							170u8, 72u8, 58u8, 42u8, 38u8, 11u8, 110u8, 229u8, 239u8, 136u8, 99u8,
							230u8, 223u8, 225u8, 126u8, 61u8, 234u8, 185u8, 101u8, 156u8, 40u8,
							102u8, 253u8, 123u8, 77u8, 204u8, 217u8, 86u8, 162u8, 66u8, 25u8,
							214u8,
						],
					)
				}
				#[doc = "Accept a pending open channel request from the given sender."]
				#[doc = ""]
				#[doc = "The channel will be opened only on the next session boundary."]
				pub fn hrmp_accept_open_channel(
					&self,
					sender: runtime_types::polkadot_parachain::primitives::Id,
				) -> ::subxt::tx::StaticTxPayload<HrmpAcceptOpenChannel> {
					::subxt::tx::StaticTxPayload::new(
						"Hrmp",
						"hrmp_accept_open_channel",
						HrmpAcceptOpenChannel { sender },
						[
							75u8, 111u8, 52u8, 164u8, 204u8, 100u8, 204u8, 111u8, 127u8, 84u8,
							60u8, 136u8, 95u8, 255u8, 48u8, 157u8, 189u8, 76u8, 33u8, 177u8, 223u8,
							27u8, 74u8, 221u8, 139u8, 1u8, 12u8, 128u8, 242u8, 7u8, 3u8, 53u8,
						],
					)
				}
				#[doc = "Initiate unilateral closing of a channel. The origin must be either the sender or the"]
				#[doc = "recipient in the channel being closed."]
				#[doc = ""]
				#[doc = "The closure can only happen on a session change."]
				pub fn hrmp_close_channel(
					&self,
					channel_id: runtime_types::polkadot_parachain::primitives::HrmpChannelId,
				) -> ::subxt::tx::StaticTxPayload<HrmpCloseChannel> {
					::subxt::tx::StaticTxPayload::new(
						"Hrmp",
						"hrmp_close_channel",
						HrmpCloseChannel { channel_id },
						[
							11u8, 202u8, 76u8, 107u8, 213u8, 21u8, 191u8, 190u8, 40u8, 229u8, 60u8,
							115u8, 232u8, 136u8, 41u8, 114u8, 21u8, 19u8, 238u8, 236u8, 202u8,
							56u8, 212u8, 232u8, 34u8, 84u8, 27u8, 70u8, 176u8, 252u8, 218u8, 52u8,
						],
					)
				}
				#[doc = "This extrinsic triggers the cleanup of all the HRMP storage items that"]
				#[doc = "a para may have. Normally this happens once per session, but this allows"]
				#[doc = "you to trigger the cleanup immediately for a specific parachain."]
				#[doc = ""]
				#[doc = "Origin must be Root."]
				#[doc = ""]
				#[doc = "Number of inbound and outbound channels for `para` must be provided as witness data of weighing."]
				pub fn force_clean_hrmp(
					&self,
					para: runtime_types::polkadot_parachain::primitives::Id,
					inbound: ::core::primitive::u32,
					outbound: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<ForceCleanHrmp> {
					::subxt::tx::StaticTxPayload::new(
						"Hrmp",
						"force_clean_hrmp",
						ForceCleanHrmp { para, inbound, outbound },
						[
							171u8, 109u8, 147u8, 49u8, 163u8, 107u8, 36u8, 169u8, 117u8, 193u8,
							231u8, 114u8, 207u8, 38u8, 240u8, 195u8, 155u8, 222u8, 244u8, 142u8,
							93u8, 79u8, 111u8, 43u8, 5u8, 33u8, 190u8, 30u8, 200u8, 225u8, 173u8,
							64u8,
						],
					)
				}
				#[doc = "Force process HRMP open channel requests."]
				#[doc = ""]
				#[doc = "If there are pending HRMP open channel requests, you can use this"]
				#[doc = "function process all of those requests immediately."]
				#[doc = ""]
				#[doc = "Total number of opening channels must be provided as witness data of weighing."]
				pub fn force_process_hrmp_open(
					&self,
					channels: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<ForceProcessHrmpOpen> {
					::subxt::tx::StaticTxPayload::new(
						"Hrmp",
						"force_process_hrmp_open",
						ForceProcessHrmpOpen { channels },
						[
							231u8, 80u8, 233u8, 15u8, 131u8, 167u8, 223u8, 28u8, 182u8, 185u8,
							213u8, 24u8, 154u8, 160u8, 68u8, 94u8, 160u8, 59u8, 78u8, 85u8, 85u8,
							149u8, 130u8, 131u8, 9u8, 162u8, 169u8, 119u8, 165u8, 44u8, 150u8,
							50u8,
						],
					)
				}
				#[doc = "Force process HRMP close channel requests."]
				#[doc = ""]
				#[doc = "If there are pending HRMP close channel requests, you can use this"]
				#[doc = "function process all of those requests immediately."]
				#[doc = ""]
				#[doc = "Total number of closing channels must be provided as witness data of weighing."]
				pub fn force_process_hrmp_close(
					&self,
					channels: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<ForceProcessHrmpClose> {
					::subxt::tx::StaticTxPayload::new(
						"Hrmp",
						"force_process_hrmp_close",
						ForceProcessHrmpClose { channels },
						[
							248u8, 138u8, 30u8, 151u8, 53u8, 16u8, 44u8, 116u8, 51u8, 194u8, 173u8,
							252u8, 143u8, 53u8, 184u8, 129u8, 80u8, 80u8, 25u8, 118u8, 47u8, 183u8,
							249u8, 130u8, 8u8, 221u8, 56u8, 106u8, 182u8, 114u8, 186u8, 161u8,
						],
					)
				}
				#[doc = "This cancels a pending open channel request. It can be canceled by either of the sender"]
				#[doc = "or the recipient for that request. The origin must be either of those."]
				#[doc = ""]
				#[doc = "The cancellation happens immediately. It is not possible to cancel the request if it is"]
				#[doc = "already accepted."]
				#[doc = ""]
				#[doc = "Total number of open requests (i.e. `HrmpOpenChannelRequestsList`) must be provided as"]
				#[doc = "witness data."]
				pub fn hrmp_cancel_open_request(
					&self,
					channel_id: runtime_types::polkadot_parachain::primitives::HrmpChannelId,
					open_requests: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<HrmpCancelOpenRequest> {
					::subxt::tx::StaticTxPayload::new(
						"Hrmp",
						"hrmp_cancel_open_request",
						HrmpCancelOpenRequest { channel_id, open_requests },
						[
							136u8, 217u8, 56u8, 138u8, 227u8, 37u8, 120u8, 83u8, 116u8, 228u8,
							42u8, 111u8, 206u8, 210u8, 177u8, 235u8, 225u8, 98u8, 172u8, 184u8,
							87u8, 65u8, 77u8, 129u8, 7u8, 0u8, 232u8, 139u8, 134u8, 1u8, 59u8,
							19u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::polkadot_runtime_parachains::hrmp::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Open HRMP channel requested."]
			#[doc = "`[sender, recipient, proposed_max_capacity, proposed_max_message_size]`"]
			pub struct OpenChannelRequested(
				pub runtime_types::polkadot_parachain::primitives::Id,
				pub runtime_types::polkadot_parachain::primitives::Id,
				pub ::core::primitive::u32,
				pub ::core::primitive::u32,
			);
			impl ::subxt::events::StaticEvent for OpenChannelRequested {
				const PALLET: &'static str = "Hrmp";
				const EVENT: &'static str = "OpenChannelRequested";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An HRMP channel request sent by the receiver was canceled by either party."]
			#[doc = "`[by_parachain, channel_id]`"]
			pub struct OpenChannelCanceled(
				pub runtime_types::polkadot_parachain::primitives::Id,
				pub runtime_types::polkadot_parachain::primitives::HrmpChannelId,
			);
			impl ::subxt::events::StaticEvent for OpenChannelCanceled {
				const PALLET: &'static str = "Hrmp";
				const EVENT: &'static str = "OpenChannelCanceled";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Open HRMP channel accepted. `[sender, recipient]`"]
			pub struct OpenChannelAccepted(
				pub runtime_types::polkadot_parachain::primitives::Id,
				pub runtime_types::polkadot_parachain::primitives::Id,
			);
			impl ::subxt::events::StaticEvent for OpenChannelAccepted {
				const PALLET: &'static str = "Hrmp";
				const EVENT: &'static str = "OpenChannelAccepted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "HRMP channel closed. `[by_parachain, channel_id]`"]
			pub struct ChannelClosed(
				pub runtime_types::polkadot_parachain::primitives::Id,
				pub runtime_types::polkadot_parachain::primitives::HrmpChannelId,
			);
			impl ::subxt::events::StaticEvent for ChannelClosed {
				const PALLET: &'static str = "Hrmp";
				const EVENT: &'static str = "ChannelClosed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The set of pending HRMP open channel requests."]
				#[doc = ""]
				#[doc = " The set is accompanied by a list for iteration."]
				#[doc = ""]
				#[doc = " Invariant:"]
				#[doc = " - There are no channels that exists in list but not in the set and vice versa."]
				pub fn hrmp_open_channel_requests(
					&self,
					_0: impl ::std::borrow::Borrow<
						runtime_types::polkadot_parachain::primitives::HrmpChannelId,
					>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_parachains::hrmp::HrmpOpenChannelRequest,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpOpenChannelRequests",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							226u8, 115u8, 207u8, 13u8, 5u8, 81u8, 64u8, 161u8, 246u8, 4u8, 17u8,
							207u8, 210u8, 109u8, 91u8, 54u8, 28u8, 53u8, 35u8, 74u8, 62u8, 91u8,
							196u8, 236u8, 18u8, 70u8, 13u8, 86u8, 235u8, 74u8, 181u8, 169u8,
						],
					)
				}
				#[doc = " The set of pending HRMP open channel requests."]
				#[doc = ""]
				#[doc = " The set is accompanied by a list for iteration."]
				#[doc = ""]
				#[doc = " Invariant:"]
				#[doc = " - There are no channels that exists in list but not in the set and vice versa."]
				pub fn hrmp_open_channel_requests_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_parachains::hrmp::HrmpOpenChannelRequest,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpOpenChannelRequests",
						Vec::new(),
						[
							226u8, 115u8, 207u8, 13u8, 5u8, 81u8, 64u8, 161u8, 246u8, 4u8, 17u8,
							207u8, 210u8, 109u8, 91u8, 54u8, 28u8, 53u8, 35u8, 74u8, 62u8, 91u8,
							196u8, 236u8, 18u8, 70u8, 13u8, 86u8, 235u8, 74u8, 181u8, 169u8,
						],
					)
				}
				pub fn hrmp_open_channel_requests_list(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							runtime_types::polkadot_parachain::primitives::HrmpChannelId,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpOpenChannelRequestsList",
						vec![],
						[
							187u8, 157u8, 7u8, 183u8, 88u8, 215u8, 128u8, 174u8, 244u8, 130u8,
							137u8, 13u8, 110u8, 126u8, 181u8, 165u8, 142u8, 69u8, 75u8, 37u8, 37u8,
							149u8, 46u8, 100u8, 140u8, 69u8, 234u8, 171u8, 103u8, 136u8, 223u8,
							193u8,
						],
					)
				}
				#[doc = " This mapping tracks how many open channel requests are initiated by a given sender para."]
				#[doc = " Invariant: `HrmpOpenChannelRequests` should contain the same number of items that has"]
				#[doc = " `(X, _)` as the number of `HrmpOpenChannelRequestCount` for `X`."]
				pub fn hrmp_open_channel_request_count(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpOpenChannelRequestCount",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							156u8, 87u8, 232u8, 34u8, 30u8, 237u8, 159u8, 78u8, 212u8, 138u8,
							140u8, 206u8, 191u8, 117u8, 209u8, 218u8, 251u8, 146u8, 217u8, 56u8,
							93u8, 15u8, 131u8, 64u8, 126u8, 253u8, 126u8, 1u8, 12u8, 242u8, 176u8,
							217u8,
						],
					)
				}
				#[doc = " This mapping tracks how many open channel requests are initiated by a given sender para."]
				#[doc = " Invariant: `HrmpOpenChannelRequests` should contain the same number of items that has"]
				#[doc = " `(X, _)` as the number of `HrmpOpenChannelRequestCount` for `X`."]
				pub fn hrmp_open_channel_request_count_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpOpenChannelRequestCount",
						Vec::new(),
						[
							156u8, 87u8, 232u8, 34u8, 30u8, 237u8, 159u8, 78u8, 212u8, 138u8,
							140u8, 206u8, 191u8, 117u8, 209u8, 218u8, 251u8, 146u8, 217u8, 56u8,
							93u8, 15u8, 131u8, 64u8, 126u8, 253u8, 126u8, 1u8, 12u8, 242u8, 176u8,
							217u8,
						],
					)
				}
				#[doc = " This mapping tracks how many open channel requests were accepted by a given recipient para."]
				#[doc = " Invariant: `HrmpOpenChannelRequests` should contain the same number of items `(_, X)` with"]
				#[doc = " `confirmed` set to true, as the number of `HrmpAcceptedChannelRequestCount` for `X`."]
				pub fn hrmp_accepted_channel_request_count(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpAcceptedChannelRequestCount",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							93u8, 183u8, 17u8, 253u8, 119u8, 213u8, 106u8, 205u8, 17u8, 10u8,
							230u8, 242u8, 5u8, 223u8, 49u8, 235u8, 41u8, 221u8, 80u8, 51u8, 153u8,
							62u8, 191u8, 3u8, 120u8, 224u8, 46u8, 164u8, 161u8, 6u8, 15u8, 15u8,
						],
					)
				}
				#[doc = " This mapping tracks how many open channel requests were accepted by a given recipient para."]
				#[doc = " Invariant: `HrmpOpenChannelRequests` should contain the same number of items `(_, X)` with"]
				#[doc = " `confirmed` set to true, as the number of `HrmpAcceptedChannelRequestCount` for `X`."]
				pub fn hrmp_accepted_channel_request_count_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpAcceptedChannelRequestCount",
						Vec::new(),
						[
							93u8, 183u8, 17u8, 253u8, 119u8, 213u8, 106u8, 205u8, 17u8, 10u8,
							230u8, 242u8, 5u8, 223u8, 49u8, 235u8, 41u8, 221u8, 80u8, 51u8, 153u8,
							62u8, 191u8, 3u8, 120u8, 224u8, 46u8, 164u8, 161u8, 6u8, 15u8, 15u8,
						],
					)
				}
				#[doc = " A set of pending HRMP close channel requests that are going to be closed during the session"]
				#[doc = " change. Used for checking if a given channel is registered for closure."]
				#[doc = ""]
				#[doc = " The set is accompanied by a list for iteration."]
				#[doc = ""]
				#[doc = " Invariant:"]
				#[doc = " - There are no channels that exists in list but not in the set and vice versa."]
				pub fn hrmp_close_channel_requests(
					&self,
					_0: impl ::std::borrow::Borrow<
						runtime_types::polkadot_parachain::primitives::HrmpChannelId,
					>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<()>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpCloseChannelRequests",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							125u8, 131u8, 1u8, 231u8, 19u8, 207u8, 229u8, 72u8, 150u8, 100u8,
							165u8, 215u8, 241u8, 165u8, 91u8, 35u8, 230u8, 148u8, 127u8, 249u8,
							128u8, 221u8, 167u8, 172u8, 67u8, 30u8, 177u8, 176u8, 134u8, 223u8,
							39u8, 87u8,
						],
					)
				}
				#[doc = " A set of pending HRMP close channel requests that are going to be closed during the session"]
				#[doc = " change. Used for checking if a given channel is registered for closure."]
				#[doc = ""]
				#[doc = " The set is accompanied by a list for iteration."]
				#[doc = ""]
				#[doc = " Invariant:"]
				#[doc = " - There are no channels that exists in list but not in the set and vice versa."]
				pub fn hrmp_close_channel_requests_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<()>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpCloseChannelRequests",
						Vec::new(),
						[
							125u8, 131u8, 1u8, 231u8, 19u8, 207u8, 229u8, 72u8, 150u8, 100u8,
							165u8, 215u8, 241u8, 165u8, 91u8, 35u8, 230u8, 148u8, 127u8, 249u8,
							128u8, 221u8, 167u8, 172u8, 67u8, 30u8, 177u8, 176u8, 134u8, 223u8,
							39u8, 87u8,
						],
					)
				}
				pub fn hrmp_close_channel_requests_list(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							runtime_types::polkadot_parachain::primitives::HrmpChannelId,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpCloseChannelRequestsList",
						vec![],
						[
							192u8, 165u8, 71u8, 70u8, 211u8, 233u8, 155u8, 146u8, 160u8, 58u8,
							103u8, 64u8, 123u8, 232u8, 157u8, 71u8, 199u8, 223u8, 158u8, 5u8,
							164u8, 93u8, 231u8, 153u8, 1u8, 63u8, 155u8, 4u8, 138u8, 89u8, 178u8,
							116u8,
						],
					)
				}
				#[doc = " The HRMP watermark associated with each para."]
				#[doc = " Invariant:"]
				#[doc = " - each para `P` used here as a key should satisfy `Paras::is_valid_para(P)` within a session."]
				pub fn hrmp_watermarks(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpWatermarks",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							231u8, 195u8, 117u8, 35u8, 235u8, 18u8, 80u8, 28u8, 212u8, 37u8, 253u8,
							204u8, 71u8, 217u8, 12u8, 35u8, 219u8, 250u8, 45u8, 83u8, 102u8, 236u8,
							186u8, 149u8, 54u8, 31u8, 83u8, 19u8, 129u8, 51u8, 103u8, 155u8,
						],
					)
				}
				#[doc = " The HRMP watermark associated with each para."]
				#[doc = " Invariant:"]
				#[doc = " - each para `P` used here as a key should satisfy `Paras::is_valid_para(P)` within a session."]
				pub fn hrmp_watermarks_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpWatermarks",
						Vec::new(),
						[
							231u8, 195u8, 117u8, 35u8, 235u8, 18u8, 80u8, 28u8, 212u8, 37u8, 253u8,
							204u8, 71u8, 217u8, 12u8, 35u8, 219u8, 250u8, 45u8, 83u8, 102u8, 236u8,
							186u8, 149u8, 54u8, 31u8, 83u8, 19u8, 129u8, 51u8, 103u8, 155u8,
						],
					)
				}
				#[doc = " HRMP channel data associated with each para."]
				#[doc = " Invariant:"]
				#[doc = " - each participant in the channel should satisfy `Paras::is_valid_para(P)` within a session."]
				pub fn hrmp_channels(
					&self,
					_0: impl ::std::borrow::Borrow<
						runtime_types::polkadot_parachain::primitives::HrmpChannelId,
					>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_parachains::hrmp::HrmpChannel,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpChannels",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							224u8, 252u8, 187u8, 122u8, 179u8, 193u8, 227u8, 250u8, 255u8, 216u8,
							107u8, 26u8, 224u8, 16u8, 178u8, 111u8, 77u8, 237u8, 177u8, 148u8,
							22u8, 17u8, 213u8, 99u8, 194u8, 140u8, 217u8, 211u8, 151u8, 51u8, 66u8,
							169u8,
						],
					)
				}
				#[doc = " HRMP channel data associated with each para."]
				#[doc = " Invariant:"]
				#[doc = " - each participant in the channel should satisfy `Paras::is_valid_para(P)` within a session."]
				pub fn hrmp_channels_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_parachains::hrmp::HrmpChannel,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpChannels",
						Vec::new(),
						[
							224u8, 252u8, 187u8, 122u8, 179u8, 193u8, 227u8, 250u8, 255u8, 216u8,
							107u8, 26u8, 224u8, 16u8, 178u8, 111u8, 77u8, 237u8, 177u8, 148u8,
							22u8, 17u8, 213u8, 99u8, 194u8, 140u8, 217u8, 211u8, 151u8, 51u8, 66u8,
							169u8,
						],
					)
				}
				#[doc = " Ingress/egress indexes allow to find all the senders and receivers given the opposite side."]
				#[doc = " I.e."]
				#[doc = ""]
				#[doc = " (a) ingress index allows to find all the senders for a given recipient."]
				#[doc = " (b) egress index allows to find all the recipients for a given sender."]
				#[doc = ""]
				#[doc = " Invariants:"]
				#[doc = " - for each ingress index entry for `P` each item `I` in the index should present in"]
				#[doc = "   `HrmpChannels` as `(I, P)`."]
				#[doc = " - for each egress index entry for `P` each item `E` in the index should present in"]
				#[doc = "   `HrmpChannels` as `(P, E)`."]
				#[doc = " - there should be no other dangling channels in `HrmpChannels`."]
				#[doc = " - the vectors are sorted."]
				pub fn hrmp_ingress_channels_index(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpIngressChannelsIndex",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							58u8, 193u8, 212u8, 225u8, 48u8, 195u8, 119u8, 15u8, 61u8, 166u8,
							249u8, 1u8, 118u8, 67u8, 253u8, 40u8, 58u8, 220u8, 124u8, 152u8, 4u8,
							16u8, 155u8, 151u8, 195u8, 15u8, 205u8, 175u8, 234u8, 0u8, 101u8, 99u8,
						],
					)
				}
				#[doc = " Ingress/egress indexes allow to find all the senders and receivers given the opposite side."]
				#[doc = " I.e."]
				#[doc = ""]
				#[doc = " (a) ingress index allows to find all the senders for a given recipient."]
				#[doc = " (b) egress index allows to find all the recipients for a given sender."]
				#[doc = ""]
				#[doc = " Invariants:"]
				#[doc = " - for each ingress index entry for `P` each item `I` in the index should present in"]
				#[doc = "   `HrmpChannels` as `(I, P)`."]
				#[doc = " - for each egress index entry for `P` each item `E` in the index should present in"]
				#[doc = "   `HrmpChannels` as `(P, E)`."]
				#[doc = " - there should be no other dangling channels in `HrmpChannels`."]
				#[doc = " - the vectors are sorted."]
				pub fn hrmp_ingress_channels_index_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpIngressChannelsIndex",
						Vec::new(),
						[
							58u8, 193u8, 212u8, 225u8, 48u8, 195u8, 119u8, 15u8, 61u8, 166u8,
							249u8, 1u8, 118u8, 67u8, 253u8, 40u8, 58u8, 220u8, 124u8, 152u8, 4u8,
							16u8, 155u8, 151u8, 195u8, 15u8, 205u8, 175u8, 234u8, 0u8, 101u8, 99u8,
						],
					)
				}
				pub fn hrmp_egress_channels_index(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpEgressChannelsIndex",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							9u8, 242u8, 41u8, 234u8, 85u8, 193u8, 232u8, 245u8, 254u8, 26u8, 240u8,
							113u8, 184u8, 151u8, 150u8, 44u8, 43u8, 98u8, 84u8, 209u8, 145u8,
							175u8, 128u8, 68u8, 183u8, 112u8, 171u8, 236u8, 211u8, 32u8, 177u8,
							88u8,
						],
					)
				}
				pub fn hrmp_egress_channels_index_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpEgressChannelsIndex",
						Vec::new(),
						[
							9u8, 242u8, 41u8, 234u8, 85u8, 193u8, 232u8, 245u8, 254u8, 26u8, 240u8,
							113u8, 184u8, 151u8, 150u8, 44u8, 43u8, 98u8, 84u8, 209u8, 145u8,
							175u8, 128u8, 68u8, 183u8, 112u8, 171u8, 236u8, 211u8, 32u8, 177u8,
							88u8,
						],
					)
				}
				#[doc = " Storage for the messages for each channel."]
				#[doc = " Invariant: cannot be non-empty if the corresponding channel in `HrmpChannels` is `None`."]
				pub fn hrmp_channel_contents(
					&self,
					_0: impl ::std::borrow::Borrow<
						runtime_types::polkadot_parachain::primitives::HrmpChannelId,
					>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							runtime_types::polkadot_core_primitives::InboundHrmpMessage<
								::core::primitive::u32,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpChannelContents",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							114u8, 86u8, 172u8, 88u8, 118u8, 243u8, 133u8, 147u8, 108u8, 60u8,
							128u8, 235u8, 45u8, 80u8, 225u8, 130u8, 89u8, 50u8, 40u8, 118u8, 63u8,
							3u8, 83u8, 222u8, 75u8, 167u8, 148u8, 150u8, 193u8, 90u8, 196u8, 225u8,
						],
					)
				}
				#[doc = " Storage for the messages for each channel."]
				#[doc = " Invariant: cannot be non-empty if the corresponding channel in `HrmpChannels` is `None`."]
				pub fn hrmp_channel_contents_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							runtime_types::polkadot_core_primitives::InboundHrmpMessage<
								::core::primitive::u32,
							>,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpChannelContents",
						Vec::new(),
						[
							114u8, 86u8, 172u8, 88u8, 118u8, 243u8, 133u8, 147u8, 108u8, 60u8,
							128u8, 235u8, 45u8, 80u8, 225u8, 130u8, 89u8, 50u8, 40u8, 118u8, 63u8,
							3u8, 83u8, 222u8, 75u8, 167u8, 148u8, 150u8, 193u8, 90u8, 196u8, 225u8,
						],
					)
				}
				#[doc = " Maintains a mapping that can be used to answer the question: What paras sent a message at"]
				#[doc = " the given block number for a given receiver. Invariants:"]
				#[doc = " - The inner `Vec<ParaId>` is never empty."]
				#[doc = " - The inner `Vec<ParaId>` cannot store two same `ParaId`."]
				#[doc = " - The outer vector is sorted ascending by block number and cannot store two items with the"]
				#[doc = "   same block number."]
				pub fn hrmp_channel_digests(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<(
							::core::primitive::u32,
							::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
						)>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpChannelDigests",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							205u8, 18u8, 60u8, 54u8, 123u8, 40u8, 160u8, 149u8, 174u8, 45u8, 135u8,
							213u8, 83u8, 44u8, 97u8, 243u8, 47u8, 200u8, 156u8, 131u8, 15u8, 63u8,
							170u8, 206u8, 101u8, 17u8, 244u8, 132u8, 73u8, 133u8, 79u8, 104u8,
						],
					)
				}
				#[doc = " Maintains a mapping that can be used to answer the question: What paras sent a message at"]
				#[doc = " the given block number for a given receiver. Invariants:"]
				#[doc = " - The inner `Vec<ParaId>` is never empty."]
				#[doc = " - The inner `Vec<ParaId>` cannot store two same `ParaId`."]
				#[doc = " - The outer vector is sorted ascending by block number and cannot store two items with the"]
				#[doc = "   same block number."]
				pub fn hrmp_channel_digests_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<(
							::core::primitive::u32,
							::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
						)>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Hrmp",
						"HrmpChannelDigests",
						Vec::new(),
						[
							205u8, 18u8, 60u8, 54u8, 123u8, 40u8, 160u8, 149u8, 174u8, 45u8, 135u8,
							213u8, 83u8, 44u8, 97u8, 243u8, 47u8, 200u8, 156u8, 131u8, 15u8, 63u8,
							170u8, 206u8, 101u8, 17u8, 244u8, 132u8, 73u8, 133u8, 79u8, 104u8,
						],
					)
				}
			}
		}
	}
	pub mod para_session_info {
		use super::{root_mod, runtime_types};
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Assignment keys for the current session."]
				#[doc = " Note that this API is private due to it being prone to 'off-by-one' at session boundaries."]
				#[doc = " When in doubt, use `Sessions` API instead."]
				pub fn assignment_keys_unsafe(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							runtime_types::polkadot_primitives::v2::assignment_app::Public,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaSessionInfo",
						"AssignmentKeysUnsafe",
						vec![],
						[
							80u8, 24u8, 61u8, 132u8, 118u8, 225u8, 207u8, 75u8, 35u8, 240u8, 209u8,
							255u8, 19u8, 240u8, 114u8, 174u8, 86u8, 65u8, 65u8, 52u8, 135u8, 232u8,
							59u8, 208u8, 3u8, 107u8, 114u8, 241u8, 14u8, 98u8, 40u8, 226u8,
						],
					)
				}
				#[doc = " The earliest session for which previous session info is stored."]
				pub fn earliest_stored_session(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaSessionInfo",
						"EarliestStoredSession",
						vec![],
						[
							25u8, 143u8, 246u8, 184u8, 35u8, 166u8, 140u8, 147u8, 171u8, 5u8,
							164u8, 159u8, 228u8, 21u8, 248u8, 236u8, 48u8, 210u8, 133u8, 140u8,
							171u8, 3u8, 85u8, 250u8, 160u8, 102u8, 95u8, 46u8, 33u8, 81u8, 102u8,
							241u8,
						],
					)
				}
				#[doc = " Session information in a rolling window."]
				#[doc = " Should have an entry in range `EarliestStoredSession..=CurrentSessionIndex`."]
				#[doc = " Does not have any entries before the session index in the first session change notification."]
				pub fn sessions(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_primitives::v2::SessionInfo,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaSessionInfo",
						"Sessions",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							33u8, 46u8, 71u8, 15u8, 195u8, 14u8, 107u8, 223u8, 112u8, 69u8, 249u8,
							233u8, 86u8, 249u8, 79u8, 164u8, 20u8, 71u8, 191u8, 32u8, 67u8, 195u8,
							128u8, 61u8, 67u8, 84u8, 79u8, 137u8, 248u8, 85u8, 253u8, 21u8,
						],
					)
				}
				#[doc = " Session information in a rolling window."]
				#[doc = " Should have an entry in range `EarliestStoredSession..=CurrentSessionIndex`."]
				#[doc = " Does not have any entries before the session index in the first session change notification."]
				pub fn sessions_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_primitives::v2::SessionInfo,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaSessionInfo",
						"Sessions",
						Vec::new(),
						[
							33u8, 46u8, 71u8, 15u8, 195u8, 14u8, 107u8, 223u8, 112u8, 69u8, 249u8,
							233u8, 86u8, 249u8, 79u8, 164u8, 20u8, 71u8, 191u8, 32u8, 67u8, 195u8,
							128u8, 61u8, 67u8, 84u8, 79u8, 137u8, 248u8, 85u8, 253u8, 21u8,
						],
					)
				}
				#[doc = " The validator account keys of the validators actively participating in parachain consensus."]
				pub fn account_keys(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaSessionInfo",
						"AccountKeys",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							48u8, 179u8, 139u8, 15u8, 144u8, 71u8, 92u8, 160u8, 254u8, 237u8, 98u8,
							60u8, 254u8, 208u8, 201u8, 32u8, 79u8, 55u8, 3u8, 33u8, 188u8, 134u8,
							18u8, 151u8, 132u8, 40u8, 192u8, 215u8, 94u8, 124u8, 148u8, 142u8,
						],
					)
				}
				#[doc = " The validator account keys of the validators actively participating in parachain consensus."]
				pub fn account_keys_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParaSessionInfo",
						"AccountKeys",
						Vec::new(),
						[
							48u8, 179u8, 139u8, 15u8, 144u8, 71u8, 92u8, 160u8, 254u8, 237u8, 98u8,
							60u8, 254u8, 208u8, 201u8, 32u8, 79u8, 55u8, 3u8, 33u8, 188u8, 134u8,
							18u8, 151u8, 132u8, 40u8, 192u8, 215u8, 94u8, 124u8, 148u8, 142u8,
						],
					)
				}
			}
		}
	}
	pub mod paras_disputes {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceUnfreeze;
			pub struct TransactionApi;
			impl TransactionApi {
				pub fn force_unfreeze(&self) -> ::subxt::tx::StaticTxPayload<ForceUnfreeze> {
					::subxt::tx::StaticTxPayload::new(
						"ParasDisputes",
						"force_unfreeze",
						ForceUnfreeze {},
						[
							212u8, 211u8, 58u8, 159u8, 23u8, 220u8, 64u8, 175u8, 65u8, 50u8, 192u8,
							122u8, 113u8, 189u8, 74u8, 191u8, 48u8, 93u8, 251u8, 50u8, 237u8,
							240u8, 91u8, 139u8, 193u8, 114u8, 131u8, 125u8, 124u8, 236u8, 191u8,
							190u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::polkadot_runtime_parachains::disputes::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A dispute has been initiated. \\[candidate hash, dispute location\\]"]
			pub struct DisputeInitiated(
				pub runtime_types::polkadot_core_primitives::CandidateHash,
				pub runtime_types::polkadot_runtime_parachains::disputes::DisputeLocation,
			);
			impl ::subxt::events::StaticEvent for DisputeInitiated {
				const PALLET: &'static str = "ParasDisputes";
				const EVENT: &'static str = "DisputeInitiated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A dispute has concluded for or against a candidate."]
			#[doc = "`\\[para id, candidate hash, dispute result\\]`"]
			pub struct DisputeConcluded(
				pub runtime_types::polkadot_core_primitives::CandidateHash,
				pub runtime_types::polkadot_runtime_parachains::disputes::DisputeResult,
			);
			impl ::subxt::events::StaticEvent for DisputeConcluded {
				const PALLET: &'static str = "ParasDisputes";
				const EVENT: &'static str = "DisputeConcluded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A dispute has timed out due to insufficient participation."]
			#[doc = "`\\[para id, candidate hash\\]`"]
			pub struct DisputeTimedOut(pub runtime_types::polkadot_core_primitives::CandidateHash);
			impl ::subxt::events::StaticEvent for DisputeTimedOut {
				const PALLET: &'static str = "ParasDisputes";
				const EVENT: &'static str = "DisputeTimedOut";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "A dispute has concluded with supermajority against a candidate."]
			#[doc = "Block authors should no longer build on top of this head and should"]
			#[doc = "instead revert the block at the given height. This should be the"]
			#[doc = "number of the child of the last known valid block in the chain."]
			pub struct Revert(pub ::core::primitive::u32);
			impl ::subxt::events::StaticEvent for Revert {
				const PALLET: &'static str = "ParasDisputes";
				const EVENT: &'static str = "Revert";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The last pruned session, if any. All data stored by this module"]
				#[doc = " references sessions."]
				pub fn last_pruned_session(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParasDisputes",
						"LastPrunedSession",
						vec![],
						[
							125u8, 138u8, 99u8, 242u8, 9u8, 246u8, 215u8, 246u8, 141u8, 6u8, 129u8,
							87u8, 27u8, 58u8, 53u8, 121u8, 61u8, 119u8, 35u8, 104u8, 33u8, 43u8,
							179u8, 82u8, 244u8, 121u8, 174u8, 135u8, 87u8, 119u8, 236u8, 105u8,
						],
					)
				}
				#[doc = " All ongoing or concluded disputes for the last several sessions."]
				pub fn disputes(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<
						runtime_types::polkadot_core_primitives::CandidateHash,
					>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_primitives::v2::DisputeState<
							::core::primitive::u32,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParasDisputes",
						"Disputes",
						vec![
							::subxt::storage::address::StorageMapKey::new(
								_0.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
							::subxt::storage::address::StorageMapKey::new(
								_1.borrow(),
								::subxt::storage::address::StorageHasher::Blake2_128Concat,
							),
						],
						[
							192u8, 238u8, 255u8, 67u8, 169u8, 86u8, 99u8, 243u8, 228u8, 88u8,
							142u8, 138u8, 183u8, 117u8, 82u8, 22u8, 163u8, 30u8, 175u8, 247u8,
							50u8, 204u8, 12u8, 171u8, 57u8, 189u8, 151u8, 191u8, 196u8, 89u8, 94u8,
							165u8,
						],
					)
				}
				#[doc = " All ongoing or concluded disputes for the last several sessions."]
				pub fn disputes_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_primitives::v2::DisputeState<
							::core::primitive::u32,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParasDisputes",
						"Disputes",
						Vec::new(),
						[
							192u8, 238u8, 255u8, 67u8, 169u8, 86u8, 99u8, 243u8, 228u8, 88u8,
							142u8, 138u8, 183u8, 117u8, 82u8, 22u8, 163u8, 30u8, 175u8, 247u8,
							50u8, 204u8, 12u8, 171u8, 57u8, 189u8, 151u8, 191u8, 196u8, 89u8, 94u8,
							165u8,
						],
					)
				}
				#[doc = " All included blocks on the chain, as well as the block number in this chain that"]
				#[doc = " should be reverted back to if the candidate is disputed and determined to be invalid."]
				pub fn included(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<
						runtime_types::polkadot_core_primitives::CandidateHash,
					>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParasDisputes",
						"Included",
						vec![
							::subxt::storage::address::StorageMapKey::new(
								_0.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
							::subxt::storage::address::StorageMapKey::new(
								_1.borrow(),
								::subxt::storage::address::StorageHasher::Blake2_128Concat,
							),
						],
						[
							129u8, 50u8, 76u8, 60u8, 82u8, 106u8, 248u8, 164u8, 152u8, 80u8, 58u8,
							185u8, 211u8, 225u8, 122u8, 100u8, 234u8, 241u8, 123u8, 205u8, 4u8,
							8u8, 193u8, 116u8, 167u8, 158u8, 252u8, 223u8, 204u8, 226u8, 74u8,
							195u8,
						],
					)
				}
				#[doc = " All included blocks on the chain, as well as the block number in this chain that"]
				#[doc = " should be reverted back to if the candidate is disputed and determined to be invalid."]
				pub fn included_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParasDisputes",
						"Included",
						Vec::new(),
						[
							129u8, 50u8, 76u8, 60u8, 82u8, 106u8, 248u8, 164u8, 152u8, 80u8, 58u8,
							185u8, 211u8, 225u8, 122u8, 100u8, 234u8, 241u8, 123u8, 205u8, 4u8,
							8u8, 193u8, 116u8, 167u8, 158u8, 252u8, 223u8, 204u8, 226u8, 74u8,
							195u8,
						],
					)
				}
				#[doc = " Maps session indices to a vector indicating the number of potentially-spam disputes"]
				#[doc = " each validator is participating in. Potentially-spam disputes are remote disputes which have"]
				#[doc = " fewer than `byzantine_threshold + 1` validators."]
				#[doc = ""]
				#[doc = " The i'th entry of the vector corresponds to the i'th validator in the session."]
				pub fn spam_slots(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u32>>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParasDisputes",
						"SpamSlots",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							172u8, 23u8, 120u8, 188u8, 71u8, 248u8, 252u8, 41u8, 132u8, 221u8,
							98u8, 215u8, 33u8, 242u8, 168u8, 196u8, 90u8, 123u8, 190u8, 27u8,
							147u8, 6u8, 196u8, 175u8, 198u8, 216u8, 50u8, 74u8, 138u8, 122u8,
							251u8, 238u8,
						],
					)
				}
				#[doc = " Maps session indices to a vector indicating the number of potentially-spam disputes"]
				#[doc = " each validator is participating in. Potentially-spam disputes are remote disputes which have"]
				#[doc = " fewer than `byzantine_threshold + 1` validators."]
				#[doc = ""]
				#[doc = " The i'th entry of the vector corresponds to the i'th validator in the session."]
				pub fn spam_slots_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::std::vec::Vec<::core::primitive::u32>>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParasDisputes",
						"SpamSlots",
						Vec::new(),
						[
							172u8, 23u8, 120u8, 188u8, 71u8, 248u8, 252u8, 41u8, 132u8, 221u8,
							98u8, 215u8, 33u8, 242u8, 168u8, 196u8, 90u8, 123u8, 190u8, 27u8,
							147u8, 6u8, 196u8, 175u8, 198u8, 216u8, 50u8, 74u8, 138u8, 122u8,
							251u8, 238u8,
						],
					)
				}
				#[doc = " Whether the chain is frozen. Starts as `None`. When this is `Some`,"]
				#[doc = " the chain will not accept any new parachain blocks for backing or inclusion,"]
				#[doc = " and its value indicates the last valid block number in the chain."]
				#[doc = " It can only be set back to `None` by governance intervention."]
				pub fn frozen(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::core::option::Option<::core::primitive::u32>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"ParasDisputes",
						"Frozen",
						vec![],
						[
							133u8, 100u8, 86u8, 220u8, 180u8, 189u8, 65u8, 131u8, 64u8, 56u8,
							219u8, 47u8, 130u8, 167u8, 210u8, 125u8, 49u8, 7u8, 153u8, 254u8, 20u8,
							53u8, 218u8, 177u8, 122u8, 148u8, 16u8, 198u8, 251u8, 50u8, 194u8,
							128u8,
						],
					)
				}
			}
		}
	}
	pub mod registrar {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Register {
				pub id: runtime_types::polkadot_parachain::primitives::Id,
				pub genesis_head: runtime_types::polkadot_parachain::primitives::HeadData,
				pub validation_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceRegister {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub deposit: ::core::primitive::u128,
				pub id: runtime_types::polkadot_parachain::primitives::Id,
				pub genesis_head: runtime_types::polkadot_parachain::primitives::HeadData,
				pub validation_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Deregister {
				pub id: runtime_types::polkadot_parachain::primitives::Id,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Swap {
				pub id: runtime_types::polkadot_parachain::primitives::Id,
				pub other: runtime_types::polkadot_parachain::primitives::Id,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceRemoveLock {
				pub para: runtime_types::polkadot_parachain::primitives::Id,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Reserve;
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Register head data and validation code for a reserved Para Id."]
				#[doc = ""]
				#[doc = "## Arguments"]
				#[doc = "- `origin`: Must be called by a `Signed` origin."]
				#[doc = "- `id`: The para ID. Must be owned/managed by the `origin` signing account."]
				#[doc = "- `genesis_head`: The genesis head data of the parachain/thread."]
				#[doc = "- `validation_code`: The initial validation code of the parachain/thread."]
				#[doc = ""]
				#[doc = "## Deposits/Fees"]
				#[doc = "The origin signed account must reserve a corresponding deposit for the registration. Anything already"]
				#[doc = "reserved previously for this para ID is accounted for."]
				#[doc = ""]
				#[doc = "## Events"]
				#[doc = "The `Registered` event is emitted in case of success."]
				pub fn register(
					&self,
					id: runtime_types::polkadot_parachain::primitives::Id,
					genesis_head: runtime_types::polkadot_parachain::primitives::HeadData,
					validation_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
				) -> ::subxt::tx::StaticTxPayload<Register> {
					::subxt::tx::StaticTxPayload::new(
						"Registrar",
						"register",
						Register { id, genesis_head, validation_code },
						[
							154u8, 84u8, 201u8, 125u8, 72u8, 69u8, 188u8, 42u8, 225u8, 14u8, 136u8,
							48u8, 78u8, 86u8, 99u8, 238u8, 252u8, 255u8, 226u8, 219u8, 214u8, 17u8,
							19u8, 9u8, 12u8, 13u8, 174u8, 243u8, 37u8, 134u8, 76u8, 23u8,
						],
					)
				}
				#[doc = "Force the registration of a Para Id on the relay chain."]
				#[doc = ""]
				#[doc = "This function must be called by a Root origin."]
				#[doc = ""]
				#[doc = "The deposit taken can be specified for this registration. Any `ParaId`"]
				#[doc = "can be registered, including sub-1000 IDs which are System Parachains."]
				pub fn force_register(
					&self,
					who: ::subxt::ext::sp_core::crypto::AccountId32,
					deposit: ::core::primitive::u128,
					id: runtime_types::polkadot_parachain::primitives::Id,
					genesis_head: runtime_types::polkadot_parachain::primitives::HeadData,
					validation_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
				) -> ::subxt::tx::StaticTxPayload<ForceRegister> {
					::subxt::tx::StaticTxPayload::new(
						"Registrar",
						"force_register",
						ForceRegister { who, deposit, id, genesis_head, validation_code },
						[
							59u8, 24u8, 236u8, 163u8, 53u8, 49u8, 92u8, 199u8, 38u8, 76u8, 101u8,
							73u8, 166u8, 105u8, 145u8, 55u8, 89u8, 30u8, 30u8, 137u8, 151u8, 219u8,
							116u8, 226u8, 168u8, 220u8, 222u8, 6u8, 105u8, 91u8, 254u8, 216u8,
						],
					)
				}
				#[doc = "Deregister a Para Id, freeing all data and returning any deposit."]
				#[doc = ""]
				#[doc = "The caller must be Root, the `para` owner, or the `para` itself. The para must be a parathread."]
				pub fn deregister(
					&self,
					id: runtime_types::polkadot_parachain::primitives::Id,
				) -> ::subxt::tx::StaticTxPayload<Deregister> {
					::subxt::tx::StaticTxPayload::new(
						"Registrar",
						"deregister",
						Deregister { id },
						[
							137u8, 9u8, 146u8, 11u8, 126u8, 125u8, 186u8, 222u8, 246u8, 199u8,
							94u8, 229u8, 147u8, 245u8, 213u8, 51u8, 203u8, 181u8, 78u8, 87u8, 18u8,
							255u8, 79u8, 107u8, 234u8, 2u8, 21u8, 212u8, 1u8, 73u8, 173u8, 253u8,
						],
					)
				}
				#[doc = "Swap a parachain with another parachain or parathread."]
				#[doc = ""]
				#[doc = "The origin must be Root, the `para` owner, or the `para` itself."]
				#[doc = ""]
				#[doc = "The swap will happen only if there is already an opposite swap pending. If there is not,"]
				#[doc = "the swap will be stored in the pending swaps map, ready for a later confirmatory swap."]
				#[doc = ""]
				#[doc = "The `ParaId`s remain mapped to the same head data and code so external code can rely on"]
				#[doc = "`ParaId` to be a long-term identifier of a notional \"parachain\". However, their"]
				#[doc = "scheduling info (i.e. whether they're a parathread or parachain), auction information"]
				#[doc = "and the auction deposit are switched."]
				pub fn swap(
					&self,
					id: runtime_types::polkadot_parachain::primitives::Id,
					other: runtime_types::polkadot_parachain::primitives::Id,
				) -> ::subxt::tx::StaticTxPayload<Swap> {
					::subxt::tx::StaticTxPayload::new(
						"Registrar",
						"swap",
						Swap { id, other },
						[
							238u8, 154u8, 249u8, 250u8, 57u8, 242u8, 47u8, 17u8, 50u8, 70u8, 124u8,
							189u8, 193u8, 137u8, 107u8, 138u8, 216u8, 137u8, 160u8, 103u8, 192u8,
							133u8, 7u8, 130u8, 41u8, 39u8, 47u8, 139u8, 202u8, 7u8, 84u8, 214u8,
						],
					)
				}
				#[doc = "Remove a manager lock from a para. This will allow the manager of a"]
				#[doc = "previously locked para to deregister or swap a para without using governance."]
				#[doc = ""]
				#[doc = "Can only be called by the Root origin."]
				pub fn force_remove_lock(
					&self,
					para: runtime_types::polkadot_parachain::primitives::Id,
				) -> ::subxt::tx::StaticTxPayload<ForceRemoveLock> {
					::subxt::tx::StaticTxPayload::new(
						"Registrar",
						"force_remove_lock",
						ForceRemoveLock { para },
						[
							161u8, 77u8, 236u8, 143u8, 243u8, 159u8, 88u8, 61u8, 217u8, 140u8,
							161u8, 61u8, 20u8, 76u8, 130u8, 59u8, 85u8, 219u8, 105u8, 234u8, 146u8,
							142u8, 121u8, 154u8, 170u8, 210u8, 204u8, 175u8, 160u8, 86u8, 249u8,
							150u8,
						],
					)
				}
				#[doc = "Reserve a Para Id on the relay chain."]
				#[doc = ""]
				#[doc = "This function will reserve a new Para Id to be owned/managed by the origin account."]
				#[doc = "The origin account is able to register head data and validation code using `register` to create"]
				#[doc = "a parathread. Using the Slots pallet, a parathread can then be upgraded to get a parachain slot."]
				#[doc = ""]
				#[doc = "## Arguments"]
				#[doc = "- `origin`: Must be called by a `Signed` origin. Becomes the manager/owner of the new para ID."]
				#[doc = ""]
				#[doc = "## Deposits/Fees"]
				#[doc = "The origin must reserve a deposit of `ParaDeposit` for the registration."]
				#[doc = ""]
				#[doc = "## Events"]
				#[doc = "The `Reserved` event is emitted in case of success, which provides the ID reserved for use."]
				pub fn reserve(&self) -> ::subxt::tx::StaticTxPayload<Reserve> {
					::subxt::tx::StaticTxPayload::new(
						"Registrar",
						"reserve",
						Reserve {},
						[
							22u8, 210u8, 13u8, 54u8, 253u8, 13u8, 89u8, 174u8, 232u8, 119u8, 148u8,
							206u8, 130u8, 133u8, 199u8, 127u8, 201u8, 205u8, 8u8, 213u8, 108u8,
							93u8, 135u8, 88u8, 238u8, 171u8, 31u8, 193u8, 23u8, 113u8, 106u8,
							135u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::polkadot_runtime_common::paras_registrar::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Registered {
				pub para_id: runtime_types::polkadot_parachain::primitives::Id,
				pub manager: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Registered {
				const PALLET: &'static str = "Registrar";
				const EVENT: &'static str = "Registered";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Deregistered {
				pub para_id: runtime_types::polkadot_parachain::primitives::Id,
			}
			impl ::subxt::events::StaticEvent for Deregistered {
				const PALLET: &'static str = "Registrar";
				const EVENT: &'static str = "Deregistered";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Reserved {
				pub para_id: runtime_types::polkadot_parachain::primitives::Id,
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Reserved {
				const PALLET: &'static str = "Registrar";
				const EVENT: &'static str = "Reserved";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Pending swap operations."]
				pub fn pending_swap(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_parachain::primitives::Id,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Registrar",
						"PendingSwap",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							121u8, 124u8, 4u8, 120u8, 173u8, 48u8, 227u8, 135u8, 72u8, 74u8, 238u8,
							230u8, 1u8, 175u8, 33u8, 241u8, 138u8, 82u8, 217u8, 129u8, 138u8,
							107u8, 59u8, 8u8, 205u8, 244u8, 192u8, 159u8, 171u8, 123u8, 149u8,
							174u8,
						],
					)
				}
				#[doc = " Pending swap operations."]
				pub fn pending_swap_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_parachain::primitives::Id,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Registrar",
						"PendingSwap",
						Vec::new(),
						[
							121u8, 124u8, 4u8, 120u8, 173u8, 48u8, 227u8, 135u8, 72u8, 74u8, 238u8,
							230u8, 1u8, 175u8, 33u8, 241u8, 138u8, 82u8, 217u8, 129u8, 138u8,
							107u8, 59u8, 8u8, 205u8, 244u8, 192u8, 159u8, 171u8, 123u8, 149u8,
							174u8,
						],
					)
				}
				#[doc = " Amount held on deposit for each para and the original depositor."]
				#[doc = ""]
				#[doc = " The given account ID is responsible for registering the code and initial head data, but may only do"]
				#[doc = " so if it isn't yet registered. (After that, it's up to governance to do so.)"]
				pub fn paras(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_common::paras_registrar::ParaInfo<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Registrar",
						"Paras",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							149u8, 3u8, 25u8, 145u8, 60u8, 126u8, 219u8, 71u8, 88u8, 241u8, 122u8,
							99u8, 134u8, 191u8, 60u8, 172u8, 230u8, 230u8, 110u8, 31u8, 43u8, 6u8,
							146u8, 161u8, 51u8, 21u8, 169u8, 220u8, 240u8, 218u8, 124u8, 56u8,
						],
					)
				}
				#[doc = " Amount held on deposit for each para and the original depositor."]
				#[doc = ""]
				#[doc = " The given account ID is responsible for registering the code and initial head data, but may only do"]
				#[doc = " so if it isn't yet registered. (After that, it's up to governance to do so.)"]
				pub fn paras_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_common::paras_registrar::ParaInfo<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Registrar",
						"Paras",
						Vec::new(),
						[
							149u8, 3u8, 25u8, 145u8, 60u8, 126u8, 219u8, 71u8, 88u8, 241u8, 122u8,
							99u8, 134u8, 191u8, 60u8, 172u8, 230u8, 230u8, 110u8, 31u8, 43u8, 6u8,
							146u8, 161u8, 51u8, 21u8, 169u8, 220u8, 240u8, 218u8, 124u8, 56u8,
						],
					)
				}
				#[doc = " The next free `ParaId`."]
				pub fn next_free_para_id(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_parachain::primitives::Id,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Registrar",
						"NextFreeParaId",
						vec![],
						[
							139u8, 76u8, 36u8, 150u8, 237u8, 36u8, 143u8, 242u8, 252u8, 29u8,
							236u8, 168u8, 97u8, 50u8, 175u8, 120u8, 83u8, 118u8, 205u8, 64u8, 95u8,
							65u8, 7u8, 230u8, 171u8, 86u8, 189u8, 205u8, 231u8, 211u8, 97u8, 29u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The deposit to be paid to run a parathread."]
				#[doc = " This should include the cost for storing the genesis head and validation code."]
				pub fn para_deposit(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Registrar",
						"ParaDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The deposit to be paid per byte stored on chain."]
				pub fn data_deposit_per_byte(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Registrar",
						"DataDepositPerByte",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
			}
		}
	}
	pub mod slots {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceLease {
				pub para: runtime_types::polkadot_parachain::primitives::Id,
				pub leaser: ::subxt::ext::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
				pub period_begin: ::core::primitive::u32,
				pub period_count: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ClearAllLeases {
				pub para: runtime_types::polkadot_parachain::primitives::Id,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct TriggerOnboard {
				pub para: runtime_types::polkadot_parachain::primitives::Id,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Just a connect into the `lease_out` call, in case Root wants to force some lease to happen"]
				#[doc = "independently of any other on-chain mechanism to use it."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must match `T::ForceOrigin`."]
				pub fn force_lease(
					&self,
					para: runtime_types::polkadot_parachain::primitives::Id,
					leaser: ::subxt::ext::sp_core::crypto::AccountId32,
					amount: ::core::primitive::u128,
					period_begin: ::core::primitive::u32,
					period_count: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<ForceLease> {
					::subxt::tx::StaticTxPayload::new(
						"Slots",
						"force_lease",
						ForceLease { para, leaser, amount, period_begin, period_count },
						[
							196u8, 2u8, 63u8, 229u8, 18u8, 134u8, 48u8, 4u8, 165u8, 46u8, 173u8,
							0u8, 189u8, 35u8, 99u8, 84u8, 103u8, 124u8, 233u8, 246u8, 60u8, 172u8,
							181u8, 205u8, 154u8, 164u8, 36u8, 178u8, 60u8, 164u8, 166u8, 21u8,
						],
					)
				}
				#[doc = "Clear all leases for a Para Id, refunding any deposits back to the original owners."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must match `T::ForceOrigin`."]
				pub fn clear_all_leases(
					&self,
					para: runtime_types::polkadot_parachain::primitives::Id,
				) -> ::subxt::tx::StaticTxPayload<ClearAllLeases> {
					::subxt::tx::StaticTxPayload::new(
						"Slots",
						"clear_all_leases",
						ClearAllLeases { para },
						[
							16u8, 14u8, 185u8, 45u8, 149u8, 70u8, 177u8, 133u8, 130u8, 173u8,
							196u8, 244u8, 77u8, 63u8, 218u8, 64u8, 108u8, 83u8, 84u8, 184u8, 175u8,
							122u8, 36u8, 115u8, 146u8, 117u8, 132u8, 82u8, 2u8, 144u8, 62u8, 179u8,
						],
					)
				}
				#[doc = "Try to onboard a parachain that has a lease for the current lease period."]
				#[doc = ""]
				#[doc = "This function can be useful if there was some state issue with a para that should"]
				#[doc = "have onboarded, but was unable to. As long as they have a lease period, we can"]
				#[doc = "let them onboard from here."]
				#[doc = ""]
				#[doc = "Origin must be signed, but can be called by anyone."]
				pub fn trigger_onboard(
					&self,
					para: runtime_types::polkadot_parachain::primitives::Id,
				) -> ::subxt::tx::StaticTxPayload<TriggerOnboard> {
					::subxt::tx::StaticTxPayload::new(
						"Slots",
						"trigger_onboard",
						TriggerOnboard { para },
						[
							74u8, 158u8, 122u8, 37u8, 34u8, 62u8, 61u8, 218u8, 94u8, 222u8, 1u8,
							153u8, 131u8, 215u8, 157u8, 180u8, 98u8, 130u8, 151u8, 179u8, 22u8,
							120u8, 32u8, 207u8, 208u8, 46u8, 248u8, 43u8, 154u8, 118u8, 106u8, 2u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::polkadot_runtime_common::slots::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "A new `[lease_period]` is beginning."]
			pub struct NewLeasePeriod {
				pub lease_period: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for NewLeasePeriod {
				const PALLET: &'static str = "Slots";
				const EVENT: &'static str = "NewLeasePeriod";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A para has won the right to a continuous set of lease periods as a parachain."]
			#[doc = "First balance is any extra amount reserved on top of the para's existing deposit."]
			#[doc = "Second balance is the total amount reserved."]
			pub struct Leased {
				pub para_id: runtime_types::polkadot_parachain::primitives::Id,
				pub leaser: ::subxt::ext::sp_core::crypto::AccountId32,
				pub period_begin: ::core::primitive::u32,
				pub period_count: ::core::primitive::u32,
				pub extra_reserved: ::core::primitive::u128,
				pub total_amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Leased {
				const PALLET: &'static str = "Slots";
				const EVENT: &'static str = "Leased";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Amounts held on deposit for each (possibly future) leased parachain."]
				#[doc = ""]
				#[doc = " The actual amount locked on its behalf by any account at any time is the maximum of the second values"]
				#[doc = " of the items in this list whose first value is the account."]
				#[doc = ""]
				#[doc = " The first item in the list is the amount locked for the current Lease Period. Following"]
				#[doc = " items are for the subsequent lease periods."]
				#[doc = ""]
				#[doc = " The default value (an empty list) implies that the parachain no longer exists (or never"]
				#[doc = " existed) as far as this pallet is concerned."]
				#[doc = ""]
				#[doc = " If a parachain doesn't exist *yet* but is scheduled to exist in the future, then it"]
				#[doc = " will be left-padded with one or more `None`s to denote the fact that nothing is held on"]
				#[doc = " deposit for the non-existent chain currently, but is held at some point in the future."]
				#[doc = ""]
				#[doc = " It is illegal for a `None` value to trail in the list."]
				pub fn leases(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							::core::option::Option<(
								::subxt::ext::sp_core::crypto::AccountId32,
								::core::primitive::u128,
							)>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Slots",
						"Leases",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							7u8, 104u8, 17u8, 66u8, 157u8, 89u8, 238u8, 38u8, 233u8, 241u8, 110u8,
							67u8, 132u8, 101u8, 243u8, 62u8, 73u8, 7u8, 9u8, 172u8, 22u8, 51u8,
							118u8, 87u8, 3u8, 224u8, 120u8, 88u8, 139u8, 11u8, 96u8, 147u8,
						],
					)
				}
				#[doc = " Amounts held on deposit for each (possibly future) leased parachain."]
				#[doc = ""]
				#[doc = " The actual amount locked on its behalf by any account at any time is the maximum of the second values"]
				#[doc = " of the items in this list whose first value is the account."]
				#[doc = ""]
				#[doc = " The first item in the list is the amount locked for the current Lease Period. Following"]
				#[doc = " items are for the subsequent lease periods."]
				#[doc = ""]
				#[doc = " The default value (an empty list) implies that the parachain no longer exists (or never"]
				#[doc = " existed) as far as this pallet is concerned."]
				#[doc = ""]
				#[doc = " If a parachain doesn't exist *yet* but is scheduled to exist in the future, then it"]
				#[doc = " will be left-padded with one or more `None`s to denote the fact that nothing is held on"]
				#[doc = " deposit for the non-existent chain currently, but is held at some point in the future."]
				#[doc = ""]
				#[doc = " It is illegal for a `None` value to trail in the list."]
				pub fn leases_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<
							::core::option::Option<(
								::subxt::ext::sp_core::crypto::AccountId32,
								::core::primitive::u128,
							)>,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Slots",
						"Leases",
						Vec::new(),
						[
							7u8, 104u8, 17u8, 66u8, 157u8, 89u8, 238u8, 38u8, 233u8, 241u8, 110u8,
							67u8, 132u8, 101u8, 243u8, 62u8, 73u8, 7u8, 9u8, 172u8, 22u8, 51u8,
							118u8, 87u8, 3u8, 224u8, 120u8, 88u8, 139u8, 11u8, 96u8, 147u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The number of blocks over which a single period lasts."]
				pub fn lease_period(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Slots",
						"LeasePeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The number of blocks to offset each lease period by."]
				pub fn lease_offset(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Slots",
						"LeaseOffset",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod auctions {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct NewAuction {
				#[codec(compact)]
				pub duration: ::core::primitive::u32,
				#[codec(compact)]
				pub lease_period_index: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Bid {
				#[codec(compact)]
				pub para: runtime_types::polkadot_parachain::primitives::Id,
				#[codec(compact)]
				pub auction_index: ::core::primitive::u32,
				#[codec(compact)]
				pub first_slot: ::core::primitive::u32,
				#[codec(compact)]
				pub last_slot: ::core::primitive::u32,
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct CancelAuction;
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Create a new auction."]
				#[doc = ""]
				#[doc = "This can only happen when there isn't already an auction in progress and may only be"]
				#[doc = "called by the root origin. Accepts the `duration` of this auction and the"]
				#[doc = "`lease_period_index` of the initial lease period of the four that are to be auctioned."]
				pub fn new_auction(
					&self,
					duration: ::core::primitive::u32,
					lease_period_index: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<NewAuction> {
					::subxt::tx::StaticTxPayload::new(
						"Auctions",
						"new_auction",
						NewAuction { duration, lease_period_index },
						[
							171u8, 40u8, 200u8, 164u8, 213u8, 10u8, 145u8, 164u8, 212u8, 14u8,
							117u8, 215u8, 248u8, 59u8, 34u8, 79u8, 50u8, 176u8, 164u8, 143u8, 92u8,
							82u8, 207u8, 37u8, 103u8, 252u8, 255u8, 142u8, 239u8, 134u8, 114u8,
							151u8,
						],
					)
				}
				#[doc = "Make a new bid from an account (including a parachain account) for deploying a new"]
				#[doc = "parachain."]
				#[doc = ""]
				#[doc = "Multiple simultaneous bids from the same bidder are allowed only as long as all active"]
				#[doc = "bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted."]
				#[doc = ""]
				#[doc = "- `sub` is the sub-bidder ID, allowing for multiple competing bids to be made by (and"]
				#[doc = "funded by) the same account."]
				#[doc = "- `auction_index` is the index of the auction to bid on. Should just be the present"]
				#[doc = "value of `AuctionCounter`."]
				#[doc = "- `first_slot` is the first lease period index of the range to bid on. This is the"]
				#[doc = "absolute lease period index value, not an auction-specific offset."]
				#[doc = "- `last_slot` is the last lease period index of the range to bid on. This is the"]
				#[doc = "absolute lease period index value, not an auction-specific offset."]
				#[doc = "- `amount` is the amount to bid to be held as deposit for the parachain should the"]
				#[doc = "bid win. This amount is held throughout the range."]
				pub fn bid(
					&self,
					para: runtime_types::polkadot_parachain::primitives::Id,
					auction_index: ::core::primitive::u32,
					first_slot: ::core::primitive::u32,
					last_slot: ::core::primitive::u32,
					amount: ::core::primitive::u128,
				) -> ::subxt::tx::StaticTxPayload<Bid> {
					::subxt::tx::StaticTxPayload::new(
						"Auctions",
						"bid",
						Bid { para, auction_index, first_slot, last_slot, amount },
						[
							243u8, 233u8, 248u8, 221u8, 239u8, 59u8, 65u8, 63u8, 125u8, 129u8,
							202u8, 165u8, 30u8, 228u8, 32u8, 73u8, 225u8, 38u8, 128u8, 98u8, 102u8,
							46u8, 203u8, 32u8, 70u8, 74u8, 136u8, 163u8, 83u8, 211u8, 227u8, 139u8,
						],
					)
				}
				#[doc = "Cancel an in-progress auction."]
				#[doc = ""]
				#[doc = "Can only be called by Root origin."]
				pub fn cancel_auction(&self) -> ::subxt::tx::StaticTxPayload<CancelAuction> {
					::subxt::tx::StaticTxPayload::new(
						"Auctions",
						"cancel_auction",
						CancelAuction {},
						[
							182u8, 223u8, 178u8, 136u8, 1u8, 115u8, 229u8, 78u8, 166u8, 128u8,
							28u8, 106u8, 6u8, 248u8, 46u8, 55u8, 110u8, 120u8, 213u8, 11u8, 90u8,
							217u8, 42u8, 120u8, 47u8, 83u8, 126u8, 216u8, 236u8, 251u8, 255u8,
							50u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::polkadot_runtime_common::auctions::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An auction started. Provides its index and the block number where it will begin to"]
			#[doc = "close and the first lease period of the quadruplet that is auctioned."]
			pub struct AuctionStarted {
				pub auction_index: ::core::primitive::u32,
				pub lease_period: ::core::primitive::u32,
				pub ending: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for AuctionStarted {
				const PALLET: &'static str = "Auctions";
				const EVENT: &'static str = "AuctionStarted";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "An auction ended. All funds become unreserved."]
			pub struct AuctionClosed {
				pub auction_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for AuctionClosed {
				const PALLET: &'static str = "Auctions";
				const EVENT: &'static str = "AuctionClosed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Funds were reserved for a winning bid. First balance is the extra amount reserved."]
			#[doc = "Second is the total."]
			pub struct Reserved {
				pub bidder: ::subxt::ext::sp_core::crypto::AccountId32,
				pub extra_reserved: ::core::primitive::u128,
				pub total_amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Reserved {
				const PALLET: &'static str = "Auctions";
				const EVENT: &'static str = "Reserved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Funds were unreserved since bidder is no longer active. `[bidder, amount]`"]
			pub struct Unreserved {
				pub bidder: ::subxt::ext::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Unreserved {
				const PALLET: &'static str = "Auctions";
				const EVENT: &'static str = "Unreserved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Someone attempted to lease the same slot twice for a parachain. The amount is held in reserve"]
			#[doc = "but no parachain slot has been leased."]
			pub struct ReserveConfiscated {
				pub para_id: runtime_types::polkadot_parachain::primitives::Id,
				pub leaser: ::subxt::ext::sp_core::crypto::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for ReserveConfiscated {
				const PALLET: &'static str = "Auctions";
				const EVENT: &'static str = "ReserveConfiscated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A new bid has been accepted as the current winner."]
			pub struct BidAccepted {
				pub bidder: ::subxt::ext::sp_core::crypto::AccountId32,
				pub para_id: runtime_types::polkadot_parachain::primitives::Id,
				pub amount: ::core::primitive::u128,
				pub first_slot: ::core::primitive::u32,
				pub last_slot: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for BidAccepted {
				const PALLET: &'static str = "Auctions";
				const EVENT: &'static str = "BidAccepted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The winning offset was chosen for an auction. This will map into the `Winning` storage map."]
			pub struct WinningOffset {
				pub auction_index: ::core::primitive::u32,
				pub block_number: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for WinningOffset {
				const PALLET: &'static str = "Auctions";
				const EVENT: &'static str = "WinningOffset";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Number of auctions started so far."]
				pub fn auction_counter(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Auctions",
						"AuctionCounter",
						vec![],
						[
							67u8, 247u8, 96u8, 152u8, 0u8, 224u8, 230u8, 98u8, 194u8, 107u8, 3u8,
							203u8, 51u8, 201u8, 149u8, 22u8, 184u8, 80u8, 251u8, 239u8, 253u8,
							19u8, 58u8, 192u8, 65u8, 96u8, 189u8, 54u8, 175u8, 130u8, 143u8, 181u8,
						],
					)
				}
				#[doc = " Information relating to the current auction, if there is one."]
				#[doc = ""]
				#[doc = " The first item in the tuple is the lease period index that the first of the four"]
				#[doc = " contiguous lease periods on auction is for. The second is the block number when the"]
				#[doc = " auction will \"begin to end\", i.e. the first block of the Ending Period of the auction."]
				pub fn auction_info(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Auctions",
						"AuctionInfo",
						vec![],
						[
							73u8, 216u8, 173u8, 230u8, 132u8, 78u8, 83u8, 62u8, 200u8, 69u8, 17u8,
							73u8, 57u8, 107u8, 160u8, 90u8, 147u8, 84u8, 29u8, 110u8, 144u8, 215u8,
							169u8, 110u8, 217u8, 77u8, 109u8, 204u8, 1u8, 164u8, 95u8, 83u8,
						],
					)
				}
				#[doc = " Amounts currently reserved in the accounts of the bidders currently winning"]
				#[doc = " (sub-)ranges."]
				pub fn reserved_amounts(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::crypto::AccountId32>,
					_1: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Auctions",
						"ReservedAmounts",
						vec![::subxt::storage::address::StorageMapKey::new(
							&(_0.borrow(), _1.borrow()),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							120u8, 85u8, 180u8, 244u8, 154u8, 135u8, 87u8, 79u8, 75u8, 169u8,
							220u8, 117u8, 227u8, 85u8, 198u8, 214u8, 28u8, 126u8, 66u8, 188u8,
							137u8, 111u8, 110u8, 152u8, 18u8, 233u8, 76u8, 166u8, 55u8, 233u8,
							93u8, 62u8,
						],
					)
				}
				#[doc = " Amounts currently reserved in the accounts of the bidders currently winning"]
				#[doc = " (sub-)ranges."]
				pub fn reserved_amounts_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Auctions",
						"ReservedAmounts",
						Vec::new(),
						[
							120u8, 85u8, 180u8, 244u8, 154u8, 135u8, 87u8, 79u8, 75u8, 169u8,
							220u8, 117u8, 227u8, 85u8, 198u8, 214u8, 28u8, 126u8, 66u8, 188u8,
							137u8, 111u8, 110u8, 152u8, 18u8, 233u8, 76u8, 166u8, 55u8, 233u8,
							93u8, 62u8,
						],
					)
				}
				#[doc = " The winning bids for each of the 10 ranges at each sample in the final Ending Period of"]
				#[doc = " the current auction. The map's key is the 0-based index into the Sample Size. The"]
				#[doc = " first sample of the ending period is 0; the last is `Sample Size - 1`."]
				pub fn winning(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						[::core::option::Option<(
							::subxt::ext::sp_core::crypto::AccountId32,
							runtime_types::polkadot_parachain::primitives::Id,
							::core::primitive::u128,
						)>; 36usize],
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Auctions",
						"Winning",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							63u8, 56u8, 143u8, 200u8, 12u8, 71u8, 187u8, 73u8, 215u8, 93u8, 222u8,
							102u8, 5u8, 113u8, 6u8, 170u8, 95u8, 228u8, 28u8, 58u8, 109u8, 62u8,
							3u8, 125u8, 211u8, 139u8, 194u8, 30u8, 151u8, 147u8, 47u8, 205u8,
						],
					)
				}
				#[doc = " The winning bids for each of the 10 ranges at each sample in the final Ending Period of"]
				#[doc = " the current auction. The map's key is the 0-based index into the Sample Size. The"]
				#[doc = " first sample of the ending period is 0; the last is `Sample Size - 1`."]
				pub fn winning_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						[::core::option::Option<(
							::subxt::ext::sp_core::crypto::AccountId32,
							runtime_types::polkadot_parachain::primitives::Id,
							::core::primitive::u128,
						)>; 36usize],
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Auctions",
						"Winning",
						Vec::new(),
						[
							63u8, 56u8, 143u8, 200u8, 12u8, 71u8, 187u8, 73u8, 215u8, 93u8, 222u8,
							102u8, 5u8, 113u8, 6u8, 170u8, 95u8, 228u8, 28u8, 58u8, 109u8, 62u8,
							3u8, 125u8, 211u8, 139u8, 194u8, 30u8, 151u8, 147u8, 47u8, 205u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The number of blocks over which an auction may be retroactively ended."]
				pub fn ending_period(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Auctions",
						"EndingPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The length of each sample to take during the ending period."]
				#[doc = ""]
				#[doc = " `EndingPeriod` / `SampleLength` = Total # of Samples"]
				pub fn sample_length(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Auctions",
						"SampleLength",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				pub fn slot_range_count(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Auctions",
						"SlotRangeCount",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				pub fn lease_periods_per_slot(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Auctions",
						"LeasePeriodsPerSlot",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod crowdloan {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Create {
				#[codec(compact)]
				pub index: runtime_types::polkadot_parachain::primitives::Id,
				#[codec(compact)]
				pub cap: ::core::primitive::u128,
				#[codec(compact)]
				pub first_period: ::core::primitive::u32,
				#[codec(compact)]
				pub last_period: ::core::primitive::u32,
				#[codec(compact)]
				pub end: ::core::primitive::u32,
				pub verifier: ::core::option::Option<runtime_types::sp_runtime::MultiSigner>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Contribute {
				#[codec(compact)]
				pub index: runtime_types::polkadot_parachain::primitives::Id,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
				pub signature: ::core::option::Option<runtime_types::sp_runtime::MultiSignature>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Withdraw {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				#[codec(compact)]
				pub index: runtime_types::polkadot_parachain::primitives::Id,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Refund {
				#[codec(compact)]
				pub index: runtime_types::polkadot_parachain::primitives::Id,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Dissolve {
				#[codec(compact)]
				pub index: runtime_types::polkadot_parachain::primitives::Id,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Edit {
				#[codec(compact)]
				pub index: runtime_types::polkadot_parachain::primitives::Id,
				#[codec(compact)]
				pub cap: ::core::primitive::u128,
				#[codec(compact)]
				pub first_period: ::core::primitive::u32,
				#[codec(compact)]
				pub last_period: ::core::primitive::u32,
				#[codec(compact)]
				pub end: ::core::primitive::u32,
				pub verifier: ::core::option::Option<runtime_types::sp_runtime::MultiSigner>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct AddMemo {
				pub index: runtime_types::polkadot_parachain::primitives::Id,
				pub memo: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Poke {
				pub index: runtime_types::polkadot_parachain::primitives::Id,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ContributeAll {
				#[codec(compact)]
				pub index: runtime_types::polkadot_parachain::primitives::Id,
				pub signature: ::core::option::Option<runtime_types::sp_runtime::MultiSignature>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Create a new crowdloaning campaign for a parachain slot with the given lease period range."]
				#[doc = ""]
				#[doc = "This applies a lock to your parachain configuration, ensuring that it cannot be changed"]
				#[doc = "by the parachain manager."]
				pub fn create(
					&self,
					index: runtime_types::polkadot_parachain::primitives::Id,
					cap: ::core::primitive::u128,
					first_period: ::core::primitive::u32,
					last_period: ::core::primitive::u32,
					end: ::core::primitive::u32,
					verifier: ::core::option::Option<runtime_types::sp_runtime::MultiSigner>,
				) -> ::subxt::tx::StaticTxPayload<Create> {
					::subxt::tx::StaticTxPayload::new(
						"Crowdloan",
						"create",
						Create { index, cap, first_period, last_period, end, verifier },
						[
							78u8, 52u8, 156u8, 23u8, 104u8, 251u8, 20u8, 233u8, 42u8, 231u8, 16u8,
							192u8, 164u8, 68u8, 98u8, 129u8, 88u8, 126u8, 123u8, 4u8, 210u8, 161u8,
							190u8, 90u8, 67u8, 235u8, 74u8, 184u8, 180u8, 197u8, 248u8, 238u8,
						],
					)
				}
				#[doc = "Contribute to a crowd sale. This will transfer some balance over to fund a parachain"]
				#[doc = "slot. It will be withdrawable when the crowdloan has ended and the funds are unused."]
				pub fn contribute(
					&self,
					index: runtime_types::polkadot_parachain::primitives::Id,
					value: ::core::primitive::u128,
					signature: ::core::option::Option<runtime_types::sp_runtime::MultiSignature>,
				) -> ::subxt::tx::StaticTxPayload<Contribute> {
					::subxt::tx::StaticTxPayload::new(
						"Crowdloan",
						"contribute",
						Contribute { index, value, signature },
						[
							159u8, 180u8, 248u8, 203u8, 128u8, 231u8, 28u8, 84u8, 14u8, 214u8,
							69u8, 217u8, 62u8, 201u8, 169u8, 160u8, 45u8, 160u8, 125u8, 255u8,
							95u8, 140u8, 58u8, 3u8, 224u8, 157u8, 199u8, 229u8, 72u8, 40u8, 218u8,
							55u8,
						],
					)
				}
				#[doc = "Withdraw full balance of a specific contributor."]
				#[doc = ""]
				#[doc = "Origin must be signed, but can come from anyone."]
				#[doc = ""]
				#[doc = "The fund must be either in, or ready for, retirement. For a fund to be *in* retirement, then the retirement"]
				#[doc = "flag must be set. For a fund to be ready for retirement, then:"]
				#[doc = "- it must not already be in retirement;"]
				#[doc = "- the amount of raised funds must be bigger than the _free_ balance of the account;"]
				#[doc = "- and either:"]
				#[doc = "  - the block number must be at least `end`; or"]
				#[doc = "  - the current lease period must be greater than the fund's `last_period`."]
				#[doc = ""]
				#[doc = "In this case, the fund's retirement flag is set and its `end` is reset to the current block"]
				#[doc = "number."]
				#[doc = ""]
				#[doc = "- `who`: The account whose contribution should be withdrawn."]
				#[doc = "- `index`: The parachain to whose crowdloan the contribution was made."]
				pub fn withdraw(
					&self,
					who: ::subxt::ext::sp_core::crypto::AccountId32,
					index: runtime_types::polkadot_parachain::primitives::Id,
				) -> ::subxt::tx::StaticTxPayload<Withdraw> {
					::subxt::tx::StaticTxPayload::new(
						"Crowdloan",
						"withdraw",
						Withdraw { who, index },
						[
							147u8, 177u8, 116u8, 152u8, 9u8, 102u8, 4u8, 201u8, 204u8, 145u8,
							104u8, 226u8, 86u8, 211u8, 66u8, 109u8, 109u8, 139u8, 229u8, 97u8,
							215u8, 101u8, 255u8, 181u8, 121u8, 139u8, 165u8, 169u8, 112u8, 173u8,
							213u8, 121u8,
						],
					)
				}
				#[doc = "Automatically refund contributors of an ended crowdloan."]
				#[doc = "Due to weight restrictions, this function may need to be called multiple"]
				#[doc = "times to fully refund all users. We will refund `RemoveKeysLimit` users at a time."]
				#[doc = ""]
				#[doc = "Origin must be signed, but can come from anyone."]
				pub fn refund(
					&self,
					index: runtime_types::polkadot_parachain::primitives::Id,
				) -> ::subxt::tx::StaticTxPayload<Refund> {
					::subxt::tx::StaticTxPayload::new(
						"Crowdloan",
						"refund",
						Refund { index },
						[
							223u8, 64u8, 5u8, 135u8, 15u8, 234u8, 60u8, 114u8, 199u8, 216u8, 73u8,
							165u8, 198u8, 34u8, 140u8, 142u8, 214u8, 254u8, 203u8, 163u8, 224u8,
							120u8, 104u8, 54u8, 12u8, 126u8, 72u8, 147u8, 20u8, 180u8, 251u8,
							208u8,
						],
					)
				}
				#[doc = "Remove a fund after the retirement period has ended and all funds have been returned."]
				pub fn dissolve(
					&self,
					index: runtime_types::polkadot_parachain::primitives::Id,
				) -> ::subxt::tx::StaticTxPayload<Dissolve> {
					::subxt::tx::StaticTxPayload::new(
						"Crowdloan",
						"dissolve",
						Dissolve { index },
						[
							100u8, 67u8, 105u8, 3u8, 213u8, 149u8, 201u8, 146u8, 241u8, 62u8, 31u8,
							108u8, 58u8, 30u8, 241u8, 141u8, 134u8, 115u8, 56u8, 131u8, 60u8, 75u8,
							143u8, 227u8, 11u8, 32u8, 31u8, 230u8, 165u8, 227u8, 170u8, 126u8,
						],
					)
				}
				#[doc = "Edit the configuration for an in-progress crowdloan."]
				#[doc = ""]
				#[doc = "Can only be called by Root origin."]
				pub fn edit(
					&self,
					index: runtime_types::polkadot_parachain::primitives::Id,
					cap: ::core::primitive::u128,
					first_period: ::core::primitive::u32,
					last_period: ::core::primitive::u32,
					end: ::core::primitive::u32,
					verifier: ::core::option::Option<runtime_types::sp_runtime::MultiSigner>,
				) -> ::subxt::tx::StaticTxPayload<Edit> {
					::subxt::tx::StaticTxPayload::new(
						"Crowdloan",
						"edit",
						Edit { index, cap, first_period, last_period, end, verifier },
						[
							222u8, 124u8, 94u8, 221u8, 36u8, 183u8, 67u8, 114u8, 198u8, 107u8,
							154u8, 174u8, 142u8, 47u8, 3u8, 181u8, 72u8, 29u8, 2u8, 83u8, 81u8,
							47u8, 168u8, 142u8, 139u8, 63u8, 136u8, 191u8, 41u8, 252u8, 221u8,
							56u8,
						],
					)
				}
				#[doc = "Add an optional memo to an existing crowdloan contribution."]
				#[doc = ""]
				#[doc = "Origin must be Signed, and the user must have contributed to the crowdloan."]
				pub fn add_memo(
					&self,
					index: runtime_types::polkadot_parachain::primitives::Id,
					memo: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::StaticTxPayload<AddMemo> {
					::subxt::tx::StaticTxPayload::new(
						"Crowdloan",
						"add_memo",
						AddMemo { index, memo },
						[
							104u8, 199u8, 143u8, 251u8, 28u8, 49u8, 144u8, 186u8, 83u8, 108u8,
							26u8, 127u8, 22u8, 141u8, 48u8, 62u8, 194u8, 193u8, 97u8, 10u8, 84u8,
							89u8, 236u8, 191u8, 40u8, 8u8, 1u8, 250u8, 112u8, 165u8, 221u8, 112u8,
						],
					)
				}
				#[doc = "Poke the fund into `NewRaise`"]
				#[doc = ""]
				#[doc = "Origin must be Signed, and the fund has non-zero raise."]
				pub fn poke(
					&self,
					index: runtime_types::polkadot_parachain::primitives::Id,
				) -> ::subxt::tx::StaticTxPayload<Poke> {
					::subxt::tx::StaticTxPayload::new(
						"Crowdloan",
						"poke",
						Poke { index },
						[
							118u8, 60u8, 131u8, 17u8, 27u8, 153u8, 57u8, 24u8, 191u8, 211u8, 101u8,
							123u8, 34u8, 145u8, 193u8, 113u8, 244u8, 162u8, 148u8, 143u8, 81u8,
							86u8, 136u8, 23u8, 48u8, 185u8, 52u8, 60u8, 216u8, 243u8, 63u8, 102u8,
						],
					)
				}
				#[doc = "Contribute your entire balance to a crowd sale. This will transfer the entire balance of a user over to fund a parachain"]
				#[doc = "slot. It will be withdrawable when the crowdloan has ended and the funds are unused."]
				pub fn contribute_all(
					&self,
					index: runtime_types::polkadot_parachain::primitives::Id,
					signature: ::core::option::Option<runtime_types::sp_runtime::MultiSignature>,
				) -> ::subxt::tx::StaticTxPayload<ContributeAll> {
					::subxt::tx::StaticTxPayload::new(
						"Crowdloan",
						"contribute_all",
						ContributeAll { index, signature },
						[
							94u8, 61u8, 105u8, 107u8, 204u8, 18u8, 223u8, 242u8, 19u8, 162u8,
							205u8, 130u8, 203u8, 73u8, 42u8, 85u8, 208u8, 157u8, 115u8, 112u8,
							168u8, 10u8, 163u8, 80u8, 222u8, 71u8, 23u8, 194u8, 142u8, 4u8, 82u8,
							253u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::polkadot_runtime_common::crowdloan::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Create a new crowdloaning campaign."]
			pub struct Created {
				pub para_id: runtime_types::polkadot_parachain::primitives::Id,
			}
			impl ::subxt::events::StaticEvent for Created {
				const PALLET: &'static str = "Crowdloan";
				const EVENT: &'static str = "Created";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Contributed to a crowd sale."]
			pub struct Contributed {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub fund_index: runtime_types::polkadot_parachain::primitives::Id,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Contributed {
				const PALLET: &'static str = "Crowdloan";
				const EVENT: &'static str = "Contributed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Withdrew full balance of a contributor."]
			pub struct Withdrew {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub fund_index: runtime_types::polkadot_parachain::primitives::Id,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Withdrew {
				const PALLET: &'static str = "Crowdloan";
				const EVENT: &'static str = "Withdrew";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The loans in a fund have been partially dissolved, i.e. there are some left"]
			#[doc = "over child keys that still need to be killed."]
			pub struct PartiallyRefunded {
				pub para_id: runtime_types::polkadot_parachain::primitives::Id,
			}
			impl ::subxt::events::StaticEvent for PartiallyRefunded {
				const PALLET: &'static str = "Crowdloan";
				const EVENT: &'static str = "PartiallyRefunded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "All loans in a fund have been refunded."]
			pub struct AllRefunded {
				pub para_id: runtime_types::polkadot_parachain::primitives::Id,
			}
			impl ::subxt::events::StaticEvent for AllRefunded {
				const PALLET: &'static str = "Crowdloan";
				const EVENT: &'static str = "AllRefunded";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Fund is dissolved."]
			pub struct Dissolved {
				pub para_id: runtime_types::polkadot_parachain::primitives::Id,
			}
			impl ::subxt::events::StaticEvent for Dissolved {
				const PALLET: &'static str = "Crowdloan";
				const EVENT: &'static str = "Dissolved";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The result of trying to submit a new bid to the Slots pallet."]
			pub struct HandleBidResult {
				pub para_id: runtime_types::polkadot_parachain::primitives::Id,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for HandleBidResult {
				const PALLET: &'static str = "Crowdloan";
				const EVENT: &'static str = "HandleBidResult";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The configuration to a crowdloan has been edited."]
			pub struct Edited {
				pub para_id: runtime_types::polkadot_parachain::primitives::Id,
			}
			impl ::subxt::events::StaticEvent for Edited {
				const PALLET: &'static str = "Crowdloan";
				const EVENT: &'static str = "Edited";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A memo has been updated."]
			pub struct MemoUpdated {
				pub who: ::subxt::ext::sp_core::crypto::AccountId32,
				pub para_id: runtime_types::polkadot_parachain::primitives::Id,
				pub memo: ::std::vec::Vec<::core::primitive::u8>,
			}
			impl ::subxt::events::StaticEvent for MemoUpdated {
				const PALLET: &'static str = "Crowdloan";
				const EVENT: &'static str = "MemoUpdated";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A parachain has been moved to `NewRaise`"]
			pub struct AddedToNewRaise {
				pub para_id: runtime_types::polkadot_parachain::primitives::Id,
			}
			impl ::subxt::events::StaticEvent for AddedToNewRaise {
				const PALLET: &'static str = "Crowdloan";
				const EVENT: &'static str = "AddedToNewRaise";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Info on all of the funds."]
				pub fn funds(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_common::crowdloan::FundInfo<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
							::core::primitive::u32,
							::core::primitive::u32,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Crowdloan",
						"Funds",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Twox64Concat,
						)],
						[
							231u8, 126u8, 89u8, 84u8, 167u8, 23u8, 211u8, 70u8, 203u8, 124u8, 20u8,
							162u8, 112u8, 38u8, 201u8, 207u8, 82u8, 202u8, 80u8, 228u8, 4u8, 41u8,
							95u8, 190u8, 193u8, 185u8, 178u8, 85u8, 179u8, 102u8, 53u8, 63u8,
						],
					)
				}
				#[doc = " Info on all of the funds."]
				pub fn funds_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::polkadot_runtime_common::crowdloan::FundInfo<
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
							::core::primitive::u32,
							::core::primitive::u32,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Crowdloan",
						"Funds",
						Vec::new(),
						[
							231u8, 126u8, 89u8, 84u8, 167u8, 23u8, 211u8, 70u8, 203u8, 124u8, 20u8,
							162u8, 112u8, 38u8, 201u8, 207u8, 82u8, 202u8, 80u8, 228u8, 4u8, 41u8,
							95u8, 190u8, 193u8, 185u8, 178u8, 85u8, 179u8, 102u8, 53u8, 63u8,
						],
					)
				}
				#[doc = " The funds that have had additional contributions during the last block. This is used"]
				#[doc = " in order to determine which funds should submit new or updated bids."]
				pub fn new_raise(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Crowdloan",
						"NewRaise",
						vec![],
						[
							8u8, 180u8, 9u8, 197u8, 254u8, 198u8, 89u8, 112u8, 29u8, 153u8, 243u8,
							196u8, 92u8, 204u8, 135u8, 232u8, 93u8, 239u8, 147u8, 103u8, 130u8,
							28u8, 128u8, 124u8, 4u8, 236u8, 29u8, 248u8, 27u8, 165u8, 111u8, 147u8,
						],
					)
				}
				#[doc = " The number of auctions that have entered into their ending period so far."]
				pub fn endings_count(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Crowdloan",
						"EndingsCount",
						vec![],
						[
							12u8, 159u8, 166u8, 75u8, 192u8, 33u8, 21u8, 244u8, 149u8, 200u8, 49u8,
							54u8, 191u8, 174u8, 202u8, 86u8, 76u8, 115u8, 189u8, 35u8, 192u8,
							175u8, 156u8, 188u8, 41u8, 23u8, 92u8, 36u8, 141u8, 235u8, 248u8,
							143u8,
						],
					)
				}
				#[doc = " Tracker for the next available fund index"]
				pub fn next_fund_index(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"Crowdloan",
						"NextFundIndex",
						vec![],
						[
							1u8, 215u8, 164u8, 194u8, 231u8, 34u8, 207u8, 19u8, 149u8, 187u8, 3u8,
							176u8, 194u8, 240u8, 180u8, 169u8, 214u8, 194u8, 202u8, 240u8, 209u8,
							6u8, 244u8, 46u8, 54u8, 142u8, 61u8, 220u8, 240u8, 96u8, 10u8, 168u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " `PalletId` for the crowdloan pallet. An appropriate value could be `PalletId(*b\"py/cfund\")`"]
				pub fn pallet_id(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<runtime_types::frame_support::PalletId>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Crowdloan",
						"PalletId",
						[
							139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
							174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
							9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
						],
					)
				}
				#[doc = " The minimum amount that may be contributed into a crowdloan. Should almost certainly be at"]
				#[doc = " least `ExistentialDeposit`."]
				pub fn min_contribution(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u128>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Crowdloan",
						"MinContribution",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Max number of storage keys to remove per extrinsic call."]
				pub fn remove_keys_limit(
					&self,
				) -> ::subxt::constants::StaticConstantAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
				> {
					::subxt::constants::StaticConstantAddress::new(
						"Crowdloan",
						"RemoveKeysLimit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod xcm_pallet {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Send {
				pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct TeleportAssets {
				pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
				pub fee_asset_item: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ReserveTransferAssets {
				pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
				pub fee_asset_item: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Execute {
				pub message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
				pub max_weight: ::core::primitive::u64,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceXcmVersion {
				pub location:
					::std::boxed::Box<runtime_types::xcm::v1::multilocation::MultiLocation>,
				pub xcm_version: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceDefaultXcmVersion {
				pub maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceSubscribeVersionNotify {
				pub location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ForceUnsubscribeVersionNotify {
				pub location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct LimitedReserveTransferAssets {
				pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
				pub fee_asset_item: ::core::primitive::u32,
				pub weight_limit: runtime_types::xcm::v2::WeightLimit,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct LimitedTeleportAssets {
				pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
				pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
				pub fee_asset_item: ::core::primitive::u32,
				pub weight_limit: runtime_types::xcm::v2::WeightLimit,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				pub fn send(
					&self,
					dest: runtime_types::xcm::VersionedMultiLocation,
					message: runtime_types::xcm::VersionedXcm,
				) -> ::subxt::tx::StaticTxPayload<Send> {
					::subxt::tx::StaticTxPayload::new(
						"XcmPallet",
						"send",
						Send {
							dest: ::std::boxed::Box::new(dest),
							message: ::std::boxed::Box::new(message),
						},
						[
							190u8, 88u8, 197u8, 248u8, 111u8, 198u8, 199u8, 206u8, 39u8, 121u8,
							23u8, 121u8, 93u8, 82u8, 22u8, 61u8, 96u8, 210u8, 142u8, 249u8, 195u8,
							78u8, 44u8, 8u8, 118u8, 120u8, 113u8, 168u8, 99u8, 94u8, 232u8, 4u8,
						],
					)
				}
				#[doc = "Teleport some assets from the local chain to some destination chain."]
				#[doc = ""]
				#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
				#[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
				#[doc = "with all fees taken as needed from the asset."]
				#[doc = ""]
				#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
				#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
				#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
				#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
				#[doc = "  an `AccountId32` value."]
				#[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
				#[doc = "  `dest` side. May not be empty."]
				#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
				#[doc = "  fees."]
				pub fn teleport_assets(
					&self,
					dest: runtime_types::xcm::VersionedMultiLocation,
					beneficiary: runtime_types::xcm::VersionedMultiLocation,
					assets: runtime_types::xcm::VersionedMultiAssets,
					fee_asset_item: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<TeleportAssets> {
					::subxt::tx::StaticTxPayload::new(
						"XcmPallet",
						"teleport_assets",
						TeleportAssets {
							dest: ::std::boxed::Box::new(dest),
							beneficiary: ::std::boxed::Box::new(beneficiary),
							assets: ::std::boxed::Box::new(assets),
							fee_asset_item,
						},
						[
							255u8, 5u8, 68u8, 38u8, 44u8, 181u8, 75u8, 221u8, 239u8, 103u8, 88u8,
							47u8, 136u8, 90u8, 253u8, 55u8, 0u8, 122u8, 217u8, 126u8, 13u8, 77u8,
							209u8, 41u8, 7u8, 35u8, 235u8, 171u8, 150u8, 235u8, 202u8, 240u8,
						],
					)
				}
				#[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
				#[doc = "chain and forward a notification XCM."]
				#[doc = ""]
				#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
				#[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
				#[doc = "with all fees taken as needed from the asset."]
				#[doc = ""]
				#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
				#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
				#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
				#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
				#[doc = "  an `AccountId32` value."]
				#[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
				#[doc = "  `dest` side."]
				#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
				#[doc = "  fees."]
				pub fn reserve_transfer_assets(
					&self,
					dest: runtime_types::xcm::VersionedMultiLocation,
					beneficiary: runtime_types::xcm::VersionedMultiLocation,
					assets: runtime_types::xcm::VersionedMultiAssets,
					fee_asset_item: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<ReserveTransferAssets> {
					::subxt::tx::StaticTxPayload::new(
						"XcmPallet",
						"reserve_transfer_assets",
						ReserveTransferAssets {
							dest: ::std::boxed::Box::new(dest),
							beneficiary: ::std::boxed::Box::new(beneficiary),
							assets: ::std::boxed::Box::new(assets),
							fee_asset_item,
						},
						[
							177u8, 160u8, 188u8, 106u8, 153u8, 135u8, 121u8, 12u8, 83u8, 233u8,
							43u8, 161u8, 133u8, 26u8, 104u8, 79u8, 113u8, 8u8, 33u8, 128u8, 82u8,
							62u8, 30u8, 46u8, 203u8, 199u8, 175u8, 193u8, 55u8, 130u8, 206u8, 28u8,
						],
					)
				}
				#[doc = "Execute an XCM message from a local, signed, origin."]
				#[doc = ""]
				#[doc = "An event is deposited indicating whether `msg` could be executed completely or only"]
				#[doc = "partially."]
				#[doc = ""]
				#[doc = "No more than `max_weight` will be used in its attempted execution. If this is less than the"]
				#[doc = "maximum amount of weight that the message could take to be executed, then no execution"]
				#[doc = "attempt will be made."]
				#[doc = ""]
				#[doc = "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully"]
				#[doc = "to completion; only that *some* of it was executed."]
				pub fn execute(
					&self,
					message: runtime_types::xcm::VersionedXcm,
					max_weight: ::core::primitive::u64,
				) -> ::subxt::tx::StaticTxPayload<Execute> {
					::subxt::tx::StaticTxPayload::new(
						"XcmPallet",
						"execute",
						Execute { message: ::std::boxed::Box::new(message), max_weight },
						[
							191u8, 177u8, 39u8, 21u8, 1u8, 110u8, 39u8, 58u8, 94u8, 27u8, 44u8,
							18u8, 253u8, 135u8, 100u8, 205u8, 0u8, 231u8, 68u8, 247u8, 5u8, 140u8,
							131u8, 184u8, 251u8, 197u8, 100u8, 113u8, 253u8, 255u8, 120u8, 206u8,
						],
					)
				}
				#[doc = "Extoll that a particular destination can be communicated with through a particular"]
				#[doc = "version of XCM."]
				#[doc = ""]
				#[doc = "- `origin`: Must be Root."]
				#[doc = "- `location`: The destination that is being described."]
				#[doc = "- `xcm_version`: The latest version of XCM that `location` supports."]
				pub fn force_xcm_version(
					&self,
					location: runtime_types::xcm::v1::multilocation::MultiLocation,
					xcm_version: ::core::primitive::u32,
				) -> ::subxt::tx::StaticTxPayload<ForceXcmVersion> {
					::subxt::tx::StaticTxPayload::new(
						"XcmPallet",
						"force_xcm_version",
						ForceXcmVersion { location: ::std::boxed::Box::new(location), xcm_version },
						[
							231u8, 106u8, 60u8, 226u8, 31u8, 25u8, 20u8, 115u8, 107u8, 246u8,
							248u8, 11u8, 71u8, 183u8, 93u8, 3u8, 219u8, 21u8, 97u8, 188u8, 119u8,
							121u8, 239u8, 72u8, 200u8, 81u8, 6u8, 177u8, 111u8, 188u8, 168u8, 86u8,
						],
					)
				}
				#[doc = "Set a safe XCM version (the version that XCM should be encoded with if the most recent"]
				#[doc = "version a destination can accept is unknown)."]
				#[doc = ""]
				#[doc = "- `origin`: Must be Root."]
				#[doc = "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."]
				pub fn force_default_xcm_version(
					&self,
					maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
				) -> ::subxt::tx::StaticTxPayload<ForceDefaultXcmVersion> {
					::subxt::tx::StaticTxPayload::new(
						"XcmPallet",
						"force_default_xcm_version",
						ForceDefaultXcmVersion { maybe_xcm_version },
						[
							38u8, 36u8, 59u8, 231u8, 18u8, 79u8, 76u8, 9u8, 200u8, 125u8, 214u8,
							166u8, 37u8, 99u8, 111u8, 161u8, 135u8, 2u8, 133u8, 157u8, 165u8, 18u8,
							152u8, 81u8, 209u8, 255u8, 137u8, 237u8, 28u8, 126u8, 224u8, 141u8,
						],
					)
				}
				#[doc = "Ask a location to notify us regarding their XCM version and any changes to it."]
				#[doc = ""]
				#[doc = "- `origin`: Must be Root."]
				#[doc = "- `location`: The location to which we should subscribe for XCM version notifications."]
				pub fn force_subscribe_version_notify(
					&self,
					location: runtime_types::xcm::VersionedMultiLocation,
				) -> ::subxt::tx::StaticTxPayload<ForceSubscribeVersionNotify> {
					::subxt::tx::StaticTxPayload::new(
						"XcmPallet",
						"force_subscribe_version_notify",
						ForceSubscribeVersionNotify { location: ::std::boxed::Box::new(location) },
						[
							136u8, 216u8, 207u8, 51u8, 42u8, 153u8, 92u8, 70u8, 140u8, 169u8,
							172u8, 89u8, 69u8, 28u8, 200u8, 100u8, 209u8, 226u8, 194u8, 240u8,
							71u8, 38u8, 18u8, 6u8, 6u8, 83u8, 103u8, 254u8, 248u8, 241u8, 62u8,
							189u8,
						],
					)
				}
				#[doc = "Require that a particular destination should no longer notify us regarding any XCM"]
				#[doc = "version changes."]
				#[doc = ""]
				#[doc = "- `origin`: Must be Root."]
				#[doc = "- `location`: The location to which we are currently subscribed for XCM version"]
				#[doc = "  notifications which we no longer desire."]
				pub fn force_unsubscribe_version_notify(
					&self,
					location: runtime_types::xcm::VersionedMultiLocation,
				) -> ::subxt::tx::StaticTxPayload<ForceUnsubscribeVersionNotify> {
					::subxt::tx::StaticTxPayload::new(
						"XcmPallet",
						"force_unsubscribe_version_notify",
						ForceUnsubscribeVersionNotify {
							location: ::std::boxed::Box::new(location),
						},
						[
							51u8, 72u8, 5u8, 227u8, 251u8, 243u8, 199u8, 9u8, 8u8, 213u8, 191u8,
							52u8, 21u8, 215u8, 170u8, 6u8, 53u8, 242u8, 225u8, 89u8, 150u8, 142u8,
							104u8, 249u8, 225u8, 209u8, 142u8, 234u8, 161u8, 100u8, 153u8, 120u8,
						],
					)
				}
				#[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
				#[doc = "chain and forward a notification XCM."]
				#[doc = ""]
				#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
				#[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
				#[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
				#[doc = "at risk."]
				#[doc = ""]
				#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
				#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
				#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
				#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
				#[doc = "  an `AccountId32` value."]
				#[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
				#[doc = "  `dest` side."]
				#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
				#[doc = "  fees."]
				#[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
				pub fn limited_reserve_transfer_assets(
					&self,
					dest: runtime_types::xcm::VersionedMultiLocation,
					beneficiary: runtime_types::xcm::VersionedMultiLocation,
					assets: runtime_types::xcm::VersionedMultiAssets,
					fee_asset_item: ::core::primitive::u32,
					weight_limit: runtime_types::xcm::v2::WeightLimit,
				) -> ::subxt::tx::StaticTxPayload<LimitedReserveTransferAssets> {
					::subxt::tx::StaticTxPayload::new(
						"XcmPallet",
						"limited_reserve_transfer_assets",
						LimitedReserveTransferAssets {
							dest: ::std::boxed::Box::new(dest),
							beneficiary: ::std::boxed::Box::new(beneficiary),
							assets: ::std::boxed::Box::new(assets),
							fee_asset_item,
							weight_limit,
						},
						[
							191u8, 81u8, 68u8, 116u8, 196u8, 125u8, 226u8, 154u8, 144u8, 126u8,
							159u8, 149u8, 17u8, 124u8, 205u8, 60u8, 249u8, 106u8, 38u8, 251u8,
							136u8, 128u8, 81u8, 201u8, 164u8, 242u8, 216u8, 80u8, 21u8, 234u8,
							20u8, 70u8,
						],
					)
				}
				#[doc = "Teleport some assets from the local chain to some destination chain."]
				#[doc = ""]
				#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
				#[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
				#[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
				#[doc = "at risk."]
				#[doc = ""]
				#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
				#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
				#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
				#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
				#[doc = "  an `AccountId32` value."]
				#[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
				#[doc = "  `dest` side. May not be empty."]
				#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
				#[doc = "  fees."]
				#[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
				pub fn limited_teleport_assets(
					&self,
					dest: runtime_types::xcm::VersionedMultiLocation,
					beneficiary: runtime_types::xcm::VersionedMultiLocation,
					assets: runtime_types::xcm::VersionedMultiAssets,
					fee_asset_item: ::core::primitive::u32,
					weight_limit: runtime_types::xcm::v2::WeightLimit,
				) -> ::subxt::tx::StaticTxPayload<LimitedTeleportAssets> {
					::subxt::tx::StaticTxPayload::new(
						"XcmPallet",
						"limited_teleport_assets",
						LimitedTeleportAssets {
							dest: ::std::boxed::Box::new(dest),
							beneficiary: ::std::boxed::Box::new(beneficiary),
							assets: ::std::boxed::Box::new(assets),
							fee_asset_item,
							weight_limit,
						},
						[
							29u8, 31u8, 229u8, 83u8, 40u8, 60u8, 36u8, 185u8, 169u8, 74u8, 30u8,
							47u8, 118u8, 118u8, 22u8, 15u8, 246u8, 220u8, 169u8, 135u8, 72u8,
							154u8, 109u8, 192u8, 195u8, 58u8, 121u8, 240u8, 166u8, 243u8, 29u8,
							29u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_xcm::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Execution of an XCM message was attempted."]
			#[doc = ""]
			#[doc = "\\[ outcome \\]"]
			pub struct Attempted(pub runtime_types::xcm::v2::traits::Outcome);
			impl ::subxt::events::StaticEvent for Attempted {
				const PALLET: &'static str = "XcmPallet";
				const EVENT: &'static str = "Attempted";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A XCM message was sent."]
			#[doc = ""]
			#[doc = "\\[ origin, destination, message \\]"]
			pub struct Sent(
				pub runtime_types::xcm::v1::multilocation::MultiLocation,
				pub runtime_types::xcm::v1::multilocation::MultiLocation,
				pub runtime_types::xcm::v2::Xcm,
			);
			impl ::subxt::events::StaticEvent for Sent {
				const PALLET: &'static str = "XcmPallet";
				const EVENT: &'static str = "Sent";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Query response received which does not match a registered query. This may be because a"]
			#[doc = "matching query was never registered, it may be because it is a duplicate response, or"]
			#[doc = "because the query timed out."]
			#[doc = ""]
			#[doc = "\\[ origin location, id \\]"]
			pub struct UnexpectedResponse(
				pub runtime_types::xcm::v1::multilocation::MultiLocation,
				pub ::core::primitive::u64,
			);
			impl ::subxt::events::StaticEvent for UnexpectedResponse {
				const PALLET: &'static str = "XcmPallet";
				const EVENT: &'static str = "UnexpectedResponse";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Query response has been received and is ready for taking with `take_response`. There is"]
			#[doc = "no registered notification call."]
			#[doc = ""]
			#[doc = "\\[ id, response \\]"]
			pub struct ResponseReady(
				pub ::core::primitive::u64,
				pub runtime_types::xcm::v2::Response,
			);
			impl ::subxt::events::StaticEvent for ResponseReady {
				const PALLET: &'static str = "XcmPallet";
				const EVENT: &'static str = "ResponseReady";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Query response has been received and query is removed. The registered notification has"]
			#[doc = "been dispatched and executed successfully."]
			#[doc = ""]
			#[doc = "\\[ id, pallet index, call index \\]"]
			pub struct Notified(
				pub ::core::primitive::u64,
				pub ::core::primitive::u8,
				pub ::core::primitive::u8,
			);
			impl ::subxt::events::StaticEvent for Notified {
				const PALLET: &'static str = "XcmPallet";
				const EVENT: &'static str = "Notified";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Query response has been received and query is removed. The registered notification could"]
			#[doc = "not be dispatched because the dispatch weight is greater than the maximum weight"]
			#[doc = "originally budgeted by this runtime for the query result."]
			#[doc = ""]
			#[doc = "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"]
			pub struct NotifyOverweight(
				pub ::core::primitive::u64,
				pub ::core::primitive::u8,
				pub ::core::primitive::u8,
				pub ::core::primitive::u64,
				pub ::core::primitive::u64,
			);
			impl ::subxt::events::StaticEvent for NotifyOverweight {
				const PALLET: &'static str = "XcmPallet";
				const EVENT: &'static str = "NotifyOverweight";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Query response has been received and query is removed. There was a general error with"]
			#[doc = "dispatching the notification call."]
			#[doc = ""]
			#[doc = "\\[ id, pallet index, call index \\]"]
			pub struct NotifyDispatchError(
				pub ::core::primitive::u64,
				pub ::core::primitive::u8,
				pub ::core::primitive::u8,
			);
			impl ::subxt::events::StaticEvent for NotifyDispatchError {
				const PALLET: &'static str = "XcmPallet";
				const EVENT: &'static str = "NotifyDispatchError";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Query response has been received and query is removed. The dispatch was unable to be"]
			#[doc = "decoded into a `Call`; this might be due to dispatch function having a signature which"]
			#[doc = "is not `(origin, QueryId, Response)`."]
			#[doc = ""]
			#[doc = "\\[ id, pallet index, call index \\]"]
			pub struct NotifyDecodeFailed(
				pub ::core::primitive::u64,
				pub ::core::primitive::u8,
				pub ::core::primitive::u8,
			);
			impl ::subxt::events::StaticEvent for NotifyDecodeFailed {
				const PALLET: &'static str = "XcmPallet";
				const EVENT: &'static str = "NotifyDecodeFailed";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Expected query response has been received but the origin location of the response does"]
			#[doc = "not match that expected. The query remains registered for a later, valid, response to"]
			#[doc = "be received and acted upon."]
			#[doc = ""]
			#[doc = "\\[ origin location, id, expected location \\]"]
			pub struct InvalidResponder(
				pub runtime_types::xcm::v1::multilocation::MultiLocation,
				pub ::core::primitive::u64,
				pub ::core::option::Option<runtime_types::xcm::v1::multilocation::MultiLocation>,
			);
			impl ::subxt::events::StaticEvent for InvalidResponder {
				const PALLET: &'static str = "XcmPallet";
				const EVENT: &'static str = "InvalidResponder";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Expected query response has been received but the expected origin location placed in"]
			#[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
			#[doc = ""]
			#[doc = "This is unexpected (since a location placed in storage in a previously executing"]
			#[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
			#[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
			#[doc = "needed."]
			#[doc = ""]
			#[doc = "\\[ origin location, id \\]"]
			pub struct InvalidResponderVersion(
				pub runtime_types::xcm::v1::multilocation::MultiLocation,
				pub ::core::primitive::u64,
			);
			impl ::subxt::events::StaticEvent for InvalidResponderVersion {
				const PALLET: &'static str = "XcmPallet";
				const EVENT: &'static str = "InvalidResponderVersion";
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			#[doc = "Received query response has been read and removed."]
			#[doc = ""]
			#[doc = "\\[ id \\]"]
			pub struct ResponseTaken(pub ::core::primitive::u64);
			impl ::subxt::events::StaticEvent for ResponseTaken {
				const PALLET: &'static str = "XcmPallet";
				const EVENT: &'static str = "ResponseTaken";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "Some assets have been placed in an asset trap."]
			#[doc = ""]
			#[doc = "\\[ hash, origin, assets \\]"]
			pub struct AssetsTrapped(
				pub ::subxt::ext::sp_core::H256,
				pub runtime_types::xcm::v1::multilocation::MultiLocation,
				pub runtime_types::xcm::VersionedMultiAssets,
			);
			impl ::subxt::events::StaticEvent for AssetsTrapped {
				const PALLET: &'static str = "XcmPallet";
				const EVENT: &'static str = "AssetsTrapped";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "An XCM version change notification message has been attempted to be sent."]
			#[doc = ""]
			#[doc = "\\[ destination, result \\]"]
			pub struct VersionChangeNotified(
				pub runtime_types::xcm::v1::multilocation::MultiLocation,
				pub ::core::primitive::u32,
			);
			impl ::subxt::events::StaticEvent for VersionChangeNotified {
				const PALLET: &'static str = "XcmPallet";
				const EVENT: &'static str = "VersionChangeNotified";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "The supported version of a location has been changed. This might be through an"]
			#[doc = "automatic notification or a manual intervention."]
			#[doc = ""]
			#[doc = "\\[ location, XCM version \\]"]
			pub struct SupportedVersionChanged(
				pub runtime_types::xcm::v1::multilocation::MultiLocation,
				pub ::core::primitive::u32,
			);
			impl ::subxt::events::StaticEvent for SupportedVersionChanged {
				const PALLET: &'static str = "XcmPallet";
				const EVENT: &'static str = "SupportedVersionChanged";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A given location which had a version change subscription was dropped owing to an error"]
			#[doc = "sending the notification to it."]
			#[doc = ""]
			#[doc = "\\[ location, query ID, error \\]"]
			pub struct NotifyTargetSendFail(
				pub runtime_types::xcm::v1::multilocation::MultiLocation,
				pub ::core::primitive::u64,
				pub runtime_types::xcm::v2::traits::Error,
			);
			impl ::subxt::events::StaticEvent for NotifyTargetSendFail {
				const PALLET: &'static str = "XcmPallet";
				const EVENT: &'static str = "NotifyTargetSendFail";
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			#[doc = "A given location which had a version change subscription was dropped owing to an error"]
			#[doc = "migrating the location to our new XCM format."]
			#[doc = ""]
			#[doc = "\\[ location, query ID \\]"]
			pub struct NotifyTargetMigrationFail(
				pub runtime_types::xcm::VersionedMultiLocation,
				pub ::core::primitive::u64,
			);
			impl ::subxt::events::StaticEvent for NotifyTargetMigrationFail {
				const PALLET: &'static str = "XcmPallet";
				const EVENT: &'static str = "NotifyTargetMigrationFail";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The latest available query index."]
				pub fn query_counter(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"XcmPallet",
						"QueryCounter",
						vec![],
						[
							137u8, 58u8, 184u8, 88u8, 247u8, 22u8, 151u8, 64u8, 50u8, 77u8, 49u8,
							10u8, 234u8, 84u8, 213u8, 156u8, 26u8, 200u8, 214u8, 225u8, 125u8,
							231u8, 42u8, 93u8, 159u8, 168u8, 86u8, 201u8, 116u8, 153u8, 41u8,
							127u8,
						],
					)
				}
				#[doc = " The ongoing queries."]
				pub fn queries(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u64>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_xcm::pallet::QueryStatus<::core::primitive::u32>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"XcmPallet",
						"Queries",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Blake2_128Concat,
						)],
						[
							251u8, 97u8, 131u8, 135u8, 93u8, 68u8, 156u8, 25u8, 181u8, 231u8,
							124u8, 93u8, 170u8, 114u8, 250u8, 177u8, 172u8, 51u8, 59u8, 44u8,
							148u8, 189u8, 199u8, 62u8, 118u8, 89u8, 75u8, 29u8, 71u8, 49u8, 248u8,
							48u8,
						],
					)
				}
				#[doc = " The ongoing queries."]
				pub fn queries_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_xcm::pallet::QueryStatus<::core::primitive::u32>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"XcmPallet",
						"Queries",
						Vec::new(),
						[
							251u8, 97u8, 131u8, 135u8, 93u8, 68u8, 156u8, 25u8, 181u8, 231u8,
							124u8, 93u8, 170u8, 114u8, 250u8, 177u8, 172u8, 51u8, 59u8, 44u8,
							148u8, 189u8, 199u8, 62u8, 118u8, 89u8, 75u8, 29u8, 71u8, 49u8, 248u8,
							48u8,
						],
					)
				}
				#[doc = " The existing asset traps."]
				#[doc = ""]
				#[doc = " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of"]
				#[doc = " times this pair has been trapped (usually just 1 if it exists at all)."]
				pub fn asset_traps(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::ext::sp_core::H256>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"XcmPallet",
						"AssetTraps",
						vec![::subxt::storage::address::StorageMapKey::new(
							_0.borrow(),
							::subxt::storage::address::StorageHasher::Identity,
						)],
						[
							4u8, 185u8, 92u8, 4u8, 7u8, 71u8, 214u8, 1u8, 141u8, 59u8, 87u8, 55u8,
							149u8, 26u8, 125u8, 8u8, 88u8, 31u8, 240u8, 138u8, 133u8, 28u8, 37u8,
							131u8, 107u8, 218u8, 86u8, 152u8, 147u8, 44u8, 19u8, 239u8,
						],
					)
				}
				#[doc = " The existing asset traps."]
				#[doc = ""]
				#[doc = " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of"]
				#[doc = " times this pair has been trapped (usually just 1 if it exists at all)."]
				pub fn asset_traps_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"XcmPallet",
						"AssetTraps",
						Vec::new(),
						[
							4u8, 185u8, 92u8, 4u8, 7u8, 71u8, 214u8, 1u8, 141u8, 59u8, 87u8, 55u8,
							149u8, 26u8, 125u8, 8u8, 88u8, 31u8, 240u8, 138u8, 133u8, 28u8, 37u8,
							131u8, 107u8, 218u8, 86u8, 152u8, 147u8, 44u8, 19u8, 239u8,
						],
					)
				}
				#[doc = " Default version to encode XCM when latest version of destination is unknown. If `None`,"]
				#[doc = " then the destinations whose XCM version is unknown are considered unreachable."]
				pub fn safe_xcm_version(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"XcmPallet",
						"SafeXcmVersion",
						vec![],
						[
							1u8, 223u8, 218u8, 204u8, 222u8, 129u8, 137u8, 237u8, 197u8, 142u8,
							233u8, 66u8, 229u8, 153u8, 138u8, 222u8, 113u8, 164u8, 135u8, 213u8,
							233u8, 34u8, 24u8, 23u8, 215u8, 59u8, 40u8, 188u8, 45u8, 244u8, 205u8,
							199u8,
						],
					)
				}
				#[doc = " The Latest versions that we know various locations support."]
				pub fn supported_version(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<runtime_types::xcm::VersionedMultiLocation>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"XcmPallet",
						"SupportedVersion",
						vec![
							::subxt::storage::address::StorageMapKey::new(
								_0.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
							::subxt::storage::address::StorageMapKey::new(
								_1.borrow(),
								::subxt::storage::address::StorageHasher::Blake2_128Concat,
							),
						],
						[
							112u8, 34u8, 251u8, 179u8, 217u8, 54u8, 125u8, 242u8, 190u8, 8u8, 44u8,
							14u8, 138u8, 76u8, 241u8, 95u8, 233u8, 96u8, 141u8, 26u8, 151u8, 196u8,
							219u8, 137u8, 165u8, 27u8, 87u8, 128u8, 19u8, 35u8, 222u8, 202u8,
						],
					)
				}
				#[doc = " The Latest versions that we know various locations support."]
				pub fn supported_version_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"XcmPallet",
						"SupportedVersion",
						Vec::new(),
						[
							112u8, 34u8, 251u8, 179u8, 217u8, 54u8, 125u8, 242u8, 190u8, 8u8, 44u8,
							14u8, 138u8, 76u8, 241u8, 95u8, 233u8, 96u8, 141u8, 26u8, 151u8, 196u8,
							219u8, 137u8, 165u8, 27u8, 87u8, 128u8, 19u8, 35u8, 222u8, 202u8,
						],
					)
				}
				#[doc = " All locations that we have requested version notifications from."]
				pub fn version_notifiers(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<runtime_types::xcm::VersionedMultiLocation>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"XcmPallet",
						"VersionNotifiers",
						vec![
							::subxt::storage::address::StorageMapKey::new(
								_0.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
							::subxt::storage::address::StorageMapKey::new(
								_1.borrow(),
								::subxt::storage::address::StorageHasher::Blake2_128Concat,
							),
						],
						[
							233u8, 217u8, 119u8, 102u8, 41u8, 77u8, 198u8, 24u8, 161u8, 22u8,
							104u8, 149u8, 204u8, 128u8, 123u8, 166u8, 17u8, 36u8, 202u8, 92u8,
							190u8, 44u8, 73u8, 239u8, 88u8, 17u8, 92u8, 41u8, 236u8, 80u8, 154u8,
							10u8,
						],
					)
				}
				#[doc = " All locations that we have requested version notifications from."]
				pub fn version_notifiers_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"XcmPallet",
						"VersionNotifiers",
						Vec::new(),
						[
							233u8, 217u8, 119u8, 102u8, 41u8, 77u8, 198u8, 24u8, 161u8, 22u8,
							104u8, 149u8, 204u8, 128u8, 123u8, 166u8, 17u8, 36u8, 202u8, 92u8,
							190u8, 44u8, 73u8, 239u8, 88u8, 17u8, 92u8, 41u8, 236u8, 80u8, 154u8,
							10u8,
						],
					)
				}
				#[doc = " The target locations that are subscribed to our version changes, as well as the most recent"]
				#[doc = " of our versions we informed them of."]
				pub fn version_notify_targets(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<runtime_types::xcm::VersionedMultiLocation>,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::core::primitive::u64,
						::core::primitive::u64,
						::core::primitive::u32,
					)>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"XcmPallet",
						"VersionNotifyTargets",
						vec![
							::subxt::storage::address::StorageMapKey::new(
								_0.borrow(),
								::subxt::storage::address::StorageHasher::Twox64Concat,
							),
							::subxt::storage::address::StorageMapKey::new(
								_1.borrow(),
								::subxt::storage::address::StorageHasher::Blake2_128Concat,
							),
						],
						[
							108u8, 104u8, 137u8, 191u8, 2u8, 2u8, 240u8, 174u8, 32u8, 174u8, 150u8,
							136u8, 33u8, 84u8, 30u8, 74u8, 95u8, 94u8, 20u8, 112u8, 101u8, 204u8,
							15u8, 47u8, 136u8, 56u8, 40u8, 66u8, 1u8, 42u8, 16u8, 247u8,
						],
					)
				}
				#[doc = " The target locations that are subscribed to our version changes, as well as the most recent"]
				#[doc = " of our versions we informed them of."]
				pub fn version_notify_targets_root(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<(
						::core::primitive::u64,
						::core::primitive::u64,
						::core::primitive::u32,
					)>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"XcmPallet",
						"VersionNotifyTargets",
						Vec::new(),
						[
							108u8, 104u8, 137u8, 191u8, 2u8, 2u8, 240u8, 174u8, 32u8, 174u8, 150u8,
							136u8, 33u8, 84u8, 30u8, 74u8, 95u8, 94u8, 20u8, 112u8, 101u8, 204u8,
							15u8, 47u8, 136u8, 56u8, 40u8, 66u8, 1u8, 42u8, 16u8, 247u8,
						],
					)
				}
				#[doc = " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and"]
				#[doc = " the `u32` counter is the number of times that a send to the destination has been attempted,"]
				#[doc = " which is used as a prioritization."]
				pub fn version_discovery_queue(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<(
							runtime_types::xcm::VersionedMultiLocation,
							::core::primitive::u32,
						)>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"XcmPallet",
						"VersionDiscoveryQueue",
						vec![],
						[
							30u8, 163u8, 210u8, 133u8, 30u8, 63u8, 36u8, 9u8, 162u8, 133u8, 99u8,
							170u8, 34u8, 205u8, 27u8, 41u8, 226u8, 141u8, 165u8, 151u8, 46u8,
							140u8, 150u8, 242u8, 178u8, 88u8, 164u8, 12u8, 129u8, 118u8, 25u8,
							79u8,
						],
					)
				}
				#[doc = " The current migration's stage, if any."]
				pub fn current_migration(
					&self,
				) -> ::subxt::storage::address::StaticStorageAddress<
					::subxt::metadata::DecodeStaticType<
						runtime_types::pallet_xcm::pallet::VersionMigrationStage,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::StaticStorageAddress::new(
						"XcmPallet",
						"CurrentMigration",
						vec![],
						[
							137u8, 144u8, 168u8, 185u8, 158u8, 90u8, 127u8, 243u8, 227u8, 134u8,
							150u8, 73u8, 15u8, 99u8, 23u8, 47u8, 68u8, 18u8, 39u8, 16u8, 24u8,
							43u8, 161u8, 56u8, 66u8, 111u8, 16u8, 7u8, 252u8, 125u8, 100u8, 225u8,
						],
					)
				}
			}
		}
	}
	pub mod runtime_types {
		use super::runtime_types;
		pub mod bitvec {
			use super::runtime_types;
			pub mod order {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct Lsb0;
			}
		}
		pub mod finality_grandpa {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Equivocation<_0, _1, _2> {
				pub round_number: ::core::primitive::u64,
				pub identity: _0,
				pub first: (_1, _2),
				pub second: (_1, _2),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Precommit<_0, _1> {
				pub target_hash: _0,
				pub target_number: _1,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Prevote<_0, _1> {
				pub target_hash: _0,
				pub target_number: _1,
			}
		}
		pub mod frame_support {
			use super::runtime_types;
			pub mod dispatch {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum RawOrigin<_0> {
					#[codec(index = 0)]
					Root,
					#[codec(index = 1)]
					Signed(_0),
					#[codec(index = 2)]
					None,
				}
			}
			pub mod traits {
				use super::runtime_types;
				pub mod misc {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct WrapperKeepOpaque<_0>(
						#[codec(compact)] pub ::core::primitive::u32,
						pub _0,
					);
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct WrapperOpaque<_0>(
						#[codec(compact)] pub ::core::primitive::u32,
						pub _0,
					);
				}
				pub mod schedule {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum LookupError {
						#[codec(index = 0)]
						Unknown,
						#[codec(index = 1)]
						BadFormat,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum MaybeHashed<_0, _1> {
						#[codec(index = 0)]
						Value(_0),
						#[codec(index = 1)]
						Hash(_1),
					}
				}
				pub mod tokens {
					use super::runtime_types;
					pub mod misc {
						use super::runtime_types;
						#[derive(
							:: subxt :: ext :: codec :: Decode,
							:: subxt :: ext :: codec :: Encode,
							Debug,
						)]
						pub enum BalanceStatus {
							#[codec(index = 0)]
							Free,
							#[codec(index = 1)]
							Reserved,
						}
					}
				}
			}
			pub mod weights {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum DispatchClass {
					#[codec(index = 0)]
					Normal,
					#[codec(index = 1)]
					Operational,
					#[codec(index = 2)]
					Mandatory,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct DispatchInfo {
					pub weight: ::core::primitive::u64,
					pub class: runtime_types::frame_support::weights::DispatchClass,
					pub pays_fee: runtime_types::frame_support::weights::Pays,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum Pays {
					#[codec(index = 0)]
					Yes,
					#[codec(index = 1)]
					No,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct PerDispatchClass<_0> {
					pub normal: _0,
					pub operational: _0,
					pub mandatory: _0,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct RuntimeDbWeight {
					pub read: ::core::primitive::u64,
					pub write: ::core::primitive::u64,
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct PalletId(pub [::core::primitive::u8; 8usize]);
		}
		pub mod frame_system {
			use super::runtime_types;
			pub mod extensions {
				use super::runtime_types;
				pub mod check_genesis {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct CheckGenesis;
				}
				pub mod check_mortality {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct CheckMortality(pub runtime_types::sp_runtime::generic::era::Era);
				}
				pub mod check_non_zero_sender {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct CheckNonZeroSender;
				}
				pub mod check_nonce {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct CheckNonce(#[codec(compact)] pub ::core::primitive::u32);
				}
				pub mod check_spec_version {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct CheckSpecVersion;
				}
				pub mod check_tx_version {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct CheckTxVersion;
				}
				pub mod check_weight {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct CheckWeight;
				}
			}
			pub mod limits {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct BlockLength {
					pub max: runtime_types::frame_support::weights::PerDispatchClass<
						::core::primitive::u32,
					>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct BlockWeights {
					pub base_block: ::core::primitive::u64,
					pub max_block: ::core::primitive::u64,
					pub per_class: runtime_types::frame_support::weights::PerDispatchClass<
						runtime_types::frame_system::limits::WeightsPerClass,
					>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct WeightsPerClass {
					pub base_extrinsic: ::core::primitive::u64,
					pub max_extrinsic: ::core::option::Option<::core::primitive::u64>,
					pub max_total: ::core::option::Option<::core::primitive::u64>,
					pub reserved: ::core::option::Option<::core::primitive::u64>,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "A dispatch that will fill the block weight up to the given ratio."]
					fill_block { ratio: runtime_types::sp_arithmetic::per_things::Perbill },
					#[codec(index = 1)]
					#[doc = "Make some on-chain remark."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(1)`"]
					#[doc = "# </weight>"]
					remark { remark: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 2)]
					#[doc = "Set the number of pages in the WebAssembly environment's heap."]
					set_heap_pages { pages: ::core::primitive::u64 },
					#[codec(index = 3)]
					#[doc = "Set the new runtime code."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"]
					#[doc = "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is"]
					#[doc = "  expensive)."]
					#[doc = "- 1 storage write (codec `O(C)`)."]
					#[doc = "- 1 digest item."]
					#[doc = "- 1 event."]
					#[doc = "The weight of this function is dependent on the runtime, but generally this is very"]
					#[doc = "expensive. We will treat this as a full block."]
					#[doc = "# </weight>"]
					set_code { code: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 4)]
					#[doc = "Set the new runtime code without doing any checks of the given `code`."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(C)` where `C` length of `code`"]
					#[doc = "- 1 storage write (codec `O(C)`)."]
					#[doc = "- 1 digest item."]
					#[doc = "- 1 event."]
					#[doc = "The weight of this function is dependent on the runtime. We will treat this as a full"]
					#[doc = "block. # </weight>"]
					set_code_without_checks { code: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 5)]
					#[doc = "Set some items of storage."]
					set_storage {
						items: ::std::vec::Vec<(
							::std::vec::Vec<::core::primitive::u8>,
							::std::vec::Vec<::core::primitive::u8>,
						)>,
					},
					#[codec(index = 6)]
					#[doc = "Kill some items from storage."]
					kill_storage { keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>> },
					#[codec(index = 7)]
					#[doc = "Kill all storage items with a key that starts with the given prefix."]
					#[doc = ""]
					#[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
					#[doc = "the prefix we are removing to accurately calculate the weight of this function."]
					kill_prefix {
						prefix: ::std::vec::Vec<::core::primitive::u8>,
						subkeys: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					#[doc = "Make some on-chain remark and emit event."]
					remark_with_event { remark: ::std::vec::Vec<::core::primitive::u8> },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Error for the System pallet"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The name of specification does not match between the current runtime"]
					#[doc = "and the new runtime."]
					InvalidSpecName,
					#[codec(index = 1)]
					#[doc = "The specification version is not allowed to decrease between the current runtime"]
					#[doc = "and the new runtime."]
					SpecVersionNeedsToIncrease,
					#[codec(index = 2)]
					#[doc = "Failed to extract the runtime version from the new runtime."]
					#[doc = ""]
					#[doc = "Either calling `Core_version` or decoding `RuntimeVersion` failed."]
					FailedToExtractRuntimeVersion,
					#[codec(index = 3)]
					#[doc = "Suicide called when the account has non-default composite data."]
					NonDefaultComposite,
					#[codec(index = 4)]
					#[doc = "There is a non-zero reference count preventing the account from being purged."]
					NonZeroRefCount,
					#[codec(index = 5)]
					#[doc = "The origin filter prevent the call to be dispatched."]
					CallFiltered,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Event for the System pallet."]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "An extrinsic completed successfully."]
					ExtrinsicSuccess {
						dispatch_info: runtime_types::frame_support::weights::DispatchInfo,
					},
					#[codec(index = 1)]
					#[doc = "An extrinsic failed."]
					ExtrinsicFailed {
						dispatch_error: runtime_types::sp_runtime::DispatchError,
						dispatch_info: runtime_types::frame_support::weights::DispatchInfo,
					},
					#[codec(index = 2)]
					#[doc = "`:code` was updated."]
					CodeUpdated,
					#[codec(index = 3)]
					#[doc = "A new account was created."]
					NewAccount { account: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 4)]
					#[doc = "An account was reaped."]
					KilledAccount { account: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 5)]
					#[doc = "On on-chain remark happened."]
					Remarked {
						sender: ::subxt::ext::sp_core::crypto::AccountId32,
						hash: ::subxt::ext::sp_core::H256,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct AccountInfo<_0, _1> {
				pub nonce: _0,
				pub consumers: _0,
				pub providers: _0,
				pub sufficients: _0,
				pub data: _1,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct EventRecord<_0, _1> {
				pub phase: runtime_types::frame_system::Phase,
				pub event: _0,
				pub topics: ::std::vec::Vec<_1>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct LastRuntimeUpgradeInfo {
				#[codec(compact)]
				pub spec_version: ::core::primitive::u32,
				pub spec_name: ::std::string::String,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum Phase {
				#[codec(index = 0)]
				ApplyExtrinsic(::core::primitive::u32),
				#[codec(index = 1)]
				Finalization,
				#[codec(index = 2)]
				Initialization,
			}
		}
		pub mod kusama_runtime {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum Call {
				#[codec(index = 0)]
				System(runtime_types::frame_system::pallet::Call),
				#[codec(index = 1)]
				Babe(runtime_types::pallet_babe::pallet::Call),
				#[codec(index = 2)]
				Timestamp(runtime_types::pallet_timestamp::pallet::Call),
				#[codec(index = 3)]
				Indices(runtime_types::pallet_indices::pallet::Call),
				#[codec(index = 4)]
				Balances(runtime_types::pallet_balances::pallet::Call),
				#[codec(index = 5)]
				Authorship(runtime_types::pallet_authorship::pallet::Call),
				#[codec(index = 6)]
				Staking(runtime_types::pallet_staking::pallet::pallet::Call),
				#[codec(index = 8)]
				Session(runtime_types::pallet_session::pallet::Call),
				#[codec(index = 10)]
				Grandpa(runtime_types::pallet_grandpa::pallet::Call),
				#[codec(index = 11)]
				ImOnline(runtime_types::pallet_im_online::pallet::Call),
				#[codec(index = 13)]
				Democracy(runtime_types::pallet_democracy::pallet::Call),
				#[codec(index = 14)]
				Council(runtime_types::pallet_collective::pallet::Call),
				#[codec(index = 15)]
				TechnicalCommittee(runtime_types::pallet_collective::pallet::Call),
				#[codec(index = 16)]
				PhragmenElection(runtime_types::pallet_elections_phragmen::pallet::Call),
				#[codec(index = 17)]
				TechnicalMembership(runtime_types::pallet_membership::pallet::Call),
				#[codec(index = 18)]
				Treasury(runtime_types::pallet_treasury::pallet::Call),
				#[codec(index = 19)]
				Claims(runtime_types::polkadot_runtime_common::claims::pallet::Call),
				#[codec(index = 24)]
				Utility(runtime_types::pallet_utility::pallet::Call),
				#[codec(index = 25)]
				Identity(runtime_types::pallet_identity::pallet::Call),
				#[codec(index = 26)]
				Society(runtime_types::pallet_society::pallet::Call),
				#[codec(index = 27)]
				Recovery(runtime_types::pallet_recovery::pallet::Call),
				#[codec(index = 28)]
				Vesting(runtime_types::pallet_vesting::pallet::Call),
				#[codec(index = 29)]
				Scheduler(runtime_types::pallet_scheduler::pallet::Call),
				#[codec(index = 30)]
				Proxy(runtime_types::pallet_proxy::pallet::Call),
				#[codec(index = 31)]
				Multisig(runtime_types::pallet_multisig::pallet::Call),
				#[codec(index = 32)]
				Preimage(runtime_types::pallet_preimage::pallet::Call),
				#[codec(index = 35)]
				Bounties(runtime_types::pallet_bounties::pallet::Call),
				#[codec(index = 40)]
				ChildBounties(runtime_types::pallet_child_bounties::pallet::Call),
				#[codec(index = 36)]
				Tips(runtime_types::pallet_tips::pallet::Call),
				#[codec(index = 37)]
				ElectionProviderMultiPhase(
					runtime_types::pallet_election_provider_multi_phase::pallet::Call,
				),
				#[codec(index = 38)]
				Gilt(runtime_types::pallet_gilt::pallet::Call),
				#[codec(index = 39)]
				VoterList(runtime_types::pallet_bags_list::pallet::Call),
				#[codec(index = 41)]
				NominationPools(runtime_types::pallet_nomination_pools::pallet::Call),
				#[codec(index = 51)]
				Configuration(
					runtime_types::polkadot_runtime_parachains::configuration::pallet::Call,
				),
				#[codec(index = 52)]
				ParasShared(runtime_types::polkadot_runtime_parachains::shared::pallet::Call),
				#[codec(index = 53)]
				ParaInclusion(runtime_types::polkadot_runtime_parachains::inclusion::pallet::Call),
				#[codec(index = 54)]
				ParaInherent(
					runtime_types::polkadot_runtime_parachains::paras_inherent::pallet::Call,
				),
				#[codec(index = 56)]
				Paras(runtime_types::polkadot_runtime_parachains::paras::pallet::Call),
				#[codec(index = 57)]
				Initializer(runtime_types::polkadot_runtime_parachains::initializer::pallet::Call),
				#[codec(index = 58)]
				Dmp(runtime_types::polkadot_runtime_parachains::dmp::pallet::Call),
				#[codec(index = 59)]
				Ump(runtime_types::polkadot_runtime_parachains::ump::pallet::Call),
				#[codec(index = 60)]
				Hrmp(runtime_types::polkadot_runtime_parachains::hrmp::pallet::Call),
				#[codec(index = 62)]
				ParasDisputes(runtime_types::polkadot_runtime_parachains::disputes::pallet::Call),
				#[codec(index = 70)]
				Registrar(runtime_types::polkadot_runtime_common::paras_registrar::pallet::Call),
				#[codec(index = 71)]
				Slots(runtime_types::polkadot_runtime_common::slots::pallet::Call),
				#[codec(index = 72)]
				Auctions(runtime_types::polkadot_runtime_common::auctions::pallet::Call),
				#[codec(index = 73)]
				Crowdloan(runtime_types::polkadot_runtime_common::crowdloan::pallet::Call),
				#[codec(index = 99)]
				XcmPallet(runtime_types::pallet_xcm::pallet::Call),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum Event {
				#[codec(index = 0)]
				System(runtime_types::frame_system::pallet::Event),
				#[codec(index = 3)]
				Indices(runtime_types::pallet_indices::pallet::Event),
				#[codec(index = 4)]
				Balances(runtime_types::pallet_balances::pallet::Event),
				#[codec(index = 33)]
				TransactionPayment(runtime_types::pallet_transaction_payment::pallet::Event),
				#[codec(index = 6)]
				Staking(runtime_types::pallet_staking::pallet::pallet::Event),
				#[codec(index = 7)]
				Offences(runtime_types::pallet_offences::pallet::Event),
				#[codec(index = 8)]
				Session(runtime_types::pallet_session::pallet::Event),
				#[codec(index = 10)]
				Grandpa(runtime_types::pallet_grandpa::pallet::Event),
				#[codec(index = 11)]
				ImOnline(runtime_types::pallet_im_online::pallet::Event),
				#[codec(index = 13)]
				Democracy(runtime_types::pallet_democracy::pallet::Event),
				#[codec(index = 14)]
				Council(runtime_types::pallet_collective::pallet::Event),
				#[codec(index = 15)]
				TechnicalCommittee(runtime_types::pallet_collective::pallet::Event),
				#[codec(index = 16)]
				PhragmenElection(runtime_types::pallet_elections_phragmen::pallet::Event),
				#[codec(index = 17)]
				TechnicalMembership(runtime_types::pallet_membership::pallet::Event),
				#[codec(index = 18)]
				Treasury(runtime_types::pallet_treasury::pallet::Event),
				#[codec(index = 19)]
				Claims(runtime_types::polkadot_runtime_common::claims::pallet::Event),
				#[codec(index = 24)]
				Utility(runtime_types::pallet_utility::pallet::Event),
				#[codec(index = 25)]
				Identity(runtime_types::pallet_identity::pallet::Event),
				#[codec(index = 26)]
				Society(runtime_types::pallet_society::pallet::Event),
				#[codec(index = 27)]
				Recovery(runtime_types::pallet_recovery::pallet::Event),
				#[codec(index = 28)]
				Vesting(runtime_types::pallet_vesting::pallet::Event),
				#[codec(index = 29)]
				Scheduler(runtime_types::pallet_scheduler::pallet::Event),
				#[codec(index = 30)]
				Proxy(runtime_types::pallet_proxy::pallet::Event),
				#[codec(index = 31)]
				Multisig(runtime_types::pallet_multisig::pallet::Event),
				#[codec(index = 32)]
				Preimage(runtime_types::pallet_preimage::pallet::Event),
				#[codec(index = 35)]
				Bounties(runtime_types::pallet_bounties::pallet::Event),
				#[codec(index = 40)]
				ChildBounties(runtime_types::pallet_child_bounties::pallet::Event),
				#[codec(index = 36)]
				Tips(runtime_types::pallet_tips::pallet::Event),
				#[codec(index = 37)]
				ElectionProviderMultiPhase(
					runtime_types::pallet_election_provider_multi_phase::pallet::Event,
				),
				#[codec(index = 38)]
				Gilt(runtime_types::pallet_gilt::pallet::Event),
				#[codec(index = 39)]
				VoterList(runtime_types::pallet_bags_list::pallet::Event),
				#[codec(index = 41)]
				NominationPools(runtime_types::pallet_nomination_pools::pallet::Event),
				#[codec(index = 53)]
				ParaInclusion(runtime_types::polkadot_runtime_parachains::inclusion::pallet::Event),
				#[codec(index = 56)]
				Paras(runtime_types::polkadot_runtime_parachains::paras::pallet::Event),
				#[codec(index = 59)]
				Ump(runtime_types::polkadot_runtime_parachains::ump::pallet::Event),
				#[codec(index = 60)]
				Hrmp(runtime_types::polkadot_runtime_parachains::hrmp::pallet::Event),
				#[codec(index = 62)]
				ParasDisputes(runtime_types::polkadot_runtime_parachains::disputes::pallet::Event),
				#[codec(index = 70)]
				Registrar(runtime_types::polkadot_runtime_common::paras_registrar::pallet::Event),
				#[codec(index = 71)]
				Slots(runtime_types::polkadot_runtime_common::slots::pallet::Event),
				#[codec(index = 72)]
				Auctions(runtime_types::polkadot_runtime_common::auctions::pallet::Event),
				#[codec(index = 73)]
				Crowdloan(runtime_types::polkadot_runtime_common::crowdloan::pallet::Event),
				#[codec(index = 99)]
				XcmPallet(runtime_types::pallet_xcm::pallet::Event),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct NposCompactSolution24 {
				pub votes1: ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u16)>,
				pub votes2: ::std::vec::Vec<(
					::core::primitive::u32,
					(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16),
					::core::primitive::u16,
				)>,
				pub votes3: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						2usize],
					::core::primitive::u16,
				)>,
				pub votes4: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						3usize],
					::core::primitive::u16,
				)>,
				pub votes5: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						4usize],
					::core::primitive::u16,
				)>,
				pub votes6: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						5usize],
					::core::primitive::u16,
				)>,
				pub votes7: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						6usize],
					::core::primitive::u16,
				)>,
				pub votes8: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						7usize],
					::core::primitive::u16,
				)>,
				pub votes9: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						8usize],
					::core::primitive::u16,
				)>,
				pub votes10: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						9usize],
					::core::primitive::u16,
				)>,
				pub votes11: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						10usize],
					::core::primitive::u16,
				)>,
				pub votes12: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						11usize],
					::core::primitive::u16,
				)>,
				pub votes13: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						12usize],
					::core::primitive::u16,
				)>,
				pub votes14: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						13usize],
					::core::primitive::u16,
				)>,
				pub votes15: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						14usize],
					::core::primitive::u16,
				)>,
				pub votes16: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						15usize],
					::core::primitive::u16,
				)>,
				pub votes17: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						16usize],
					::core::primitive::u16,
				)>,
				pub votes18: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						17usize],
					::core::primitive::u16,
				)>,
				pub votes19: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						18usize],
					::core::primitive::u16,
				)>,
				pub votes20: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						19usize],
					::core::primitive::u16,
				)>,
				pub votes21: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						20usize],
					::core::primitive::u16,
				)>,
				pub votes22: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						21usize],
					::core::primitive::u16,
				)>,
				pub votes23: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						22usize],
					::core::primitive::u16,
				)>,
				pub votes24: ::std::vec::Vec<(
					::core::primitive::u32,
					[(::core::primitive::u16, runtime_types::sp_arithmetic::per_things::PerU16);
						23usize],
					::core::primitive::u16,
				)>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum OriginCaller {
				#[codec(index = 0)]
				system(
					runtime_types::frame_support::dispatch::RawOrigin<
						::subxt::ext::sp_core::crypto::AccountId32,
					>,
				),
				#[codec(index = 14)]
				Council(
					runtime_types::pallet_collective::RawOrigin<
						::subxt::ext::sp_core::crypto::AccountId32,
					>,
				),
				#[codec(index = 15)]
				TechnicalCommittee(
					runtime_types::pallet_collective::RawOrigin<
						::subxt::ext::sp_core::crypto::AccountId32,
					>,
				),
				#[codec(index = 50)]
				ParachainsOrigin(
					runtime_types::polkadot_runtime_parachains::origin::pallet::Origin,
				),
				#[codec(index = 99)]
				XcmPallet(runtime_types::pallet_xcm::pallet::Origin),
				#[codec(index = 5)]
				Void(runtime_types::sp_core::Void),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum ProxyType {
				#[codec(index = 0)]
				Any,
				#[codec(index = 1)]
				NonTransfer,
				#[codec(index = 2)]
				Governance,
				#[codec(index = 3)]
				Staking,
				#[codec(index = 4)]
				IdentityJudgement,
				#[codec(index = 5)]
				CancelProxy,
				#[codec(index = 6)]
				Auction,
				#[codec(index = 7)]
				Society,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Runtime;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SessionKeys {
				pub grandpa: runtime_types::sp_finality_grandpa::app::Public,
				pub babe: runtime_types::sp_consensus_babe::app::Public,
				pub im_online: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
				pub para_validator: runtime_types::polkadot_primitives::v2::validator_app::Public,
				pub para_assignment: runtime_types::polkadot_primitives::v2::assignment_app::Public,
				pub authority_discovery: runtime_types::sp_authority_discovery::app::Public,
			}
		}
		pub mod pallet_authorship {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Provide a set of uncles."]
					set_uncles {
						new_uncles: ::std::vec::Vec<
							runtime_types::sp_runtime::generic::header::Header<
								::core::primitive::u32,
								runtime_types::sp_runtime::traits::BlakeTwo256,
							>,
						>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The uncle parent not in the chain."]
					InvalidUncleParent,
					#[codec(index = 1)]
					#[doc = "Uncles already set in the block."]
					UnclesAlreadySet,
					#[codec(index = 2)]
					#[doc = "Too many uncles."]
					TooManyUncles,
					#[codec(index = 3)]
					#[doc = "The uncle is genesis."]
					GenesisUncle,
					#[codec(index = 4)]
					#[doc = "The uncle is too high in chain."]
					TooHighUncle,
					#[codec(index = 5)]
					#[doc = "The uncle is already included."]
					UncleAlreadyIncluded,
					#[codec(index = 6)]
					#[doc = "The uncle isn't recent enough to be included."]
					OldUncle,
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum UncleEntryItem<_0, _1, _2> {
				#[codec(index = 0)]
				InclusionHeight(_0),
				#[codec(index = 1)]
				Uncle(_1, ::core::option::Option<_2>),
			}
		}
		pub mod pallet_babe {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Report authority equivocation/misbehavior. This method will verify"]
					#[doc = "the equivocation proof and validate the given key ownership proof"]
					#[doc = "against the extracted offender. If both are valid, the offence will"]
					#[doc = "be reported."]
					report_equivocation {
						equivocation_proof: ::std::boxed::Box<
							runtime_types::sp_consensus_slots::EquivocationProof<
								runtime_types::sp_runtime::generic::header::Header<
									::core::primitive::u32,
									runtime_types::sp_runtime::traits::BlakeTwo256,
								>,
								runtime_types::sp_consensus_babe::app::Public,
							>,
						>,
						key_owner_proof: runtime_types::sp_session::MembershipProof,
					},
					#[codec(index = 1)]
					#[doc = "Report authority equivocation/misbehavior. This method will verify"]
					#[doc = "the equivocation proof and validate the given key ownership proof"]
					#[doc = "against the extracted offender. If both are valid, the offence will"]
					#[doc = "be reported."]
					#[doc = "This extrinsic must be called unsigned and it is expected that only"]
					#[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
					#[doc = "if the block author is defined it will be defined as the equivocation"]
					#[doc = "reporter."]
					report_equivocation_unsigned {
						equivocation_proof: ::std::boxed::Box<
							runtime_types::sp_consensus_slots::EquivocationProof<
								runtime_types::sp_runtime::generic::header::Header<
									::core::primitive::u32,
									runtime_types::sp_runtime::traits::BlakeTwo256,
								>,
								runtime_types::sp_consensus_babe::app::Public,
							>,
						>,
						key_owner_proof: runtime_types::sp_session::MembershipProof,
					},
					#[codec(index = 2)]
					#[doc = "Plan an epoch config change. The epoch config change is recorded and will be enacted on"]
					#[doc = "the next call to `enact_epoch_change`. The config will be activated one epoch after."]
					#[doc = "Multiple calls to this method will replace any existing planned config change that had"]
					#[doc = "not been enacted yet."]
					plan_config_change {
						config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "An equivocation proof provided as part of an equivocation report is invalid."]
					InvalidEquivocationProof,
					#[codec(index = 1)]
					#[doc = "A key ownership proof provided as part of an equivocation report is invalid."]
					InvalidKeyOwnershipProof,
					#[codec(index = 2)]
					#[doc = "A given equivocation report is valid but already previously reported."]
					DuplicateOffenceReport,
					#[codec(index = 3)]
					#[doc = "Submitted configuration is invalid."]
					InvalidConfiguration,
				}
			}
		}
		pub mod pallet_bags_list {
			use super::runtime_types;
			pub mod list {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct Bag {
					pub head: ::core::option::Option<::subxt::ext::sp_core::crypto::AccountId32>,
					pub tail: ::core::option::Option<::subxt::ext::sp_core::crypto::AccountId32>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum ListError {
					#[codec(index = 0)]
					Duplicate,
					#[codec(index = 1)]
					NotHeavier,
					#[codec(index = 2)]
					NotInSameBag,
					#[codec(index = 3)]
					NodeNotFound,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct Node {
					pub id: ::subxt::ext::sp_core::crypto::AccountId32,
					pub prev: ::core::option::Option<::subxt::ext::sp_core::crypto::AccountId32>,
					pub next: ::core::option::Option<::subxt::ext::sp_core::crypto::AccountId32>,
					pub bag_upper: ::core::primitive::u64,
					pub score: ::core::primitive::u64,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Declare that some `dislocated` account has, through rewards or penalties, sufficiently"]
					#[doc = "changed its score that it should properly fall into a different bag than its current"]
					#[doc = "one."]
					#[doc = ""]
					#[doc = "Anyone can call this function about any potentially dislocated account."]
					#[doc = ""]
					#[doc = "Will always update the stored score of `dislocated` to the correct score, based on"]
					#[doc = "`ScoreProvider`."]
					#[doc = ""]
					#[doc = "If `dislocated` does not exists, it returns an error."]
					rebag { dislocated: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 1)]
					#[doc = "Move the caller's Id directly in front of `lighter`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and can only be called by the Id of"]
					#[doc = "the account going in front of `lighter`."]
					#[doc = ""]
					#[doc = "Only works if"]
					#[doc = "- both nodes are within the same bag,"]
					#[doc = "- and `origin` has a greater `Score` than `lighter`."]
					put_in_front_of { lighter: ::subxt::ext::sp_core::crypto::AccountId32 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "A error in the list interface implementation."]
					List(runtime_types::pallet_bags_list::list::ListError),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Moved an account from one bag to another."]
					Rebagged {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						from: ::core::primitive::u64,
						to: ::core::primitive::u64,
					},
					#[codec(index = 1)]
					#[doc = "Updated the score of some account to the given amount."]
					ScoreUpdated {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						new_score: ::core::primitive::u64,
					},
				}
			}
		}
		pub mod pallet_balances {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Transfer some liquid free balance to another account."]
					#[doc = ""]
					#[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
					#[doc = "If the sender's account is below the existential deposit as a result"]
					#[doc = "of the transfer, the account will be reaped."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Dependent on arguments but not critical, given proper implementations for input config"]
					#[doc = "  types. See related functions below."]
					#[doc = "- It contains a limited number of reads and writes internally and no complex"]
					#[doc = "  computation."]
					#[doc = ""]
					#[doc = "Related functions:"]
					#[doc = ""]
					#[doc = "  - `ensure_can_withdraw` is always called internally but has a bounded complexity."]
					#[doc = "  - Transferring balances to accounts that did not exist before will cause"]
					#[doc = "    `T::OnNewAccount::on_new_account` to be called."]
					#[doc = "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`."]
					#[doc = "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check"]
					#[doc = "    that the transfer will not kill the origin account."]
					#[doc = "---------------------------------"]
					#[doc = "- Origin account is already in memory, so no DB operations for them."]
					#[doc = "# </weight>"]
					transfer {
						dest: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "Set the balances of a given account."]
					#[doc = ""]
					#[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it will"]
					#[doc = "also alter the total issuance of the system (`TotalIssuance`) appropriately."]
					#[doc = "If the new free or reserved balance is below the existential deposit,"]
					#[doc = "it will reset the account nonce (`frame_system::AccountNonce`)."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call is `root`."]
					set_balance {
						who: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
						#[codec(compact)]
						new_free: ::core::primitive::u128,
						#[codec(compact)]
						new_reserved: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "Exactly as `transfer`, except the origin must be root and the source account may be"]
					#[doc = "specified."]
					#[doc = "# <weight>"]
					#[doc = "- Same as transfer, but additional read and write because the source account is not"]
					#[doc = "  assumed to be in the overlay."]
					#[doc = "# </weight>"]
					force_transfer {
						source: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
						dest: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "Same as the [`transfer`] call, but with a check that the transfer will not kill the"]
					#[doc = "origin account."]
					#[doc = ""]
					#[doc = "99% of the time you want [`transfer`] instead."]
					#[doc = ""]
					#[doc = "[`transfer`]: struct.Pallet.html#method.transfer"]
					transfer_keep_alive {
						dest: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Transfer the entire transferable balance from the caller account."]
					#[doc = ""]
					#[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
					#[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
					#[doc = "transferred by this function. To ensure that this function results in a killed account,"]
					#[doc = "you might need to prepare the account by removing any reference counters, storage"]
					#[doc = "deposits, etc..."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be Signed."]
					#[doc = ""]
					#[doc = "- `dest`: The recipient of the transfer."]
					#[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
					#[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
					#[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
					#[doc = "  keep the sender account alive (true). # <weight>"]
					#[doc = "- O(1). Just like transfer, but reading the user's transferable balance first."]
					#[doc = "  #</weight>"]
					transfer_all {
						dest: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					#[doc = "Unreserve some balance from a user by force."]
					#[doc = ""]
					#[doc = "Can only be called by ROOT."]
					force_unreserve {
						who: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
						amount: ::core::primitive::u128,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Vesting balance too high to send value"]
					VestingBalance,
					#[codec(index = 1)]
					#[doc = "Account liquidity restrictions prevent withdrawal"]
					LiquidityRestrictions,
					#[codec(index = 2)]
					#[doc = "Balance too low to send value"]
					InsufficientBalance,
					#[codec(index = 3)]
					#[doc = "Value too low to create account due to existential deposit"]
					ExistentialDeposit,
					#[codec(index = 4)]
					#[doc = "Transfer/payment would kill account"]
					KeepAlive,
					#[codec(index = 5)]
					#[doc = "A vesting schedule already exists for this account"]
					ExistingVestingSchedule,
					#[codec(index = 6)]
					#[doc = "Beneficiary account must pre-exist"]
					DeadAccount,
					#[codec(index = 7)]
					#[doc = "Number of named reserves exceed MaxReserves"]
					TooManyReserves,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "An account was created with some free balance."]
					Endowed {
						account: ::subxt::ext::sp_core::crypto::AccountId32,
						free_balance: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
					#[doc = "resulting in an outright loss."]
					DustLost {
						account: ::subxt::ext::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "Transfer succeeded."]
					Transfer {
						from: ::subxt::ext::sp_core::crypto::AccountId32,
						to: ::subxt::ext::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "A balance was set by root."]
					BalanceSet {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						free: ::core::primitive::u128,
						reserved: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Some balance was reserved (moved from free to reserved)."]
					Reserved {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					#[doc = "Some balance was unreserved (moved from reserved to free)."]
					Unreserved {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					#[doc = "Some balance was moved from the reserve of the first account to the second account."]
					#[doc = "Final argument indicates the destination balance type."]
					ReserveRepatriated {
						from: ::subxt::ext::sp_core::crypto::AccountId32,
						to: ::subxt::ext::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
						destination_status:
							runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
					},
					#[codec(index = 7)]
					#[doc = "Some amount was deposited (e.g. for transaction fees)."]
					Deposit {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					#[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
					Withdraw {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					#[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
					Slashed {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct AccountData<_0> {
				pub free: _0,
				pub reserved: _0,
				pub misc_frozen: _0,
				pub fee_frozen: _0,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct BalanceLock<_0> {
				pub id: [::core::primitive::u8; 8usize],
				pub amount: _0,
				pub reasons: runtime_types::pallet_balances::Reasons,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum Reasons {
				#[codec(index = 0)]
				Fee,
				#[codec(index = 1)]
				Misc,
				#[codec(index = 2)]
				All,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum Releases {
				#[codec(index = 0)]
				V1_0_0,
				#[codec(index = 1)]
				V2_0_0,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ReserveData<_0, _1> {
				pub id: _0,
				pub amount: _1,
			}
		}
		pub mod pallet_bounties {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Propose a new bounty."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as"]
					#[doc = "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,"]
					#[doc = "or slashed when rejected."]
					#[doc = ""]
					#[doc = "- `curator`: The curator account whom will manage this bounty."]
					#[doc = "- `fee`: The curator fee."]
					#[doc = "- `value`: The total payment amount of this bounty, curator fee included."]
					#[doc = "- `description`: The description of this bounty."]
					propose_bounty {
						#[codec(compact)]
						value: ::core::primitive::u128,
						description: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					#[doc = "Approve a bounty proposal. At a later time, the bounty will be funded and become active"]
					#[doc = "and the original deposit will be returned."]
					#[doc = ""]
					#[doc = "May only be called from `T::ApproveOrigin`."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- O(1)."]
					#[doc = "# </weight>"]
					approve_bounty {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Assign a curator to a funded bounty."]
					#[doc = ""]
					#[doc = "May only be called from `T::ApproveOrigin`."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- O(1)."]
					#[doc = "# </weight>"]
					propose_curator {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
						curator: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
						#[codec(compact)]
						fee: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "Unassign curator from a bounty."]
					#[doc = ""]
					#[doc = "This function can only be called by the `RejectOrigin` a signed origin."]
					#[doc = ""]
					#[doc = "If this function is called by the `RejectOrigin`, we assume that the curator is"]
					#[doc = "malicious or inactive. As a result, we will slash the curator when possible."]
					#[doc = ""]
					#[doc = "If the origin is the curator, we take this as a sign they are unable to do their job and"]
					#[doc = "they willingly give up. We could slash them, but for now we allow them to recover their"]
					#[doc = "deposit and exit without issue. (We may want to change this if it is abused.)"]
					#[doc = ""]
					#[doc = "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows"]
					#[doc = "anyone in the community to call out that a curator is not doing their due diligence, and"]
					#[doc = "we should pick a new curator. In this case the curator should also be slashed."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- O(1)."]
					#[doc = "# </weight>"]
					unassign_curator {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					#[doc = "Accept the curator role for a bounty."]
					#[doc = "A deposit will be reserved from curator and refund upon successful payout."]
					#[doc = ""]
					#[doc = "May only be called from the curator."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- O(1)."]
					#[doc = "# </weight>"]
					accept_curator {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					#[doc = "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds"]
					#[doc = "after a delay."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be the curator of this bounty."]
					#[doc = ""]
					#[doc = "- `bounty_id`: Bounty ID to award."]
					#[doc = "- `beneficiary`: The beneficiary account whom will receive the payout."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- O(1)."]
					#[doc = "# </weight>"]
					award_bounty {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
						beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
					},
					#[codec(index = 6)]
					#[doc = "Claim the payout from an awarded bounty after payout delay."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be the beneficiary of this bounty."]
					#[doc = ""]
					#[doc = "- `bounty_id`: Bounty ID to claim."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- O(1)."]
					#[doc = "# </weight>"]
					claim_bounty {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 7)]
					#[doc = "Cancel a proposed or active bounty. All the funds will be sent to treasury and"]
					#[doc = "the curator deposit will be unreserved if possible."]
					#[doc = ""]
					#[doc = "Only `T::RejectOrigin` is able to cancel a bounty."]
					#[doc = ""]
					#[doc = "- `bounty_id`: Bounty ID to cancel."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- O(1)."]
					#[doc = "# </weight>"]
					close_bounty {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					#[doc = "Extend the expiry time of an active bounty."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be the curator of this bounty."]
					#[doc = ""]
					#[doc = "- `bounty_id`: Bounty ID to extend."]
					#[doc = "- `remark`: additional information."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- O(1)."]
					#[doc = "# </weight>"]
					extend_bounty_expiry {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
						remark: ::std::vec::Vec<::core::primitive::u8>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Proposer's balance is too low."]
					InsufficientProposersBalance,
					#[codec(index = 1)]
					#[doc = "No proposal or bounty at that index."]
					InvalidIndex,
					#[codec(index = 2)]
					#[doc = "The reason given is just too big."]
					ReasonTooBig,
					#[codec(index = 3)]
					#[doc = "The bounty status is unexpected."]
					UnexpectedStatus,
					#[codec(index = 4)]
					#[doc = "Require bounty curator."]
					RequireCurator,
					#[codec(index = 5)]
					#[doc = "Invalid bounty value."]
					InvalidValue,
					#[codec(index = 6)]
					#[doc = "Invalid bounty fee."]
					InvalidFee,
					#[codec(index = 7)]
					#[doc = "A bounty payout is pending."]
					#[doc = "To cancel the bounty, you must unassign and slash the curator."]
					PendingPayout,
					#[codec(index = 8)]
					#[doc = "The bounties cannot be claimed/closed because it's still in the countdown period."]
					Premature,
					#[codec(index = 9)]
					#[doc = "The bounty cannot be closed because it has active child bounties."]
					HasActiveChildBounty,
					#[codec(index = 10)]
					#[doc = "Too many approvals are already queued."]
					TooManyQueued,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "New bounty proposal."]
					BountyProposed { index: ::core::primitive::u32 },
					#[codec(index = 1)]
					#[doc = "A bounty proposal was rejected; funds were slashed."]
					BountyRejected { index: ::core::primitive::u32, bond: ::core::primitive::u128 },
					#[codec(index = 2)]
					#[doc = "A bounty proposal is funded and became active."]
					BountyBecameActive { index: ::core::primitive::u32 },
					#[codec(index = 3)]
					#[doc = "A bounty is awarded to a beneficiary."]
					BountyAwarded {
						index: ::core::primitive::u32,
						beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 4)]
					#[doc = "A bounty is claimed by beneficiary."]
					BountyClaimed {
						index: ::core::primitive::u32,
						payout: ::core::primitive::u128,
						beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 5)]
					#[doc = "A bounty is cancelled."]
					BountyCanceled { index: ::core::primitive::u32 },
					#[codec(index = 6)]
					#[doc = "A bounty expiry is extended."]
					BountyExtended { index: ::core::primitive::u32 },
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Bounty<_0, _1, _2> {
				pub proposer: _0,
				pub value: _1,
				pub fee: _1,
				pub curator_deposit: _1,
				pub bond: _1,
				pub status: runtime_types::pallet_bounties::BountyStatus<_0, _2>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum BountyStatus<_0, _1> {
				#[codec(index = 0)]
				Proposed,
				#[codec(index = 1)]
				Approved,
				#[codec(index = 2)]
				Funded,
				#[codec(index = 3)]
				CuratorProposed { curator: _0 },
				#[codec(index = 4)]
				Active { curator: _0, update_due: _1 },
				#[codec(index = 5)]
				PendingPayout { curator: _0, beneficiary: _0, unlock_at: _1 },
			}
		}
		pub mod pallet_child_bounties {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Add a new child-bounty."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be the curator of parent"]
					#[doc = "bounty and the parent bounty must be in \"active\" state."]
					#[doc = ""]
					#[doc = "Child-bounty gets added successfully & fund gets transferred from"]
					#[doc = "parent bounty to child-bounty account, if parent bounty has enough"]
					#[doc = "funds, else the call fails."]
					#[doc = ""]
					#[doc = "Upper bound to maximum number of active  child bounties that can be"]
					#[doc = "added are managed via runtime trait config"]
					#[doc = "[`Config::MaxActiveChildBountyCount`]."]
					#[doc = ""]
					#[doc = "If the call is success, the status of child-bounty is updated to"]
					#[doc = "\"Added\"."]
					#[doc = ""]
					#[doc = "- `parent_bounty_id`: Index of parent bounty for which child-bounty is being added."]
					#[doc = "- `value`: Value for executing the proposal."]
					#[doc = "- `description`: Text description for the child-bounty."]
					add_child_bounty {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						value: ::core::primitive::u128,
						description: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					#[doc = "Propose curator for funded child-bounty."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be curator of parent bounty."]
					#[doc = ""]
					#[doc = "Parent bounty must be in active state, for this child-bounty call to"]
					#[doc = "work."]
					#[doc = ""]
					#[doc = "Child-bounty must be in \"Added\" state, for processing the call. And"]
					#[doc = "state of child-bounty is moved to \"CuratorProposed\" on successful"]
					#[doc = "call completion."]
					#[doc = ""]
					#[doc = "- `parent_bounty_id`: Index of parent bounty."]
					#[doc = "- `child_bounty_id`: Index of child bounty."]
					#[doc = "- `curator`: Address of child-bounty curator."]
					#[doc = "- `fee`: payment fee to child-bounty curator for execution."]
					propose_curator {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						child_bounty_id: ::core::primitive::u32,
						curator: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
						#[codec(compact)]
						fee: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "Accept the curator role for the child-bounty."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be the curator of this"]
					#[doc = "child-bounty."]
					#[doc = ""]
					#[doc = "A deposit will be reserved from the curator and refund upon"]
					#[doc = "successful payout or cancellation."]
					#[doc = ""]
					#[doc = "Fee for curator is deducted from curator fee of parent bounty."]
					#[doc = ""]
					#[doc = "Parent bounty must be in active state, for this child-bounty call to"]
					#[doc = "work."]
					#[doc = ""]
					#[doc = "Child-bounty must be in \"CuratorProposed\" state, for processing the"]
					#[doc = "call. And state of child-bounty is moved to \"Active\" on successful"]
					#[doc = "call completion."]
					#[doc = ""]
					#[doc = "- `parent_bounty_id`: Index of parent bounty."]
					#[doc = "- `child_bounty_id`: Index of child bounty."]
					accept_curator {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						child_bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "Unassign curator from a child-bounty."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call can be either `RejectOrigin`, or"]
					#[doc = "the curator of the parent bounty, or any signed origin."]
					#[doc = ""]
					#[doc = "For the origin other than T::RejectOrigin and the child-bounty"]
					#[doc = "curator, parent bounty must be in active state, for this call to"]
					#[doc = "work. We allow child-bounty curator and T::RejectOrigin to execute"]
					#[doc = "this call irrespective of the parent bounty state."]
					#[doc = ""]
					#[doc = "If this function is called by the `RejectOrigin` or the"]
					#[doc = "parent bounty curator, we assume that the child-bounty curator is"]
					#[doc = "malicious or inactive. As a result, child-bounty curator deposit is"]
					#[doc = "slashed."]
					#[doc = ""]
					#[doc = "If the origin is the child-bounty curator, we take this as a sign"]
					#[doc = "that they are unable to do their job, and are willingly giving up."]
					#[doc = "We could slash the deposit, but for now we allow them to unreserve"]
					#[doc = "their deposit and exit without issue. (We may want to change this if"]
					#[doc = "it is abused.)"]
					#[doc = ""]
					#[doc = "Finally, the origin can be anyone iff the child-bounty curator is"]
					#[doc = "\"inactive\". Expiry update due of parent bounty is used to estimate"]
					#[doc = "inactive state of child-bounty curator."]
					#[doc = ""]
					#[doc = "This allows anyone in the community to call out that a child-bounty"]
					#[doc = "curator is not doing their due diligence, and we should pick a new"]
					#[doc = "one. In this case the child-bounty curator deposit is slashed."]
					#[doc = ""]
					#[doc = "State of child-bounty is moved to Added state on successful call"]
					#[doc = "completion."]
					#[doc = ""]
					#[doc = "- `parent_bounty_id`: Index of parent bounty."]
					#[doc = "- `child_bounty_id`: Index of child bounty."]
					unassign_curator {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						child_bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					#[doc = "Award child-bounty to a beneficiary."]
					#[doc = ""]
					#[doc = "The beneficiary will be able to claim the funds after a delay."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be the parent curator or"]
					#[doc = "curator of this child-bounty."]
					#[doc = ""]
					#[doc = "Parent bounty must be in active state, for this child-bounty call to"]
					#[doc = "work."]
					#[doc = ""]
					#[doc = "Child-bounty must be in active state, for processing the call. And"]
					#[doc = "state of child-bounty is moved to \"PendingPayout\" on successful call"]
					#[doc = "completion."]
					#[doc = ""]
					#[doc = "- `parent_bounty_id`: Index of parent bounty."]
					#[doc = "- `child_bounty_id`: Index of child bounty."]
					#[doc = "- `beneficiary`: Beneficiary account."]
					award_child_bounty {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						child_bounty_id: ::core::primitive::u32,
						beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
					},
					#[codec(index = 5)]
					#[doc = "Claim the payout from an awarded child-bounty after payout delay."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call may be any signed origin."]
					#[doc = ""]
					#[doc = "Call works independent of parent bounty state, No need for parent"]
					#[doc = "bounty to be in active state."]
					#[doc = ""]
					#[doc = "The Beneficiary is paid out with agreed bounty value. Curator fee is"]
					#[doc = "paid & curator deposit is unreserved."]
					#[doc = ""]
					#[doc = "Child-bounty must be in \"PendingPayout\" state, for processing the"]
					#[doc = "call. And instance of child-bounty is removed from the state on"]
					#[doc = "successful call completion."]
					#[doc = ""]
					#[doc = "- `parent_bounty_id`: Index of parent bounty."]
					#[doc = "- `child_bounty_id`: Index of child bounty."]
					claim_child_bounty {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						child_bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					#[doc = "Cancel a proposed or active child-bounty. Child-bounty account funds"]
					#[doc = "are transferred to parent bounty account. The child-bounty curator"]
					#[doc = "deposit may be unreserved if possible."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be either parent curator or"]
					#[doc = "`T::RejectOrigin`."]
					#[doc = ""]
					#[doc = "If the state of child-bounty is `Active`, curator deposit is"]
					#[doc = "unreserved."]
					#[doc = ""]
					#[doc = "If the state of child-bounty is `PendingPayout`, call fails &"]
					#[doc = "returns `PendingPayout` error."]
					#[doc = ""]
					#[doc = "For the origin other than T::RejectOrigin, parent bounty must be in"]
					#[doc = "active state, for this child-bounty call to work. For origin"]
					#[doc = "T::RejectOrigin execution is forced."]
					#[doc = ""]
					#[doc = "Instance of child-bounty is removed from the state on successful"]
					#[doc = "call completion."]
					#[doc = ""]
					#[doc = "- `parent_bounty_id`: Index of parent bounty."]
					#[doc = "- `child_bounty_id`: Index of child bounty."]
					close_child_bounty {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						child_bounty_id: ::core::primitive::u32,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The parent bounty is not in active state."]
					ParentBountyNotActive,
					#[codec(index = 1)]
					#[doc = "The bounty balance is not enough to add new child-bounty."]
					InsufficientBountyBalance,
					#[codec(index = 2)]
					#[doc = "Number of child bounties exceeds limit `MaxActiveChildBountyCount`."]
					TooManyChildBounties,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A child-bounty is added."]
					Added { index: ::core::primitive::u32, child_index: ::core::primitive::u32 },
					#[codec(index = 1)]
					#[doc = "A child-bounty is awarded to a beneficiary."]
					Awarded {
						index: ::core::primitive::u32,
						child_index: ::core::primitive::u32,
						beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 2)]
					#[doc = "A child-bounty is claimed by beneficiary."]
					Claimed {
						index: ::core::primitive::u32,
						child_index: ::core::primitive::u32,
						payout: ::core::primitive::u128,
						beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 3)]
					#[doc = "A child-bounty is cancelled."]
					Canceled { index: ::core::primitive::u32, child_index: ::core::primitive::u32 },
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ChildBounty<_0, _1, _2> {
				pub parent_bounty: _2,
				pub value: _1,
				pub fee: _1,
				pub curator_deposit: _1,
				pub status: runtime_types::pallet_child_bounties::ChildBountyStatus<_0, _2>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum ChildBountyStatus<_0, _1> {
				#[codec(index = 0)]
				Added,
				#[codec(index = 1)]
				CuratorProposed { curator: _0 },
				#[codec(index = 2)]
				Active { curator: _0 },
				#[codec(index = 3)]
				PendingPayout { curator: _0, beneficiary: _0, unlock_at: _1 },
			}
		}
		pub mod pallet_collective {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Set the collective's membership."]
					#[doc = ""]
					#[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
					#[doc = "- `prime`: The prime member whose vote sets the default."]
					#[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
					#[doc = "  weight estimation."]
					#[doc = ""]
					#[doc = "Requires root origin."]
					#[doc = ""]
					#[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
					#[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
					#[doc = ""]
					#[doc = "# WARNING:"]
					#[doc = ""]
					#[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
					#[doc = "implementation of the trait [`ChangeMembers`]."]
					#[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
					#[doc = "with other logic managing the member set."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "## Weight"]
					#[doc = "- `O(MP + N)` where:"]
					#[doc = "  - `M` old-members-count (code- and governance-bounded)"]
					#[doc = "  - `N` new-members-count (code- and governance-bounded)"]
					#[doc = "  - `P` proposals-count (code-bounded)"]
					#[doc = "- DB:"]
					#[doc = "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the"]
					#[doc = "    members"]
					#[doc = "  - 1 storage read (codec `O(P)`) for reading the proposals"]
					#[doc = "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal"]
					#[doc = "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one"]
					#[doc = "# </weight>"]
					set_members {
						new_members: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
						prime: ::core::option::Option<::subxt::ext::sp_core::crypto::AccountId32>,
						old_count: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					#[doc = "Dispatch a proposal from a member using the `Member` origin."]
					#[doc = ""]
					#[doc = "Origin must be a member of the collective."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "## Weight"]
					#[doc = "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching"]
					#[doc = "  `proposal`"]
					#[doc = "- DB: 1 read (codec `O(M)`) + DB access of `proposal`"]
					#[doc = "- 1 event"]
					#[doc = "# </weight>"]
					execute {
						proposal: ::std::boxed::Box<runtime_types::kusama_runtime::Call>,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Add a new proposal to either be voted on or executed directly."]
					#[doc = ""]
					#[doc = "Requires the sender to be member."]
					#[doc = ""]
					#[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
					#[doc = "or put up for voting."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "## Weight"]
					#[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
					#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
					#[doc = "  - `M` is members-count (code- and governance-bounded)"]
					#[doc = "  - branching is influenced by `threshold` where:"]
					#[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
					#[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
					#[doc = "- DB:"]
					#[doc = "  - 1 storage read `is_member` (codec `O(M)`)"]
					#[doc = "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)"]
					#[doc = "  - DB accesses influenced by `threshold`:"]
					#[doc = "    - EITHER storage accesses done by `proposal` (`threshold < 2`)"]
					#[doc = "    - OR proposal insertion (`threshold <= 2`)"]
					#[doc = "      - 1 storage mutation `Proposals` (codec `O(P2)`)"]
					#[doc = "      - 1 storage mutation `ProposalCount` (codec `O(1)`)"]
					#[doc = "      - 1 storage write `ProposalOf` (codec `O(B)`)"]
					#[doc = "      - 1 storage write `Voting` (codec `O(M)`)"]
					#[doc = "  - 1 event"]
					#[doc = "# </weight>"]
					propose {
						#[codec(compact)]
						threshold: ::core::primitive::u32,
						proposal: ::std::boxed::Box<runtime_types::kusama_runtime::Call>,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "Add an aye or nay vote for the sender to the given proposal."]
					#[doc = ""]
					#[doc = "Requires the sender to be a member."]
					#[doc = ""]
					#[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
					#[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
					#[doc = "fee."]
					#[doc = "# <weight>"]
					#[doc = "## Weight"]
					#[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
					#[doc = "- DB:"]
					#[doc = "  - 1 storage read `Members` (codec `O(M)`)"]
					#[doc = "  - 1 storage mutation `Voting` (codec `O(M)`)"]
					#[doc = "- 1 event"]
					#[doc = "# </weight>"]
					vote {
						proposal: ::subxt::ext::sp_core::H256,
						#[codec(compact)]
						index: ::core::primitive::u32,
						approve: ::core::primitive::bool,
					},
					#[codec(index = 4)]
					#[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
					#[doc = ""]
					#[doc = "May be called by any signed account in order to finish voting and close the proposal."]
					#[doc = ""]
					#[doc = "If called before the end of the voting period it will only close the vote if it is"]
					#[doc = "has enough votes to be approved or disapproved."]
					#[doc = ""]
					#[doc = "If called after the end of the voting period abstentions are counted as rejections"]
					#[doc = "unless there is a prime member set and the prime member cast an approval."]
					#[doc = ""]
					#[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
					#[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
					#[doc = ""]
					#[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
					#[doc = "proposal."]
					#[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
					#[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "## Weight"]
					#[doc = "- `O(B + M + P1 + P2)` where:"]
					#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
					#[doc = "  - `M` is members-count (code- and governance-bounded)"]
					#[doc = "  - `P1` is the complexity of `proposal` preimage."]
					#[doc = "  - `P2` is proposal-count (code-bounded)"]
					#[doc = "- DB:"]
					#[doc = " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)"]
					#[doc = " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec"]
					#[doc = "   `O(P2)`)"]
					#[doc = " - any mutations done while executing `proposal` (`P1`)"]
					#[doc = "- up to 3 events"]
					#[doc = "# </weight>"]
					close {
						proposal_hash: ::subxt::ext::sp_core::H256,
						#[codec(compact)]
						index: ::core::primitive::u32,
						#[codec(compact)]
						proposal_weight_bound: ::core::primitive::u64,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					#[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
					#[doc = "state."]
					#[doc = ""]
					#[doc = "Must be called by the Root origin."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Complexity: O(P) where P is the number of max proposals"]
					#[doc = "DB Weight:"]
					#[doc = "* Reads: Proposals"]
					#[doc = "* Writes: Voting, Proposals, ProposalOf"]
					#[doc = "# </weight>"]
					disapprove_proposal { proposal_hash: ::subxt::ext::sp_core::H256 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Account is not a member"]
					NotMember,
					#[codec(index = 1)]
					#[doc = "Duplicate proposals not allowed"]
					DuplicateProposal,
					#[codec(index = 2)]
					#[doc = "Proposal must exist"]
					ProposalMissing,
					#[codec(index = 3)]
					#[doc = "Mismatched index"]
					WrongIndex,
					#[codec(index = 4)]
					#[doc = "Duplicate vote ignored"]
					DuplicateVote,
					#[codec(index = 5)]
					#[doc = "Members are already initialized!"]
					AlreadyInitialized,
					#[codec(index = 6)]
					#[doc = "The close call was made too early, before the end of the voting."]
					TooEarly,
					#[codec(index = 7)]
					#[doc = "There can only be a maximum of `MaxProposals` active proposals."]
					TooManyProposals,
					#[codec(index = 8)]
					#[doc = "The given weight bound for the proposal was too low."]
					WrongProposalWeight,
					#[codec(index = 9)]
					#[doc = "The given length bound for the proposal was too low."]
					WrongProposalLength,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
					#[doc = "`MemberCount`)."]
					Proposed {
						account: ::subxt::ext::sp_core::crypto::AccountId32,
						proposal_index: ::core::primitive::u32,
						proposal_hash: ::subxt::ext::sp_core::H256,
						threshold: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					#[doc = "A motion (given hash) has been voted on by given account, leaving"]
					#[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
					Voted {
						account: ::subxt::ext::sp_core::crypto::AccountId32,
						proposal_hash: ::subxt::ext::sp_core::H256,
						voted: ::core::primitive::bool,
						yes: ::core::primitive::u32,
						no: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "A motion was approved by the required threshold."]
					Approved { proposal_hash: ::subxt::ext::sp_core::H256 },
					#[codec(index = 3)]
					#[doc = "A motion was not approved by the required threshold."]
					Disapproved { proposal_hash: ::subxt::ext::sp_core::H256 },
					#[codec(index = 4)]
					#[doc = "A motion was executed; result will be `Ok` if it returned without error."]
					Executed {
						proposal_hash: ::subxt::ext::sp_core::H256,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 5)]
					#[doc = "A single member did some action; result will be `Ok` if it returned without error."]
					MemberExecuted {
						proposal_hash: ::subxt::ext::sp_core::H256,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 6)]
					#[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
					Closed {
						proposal_hash: ::subxt::ext::sp_core::H256,
						yes: ::core::primitive::u32,
						no: ::core::primitive::u32,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum RawOrigin<_0> {
				#[codec(index = 0)]
				Members(::core::primitive::u32, ::core::primitive::u32),
				#[codec(index = 1)]
				Member(_0),
				#[codec(index = 2)]
				_Phantom,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Votes<_0, _1> {
				pub index: _1,
				pub threshold: _1,
				pub ayes: ::std::vec::Vec<_0>,
				pub nays: ::std::vec::Vec<_0>,
				pub end: _1,
			}
		}
		pub mod pallet_democracy {
			use super::runtime_types;
			pub mod conviction {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum Conviction {
					#[codec(index = 0)]
					None,
					#[codec(index = 1)]
					Locked1x,
					#[codec(index = 2)]
					Locked2x,
					#[codec(index = 3)]
					Locked3x,
					#[codec(index = 4)]
					Locked4x,
					#[codec(index = 5)]
					Locked5x,
					#[codec(index = 6)]
					Locked6x,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Propose a sensitive action to be taken."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_ and the sender must"]
					#[doc = "have funds to cover the deposit."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The hash of the proposal preimage."]
					#[doc = "- `value`: The amount of deposit (must be at least `MinimumDeposit`)."]
					#[doc = ""]
					#[doc = "Emits `Proposed`."]
					#[doc = ""]
					#[doc = "Weight: `O(p)`"]
					propose {
						proposal_hash: ::subxt::ext::sp_core::H256,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "Signals agreement with a particular proposal."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_ and the sender"]
					#[doc = "must have funds to cover the deposit, equal to the original deposit."]
					#[doc = ""]
					#[doc = "- `proposal`: The index of the proposal to second."]
					#[doc = "- `seconds_upper_bound`: an upper bound on the current number of seconds on this"]
					#[doc = "  proposal. Extrinsic is weighted according to this value with no refund."]
					#[doc = ""]
					#[doc = "Weight: `O(S)` where S is the number of seconds a proposal already has."]
					second {
						#[codec(compact)]
						proposal: ::core::primitive::u32,
						#[codec(compact)]
						seconds_upper_bound: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;"]
					#[doc = "otherwise it is a vote to keep the status quo."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `ref_index`: The index of the referendum to vote for."]
					#[doc = "- `vote`: The vote configuration."]
					#[doc = ""]
					#[doc = "Weight: `O(R)` where R is the number of referendums the voter has voted on."]
					vote {
						#[codec(compact)]
						ref_index: ::core::primitive::u32,
						vote: runtime_types::pallet_democracy::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 3)]
					#[doc = "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same"]
					#[doc = "referendum."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be `CancellationOrigin`."]
					#[doc = ""]
					#[doc = "-`ref_index`: The index of the referendum to cancel."]
					#[doc = ""]
					#[doc = "Weight: `O(1)`."]
					emergency_cancel { ref_index: ::core::primitive::u32 },
					#[codec(index = 4)]
					#[doc = "Schedule a referendum to be tabled once it is legal to schedule an external"]
					#[doc = "referendum."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be `ExternalOrigin`."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
					#[doc = ""]
					#[doc = "Weight: `O(V)` with V number of vetoers in the blacklist of proposal."]
					#[doc = "  Decoding vec of length V. Charged as maximum"]
					external_propose { proposal_hash: ::subxt::ext::sp_core::H256 },
					#[codec(index = 5)]
					#[doc = "Schedule a majority-carries referendum to be tabled next once it is legal to schedule"]
					#[doc = "an external referendum."]
					#[doc = ""]
					#[doc = "The dispatch of this call must be `ExternalMajorityOrigin`."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
					#[doc = ""]
					#[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
					#[doc = "pre-scheduled `external_propose` call."]
					#[doc = ""]
					#[doc = "Weight: `O(1)`"]
					external_propose_majority { proposal_hash: ::subxt::ext::sp_core::H256 },
					#[codec(index = 6)]
					#[doc = "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to"]
					#[doc = "schedule an external referendum."]
					#[doc = ""]
					#[doc = "The dispatch of this call must be `ExternalDefaultOrigin`."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
					#[doc = ""]
					#[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
					#[doc = "pre-scheduled `external_propose` call."]
					#[doc = ""]
					#[doc = "Weight: `O(1)`"]
					external_propose_default { proposal_hash: ::subxt::ext::sp_core::H256 },
					#[codec(index = 7)]
					#[doc = "Schedule the currently externally-proposed majority-carries referendum to be tabled"]
					#[doc = "immediately. If there is no externally-proposed referendum currently, or if there is one"]
					#[doc = "but it is not a majority-carries referendum then it fails."]
					#[doc = ""]
					#[doc = "The dispatch of this call must be `FastTrackOrigin`."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The hash of the current external proposal."]
					#[doc = "- `voting_period`: The period that is allowed for voting on this proposal."]
					#[doc = "\tMust be always greater than zero."]
					#[doc = "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`."]
					#[doc = "- `delay`: The number of block after voting has ended in approval and this should be"]
					#[doc = "  enacted. This doesn't have a minimum amount."]
					#[doc = ""]
					#[doc = "Emits `Started`."]
					#[doc = ""]
					#[doc = "Weight: `O(1)`"]
					fast_track {
						proposal_hash: ::subxt::ext::sp_core::H256,
						voting_period: ::core::primitive::u32,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					#[doc = "Veto and blacklist the external proposal hash."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be `VetoOrigin`."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist."]
					#[doc = ""]
					#[doc = "Emits `Vetoed`."]
					#[doc = ""]
					#[doc = "Weight: `O(V + log(V))` where V is number of `existing vetoers`"]
					veto_external { proposal_hash: ::subxt::ext::sp_core::H256 },
					#[codec(index = 9)]
					#[doc = "Remove a referendum."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Root_."]
					#[doc = ""]
					#[doc = "- `ref_index`: The index of the referendum to cancel."]
					#[doc = ""]
					#[doc = "# Weight: `O(1)`."]
					cancel_referendum {
						#[codec(compact)]
						ref_index: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					#[doc = "Cancel a proposal queued for enactment."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Root_."]
					#[doc = ""]
					#[doc = "- `which`: The index of the referendum to cancel."]
					#[doc = ""]
					#[doc = "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."]
					cancel_queued { which: ::core::primitive::u32 },
					#[codec(index = 11)]
					#[doc = "Delegate the voting power (with some given conviction) of the sending account."]
					#[doc = ""]
					#[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
					#[doc = "time appropriate for the conviction's lock period."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
					#[doc = "  - be delegating already; or"]
					#[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
					#[doc = "    through `reap_vote` or `unvote`)."]
					#[doc = ""]
					#[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
					#[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
					#[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
					#[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
					#[doc = "  be more than the account's current balance."]
					#[doc = ""]
					#[doc = "Emits `Delegated`."]
					#[doc = ""]
					#[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
					#[doc = "  voted on. Weight is charged as if maximum votes."]
					delegate {
						to: ::subxt::ext::sp_core::crypto::AccountId32,
						conviction: runtime_types::pallet_democracy::conviction::Conviction,
						balance: ::core::primitive::u128,
					},
					#[codec(index = 12)]
					#[doc = "Undelegate the voting power of the sending account."]
					#[doc = ""]
					#[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
					#[doc = "of the conviction with which the delegation was issued."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
					#[doc = "currently delegating."]
					#[doc = ""]
					#[doc = "Emits `Undelegated`."]
					#[doc = ""]
					#[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
					#[doc = "  voted on. Weight is charged as if maximum votes."]
					undelegate,
					#[codec(index = 13)]
					#[doc = "Clears all public proposals."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Root_."]
					#[doc = ""]
					#[doc = "Weight: `O(1)`."]
					clear_public_proposals,
					#[codec(index = 14)]
					#[doc = "Register the preimage for an upcoming proposal. This doesn't require the proposal to be"]
					#[doc = "in the dispatch queue but does require a deposit, returned once enacted."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `encoded_proposal`: The preimage of a proposal."]
					#[doc = ""]
					#[doc = "Emits `PreimageNoted`."]
					#[doc = ""]
					#[doc = "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."]
					note_preimage { encoded_proposal: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 15)]
					#[doc = "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."]
					note_preimage_operational {
						encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 16)]
					#[doc = "Register the preimage for an upcoming proposal. This requires the proposal to be"]
					#[doc = "in the dispatch queue. No deposit is needed. When this call is successful, i.e."]
					#[doc = "the preimage has not been uploaded before and matches some imminent proposal,"]
					#[doc = "no fee is paid."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `encoded_proposal`: The preimage of a proposal."]
					#[doc = ""]
					#[doc = "Emits `PreimageNoted`."]
					#[doc = ""]
					#[doc = "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."]
					note_imminent_preimage {
						encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 17)]
					#[doc = "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."]
					note_imminent_preimage_operational {
						encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 18)]
					#[doc = "Remove an expired proposal preimage and collect the deposit."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The preimage hash of a proposal."]
					#[doc = "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is"]
					#[doc = "  weighted according to this value with no refund."]
					#[doc = ""]
					#[doc = "This will only work after `VotingPeriod` blocks from the time that the preimage was"]
					#[doc = "noted, if it's the same account doing it. If it's a different account, then it'll only"]
					#[doc = "work an additional `EnactmentPeriod` later."]
					#[doc = ""]
					#[doc = "Emits `PreimageReaped`."]
					#[doc = ""]
					#[doc = "Weight: `O(D)` where D is length of proposal."]
					reap_preimage {
						proposal_hash: ::subxt::ext::sp_core::H256,
						#[codec(compact)]
						proposal_len_upper_bound: ::core::primitive::u32,
					},
					#[codec(index = 19)]
					#[doc = "Unlock tokens that have an expired lock."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `target`: The account to remove the lock on."]
					#[doc = ""]
					#[doc = "Weight: `O(R)` with R number of vote of target."]
					unlock { target: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 20)]
					#[doc = "Remove a vote for a referendum."]
					#[doc = ""]
					#[doc = "If:"]
					#[doc = "- the referendum was cancelled, or"]
					#[doc = "- the referendum is ongoing, or"]
					#[doc = "- the referendum has ended such that"]
					#[doc = "  - the vote of the account was in opposition to the result; or"]
					#[doc = "  - there was no conviction to the account's vote; or"]
					#[doc = "  - the account made a split vote"]
					#[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
					#[doc = "funds being available."]
					#[doc = ""]
					#[doc = "If, however, the referendum has ended and:"]
					#[doc = "- it finished corresponding to the vote of the account, and"]
					#[doc = "- the account made a standard vote with conviction, and"]
					#[doc = "- the lock period of the conviction is not over"]
					#[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
					#[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
					#[doc = "of both the amount locked and the time is it locked for)."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
					#[doc = "registered for referendum `index`."]
					#[doc = ""]
					#[doc = "- `index`: The index of referendum of the vote to be removed."]
					#[doc = ""]
					#[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
					#[doc = "  Weight is calculated for the maximum number of vote."]
					remove_vote { index: ::core::primitive::u32 },
					#[codec(index = 21)]
					#[doc = "Remove a vote for a referendum."]
					#[doc = ""]
					#[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
					#[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
					#[doc = "either because the referendum was cancelled, because the voter lost the referendum or"]
					#[doc = "because the conviction period is over."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `target`: The account of the vote to be removed; this account must have voted for"]
					#[doc = "  referendum `index`."]
					#[doc = "- `index`: The index of referendum of the vote to be removed."]
					#[doc = ""]
					#[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
					#[doc = "  Weight is calculated for the maximum number of vote."]
					remove_other_vote {
						target: ::subxt::ext::sp_core::crypto::AccountId32,
						index: ::core::primitive::u32,
					},
					#[codec(index = 22)]
					#[doc = "Enact a proposal from a referendum. For now we just make the weight be the maximum."]
					enact_proposal {
						proposal_hash: ::subxt::ext::sp_core::H256,
						index: ::core::primitive::u32,
					},
					#[codec(index = 23)]
					#[doc = "Permanently place a proposal into the blacklist. This prevents it from ever being"]
					#[doc = "proposed again."]
					#[doc = ""]
					#[doc = "If called on a queued public or external proposal, then this will result in it being"]
					#[doc = "removed. If the `ref_index` supplied is an active referendum with the proposal hash,"]
					#[doc = "then it will be cancelled."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be `BlacklistOrigin`."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The proposal hash to blacklist permanently."]
					#[doc = "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be"]
					#[doc = "cancelled."]
					#[doc = ""]
					#[doc = "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a"]
					#[doc = "  reasonable value)."]
					blacklist {
						proposal_hash: ::subxt::ext::sp_core::H256,
						maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 24)]
					#[doc = "Remove a proposal."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be `CancelProposalOrigin`."]
					#[doc = ""]
					#[doc = "- `prop_index`: The index of the proposal to cancel."]
					#[doc = ""]
					#[doc = "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"]
					cancel_proposal {
						#[codec(compact)]
						prop_index: ::core::primitive::u32,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Value too low"]
					ValueLow,
					#[codec(index = 1)]
					#[doc = "Proposal does not exist"]
					ProposalMissing,
					#[codec(index = 2)]
					#[doc = "Cannot cancel the same proposal twice"]
					AlreadyCanceled,
					#[codec(index = 3)]
					#[doc = "Proposal already made"]
					DuplicateProposal,
					#[codec(index = 4)]
					#[doc = "Proposal still blacklisted"]
					ProposalBlacklisted,
					#[codec(index = 5)]
					#[doc = "Next external proposal not simple majority"]
					NotSimpleMajority,
					#[codec(index = 6)]
					#[doc = "Invalid hash"]
					InvalidHash,
					#[codec(index = 7)]
					#[doc = "No external proposal"]
					NoProposal,
					#[codec(index = 8)]
					#[doc = "Identity may not veto a proposal twice"]
					AlreadyVetoed,
					#[codec(index = 9)]
					#[doc = "Preimage already noted"]
					DuplicatePreimage,
					#[codec(index = 10)]
					#[doc = "Not imminent"]
					NotImminent,
					#[codec(index = 11)]
					#[doc = "Too early"]
					TooEarly,
					#[codec(index = 12)]
					#[doc = "Imminent"]
					Imminent,
					#[codec(index = 13)]
					#[doc = "Preimage not found"]
					PreimageMissing,
					#[codec(index = 14)]
					#[doc = "Vote given for invalid referendum"]
					ReferendumInvalid,
					#[codec(index = 15)]
					#[doc = "Invalid preimage"]
					PreimageInvalid,
					#[codec(index = 16)]
					#[doc = "No proposals waiting"]
					NoneWaiting,
					#[codec(index = 17)]
					#[doc = "The given account did not vote on the referendum."]
					NotVoter,
					#[codec(index = 18)]
					#[doc = "The actor has no permission to conduct the action."]
					NoPermission,
					#[codec(index = 19)]
					#[doc = "The account is already delegating."]
					AlreadyDelegating,
					#[codec(index = 20)]
					#[doc = "Too high a balance was provided that the account cannot afford."]
					InsufficientFunds,
					#[codec(index = 21)]
					#[doc = "The account is not currently delegating."]
					NotDelegating,
					#[codec(index = 22)]
					#[doc = "The account currently has votes attached to it and the operation cannot succeed until"]
					#[doc = "these are removed, either through `unvote` or `reap_vote`."]
					VotesExist,
					#[codec(index = 23)]
					#[doc = "The instant referendum origin is currently disallowed."]
					InstantNotAllowed,
					#[codec(index = 24)]
					#[doc = "Delegation to oneself makes no sense."]
					Nonsense,
					#[codec(index = 25)]
					#[doc = "Invalid upper bound."]
					WrongUpperBound,
					#[codec(index = 26)]
					#[doc = "Maximum number of votes reached."]
					MaxVotesReached,
					#[codec(index = 27)]
					#[doc = "Maximum number of proposals reached."]
					TooManyProposals,
					#[codec(index = 28)]
					#[doc = "Voting period too low"]
					VotingPeriodLow,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A motion has been proposed by a public account."]
					Proposed {
						proposal_index: ::core::primitive::u32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "A public proposal has been tabled for referendum vote."]
					Tabled {
						proposal_index: ::core::primitive::u32,
						deposit: ::core::primitive::u128,
						depositors: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					},
					#[codec(index = 2)]
					#[doc = "An external proposal has been tabled."]
					ExternalTabled,
					#[codec(index = 3)]
					#[doc = "A referendum has begun."]
					Started {
						ref_index: ::core::primitive::u32,
						threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
					},
					#[codec(index = 4)]
					#[doc = "A proposal has been approved by referendum."]
					Passed { ref_index: ::core::primitive::u32 },
					#[codec(index = 5)]
					#[doc = "A proposal has been rejected by referendum."]
					NotPassed { ref_index: ::core::primitive::u32 },
					#[codec(index = 6)]
					#[doc = "A referendum has been cancelled."]
					Cancelled { ref_index: ::core::primitive::u32 },
					#[codec(index = 7)]
					#[doc = "A proposal has been enacted."]
					Executed {
						ref_index: ::core::primitive::u32,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 8)]
					#[doc = "An account has delegated their vote to another account."]
					Delegated {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						target: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 9)]
					#[doc = "An account has cancelled a previous delegation operation."]
					Undelegated { account: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 10)]
					#[doc = "An external proposal has been vetoed."]
					Vetoed {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						proposal_hash: ::subxt::ext::sp_core::H256,
						until: ::core::primitive::u32,
					},
					#[codec(index = 11)]
					#[doc = "A proposal's preimage was noted, and the deposit taken."]
					PreimageNoted {
						proposal_hash: ::subxt::ext::sp_core::H256,
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 12)]
					#[doc = "A proposal preimage was removed and used (the deposit was returned)."]
					PreimageUsed {
						proposal_hash: ::subxt::ext::sp_core::H256,
						provider: ::subxt::ext::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 13)]
					#[doc = "A proposal could not be executed because its preimage was invalid."]
					PreimageInvalid {
						proposal_hash: ::subxt::ext::sp_core::H256,
						ref_index: ::core::primitive::u32,
					},
					#[codec(index = 14)]
					#[doc = "A proposal could not be executed because its preimage was missing."]
					PreimageMissing {
						proposal_hash: ::subxt::ext::sp_core::H256,
						ref_index: ::core::primitive::u32,
					},
					#[codec(index = 15)]
					#[doc = "A registered preimage was removed and the deposit collected by the reaper."]
					PreimageReaped {
						proposal_hash: ::subxt::ext::sp_core::H256,
						provider: ::subxt::ext::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
						reaper: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 16)]
					#[doc = "A proposal_hash has been blacklisted permanently."]
					Blacklisted { proposal_hash: ::subxt::ext::sp_core::H256 },
					#[codec(index = 17)]
					#[doc = "An account has voted in a referendum"]
					Voted {
						voter: ::subxt::ext::sp_core::crypto::AccountId32,
						ref_index: ::core::primitive::u32,
						vote: runtime_types::pallet_democracy::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 18)]
					#[doc = "An account has secconded a proposal"]
					Seconded {
						seconder: ::subxt::ext::sp_core::crypto::AccountId32,
						prop_index: ::core::primitive::u32,
					},
					#[codec(index = 19)]
					#[doc = "A proposal got canceled."]
					ProposalCanceled { prop_index: ::core::primitive::u32 },
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct Delegations<_0> {
					pub votes: _0,
					pub capital: _0,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum ReferendumInfo<_0, _1, _2> {
					#[codec(index = 0)]
					Ongoing(runtime_types::pallet_democracy::types::ReferendumStatus<_0, _1, _2>),
					#[codec(index = 1)]
					Finished { approved: ::core::primitive::bool, end: _0 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct ReferendumStatus<_0, _1, _2> {
					pub end: _0,
					pub proposal_hash: _1,
					pub threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
					pub delay: _0,
					pub tally: runtime_types::pallet_democracy::types::Tally<_2>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct Tally<_0> {
					pub ayes: _0,
					pub nays: _0,
					pub turnout: _0,
				}
			}
			pub mod vote {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum AccountVote<_0> {
					#[codec(index = 0)]
					Standard { vote: runtime_types::pallet_democracy::vote::Vote, balance: _0 },
					#[codec(index = 1)]
					Split { aye: _0, nay: _0 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct PriorLock<_0, _1>(pub _0, pub _1);
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					Debug,
				)]
				pub struct Vote(pub ::core::primitive::u8);
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum Voting<_0, _1, _2> {
					#[codec(index = 0)]
					Direct {
						votes: ::std::vec::Vec<(
							_2,
							runtime_types::pallet_democracy::vote::AccountVote<_0>,
						)>,
						delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
						prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
					},
					#[codec(index = 1)]
					Delegating {
						balance: _0,
						target: _1,
						conviction: runtime_types::pallet_democracy::conviction::Conviction,
						delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
						prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
					},
				}
			}
			pub mod vote_threshold {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum VoteThreshold {
					#[codec(index = 0)]
					SuperMajorityApprove,
					#[codec(index = 1)]
					SuperMajorityAgainst,
					#[codec(index = 2)]
					SimpleMajority,
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum PreimageStatus<_0, _1, _2> {
				#[codec(index = 0)]
				Missing(_2),
				#[codec(index = 1)]
				Available {
					data: ::std::vec::Vec<::core::primitive::u8>,
					provider: _0,
					deposit: _1,
					since: _2,
					expiry: ::core::option::Option<_2>,
				},
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum Releases {
				#[codec(index = 0)]
				V1,
			}
		}
		pub mod pallet_election_provider_multi_phase {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					# [codec (index = 0)] # [doc = "Submit a solution for the unsigned phase."] # [doc = ""] # [doc = "The dispatch origin fo this call must be __none__."] # [doc = ""] # [doc = "This submission is checked on the fly. Moreover, this unsigned solution is only"] # [doc = "validated when submitted to the pool from the **local** node. Effectively, this means"] # [doc = "that only active validators can submit this transaction when authoring a block (similar"] # [doc = "to an inherent)."] # [doc = ""] # [doc = "To prevent any incorrect solution (and thus wasted time/weight), this transaction will"] # [doc = "panic if the solution submitted by the validator is invalid in any way, effectively"] # [doc = "putting their authoring reward at risk."] # [doc = ""] # [doc = "No deposit or reward is associated with this submission."] submit_unsigned { raw_solution : :: std :: boxed :: Box < runtime_types :: pallet_election_provider_multi_phase :: RawSolution < runtime_types :: kusama_runtime :: NposCompactSolution24 > > , witness : runtime_types :: pallet_election_provider_multi_phase :: SolutionOrSnapshotSize , } , # [codec (index = 1)] # [doc = "Set a new value for `MinimumUntrustedScore`."] # [doc = ""] # [doc = "Dispatch origin must be aligned with `T::ForceOrigin`."] # [doc = ""] # [doc = "This check can be turned off by setting the value to `None`."] set_minimum_untrusted_score { maybe_next_score : :: core :: option :: Option < runtime_types :: sp_npos_elections :: ElectionScore > , } , # [codec (index = 2)] # [doc = "Set a solution in the queue, to be handed out to the client of this pallet in the next"] # [doc = "call to `ElectionProvider::elect`."] # [doc = ""] # [doc = "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`."] # [doc = ""] # [doc = "The solution is not checked for any feasibility and is assumed to be trustworthy, as any"] # [doc = "feasibility check itself can in principle cause the election process to fail (due to"] # [doc = "memory/weight constrains)."] set_emergency_election_result { supports : :: std :: vec :: Vec < (:: subxt :: ext :: sp_core :: crypto :: AccountId32 , runtime_types :: sp_npos_elections :: Support < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) > , } , # [codec (index = 3)] # [doc = "Submit a solution for the signed phase."] # [doc = ""] # [doc = "The dispatch origin fo this call must be __signed__."] # [doc = ""] # [doc = "The solution is potentially queued, based on the claimed score and processed at the end"] # [doc = "of the signed phase."] # [doc = ""] # [doc = "A deposit is reserved and recorded for the solution. Based on the outcome, the solution"] # [doc = "might be rewarded, slashed, or get all or a part of the deposit back."] submit { raw_solution : :: std :: boxed :: Box < runtime_types :: pallet_election_provider_multi_phase :: RawSolution < runtime_types :: kusama_runtime :: NposCompactSolution24 > > , } , # [codec (index = 4)] # [doc = "Trigger the governance fallback."] # [doc = ""] # [doc = "This can only be called when [`Phase::Emergency`] is enabled, as an alternative to"] # [doc = "calling [`Call::set_emergency_election_result`]."] governance_fallback { maybe_max_voters : :: core :: option :: Option < :: core :: primitive :: u32 > , maybe_max_targets : :: core :: option :: Option < :: core :: primitive :: u32 > , } , }
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Error of the pallet that can be returned in response to dispatches."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Submission was too early."]
					PreDispatchEarlySubmission,
					#[codec(index = 1)]
					#[doc = "Wrong number of winners presented."]
					PreDispatchWrongWinnerCount,
					#[codec(index = 2)]
					#[doc = "Submission was too weak, score-wise."]
					PreDispatchWeakSubmission,
					#[codec(index = 3)]
					#[doc = "The queue was full, and the solution was not better than any of the existing ones."]
					SignedQueueFull,
					#[codec(index = 4)]
					#[doc = "The origin failed to pay the deposit."]
					SignedCannotPayDeposit,
					#[codec(index = 5)]
					#[doc = "Witness data to dispatchable is invalid."]
					SignedInvalidWitness,
					#[codec(index = 6)]
					#[doc = "The signed submission consumes too much weight"]
					SignedTooMuchWeight,
					#[codec(index = 7)]
					#[doc = "OCW submitted solution for wrong round"]
					OcwCallWrongEra,
					#[codec(index = 8)]
					#[doc = "Snapshot metadata should exist but didn't."]
					MissingSnapshotMetadata,
					#[codec(index = 9)]
					#[doc = "`Self::insert_submission` returned an invalid index."]
					InvalidSubmissionIndex,
					#[codec(index = 10)]
					#[doc = "The call is not allowed at this point."]
					CallNotAllowed,
					#[codec(index = 11)]
					#[doc = "The fallback failed"]
					FallbackFailed,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A solution was stored with the given compute."]
					#[doc = ""]
					#[doc = "If the solution is signed, this means that it hasn't yet been processed. If the"]
					#[doc = "solution is unsigned, this means that it has also been processed."]
					#[doc = ""]
					#[doc = "The `bool` is `true` when a previous solution was ejected to make room for this one."]
					SolutionStored {
						election_compute:
							runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
						prev_ejected: ::core::primitive::bool,
					},
					#[codec(index = 1)]
					#[doc = "The election has been finalized, with `Some` of the given computation, or else if the"]
					#[doc = "election failed, `None`."]
					ElectionFinalized {
						election_compute: ::core::option::Option<
							runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
						>,
					},
					#[codec(index = 2)]
					#[doc = "An account has been rewarded for their signed submission being finalized."]
					Rewarded {
						account: ::subxt::ext::sp_core::crypto::AccountId32,
						value: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "An account has been slashed for submitting an invalid signed submission."]
					Slashed {
						account: ::subxt::ext::sp_core::crypto::AccountId32,
						value: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "The signed phase of the given round has started."]
					SignedPhaseStarted { round: ::core::primitive::u32 },
					#[codec(index = 5)]
					#[doc = "The unsigned phase of the given round has started."]
					UnsignedPhaseStarted { round: ::core::primitive::u32 },
				}
			}
			pub mod signed {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct SignedSubmission<_0, _1, _2> {
					pub who: _0,
					pub deposit: _1,
					pub raw_solution:
						runtime_types::pallet_election_provider_multi_phase::RawSolution<_2>,
					pub call_fee: _1,
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum ElectionCompute {
				#[codec(index = 0)]
				OnChain,
				#[codec(index = 1)]
				Signed,
				#[codec(index = 2)]
				Unsigned,
				#[codec(index = 3)]
				Fallback,
				#[codec(index = 4)]
				Emergency,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum Phase<_0> {
				#[codec(index = 0)]
				Off,
				#[codec(index = 1)]
				Signed,
				#[codec(index = 2)]
				Unsigned((::core::primitive::bool, _0)),
				#[codec(index = 3)]
				Emergency,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RawSolution<_0> {
				pub solution: _0,
				pub score: runtime_types::sp_npos_elections::ElectionScore,
				pub round: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ReadySolution<_0> {
				pub supports: ::std::vec::Vec<(_0, runtime_types::sp_npos_elections::Support<_0>)>,
				pub score: runtime_types::sp_npos_elections::ElectionScore,
				pub compute: runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RoundSnapshot {
				pub voters: ::std::vec::Vec<(
					::subxt::ext::sp_core::crypto::AccountId32,
					::core::primitive::u64,
					runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
						::subxt::ext::sp_core::crypto::AccountId32,
					>,
				)>,
				pub targets: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SolutionOrSnapshotSize {
				#[codec(compact)]
				pub voters: ::core::primitive::u32,
				#[codec(compact)]
				pub targets: ::core::primitive::u32,
			}
		}
		pub mod pallet_elections_phragmen {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Vote for a set of candidates for the upcoming round of election. This can be called to"]
					#[doc = "set the initial votes, or update already existing votes."]
					#[doc = ""]
					#[doc = "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is"]
					#[doc = "reserved. The deposit is based on the number of votes and can be updated over time."]
					#[doc = ""]
					#[doc = "The `votes` should:"]
					#[doc = "  - not be empty."]
					#[doc = "  - be less than the number of possible candidates. Note that all current members and"]
					#[doc = "    runners-up are also automatically candidates for the next round."]
					#[doc = ""]
					#[doc = "If `value` is more than `who`'s free balance, then the maximum of the two is used."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be signed."]
					#[doc = ""]
					#[doc = "### Warning"]
					#[doc = ""]
					#[doc = "It is the responsibility of the caller to **NOT** place all of their balance into the"]
					#[doc = "lock and keep some for further operations."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less."]
					#[doc = "# </weight>"]
					vote {
						votes: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "Remove `origin` as a voter."]
					#[doc = ""]
					#[doc = "This removes the lock and returns the deposit."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be signed and be a voter."]
					remove_voter,
					#[codec(index = 2)]
					#[doc = "Submit oneself for candidacy. A fixed amount of deposit is recorded."]
					#[doc = ""]
					#[doc = "All candidates are wiped at the end of the term. They either become a member/runner-up,"]
					#[doc = "or leave the system while their deposit is slashed."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be signed."]
					#[doc = ""]
					#[doc = "### Warning"]
					#[doc = ""]
					#[doc = "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]"]
					#[doc = "to get their deposit back. Losing the spot in an election will always lead to a slash."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "The number of current candidates must be provided as witness data."]
					#[doc = "# </weight>"]
					submit_candidacy {
						#[codec(compact)]
						candidate_count: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "Renounce one's intention to be a candidate for the next election round. 3 potential"]
					#[doc = "outcomes exist:"]
					#[doc = ""]
					#[doc = "- `origin` is a candidate and not elected in any set. In this case, the deposit is"]
					#[doc = "  unreserved, returned and origin is removed as a candidate."]
					#[doc = "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and"]
					#[doc = "  origin is removed as a runner-up."]
					#[doc = "- `origin` is a current member. In this case, the deposit is unreserved and origin is"]
					#[doc = "  removed as a member, consequently not being a candidate for the next round anymore."]
					#[doc = "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they"]
					#[doc = "  are immediately used. If the prime is renouncing, then no prime will exist until the"]
					#[doc = "  next round."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be signed, and have one of the above roles."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "The type of renouncing must be provided as witness data."]
					#[doc = "# </weight>"]
					renounce_candidacy {
						renouncing: runtime_types::pallet_elections_phragmen::Renouncing,
					},
					#[codec(index = 4)]
					#[doc = "Remove a particular member from the set. This is effective immediately and the bond of"]
					#[doc = "the outgoing member is slashed."]
					#[doc = ""]
					#[doc = "If a runner-up is available, then the best runner-up will be removed and replaces the"]
					#[doc = "outgoing member. Otherwise, if `rerun_election` is `true`, a new phragmen election is"]
					#[doc = "started, else, nothing happens."]
					#[doc = ""]
					#[doc = "If `slash_bond` is set to true, the bond of the member being removed is slashed. Else,"]
					#[doc = "it is returned."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be root."]
					#[doc = ""]
					#[doc = "Note that this does not affect the designated block number of the next election."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "If we have a replacement, we use a small weight. Else, since this is a root call and"]
					#[doc = "will go into phragmen, we assume full block for now."]
					#[doc = "# </weight>"]
					remove_member {
						who: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
						slash_bond: ::core::primitive::bool,
						rerun_election: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					#[doc = "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The"]
					#[doc = "deposit of the removed voters are returned."]
					#[doc = ""]
					#[doc = "This is an root function to be used only for cleaning the state."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be root."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "The total number of voters and those that are defunct must be provided as witness data."]
					#[doc = "# </weight>"]
					clean_defunct_voters {
						num_voters: ::core::primitive::u32,
						num_defunct: ::core::primitive::u32,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Cannot vote when no candidates or members exist."]
					UnableToVote,
					#[codec(index = 1)]
					#[doc = "Must vote for at least one candidate."]
					NoVotes,
					#[codec(index = 2)]
					#[doc = "Cannot vote more than candidates."]
					TooManyVotes,
					#[codec(index = 3)]
					#[doc = "Cannot vote more than maximum allowed."]
					MaximumVotesExceeded,
					#[codec(index = 4)]
					#[doc = "Cannot vote with stake less than minimum balance."]
					LowBalance,
					#[codec(index = 5)]
					#[doc = "Voter can not pay voting bond."]
					UnableToPayBond,
					#[codec(index = 6)]
					#[doc = "Must be a voter."]
					MustBeVoter,
					#[codec(index = 7)]
					#[doc = "Duplicated candidate submission."]
					DuplicatedCandidate,
					#[codec(index = 8)]
					#[doc = "Too many candidates have been created."]
					TooManyCandidates,
					#[codec(index = 9)]
					#[doc = "Member cannot re-submit candidacy."]
					MemberSubmit,
					#[codec(index = 10)]
					#[doc = "Runner cannot re-submit candidacy."]
					RunnerUpSubmit,
					#[codec(index = 11)]
					#[doc = "Candidate does not have enough funds."]
					InsufficientCandidateFunds,
					#[codec(index = 12)]
					#[doc = "Not a member."]
					NotMember,
					#[codec(index = 13)]
					#[doc = "The provided count of number of candidates is incorrect."]
					InvalidWitnessData,
					#[codec(index = 14)]
					#[doc = "The provided count of number of votes is incorrect."]
					InvalidVoteCount,
					#[codec(index = 15)]
					#[doc = "The renouncing origin presented a wrong `Renouncing` parameter."]
					InvalidRenouncing,
					#[codec(index = 16)]
					#[doc = "Prediction regarding replacement after member removal is wrong."]
					InvalidReplacement,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A new term with new_members. This indicates that enough candidates existed to run"]
					#[doc = "the election, not that enough have has been elected. The inner value must be examined"]
					#[doc = "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond"]
					#[doc = "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to"]
					#[doc = "begin with."]
					NewTerm {
						new_members: ::std::vec::Vec<(
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						)>,
					},
					#[codec(index = 1)]
					#[doc = "No (or not enough) candidates existed for this round. This is different from"]
					#[doc = "`NewTerm(\\[\\])`. See the description of `NewTerm`."]
					EmptyTerm,
					#[codec(index = 2)]
					#[doc = "Internal error happened while trying to perform election."]
					ElectionError,
					#[codec(index = 3)]
					#[doc = "A member has been removed. This should always be followed by either `NewTerm` or"]
					#[doc = "`EmptyTerm`."]
					MemberKicked { member: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 4)]
					#[doc = "Someone has renounced their candidacy."]
					Renounced { candidate: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 5)]
					#[doc = "A candidate was slashed by amount due to failing to obtain a seat as member or"]
					#[doc = "runner-up."]
					#[doc = ""]
					#[doc = "Note that old members and runners-up are also candidates."]
					CandidateSlashed {
						candidate: ::subxt::ext::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					#[doc = "A seat holder was slashed by amount by being forcefully removed from the set."]
					SeatHolderSlashed {
						seat_holder: ::subxt::ext::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum Renouncing {
				#[codec(index = 0)]
				Member,
				#[codec(index = 1)]
				RunnerUp,
				#[codec(index = 2)]
				Candidate(#[codec(compact)] ::core::primitive::u32),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SeatHolder<_0, _1> {
				pub who: _0,
				pub stake: _1,
				pub deposit: _1,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Voter<_0, _1> {
				pub votes: ::std::vec::Vec<_0>,
				pub stake: _1,
				pub deposit: _1,
			}
		}
		pub mod pallet_gilt {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct ActiveGilt<_0, _1, _2> {
					pub proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
					pub amount: _0,
					pub who: _1,
					pub expiry: _2,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct ActiveGiltsTotal<_0> {
					pub frozen: _0,
					pub proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
					pub index: ::core::primitive::u32,
					pub target: runtime_types::sp_arithmetic::per_things::Perquintill,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Place a bid for a gilt to be issued."]
					#[doc = ""]
					#[doc = "Origin must be Signed, and account must have at least `amount` in free balance."]
					#[doc = ""]
					#[doc = "- `amount`: The amount of the bid; these funds will be reserved. If the bid is"]
					#[doc = "successfully elevated into an issued gilt, then these funds will continue to be"]
					#[doc = "reserved until the gilt expires. Must be at least `MinFreeze`."]
					#[doc = "- `duration`: The number of periods for which the funds will be locked if the gilt is"]
					#[doc = "issued. It will expire only after this period has elapsed after the point of issuance."]
					#[doc = "Must be greater than 1 and no more than `QueueCount`."]
					#[doc = ""]
					#[doc = "Complexities:"]
					#[doc = "- `Queues[duration].len()` (just take max)."]
					place_bid {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						duration: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					#[doc = "Retract a previously placed bid."]
					#[doc = ""]
					#[doc = "Origin must be Signed, and the account should have previously issued a still-active bid"]
					#[doc = "of `amount` for `duration`."]
					#[doc = ""]
					#[doc = "- `amount`: The amount of the previous bid."]
					#[doc = "- `duration`: The duration of the previous bid."]
					retract_bid {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						duration: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Set target proportion of gilt-funds."]
					#[doc = ""]
					#[doc = "Origin must be `AdminOrigin`."]
					#[doc = ""]
					#[doc = "- `target`: The target proportion of effective issued funds that should be under gilts"]
					#[doc = "at any one time."]
					set_target {
						#[codec(compact)]
						target: runtime_types::sp_arithmetic::per_things::Perquintill,
					},
					#[codec(index = 3)]
					#[doc = "Remove an active but expired gilt. Reserved funds under gilt are freed and balance is"]
					#[doc = "adjusted to ensure that the funds grow or shrink to maintain the equivalent proportion"]
					#[doc = "of effective total issued funds."]
					#[doc = ""]
					#[doc = "Origin must be Signed and the account must be the owner of the gilt of the given index."]
					#[doc = ""]
					#[doc = "- `index`: The index of the gilt to be thawed."]
					thaw {
						#[codec(compact)]
						index: ::core::primitive::u32,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The duration of the bid is less than one."]
					DurationTooSmall,
					#[codec(index = 1)]
					#[doc = "The duration is the bid is greater than the number of queues."]
					DurationTooBig,
					#[codec(index = 2)]
					#[doc = "The amount of the bid is less than the minimum allowed."]
					AmountTooSmall,
					#[codec(index = 3)]
					#[doc = "The queue for the bid's duration is full and the amount bid is too low to get in"]
					#[doc = "through replacing an existing bid."]
					BidTooLow,
					#[codec(index = 4)]
					#[doc = "Gilt index is unknown."]
					Unknown,
					#[codec(index = 5)]
					#[doc = "Not the owner of the gilt."]
					NotOwner,
					#[codec(index = 6)]
					#[doc = "Gilt not yet at expiry date."]
					NotExpired,
					#[codec(index = 7)]
					#[doc = "The given bid for retraction is not found."]
					NotFound,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A bid was successfully placed."]
					BidPlaced {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
						duration: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					#[doc = "A bid was successfully removed (before being accepted as a gilt)."]
					BidRetracted {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
						duration: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "A bid was accepted as a gilt. The balance may not be released until expiry."]
					GiltIssued {
						index: ::core::primitive::u32,
						expiry: ::core::primitive::u32,
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "An expired gilt has been thawed."]
					GiltThawed {
						index: ::core::primitive::u32,
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						original_amount: ::core::primitive::u128,
						additional_amount: ::core::primitive::u128,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct GiltBid<_0, _1> {
					pub amount: _0,
					pub who: _1,
				}
			}
		}
		pub mod pallet_grandpa {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Report voter equivocation/misbehavior. This method will verify the"]
					#[doc = "equivocation proof and validate the given key ownership proof"]
					#[doc = "against the extracted offender. If both are valid, the offence"]
					#[doc = "will be reported."]
					report_equivocation {
						equivocation_proof: ::std::boxed::Box<
							runtime_types::sp_finality_grandpa::EquivocationProof<
								::subxt::ext::sp_core::H256,
								::core::primitive::u32,
							>,
						>,
						key_owner_proof: runtime_types::sp_session::MembershipProof,
					},
					#[codec(index = 1)]
					#[doc = "Report voter equivocation/misbehavior. This method will verify the"]
					#[doc = "equivocation proof and validate the given key ownership proof"]
					#[doc = "against the extracted offender. If both are valid, the offence"]
					#[doc = "will be reported."]
					#[doc = ""]
					#[doc = "This extrinsic must be called unsigned and it is expected that only"]
					#[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
					#[doc = "if the block author is defined it will be defined as the equivocation"]
					#[doc = "reporter."]
					report_equivocation_unsigned {
						equivocation_proof: ::std::boxed::Box<
							runtime_types::sp_finality_grandpa::EquivocationProof<
								::subxt::ext::sp_core::H256,
								::core::primitive::u32,
							>,
						>,
						key_owner_proof: runtime_types::sp_session::MembershipProof,
					},
					#[codec(index = 2)]
					#[doc = "Note that the current authority set of the GRANDPA finality gadget has stalled."]
					#[doc = ""]
					#[doc = "This will trigger a forced authority set change at the beginning of the next session, to"]
					#[doc = "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume"]
					#[doc = "that the block signalling the forced change will not be re-orged e.g. 1000 blocks."]
					#[doc = "The block production rate (which may be slowed down because of finality lagging) should"]
					#[doc = "be taken into account when choosing the `delay`. The GRANDPA voters based on the new"]
					#[doc = "authority will start voting on top of `best_finalized_block_number` for new finalized"]
					#[doc = "blocks. `best_finalized_block_number` should be the highest of the latest finalized"]
					#[doc = "block of all validators of the new authority set."]
					#[doc = ""]
					#[doc = "Only callable by root."]
					note_stalled {
						delay: ::core::primitive::u32,
						best_finalized_block_number: ::core::primitive::u32,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Attempt to signal GRANDPA pause when the authority set isn't live"]
					#[doc = "(either paused or already pending pause)."]
					PauseFailed,
					#[codec(index = 1)]
					#[doc = "Attempt to signal GRANDPA resume when the authority set isn't paused"]
					#[doc = "(either live or already pending resume)."]
					ResumeFailed,
					#[codec(index = 2)]
					#[doc = "Attempt to signal GRANDPA change with one already pending."]
					ChangePending,
					#[codec(index = 3)]
					#[doc = "Cannot signal forced change so soon after last."]
					TooSoon,
					#[codec(index = 4)]
					#[doc = "A key ownership proof provided as part of an equivocation report is invalid."]
					InvalidKeyOwnershipProof,
					#[codec(index = 5)]
					#[doc = "An equivocation proof provided as part of an equivocation report is invalid."]
					InvalidEquivocationProof,
					#[codec(index = 6)]
					#[doc = "A given equivocation report is valid but already previously reported."]
					DuplicateOffenceReport,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "New authority set has been applied."]
					NewAuthorities {
						authority_set: ::std::vec::Vec<(
							runtime_types::sp_finality_grandpa::app::Public,
							::core::primitive::u64,
						)>,
					},
					#[codec(index = 1)]
					#[doc = "Current authority set has been paused."]
					Paused,
					#[codec(index = 2)]
					#[doc = "Current authority set has been resumed."]
					Resumed,
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct StoredPendingChange<_0> {
				pub scheduled_at: _0,
				pub delay: _0,
				pub next_authorities:
					runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<(
						runtime_types::sp_finality_grandpa::app::Public,
						::core::primitive::u64,
					)>,
				pub forced: ::core::option::Option<_0>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum StoredState<_0> {
				#[codec(index = 0)]
				Live,
				#[codec(index = 1)]
				PendingPause { scheduled_at: _0, delay: _0 },
				#[codec(index = 2)]
				Paused,
				#[codec(index = 3)]
				PendingResume { scheduled_at: _0, delay: _0 },
			}
		}
		pub mod pallet_identity {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Identity pallet declaration."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Add a registrar to the system."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be `T::RegistrarOrigin`."]
					#[doc = ""]
					#[doc = "- `account`: the account of the registrar."]
					#[doc = ""]
					#[doc = "Emits `RegistrarAdded` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded)."]
					#[doc = "- One storage mutation (codec `O(R)`)."]
					#[doc = "- One event."]
					#[doc = "# </weight>"]
					add_registrar { account: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 1)]
					#[doc = "Set an account's identity information and reserve the appropriate deposit."]
					#[doc = ""]
					#[doc = "If the account already has identity information, the deposit is taken as part payment"]
					#[doc = "for the new deposit."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `info`: The identity information."]
					#[doc = ""]
					#[doc = "Emits `IdentitySet` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(X + X' + R)`"]
					#[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)"]
					#[doc = "  - where `R` judgements-count (registrar-count-bounded)"]
					#[doc = "- One balance reserve operation."]
					#[doc = "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`)."]
					#[doc = "- One event."]
					#[doc = "# </weight>"]
					set_identity {
						info:
							::std::boxed::Box<runtime_types::pallet_identity::types::IdentityInfo>,
					},
					#[codec(index = 2)]
					#[doc = "Set the sub-accounts of the sender."]
					#[doc = ""]
					#[doc = "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned"]
					#[doc = "and an amount `SubAccountDeposit` will be reserved for each item in `subs`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
					#[doc = "identity."]
					#[doc = ""]
					#[doc = "- `subs`: The identity's (new) sub-accounts."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(P + S)`"]
					#[doc = "  - where `P` old-subs-count (hard- and deposit-bounded)."]
					#[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
					#[doc = "- At most one balance operations."]
					#[doc = "- DB:"]
					#[doc = "  - `P + S` storage mutations (codec complexity `O(1)`)"]
					#[doc = "  - One storage read (codec complexity `O(P)`)."]
					#[doc = "  - One storage write (codec complexity `O(S)`)."]
					#[doc = "  - One storage-exists (`IdentityOf::contains_key`)."]
					#[doc = "# </weight>"]
					set_subs {
						subs: ::std::vec::Vec<(
							::subxt::ext::sp_core::crypto::AccountId32,
							runtime_types::pallet_identity::types::Data,
						)>,
					},
					#[codec(index = 3)]
					#[doc = "Clear an account's identity info and all sub-accounts and return all deposits."]
					#[doc = ""]
					#[doc = "Payment: All reserved balances on the account are returned."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
					#[doc = "identity."]
					#[doc = ""]
					#[doc = "Emits `IdentityCleared` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(R + S + X)`"]
					#[doc = "  - where `R` registrar-count (governance-bounded)."]
					#[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
					#[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)."]
					#[doc = "- One balance-unreserve operation."]
					#[doc = "- `2` storage reads and `S + 2` storage deletions."]
					#[doc = "- One event."]
					#[doc = "# </weight>"]
					clear_identity,
					#[codec(index = 4)]
					#[doc = "Request a judgement from a registrar."]
					#[doc = ""]
					#[doc = "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement"]
					#[doc = "given."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
					#[doc = "registered identity."]
					#[doc = ""]
					#[doc = "- `reg_index`: The index of the registrar whose judgement is requested."]
					#[doc = "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:"]
					#[doc = ""]
					#[doc = "```nocompile"]
					#[doc = "Self::registrars().get(reg_index).unwrap().fee"]
					#[doc = "```"]
					#[doc = ""]
					#[doc = "Emits `JudgementRequested` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(R + X)`."]
					#[doc = "- One balance-reserve operation."]
					#[doc = "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`."]
					#[doc = "- One event."]
					#[doc = "# </weight>"]
					request_judgement {
						#[codec(compact)]
						reg_index: ::core::primitive::u32,
						#[codec(compact)]
						max_fee: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					#[doc = "Cancel a previous request."]
					#[doc = ""]
					#[doc = "Payment: A previously reserved deposit is returned on success."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
					#[doc = "registered identity."]
					#[doc = ""]
					#[doc = "- `reg_index`: The index of the registrar whose judgement is no longer requested."]
					#[doc = ""]
					#[doc = "Emits `JudgementUnrequested` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(R + X)`."]
					#[doc = "- One balance-reserve operation."]
					#[doc = "- One storage mutation `O(R + X)`."]
					#[doc = "- One event"]
					#[doc = "# </weight>"]
					cancel_request { reg_index: ::core::primitive::u32 },
					#[codec(index = 6)]
					#[doc = "Set the fee required for a judgement to be requested from a registrar."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
					#[doc = "of the registrar whose index is `index`."]
					#[doc = ""]
					#[doc = "- `index`: the index of the registrar whose fee is to be set."]
					#[doc = "- `fee`: the new fee."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(R)`."]
					#[doc = "- One storage mutation `O(R)`."]
					#[doc = "- Benchmark: 7.315 + R * 0.329 µs (min squares analysis)"]
					#[doc = "# </weight>"]
					set_fee {
						#[codec(compact)]
						index: ::core::primitive::u32,
						#[codec(compact)]
						fee: ::core::primitive::u128,
					},
					#[codec(index = 7)]
					#[doc = "Change the account associated with a registrar."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
					#[doc = "of the registrar whose index is `index`."]
					#[doc = ""]
					#[doc = "- `index`: the index of the registrar whose fee is to be set."]
					#[doc = "- `new`: the new account ID."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(R)`."]
					#[doc = "- One storage mutation `O(R)`."]
					#[doc = "- Benchmark: 8.823 + R * 0.32 µs (min squares analysis)"]
					#[doc = "# </weight>"]
					set_account_id {
						#[codec(compact)]
						index: ::core::primitive::u32,
						new: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 8)]
					#[doc = "Set the field information for a registrar."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
					#[doc = "of the registrar whose index is `index`."]
					#[doc = ""]
					#[doc = "- `index`: the index of the registrar whose fee is to be set."]
					#[doc = "- `fields`: the fields that the registrar concerns themselves with."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(R)`."]
					#[doc = "- One storage mutation `O(R)`."]
					#[doc = "- Benchmark: 7.464 + R * 0.325 µs (min squares analysis)"]
					#[doc = "# </weight>"]
					set_fields {
						#[codec(compact)]
						index: ::core::primitive::u32,
						fields: runtime_types::pallet_identity::types::BitFlags<
							runtime_types::pallet_identity::types::IdentityField,
						>,
					},
					#[codec(index = 9)]
					#[doc = "Provide a judgement for an account's identity."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
					#[doc = "of the registrar whose index is `reg_index`."]
					#[doc = ""]
					#[doc = "- `reg_index`: the index of the registrar whose judgement is being made."]
					#[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
					#[doc = "  with a registered identity."]
					#[doc = "- `judgement`: the judgement of the registrar of index `reg_index` about `target`."]
					#[doc = ""]
					#[doc = "Emits `JudgementGiven` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(R + X)`."]
					#[doc = "- One balance-transfer operation."]
					#[doc = "- Up to one account-lookup operation."]
					#[doc = "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`."]
					#[doc = "- One event."]
					#[doc = "# </weight>"]
					provide_judgement {
						#[codec(compact)]
						reg_index: ::core::primitive::u32,
						target: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
						judgement: runtime_types::pallet_identity::types::Judgement<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 10)]
					#[doc = "Remove an account's identity and sub-account information and slash the deposits."]
					#[doc = ""]
					#[doc = "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by"]
					#[doc = "`Slash`. Verification request deposits are not returned; they should be cancelled"]
					#[doc = "manually using `cancel_request`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must match `T::ForceOrigin`."]
					#[doc = ""]
					#[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
					#[doc = "  with a registered identity."]
					#[doc = ""]
					#[doc = "Emits `IdentityKilled` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(R + S + X)`."]
					#[doc = "- One balance-reserve operation."]
					#[doc = "- `S + 2` storage mutations."]
					#[doc = "- One event."]
					#[doc = "# </weight>"]
					kill_identity {
						target: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
					},
					#[codec(index = 11)]
					#[doc = "Add the given account to the sender's subs."]
					#[doc = ""]
					#[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
					#[doc = "to the sender."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
					#[doc = "sub identity of `sub`."]
					add_sub {
						sub: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
						data: runtime_types::pallet_identity::types::Data,
					},
					#[codec(index = 12)]
					#[doc = "Alter the associated name of the given sub-account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
					#[doc = "sub identity of `sub`."]
					rename_sub {
						sub: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
						data: runtime_types::pallet_identity::types::Data,
					},
					#[codec(index = 13)]
					#[doc = "Remove the given account from the sender's subs."]
					#[doc = ""]
					#[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
					#[doc = "to the sender."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
					#[doc = "sub identity of `sub`."]
					remove_sub {
						sub: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
					},
					#[codec(index = 14)]
					#[doc = "Remove the sender as a sub-account."]
					#[doc = ""]
					#[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
					#[doc = "to the sender (*not* the original depositor)."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
					#[doc = "super-identity."]
					#[doc = ""]
					#[doc = "NOTE: This should not normally be used, but is provided in the case that the non-"]
					#[doc = "controller of an account is maliciously registered as a sub-account."]
					quit_sub,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Too many subs-accounts."]
					TooManySubAccounts,
					#[codec(index = 1)]
					#[doc = "Account isn't found."]
					NotFound,
					#[codec(index = 2)]
					#[doc = "Account isn't named."]
					NotNamed,
					#[codec(index = 3)]
					#[doc = "Empty index."]
					EmptyIndex,
					#[codec(index = 4)]
					#[doc = "Fee is changed."]
					FeeChanged,
					#[codec(index = 5)]
					#[doc = "No identity found."]
					NoIdentity,
					#[codec(index = 6)]
					#[doc = "Sticky judgement."]
					StickyJudgement,
					#[codec(index = 7)]
					#[doc = "Judgement given."]
					JudgementGiven,
					#[codec(index = 8)]
					#[doc = "Invalid judgement."]
					InvalidJudgement,
					#[codec(index = 9)]
					#[doc = "The index is invalid."]
					InvalidIndex,
					#[codec(index = 10)]
					#[doc = "The target is invalid."]
					InvalidTarget,
					#[codec(index = 11)]
					#[doc = "Too many additional fields."]
					TooManyFields,
					#[codec(index = 12)]
					#[doc = "Maximum amount of registrars reached. Cannot add any more."]
					TooManyRegistrars,
					#[codec(index = 13)]
					#[doc = "Account ID is already named."]
					AlreadyClaimed,
					#[codec(index = 14)]
					#[doc = "Sender is not a sub-account."]
					NotSub,
					#[codec(index = 15)]
					#[doc = "Sub-account isn't owned by sender."]
					NotOwned,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A name was set or reset (which will remove all judgements)."]
					IdentitySet { who: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 1)]
					#[doc = "A name was cleared, and the given balance returned."]
					IdentityCleared {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "A name was removed and the given balance slashed."]
					IdentityKilled {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "A judgement was asked from a registrar."]
					JudgementRequested {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						registrar_index: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					#[doc = "A judgement request was retracted."]
					JudgementUnrequested {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						registrar_index: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					#[doc = "A judgement was given by a registrar."]
					JudgementGiven {
						target: ::subxt::ext::sp_core::crypto::AccountId32,
						registrar_index: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					#[doc = "A registrar was added."]
					RegistrarAdded { registrar_index: ::core::primitive::u32 },
					#[codec(index = 7)]
					#[doc = "A sub-identity was added to an identity and the deposit paid."]
					SubIdentityAdded {
						sub: ::subxt::ext::sp_core::crypto::AccountId32,
						main: ::subxt::ext::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					#[doc = "A sub-identity was removed from an identity and the deposit freed."]
					SubIdentityRemoved {
						sub: ::subxt::ext::sp_core::crypto::AccountId32,
						main: ::subxt::ext::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					#[doc = "A sub-identity was cleared, and the given deposit repatriated from the"]
					#[doc = "main identity account to the sub-identity account."]
					SubIdentityRevoked {
						sub: ::subxt::ext::sp_core::crypto::AccountId32,
						main: ::subxt::ext::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					Debug,
				)]
				pub struct BitFlags<_0>(
					pub ::core::primitive::u64,
					#[codec(skip)] pub ::core::marker::PhantomData<_0>,
				);
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum Data {
					#[codec(index = 0)]
					None,
					#[codec(index = 1)]
					Raw0([::core::primitive::u8; 0usize]),
					#[codec(index = 2)]
					Raw1([::core::primitive::u8; 1usize]),
					#[codec(index = 3)]
					Raw2([::core::primitive::u8; 2usize]),
					#[codec(index = 4)]
					Raw3([::core::primitive::u8; 3usize]),
					#[codec(index = 5)]
					Raw4([::core::primitive::u8; 4usize]),
					#[codec(index = 6)]
					Raw5([::core::primitive::u8; 5usize]),
					#[codec(index = 7)]
					Raw6([::core::primitive::u8; 6usize]),
					#[codec(index = 8)]
					Raw7([::core::primitive::u8; 7usize]),
					#[codec(index = 9)]
					Raw8([::core::primitive::u8; 8usize]),
					#[codec(index = 10)]
					Raw9([::core::primitive::u8; 9usize]),
					#[codec(index = 11)]
					Raw10([::core::primitive::u8; 10usize]),
					#[codec(index = 12)]
					Raw11([::core::primitive::u8; 11usize]),
					#[codec(index = 13)]
					Raw12([::core::primitive::u8; 12usize]),
					#[codec(index = 14)]
					Raw13([::core::primitive::u8; 13usize]),
					#[codec(index = 15)]
					Raw14([::core::primitive::u8; 14usize]),
					#[codec(index = 16)]
					Raw15([::core::primitive::u8; 15usize]),
					#[codec(index = 17)]
					Raw16([::core::primitive::u8; 16usize]),
					#[codec(index = 18)]
					Raw17([::core::primitive::u8; 17usize]),
					#[codec(index = 19)]
					Raw18([::core::primitive::u8; 18usize]),
					#[codec(index = 20)]
					Raw19([::core::primitive::u8; 19usize]),
					#[codec(index = 21)]
					Raw20([::core::primitive::u8; 20usize]),
					#[codec(index = 22)]
					Raw21([::core::primitive::u8; 21usize]),
					#[codec(index = 23)]
					Raw22([::core::primitive::u8; 22usize]),
					#[codec(index = 24)]
					Raw23([::core::primitive::u8; 23usize]),
					#[codec(index = 25)]
					Raw24([::core::primitive::u8; 24usize]),
					#[codec(index = 26)]
					Raw25([::core::primitive::u8; 25usize]),
					#[codec(index = 27)]
					Raw26([::core::primitive::u8; 26usize]),
					#[codec(index = 28)]
					Raw27([::core::primitive::u8; 27usize]),
					#[codec(index = 29)]
					Raw28([::core::primitive::u8; 28usize]),
					#[codec(index = 30)]
					Raw29([::core::primitive::u8; 29usize]),
					#[codec(index = 31)]
					Raw30([::core::primitive::u8; 30usize]),
					#[codec(index = 32)]
					Raw31([::core::primitive::u8; 31usize]),
					#[codec(index = 33)]
					Raw32([::core::primitive::u8; 32usize]),
					#[codec(index = 34)]
					BlakeTwo256([::core::primitive::u8; 32usize]),
					#[codec(index = 35)]
					Sha256([::core::primitive::u8; 32usize]),
					#[codec(index = 36)]
					Keccak256([::core::primitive::u8; 32usize]),
					#[codec(index = 37)]
					ShaThree256([::core::primitive::u8; 32usize]),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum IdentityField {
					#[codec(index = 1)]
					Display,
					#[codec(index = 2)]
					Legal,
					#[codec(index = 4)]
					Web,
					#[codec(index = 8)]
					Riot,
					#[codec(index = 16)]
					Email,
					#[codec(index = 32)]
					PgpFingerprint,
					#[codec(index = 64)]
					Image,
					#[codec(index = 128)]
					Twitter,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct IdentityInfo {
					pub additional: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<(
						runtime_types::pallet_identity::types::Data,
						runtime_types::pallet_identity::types::Data,
					)>,
					pub display: runtime_types::pallet_identity::types::Data,
					pub legal: runtime_types::pallet_identity::types::Data,
					pub web: runtime_types::pallet_identity::types::Data,
					pub riot: runtime_types::pallet_identity::types::Data,
					pub email: runtime_types::pallet_identity::types::Data,
					pub pgp_fingerprint: ::core::option::Option<[::core::primitive::u8; 20usize]>,
					pub image: runtime_types::pallet_identity::types::Data,
					pub twitter: runtime_types::pallet_identity::types::Data,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum Judgement<_0> {
					#[codec(index = 0)]
					Unknown,
					#[codec(index = 1)]
					FeePaid(_0),
					#[codec(index = 2)]
					Reasonable,
					#[codec(index = 3)]
					KnownGood,
					#[codec(index = 4)]
					OutOfDate,
					#[codec(index = 5)]
					LowQuality,
					#[codec(index = 6)]
					Erroneous,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct RegistrarInfo<_0, _1> {
					pub account: _1,
					pub fee: _0,
					pub fields: runtime_types::pallet_identity::types::BitFlags<
						runtime_types::pallet_identity::types::IdentityField,
					>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct Registration<_0> {
					pub judgements: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<(
						::core::primitive::u32,
						runtime_types::pallet_identity::types::Judgement<_0>,
					)>,
					pub deposit: _0,
					pub info: runtime_types::pallet_identity::types::IdentityInfo,
				}
			}
		}
		pub mod pallet_im_online {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is"]
					#[doc = "  length of `heartbeat.network_state.external_address`"]
					#[doc = "  - `O(K)`: decoding of length `K`"]
					#[doc = "  - `O(E)`: decoding/encoding of length `E`"]
					#[doc = "- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,"]
					#[doc = "  `ReceivedHeartbeats`"]
					#[doc = "- DbWrites: `ReceivedHeartbeats`"]
					#[doc = "# </weight>"]
					heartbeat {
						heartbeat:
							runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
						signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Non existent public key."]
					InvalidKey,
					#[codec(index = 1)]
					#[doc = "Duplicated heartbeat."]
					DuplicatedHeartbeat,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A new heartbeat was received from `AuthorityId`."]
					HeartbeatReceived {
						authority_id: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
					},
					#[codec(index = 1)]
					#[doc = "At the end of the session, no offence was committed."]
					AllGood,
					#[codec(index = 2)]
					#[doc = "At the end of the session, at least one validator was found to be offline."]
					SomeOffline {
						offline: ::std::vec::Vec<(
							::subxt::ext::sp_core::crypto::AccountId32,
							runtime_types::pallet_staking::Exposure<
								::subxt::ext::sp_core::crypto::AccountId32,
								::core::primitive::u128,
							>,
						)>,
					},
				}
			}
			pub mod sr25519 {
				use super::runtime_types;
				pub mod app_sr25519 {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct Public(pub runtime_types::sp_core::sr25519::Public);
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct Signature(pub runtime_types::sp_core::sr25519::Signature);
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct BoundedOpaqueNetworkState {
				pub peer_id: runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<
					::core::primitive::u8,
				>,
				pub external_addresses:
					runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<
						runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<
							::core::primitive::u8,
						>,
					>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Heartbeat<_0> {
				pub block_number: _0,
				pub network_state: runtime_types::sp_core::offchain::OpaqueNetworkState,
				pub session_index: _0,
				pub authority_index: _0,
				pub validators_len: _0,
			}
		}
		pub mod pallet_indices {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Assign an previously unassigned index."]
					#[doc = ""]
					#[doc = "Payment: `Deposit` is reserved from the sender account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `index`: the index to be claimed. This must not be in use."]
					#[doc = ""]
					#[doc = "Emits `IndexAssigned` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(1)`."]
					#[doc = "- One storage mutation (codec `O(1)`)."]
					#[doc = "- One reserve operation."]
					#[doc = "- One event."]
					#[doc = "-------------------"]
					#[doc = "- DB Weight: 1 Read/Write (Accounts)"]
					#[doc = "# </weight>"]
					claim { index: ::core::primitive::u32 },
					#[codec(index = 1)]
					#[doc = "Assign an index already owned by the sender to another account. The balance reservation"]
					#[doc = "is effectively transferred to the new account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `index`: the index to be re-assigned. This must be owned by the sender."]
					#[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
					#[doc = ""]
					#[doc = "Emits `IndexAssigned` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(1)`."]
					#[doc = "- One storage mutation (codec `O(1)`)."]
					#[doc = "- One transfer operation."]
					#[doc = "- One event."]
					#[doc = "-------------------"]
					#[doc = "- DB Weight:"]
					#[doc = "   - Reads: Indices Accounts, System Account (recipient)"]
					#[doc = "   - Writes: Indices Accounts, System Account (recipient)"]
					#[doc = "# </weight>"]
					transfer {
						new: ::subxt::ext::sp_core::crypto::AccountId32,
						index: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Free up an index owned by the sender."]
					#[doc = ""]
					#[doc = "Payment: Any previous deposit placed for the index is unreserved in the sender account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must own the index."]
					#[doc = ""]
					#[doc = "- `index`: the index to be freed. This must be owned by the sender."]
					#[doc = ""]
					#[doc = "Emits `IndexFreed` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(1)`."]
					#[doc = "- One storage mutation (codec `O(1)`)."]
					#[doc = "- One reserve operation."]
					#[doc = "- One event."]
					#[doc = "-------------------"]
					#[doc = "- DB Weight: 1 Read/Write (Accounts)"]
					#[doc = "# </weight>"]
					free { index: ::core::primitive::u32 },
					#[codec(index = 3)]
					#[doc = "Force an index to an account. This doesn't require a deposit. If the index is already"]
					#[doc = "held, then any deposit is reimbursed to its current owner."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Root_."]
					#[doc = ""]
					#[doc = "- `index`: the index to be (re-)assigned."]
					#[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
					#[doc = "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred."]
					#[doc = ""]
					#[doc = "Emits `IndexAssigned` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(1)`."]
					#[doc = "- One storage mutation (codec `O(1)`)."]
					#[doc = "- Up to one reserve operation."]
					#[doc = "- One event."]
					#[doc = "-------------------"]
					#[doc = "- DB Weight:"]
					#[doc = "   - Reads: Indices Accounts, System Account (original owner)"]
					#[doc = "   - Writes: Indices Accounts, System Account (original owner)"]
					#[doc = "# </weight>"]
					force_transfer {
						new: ::subxt::ext::sp_core::crypto::AccountId32,
						index: ::core::primitive::u32,
						freeze: ::core::primitive::bool,
					},
					#[codec(index = 4)]
					#[doc = "Freeze an index so it will always point to the sender account. This consumes the"]
					#[doc = "deposit."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the signing account must have a"]
					#[doc = "non-frozen account `index`."]
					#[doc = ""]
					#[doc = "- `index`: the index to be frozen in place."]
					#[doc = ""]
					#[doc = "Emits `IndexFrozen` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(1)`."]
					#[doc = "- One storage mutation (codec `O(1)`)."]
					#[doc = "- Up to one slash operation."]
					#[doc = "- One event."]
					#[doc = "-------------------"]
					#[doc = "- DB Weight: 1 Read/Write (Accounts)"]
					#[doc = "# </weight>"]
					freeze { index: ::core::primitive::u32 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The index was not already assigned."]
					NotAssigned,
					#[codec(index = 1)]
					#[doc = "The index is assigned to another account."]
					NotOwner,
					#[codec(index = 2)]
					#[doc = "The index was not available."]
					InUse,
					#[codec(index = 3)]
					#[doc = "The source and destination accounts are identical."]
					NotTransfer,
					#[codec(index = 4)]
					#[doc = "The index is permanent and may not be freed/changed."]
					Permanent,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A account index was assigned."]
					IndexAssigned {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						index: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					#[doc = "A account index has been freed up (unassigned)."]
					IndexFreed { index: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "A account index has been frozen to its current account ID."]
					IndexFrozen {
						index: ::core::primitive::u32,
						who: ::subxt::ext::sp_core::crypto::AccountId32,
					},
				}
			}
		}
		pub mod pallet_membership {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Add a member `who` to the set."]
					#[doc = ""]
					#[doc = "May only be called from `T::AddOrigin`."]
					add_member { who: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 1)]
					#[doc = "Remove a member `who` from the set."]
					#[doc = ""]
					#[doc = "May only be called from `T::RemoveOrigin`."]
					remove_member { who: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 2)]
					#[doc = "Swap out one member `remove` for another `add`."]
					#[doc = ""]
					#[doc = "May only be called from `T::SwapOrigin`."]
					#[doc = ""]
					#[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
					swap_member {
						remove: ::subxt::ext::sp_core::crypto::AccountId32,
						add: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 3)]
					#[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
					#[doc = "pass `members` pre-sorted."]
					#[doc = ""]
					#[doc = "May only be called from `T::ResetOrigin`."]
					reset_members {
						members: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					},
					#[codec(index = 4)]
					#[doc = "Swap out the sending member for some other key `new`."]
					#[doc = ""]
					#[doc = "May only be called from `Signed` origin of a current member."]
					#[doc = ""]
					#[doc = "Prime membership is passed from the origin account to `new`, if extant."]
					change_key { new: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 5)]
					#[doc = "Set the prime member. Must be a current member."]
					#[doc = ""]
					#[doc = "May only be called from `T::PrimeOrigin`."]
					set_prime { who: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 6)]
					#[doc = "Remove the prime member if it exists."]
					#[doc = ""]
					#[doc = "May only be called from `T::PrimeOrigin`."]
					clear_prime,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Already a member."]
					AlreadyMember,
					#[codec(index = 1)]
					#[doc = "Not a member."]
					NotMember,
					#[codec(index = 2)]
					#[doc = "Too many members."]
					TooManyMembers,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "The given member was added; see the transaction for who."]
					MemberAdded,
					#[codec(index = 1)]
					#[doc = "The given member was removed; see the transaction for who."]
					MemberRemoved,
					#[codec(index = 2)]
					#[doc = "Two members were swapped; see the transaction for who."]
					MembersSwapped,
					#[codec(index = 3)]
					#[doc = "The membership was reset; see the transaction for who the new set is."]
					MembersReset,
					#[codec(index = 4)]
					#[doc = "One of the members' keys changed."]
					KeyChanged,
					#[codec(index = 5)]
					#[doc = "Phantom member, never used."]
					Dummy,
				}
			}
		}
		pub mod pallet_multisig {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
					#[doc = "multi-signature, but do not participate in the approval process."]
					#[doc = "- `call`: The call to be executed."]
					#[doc = ""]
					#[doc = "Result is equivalent to the dispatched result."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
					#[doc = "-------------------------------"]
					#[doc = "- DB Weight: None"]
					#[doc = "- Plus Call Weight"]
					#[doc = "# </weight>"]
					as_multi_threshold_1 {
						other_signatories:
							::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
						call: ::std::boxed::Box<runtime_types::kusama_runtime::Call>,
					},
					#[codec(index = 1)]
					#[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
					#[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
					#[doc = ""]
					#[doc = "If there are enough, then dispatch the call."]
					#[doc = ""]
					#[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
					#[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
					#[doc = "is cancelled."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
					#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
					#[doc = "dispatch. May not be empty."]
					#[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
					#[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
					#[doc = "transaction index) of the first approval transaction."]
					#[doc = "- `call`: The call to be executed."]
					#[doc = ""]
					#[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
					#[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
					#[doc = ""]
					#[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
					#[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
					#[doc = "may be found in the deposited `MultisigExecuted` event."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(S + Z + Call)`."]
					#[doc = "- Up to one balance-reserve or unreserve operation."]
					#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
					#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
					#[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
					#[doc = "- One encode & hash, both of complexity `O(S)`."]
					#[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
					#[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
					#[doc = "- One event."]
					#[doc = "- The weight of the `call`."]
					#[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
					#[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
					#[doc = "-------------------------------"]
					#[doc = "- DB Weight:"]
					#[doc = "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
					#[doc = "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
					#[doc = "- Plus Call Weight"]
					#[doc = "# </weight>"]
					as_multi {
						threshold: ::core::primitive::u16,
						other_signatories:
							::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
						maybe_timepoint: ::core::option::Option<
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						>,
						call:
							::subxt::utils::WrapperKeepOpaque<runtime_types::kusama_runtime::Call>,
						store_call: ::core::primitive::bool,
						max_weight: ::core::primitive::u64,
					},
					#[codec(index = 2)]
					#[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
					#[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
					#[doc = ""]
					#[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
					#[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
					#[doc = "is cancelled."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
					#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
					#[doc = "dispatch. May not be empty."]
					#[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
					#[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
					#[doc = "transaction index) of the first approval transaction."]
					#[doc = "- `call_hash`: The hash of the call to be executed."]
					#[doc = ""]
					#[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(S)`."]
					#[doc = "- Up to one balance-reserve or unreserve operation."]
					#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
					#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
					#[doc = "- One encode & hash, both of complexity `O(S)`."]
					#[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
					#[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
					#[doc = "- One event."]
					#[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
					#[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
					#[doc = "----------------------------------"]
					#[doc = "- DB Weight:"]
					#[doc = "    - Read: Multisig Storage, [Caller Account]"]
					#[doc = "    - Write: Multisig Storage, [Caller Account]"]
					#[doc = "# </weight>"]
					approve_as_multi {
						threshold: ::core::primitive::u16,
						other_signatories:
							::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
						maybe_timepoint: ::core::option::Option<
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						>,
						call_hash: [::core::primitive::u8; 32usize],
						max_weight: ::core::primitive::u64,
					},
					#[codec(index = 3)]
					#[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
					#[doc = "for this operation will be unreserved on success."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
					#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
					#[doc = "dispatch. May not be empty."]
					#[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
					#[doc = "transaction for this dispatch."]
					#[doc = "- `call_hash`: The hash of the call to be executed."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(S)`."]
					#[doc = "- Up to one balance-reserve or unreserve operation."]
					#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
					#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
					#[doc = "- One encode & hash, both of complexity `O(S)`."]
					#[doc = "- One event."]
					#[doc = "- I/O: 1 read `O(S)`, one remove."]
					#[doc = "- Storage: removes one item."]
					#[doc = "----------------------------------"]
					#[doc = "- DB Weight:"]
					#[doc = "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls"]
					#[doc = "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls"]
					#[doc = "# </weight>"]
					cancel_as_multi {
						threshold: ::core::primitive::u16,
						other_signatories:
							::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						call_hash: [::core::primitive::u8; 32usize],
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Threshold must be 2 or greater."]
					MinimumThreshold,
					#[codec(index = 1)]
					#[doc = "Call is already approved by this signatory."]
					AlreadyApproved,
					#[codec(index = 2)]
					#[doc = "Call doesn't need any (more) approvals."]
					NoApprovalsNeeded,
					#[codec(index = 3)]
					#[doc = "There are too few signatories in the list."]
					TooFewSignatories,
					#[codec(index = 4)]
					#[doc = "There are too many signatories in the list."]
					TooManySignatories,
					#[codec(index = 5)]
					#[doc = "The signatories were provided out of order; they should be ordered."]
					SignatoriesOutOfOrder,
					#[codec(index = 6)]
					#[doc = "The sender was contained in the other signatories; it shouldn't be."]
					SenderInSignatories,
					#[codec(index = 7)]
					#[doc = "Multisig operation not found when attempting to cancel."]
					NotFound,
					#[codec(index = 8)]
					#[doc = "Only the account that originally created the multisig is able to cancel it."]
					NotOwner,
					#[codec(index = 9)]
					#[doc = "No timepoint was given, yet the multisig operation is already underway."]
					NoTimepoint,
					#[codec(index = 10)]
					#[doc = "A different timepoint was given to the multisig operation that is underway."]
					WrongTimepoint,
					#[codec(index = 11)]
					#[doc = "A timepoint was given, yet no multisig operation is underway."]
					UnexpectedTimepoint,
					#[codec(index = 12)]
					#[doc = "The maximum weight information provided was too low."]
					MaxWeightTooLow,
					#[codec(index = 13)]
					#[doc = "The data to be stored is already stored."]
					AlreadyStored,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A new multisig operation has begun."]
					NewMultisig {
						approving: ::subxt::ext::sp_core::crypto::AccountId32,
						multisig: ::subxt::ext::sp_core::crypto::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 1)]
					#[doc = "A multisig operation has been approved by someone."]
					MultisigApproval {
						approving: ::subxt::ext::sp_core::crypto::AccountId32,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::subxt::ext::sp_core::crypto::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 2)]
					#[doc = "A multisig operation has been executed."]
					MultisigExecuted {
						approving: ::subxt::ext::sp_core::crypto::AccountId32,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::subxt::ext::sp_core::crypto::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 3)]
					#[doc = "A multisig operation has been cancelled."]
					MultisigCancelled {
						cancelling: ::subxt::ext::sp_core::crypto::AccountId32,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::subxt::ext::sp_core::crypto::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Multisig<_0, _1, _2> {
				pub when: runtime_types::pallet_multisig::Timepoint<_0>,
				pub deposit: _1,
				pub depositor: _2,
				pub approvals: ::std::vec::Vec<_2>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Timepoint<_0> {
				pub height: _0,
				pub index: _0,
			}
		}
		pub mod pallet_nomination_pools {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Stake funds with a pool. The amount to bond is transferred from the member to the"]
					#[doc = "pools account and immediately increases the pools bond."]
					#[doc = ""]
					#[doc = "# Note"]
					#[doc = ""]
					#[doc = "* An account can only be a member of a single pool."]
					#[doc = "* An account cannot join the same pool multiple times."]
					#[doc = "* This call will *not* dust the member account, so the member must have at least"]
					#[doc = "  `existential deposit + amount` in their account."]
					#[doc = "* Only a pool with [`PoolState::Open`] can be joined"]
					join {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						pool_id: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					#[doc = "Bond `extra` more funds from `origin` into the pool to which they already belong."]
					#[doc = ""]
					#[doc = "Additional funds can come from either the free balance of the account, of from the"]
					#[doc = "accumulated rewards, see [`BondExtra`]."]
					#[doc = ""]
					#[doc = "Bonding extra funds implies an automatic payout of all pending rewards as well."]
					bond_extra {
						extra: runtime_types::pallet_nomination_pools::BondExtra<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 2)]
					#[doc = "A bonded member can use this to claim their payout based on the rewards that the pool"]
					#[doc = "has accumulated since their last claimed payout (OR since joining if this is there first"]
					#[doc = "time claiming rewards). The payout will be transferred to the member's account."]
					#[doc = ""]
					#[doc = "The member will earn rewards pro rata based on the members stake vs the sum of the"]
					#[doc = "members in the pools stake. Rewards do not \"expire\"."]
					claim_payout,
					#[codec(index = 3)]
					#[doc = "Unbond up to `unbonding_points` of the `member_account`'s funds from the pool. It"]
					#[doc = "implicitly collects the rewards one last time, since not doing so would mean some"]
					#[doc = "rewards would be forfeited."]
					#[doc = ""]
					#[doc = "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any"]
					#[doc = "account)."]
					#[doc = ""]
					#[doc = "# Conditions for a permissionless dispatch."]
					#[doc = ""]
					#[doc = "* The pool is blocked and the caller is either the root or state-toggler. This is"]
					#[doc = "  refereed to as a kick."]
					#[doc = "* The pool is destroying and the member is not the depositor."]
					#[doc = "* The pool is destroying, the member is the depositor and no other members are in the"]
					#[doc = "  pool."]
					#[doc = ""]
					#[doc = "## Conditions for permissioned dispatch (i.e. the caller is also the"]
					#[doc = "`member_account`):"]
					#[doc = ""]
					#[doc = "* The caller is not the depositor."]
					#[doc = "* The caller is the depositor, the pool is destroying and no other members are in the"]
					#[doc = "  pool."]
					#[doc = ""]
					#[doc = "# Note"]
					#[doc = ""]
					#[doc = "If there are too many unlocking chunks to unbond with the pool account,"]
					#[doc = "[`Call::pool_withdraw_unbonded`] can be called to try and minimize unlocking chunks. If"]
					#[doc = "there are too many unlocking chunks, the result of this call will likely be the"]
					#[doc = "`NoMoreChunks` error from the staking system."]
					unbond {
						member_account: ::subxt::ext::sp_core::crypto::AccountId32,
						#[codec(compact)]
						unbonding_points: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Call `withdraw_unbonded` for the pools account. This call can be made by any account."]
					#[doc = ""]
					#[doc = "This is useful if their are too many unlocking chunks to call `unbond`, and some"]
					#[doc = "can be cleared by withdrawing. In the case there are too many unlocking chunks, the user"]
					#[doc = "would probably see an error like `NoMoreChunks` emitted from the staking system when"]
					#[doc = "they attempt to unbond."]
					pool_withdraw_unbonded {
						pool_id: ::core::primitive::u32,
						num_slashing_spans: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					#[doc = "Withdraw unbonded funds from `member_account`. If no bonded funds can be unbonded, an"]
					#[doc = "error is returned."]
					#[doc = ""]
					#[doc = "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any"]
					#[doc = "account)."]
					#[doc = ""]
					#[doc = "# Conditions for a permissionless dispatch"]
					#[doc = ""]
					#[doc = "* The pool is in destroy mode and the target is not the depositor."]
					#[doc = "* The target is the depositor and they are the only member in the sub pools."]
					#[doc = "* The pool is blocked and the caller is either the root or state-toggler."]
					#[doc = ""]
					#[doc = "# Conditions for permissioned dispatch"]
					#[doc = ""]
					#[doc = "* The caller is the target and they are not the depositor."]
					#[doc = ""]
					#[doc = "# Note"]
					#[doc = ""]
					#[doc = "If the target is the depositor, the pool will be destroyed."]
					withdraw_unbonded {
						member_account: ::subxt::ext::sp_core::crypto::AccountId32,
						num_slashing_spans: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					#[doc = "Create a new delegation pool."]
					#[doc = ""]
					#[doc = "# Arguments"]
					#[doc = ""]
					#[doc = "* `amount` - The amount of funds to delegate to the pool. This also acts of a sort of"]
					#[doc = "  deposit since the pools creator cannot fully unbond funds until the pool is being"]
					#[doc = "  destroyed."]
					#[doc = "* `index` - A disambiguation index for creating the account. Likely only useful when"]
					#[doc = "  creating multiple pools in the same extrinsic."]
					#[doc = "* `root` - The account to set as [`PoolRoles::root`]."]
					#[doc = "* `nominator` - The account to set as the [`PoolRoles::nominator`]."]
					#[doc = "* `state_toggler` - The account to set as the [`PoolRoles::state_toggler`]."]
					#[doc = ""]
					#[doc = "# Note"]
					#[doc = ""]
					#[doc = "In addition to `amount`, the caller will transfer the existential deposit; so the caller"]
					#[doc = "needs at have at least `amount + existential_deposit` transferrable."]
					create {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						root: ::subxt::ext::sp_core::crypto::AccountId32,
						nominator: ::subxt::ext::sp_core::crypto::AccountId32,
						state_toggler: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 7)]
					#[doc = "Nominate on behalf of the pool."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be signed by the pool nominator or the pool"]
					#[doc = "root role."]
					#[doc = ""]
					#[doc = "This directly forward the call to the staking pallet, on behalf of the pool bonded"]
					#[doc = "account."]
					nominate {
						pool_id: ::core::primitive::u32,
						validators: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					},
					#[codec(index = 8)]
					#[doc = "Set a new state for the pool."]
					#[doc = ""]
					#[doc = "If a pool is already in the `Destroying` state, then under no condition can its state"]
					#[doc = "change again."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be either:"]
					#[doc = ""]
					#[doc = "1. signed by the state toggler, or the root role of the pool,"]
					#[doc = "2. if the pool conditions to be open are NOT met (as described by `ok_to_be_open`), and"]
					#[doc = "   then the state of the pool can be permissionlessly changed to `Destroying`."]
					set_state {
						pool_id: ::core::primitive::u32,
						state: runtime_types::pallet_nomination_pools::PoolState,
					},
					#[codec(index = 9)]
					#[doc = "Set a new metadata for the pool."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be signed by the state toggler, or the root role"]
					#[doc = "of the pool."]
					set_metadata {
						pool_id: ::core::primitive::u32,
						metadata: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 10)]
					#[doc = "Update configurations for the nomination pools. The origin for this call must be"]
					#[doc = "Root."]
					#[doc = ""]
					#[doc = "# Arguments"]
					#[doc = ""]
					#[doc = "* `min_join_bond` - Set [`MinJoinBond`]."]
					#[doc = "* `min_create_bond` - Set [`MinCreateBond`]."]
					#[doc = "* `max_pools` - Set [`MaxPools`]."]
					#[doc = "* `max_members` - Set [`MaxPoolMembers`]."]
					#[doc = "* `max_members_per_pool` - Set [`MaxPoolMembersPerPool`]."]
					set_configs {
						min_join_bond: runtime_types::pallet_nomination_pools::ConfigOp<
							::core::primitive::u128,
						>,
						min_create_bond: runtime_types::pallet_nomination_pools::ConfigOp<
							::core::primitive::u128,
						>,
						max_pools: runtime_types::pallet_nomination_pools::ConfigOp<
							::core::primitive::u32,
						>,
						max_members: runtime_types::pallet_nomination_pools::ConfigOp<
							::core::primitive::u32,
						>,
						max_members_per_pool: runtime_types::pallet_nomination_pools::ConfigOp<
							::core::primitive::u32,
						>,
					},
					#[codec(index = 11)]
					#[doc = "Update the roles of the pool."]
					#[doc = ""]
					#[doc = "The root is the only entity that can change any of the roles, including itself,"]
					#[doc = "excluding the depositor, who can never change."]
					#[doc = ""]
					#[doc = "It emits an event, notifying UIs of the role change. This event is quite relevant to"]
					#[doc = "most pool members and they should be informed of changes to pool roles."]
					update_roles {
						pool_id: ::core::primitive::u32,
						new_root: runtime_types::pallet_nomination_pools::ConfigOp<
							::subxt::ext::sp_core::crypto::AccountId32,
						>,
						new_nominator: runtime_types::pallet_nomination_pools::ConfigOp<
							::subxt::ext::sp_core::crypto::AccountId32,
						>,
						new_state_toggler: runtime_types::pallet_nomination_pools::ConfigOp<
							::subxt::ext::sp_core::crypto::AccountId32,
						>,
					},
					#[codec(index = 12)]
					#[doc = "Chill on behalf of the pool."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be signed by the pool nominator or the pool"]
					#[doc = "root role, same as [`Pallet::nominate`]."]
					#[doc = ""]
					#[doc = "This directly forward the call to the staking pallet, on behalf of the pool bonded"]
					#[doc = "account."]
					chill { pool_id: ::core::primitive::u32 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum DefensiveError {
					#[codec(index = 0)]
					NotEnoughSpaceInUnbondPool,
					#[codec(index = 1)]
					PoolNotFound,
					#[codec(index = 2)]
					RewardPoolNotFound,
					#[codec(index = 3)]
					SubPoolsNotFound,
					#[codec(index = 4)]
					BondedStashKilledPrematurely,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "A (bonded) pool id does not exist."]
					PoolNotFound,
					#[codec(index = 1)]
					#[doc = "An account is not a member."]
					PoolMemberNotFound,
					#[codec(index = 2)]
					#[doc = "A reward pool does not exist. In all cases this is a system logic error."]
					RewardPoolNotFound,
					#[codec(index = 3)]
					#[doc = "A sub pool does not exist."]
					SubPoolsNotFound,
					#[codec(index = 4)]
					#[doc = "An account is already delegating in another pool. An account may only belong to one"]
					#[doc = "pool at a time."]
					AccountBelongsToOtherPool,
					#[codec(index = 5)]
					#[doc = "The member is fully unbonded (and thus cannot access the bonded and reward pool"]
					#[doc = "anymore to, for example, collect rewards)."]
					FullyUnbonding,
					#[codec(index = 6)]
					#[doc = "The member cannot unbond further chunks due to reaching the limit."]
					MaxUnbondingLimit,
					#[codec(index = 7)]
					#[doc = "None of the funds can be withdrawn yet because the bonding duration has not passed."]
					CannotWithdrawAny,
					#[codec(index = 8)]
					#[doc = "The amount does not meet the minimum bond to either join or create a pool."]
					#[doc = ""]
					#[doc = "The depositor can never unbond to a value less than"]
					#[doc = "`Pallet::depositor_min_bond`. The caller does not have nominating"]
					#[doc = "permissions for the pool. Members can never unbond to a value below `MinJoinBond`."]
					MinimumBondNotMet,
					#[codec(index = 9)]
					#[doc = "The transaction could not be executed due to overflow risk for the pool."]
					OverflowRisk,
					#[codec(index = 10)]
					#[doc = "A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for"]
					#[doc = "other members to be permissionlessly unbonded."]
					NotDestroying,
					#[codec(index = 11)]
					#[doc = "The caller does not have nominating permissions for the pool."]
					NotNominator,
					#[codec(index = 12)]
					#[doc = "Either a) the caller cannot make a valid kick or b) the pool is not destroying."]
					NotKickerOrDestroying,
					#[codec(index = 13)]
					#[doc = "The pool is not open to join"]
					NotOpen,
					#[codec(index = 14)]
					#[doc = "The system is maxed out on pools."]
					MaxPools,
					#[codec(index = 15)]
					#[doc = "Too many members in the pool or system."]
					MaxPoolMembers,
					#[codec(index = 16)]
					#[doc = "The pools state cannot be changed."]
					CanNotChangeState,
					#[codec(index = 17)]
					#[doc = "The caller does not have adequate permissions."]
					DoesNotHavePermission,
					#[codec(index = 18)]
					#[doc = "Metadata exceeds [`Config::MaxMetadataLen`]"]
					MetadataExceedsMaxLen,
					#[codec(index = 19)]
					#[doc = "Some error occurred that should never happen. This should be reported to the"]
					#[doc = "maintainers."]
					Defensive(runtime_types::pallet_nomination_pools::pallet::DefensiveError),
					#[codec(index = 20)]
					#[doc = "Partial unbonding now allowed permissionlessly."]
					PartialUnbondNotAllowedPermissionlessly,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Events of this pallet."]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A pool has been created."]
					Created {
						depositor: ::subxt::ext::sp_core::crypto::AccountId32,
						pool_id: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					#[doc = "A member has became bonded in a pool."]
					Bonded {
						member: ::subxt::ext::sp_core::crypto::AccountId32,
						pool_id: ::core::primitive::u32,
						bonded: ::core::primitive::u128,
						joined: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					#[doc = "A payout has been made to a member."]
					PaidOut {
						member: ::subxt::ext::sp_core::crypto::AccountId32,
						pool_id: ::core::primitive::u32,
						payout: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "A member has unbonded from their pool."]
					#[doc = ""]
					#[doc = "- `balance` is the corresponding balance of the number of points that has been"]
					#[doc = "  requested to be unbonded (the argument of the `unbond` transaction) from the bonded"]
					#[doc = "  pool."]
					#[doc = "- `points` is the number of points that are issued as a result of `balance` being"]
					#[doc = "dissolved into the corresponding unbonding pool."]
					#[doc = "- `era` is the era in which the balance will be unbonded."]
					#[doc = "In the absence of slashing, these values will match. In the presence of slashing, the"]
					#[doc = "number of points that are issued in the unbonding pool will be less than the amount"]
					#[doc = "requested to be unbonded."]
					Unbonded {
						member: ::subxt::ext::sp_core::crypto::AccountId32,
						pool_id: ::core::primitive::u32,
						balance: ::core::primitive::u128,
						points: ::core::primitive::u128,
						era: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					#[doc = "A member has withdrawn from their pool."]
					#[doc = ""]
					#[doc = "The given number of `points` have been dissolved in return of `balance`."]
					#[doc = ""]
					#[doc = "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance"]
					#[doc = "will be 1."]
					Withdrawn {
						member: ::subxt::ext::sp_core::crypto::AccountId32,
						pool_id: ::core::primitive::u32,
						balance: ::core::primitive::u128,
						points: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					#[doc = "A pool has been destroyed."]
					Destroyed { pool_id: ::core::primitive::u32 },
					#[codec(index = 6)]
					#[doc = "The state of a pool has changed"]
					StateChanged {
						pool_id: ::core::primitive::u32,
						new_state: runtime_types::pallet_nomination_pools::PoolState,
					},
					#[codec(index = 7)]
					#[doc = "A member has been removed from a pool."]
					#[doc = ""]
					#[doc = "The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked)."]
					MemberRemoved {
						pool_id: ::core::primitive::u32,
						member: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 8)]
					#[doc = "The roles of a pool have been updated to the given new roles. Note that the depositor"]
					#[doc = "can never change."]
					RolesUpdated {
						root: ::core::option::Option<::subxt::ext::sp_core::crypto::AccountId32>,
						state_toggler:
							::core::option::Option<::subxt::ext::sp_core::crypto::AccountId32>,
						nominator:
							::core::option::Option<::subxt::ext::sp_core::crypto::AccountId32>,
					},
					#[codec(index = 9)]
					#[doc = "The active balance of pool `pool_id` has been slashed to `balance`."]
					PoolSlashed {
						pool_id: ::core::primitive::u32,
						balance: ::core::primitive::u128,
					},
					#[codec(index = 10)]
					#[doc = "The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."]
					UnbondingPoolSlashed {
						pool_id: ::core::primitive::u32,
						era: ::core::primitive::u32,
						balance: ::core::primitive::u128,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum BondExtra<_0> {
				#[codec(index = 0)]
				FreeBalance(_0),
				#[codec(index = 1)]
				Rewards,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct BondedPoolInner {
				pub points: ::core::primitive::u128,
				pub state: runtime_types::pallet_nomination_pools::PoolState,
				pub member_counter: ::core::primitive::u32,
				pub roles: runtime_types::pallet_nomination_pools::PoolRoles<
					::subxt::ext::sp_core::crypto::AccountId32,
				>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum ConfigOp<_0> {
				#[codec(index = 0)]
				Noop,
				#[codec(index = 1)]
				Set(_0),
				#[codec(index = 2)]
				Remove,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct PoolMember {
				pub pool_id: ::core::primitive::u32,
				pub points: ::core::primitive::u128,
				pub last_recorded_reward_counter:
					runtime_types::sp_arithmetic::fixed_point::FixedU128,
				pub unbonding_eras:
					runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
						::core::primitive::u32,
						::core::primitive::u128,
					>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct PoolRoles<_0> {
				pub depositor: _0,
				pub root: ::core::option::Option<_0>,
				pub nominator: ::core::option::Option<_0>,
				pub state_toggler: ::core::option::Option<_0>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum PoolState {
				#[codec(index = 0)]
				Open,
				#[codec(index = 1)]
				Blocked,
				#[codec(index = 2)]
				Destroying,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RewardPool {
				pub last_recorded_reward_counter:
					runtime_types::sp_arithmetic::fixed_point::FixedU128,
				pub last_recorded_total_payouts: ::core::primitive::u128,
				pub total_rewards_claimed: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct SubPools {
				pub no_era: runtime_types::pallet_nomination_pools::UnbondPool,
				pub with_era:
					runtime_types::sp_runtime::bounded::bounded_btree_map::BoundedBTreeMap<
						::core::primitive::u32,
						runtime_types::pallet_nomination_pools::UnbondPool,
					>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct UnbondPool {
				pub points: ::core::primitive::u128,
				pub balance: ::core::primitive::u128,
			}
		}
		pub mod pallet_offences {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Events type."]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "There is an offence reported of the given `kind` happened at the `session_index` and"]
					#[doc = "(kind-specific) time slot. This event is not deposited for duplicate slashes."]
					#[doc = "\\[kind, timeslot\\]."]
					Offence {
						kind: [::core::primitive::u8; 16usize],
						timeslot: ::std::vec::Vec<::core::primitive::u8>,
					},
				}
			}
		}
		pub mod pallet_preimage {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Register a preimage on-chain."]
					#[doc = ""]
					#[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
					#[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
					note_preimage { bytes: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 1)]
					#[doc = "Clear an unrequested preimage from the runtime storage."]
					unnote_preimage { hash: ::subxt::ext::sp_core::H256 },
					#[codec(index = 2)]
					#[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
					#[doc = ""]
					#[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
					#[doc = "a user may have paid, and take the control of the preimage out of their hands."]
					request_preimage { hash: ::subxt::ext::sp_core::H256 },
					#[codec(index = 3)]
					#[doc = "Clear a previously made request for a preimage."]
					#[doc = ""]
					#[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
					unrequest_preimage { hash: ::subxt::ext::sp_core::H256 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Preimage is too large to store on-chain."]
					TooLarge,
					#[codec(index = 1)]
					#[doc = "Preimage has already been noted on-chain."]
					AlreadyNoted,
					#[codec(index = 2)]
					#[doc = "The user is not authorized to perform this action."]
					NotAuthorized,
					#[codec(index = 3)]
					#[doc = "The preimage cannot be removed since it has not yet been noted."]
					NotNoted,
					#[codec(index = 4)]
					#[doc = "A preimage may not be removed when there are outstanding requests."]
					Requested,
					#[codec(index = 5)]
					#[doc = "The preimage request cannot be removed since no outstanding requests exist."]
					NotRequested,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A preimage has been noted."]
					Noted { hash: ::subxt::ext::sp_core::H256 },
					#[codec(index = 1)]
					#[doc = "A preimage has been requested."]
					Requested { hash: ::subxt::ext::sp_core::H256 },
					#[codec(index = 2)]
					#[doc = "A preimage has ben cleared."]
					Cleared { hash: ::subxt::ext::sp_core::H256 },
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum RequestStatus<_0, _1> {
				#[codec(index = 0)]
				Unrequested(::core::option::Option<(_0, _1)>),
				#[codec(index = 1)]
				Requested(::core::primitive::u32),
			}
		}
		pub mod pallet_proxy {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
					#[doc = "`add_proxy`."]
					#[doc = ""]
					#[doc = "Removes any corresponding announcement(s)."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
					#[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
					#[doc = "- `call`: The call to be made by the `real` account."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of the number of proxies the user has (P)."]
					#[doc = "# </weight>"]
					proxy {
						real: ::subxt::ext::sp_core::crypto::AccountId32,
						force_proxy_type:
							::core::option::Option<runtime_types::kusama_runtime::ProxyType>,
						call: ::std::boxed::Box<runtime_types::kusama_runtime::Call>,
					},
					#[codec(index = 1)]
					#[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
					#[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
					#[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
					#[doc = "zero."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of the number of proxies the user has (P)."]
					#[doc = "# </weight>"]
					add_proxy {
						delegate: ::subxt::ext::sp_core::crypto::AccountId32,
						proxy_type: runtime_types::kusama_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Unregister a proxy account for the sender."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
					#[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of the number of proxies the user has (P)."]
					#[doc = "# </weight>"]
					remove_proxy {
						delegate: ::subxt::ext::sp_core::crypto::AccountId32,
						proxy_type: runtime_types::kusama_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "Unregister all proxy accounts for the sender."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "WARNING: This may be called on accounts created by `anonymous`, however if done, then"]
					#[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of the number of proxies the user has (P)."]
					#[doc = "# </weight>"]
					remove_proxies,
					#[codec(index = 4)]
					#[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
					#[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
					#[doc = ""]
					#[doc = "Requires a `Signed` origin."]
					#[doc = ""]
					#[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
					#[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
					#[doc = "allow for maximum flexibility."]
					#[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
					#[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
					#[doc = "want to use `0`."]
					#[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
					#[doc = "zero."]
					#[doc = ""]
					#[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
					#[doc = "same sender, with the same parameters."]
					#[doc = ""]
					#[doc = "Fails if there are insufficient funds to pay for deposit."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of the number of proxies the user has (P)."]
					#[doc = "# </weight>"]
					#[doc = "TODO: Might be over counting 1 read"]
					anonymous {
						proxy_type: runtime_types::kusama_runtime::ProxyType,
						delay: ::core::primitive::u32,
						index: ::core::primitive::u16,
					},
					#[codec(index = 5)]
					#[doc = "Removes a previously spawned anonymous proxy."]
					#[doc = ""]
					#[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
					#[doc = "inaccessible."]
					#[doc = ""]
					#[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
					#[doc = "`anonymous` with corresponding parameters."]
					#[doc = ""]
					#[doc = "- `spawner`: The account that originally called `anonymous` to create this account."]
					#[doc = "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`."]
					#[doc = "- `proxy_type`: The proxy type originally passed to `anonymous`."]
					#[doc = "- `height`: The height of the chain when the call to `anonymous` was processed."]
					#[doc = "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed."]
					#[doc = ""]
					#[doc = "Fails with `NoPermission` in case the caller is not a previously created anonymous"]
					#[doc = "account whose `anonymous` call has corresponding parameters."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of the number of proxies the user has (P)."]
					#[doc = "# </weight>"]
					kill_anonymous {
						spawner: ::subxt::ext::sp_core::crypto::AccountId32,
						proxy_type: runtime_types::kusama_runtime::ProxyType,
						index: ::core::primitive::u16,
						#[codec(compact)]
						height: ::core::primitive::u32,
						#[codec(compact)]
						ext_index: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					#[doc = "Publish the hash of a proxy-call that will be made in the future."]
					#[doc = ""]
					#[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
					#[doc = "if the delay associated with the proxy relationship is greater than zero."]
					#[doc = ""]
					#[doc = "No more than `MaxPending` announcements may be made at any one time."]
					#[doc = ""]
					#[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
					#[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
					#[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of:"]
					#[doc = "- A: the number of announcements made."]
					#[doc = "- P: the number of proxies the user has."]
					#[doc = "# </weight>"]
					announce {
						real: ::subxt::ext::sp_core::crypto::AccountId32,
						call_hash: ::subxt::ext::sp_core::H256,
					},
					#[codec(index = 7)]
					#[doc = "Remove a given announcement."]
					#[doc = ""]
					#[doc = "May be called by a proxy account to remove a call they previously announced and return"]
					#[doc = "the deposit."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
					#[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of:"]
					#[doc = "- A: the number of announcements made."]
					#[doc = "- P: the number of proxies the user has."]
					#[doc = "# </weight>"]
					remove_announcement {
						real: ::subxt::ext::sp_core::crypto::AccountId32,
						call_hash: ::subxt::ext::sp_core::H256,
					},
					#[codec(index = 8)]
					#[doc = "Remove the given announcement of a delegate."]
					#[doc = ""]
					#[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
					#[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `delegate`: The account that previously announced the call."]
					#[doc = "- `call_hash`: The hash of the call to be made."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of:"]
					#[doc = "- A: the number of announcements made."]
					#[doc = "- P: the number of proxies the user has."]
					#[doc = "# </weight>"]
					reject_announcement {
						delegate: ::subxt::ext::sp_core::crypto::AccountId32,
						call_hash: ::subxt::ext::sp_core::H256,
					},
					#[codec(index = 9)]
					#[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
					#[doc = "`add_proxy`."]
					#[doc = ""]
					#[doc = "Removes any corresponding announcement(s)."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
					#[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
					#[doc = "- `call`: The call to be made by the `real` account."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Weight is a function of:"]
					#[doc = "- A: the number of announcements made."]
					#[doc = "- P: the number of proxies the user has."]
					#[doc = "# </weight>"]
					proxy_announced {
						delegate: ::subxt::ext::sp_core::crypto::AccountId32,
						real: ::subxt::ext::sp_core::crypto::AccountId32,
						force_proxy_type:
							::core::option::Option<runtime_types::kusama_runtime::ProxyType>,
						call: ::std::boxed::Box<runtime_types::kusama_runtime::Call>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "There are too many proxies registered or too many announcements pending."]
					TooMany,
					#[codec(index = 1)]
					#[doc = "Proxy registration not found."]
					NotFound,
					#[codec(index = 2)]
					#[doc = "Sender is not a proxy of the account to be proxied."]
					NotProxy,
					#[codec(index = 3)]
					#[doc = "A call which is incompatible with the proxy type's filter was attempted."]
					Unproxyable,
					#[codec(index = 4)]
					#[doc = "Account is already a proxy."]
					Duplicate,
					#[codec(index = 5)]
					#[doc = "Call may not be made by proxy because it may escalate its privileges."]
					NoPermission,
					#[codec(index = 6)]
					#[doc = "Announcement, if made at all, was made too recently."]
					Unannounced,
					#[codec(index = 7)]
					#[doc = "Cannot add self as proxy."]
					NoSelfProxy,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A proxy was executed correctly, with the given."]
					ProxyExecuted {
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 1)]
					#[doc = "Anonymous account has been created by new proxy with given"]
					#[doc = "disambiguation index and proxy type."]
					AnonymousCreated {
						anonymous: ::subxt::ext::sp_core::crypto::AccountId32,
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						proxy_type: runtime_types::kusama_runtime::ProxyType,
						disambiguation_index: ::core::primitive::u16,
					},
					#[codec(index = 2)]
					#[doc = "An announcement was placed to make a call in the future."]
					Announced {
						real: ::subxt::ext::sp_core::crypto::AccountId32,
						proxy: ::subxt::ext::sp_core::crypto::AccountId32,
						call_hash: ::subxt::ext::sp_core::H256,
					},
					#[codec(index = 3)]
					#[doc = "A proxy was added."]
					ProxyAdded {
						delegator: ::subxt::ext::sp_core::crypto::AccountId32,
						delegatee: ::subxt::ext::sp_core::crypto::AccountId32,
						proxy_type: runtime_types::kusama_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					#[doc = "A proxy was removed."]
					ProxyRemoved {
						delegator: ::subxt::ext::sp_core::crypto::AccountId32,
						delegatee: ::subxt::ext::sp_core::crypto::AccountId32,
						proxy_type: runtime_types::kusama_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Announcement<_0, _1, _2> {
				pub real: _0,
				pub call_hash: _1,
				pub height: _2,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ProxyDefinition<_0, _1, _2> {
				pub delegate: _0,
				pub proxy_type: _1,
				pub delay: _2,
			}
		}
		pub mod pallet_recovery {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Send a call through a recovered account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and registered to"]
					#[doc = "be able to make calls on behalf of the recovered account."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `account`: The recovered account you want to make a call on-behalf-of."]
					#[doc = "- `call`: The call you want to make with the recovered account."]
					as_recovered {
						account: ::subxt::ext::sp_core::crypto::AccountId32,
						call: ::std::boxed::Box<runtime_types::kusama_runtime::Call>,
					},
					#[codec(index = 1)]
					#[doc = "Allow ROOT to bypass the recovery process and set an a rescuer account"]
					#[doc = "for a lost account directly."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _ROOT_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `lost`: The \"lost account\" to be recovered."]
					#[doc = "- `rescuer`: The \"rescuer account\" which can call as the lost account."]
					set_recovered {
						lost: ::subxt::ext::sp_core::crypto::AccountId32,
						rescuer: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 2)]
					#[doc = "Create a recovery configuration for your account. This makes your account recoverable."]
					#[doc = ""]
					#[doc = "Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance"]
					#[doc = "will be reserved for storing the recovery configuration. This deposit is returned"]
					#[doc = "in full when the user calls `remove_recovery`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `friends`: A list of friends you trust to vouch for recovery attempts. Should be"]
					#[doc = "  ordered and contain no duplicate values."]
					#[doc = "- `threshold`: The number of friends that must vouch for a recovery attempt before the"]
					#[doc = "  account can be recovered. Should be less than or equal to the length of the list of"]
					#[doc = "  friends."]
					#[doc = "- `delay_period`: The number of blocks after a recovery attempt is initialized that"]
					#[doc = "  needs to pass before the account can be recovered."]
					create_recovery {
						friends: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
						threshold: ::core::primitive::u16,
						delay_period: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "Initiate the process for recovering a recoverable account."]
					#[doc = ""]
					#[doc = "Payment: `RecoveryDeposit` balance will be reserved for initiating the"]
					#[doc = "recovery process. This deposit will always be repatriated to the account"]
					#[doc = "trying to be recovered. See `close_recovery`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `account`: The lost account that you want to recover. This account needs to be"]
					#[doc = "  recoverable (i.e. have a recovery configuration)."]
					initiate_recovery { account: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 4)]
					#[doc = "Allow a \"friend\" of a recoverable account to vouch for an active recovery"]
					#[doc = "process for that account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and must be a \"friend\""]
					#[doc = "for the recoverable account."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `lost`: The lost account that you want to recover."]
					#[doc = "- `rescuer`: The account trying to rescue the lost account that you want to vouch for."]
					#[doc = ""]
					#[doc = "The combination of these two parameters must point to an active recovery"]
					#[doc = "process."]
					vouch_recovery {
						lost: ::subxt::ext::sp_core::crypto::AccountId32,
						rescuer: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 5)]
					#[doc = "Allow a successful rescuer to claim their recovered account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and must be a \"rescuer\""]
					#[doc = "who has successfully completed the account recovery process: collected"]
					#[doc = "`threshold` or more vouches, waited `delay_period` blocks since initiation."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `account`: The lost account that you want to claim has been successfully recovered by"]
					#[doc = "  you."]
					claim_recovery { account: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 6)]
					#[doc = "As the controller of a recoverable account, close an active recovery"]
					#[doc = "process for your account."]
					#[doc = ""]
					#[doc = "Payment: By calling this function, the recoverable account will receive"]
					#[doc = "the recovery deposit `RecoveryDeposit` placed by the rescuer."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and must be a"]
					#[doc = "recoverable account with an active recovery process for it."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `rescuer`: The account trying to rescue this recoverable account."]
					close_recovery { rescuer: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 7)]
					#[doc = "Remove the recovery process for your account. Recovered accounts are still accessible."]
					#[doc = ""]
					#[doc = "NOTE: The user must make sure to call `close_recovery` on all active"]
					#[doc = "recovery attempts before calling this function else it will fail."]
					#[doc = ""]
					#[doc = "Payment: By calling this function the recoverable account will unreserve"]
					#[doc = "their recovery configuration deposit."]
					#[doc = "(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)"]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and must be a"]
					#[doc = "recoverable account (i.e. has a recovery configuration)."]
					remove_recovery,
					#[codec(index = 8)]
					#[doc = "Cancel the ability to use `as_recovered` for `account`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and registered to"]
					#[doc = "be able to make calls on behalf of the recovered account."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `account`: The recovered account you are able to call on-behalf-of."]
					cancel_recovered { account: ::subxt::ext::sp_core::crypto::AccountId32 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "User is not allowed to make a call on behalf of this account"]
					NotAllowed,
					#[codec(index = 1)]
					#[doc = "Threshold must be greater than zero"]
					ZeroThreshold,
					#[codec(index = 2)]
					#[doc = "Friends list must be greater than zero and threshold"]
					NotEnoughFriends,
					#[codec(index = 3)]
					#[doc = "Friends list must be less than max friends"]
					MaxFriends,
					#[codec(index = 4)]
					#[doc = "Friends list must be sorted and free of duplicates"]
					NotSorted,
					#[codec(index = 5)]
					#[doc = "This account is not set up for recovery"]
					NotRecoverable,
					#[codec(index = 6)]
					#[doc = "This account is already set up for recovery"]
					AlreadyRecoverable,
					#[codec(index = 7)]
					#[doc = "A recovery process has already started for this account"]
					AlreadyStarted,
					#[codec(index = 8)]
					#[doc = "A recovery process has not started for this rescuer"]
					NotStarted,
					#[codec(index = 9)]
					#[doc = "This account is not a friend who can vouch"]
					NotFriend,
					#[codec(index = 10)]
					#[doc = "The friend must wait until the delay period to vouch for this recovery"]
					DelayPeriod,
					#[codec(index = 11)]
					#[doc = "This user has already vouched for this recovery"]
					AlreadyVouched,
					#[codec(index = 12)]
					#[doc = "The threshold for recovering this account has not been met"]
					Threshold,
					#[codec(index = 13)]
					#[doc = "There are still active recovery attempts that need to be closed"]
					StillActive,
					#[codec(index = 14)]
					#[doc = "This account is already set up for recovery"]
					AlreadyProxy,
					#[codec(index = 15)]
					#[doc = "Some internal state is broken."]
					BadState,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Events type."]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A recovery process has been set up for an account."]
					RecoveryCreated { account: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 1)]
					#[doc = "A recovery process has been initiated for lost account by rescuer account."]
					RecoveryInitiated {
						lost_account: ::subxt::ext::sp_core::crypto::AccountId32,
						rescuer_account: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 2)]
					#[doc = "A recovery process for lost account by rescuer account has been vouched for by sender."]
					RecoveryVouched {
						lost_account: ::subxt::ext::sp_core::crypto::AccountId32,
						rescuer_account: ::subxt::ext::sp_core::crypto::AccountId32,
						sender: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 3)]
					#[doc = "A recovery process for lost account by rescuer account has been closed."]
					RecoveryClosed {
						lost_account: ::subxt::ext::sp_core::crypto::AccountId32,
						rescuer_account: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 4)]
					#[doc = "Lost account has been successfully recovered by rescuer account."]
					AccountRecovered {
						lost_account: ::subxt::ext::sp_core::crypto::AccountId32,
						rescuer_account: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 5)]
					#[doc = "A recovery process has been removed for an account."]
					RecoveryRemoved { lost_account: ::subxt::ext::sp_core::crypto::AccountId32 },
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ActiveRecovery<_0, _1, _2> {
				pub created: _0,
				pub deposit: _1,
				pub friends: _2,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RecoveryConfig<_0, _1, _2> {
				pub delay_period: _0,
				pub deposit: _1,
				pub friends: _2,
				pub threshold: ::core::primitive::u16,
			}
		}
		pub mod pallet_scheduler {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Anonymously schedule a task."]
					schedule {
						when: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<
							runtime_types::frame_support::traits::schedule::MaybeHashed<
								runtime_types::kusama_runtime::Call,
								::subxt::ext::sp_core::H256,
							>,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Cancel an anonymously scheduled task."]
					cancel { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "Schedule a named task."]
					schedule_named {
						id: ::std::vec::Vec<::core::primitive::u8>,
						when: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<
							runtime_types::frame_support::traits::schedule::MaybeHashed<
								runtime_types::kusama_runtime::Call,
								::subxt::ext::sp_core::H256,
							>,
						>,
					},
					#[codec(index = 3)]
					#[doc = "Cancel a named scheduled task."]
					cancel_named { id: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 4)]
					#[doc = "Anonymously schedule a task after a delay."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Same as [`schedule`]."]
					#[doc = "# </weight>"]
					schedule_after {
						after: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<
							runtime_types::frame_support::traits::schedule::MaybeHashed<
								runtime_types::kusama_runtime::Call,
								::subxt::ext::sp_core::H256,
							>,
						>,
					},
					#[codec(index = 5)]
					#[doc = "Schedule a named task after a delay."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Same as [`schedule_named`](Self::schedule_named)."]
					#[doc = "# </weight>"]
					schedule_named_after {
						id: ::std::vec::Vec<::core::primitive::u8>,
						after: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<
							runtime_types::frame_support::traits::schedule::MaybeHashed<
								runtime_types::kusama_runtime::Call,
								::subxt::ext::sp_core::H256,
							>,
						>,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Failed to schedule a call"]
					FailedToSchedule,
					#[codec(index = 1)]
					#[doc = "Cannot find the scheduled call."]
					NotFound,
					#[codec(index = 2)]
					#[doc = "Given target block number is in the past."]
					TargetBlockNumberInPast,
					#[codec(index = 3)]
					#[doc = "Reschedule failed because it does not change scheduled time."]
					RescheduleNoChange,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Events type."]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Scheduled some task."]
					Scheduled { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 1)]
					#[doc = "Canceled some task."]
					Canceled { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "Dispatched some task."]
					Dispatched {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 3)]
					#[doc = "The call for the provided hash was not found so the task has been aborted."]
					CallLookupFailed {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
						error: runtime_types::frame_support::traits::schedule::LookupError,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ScheduledV3<_0, _1, _2, _3> {
				pub maybe_id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
				pub priority: ::core::primitive::u8,
				pub call: _0,
				pub maybe_periodic: ::core::option::Option<(_1, _1)>,
				pub origin: _2,
				#[codec(skip)]
				pub __subxt_unused_type_params: ::core::marker::PhantomData<_3>,
			}
		}
		pub mod pallet_session {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Sets the session key(s) of the function caller to `keys`."]
					#[doc = "Allows an account to set its session key prior to becoming a validator."]
					#[doc = "This doesn't take effect until the next session."]
					#[doc = ""]
					#[doc = "The dispatch origin of this function must be signed."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: `O(1)`. Actual cost depends on the number of length of"]
					#[doc = "  `T::Keys::key_ids()` which is fixed."]
					#[doc = "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`"]
					#[doc = "- DbWrites: `origin account`, `NextKeys`"]
					#[doc = "- DbReads per key id: `KeyOwner`"]
					#[doc = "- DbWrites per key id: `KeyOwner`"]
					#[doc = "# </weight>"]
					set_keys {
						keys: runtime_types::kusama_runtime::SessionKeys,
						proof: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					#[doc = "Removes any session key(s) of the function caller."]
					#[doc = ""]
					#[doc = "This doesn't take effect until the next session."]
					#[doc = ""]
					#[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
					#[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
					#[doc = "means being a controller account) or directly convertible into a validator ID (which"]
					#[doc = "usually means being a stash account)."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length"]
					#[doc = "  of `T::Keys::key_ids()` which is fixed."]
					#[doc = "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`"]
					#[doc = "- DbWrites: `NextKeys`, `origin account`"]
					#[doc = "- DbWrites per key id: `KeyOwner`"]
					#[doc = "# </weight>"]
					purge_keys,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Error for the session pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Invalid ownership proof."]
					InvalidProof,
					#[codec(index = 1)]
					#[doc = "No associated validator ID for account."]
					NoAssociatedValidatorId,
					#[codec(index = 2)]
					#[doc = "Registered duplicate key."]
					DuplicatedKey,
					#[codec(index = 3)]
					#[doc = "No keys are associated with this account."]
					NoKeys,
					#[codec(index = 4)]
					#[doc = "Key setting account is not live, so it's impossible to associate keys."]
					NoAccount,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "New session has happened. Note that the argument is the session index, not the"]
					#[doc = "block number as the type might suggest."]
					NewSession { session_index: ::core::primitive::u32 },
				}
			}
		}
		pub mod pallet_society {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "A user outside of the society can make a bid for entry."]
					#[doc = ""]
					#[doc = "Payment: `CandidateDeposit` will be reserved for making a bid. It is returned"]
					#[doc = "when the bid becomes a member, or if the bid calls `unbid`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `value`: A one time payment the bid would like to receive when joining the society."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Key: B (len of bids), C (len of candidates), M (len of members), X (balance reserve)"]
					#[doc = "- Storage Reads:"]
					#[doc = "\t- One storage read to check for suspended candidate. O(1)"]
					#[doc = "\t- One storage read to check for suspended member. O(1)"]
					#[doc = "\t- One storage read to retrieve all current bids. O(B)"]
					#[doc = "\t- One storage read to retrieve all current candidates. O(C)"]
					#[doc = "\t- One storage read to retrieve all members. O(M)"]
					#[doc = "- Storage Writes:"]
					#[doc = "\t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization"]
					#[doc = "   w/ read)"]
					#[doc = "\t- Up to one storage removal if bid.len() > MAX_BID_COUNT. O(1)"]
					#[doc = "- Notable Computation:"]
					#[doc = "\t- O(B + C + log M) search to check user is not already a part of society."]
					#[doc = "\t- O(log B) search to insert the new bid sorted."]
					#[doc = "- External Pallet Operations:"]
					#[doc = "\t- One balance reserve operation. O(X)"]
					#[doc = "\t- Up to one balance unreserve operation if bids.len() > MAX_BID_COUNT."]
					#[doc = "- Events:"]
					#[doc = "\t- One event for new bid."]
					#[doc = "\t- Up to one event for AutoUnbid if bid.len() > MAX_BID_COUNT."]
					#[doc = ""]
					#[doc = "Total Complexity: O(M + B + C + logM + logB + X)"]
					#[doc = "# </weight>"]
					bid { value: ::core::primitive::u128 },
					#[codec(index = 1)]
					#[doc = "A bidder can remove their bid for entry into society."]
					#[doc = "By doing so, they will have their candidate deposit returned or"]
					#[doc = "they will unvouch their voucher."]
					#[doc = ""]
					#[doc = "Payment: The bid deposit is unreserved if the user made a bid."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and a bidder."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `pos`: Position in the `Bids` vector of the bid who wants to unbid."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Key: B (len of bids), X (balance unreserve)"]
					#[doc = "- One storage read and write to retrieve and update the bids. O(B)"]
					#[doc = "- Either one unreserve balance action O(X) or one vouching storage removal. O(1)"]
					#[doc = "- One event."]
					#[doc = ""]
					#[doc = "Total Complexity: O(B + X)"]
					#[doc = "# </weight>"]
					unbid { pos: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "As a member, vouch for someone to join society by placing a bid on their behalf."]
					#[doc = ""]
					#[doc = "There is no deposit required to vouch for a new bid, but a member can only vouch for"]
					#[doc = "one bid at a time. If the bid becomes a suspended candidate and ultimately rejected by"]
					#[doc = "the suspension judgement origin, the member will be banned from vouching again."]
					#[doc = ""]
					#[doc = "As a vouching member, you can claim a tip if the candidate is accepted. This tip will"]
					#[doc = "be paid as a portion of the reward the member will receive for joining the society."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and a member."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `who`: The user who you would like to vouch for."]
					#[doc = "- `value`: The total reward to be paid between you and the candidate if they become"]
					#[doc = "a member in the society."]
					#[doc = "- `tip`: Your cut of the total `value` payout when the candidate is inducted into"]
					#[doc = "the society. Tips larger than `value` will be saturated upon payout."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Key: B (len of bids), C (len of candidates), M (len of members)"]
					#[doc = "- Storage Reads:"]
					#[doc = "\t- One storage read to retrieve all members. O(M)"]
					#[doc = "\t- One storage read to check member is not already vouching. O(1)"]
					#[doc = "\t- One storage read to check for suspended candidate. O(1)"]
					#[doc = "\t- One storage read to check for suspended member. O(1)"]
					#[doc = "\t- One storage read to retrieve all current bids. O(B)"]
					#[doc = "\t- One storage read to retrieve all current candidates. O(C)"]
					#[doc = "- Storage Writes:"]
					#[doc = "\t- One storage write to insert vouching status to the member. O(1)"]
					#[doc = "\t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization"]
					#[doc = "   w/ read)"]
					#[doc = "\t- Up to one storage removal if bid.len() > MAX_BID_COUNT. O(1)"]
					#[doc = "- Notable Computation:"]
					#[doc = "\t- O(log M) search to check sender is a member."]
					#[doc = "\t- O(B + C + log M) search to check user is not already a part of society."]
					#[doc = "\t- O(log B) search to insert the new bid sorted."]
					#[doc = "- External Pallet Operations:"]
					#[doc = "\t- One balance reserve operation. O(X)"]
					#[doc = "\t- Up to one balance unreserve operation if bids.len() > MAX_BID_COUNT."]
					#[doc = "- Events:"]
					#[doc = "\t- One event for vouch."]
					#[doc = "\t- Up to one event for AutoUnbid if bid.len() > MAX_BID_COUNT."]
					#[doc = ""]
					#[doc = "Total Complexity: O(M + B + C + logM + logB + X)"]
					#[doc = "# </weight>"]
					vouch {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						value: ::core::primitive::u128,
						tip: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "As a vouching member, unvouch a bid. This only works while vouched user is"]
					#[doc = "only a bidder (and not a candidate)."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and a vouching member."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `pos`: Position in the `Bids` vector of the bid who should be unvouched."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Key: B (len of bids)"]
					#[doc = "- One storage read O(1) to check the signer is a vouching member."]
					#[doc = "- One storage mutate to retrieve and update the bids. O(B)"]
					#[doc = "- One vouching storage removal. O(1)"]
					#[doc = "- One event."]
					#[doc = ""]
					#[doc = "Total Complexity: O(B)"]
					#[doc = "# </weight>"]
					unvouch { pos: ::core::primitive::u32 },
					#[codec(index = 4)]
					#[doc = "As a member, vote on a candidate."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and a member."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `candidate`: The candidate that the member would like to bid on."]
					#[doc = "- `approve`: A boolean which says if the candidate should be approved (`true`) or"]
					#[doc = "  rejected (`false`)."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Key: C (len of candidates), M (len of members)"]
					#[doc = "- One storage read O(M) and O(log M) search to check user is a member."]
					#[doc = "- One account lookup."]
					#[doc = "- One storage read O(C) and O(C) search to check that user is a candidate."]
					#[doc = "- One storage write to add vote to votes. O(1)"]
					#[doc = "- One event."]
					#[doc = ""]
					#[doc = "Total Complexity: O(M + logM + C)"]
					#[doc = "# </weight>"]
					vote {
						candidate: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
						approve: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					#[doc = "As a member, vote on the defender."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and a member."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `approve`: A boolean which says if the candidate should be"]
					#[doc = "approved (`true`) or rejected (`false`)."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Key: M (len of members)"]
					#[doc = "- One storage read O(M) and O(log M) search to check user is a member."]
					#[doc = "- One storage write to add vote to votes. O(1)"]
					#[doc = "- One event."]
					#[doc = ""]
					#[doc = "Total Complexity: O(M + logM)"]
					#[doc = "# </weight>"]
					defender_vote { approve: ::core::primitive::bool },
					#[codec(index = 6)]
					#[doc = "Transfer the first matured payout for the sender and remove it from the records."]
					#[doc = ""]
					#[doc = "NOTE: This extrinsic needs to be called multiple times to claim multiple matured"]
					#[doc = "payouts."]
					#[doc = ""]
					#[doc = "Payment: The member will receive a payment equal to their first matured"]
					#[doc = "payout to their free balance."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and a member with"]
					#[doc = "payouts remaining."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Key: M (len of members), P (number of payouts for a particular member)"]
					#[doc = "- One storage read O(M) and O(log M) search to check signer is a member."]
					#[doc = "- One storage read O(P) to get all payouts for a member."]
					#[doc = "- One storage read O(1) to get the current block number."]
					#[doc = "- One currency transfer call. O(X)"]
					#[doc = "- One storage write or removal to update the member's payouts. O(P)"]
					#[doc = ""]
					#[doc = "Total Complexity: O(M + logM + P + X)"]
					#[doc = "# </weight>"]
					payout,
					#[codec(index = 7)]
					#[doc = "Found the society."]
					#[doc = ""]
					#[doc = "This is done as a discrete action in order to allow for the"]
					#[doc = "pallet to be included into a running chain and can only be done once."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be from the _FounderSetOrigin_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `founder` - The first member and head of the newly founded society."]
					#[doc = "- `max_members` - The initial max number of members for the society."]
					#[doc = "- `rules` - The rules of this society concerning membership."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Two storage mutates to set `Head` and `Founder`. O(1)"]
					#[doc = "- One storage write to add the first member to society. O(1)"]
					#[doc = "- One event."]
					#[doc = ""]
					#[doc = "Total Complexity: O(1)"]
					#[doc = "# </weight>"]
					found {
						founder: ::subxt::ext::sp_core::crypto::AccountId32,
						max_members: ::core::primitive::u32,
						rules: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 8)]
					#[doc = "Annul the founding of the society."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be Signed, and the signing account must be both"]
					#[doc = "the `Founder` and the `Head`. This implies that it may only be done when there is one"]
					#[doc = "member."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Two storage reads O(1)."]
					#[doc = "- Four storage removals O(1)."]
					#[doc = "- One event."]
					#[doc = ""]
					#[doc = "Total Complexity: O(1)"]
					#[doc = "# </weight>"]
					unfound,
					#[codec(index = 9)]
					#[doc = "Allow suspension judgement origin to make judgement on a suspended member."]
					#[doc = ""]
					#[doc = "If a suspended member is forgiven, we simply add them back as a member, not affecting"]
					#[doc = "any of the existing storage items for that member."]
					#[doc = ""]
					#[doc = "If a suspended member is rejected, remove all associated storage items, including"]
					#[doc = "their payouts, and remove any vouched bids they currently have."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be from the _SuspensionJudgementOrigin_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `who` - The suspended member to be judged."]
					#[doc = "- `forgive` - A boolean representing whether the suspension judgement origin forgives"]
					#[doc = "  (`true`) or rejects (`false`) a suspended member."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Key: B (len of bids), M (len of members)"]
					#[doc = "- One storage read to check `who` is a suspended member. O(1)"]
					#[doc = "- Up to one storage write O(M) with O(log M) binary search to add a member back to"]
					#[doc = "  society."]
					#[doc = "- Up to 3 storage removals O(1) to clean up a removed member."]
					#[doc = "- Up to one storage write O(B) with O(B) search to remove vouched bid from bids."]
					#[doc = "- Up to one additional event if unvouch takes place."]
					#[doc = "- One storage removal. O(1)"]
					#[doc = "- One event for the judgement."]
					#[doc = ""]
					#[doc = "Total Complexity: O(M + logM + B)"]
					#[doc = "# </weight>"]
					judge_suspended_member {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						forgive: ::core::primitive::bool,
					},
					#[codec(index = 10)]
					#[doc = "Allow suspended judgement origin to make judgement on a suspended candidate."]
					#[doc = ""]
					#[doc = "If the judgement is `Approve`, we add them to society as a member with the appropriate"]
					#[doc = "payment for joining society."]
					#[doc = ""]
					#[doc = "If the judgement is `Reject`, we either slash the deposit of the bid, giving it back"]
					#[doc = "to the society treasury, or we ban the voucher from vouching again."]
					#[doc = ""]
					#[doc = "If the judgement is `Rebid`, we put the candidate back in the bid pool and let them go"]
					#[doc = "through the induction process again."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be from the _SuspensionJudgementOrigin_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `who` - The suspended candidate to be judged."]
					#[doc = "- `judgement` - `Approve`, `Reject`, or `Rebid`."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "Key: B (len of bids), M (len of members), X (balance action)"]
					#[doc = "- One storage read to check `who` is a suspended candidate."]
					#[doc = "- One storage removal of the suspended candidate."]
					#[doc = "- Approve Logic"]
					#[doc = "\t- One storage read to get the available pot to pay users with. O(1)"]
					#[doc = "\t- One storage write to update the available pot. O(1)"]
					#[doc = "\t- One storage read to get the current block number. O(1)"]
					#[doc = "\t- One storage read to get all members. O(M)"]
					#[doc = "\t- Up to one unreserve currency action."]
					#[doc = "\t- Up to two new storage writes to payouts."]
					#[doc = "\t- Up to one storage write with O(log M) binary search to add a member to society."]
					#[doc = "- Reject Logic"]
					#[doc = "\t- Up to one repatriate reserved currency action. O(X)"]
					#[doc = "\t- Up to one storage write to ban the vouching member from vouching again."]
					#[doc = "- Rebid Logic"]
					#[doc = "\t- Storage mutate with O(log B) binary search to place the user back into bids."]
					#[doc = "- Up to one additional event if unvouch takes place."]
					#[doc = "- One storage removal."]
					#[doc = "- One event for the judgement."]
					#[doc = ""]
					#[doc = "Total Complexity: O(M + logM + B + X)"]
					#[doc = "# </weight>"]
					judge_suspended_candidate {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						judgement: runtime_types::pallet_society::Judgement,
					},
					#[codec(index = 11)]
					#[doc = "Allows root origin to change the maximum number of members in society."]
					#[doc = "Max membership count must be greater than 1."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be from _ROOT_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `max` - The maximum number of members for the society."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- One storage write to update the max. O(1)"]
					#[doc = "- One event."]
					#[doc = ""]
					#[doc = "Total Complexity: O(1)"]
					#[doc = "# </weight>"]
					set_max_members { max: ::core::primitive::u32 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "An incorrect position was provided."]
					BadPosition,
					#[codec(index = 1)]
					#[doc = "User is not a member."]
					NotMember,
					#[codec(index = 2)]
					#[doc = "User is already a member."]
					AlreadyMember,
					#[codec(index = 3)]
					#[doc = "User is suspended."]
					Suspended,
					#[codec(index = 4)]
					#[doc = "User is not suspended."]
					NotSuspended,
					#[codec(index = 5)]
					#[doc = "Nothing to payout."]
					NoPayout,
					#[codec(index = 6)]
					#[doc = "Society already founded."]
					AlreadyFounded,
					#[codec(index = 7)]
					#[doc = "Not enough in pot to accept candidate."]
					InsufficientPot,
					#[codec(index = 8)]
					#[doc = "Member is already vouching or banned from vouching again."]
					AlreadyVouching,
					#[codec(index = 9)]
					#[doc = "Member is not vouching."]
					NotVouching,
					#[codec(index = 10)]
					#[doc = "Cannot remove the head of the chain."]
					Head,
					#[codec(index = 11)]
					#[doc = "Cannot remove the founder."]
					Founder,
					#[codec(index = 12)]
					#[doc = "User has already made a bid."]
					AlreadyBid,
					#[codec(index = 13)]
					#[doc = "User is already a candidate."]
					AlreadyCandidate,
					#[codec(index = 14)]
					#[doc = "User is not a candidate."]
					NotCandidate,
					#[codec(index = 15)]
					#[doc = "Too many members in the society."]
					MaxMembers,
					#[codec(index = 16)]
					#[doc = "The caller is not the founder."]
					NotFounder,
					#[codec(index = 17)]
					#[doc = "The caller is not the head."]
					NotHead,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "The society is founded by the given identity."]
					Founded { founder: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 1)]
					#[doc = "A membership bid just happened. The given account is the candidate's ID and their offer"]
					#[doc = "is the second."]
					Bid {
						candidate_id: ::subxt::ext::sp_core::crypto::AccountId32,
						offer: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "A membership bid just happened by vouching. The given account is the candidate's ID and"]
					#[doc = "their offer is the second. The vouching party is the third."]
					Vouch {
						candidate_id: ::subxt::ext::sp_core::crypto::AccountId32,
						offer: ::core::primitive::u128,
						vouching: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 3)]
					#[doc = "A candidate was dropped (due to an excess of bids in the system)."]
					AutoUnbid { candidate: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 4)]
					#[doc = "A candidate was dropped (by their request)."]
					Unbid { candidate: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 5)]
					#[doc = "A candidate was dropped (by request of who vouched for them)."]
					Unvouch { candidate: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 6)]
					#[doc = "A group of candidates have been inducted. The batch's primary is the first value, the"]
					#[doc = "batch in full is the second."]
					Inducted {
						primary: ::subxt::ext::sp_core::crypto::AccountId32,
						candidates: ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
					},
					#[codec(index = 7)]
					#[doc = "A suspended member has been judged."]
					SuspendedMemberJudgement {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						judged: ::core::primitive::bool,
					},
					#[codec(index = 8)]
					#[doc = "A candidate has been suspended"]
					CandidateSuspended { candidate: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 9)]
					#[doc = "A member has been suspended"]
					MemberSuspended { member: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 10)]
					#[doc = "A member has been challenged"]
					Challenged { member: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 11)]
					#[doc = "A vote has been placed"]
					Vote {
						candidate: ::subxt::ext::sp_core::crypto::AccountId32,
						voter: ::subxt::ext::sp_core::crypto::AccountId32,
						vote: ::core::primitive::bool,
					},
					#[codec(index = 12)]
					#[doc = "A vote has been placed for a defending member"]
					DefenderVote {
						voter: ::subxt::ext::sp_core::crypto::AccountId32,
						vote: ::core::primitive::bool,
					},
					#[codec(index = 13)]
					#[doc = "A new \\[max\\] member count has been set"]
					NewMaxMembers { max: ::core::primitive::u32 },
					#[codec(index = 14)]
					#[doc = "Society is unfounded."]
					Unfounded { founder: ::subxt::ext::sp_core::crypto::AccountId32 },
					#[codec(index = 15)]
					#[doc = "Some funds were deposited into the society account."]
					Deposit { value: ::core::primitive::u128 },
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Bid<_0, _1> {
				pub who: _0,
				pub kind: runtime_types::pallet_society::BidKind<_0, _1>,
				pub value: _1,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum BidKind<_0, _1> {
				#[codec(index = 0)]
				Deposit(_1),
				#[codec(index = 1)]
				Vouch(_0, _1),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum Judgement {
				#[codec(index = 0)]
				Rebid,
				#[codec(index = 1)]
				Reject,
				#[codec(index = 2)]
				Approve,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum Vote {
				#[codec(index = 0)]
				Skeptic,
				#[codec(index = 1)]
				Reject,
				#[codec(index = 2)]
				Approve,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum VouchingStatus {
				#[codec(index = 0)]
				Vouching,
				#[codec(index = 1)]
				Banned,
			}
		}
		pub mod pallet_staking {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
					pub enum Call {
						#[codec(index = 0)]
						#[doc = "Take the origin account as a stash and lock up `value` of its balance. `controller` will"]
						#[doc = "be the account that controls it."]
						#[doc = ""]
						#[doc = "`value` must be more than the `minimum_balance` specified by `T::Currency`."]
						#[doc = ""]
						#[doc = "The dispatch origin for this call must be _Signed_ by the stash account."]
						#[doc = ""]
						#[doc = "Emits `Bonded`."]
						#[doc = "# <weight>"]
						#[doc = "- Independent of the arguments. Moderate complexity."]
						#[doc = "- O(1)."]
						#[doc = "- Three extra DB entries."]
						#[doc = ""]
						#[doc = "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned"]
						#[doc = "unless the `origin` falls below _existential deposit_ and gets removed as dust."]
						#[doc = "------------------"]
						#[doc = "# </weight>"]
						bond {
							controller: ::subxt::ext::sp_runtime::MultiAddress<
								::subxt::ext::sp_core::crypto::AccountId32,
								(),
							>,
							#[codec(compact)]
							value: ::core::primitive::u128,
							payee: runtime_types::pallet_staking::RewardDestination<
								::subxt::ext::sp_core::crypto::AccountId32,
							>,
						},
						#[codec(index = 1)]
						#[doc = "Add some extra amount that have appeared in the stash `free_balance` into the balance up"]
						#[doc = "for staking."]
						#[doc = ""]
						#[doc = "The dispatch origin for this call must be _Signed_ by the stash, not the controller."]
						#[doc = ""]
						#[doc = "Use this if there are additional funds in your stash account that you wish to bond."]
						#[doc = "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose"]
						#[doc = "any limitation on the amount that can be added."]
						#[doc = ""]
						#[doc = "Emits `Bonded`."]
						#[doc = ""]
						#[doc = "# <weight>"]
						#[doc = "- Independent of the arguments. Insignificant complexity."]
						#[doc = "- O(1)."]
						#[doc = "# </weight>"]
						bond_extra {
							#[codec(compact)]
							max_additional: ::core::primitive::u128,
						},
						#[codec(index = 2)]
						#[doc = "Schedule a portion of the stash to be unlocked ready for transfer out after the bond"]
						#[doc = "period ends. If this leaves an amount actively bonded less than"]
						#[doc = "T::Currency::minimum_balance(), then it is increased to the full amount."]
						#[doc = ""]
						#[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
						#[doc = ""]
						#[doc = "Once the unlock period is done, you can call `withdraw_unbonded` to actually move"]
						#[doc = "the funds out of management ready for transfer."]
						#[doc = ""]
						#[doc = "No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)"]
						#[doc = "can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need"]
						#[doc = "to be called first to remove some of the chunks (if possible)."]
						#[doc = ""]
						#[doc = "If a user encounters the `InsufficientBond` error when calling this extrinsic,"]
						#[doc = "they should call `chill` first in order to free up their bonded funds."]
						#[doc = ""]
						#[doc = "Emits `Unbonded`."]
						#[doc = ""]
						#[doc = "See also [`Call::withdraw_unbonded`]."]
						unbond {
							#[codec(compact)]
							value: ::core::primitive::u128,
						},
						#[codec(index = 3)]
						#[doc = "Remove any unlocked chunks from the `unlocking` queue from our management."]
						#[doc = ""]
						#[doc = "This essentially frees up that balance to be used by the stash account to do"]
						#[doc = "whatever it wants."]
						#[doc = ""]
						#[doc = "The dispatch origin for this call must be _Signed_ by the controller."]
						#[doc = ""]
						#[doc = "Emits `Withdrawn`."]
						#[doc = ""]
						#[doc = "See also [`Call::unbond`]."]
						#[doc = ""]
						#[doc = "# <weight>"]
						#[doc = "Complexity O(S) where S is the number of slashing spans to remove"]
						#[doc = "NOTE: Weight annotation is the kill scenario, we refund otherwise."]
						#[doc = "# </weight>"]
						withdraw_unbonded { num_slashing_spans: ::core::primitive::u32 },
						#[codec(index = 4)]
						#[doc = "Declare the desire to validate for the origin controller."]
						#[doc = ""]
						#[doc = "Effects will be felt at the beginning of the next era."]
						#[doc = ""]
						#[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
						validate { prefs: runtime_types::pallet_staking::ValidatorPrefs },
						#[codec(index = 5)]
						#[doc = "Declare the desire to nominate `targets` for the origin controller."]
						#[doc = ""]
						#[doc = "Effects will be felt at the beginning of the next era."]
						#[doc = ""]
						#[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
						#[doc = ""]
						#[doc = "# <weight>"]
						#[doc = "- The transaction's complexity is proportional to the size of `targets` (N)"]
						#[doc = "which is capped at CompactAssignments::LIMIT (T::MaxNominations)."]
						#[doc = "- Both the reads and writes follow a similar pattern."]
						#[doc = "# </weight>"]
						nominate {
							targets: ::std::vec::Vec<
								::subxt::ext::sp_runtime::MultiAddress<
									::subxt::ext::sp_core::crypto::AccountId32,
									(),
								>,
							>,
						},
						#[codec(index = 6)]
						#[doc = "Declare no desire to either validate or nominate."]
						#[doc = ""]
						#[doc = "Effects will be felt at the beginning of the next era."]
						#[doc = ""]
						#[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
						#[doc = ""]
						#[doc = "# <weight>"]
						#[doc = "- Independent of the arguments. Insignificant complexity."]
						#[doc = "- Contains one read."]
						#[doc = "- Writes are limited to the `origin` account key."]
						#[doc = "# </weight>"]
						chill,
						#[codec(index = 7)]
						#[doc = "(Re-)set the payment target for a controller."]
						#[doc = ""]
						#[doc = "Effects will be felt instantly (as soon as this function is completed successfully)."]
						#[doc = ""]
						#[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
						#[doc = ""]
						#[doc = "# <weight>"]
						#[doc = "- Independent of the arguments. Insignificant complexity."]
						#[doc = "- Contains a limited number of reads."]
						#[doc = "- Writes are limited to the `origin` account key."]
						#[doc = "---------"]
						#[doc = "- Weight: O(1)"]
						#[doc = "- DB Weight:"]
						#[doc = "    - Read: Ledger"]
						#[doc = "    - Write: Payee"]
						#[doc = "# </weight>"]
						set_payee {
							payee: runtime_types::pallet_staking::RewardDestination<
								::subxt::ext::sp_core::crypto::AccountId32,
							>,
						},
						#[codec(index = 8)]
						#[doc = "(Re-)set the controller of a stash."]
						#[doc = ""]
						#[doc = "Effects will be felt instantly (as soon as this function is completed successfully)."]
						#[doc = ""]
						#[doc = "The dispatch origin for this call must be _Signed_ by the stash, not the controller."]
						#[doc = ""]
						#[doc = "# <weight>"]
						#[doc = "- Independent of the arguments. Insignificant complexity."]
						#[doc = "- Contains a limited number of reads."]
						#[doc = "- Writes are limited to the `origin` account key."]
						#[doc = "----------"]
						#[doc = "Weight: O(1)"]
						#[doc = "DB Weight:"]
						#[doc = "- Read: Bonded, Ledger New Controller, Ledger Old Controller"]
						#[doc = "- Write: Bonded, Ledger New Controller, Ledger Old Controller"]
						#[doc = "# </weight>"]
						set_controller {
							controller: ::subxt::ext::sp_runtime::MultiAddress<
								::subxt::ext::sp_core::crypto::AccountId32,
								(),
							>,
						},
						#[codec(index = 9)]
						#[doc = "Sets the ideal number of validators."]
						#[doc = ""]
						#[doc = "The dispatch origin must be Root."]
						#[doc = ""]
						#[doc = "# <weight>"]
						#[doc = "Weight: O(1)"]
						#[doc = "Write: Validator Count"]
						#[doc = "# </weight>"]
						set_validator_count {
							#[codec(compact)]
							new: ::core::primitive::u32,
						},
						#[codec(index = 10)]
						#[doc = "Increments the ideal number of validators."]
						#[doc = ""]
						#[doc = "The dispatch origin must be Root."]
						#[doc = ""]
						#[doc = "# <weight>"]
						#[doc = "Same as [`Self::set_validator_count`]."]
						#[doc = "# </weight>"]
						increase_validator_count {
							#[codec(compact)]
							additional: ::core::primitive::u32,
						},
						#[codec(index = 11)]
						#[doc = "Scale up the ideal number of validators by a factor."]
						#[doc = ""]
						#[doc = "The dispatch origin must be Root."]
						#[doc = ""]
						#[doc = "# <weight>"]
						#[doc = "Same as [`Self::set_validator_count`]."]
						#[doc = "# </weight>"]
						scale_validator_count {
							factor: runtime_types::sp_arithmetic::per_things::Percent,
						},
						#[codec(index = 12)]
						#[doc = "Force there to be no new eras indefinitely."]
						#[doc = ""]
						#[doc = "The dispatch origin must be Root."]
						#[doc = ""]
						#[doc = "# Warning"]
						#[doc = ""]
						#[doc = "The election process starts multiple blocks before the end of the era."]
						#[doc = "Thus the election process may be ongoing when this is called. In this case the"]
						#[doc = "election will continue until the next era is triggered."]
						#[doc = ""]
						#[doc = "# <weight>"]
						#[doc = "- No arguments."]
						#[doc = "- Weight: O(1)"]
						#[doc = "- Write: ForceEra"]
						#[doc = "# </weight>"]
						force_no_eras,
						#[codec(index = 13)]
						#[doc = "Force there to be a new era at the end of the next session. After this, it will be"]
						#[doc = "reset to normal (non-forced) behaviour."]
						#[doc = ""]
						#[doc = "The dispatch origin must be Root."]
						#[doc = ""]
						#[doc = "# Warning"]
						#[doc = ""]
						#[doc = "The election process starts multiple blocks before the end of the era."]
						#[doc = "If this is called just before a new era is triggered, the election process may not"]
						#[doc = "have enough blocks to get a result."]
						#[doc = ""]
						#[doc = "# <weight>"]
						#[doc = "- No arguments."]
						#[doc = "- Weight: O(1)"]
						#[doc = "- Write ForceEra"]
						#[doc = "# </weight>"]
						force_new_era,
						#[codec(index = 14)]
						#[doc = "Set the validators who cannot be slashed (if any)."]
						#[doc = ""]
						#[doc = "The dispatch origin must be Root."]
						set_invulnerables {
							invulnerables:
								::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
						},
						#[codec(index = 15)]
						#[doc = "Force a current staker to become completely unstaked, immediately."]
						#[doc = ""]
						#[doc = "The dispatch origin must be Root."]
						force_unstake {
							stash: ::subxt::ext::sp_core::crypto::AccountId32,
							num_slashing_spans: ::core::primitive::u32,
						},
						#[codec(index = 16)]
						#[doc = "Force there to be a new era at the end of sessions indefinitely."]
						#[doc = ""]
						#[doc = "The dispatch origin must be Root."]
						#[doc = ""]
						#[doc = "# Warning"]
						#[doc = ""]
						#[doc = "The election process starts multiple blocks before the end of the era."]
						#[doc = "If this is called just before a new era is triggered, the election process may not"]
						#[doc = "have enough blocks to get a result."]
						force_new_era_always,
						#[codec(index = 17)]
						#[doc = "Cancel enactment of a deferred slash."]
						#[doc = ""]
						#[doc = "Can be called by the `T::SlashCancelOrigin`."]
						#[doc = ""]
						#[doc = "Parameters: era and indices of the slashes for that era to kill."]
						cancel_deferred_slash {
							era: ::core::primitive::u32,
							slash_indices: ::std::vec::Vec<::core::primitive::u32>,
						},
						#[codec(index = 18)]
						#[doc = "Pay out all the stakers behind a single validator for a single era."]
						#[doc = ""]
						#[doc = "- `validator_stash` is the stash account of the validator. Their nominators, up to"]
						#[doc = "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards."]
						#[doc = "- `era` may be any era between `[current_era - history_depth; current_era]`."]
						#[doc = ""]
						#[doc = "The origin of this call must be _Signed_. Any account can call this function, even if"]
						#[doc = "it is not one of the stakers."]
						#[doc = ""]
						#[doc = "# <weight>"]
						#[doc = "- Time complexity: at most O(MaxNominatorRewardedPerValidator)."]
						#[doc = "- Contains a limited number of reads and writes."]
						#[doc = "-----------"]
						#[doc = "N is the Number of payouts for the validator (including the validator)"]
						#[doc = "Weight:"]
						#[doc = "- Reward Destination Staked: O(N)"]
						#[doc = "- Reward Destination Controller (Creating): O(N)"]
						#[doc = ""]
						#[doc = "  NOTE: weights are assuming that payouts are made to alive stash account (Staked)."]
						#[doc = "  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here."]
						#[doc = "# </weight>"]
						payout_stakers {
							validator_stash: ::subxt::ext::sp_core::crypto::AccountId32,
							era: ::core::primitive::u32,
						},
						#[codec(index = 19)]
						#[doc = "Rebond a portion of the stash scheduled to be unlocked."]
						#[doc = ""]
						#[doc = "The dispatch origin must be signed by the controller."]
						#[doc = ""]
						#[doc = "# <weight>"]
						#[doc = "- Time complexity: O(L), where L is unlocking chunks"]
						#[doc = "- Bounded by `MaxUnlockingChunks`."]
						#[doc = "- Storage changes: Can't increase storage, only decrease it."]
						#[doc = "# </weight>"]
						rebond {
							#[codec(compact)]
							value: ::core::primitive::u128,
						},
						#[codec(index = 20)]
						#[doc = "Set `HistoryDepth` value. This function will delete any history information"]
						#[doc = "when `HistoryDepth` is reduced."]
						#[doc = ""]
						#[doc = "Parameters:"]
						#[doc = "- `new_history_depth`: The new history depth you would like to set."]
						#[doc = "- `era_items_deleted`: The number of items that will be deleted by this dispatch. This"]
						#[doc = "  should report all the storage items that will be deleted by clearing old era history."]
						#[doc = "  Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an"]
						#[doc = "  accurate number."]
						#[doc = ""]
						#[doc = "Origin must be root."]
						#[doc = ""]
						#[doc = "# <weight>"]
						#[doc = "- E: Number of history depths removed, i.e. 10 -> 7 = 3"]
						#[doc = "- Weight: O(E)"]
						#[doc = "- DB Weight:"]
						#[doc = "    - Reads: Current Era, History Depth"]
						#[doc = "    - Writes: History Depth"]
						#[doc = "    - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs"]
						#[doc = "    - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,"]
						#[doc = "      ErasStartSessionIndex"]
						#[doc = "# </weight>"]
						set_history_depth {
							#[codec(compact)]
							new_history_depth: ::core::primitive::u32,
							#[codec(compact)]
							era_items_deleted: ::core::primitive::u32,
						},
						#[codec(index = 21)]
						#[doc = "Remove all data structures concerning a staker/stash once it is at a state where it can"]
						#[doc = "be considered `dust` in the staking system. The requirements are:"]
						#[doc = ""]
						#[doc = "1. the `total_balance` of the stash is below existential deposit."]
						#[doc = "2. or, the `ledger.total` of the stash is below existential deposit."]
						#[doc = ""]
						#[doc = "The former can happen in cases like a slash; the latter when a fully unbonded account"]
						#[doc = "is still receiving staking rewards in `RewardDestination::Staked`."]
						#[doc = ""]
						#[doc = "It can be called by anyone, as long as `stash` meets the above requirements."]
						#[doc = ""]
						#[doc = "Refunds the transaction fees upon successful execution."]
						reap_stash {
							stash: ::subxt::ext::sp_core::crypto::AccountId32,
							num_slashing_spans: ::core::primitive::u32,
						},
						#[codec(index = 22)]
						#[doc = "Remove the given nominations from the calling validator."]
						#[doc = ""]
						#[doc = "Effects will be felt at the beginning of the next era."]
						#[doc = ""]
						#[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
						#[doc = ""]
						#[doc = "- `who`: A list of nominator stash accounts who are nominating this validator which"]
						#[doc = "  should no longer be nominating this validator."]
						#[doc = ""]
						#[doc = "Note: Making this call only makes sense if you first set the validator preferences to"]
						#[doc = "block any further nominations."]
						kick {
							who: ::std::vec::Vec<
								::subxt::ext::sp_runtime::MultiAddress<
									::subxt::ext::sp_core::crypto::AccountId32,
									(),
								>,
							>,
						},
						#[codec(index = 23)]
						#[doc = "Update the various staking configurations ."]
						#[doc = ""]
						#[doc = "* `min_nominator_bond`: The minimum active bond needed to be a nominator."]
						#[doc = "* `min_validator_bond`: The minimum active bond needed to be a validator."]
						#[doc = "* `max_nominator_count`: The max number of users who can be a nominator at once. When"]
						#[doc = "  set to `None`, no limit is enforced."]
						#[doc = "* `max_validator_count`: The max number of users who can be a validator at once. When"]
						#[doc = "  set to `None`, no limit is enforced."]
						#[doc = "* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which"]
						#[doc = "  should be filled in order for the `chill_other` transaction to work."]
						#[doc = "* `min_commission`: The minimum amount of commission that each validators must maintain."]
						#[doc = "  This is checked only upon calling `validate`. Existing validators are not affected."]
						#[doc = ""]
						#[doc = "Origin must be Root to call this function."]
						#[doc = ""]
						#[doc = "NOTE: Existing nominators and validators will not be affected by this update."]
						#[doc = "to kick people under the new limits, `chill_other` should be called."]
						set_staking_configs {
							min_nominator_bond:
								runtime_types::pallet_staking::pallet::pallet::ConfigOp<
									::core::primitive::u128,
								>,
							min_validator_bond:
								runtime_types::pallet_staking::pallet::pallet::ConfigOp<
									::core::primitive::u128,
								>,
							max_nominator_count:
								runtime_types::pallet_staking::pallet::pallet::ConfigOp<
									::core::primitive::u32,
								>,
							max_validator_count:
								runtime_types::pallet_staking::pallet::pallet::ConfigOp<
									::core::primitive::u32,
								>,
							chill_threshold:
								runtime_types::pallet_staking::pallet::pallet::ConfigOp<
									runtime_types::sp_arithmetic::per_things::Percent,
								>,
							min_commission: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
								runtime_types::sp_arithmetic::per_things::Perbill,
							>,
						},
						#[codec(index = 24)]
						#[doc = "Declare a `controller` to stop participating as either a validator or nominator."]
						#[doc = ""]
						#[doc = "Effects will be felt at the beginning of the next era."]
						#[doc = ""]
						#[doc = "The dispatch origin for this call must be _Signed_, but can be called by anyone."]
						#[doc = ""]
						#[doc = "If the caller is the same as the controller being targeted, then no further checks are"]
						#[doc = "enforced, and this function behaves just like `chill`."]
						#[doc = ""]
						#[doc = "If the caller is different than the controller being targeted, the following conditions"]
						#[doc = "must be met:"]
						#[doc = ""]
						#[doc = "* `controller` must belong to a nominator who has become non-decodable,"]
						#[doc = ""]
						#[doc = "Or:"]
						#[doc = ""]
						#[doc = "* A `ChillThreshold` must be set and checked which defines how close to the max"]
						#[doc = "  nominators or validators we must reach before users can start chilling one-another."]
						#[doc = "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine"]
						#[doc = "  how close we are to the threshold."]
						#[doc = "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines"]
						#[doc = "  if this is a person that should be chilled because they have not met the threshold"]
						#[doc = "  bond required."]
						#[doc = ""]
						#[doc = "This can be helpful if bond requirements are updated, and we need to remove old users"]
						#[doc = "who do not satisfy these requirements."]
						chill_other { controller: ::subxt::ext::sp_core::crypto::AccountId32 },
						#[codec(index = 25)]
						#[doc = "Force a validator to have at least the minimum commission. This will not affect a"]
						#[doc = "validator who already has a commission greater than or equal to the minimum. Any account"]
						#[doc = "can call this."]
						force_apply_min_commission {
							validator_stash: ::subxt::ext::sp_core::crypto::AccountId32,
						},
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum ConfigOp<_0> {
						#[codec(index = 0)]
						Noop,
						#[codec(index = 1)]
						Set(_0),
						#[codec(index = 2)]
						Remove,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
					pub enum Error {
						#[codec(index = 0)]
						#[doc = "Not a controller account."]
						NotController,
						#[codec(index = 1)]
						#[doc = "Not a stash account."]
						NotStash,
						#[codec(index = 2)]
						#[doc = "Stash is already bonded."]
						AlreadyBonded,
						#[codec(index = 3)]
						#[doc = "Controller is already paired."]
						AlreadyPaired,
						#[codec(index = 4)]
						#[doc = "Targets cannot be empty."]
						EmptyTargets,
						#[codec(index = 5)]
						#[doc = "Duplicate index."]
						DuplicateIndex,
						#[codec(index = 6)]
						#[doc = "Slash record index out of bounds."]
						InvalidSlashIndex,
						#[codec(index = 7)]
						#[doc = "Cannot have a validator or nominator role, with value less than the minimum defined by"]
						#[doc = "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the"]
						#[doc = "intention, `chill` first to remove one's role as validator/nominator."]
						InsufficientBond,
						#[codec(index = 8)]
						#[doc = "Can not schedule more unlock chunks."]
						NoMoreChunks,
						#[codec(index = 9)]
						#[doc = "Can not rebond without unlocking chunks."]
						NoUnlockChunk,
						#[codec(index = 10)]
						#[doc = "Attempting to target a stash that still has funds."]
						FundedTarget,
						#[codec(index = 11)]
						#[doc = "Invalid era to reward."]
						InvalidEraToReward,
						#[codec(index = 12)]
						#[doc = "Invalid number of nominations."]
						InvalidNumberOfNominations,
						#[codec(index = 13)]
						#[doc = "Items are not sorted and unique."]
						NotSortedAndUnique,
						#[codec(index = 14)]
						#[doc = "Rewards for this era have already been claimed for this validator."]
						AlreadyClaimed,
						#[codec(index = 15)]
						#[doc = "Incorrect previous history depth input provided."]
						IncorrectHistoryDepth,
						#[codec(index = 16)]
						#[doc = "Incorrect number of slashing spans provided."]
						IncorrectSlashingSpans,
						#[codec(index = 17)]
						#[doc = "Internal state has become somehow corrupted and the operation cannot continue."]
						BadState,
						#[codec(index = 18)]
						#[doc = "Too many nomination targets supplied."]
						TooManyTargets,
						#[codec(index = 19)]
						#[doc = "A nomination target was supplied that was blocked or otherwise not a validator."]
						BadTarget,
						#[codec(index = 20)]
						#[doc = "The user has enough bond and thus cannot be chilled forcefully by an external person."]
						CannotChillOther,
						#[codec(index = 21)]
						#[doc = "There are too many nominators in the system. Governance needs to adjust the staking"]
						#[doc = "settings to keep things safe for the runtime."]
						TooManyNominators,
						#[codec(index = 22)]
						#[doc = "There are too many validators in the system. Governance needs to adjust the staking"]
						#[doc = "settings to keep things safe for the runtime."]
						TooManyValidators,
						#[codec(index = 23)]
						#[doc = "Commission is too low. Must be at least `MinCommission`."]
						CommissionTooLow,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
					pub enum Event {
						#[codec(index = 0)]
						#[doc = "The era payout has been set; the first balance is the validator-payout; the second is"]
						#[doc = "the remainder from the maximum amount of reward."]
						#[doc = "\\[era_index, validator_payout, remainder\\]"]
						EraPaid(
							::core::primitive::u32,
							::core::primitive::u128,
							::core::primitive::u128,
						),
						#[codec(index = 1)]
						#[doc = "The nominator has been rewarded by this amount. \\[stash, amount\\]"]
						Rewarded(
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						),
						#[codec(index = 2)]
						#[doc = "One validator (and its nominators) has been slashed by the given amount."]
						#[doc = "\\[validator, amount\\]"]
						Slashed(
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						),
						#[codec(index = 3)]
						#[doc = "An old slashing report from a prior era was discarded because it could"]
						#[doc = "not be processed. \\[session_index\\]"]
						OldSlashingReportDiscarded(::core::primitive::u32),
						#[codec(index = 4)]
						#[doc = "A new set of stakers was elected."]
						StakersElected,
						#[codec(index = 5)]
						#[doc = "An account has bonded this amount. \\[stash, amount\\]"]
						#[doc = ""]
						#[doc = "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,"]
						#[doc = "it will not be emitted for staking rewards when they are added to stake."]
						Bonded(::subxt::ext::sp_core::crypto::AccountId32, ::core::primitive::u128),
						#[codec(index = 6)]
						#[doc = "An account has unbonded this amount. \\[stash, amount\\]"]
						Unbonded(
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						),
						#[codec(index = 7)]
						#[doc = "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`"]
						#[doc = "from the unlocking queue. \\[stash, amount\\]"]
						Withdrawn(
							::subxt::ext::sp_core::crypto::AccountId32,
							::core::primitive::u128,
						),
						#[codec(index = 8)]
						#[doc = "A nominator has been kicked from a validator. \\[nominator, stash\\]"]
						Kicked(
							::subxt::ext::sp_core::crypto::AccountId32,
							::subxt::ext::sp_core::crypto::AccountId32,
						),
						#[codec(index = 9)]
						#[doc = "The election failed. No new era is planned."]
						StakingElectionFailed,
						#[codec(index = 10)]
						#[doc = "An account has stopped participating as either a validator or nominator."]
						#[doc = "\\[stash\\]"]
						Chilled(::subxt::ext::sp_core::crypto::AccountId32),
						#[codec(index = 11)]
						#[doc = "The stakers' rewards are getting paid. \\[era_index, validator_stash\\]"]
						PayoutStarted(
							::core::primitive::u32,
							::subxt::ext::sp_core::crypto::AccountId32,
						),
						#[codec(index = 12)]
						#[doc = "A validator has set their preferences."]
						ValidatorPrefsSet(
							::subxt::ext::sp_core::crypto::AccountId32,
							runtime_types::pallet_staking::ValidatorPrefs,
						),
					}
				}
			}
			pub mod slashing {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct SlashingSpans {
					pub span_index: ::core::primitive::u32,
					pub last_start: ::core::primitive::u32,
					pub last_nonzero_slash: ::core::primitive::u32,
					pub prior: ::std::vec::Vec<::core::primitive::u32>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct SpanRecord<_0> {
					pub slashed: _0,
					pub paid_out: _0,
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ActiveEraInfo {
				pub index: ::core::primitive::u32,
				pub start: ::core::option::Option<::core::primitive::u64>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct EraRewardPoints<_0> {
				pub total: ::core::primitive::u32,
				pub individual: ::subxt::utils::KeyedVec<_0, ::core::primitive::u32>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Exposure<_0, _1> {
				#[codec(compact)]
				pub total: _1,
				#[codec(compact)]
				pub own: _1,
				pub others:
					::std::vec::Vec<runtime_types::pallet_staking::IndividualExposure<_0, _1>>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum Forcing {
				#[codec(index = 0)]
				NotForcing,
				#[codec(index = 1)]
				ForceNew,
				#[codec(index = 2)]
				ForceNone,
				#[codec(index = 3)]
				ForceAlways,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct IndividualExposure<_0, _1> {
				pub who: _0,
				#[codec(compact)]
				pub value: _1,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Nominations {
				pub targets: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
					::subxt::ext::sp_core::crypto::AccountId32,
				>,
				pub submitted_in: ::core::primitive::u32,
				pub suppressed: ::core::primitive::bool,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum Releases {
				#[codec(index = 0)]
				V1_0_0Ancient,
				#[codec(index = 1)]
				V2_0_0,
				#[codec(index = 2)]
				V3_0_0,
				#[codec(index = 3)]
				V4_0_0,
				#[codec(index = 4)]
				V5_0_0,
				#[codec(index = 5)]
				V6_0_0,
				#[codec(index = 6)]
				V7_0_0,
				#[codec(index = 7)]
				V8_0_0,
				#[codec(index = 8)]
				V9_0_0,
				#[codec(index = 9)]
				V10_0_0,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum RewardDestination<_0> {
				#[codec(index = 0)]
				Staked,
				#[codec(index = 1)]
				Stash,
				#[codec(index = 2)]
				Controller,
				#[codec(index = 3)]
				Account(_0),
				#[codec(index = 4)]
				None,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct StakingLedger {
				pub stash: ::subxt::ext::sp_core::crypto::AccountId32,
				#[codec(compact)]
				pub total: ::core::primitive::u128,
				#[codec(compact)]
				pub active: ::core::primitive::u128,
				pub unlocking: runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
					runtime_types::pallet_staking::UnlockChunk<::core::primitive::u128>,
				>,
				pub claimed_rewards: ::std::vec::Vec<::core::primitive::u32>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct UnappliedSlash<_0, _1> {
				pub validator: _0,
				pub own: _1,
				pub others: ::std::vec::Vec<(_0, _1)>,
				pub reporters: ::std::vec::Vec<_0>,
				pub payout: _1,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct UnlockChunk<_0> {
				#[codec(compact)]
				pub value: _0,
				#[codec(compact)]
				pub era: ::core::primitive::u32,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ValidatorPrefs {
				#[codec(compact)]
				pub commission: runtime_types::sp_arithmetic::per_things::Perbill,
				pub blocked: ::core::primitive::bool,
			}
		}
		pub mod pallet_timestamp {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Set the current time."]
					#[doc = ""]
					#[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
					#[doc = "phase, if this call hasn't been invoked by that time."]
					#[doc = ""]
					#[doc = "The timestamp should be greater than the previous one by the amount specified by"]
					#[doc = "`MinimumPeriod`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be `Inherent`."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
					#[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
					#[doc = "  `on_finalize`)"]
					#[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
					#[doc = "# </weight>"]
					set {
						#[codec(compact)]
						now: ::core::primitive::u64,
					},
				}
			}
		}
		pub mod pallet_tips {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Report something `reason` that deserves a tip and claim any eventual the finder's fee."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as"]
					#[doc = "`DataDepositPerByte` for each byte in `reason`."]
					#[doc = ""]
					#[doc = "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be"]
					#[doc = "  a UTF-8-encoded URL."]
					#[doc = "- `who`: The account which should be credited for the tip."]
					#[doc = ""]
					#[doc = "Emits `NewTip` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: `O(R)` where `R` length of `reason`."]
					#[doc = "  - encoding and hashing of 'reason'"]
					#[doc = "- DbReads: `Reasons`, `Tips`"]
					#[doc = "- DbWrites: `Reasons`, `Tips`"]
					#[doc = "# </weight>"]
					report_awesome {
						reason: ::std::vec::Vec<::core::primitive::u8>,
						who: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 1)]
					#[doc = "Retract a prior tip-report from `report_awesome`, and cancel the process of tipping."]
					#[doc = ""]
					#[doc = "If successful, the original deposit will be unreserved."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the tip identified by `hash`"]
					#[doc = "must have been reported by the signing account through `report_awesome` (and not"]
					#[doc = "through `tip_new`)."]
					#[doc = ""]
					#[doc = "- `hash`: The identity of the open tip for which a tip value is declared. This is formed"]
					#[doc = "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID."]
					#[doc = ""]
					#[doc = "Emits `TipRetracted` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: `O(1)`"]
					#[doc = "  - Depends on the length of `T::Hash` which is fixed."]
					#[doc = "- DbReads: `Tips`, `origin account`"]
					#[doc = "- DbWrites: `Reasons`, `Tips`, `origin account`"]
					#[doc = "# </weight>"]
					retract_tip { hash: ::subxt::ext::sp_core::H256 },
					#[codec(index = 2)]
					#[doc = "Give a tip for something new; no finder's fee will be taken."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the signing account must be a"]
					#[doc = "member of the `Tippers` set."]
					#[doc = ""]
					#[doc = "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be"]
					#[doc = "  a UTF-8-encoded URL."]
					#[doc = "- `who`: The account which should be credited for the tip."]
					#[doc = "- `tip_value`: The amount of tip that the sender would like to give. The median tip"]
					#[doc = "  value of active tippers will be given to the `who`."]
					#[doc = ""]
					#[doc = "Emits `NewTip` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers."]
					#[doc = "  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound given by"]
					#[doc = "    `ContainsLengthBound`. The actual cost depends on the implementation of"]
					#[doc = "    `T::Tippers`."]
					#[doc = "  - `O(R)`: hashing and encoding of reason of length `R`"]
					#[doc = "- DbReads: `Tippers`, `Reasons`"]
					#[doc = "- DbWrites: `Reasons`, `Tips`"]
					#[doc = "# </weight>"]
					tip_new {
						reason: ::std::vec::Vec<::core::primitive::u8>,
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						#[codec(compact)]
						tip_value: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "Declare a tip value for an already-open tip."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the signing account must be a"]
					#[doc = "member of the `Tippers` set."]
					#[doc = ""]
					#[doc = "- `hash`: The identity of the open tip for which a tip value is declared. This is formed"]
					#[doc = "  as the hash of the tuple of the hash of the original tip `reason` and the beneficiary"]
					#[doc = "  account ID."]
					#[doc = "- `tip_value`: The amount of tip that the sender would like to give. The median tip"]
					#[doc = "  value of active tippers will be given to the `who`."]
					#[doc = ""]
					#[doc = "Emits `TipClosing` if the threshold of tippers has been reached and the countdown period"]
					#[doc = "has started."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length"]
					#[doc = "  `T`, insert tip and check closing, `T` is charged as upper bound given by"]
					#[doc = "  `ContainsLengthBound`. The actual cost depends on the implementation of `T::Tippers`."]
					#[doc = ""]
					#[doc = "  Actually weight could be lower as it depends on how many tips are in `OpenTip` but it"]
					#[doc = "  is weighted as if almost full i.e of length `T-1`."]
					#[doc = "- DbReads: `Tippers`, `Tips`"]
					#[doc = "- DbWrites: `Tips`"]
					#[doc = "# </weight>"]
					tip {
						hash: ::subxt::ext::sp_core::H256,
						#[codec(compact)]
						tip_value: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Close and payout a tip."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "The tip identified by `hash` must have finished its countdown period."]
					#[doc = ""]
					#[doc = "- `hash`: The identity of the open tip for which a tip value is declared. This is formed"]
					#[doc = "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length"]
					#[doc = "  `T`. `T` is charged as upper bound given by `ContainsLengthBound`. The actual cost"]
					#[doc = "  depends on the implementation of `T::Tippers`."]
					#[doc = "- DbReads: `Tips`, `Tippers`, `tip finder`"]
					#[doc = "- DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`"]
					#[doc = "# </weight>"]
					close_tip { hash: ::subxt::ext::sp_core::H256 },
					#[codec(index = 5)]
					#[doc = "Remove and slash an already-open tip."]
					#[doc = ""]
					#[doc = "May only be called from `T::RejectOrigin`."]
					#[doc = ""]
					#[doc = "As a result, the finder is slashed and the deposits are lost."]
					#[doc = ""]
					#[doc = "Emits `TipSlashed` if successful."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "  `T` is charged as upper bound given by `ContainsLengthBound`."]
					#[doc = "  The actual cost depends on the implementation of `T::Tippers`."]
					#[doc = "# </weight>"]
					slash_tip { hash: ::subxt::ext::sp_core::H256 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The reason given is just too big."]
					ReasonTooBig,
					#[codec(index = 1)]
					#[doc = "The tip was already found/started."]
					AlreadyKnown,
					#[codec(index = 2)]
					#[doc = "The tip hash is unknown."]
					UnknownTip,
					#[codec(index = 3)]
					#[doc = "The account attempting to retract the tip is not the finder of the tip."]
					NotFinder,
					#[codec(index = 4)]
					#[doc = "The tip cannot be claimed/closed because there are not enough tippers yet."]
					StillOpen,
					#[codec(index = 5)]
					#[doc = "The tip cannot be claimed/closed because it's still in the countdown period."]
					Premature,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A new tip suggestion has been opened."]
					NewTip { tip_hash: ::subxt::ext::sp_core::H256 },
					#[codec(index = 1)]
					#[doc = "A tip suggestion has reached threshold and is closing."]
					TipClosing { tip_hash: ::subxt::ext::sp_core::H256 },
					#[codec(index = 2)]
					#[doc = "A tip suggestion has been closed."]
					TipClosed {
						tip_hash: ::subxt::ext::sp_core::H256,
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						payout: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "A tip suggestion has been retracted."]
					TipRetracted { tip_hash: ::subxt::ext::sp_core::H256 },
					#[codec(index = 4)]
					#[doc = "A tip suggestion has been slashed."]
					TipSlashed {
						tip_hash: ::subxt::ext::sp_core::H256,
						finder: ::subxt::ext::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct OpenTip<_0, _1, _2, _3> {
				pub reason: _3,
				pub who: _0,
				pub finder: _0,
				pub deposit: _1,
				pub closes: ::core::option::Option<_2>,
				pub tips: ::std::vec::Vec<(_0, _1)>,
				pub finders_fee: ::core::primitive::bool,
			}
		}
		pub mod pallet_transaction_payment {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
					#[doc = "has been paid by `who`."]
					TransactionFeePaid {
						who: ::subxt::ext::sp_core::crypto::AccountId32,
						actual_fee: ::core::primitive::u128,
						tip: ::core::primitive::u128,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ChargeTransactionPayment(#[codec(compact)] pub ::core::primitive::u128);
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum Releases {
				#[codec(index = 0)]
				V1Ancient,
				#[codec(index = 1)]
				V2,
			}
		}
		pub mod pallet_treasury {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Put forward a suggestion for spending. A deposit proportional to the value"]
					#[doc = "is reserved and slashed if the proposal is rejected. It is returned once the"]
					#[doc = "proposal is awarded."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: O(1)"]
					#[doc = "- DbReads: `ProposalCount`, `origin account`"]
					#[doc = "- DbWrites: `ProposalCount`, `Proposals`, `origin account`"]
					#[doc = "# </weight>"]
					propose_spend {
						#[codec(compact)]
						value: ::core::primitive::u128,
						beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
					},
					#[codec(index = 1)]
					#[doc = "Reject a proposed spend. The original deposit will be slashed."]
					#[doc = ""]
					#[doc = "May only be called from `T::RejectOrigin`."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: O(1)"]
					#[doc = "- DbReads: `Proposals`, `rejected proposer account`"]
					#[doc = "- DbWrites: `Proposals`, `rejected proposer account`"]
					#[doc = "# </weight>"]
					reject_proposal {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary"]
					#[doc = "and the original deposit will be returned."]
					#[doc = ""]
					#[doc = "May only be called from `T::ApproveOrigin`."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: O(1)."]
					#[doc = "- DbReads: `Proposals`, `Approvals`"]
					#[doc = "- DbWrite: `Approvals`"]
					#[doc = "# </weight>"]
					approve_proposal {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "Propose and approve a spend of treasury funds."]
					#[doc = ""]
					#[doc = "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`."]
					#[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
					#[doc = "- `beneficiary`: The destination account for the transfer."]
					#[doc = ""]
					#[doc = "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the"]
					#[doc = "beneficiary."]
					spend {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
					},
					#[codec(index = 4)]
					#[doc = "Force a previously approved proposal to be removed from the approval queue."]
					#[doc = "The original deposit will no longer be returned."]
					#[doc = ""]
					#[doc = "May only be called from `T::RejectOrigin`."]
					#[doc = "- `proposal_id`: The index of a proposal"]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: O(A) where `A` is the number of approvals"]
					#[doc = "- Db reads and writes: `Approvals`"]
					#[doc = "# </weight>"]
					#[doc = ""]
					#[doc = "Errors:"]
					#[doc = "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,"]
					#[doc = "i.e., the proposal has not been approved. This could also mean the proposal does not"]
					#[doc = "exist altogether, thus there is no way it would have been approved in the first place."]
					remove_approval {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Error for the treasury pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Proposer's balance is too low."]
					InsufficientProposersBalance,
					#[codec(index = 1)]
					#[doc = "No proposal or bounty at that index."]
					InvalidIndex,
					#[codec(index = 2)]
					#[doc = "Too many approvals in the queue."]
					TooManyApprovals,
					#[codec(index = 3)]
					#[doc = "The spend origin is valid but the amount it is allowed to spend is lower than the"]
					#[doc = "amount to be spent."]
					InsufficientPermission,
					#[codec(index = 4)]
					#[doc = "Proposal has not been approved."]
					ProposalNotApproved,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "New proposal."]
					Proposed { proposal_index: ::core::primitive::u32 },
					#[codec(index = 1)]
					#[doc = "We have ended a spend period and will now allocate funds."]
					Spending { budget_remaining: ::core::primitive::u128 },
					#[codec(index = 2)]
					#[doc = "Some funds have been allocated."]
					Awarded {
						proposal_index: ::core::primitive::u32,
						award: ::core::primitive::u128,
						account: ::subxt::ext::sp_core::crypto::AccountId32,
					},
					#[codec(index = 3)]
					#[doc = "A proposal was rejected; funds were slashed."]
					Rejected {
						proposal_index: ::core::primitive::u32,
						slashed: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Some of our funds have been burnt."]
					Burnt { burnt_funds: ::core::primitive::u128 },
					#[codec(index = 5)]
					#[doc = "Spending has finished; this is the amount that rolls over until next spend."]
					Rollover { rollover_balance: ::core::primitive::u128 },
					#[codec(index = 6)]
					#[doc = "Some funds have been deposited."]
					Deposit { value: ::core::primitive::u128 },
					#[codec(index = 7)]
					#[doc = "A new spend proposal has been approved."]
					SpendApproved {
						proposal_index: ::core::primitive::u32,
						amount: ::core::primitive::u128,
						beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Proposal<_0, _1> {
				pub proposer: _0,
				pub value: _1,
				pub beneficiary: _0,
				pub bond: _1,
			}
		}
		pub mod pallet_utility {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Send a batch of dispatch calls."]
					#[doc = ""]
					#[doc = "May be called from any origin."]
					#[doc = ""]
					#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
					#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
					#[doc = ""]
					#[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
					#[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
					#[doc = "# </weight>"]
					#[doc = ""]
					#[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
					#[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
					#[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
					#[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
					#[doc = "event is deposited."]
					batch { calls: ::std::vec::Vec<runtime_types::kusama_runtime::Call> },
					#[codec(index = 1)]
					#[doc = "Send a call through an indexed pseudonym of the sender."]
					#[doc = ""]
					#[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
					#[doc = "use the same filter as the origin of this call."]
					#[doc = ""]
					#[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
					#[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
					#[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
					#[doc = "in the Multisig pallet instead."]
					#[doc = ""]
					#[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					as_derivative {
						index: ::core::primitive::u16,
						call: ::std::boxed::Box<runtime_types::kusama_runtime::Call>,
					},
					#[codec(index = 2)]
					#[doc = "Send a batch of dispatch calls and atomically execute them."]
					#[doc = "The whole transaction will rollback and fail if any of the calls failed."]
					#[doc = ""]
					#[doc = "May be called from any origin."]
					#[doc = ""]
					#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
					#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
					#[doc = ""]
					#[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
					#[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
					#[doc = "# </weight>"]
					batch_all { calls: ::std::vec::Vec<runtime_types::kusama_runtime::Call> },
					#[codec(index = 3)]
					#[doc = "Dispatches a function call with a provided origin."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Root_."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- O(1)."]
					#[doc = "- Limited storage reads."]
					#[doc = "- One DB write (event)."]
					#[doc = "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as()."]
					#[doc = "# </weight>"]
					dispatch_as {
						as_origin: ::std::boxed::Box<runtime_types::kusama_runtime::OriginCaller>,
						call: ::std::boxed::Box<runtime_types::kusama_runtime::Call>,
					},
					#[codec(index = 4)]
					#[doc = "Send a batch of dispatch calls."]
					#[doc = "Unlike `batch`, it allows errors and won't interrupt."]
					#[doc = ""]
					#[doc = "May be called from any origin."]
					#[doc = ""]
					#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
					#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
					#[doc = ""]
					#[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
					#[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
					#[doc = "# </weight>"]
					force_batch { calls: ::std::vec::Vec<runtime_types::kusama_runtime::Call> },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Too many calls batched."]
					TooManyCalls,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
					#[doc = "well as the error."]
					BatchInterrupted {
						index: ::core::primitive::u32,
						error: runtime_types::sp_runtime::DispatchError,
					},
					#[codec(index = 1)]
					#[doc = "Batch of dispatches completed fully with no error."]
					BatchCompleted,
					#[codec(index = 2)]
					#[doc = "Batch of dispatches completed but has errors."]
					BatchCompletedWithErrors,
					#[codec(index = 3)]
					#[doc = "A single item within a Batch of dispatches has completed with no error."]
					ItemCompleted,
					#[codec(index = 4)]
					#[doc = "A single item within a Batch of dispatches has completed with error."]
					ItemFailed { error: runtime_types::sp_runtime::DispatchError },
					#[codec(index = 5)]
					#[doc = "A call was dispatched."]
					DispatchedAs {
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
				}
			}
		}
		pub mod pallet_vesting {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Unlock any vested funds of the sender account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must have funds still"]
					#[doc = "locked under this pallet."]
					#[doc = ""]
					#[doc = "Emits either `VestingCompleted` or `VestingUpdated`."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(1)`."]
					#[doc = "- DbWeight: 2 Reads, 2 Writes"]
					#[doc = "    - Reads: Vesting Storage, Balances Locks, [Sender Account]"]
					#[doc = "    - Writes: Vesting Storage, Balances Locks, [Sender Account]"]
					#[doc = "# </weight>"]
					vest,
					#[codec(index = 1)]
					#[doc = "Unlock any vested funds of a `target` account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `target`: The account whose vested funds should be unlocked. Must have funds still"]
					#[doc = "locked under this pallet."]
					#[doc = ""]
					#[doc = "Emits either `VestingCompleted` or `VestingUpdated`."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(1)`."]
					#[doc = "- DbWeight: 3 Reads, 3 Writes"]
					#[doc = "    - Reads: Vesting Storage, Balances Locks, Target Account"]
					#[doc = "    - Writes: Vesting Storage, Balances Locks, Target Account"]
					#[doc = "# </weight>"]
					vest_other {
						target: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
					},
					#[codec(index = 2)]
					#[doc = "Create a vested transfer."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `target`: The account receiving the vested funds."]
					#[doc = "- `schedule`: The vesting schedule attached to the transfer."]
					#[doc = ""]
					#[doc = "Emits `VestingCreated`."]
					#[doc = ""]
					#[doc = "NOTE: This will unlock all schedules through the current block."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(1)`."]
					#[doc = "- DbWeight: 3 Reads, 3 Writes"]
					#[doc = "    - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]"]
					#[doc = "    - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]"]
					#[doc = "# </weight>"]
					vested_transfer {
						target: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
						schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 3)]
					#[doc = "Force a vested transfer."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Root_."]
					#[doc = ""]
					#[doc = "- `source`: The account whose funds should be transferred."]
					#[doc = "- `target`: The account that should be transferred the vested funds."]
					#[doc = "- `schedule`: The vesting schedule attached to the transfer."]
					#[doc = ""]
					#[doc = "Emits `VestingCreated`."]
					#[doc = ""]
					#[doc = "NOTE: This will unlock all schedules through the current block."]
					#[doc = ""]
					#[doc = "# <weight>"]
					#[doc = "- `O(1)`."]
					#[doc = "- DbWeight: 4 Reads, 4 Writes"]
					#[doc = "    - Reads: Vesting Storage, Balances Locks, Target Account, Source Account"]
					#[doc = "    - Writes: Vesting Storage, Balances Locks, Target Account, Source Account"]
					#[doc = "# </weight>"]
					force_vested_transfer {
						source: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
						target: ::subxt::ext::sp_runtime::MultiAddress<
							::subxt::ext::sp_core::crypto::AccountId32,
							(),
						>,
						schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 4)]
					#[doc = "Merge two vesting schedules together, creating a new vesting schedule that unlocks over"]
					#[doc = "the highest possible start and end blocks. If both schedules have already started the"]
					#[doc = "current block will be used as the schedule start; with the caveat that if one schedule"]
					#[doc = "is finished by the current block, the other will be treated as the new merged schedule,"]
					#[doc = "unmodified."]
					#[doc = ""]
					#[doc = "NOTE: If `schedule1_index == schedule2_index` this is a no-op."]
					#[doc = "NOTE: This will unlock all schedules through the current block prior to merging."]
					#[doc = "NOTE: If both schedules have ended by the current block, no new schedule will be created"]
					#[doc = "and both will be removed."]
					#[doc = ""]
					#[doc = "Merged schedule attributes:"]
					#[doc = "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,"]
					#[doc = "  current_block)`."]
					#[doc = "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`."]
					#[doc = "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `schedule1_index`: index of the first schedule to merge."]
					#[doc = "- `schedule2_index`: index of the second schedule to merge."]
					merge_schedules {
						schedule1_index: ::core::primitive::u32,
						schedule2_index: ::core::primitive::u32,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Error for the vesting pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The account given is not vesting."]
					NotVesting,
					#[codec(index = 1)]
					#[doc = "The account already has `MaxVestingSchedules` count of schedules and thus"]
					#[doc = "cannot add another one. Consider merging existing schedules in order to add another."]
					AtMaxVestingSchedules,
					#[codec(index = 2)]
					#[doc = "Amount being transferred is too low to create a vesting schedule."]
					AmountLow,
					#[codec(index = 3)]
					#[doc = "An index was out of bounds of the vesting schedules."]
					ScheduleIndexOutOfBounds,
					#[codec(index = 4)]
					#[doc = "Failed to create a new schedule because some parameter was invalid."]
					InvalidScheduleParams,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "The amount vested has been updated. This could indicate a change in funds available."]
					#[doc = "The balance given is the amount which is left unvested (and thus locked)."]
					VestingUpdated {
						account: ::subxt::ext::sp_core::crypto::AccountId32,
						unvested: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "An \\[account\\] has become fully vested."]
					VestingCompleted { account: ::subxt::ext::sp_core::crypto::AccountId32 },
				}
			}
			pub mod vesting_info {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct VestingInfo<_0, _1> {
					pub locked: _0,
					pub per_block: _0,
					pub starting_block: _1,
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum Releases {
				#[codec(index = 0)]
				V0,
				#[codec(index = 1)]
				V1,
			}
		}
		pub mod pallet_xcm {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					send {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
					},
					#[codec(index = 1)]
					#[doc = "Teleport some assets from the local chain to some destination chain."]
					#[doc = ""]
					#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
					#[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
					#[doc = "with all fees taken as needed from the asset."]
					#[doc = ""]
					#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
					#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
					#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
					#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
					#[doc = "  an `AccountId32` value."]
					#[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
					#[doc = "  `dest` side. May not be empty."]
					#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
					#[doc = "  fees."]
					teleport_assets {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
						fee_asset_item: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
					#[doc = "chain and forward a notification XCM."]
					#[doc = ""]
					#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
					#[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
					#[doc = "with all fees taken as needed from the asset."]
					#[doc = ""]
					#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
					#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
					#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
					#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
					#[doc = "  an `AccountId32` value."]
					#[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
					#[doc = "  `dest` side."]
					#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
					#[doc = "  fees."]
					reserve_transfer_assets {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
						fee_asset_item: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "Execute an XCM message from a local, signed, origin."]
					#[doc = ""]
					#[doc = "An event is deposited indicating whether `msg` could be executed completely or only"]
					#[doc = "partially."]
					#[doc = ""]
					#[doc = "No more than `max_weight` will be used in its attempted execution. If this is less than the"]
					#[doc = "maximum amount of weight that the message could take to be executed, then no execution"]
					#[doc = "attempt will be made."]
					#[doc = ""]
					#[doc = "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully"]
					#[doc = "to completion; only that *some* of it was executed."]
					execute {
						message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
						max_weight: ::core::primitive::u64,
					},
					#[codec(index = 4)]
					#[doc = "Extoll that a particular destination can be communicated with through a particular"]
					#[doc = "version of XCM."]
					#[doc = ""]
					#[doc = "- `origin`: Must be Root."]
					#[doc = "- `location`: The destination that is being described."]
					#[doc = "- `xcm_version`: The latest version of XCM that `location` supports."]
					force_xcm_version {
						location:
							::std::boxed::Box<runtime_types::xcm::v1::multilocation::MultiLocation>,
						xcm_version: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					#[doc = "Set a safe XCM version (the version that XCM should be encoded with if the most recent"]
					#[doc = "version a destination can accept is unknown)."]
					#[doc = ""]
					#[doc = "- `origin`: Must be Root."]
					#[doc = "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."]
					force_default_xcm_version {
						maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 6)]
					#[doc = "Ask a location to notify us regarding their XCM version and any changes to it."]
					#[doc = ""]
					#[doc = "- `origin`: Must be Root."]
					#[doc = "- `location`: The location to which we should subscribe for XCM version notifications."]
					force_subscribe_version_notify {
						location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
					},
					#[codec(index = 7)]
					#[doc = "Require that a particular destination should no longer notify us regarding any XCM"]
					#[doc = "version changes."]
					#[doc = ""]
					#[doc = "- `origin`: Must be Root."]
					#[doc = "- `location`: The location to which we are currently subscribed for XCM version"]
					#[doc = "  notifications which we no longer desire."]
					force_unsubscribe_version_notify {
						location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
					},
					#[codec(index = 8)]
					#[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
					#[doc = "chain and forward a notification XCM."]
					#[doc = ""]
					#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
					#[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
					#[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
					#[doc = "at risk."]
					#[doc = ""]
					#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
					#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
					#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
					#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
					#[doc = "  an `AccountId32` value."]
					#[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
					#[doc = "  `dest` side."]
					#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
					#[doc = "  fees."]
					#[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
					limited_reserve_transfer_assets {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
						fee_asset_item: ::core::primitive::u32,
						weight_limit: runtime_types::xcm::v2::WeightLimit,
					},
					#[codec(index = 9)]
					#[doc = "Teleport some assets from the local chain to some destination chain."]
					#[doc = ""]
					#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
					#[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
					#[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
					#[doc = "at risk."]
					#[doc = ""]
					#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
					#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
					#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
					#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
					#[doc = "  an `AccountId32` value."]
					#[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
					#[doc = "  `dest` side. May not be empty."]
					#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
					#[doc = "  fees."]
					#[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
					limited_teleport_assets {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
						fee_asset_item: ::core::primitive::u32,
						weight_limit: runtime_types::xcm::v2::WeightLimit,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The desired destination was unreachable, generally because there is a no way of routing"]
					#[doc = "to it."]
					Unreachable,
					#[codec(index = 1)]
					#[doc = "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps"]
					#[doc = "a lack of space for buffering the message."]
					SendFailure,
					#[codec(index = 2)]
					#[doc = "The message execution fails the filter."]
					Filtered,
					#[codec(index = 3)]
					#[doc = "The message's weight could not be determined."]
					UnweighableMessage,
					#[codec(index = 4)]
					#[doc = "The destination `MultiLocation` provided cannot be inverted."]
					DestinationNotInvertible,
					#[codec(index = 5)]
					#[doc = "The assets to be sent are empty."]
					Empty,
					#[codec(index = 6)]
					#[doc = "Could not re-anchor the assets to declare the fees for the destination chain."]
					CannotReanchor,
					#[codec(index = 7)]
					#[doc = "Too many assets have been attempted for transfer."]
					TooManyAssets,
					#[codec(index = 8)]
					#[doc = "Origin is invalid for sending."]
					InvalidOrigin,
					#[codec(index = 9)]
					#[doc = "The version of the `Versioned` value used is not able to be interpreted."]
					BadVersion,
					#[codec(index = 10)]
					#[doc = "The given location could not be used (e.g. because it cannot be expressed in the"]
					#[doc = "desired version of XCM)."]
					BadLocation,
					#[codec(index = 11)]
					#[doc = "The referenced subscription could not be found."]
					NoSubscription,
					#[codec(index = 12)]
					#[doc = "The location is invalid since it already has a subscription from us."]
					AlreadySubscribed,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Execution of an XCM message was attempted."]
					#[doc = ""]
					#[doc = "\\[ outcome \\]"]
					Attempted(runtime_types::xcm::v2::traits::Outcome),
					#[codec(index = 1)]
					#[doc = "A XCM message was sent."]
					#[doc = ""]
					#[doc = "\\[ origin, destination, message \\]"]
					Sent(
						runtime_types::xcm::v1::multilocation::MultiLocation,
						runtime_types::xcm::v1::multilocation::MultiLocation,
						runtime_types::xcm::v2::Xcm,
					),
					#[codec(index = 2)]
					#[doc = "Query response received which does not match a registered query. This may be because a"]
					#[doc = "matching query was never registered, it may be because it is a duplicate response, or"]
					#[doc = "because the query timed out."]
					#[doc = ""]
					#[doc = "\\[ origin location, id \\]"]
					UnexpectedResponse(
						runtime_types::xcm::v1::multilocation::MultiLocation,
						::core::primitive::u64,
					),
					#[codec(index = 3)]
					#[doc = "Query response has been received and is ready for taking with `take_response`. There is"]
					#[doc = "no registered notification call."]
					#[doc = ""]
					#[doc = "\\[ id, response \\]"]
					ResponseReady(::core::primitive::u64, runtime_types::xcm::v2::Response),
					#[codec(index = 4)]
					#[doc = "Query response has been received and query is removed. The registered notification has"]
					#[doc = "been dispatched and executed successfully."]
					#[doc = ""]
					#[doc = "\\[ id, pallet index, call index \\]"]
					Notified(::core::primitive::u64, ::core::primitive::u8, ::core::primitive::u8),
					#[codec(index = 5)]
					#[doc = "Query response has been received and query is removed. The registered notification could"]
					#[doc = "not be dispatched because the dispatch weight is greater than the maximum weight"]
					#[doc = "originally budgeted by this runtime for the query result."]
					#[doc = ""]
					#[doc = "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"]
					NotifyOverweight(
						::core::primitive::u64,
						::core::primitive::u8,
						::core::primitive::u8,
						::core::primitive::u64,
						::core::primitive::u64,
					),
					#[codec(index = 6)]
					#[doc = "Query response has been received and query is removed. There was a general error with"]
					#[doc = "dispatching the notification call."]
					#[doc = ""]
					#[doc = "\\[ id, pallet index, call index \\]"]
					NotifyDispatchError(
						::core::primitive::u64,
						::core::primitive::u8,
						::core::primitive::u8,
					),
					#[codec(index = 7)]
					#[doc = "Query response has been received and query is removed. The dispatch was unable to be"]
					#[doc = "decoded into a `Call`; this might be due to dispatch function having a signature which"]
					#[doc = "is not `(origin, QueryId, Response)`."]
					#[doc = ""]
					#[doc = "\\[ id, pallet index, call index \\]"]
					NotifyDecodeFailed(
						::core::primitive::u64,
						::core::primitive::u8,
						::core::primitive::u8,
					),
					#[codec(index = 8)]
					#[doc = "Expected query response has been received but the origin location of the response does"]
					#[doc = "not match that expected. The query remains registered for a later, valid, response to"]
					#[doc = "be received and acted upon."]
					#[doc = ""]
					#[doc = "\\[ origin location, id, expected location \\]"]
					InvalidResponder(
						runtime_types::xcm::v1::multilocation::MultiLocation,
						::core::primitive::u64,
						::core::option::Option<
							runtime_types::xcm::v1::multilocation::MultiLocation,
						>,
					),
					#[codec(index = 9)]
					#[doc = "Expected query response has been received but the expected origin location placed in"]
					#[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
					#[doc = ""]
					#[doc = "This is unexpected (since a location placed in storage in a previously executing"]
					#[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
					#[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
					#[doc = "needed."]
					#[doc = ""]
					#[doc = "\\[ origin location, id \\]"]
					InvalidResponderVersion(
						runtime_types::xcm::v1::multilocation::MultiLocation,
						::core::primitive::u64,
					),
					#[codec(index = 10)]
					#[doc = "Received query response has been read and removed."]
					#[doc = ""]
					#[doc = "\\[ id \\]"]
					ResponseTaken(::core::primitive::u64),
					#[codec(index = 11)]
					#[doc = "Some assets have been placed in an asset trap."]
					#[doc = ""]
					#[doc = "\\[ hash, origin, assets \\]"]
					AssetsTrapped(
						::subxt::ext::sp_core::H256,
						runtime_types::xcm::v1::multilocation::MultiLocation,
						runtime_types::xcm::VersionedMultiAssets,
					),
					#[codec(index = 12)]
					#[doc = "An XCM version change notification message has been attempted to be sent."]
					#[doc = ""]
					#[doc = "\\[ destination, result \\]"]
					VersionChangeNotified(
						runtime_types::xcm::v1::multilocation::MultiLocation,
						::core::primitive::u32,
					),
					#[codec(index = 13)]
					#[doc = "The supported version of a location has been changed. This might be through an"]
					#[doc = "automatic notification or a manual intervention."]
					#[doc = ""]
					#[doc = "\\[ location, XCM version \\]"]
					SupportedVersionChanged(
						runtime_types::xcm::v1::multilocation::MultiLocation,
						::core::primitive::u32,
					),
					#[codec(index = 14)]
					#[doc = "A given location which had a version change subscription was dropped owing to an error"]
					#[doc = "sending the notification to it."]
					#[doc = ""]
					#[doc = "\\[ location, query ID, error \\]"]
					NotifyTargetSendFail(
						runtime_types::xcm::v1::multilocation::MultiLocation,
						::core::primitive::u64,
						runtime_types::xcm::v2::traits::Error,
					),
					#[codec(index = 15)]
					#[doc = "A given location which had a version change subscription was dropped owing to an error"]
					#[doc = "migrating the location to our new XCM format."]
					#[doc = ""]
					#[doc = "\\[ location, query ID \\]"]
					NotifyTargetMigrationFail(
						runtime_types::xcm::VersionedMultiLocation,
						::core::primitive::u64,
					),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum Origin {
					#[codec(index = 0)]
					Xcm(runtime_types::xcm::v1::multilocation::MultiLocation),
					#[codec(index = 1)]
					Response(runtime_types::xcm::v1::multilocation::MultiLocation),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum QueryStatus<_0> {
					#[codec(index = 0)]
					Pending {
						responder: runtime_types::xcm::VersionedMultiLocation,
						maybe_notify:
							::core::option::Option<(::core::primitive::u8, ::core::primitive::u8)>,
						timeout: _0,
					},
					#[codec(index = 1)]
					VersionNotifier {
						origin: runtime_types::xcm::VersionedMultiLocation,
						is_active: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					Ready { response: runtime_types::xcm::VersionedResponse, at: _0 },
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum VersionMigrationStage {
					#[codec(index = 0)]
					MigrateSupportedVersion,
					#[codec(index = 1)]
					MigrateVersionNotifiers,
					#[codec(index = 2)]
					NotifyCurrentTargets(
						::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
					),
					#[codec(index = 3)]
					MigrateAndNotifyOldTargets,
				}
			}
		}
		pub mod polkadot_core_primitives {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct CandidateHash(pub ::subxt::ext::sp_core::H256);
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct InboundDownwardMessage<_0> {
				pub sent_at: _0,
				pub msg: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct InboundHrmpMessage<_0> {
				pub sent_at: _0,
				pub data: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct OutboundHrmpMessage<_0> {
				pub recipient: _0,
				pub data: ::std::vec::Vec<::core::primitive::u8>,
			}
		}
		pub mod polkadot_parachain {
			use super::runtime_types;
			pub mod primitives {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct HeadData(pub ::std::vec::Vec<::core::primitive::u8>);
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct HrmpChannelId {
					pub sender: runtime_types::polkadot_parachain::primitives::Id,
					pub recipient: runtime_types::polkadot_parachain::primitives::Id,
				}
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					Debug,
				)]
				pub struct Id(pub ::core::primitive::u32);
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct ValidationCode(pub ::std::vec::Vec<::core::primitive::u8>);
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct ValidationCodeHash(pub ::subxt::ext::sp_core::H256);
			}
		}
		pub mod polkadot_primitives {
			use super::runtime_types;
			pub mod v2 {
				use super::runtime_types;
				pub mod assignment_app {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct Public(pub runtime_types::sp_core::sr25519::Public);
				}
				pub mod collator_app {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct Public(pub runtime_types::sp_core::sr25519::Public);
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct Signature(pub runtime_types::sp_core::sr25519::Signature);
				}
				pub mod signed {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct UncheckedSigned<_0, _1> {
						pub payload: _0,
						pub validator_index: runtime_types::polkadot_primitives::v2::ValidatorIndex,
						pub signature:
							runtime_types::polkadot_primitives::v2::validator_app::Signature,
						#[codec(skip)]
						pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
					}
				}
				pub mod validator_app {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct Public(pub runtime_types::sp_core::sr25519::Public);
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct Signature(pub runtime_types::sp_core::sr25519::Signature);
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct AvailabilityBitfield(
					pub  ::subxt::ext::bitvec::vec::BitVec<
						::core::primitive::u8,
						::subxt::ext::bitvec::order::Lsb0,
					>,
				);
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct BackedCandidate<_0> {
					pub candidate:
						runtime_types::polkadot_primitives::v2::CommittedCandidateReceipt<_0>,
					pub validity_votes: ::std::vec::Vec<
						runtime_types::polkadot_primitives::v2::ValidityAttestation,
					>,
					pub validator_indices: ::subxt::ext::bitvec::vec::BitVec<
						::core::primitive::u8,
						::subxt::ext::bitvec::order::Lsb0,
					>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct CandidateCommitments<_0> {
					pub upward_messages: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
					pub horizontal_messages: ::std::vec::Vec<
						runtime_types::polkadot_core_primitives::OutboundHrmpMessage<
							runtime_types::polkadot_parachain::primitives::Id,
						>,
					>,
					pub new_validation_code: ::core::option::Option<
						runtime_types::polkadot_parachain::primitives::ValidationCode,
					>,
					pub head_data: runtime_types::polkadot_parachain::primitives::HeadData,
					pub processed_downward_messages: _0,
					pub hrmp_watermark: _0,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct CandidateDescriptor<_0> {
					pub para_id: runtime_types::polkadot_parachain::primitives::Id,
					pub relay_parent: _0,
					pub collator: runtime_types::polkadot_primitives::v2::collator_app::Public,
					pub persisted_validation_data_hash: _0,
					pub pov_hash: _0,
					pub erasure_root: _0,
					pub signature: runtime_types::polkadot_primitives::v2::collator_app::Signature,
					pub para_head: _0,
					pub validation_code_hash:
						runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct CandidateReceipt<_0> {
					pub descriptor: runtime_types::polkadot_primitives::v2::CandidateDescriptor<_0>,
					pub commitments_hash: _0,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct CommittedCandidateReceipt<_0> {
					pub descriptor: runtime_types::polkadot_primitives::v2::CandidateDescriptor<_0>,
					pub commitments: runtime_types::polkadot_primitives::v2::CandidateCommitments<
						::core::primitive::u32,
					>,
				}
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					Debug,
				)]
				pub struct CoreIndex(pub ::core::primitive::u32);
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum CoreOccupied {
					#[codec(index = 0)]
					Parathread(runtime_types::polkadot_primitives::v2::ParathreadEntry),
					#[codec(index = 1)]
					Parachain,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct DisputeState<_0> {
					pub validators_for: ::subxt::ext::bitvec::vec::BitVec<
						::core::primitive::u8,
						::subxt::ext::bitvec::order::Lsb0,
					>,
					pub validators_against: ::subxt::ext::bitvec::vec::BitVec<
						::core::primitive::u8,
						::subxt::ext::bitvec::order::Lsb0,
					>,
					pub start: _0,
					pub concluded_at: ::core::option::Option<_0>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum DisputeStatement {
					#[codec(index = 0)]
					Valid(runtime_types::polkadot_primitives::v2::ValidDisputeStatementKind),
					#[codec(index = 1)]
					Invalid(runtime_types::polkadot_primitives::v2::InvalidDisputeStatementKind),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct DisputeStatementSet {
					pub candidate_hash: runtime_types::polkadot_core_primitives::CandidateHash,
					pub session: ::core::primitive::u32,
					pub statements: ::std::vec::Vec<(
						runtime_types::polkadot_primitives::v2::DisputeStatement,
						runtime_types::polkadot_primitives::v2::ValidatorIndex,
						runtime_types::polkadot_primitives::v2::validator_app::Signature,
					)>,
				}
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					Debug,
				)]
				pub struct GroupIndex(pub ::core::primitive::u32);
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct InherentData<_0> {
					pub bitfields: ::std::vec::Vec<
						runtime_types::polkadot_primitives::v2::signed::UncheckedSigned<
							runtime_types::polkadot_primitives::v2::AvailabilityBitfield,
							runtime_types::polkadot_primitives::v2::AvailabilityBitfield,
						>,
					>,
					pub backed_candidates: ::std::vec::Vec<
						runtime_types::polkadot_primitives::v2::BackedCandidate<
							::subxt::ext::sp_core::H256,
						>,
					>,
					pub disputes: ::std::vec::Vec<
						runtime_types::polkadot_primitives::v2::DisputeStatementSet,
					>,
					pub parent_header: _0,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum InvalidDisputeStatementKind {
					#[codec(index = 0)]
					Explicit,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct ParathreadClaim(
					pub runtime_types::polkadot_parachain::primitives::Id,
					pub runtime_types::polkadot_primitives::v2::collator_app::Public,
				);
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct ParathreadEntry {
					pub claim: runtime_types::polkadot_primitives::v2::ParathreadClaim,
					pub retries: ::core::primitive::u32,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct PvfCheckStatement {
					pub accept: ::core::primitive::bool,
					pub subject: runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
					pub session_index: ::core::primitive::u32,
					pub validator_index: runtime_types::polkadot_primitives::v2::ValidatorIndex,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct ScrapedOnChainVotes<_0> {
					pub session: ::core::primitive::u32,
					pub backing_validators_per_candidate: ::std::vec::Vec<(
						runtime_types::polkadot_primitives::v2::CandidateReceipt<_0>,
						::std::vec::Vec<(
							runtime_types::polkadot_primitives::v2::ValidatorIndex,
							runtime_types::polkadot_primitives::v2::ValidityAttestation,
						)>,
					)>,
					pub disputes: ::std::vec::Vec<
						runtime_types::polkadot_primitives::v2::DisputeStatementSet,
					>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct SessionInfo {
					pub active_validator_indices:
						::std::vec::Vec<runtime_types::polkadot_primitives::v2::ValidatorIndex>,
					pub random_seed: [::core::primitive::u8; 32usize],
					pub dispute_period: ::core::primitive::u32,
					pub validators: ::std::vec::Vec<
						runtime_types::polkadot_primitives::v2::validator_app::Public,
					>,
					pub discovery_keys:
						::std::vec::Vec<runtime_types::sp_authority_discovery::app::Public>,
					pub assignment_keys: ::std::vec::Vec<
						runtime_types::polkadot_primitives::v2::assignment_app::Public,
					>,
					pub validator_groups: ::std::vec::Vec<
						::std::vec::Vec<runtime_types::polkadot_primitives::v2::ValidatorIndex>,
					>,
					pub n_cores: ::core::primitive::u32,
					pub zeroth_delay_tranche_width: ::core::primitive::u32,
					pub relay_vrf_modulo_samples: ::core::primitive::u32,
					pub n_delay_tranches: ::core::primitive::u32,
					pub no_show_slots: ::core::primitive::u32,
					pub needed_approvals: ::core::primitive::u32,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum UpgradeGoAhead {
					#[codec(index = 0)]
					Abort,
					#[codec(index = 1)]
					GoAhead,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum UpgradeRestriction {
					#[codec(index = 0)]
					Present,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum ValidDisputeStatementKind {
					#[codec(index = 0)]
					Explicit,
					#[codec(index = 1)]
					BackingSeconded(::subxt::ext::sp_core::H256),
					#[codec(index = 2)]
					BackingValid(::subxt::ext::sp_core::H256),
					#[codec(index = 3)]
					ApprovalChecking,
				}
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					Debug,
				)]
				pub struct ValidatorIndex(pub ::core::primitive::u32);
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum ValidityAttestation {
					#[codec(index = 1)]
					Implicit(runtime_types::polkadot_primitives::v2::validator_app::Signature),
					#[codec(index = 2)]
					Explicit(runtime_types::polkadot_primitives::v2::validator_app::Signature),
				}
			}
		}
		pub mod polkadot_runtime_common {
			use super::runtime_types;
			pub mod auctions {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
					pub enum Call {
						#[codec(index = 0)]
						#[doc = "Create a new auction."]
						#[doc = ""]
						#[doc = "This can only happen when there isn't already an auction in progress and may only be"]
						#[doc = "called by the root origin. Accepts the `duration` of this auction and the"]
						#[doc = "`lease_period_index` of the initial lease period of the four that are to be auctioned."]
						new_auction {
							#[codec(compact)]
							duration: ::core::primitive::u32,
							#[codec(compact)]
							lease_period_index: ::core::primitive::u32,
						},
						#[codec(index = 1)]
						#[doc = "Make a new bid from an account (including a parachain account) for deploying a new"]
						#[doc = "parachain."]
						#[doc = ""]
						#[doc = "Multiple simultaneous bids from the same bidder are allowed only as long as all active"]
						#[doc = "bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted."]
						#[doc = ""]
						#[doc = "- `sub` is the sub-bidder ID, allowing for multiple competing bids to be made by (and"]
						#[doc = "funded by) the same account."]
						#[doc = "- `auction_index` is the index of the auction to bid on. Should just be the present"]
						#[doc = "value of `AuctionCounter`."]
						#[doc = "- `first_slot` is the first lease period index of the range to bid on. This is the"]
						#[doc = "absolute lease period index value, not an auction-specific offset."]
						#[doc = "- `last_slot` is the last lease period index of the range to bid on. This is the"]
						#[doc = "absolute lease period index value, not an auction-specific offset."]
						#[doc = "- `amount` is the amount to bid to be held as deposit for the parachain should the"]
						#[doc = "bid win. This amount is held throughout the range."]
						bid {
							#[codec(compact)]
							para: runtime_types::polkadot_parachain::primitives::Id,
							#[codec(compact)]
							auction_index: ::core::primitive::u32,
							#[codec(compact)]
							first_slot: ::core::primitive::u32,
							#[codec(compact)]
							last_slot: ::core::primitive::u32,
							#[codec(compact)]
							amount: ::core::primitive::u128,
						},
						#[codec(index = 2)]
						#[doc = "Cancel an in-progress auction."]
						#[doc = ""]
						#[doc = "Can only be called by Root origin."]
						cancel_auction,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
					pub enum Error {
						#[codec(index = 0)]
						#[doc = "This auction is already in progress."]
						AuctionInProgress,
						#[codec(index = 1)]
						#[doc = "The lease period is in the past."]
						LeasePeriodInPast,
						#[codec(index = 2)]
						#[doc = "Para is not registered"]
						ParaNotRegistered,
						#[codec(index = 3)]
						#[doc = "Not a current auction."]
						NotCurrentAuction,
						#[codec(index = 4)]
						#[doc = "Not an auction."]
						NotAuction,
						#[codec(index = 5)]
						#[doc = "Auction has already ended."]
						AuctionEnded,
						#[codec(index = 6)]
						#[doc = "The para is already leased out for part of this range."]
						AlreadyLeasedOut,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
					pub enum Event {
						#[codec(index = 0)]
						#[doc = "An auction started. Provides its index and the block number where it will begin to"]
						#[doc = "close and the first lease period of the quadruplet that is auctioned."]
						AuctionStarted {
							auction_index: ::core::primitive::u32,
							lease_period: ::core::primitive::u32,
							ending: ::core::primitive::u32,
						},
						#[codec(index = 1)]
						#[doc = "An auction ended. All funds become unreserved."]
						AuctionClosed { auction_index: ::core::primitive::u32 },
						#[codec(index = 2)]
						#[doc = "Funds were reserved for a winning bid. First balance is the extra amount reserved."]
						#[doc = "Second is the total."]
						Reserved {
							bidder: ::subxt::ext::sp_core::crypto::AccountId32,
							extra_reserved: ::core::primitive::u128,
							total_amount: ::core::primitive::u128,
						},
						#[codec(index = 3)]
						#[doc = "Funds were unreserved since bidder is no longer active. `[bidder, amount]`"]
						Unreserved {
							bidder: ::subxt::ext::sp_core::crypto::AccountId32,
							amount: ::core::primitive::u128,
						},
						#[codec(index = 4)]
						#[doc = "Someone attempted to lease the same slot twice for a parachain. The amount is held in reserve"]
						#[doc = "but no parachain slot has been leased."]
						ReserveConfiscated {
							para_id: runtime_types::polkadot_parachain::primitives::Id,
							leaser: ::subxt::ext::sp_core::crypto::AccountId32,
							amount: ::core::primitive::u128,
						},
						#[codec(index = 5)]
						#[doc = "A new bid has been accepted as the current winner."]
						BidAccepted {
							bidder: ::subxt::ext::sp_core::crypto::AccountId32,
							para_id: runtime_types::polkadot_parachain::primitives::Id,
							amount: ::core::primitive::u128,
							first_slot: ::core::primitive::u32,
							last_slot: ::core::primitive::u32,
						},
						#[codec(index = 6)]
						#[doc = "The winning offset was chosen for an auction. This will map into the `Winning` storage map."]
						WinningOffset {
							auction_index: ::core::primitive::u32,
							block_number: ::core::primitive::u32,
						},
					}
				}
			}
			pub mod claims {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
					pub enum Call {
						#[codec(index = 0)]
						#[doc = "Make a claim to collect your DOTs."]
						#[doc = ""]
						#[doc = "The dispatch origin for this call must be _None_."]
						#[doc = ""]
						#[doc = "Unsigned Validation:"]
						#[doc = "A call to claim is deemed valid if the signature provided matches"]
						#[doc = "the expected signed message of:"]
						#[doc = ""]
						#[doc = "> Ethereum Signed Message:"]
						#[doc = "> (configured prefix string)(address)"]
						#[doc = ""]
						#[doc = "and `address` matches the `dest` account."]
						#[doc = ""]
						#[doc = "Parameters:"]
						#[doc = "- `dest`: The destination account to payout the claim."]
						#[doc = "- `ethereum_signature`: The signature of an ethereum signed message"]
						#[doc = "   matching the format described above."]
						#[doc = ""]
						#[doc = "<weight>"]
						#[doc = "The weight of this call is invariant over the input parameters."]
						#[doc = "Weight includes logic to validate unsigned `claim` call."]
						#[doc = ""]
						#[doc = "Total Complexity: O(1)"]
						#[doc = "</weight>"]
						claim {
							dest: ::subxt::ext::sp_core::crypto::AccountId32,
							ethereum_signature:
								runtime_types::polkadot_runtime_common::claims::EcdsaSignature,
						},
						#[codec(index = 1)]
						#[doc = "Mint a new claim to collect DOTs."]
						#[doc = ""]
						#[doc = "The dispatch origin for this call must be _Root_."]
						#[doc = ""]
						#[doc = "Parameters:"]
						#[doc = "- `who`: The Ethereum address allowed to collect this claim."]
						#[doc = "- `value`: The number of DOTs that will be claimed."]
						#[doc = "- `vesting_schedule`: An optional vesting schedule for these DOTs."]
						#[doc = ""]
						#[doc = "<weight>"]
						#[doc = "The weight of this call is invariant over the input parameters."]
						#[doc = "We assume worst case that both vesting and statement is being inserted."]
						#[doc = ""]
						#[doc = "Total Complexity: O(1)"]
						#[doc = "</weight>"]
						mint_claim {
							who: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
							value: ::core::primitive::u128,
							vesting_schedule: ::core::option::Option<(
								::core::primitive::u128,
								::core::primitive::u128,
								::core::primitive::u32,
							)>,
							statement: ::core::option::Option<
								runtime_types::polkadot_runtime_common::claims::StatementKind,
							>,
						},
						#[codec(index = 2)]
						#[doc = "Make a claim to collect your DOTs by signing a statement."]
						#[doc = ""]
						#[doc = "The dispatch origin for this call must be _None_."]
						#[doc = ""]
						#[doc = "Unsigned Validation:"]
						#[doc = "A call to `claim_attest` is deemed valid if the signature provided matches"]
						#[doc = "the expected signed message of:"]
						#[doc = ""]
						#[doc = "> Ethereum Signed Message:"]
						#[doc = "> (configured prefix string)(address)(statement)"]
						#[doc = ""]
						#[doc = "and `address` matches the `dest` account; the `statement` must match that which is"]
						#[doc = "expected according to your purchase arrangement."]
						#[doc = ""]
						#[doc = "Parameters:"]
						#[doc = "- `dest`: The destination account to payout the claim."]
						#[doc = "- `ethereum_signature`: The signature of an ethereum signed message"]
						#[doc = "   matching the format described above."]
						#[doc = "- `statement`: The identity of the statement which is being attested to in the signature."]
						#[doc = ""]
						#[doc = "<weight>"]
						#[doc = "The weight of this call is invariant over the input parameters."]
						#[doc = "Weight includes logic to validate unsigned `claim_attest` call."]
						#[doc = ""]
						#[doc = "Total Complexity: O(1)"]
						#[doc = "</weight>"]
						claim_attest {
							dest: ::subxt::ext::sp_core::crypto::AccountId32,
							ethereum_signature:
								runtime_types::polkadot_runtime_common::claims::EcdsaSignature,
							statement: ::std::vec::Vec<::core::primitive::u8>,
						},
						#[codec(index = 3)]
						#[doc = "Attest to a statement, needed to finalize the claims process."]
						#[doc = ""]
						#[doc = "WARNING: Insecure unless your chain includes `PrevalidateAttests` as a `SignedExtension`."]
						#[doc = ""]
						#[doc = "Unsigned Validation:"]
						#[doc = "A call to attest is deemed valid if the sender has a `Preclaim` registered"]
						#[doc = "and provides a `statement` which is expected for the account."]
						#[doc = ""]
						#[doc = "Parameters:"]
						#[doc = "- `statement`: The identity of the statement which is being attested to in the signature."]
						#[doc = ""]
						#[doc = "<weight>"]
						#[doc = "The weight of this call is invariant over the input parameters."]
						#[doc = "Weight includes logic to do pre-validation on `attest` call."]
						#[doc = ""]
						#[doc = "Total Complexity: O(1)"]
						#[doc = "</weight>"]
						attest { statement: ::std::vec::Vec<::core::primitive::u8> },
						#[codec(index = 4)]
						move_claim {
							old: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
							new: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
							maybe_preclaim:
								::core::option::Option<::subxt::ext::sp_core::crypto::AccountId32>,
						},
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
					pub enum Error {
						#[codec(index = 0)]
						#[doc = "Invalid Ethereum signature."]
						InvalidEthereumSignature,
						#[codec(index = 1)]
						#[doc = "Ethereum address has no claim."]
						SignerHasNoClaim,
						#[codec(index = 2)]
						#[doc = "Account ID sending transaction has no claim."]
						SenderHasNoClaim,
						#[codec(index = 3)]
						#[doc = "There's not enough in the pot to pay out some unvested amount. Generally implies a logic"]
						#[doc = "error."]
						PotUnderflow,
						#[codec(index = 4)]
						#[doc = "A needed statement was not included."]
						InvalidStatement,
						#[codec(index = 5)]
						#[doc = "The account already has a vested balance."]
						VestedBalanceExists,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
					pub enum Event {
						#[codec(index = 0)]
						#[doc = "Someone claimed some DOTs."]
						Claimed {
							who: ::subxt::ext::sp_core::crypto::AccountId32,
							ethereum_address:
								runtime_types::polkadot_runtime_common::claims::EthereumAddress,
							amount: ::core::primitive::u128,
						},
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct EcdsaSignature(pub [::core::primitive::u8; 65usize]);
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct EthereumAddress(pub [::core::primitive::u8; 20usize]);
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum StatementKind {
					#[codec(index = 0)]
					Regular,
					#[codec(index = 1)]
					Saft,
				}
			}
			pub mod crowdloan {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
					pub enum Call {
						#[codec(index = 0)]
						#[doc = "Create a new crowdloaning campaign for a parachain slot with the given lease period range."]
						#[doc = ""]
						#[doc = "This applies a lock to your parachain configuration, ensuring that it cannot be changed"]
						#[doc = "by the parachain manager."]
						create {
							#[codec(compact)]
							index: runtime_types::polkadot_parachain::primitives::Id,
							#[codec(compact)]
							cap: ::core::primitive::u128,
							#[codec(compact)]
							first_period: ::core::primitive::u32,
							#[codec(compact)]
							last_period: ::core::primitive::u32,
							#[codec(compact)]
							end: ::core::primitive::u32,
							verifier:
								::core::option::Option<runtime_types::sp_runtime::MultiSigner>,
						},
						#[codec(index = 1)]
						#[doc = "Contribute to a crowd sale. This will transfer some balance over to fund a parachain"]
						#[doc = "slot. It will be withdrawable when the crowdloan has ended and the funds are unused."]
						contribute {
							#[codec(compact)]
							index: runtime_types::polkadot_parachain::primitives::Id,
							#[codec(compact)]
							value: ::core::primitive::u128,
							signature:
								::core::option::Option<runtime_types::sp_runtime::MultiSignature>,
						},
						#[codec(index = 2)]
						#[doc = "Withdraw full balance of a specific contributor."]
						#[doc = ""]
						#[doc = "Origin must be signed, but can come from anyone."]
						#[doc = ""]
						#[doc = "The fund must be either in, or ready for, retirement. For a fund to be *in* retirement, then the retirement"]
						#[doc = "flag must be set. For a fund to be ready for retirement, then:"]
						#[doc = "- it must not already be in retirement;"]
						#[doc = "- the amount of raised funds must be bigger than the _free_ balance of the account;"]
						#[doc = "- and either:"]
						#[doc = "  - the block number must be at least `end`; or"]
						#[doc = "  - the current lease period must be greater than the fund's `last_period`."]
						#[doc = ""]
						#[doc = "In this case, the fund's retirement flag is set and its `end` is reset to the current block"]
						#[doc = "number."]
						#[doc = ""]
						#[doc = "- `who`: The account whose contribution should be withdrawn."]
						#[doc = "- `index`: The parachain to whose crowdloan the contribution was made."]
						withdraw {
							who: ::subxt::ext::sp_core::crypto::AccountId32,
							#[codec(compact)]
							index: runtime_types::polkadot_parachain::primitives::Id,
						},
						#[codec(index = 3)]
						#[doc = "Automatically refund contributors of an ended crowdloan."]
						#[doc = "Due to weight restrictions, this function may need to be called multiple"]
						#[doc = "times to fully refund all users. We will refund `RemoveKeysLimit` users at a time."]
						#[doc = ""]
						#[doc = "Origin must be signed, but can come from anyone."]
						refund {
							#[codec(compact)]
							index: runtime_types::polkadot_parachain::primitives::Id,
						},
						#[codec(index = 4)]
						#[doc = "Remove a fund after the retirement period has ended and all funds have been returned."]
						dissolve {
							#[codec(compact)]
							index: runtime_types::polkadot_parachain::primitives::Id,
						},
						#[codec(index = 5)]
						#[doc = "Edit the configuration for an in-progress crowdloan."]
						#[doc = ""]
						#[doc = "Can only be called by Root origin."]
						edit {
							#[codec(compact)]
							index: runtime_types::polkadot_parachain::primitives::Id,
							#[codec(compact)]
							cap: ::core::primitive::u128,
							#[codec(compact)]
							first_period: ::core::primitive::u32,
							#[codec(compact)]
							last_period: ::core::primitive::u32,
							#[codec(compact)]
							end: ::core::primitive::u32,
							verifier:
								::core::option::Option<runtime_types::sp_runtime::MultiSigner>,
						},
						#[codec(index = 6)]
						#[doc = "Add an optional memo to an existing crowdloan contribution."]
						#[doc = ""]
						#[doc = "Origin must be Signed, and the user must have contributed to the crowdloan."]
						add_memo {
							index: runtime_types::polkadot_parachain::primitives::Id,
							memo: ::std::vec::Vec<::core::primitive::u8>,
						},
						#[codec(index = 7)]
						#[doc = "Poke the fund into `NewRaise`"]
						#[doc = ""]
						#[doc = "Origin must be Signed, and the fund has non-zero raise."]
						poke { index: runtime_types::polkadot_parachain::primitives::Id },
						#[codec(index = 8)]
						#[doc = "Contribute your entire balance to a crowd sale. This will transfer the entire balance of a user over to fund a parachain"]
						#[doc = "slot. It will be withdrawable when the crowdloan has ended and the funds are unused."]
						contribute_all {
							#[codec(compact)]
							index: runtime_types::polkadot_parachain::primitives::Id,
							signature:
								::core::option::Option<runtime_types::sp_runtime::MultiSignature>,
						},
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
					pub enum Error {
						#[codec(index = 0)]
						#[doc = "The current lease period is more than the first lease period."]
						FirstPeriodInPast,
						#[codec(index = 1)]
						#[doc = "The first lease period needs to at least be less than 3 `max_value`."]
						FirstPeriodTooFarInFuture,
						#[codec(index = 2)]
						#[doc = "Last lease period must be greater than first lease period."]
						LastPeriodBeforeFirstPeriod,
						#[codec(index = 3)]
						#[doc = "The last lease period cannot be more than 3 periods after the first period."]
						LastPeriodTooFarInFuture,
						#[codec(index = 4)]
						#[doc = "The campaign ends before the current block number. The end must be in the future."]
						CannotEndInPast,
						#[codec(index = 5)]
						#[doc = "The end date for this crowdloan is not sensible."]
						EndTooFarInFuture,
						#[codec(index = 6)]
						#[doc = "There was an overflow."]
						Overflow,
						#[codec(index = 7)]
						#[doc = "The contribution was below the minimum, `MinContribution`."]
						ContributionTooSmall,
						#[codec(index = 8)]
						#[doc = "Invalid fund index."]
						InvalidParaId,
						#[codec(index = 9)]
						#[doc = "Contributions exceed maximum amount."]
						CapExceeded,
						#[codec(index = 10)]
						#[doc = "The contribution period has already ended."]
						ContributionPeriodOver,
						#[codec(index = 11)]
						#[doc = "The origin of this call is invalid."]
						InvalidOrigin,
						#[codec(index = 12)]
						#[doc = "This crowdloan does not correspond to a parachain."]
						NotParachain,
						#[codec(index = 13)]
						#[doc = "This parachain lease is still active and retirement cannot yet begin."]
						LeaseActive,
						#[codec(index = 14)]
						#[doc = "This parachain's bid or lease is still active and withdraw cannot yet begin."]
						BidOrLeaseActive,
						#[codec(index = 15)]
						#[doc = "The crowdloan has not yet ended."]
						FundNotEnded,
						#[codec(index = 16)]
						#[doc = "There are no contributions stored in this crowdloan."]
						NoContributions,
						#[codec(index = 17)]
						#[doc = "The crowdloan is not ready to dissolve. Potentially still has a slot or in retirement period."]
						NotReadyToDissolve,
						#[codec(index = 18)]
						#[doc = "Invalid signature."]
						InvalidSignature,
						#[codec(index = 19)]
						#[doc = "The provided memo is too large."]
						MemoTooLarge,
						#[codec(index = 20)]
						#[doc = "The fund is already in `NewRaise`"]
						AlreadyInNewRaise,
						#[codec(index = 21)]
						#[doc = "No contributions allowed during the VRF delay"]
						VrfDelayInProgress,
						#[codec(index = 22)]
						#[doc = "A lease period has not started yet, due to an offset in the starting block."]
						NoLeasePeriod,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
					pub enum Event {
						#[codec(index = 0)]
						#[doc = "Create a new crowdloaning campaign."]
						Created { para_id: runtime_types::polkadot_parachain::primitives::Id },
						#[codec(index = 1)]
						#[doc = "Contributed to a crowd sale."]
						Contributed {
							who: ::subxt::ext::sp_core::crypto::AccountId32,
							fund_index: runtime_types::polkadot_parachain::primitives::Id,
							amount: ::core::primitive::u128,
						},
						#[codec(index = 2)]
						#[doc = "Withdrew full balance of a contributor."]
						Withdrew {
							who: ::subxt::ext::sp_core::crypto::AccountId32,
							fund_index: runtime_types::polkadot_parachain::primitives::Id,
							amount: ::core::primitive::u128,
						},
						#[codec(index = 3)]
						#[doc = "The loans in a fund have been partially dissolved, i.e. there are some left"]
						#[doc = "over child keys that still need to be killed."]
						PartiallyRefunded {
							para_id: runtime_types::polkadot_parachain::primitives::Id,
						},
						#[codec(index = 4)]
						#[doc = "All loans in a fund have been refunded."]
						AllRefunded { para_id: runtime_types::polkadot_parachain::primitives::Id },
						#[codec(index = 5)]
						#[doc = "Fund is dissolved."]
						Dissolved { para_id: runtime_types::polkadot_parachain::primitives::Id },
						#[codec(index = 6)]
						#[doc = "The result of trying to submit a new bid to the Slots pallet."]
						HandleBidResult {
							para_id: runtime_types::polkadot_parachain::primitives::Id,
							result: ::core::result::Result<
								(),
								runtime_types::sp_runtime::DispatchError,
							>,
						},
						#[codec(index = 7)]
						#[doc = "The configuration to a crowdloan has been edited."]
						Edited { para_id: runtime_types::polkadot_parachain::primitives::Id },
						#[codec(index = 8)]
						#[doc = "A memo has been updated."]
						MemoUpdated {
							who: ::subxt::ext::sp_core::crypto::AccountId32,
							para_id: runtime_types::polkadot_parachain::primitives::Id,
							memo: ::std::vec::Vec<::core::primitive::u8>,
						},
						#[codec(index = 9)]
						#[doc = "A parachain has been moved to `NewRaise`"]
						AddedToNewRaise {
							para_id: runtime_types::polkadot_parachain::primitives::Id,
						},
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct FundInfo<_0, _1, _2, _3> {
					pub depositor: _0,
					pub verifier: ::core::option::Option<runtime_types::sp_runtime::MultiSigner>,
					pub deposit: _1,
					pub raised: _1,
					pub end: _2,
					pub cap: _1,
					pub last_contribution:
						runtime_types::polkadot_runtime_common::crowdloan::LastContribution<_2>,
					pub first_period: _2,
					pub last_period: _2,
					pub fund_index: _2,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<_3>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum LastContribution<_0> {
					#[codec(index = 0)]
					Never,
					#[codec(index = 1)]
					PreEnding(_0),
					#[codec(index = 2)]
					Ending(_0),
				}
			}
			pub mod paras_registrar {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
					pub enum Call {
						#[codec(index = 0)]
						#[doc = "Register head data and validation code for a reserved Para Id."]
						#[doc = ""]
						#[doc = "## Arguments"]
						#[doc = "- `origin`: Must be called by a `Signed` origin."]
						#[doc = "- `id`: The para ID. Must be owned/managed by the `origin` signing account."]
						#[doc = "- `genesis_head`: The genesis head data of the parachain/thread."]
						#[doc = "- `validation_code`: The initial validation code of the parachain/thread."]
						#[doc = ""]
						#[doc = "## Deposits/Fees"]
						#[doc = "The origin signed account must reserve a corresponding deposit for the registration. Anything already"]
						#[doc = "reserved previously for this para ID is accounted for."]
						#[doc = ""]
						#[doc = "## Events"]
						#[doc = "The `Registered` event is emitted in case of success."]
						register {
							id: runtime_types::polkadot_parachain::primitives::Id,
							genesis_head: runtime_types::polkadot_parachain::primitives::HeadData,
							validation_code:
								runtime_types::polkadot_parachain::primitives::ValidationCode,
						},
						#[codec(index = 1)]
						#[doc = "Force the registration of a Para Id on the relay chain."]
						#[doc = ""]
						#[doc = "This function must be called by a Root origin."]
						#[doc = ""]
						#[doc = "The deposit taken can be specified for this registration. Any `ParaId`"]
						#[doc = "can be registered, including sub-1000 IDs which are System Parachains."]
						force_register {
							who: ::subxt::ext::sp_core::crypto::AccountId32,
							deposit: ::core::primitive::u128,
							id: runtime_types::polkadot_parachain::primitives::Id,
							genesis_head: runtime_types::polkadot_parachain::primitives::HeadData,
							validation_code:
								runtime_types::polkadot_parachain::primitives::ValidationCode,
						},
						#[codec(index = 2)]
						#[doc = "Deregister a Para Id, freeing all data and returning any deposit."]
						#[doc = ""]
						#[doc = "The caller must be Root, the `para` owner, or the `para` itself. The para must be a parathread."]
						deregister { id: runtime_types::polkadot_parachain::primitives::Id },
						#[codec(index = 3)]
						#[doc = "Swap a parachain with another parachain or parathread."]
						#[doc = ""]
						#[doc = "The origin must be Root, the `para` owner, or the `para` itself."]
						#[doc = ""]
						#[doc = "The swap will happen only if there is already an opposite swap pending. If there is not,"]
						#[doc = "the swap will be stored in the pending swaps map, ready for a later confirmatory swap."]
						#[doc = ""]
						#[doc = "The `ParaId`s remain mapped to the same head data and code so external code can rely on"]
						#[doc = "`ParaId` to be a long-term identifier of a notional \"parachain\". However, their"]
						#[doc = "scheduling info (i.e. whether they're a parathread or parachain), auction information"]
						#[doc = "and the auction deposit are switched."]
						swap {
							id: runtime_types::polkadot_parachain::primitives::Id,
							other: runtime_types::polkadot_parachain::primitives::Id,
						},
						#[codec(index = 4)]
						#[doc = "Remove a manager lock from a para. This will allow the manager of a"]
						#[doc = "previously locked para to deregister or swap a para without using governance."]
						#[doc = ""]
						#[doc = "Can only be called by the Root origin."]
						force_remove_lock {
							para: runtime_types::polkadot_parachain::primitives::Id,
						},
						#[codec(index = 5)]
						#[doc = "Reserve a Para Id on the relay chain."]
						#[doc = ""]
						#[doc = "This function will reserve a new Para Id to be owned/managed by the origin account."]
						#[doc = "The origin account is able to register head data and validation code using `register` to create"]
						#[doc = "a parathread. Using the Slots pallet, a parathread can then be upgraded to get a parachain slot."]
						#[doc = ""]
						#[doc = "## Arguments"]
						#[doc = "- `origin`: Must be called by a `Signed` origin. Becomes the manager/owner of the new para ID."]
						#[doc = ""]
						#[doc = "## Deposits/Fees"]
						#[doc = "The origin must reserve a deposit of `ParaDeposit` for the registration."]
						#[doc = ""]
						#[doc = "## Events"]
						#[doc = "The `Reserved` event is emitted in case of success, which provides the ID reserved for use."]
						reserve,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
					pub enum Error {
						#[codec(index = 0)]
						#[doc = "The ID is not registered."]
						NotRegistered,
						#[codec(index = 1)]
						#[doc = "The ID is already registered."]
						AlreadyRegistered,
						#[codec(index = 2)]
						#[doc = "The caller is not the owner of this Id."]
						NotOwner,
						#[codec(index = 3)]
						#[doc = "Invalid para code size."]
						CodeTooLarge,
						#[codec(index = 4)]
						#[doc = "Invalid para head data size."]
						HeadDataTooLarge,
						#[codec(index = 5)]
						#[doc = "Para is not a Parachain."]
						NotParachain,
						#[codec(index = 6)]
						#[doc = "Para is not a Parathread."]
						NotParathread,
						#[codec(index = 7)]
						#[doc = "Cannot deregister para"]
						CannotDeregister,
						#[codec(index = 8)]
						#[doc = "Cannot schedule downgrade of parachain to parathread"]
						CannotDowngrade,
						#[codec(index = 9)]
						#[doc = "Cannot schedule upgrade of parathread to parachain"]
						CannotUpgrade,
						#[codec(index = 10)]
						#[doc = "Para is locked from manipulation by the manager. Must use parachain or relay chain governance."]
						ParaLocked,
						#[codec(index = 11)]
						#[doc = "The ID given for registration has not been reserved."]
						NotReserved,
						#[codec(index = 12)]
						#[doc = "Registering parachain with empty code is not allowed."]
						EmptyCode,
						#[codec(index = 13)]
						#[doc = "Cannot perform a parachain slot / lifecycle swap. Check that the state of both paras are"]
						#[doc = "correct for the swap to work."]
						CannotSwap,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
					pub enum Event {
						#[codec(index = 0)]
						Registered {
							para_id: runtime_types::polkadot_parachain::primitives::Id,
							manager: ::subxt::ext::sp_core::crypto::AccountId32,
						},
						#[codec(index = 1)]
						Deregistered { para_id: runtime_types::polkadot_parachain::primitives::Id },
						#[codec(index = 2)]
						Reserved {
							para_id: runtime_types::polkadot_parachain::primitives::Id,
							who: ::subxt::ext::sp_core::crypto::AccountId32,
						},
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct ParaInfo<_0, _1> {
					pub manager: _0,
					pub deposit: _1,
					pub locked: ::core::primitive::bool,
				}
			}
			pub mod slots {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
					pub enum Call {
						#[codec(index = 0)]
						#[doc = "Just a connect into the `lease_out` call, in case Root wants to force some lease to happen"]
						#[doc = "independently of any other on-chain mechanism to use it."]
						#[doc = ""]
						#[doc = "The dispatch origin for this call must match `T::ForceOrigin`."]
						force_lease {
							para: runtime_types::polkadot_parachain::primitives::Id,
							leaser: ::subxt::ext::sp_core::crypto::AccountId32,
							amount: ::core::primitive::u128,
							period_begin: ::core::primitive::u32,
							period_count: ::core::primitive::u32,
						},
						#[codec(index = 1)]
						#[doc = "Clear all leases for a Para Id, refunding any deposits back to the original owners."]
						#[doc = ""]
						#[doc = "The dispatch origin for this call must match `T::ForceOrigin`."]
						clear_all_leases { para: runtime_types::polkadot_parachain::primitives::Id },
						#[codec(index = 2)]
						#[doc = "Try to onboard a parachain that has a lease for the current lease period."]
						#[doc = ""]
						#[doc = "This function can be useful if there was some state issue with a para that should"]
						#[doc = "have onboarded, but was unable to. As long as they have a lease period, we can"]
						#[doc = "let them onboard from here."]
						#[doc = ""]
						#[doc = "Origin must be signed, but can be called by anyone."]
						trigger_onboard { para: runtime_types::polkadot_parachain::primitives::Id },
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
					pub enum Error {
						#[codec(index = 0)]
						#[doc = "The parachain ID is not onboarding."]
						ParaNotOnboarding,
						#[codec(index = 1)]
						#[doc = "There was an error with the lease."]
						LeaseError,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
					pub enum Event {
						#[codec(index = 0)]
						#[doc = "A new `[lease_period]` is beginning."]
						NewLeasePeriod { lease_period: ::core::primitive::u32 },
						#[codec(index = 1)]
						#[doc = "A para has won the right to a continuous set of lease periods as a parachain."]
						#[doc = "First balance is any extra amount reserved on top of the para's existing deposit."]
						#[doc = "Second balance is the total amount reserved."]
						Leased {
							para_id: runtime_types::polkadot_parachain::primitives::Id,
							leaser: ::subxt::ext::sp_core::crypto::AccountId32,
							period_begin: ::core::primitive::u32,
							period_count: ::core::primitive::u32,
							extra_reserved: ::core::primitive::u128,
							total_amount: ::core::primitive::u128,
						},
					}
				}
			}
		}
		pub mod polkadot_runtime_parachains {
			use super::runtime_types;
			pub mod configuration {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
					pub enum Call {
						#[codec(index = 0)]
						#[doc = "Set the validation upgrade cooldown."]
						set_validation_upgrade_cooldown { new: ::core::primitive::u32 },
						#[codec(index = 1)]
						#[doc = "Set the validation upgrade delay."]
						set_validation_upgrade_delay { new: ::core::primitive::u32 },
						#[codec(index = 2)]
						#[doc = "Set the acceptance period for an included candidate."]
						set_code_retention_period { new: ::core::primitive::u32 },
						#[codec(index = 3)]
						#[doc = "Set the max validation code size for incoming upgrades."]
						set_max_code_size { new: ::core::primitive::u32 },
						#[codec(index = 4)]
						#[doc = "Set the max POV block size for incoming upgrades."]
						set_max_pov_size { new: ::core::primitive::u32 },
						#[codec(index = 5)]
						#[doc = "Set the max head data size for paras."]
						set_max_head_data_size { new: ::core::primitive::u32 },
						#[codec(index = 6)]
						#[doc = "Set the number of parathread execution cores."]
						set_parathread_cores { new: ::core::primitive::u32 },
						#[codec(index = 7)]
						#[doc = "Set the number of retries for a particular parathread."]
						set_parathread_retries { new: ::core::primitive::u32 },
						#[codec(index = 8)]
						#[doc = "Set the parachain validator-group rotation frequency"]
						set_group_rotation_frequency { new: ::core::primitive::u32 },
						#[codec(index = 9)]
						#[doc = "Set the availability period for parachains."]
						set_chain_availability_period { new: ::core::primitive::u32 },
						#[codec(index = 10)]
						#[doc = "Set the availability period for parathreads."]
						set_thread_availability_period { new: ::core::primitive::u32 },
						#[codec(index = 11)]
						#[doc = "Set the scheduling lookahead, in expected number of blocks at peak throughput."]
						set_scheduling_lookahead { new: ::core::primitive::u32 },
						#[codec(index = 12)]
						#[doc = "Set the maximum number of validators to assign to any core."]
						set_max_validators_per_core {
							new: ::core::option::Option<::core::primitive::u32>,
						},
						#[codec(index = 13)]
						#[doc = "Set the maximum number of validators to use in parachain consensus."]
						set_max_validators { new: ::core::option::Option<::core::primitive::u32> },
						#[codec(index = 14)]
						#[doc = "Set the dispute period, in number of sessions to keep for disputes."]
						set_dispute_period { new: ::core::primitive::u32 },
						#[codec(index = 15)]
						#[doc = "Set the dispute post conclusion acceptance period."]
						set_dispute_post_conclusion_acceptance_period {
							new: ::core::primitive::u32,
						},
						#[codec(index = 16)]
						#[doc = "Set the maximum number of dispute spam slots."]
						set_dispute_max_spam_slots { new: ::core::primitive::u32 },
						#[codec(index = 17)]
						#[doc = "Set the dispute conclusion by time out period."]
						set_dispute_conclusion_by_time_out_period { new: ::core::primitive::u32 },
						#[codec(index = 18)]
						#[doc = "Set the no show slots, in number of number of consensus slots."]
						#[doc = "Must be at least 1."]
						set_no_show_slots { new: ::core::primitive::u32 },
						#[codec(index = 19)]
						#[doc = "Set the total number of delay tranches."]
						set_n_delay_tranches { new: ::core::primitive::u32 },
						#[codec(index = 20)]
						#[doc = "Set the zeroth delay tranche width."]
						set_zeroth_delay_tranche_width { new: ::core::primitive::u32 },
						#[codec(index = 21)]
						#[doc = "Set the number of validators needed to approve a block."]
						set_needed_approvals { new: ::core::primitive::u32 },
						#[codec(index = 22)]
						#[doc = "Set the number of samples to do of the `RelayVRFModulo` approval assignment criterion."]
						set_relay_vrf_modulo_samples { new: ::core::primitive::u32 },
						#[codec(index = 23)]
						#[doc = "Sets the maximum items that can present in a upward dispatch queue at once."]
						set_max_upward_queue_count { new: ::core::primitive::u32 },
						#[codec(index = 24)]
						#[doc = "Sets the maximum total size of items that can present in a upward dispatch queue at once."]
						set_max_upward_queue_size { new: ::core::primitive::u32 },
						#[codec(index = 25)]
						#[doc = "Set the critical downward message size."]
						set_max_downward_message_size { new: ::core::primitive::u32 },
						#[codec(index = 26)]
						#[doc = "Sets the soft limit for the phase of dispatching dispatchable upward messages."]
						set_ump_service_total_weight { new: ::core::primitive::u64 },
						#[codec(index = 27)]
						#[doc = "Sets the maximum size of an upward message that can be sent by a candidate."]
						set_max_upward_message_size { new: ::core::primitive::u32 },
						#[codec(index = 28)]
						#[doc = "Sets the maximum number of messages that a candidate can contain."]
						set_max_upward_message_num_per_candidate { new: ::core::primitive::u32 },
						#[codec(index = 29)]
						#[doc = "Sets the number of sessions after which an HRMP open channel request expires."]
						set_hrmp_open_request_ttl { new: ::core::primitive::u32 },
						#[codec(index = 30)]
						#[doc = "Sets the amount of funds that the sender should provide for opening an HRMP channel."]
						set_hrmp_sender_deposit { new: ::core::primitive::u128 },
						#[codec(index = 31)]
						#[doc = "Sets the amount of funds that the recipient should provide for accepting opening an HRMP"]
						#[doc = "channel."]
						set_hrmp_recipient_deposit { new: ::core::primitive::u128 },
						#[codec(index = 32)]
						#[doc = "Sets the maximum number of messages allowed in an HRMP channel at once."]
						set_hrmp_channel_max_capacity { new: ::core::primitive::u32 },
						#[codec(index = 33)]
						#[doc = "Sets the maximum total size of messages in bytes allowed in an HRMP channel at once."]
						set_hrmp_channel_max_total_size { new: ::core::primitive::u32 },
						#[codec(index = 34)]
						#[doc = "Sets the maximum number of inbound HRMP channels a parachain is allowed to accept."]
						set_hrmp_max_parachain_inbound_channels { new: ::core::primitive::u32 },
						#[codec(index = 35)]
						#[doc = "Sets the maximum number of inbound HRMP channels a parathread is allowed to accept."]
						set_hrmp_max_parathread_inbound_channels { new: ::core::primitive::u32 },
						#[codec(index = 36)]
						#[doc = "Sets the maximum size of a message that could ever be put into an HRMP channel."]
						set_hrmp_channel_max_message_size { new: ::core::primitive::u32 },
						#[codec(index = 37)]
						#[doc = "Sets the maximum number of outbound HRMP channels a parachain is allowed to open."]
						set_hrmp_max_parachain_outbound_channels { new: ::core::primitive::u32 },
						#[codec(index = 38)]
						#[doc = "Sets the maximum number of outbound HRMP channels a parathread is allowed to open."]
						set_hrmp_max_parathread_outbound_channels { new: ::core::primitive::u32 },
						#[codec(index = 39)]
						#[doc = "Sets the maximum number of outbound HRMP messages can be sent by a candidate."]
						set_hrmp_max_message_num_per_candidate { new: ::core::primitive::u32 },
						#[codec(index = 40)]
						#[doc = "Sets the maximum amount of weight any individual upward message may consume."]
						set_ump_max_individual_weight { new: ::core::primitive::u64 },
						#[codec(index = 41)]
						#[doc = "Enable or disable PVF pre-checking. Consult the field documentation prior executing."]
						set_pvf_checking_enabled { new: ::core::primitive::bool },
						#[codec(index = 42)]
						#[doc = "Set the number of session changes after which a PVF pre-checking voting is rejected."]
						set_pvf_voting_ttl { new: ::core::primitive::u32 },
						#[codec(index = 43)]
						#[doc = "Sets the minimum delay between announcing the upgrade block for a parachain until the"]
						#[doc = "upgrade taking place."]
						#[doc = ""]
						#[doc = "See the field documentation for information and constraints for the new value."]
						set_minimum_validation_upgrade_delay { new: ::core::primitive::u32 },
						#[codec(index = 44)]
						#[doc = "Setting this to true will disable consistency checks for the configuration setters."]
						#[doc = "Use with caution."]
						set_bypass_consistency_check { new: ::core::primitive::bool },
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
					pub enum Error {
						#[codec(index = 0)]
						#[doc = "The new value for a configuration parameter is invalid."]
						InvalidNewValue,
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct HostConfiguration<_0> {
					pub max_code_size: _0,
					pub max_head_data_size: _0,
					pub max_upward_queue_count: _0,
					pub max_upward_queue_size: _0,
					pub max_upward_message_size: _0,
					pub max_upward_message_num_per_candidate: _0,
					pub hrmp_max_message_num_per_candidate: _0,
					pub validation_upgrade_cooldown: _0,
					pub validation_upgrade_delay: _0,
					pub max_pov_size: _0,
					pub max_downward_message_size: _0,
					pub ump_service_total_weight: ::core::primitive::u64,
					pub hrmp_max_parachain_outbound_channels: _0,
					pub hrmp_max_parathread_outbound_channels: _0,
					pub hrmp_sender_deposit: ::core::primitive::u128,
					pub hrmp_recipient_deposit: ::core::primitive::u128,
					pub hrmp_channel_max_capacity: _0,
					pub hrmp_channel_max_total_size: _0,
					pub hrmp_max_parachain_inbound_channels: _0,
					pub hrmp_max_parathread_inbound_channels: _0,
					pub hrmp_channel_max_message_size: _0,
					pub code_retention_period: _0,
					pub parathread_cores: _0,
					pub parathread_retries: _0,
					pub group_rotation_frequency: _0,
					pub chain_availability_period: _0,
					pub thread_availability_period: _0,
					pub scheduling_lookahead: _0,
					pub max_validators_per_core: ::core::option::Option<_0>,
					pub max_validators: ::core::option::Option<_0>,
					pub dispute_period: _0,
					pub dispute_post_conclusion_acceptance_period: _0,
					pub dispute_max_spam_slots: _0,
					pub dispute_conclusion_by_time_out_period: _0,
					pub no_show_slots: _0,
					pub n_delay_tranches: _0,
					pub zeroth_delay_tranche_width: _0,
					pub needed_approvals: _0,
					pub relay_vrf_modulo_samples: _0,
					pub ump_max_individual_weight: ::core::primitive::u64,
					pub pvf_checking_enabled: ::core::primitive::bool,
					pub pvf_voting_ttl: _0,
					pub minimum_validation_upgrade_delay: _0,
				}
			}
			pub mod disputes {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
					pub enum Call {
						#[codec(index = 0)]
						force_unfreeze,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
					pub enum Error {
						#[codec(index = 0)]
						#[doc = "Duplicate dispute statement sets provided."]
						DuplicateDisputeStatementSets,
						#[codec(index = 1)]
						#[doc = "Ancient dispute statement provided."]
						AncientDisputeStatement,
						#[codec(index = 2)]
						#[doc = "Validator index on statement is out of bounds for session."]
						ValidatorIndexOutOfBounds,
						#[codec(index = 3)]
						#[doc = "Invalid signature on statement."]
						InvalidSignature,
						#[codec(index = 4)]
						#[doc = "Validator vote submitted more than once to dispute."]
						DuplicateStatement,
						#[codec(index = 5)]
						#[doc = "Too many spam slots used by some specific validator."]
						PotentialSpam,
						#[codec(index = 6)]
						#[doc = "A dispute where there are only votes on one side."]
						SingleSidedDispute,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
					pub enum Event {
						#[codec(index = 0)]
						#[doc = "A dispute has been initiated. \\[candidate hash, dispute location\\]"]
						DisputeInitiated(
							runtime_types::polkadot_core_primitives::CandidateHash,
							runtime_types::polkadot_runtime_parachains::disputes::DisputeLocation,
						),
						#[codec(index = 1)]
						#[doc = "A dispute has concluded for or against a candidate."]
						#[doc = "`\\[para id, candidate hash, dispute result\\]`"]
						DisputeConcluded(
							runtime_types::polkadot_core_primitives::CandidateHash,
							runtime_types::polkadot_runtime_parachains::disputes::DisputeResult,
						),
						#[codec(index = 2)]
						#[doc = "A dispute has timed out due to insufficient participation."]
						#[doc = "`\\[para id, candidate hash\\]`"]
						DisputeTimedOut(runtime_types::polkadot_core_primitives::CandidateHash),
						#[codec(index = 3)]
						#[doc = "A dispute has concluded with supermajority against a candidate."]
						#[doc = "Block authors should no longer build on top of this head and should"]
						#[doc = "instead revert the block at the given height. This should be the"]
						#[doc = "number of the child of the last known valid block in the chain."]
						Revert(::core::primitive::u32),
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum DisputeLocation {
					#[codec(index = 0)]
					Local,
					#[codec(index = 1)]
					Remote,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum DisputeResult {
					#[codec(index = 0)]
					Valid,
					#[codec(index = 1)]
					Invalid,
				}
			}
			pub mod dmp {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
					pub enum Call {}
				}
			}
			pub mod hrmp {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
					pub enum Call {
						#[codec(index = 0)]
						#[doc = "Initiate opening a channel from a parachain to a given recipient with given channel"]
						#[doc = "parameters."]
						#[doc = ""]
						#[doc = "- `proposed_max_capacity` - specifies how many messages can be in the channel at once."]
						#[doc = "- `proposed_max_message_size` - specifies the maximum size of the messages."]
						#[doc = ""]
						#[doc = "These numbers are a subject to the relay-chain configuration limits."]
						#[doc = ""]
						#[doc = "The channel can be opened only after the recipient confirms it and only on a session"]
						#[doc = "change."]
						hrmp_init_open_channel {
							recipient: runtime_types::polkadot_parachain::primitives::Id,
							proposed_max_capacity: ::core::primitive::u32,
							proposed_max_message_size: ::core::primitive::u32,
						},
						#[codec(index = 1)]
						#[doc = "Accept a pending open channel request from the given sender."]
						#[doc = ""]
						#[doc = "The channel will be opened only on the next session boundary."]
						hrmp_accept_open_channel {
							sender: runtime_types::polkadot_parachain::primitives::Id,
						},
						#[codec(index = 2)]
						#[doc = "Initiate unilateral closing of a channel. The origin must be either the sender or the"]
						#[doc = "recipient in the channel being closed."]
						#[doc = ""]
						#[doc = "The closure can only happen on a session change."]
						hrmp_close_channel {
							channel_id:
								runtime_types::polkadot_parachain::primitives::HrmpChannelId,
						},
						#[codec(index = 3)]
						#[doc = "This extrinsic triggers the cleanup of all the HRMP storage items that"]
						#[doc = "a para may have. Normally this happens once per session, but this allows"]
						#[doc = "you to trigger the cleanup immediately for a specific parachain."]
						#[doc = ""]
						#[doc = "Origin must be Root."]
						#[doc = ""]
						#[doc = "Number of inbound and outbound channels for `para` must be provided as witness data of weighing."]
						force_clean_hrmp {
							para: runtime_types::polkadot_parachain::primitives::Id,
							inbound: ::core::primitive::u32,
							outbound: ::core::primitive::u32,
						},
						#[codec(index = 4)]
						#[doc = "Force process HRMP open channel requests."]
						#[doc = ""]
						#[doc = "If there are pending HRMP open channel requests, you can use this"]
						#[doc = "function process all of those requests immediately."]
						#[doc = ""]
						#[doc = "Total number of opening channels must be provided as witness data of weighing."]
						force_process_hrmp_open { channels: ::core::primitive::u32 },
						#[codec(index = 5)]
						#[doc = "Force process HRMP close channel requests."]
						#[doc = ""]
						#[doc = "If there are pending HRMP close channel requests, you can use this"]
						#[doc = "function process all of those requests immediately."]
						#[doc = ""]
						#[doc = "Total number of closing channels must be provided as witness data of weighing."]
						force_process_hrmp_close { channels: ::core::primitive::u32 },
						#[codec(index = 6)]
						#[doc = "This cancels a pending open channel request. It can be canceled by either of the sender"]
						#[doc = "or the recipient for that request. The origin must be either of those."]
						#[doc = ""]
						#[doc = "The cancellation happens immediately. It is not possible to cancel the request if it is"]
						#[doc = "already accepted."]
						#[doc = ""]
						#[doc = "Total number of open requests (i.e. `HrmpOpenChannelRequestsList`) must be provided as"]
						#[doc = "witness data."]
						hrmp_cancel_open_request {
							channel_id:
								runtime_types::polkadot_parachain::primitives::HrmpChannelId,
							open_requests: ::core::primitive::u32,
						},
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
					pub enum Error {
						#[codec(index = 0)]
						#[doc = "The sender tried to open a channel to themselves."]
						OpenHrmpChannelToSelf,
						#[codec(index = 1)]
						#[doc = "The recipient is not a valid para."]
						OpenHrmpChannelInvalidRecipient,
						#[codec(index = 2)]
						#[doc = "The requested capacity is zero."]
						OpenHrmpChannelZeroCapacity,
						#[codec(index = 3)]
						#[doc = "The requested capacity exceeds the global limit."]
						OpenHrmpChannelCapacityExceedsLimit,
						#[codec(index = 4)]
						#[doc = "The requested maximum message size is 0."]
						OpenHrmpChannelZeroMessageSize,
						#[codec(index = 5)]
						#[doc = "The open request requested the message size that exceeds the global limit."]
						OpenHrmpChannelMessageSizeExceedsLimit,
						#[codec(index = 6)]
						#[doc = "The channel already exists"]
						OpenHrmpChannelAlreadyExists,
						#[codec(index = 7)]
						#[doc = "There is already a request to open the same channel."]
						OpenHrmpChannelAlreadyRequested,
						#[codec(index = 8)]
						#[doc = "The sender already has the maximum number of allowed outbound channels."]
						OpenHrmpChannelLimitExceeded,
						#[codec(index = 9)]
						#[doc = "The channel from the sender to the origin doesn't exist."]
						AcceptHrmpChannelDoesntExist,
						#[codec(index = 10)]
						#[doc = "The channel is already confirmed."]
						AcceptHrmpChannelAlreadyConfirmed,
						#[codec(index = 11)]
						#[doc = "The recipient already has the maximum number of allowed inbound channels."]
						AcceptHrmpChannelLimitExceeded,
						#[codec(index = 12)]
						#[doc = "The origin tries to close a channel where it is neither the sender nor the recipient."]
						CloseHrmpChannelUnauthorized,
						#[codec(index = 13)]
						#[doc = "The channel to be closed doesn't exist."]
						CloseHrmpChannelDoesntExist,
						#[codec(index = 14)]
						#[doc = "The channel close request is already requested."]
						CloseHrmpChannelAlreadyUnderway,
						#[codec(index = 15)]
						#[doc = "Canceling is requested by neither the sender nor recipient of the open channel request."]
						CancelHrmpOpenChannelUnauthorized,
						#[codec(index = 16)]
						#[doc = "The open request doesn't exist."]
						OpenHrmpChannelDoesntExist,
						#[codec(index = 17)]
						#[doc = "Cannot cancel an HRMP open channel request because it is already confirmed."]
						OpenHrmpChannelAlreadyConfirmed,
						#[codec(index = 18)]
						#[doc = "The provided witness data is wrong."]
						WrongWitness,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
					pub enum Event {
						#[codec(index = 0)]
						#[doc = "Open HRMP channel requested."]
						#[doc = "`[sender, recipient, proposed_max_capacity, proposed_max_message_size]`"]
						OpenChannelRequested(
							runtime_types::polkadot_parachain::primitives::Id,
							runtime_types::polkadot_parachain::primitives::Id,
							::core::primitive::u32,
							::core::primitive::u32,
						),
						#[codec(index = 1)]
						#[doc = "An HRMP channel request sent by the receiver was canceled by either party."]
						#[doc = "`[by_parachain, channel_id]`"]
						OpenChannelCanceled(
							runtime_types::polkadot_parachain::primitives::Id,
							runtime_types::polkadot_parachain::primitives::HrmpChannelId,
						),
						#[codec(index = 2)]
						#[doc = "Open HRMP channel accepted. `[sender, recipient]`"]
						OpenChannelAccepted(
							runtime_types::polkadot_parachain::primitives::Id,
							runtime_types::polkadot_parachain::primitives::Id,
						),
						#[codec(index = 3)]
						#[doc = "HRMP channel closed. `[by_parachain, channel_id]`"]
						ChannelClosed(
							runtime_types::polkadot_parachain::primitives::Id,
							runtime_types::polkadot_parachain::primitives::HrmpChannelId,
						),
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct HrmpChannel {
					pub max_capacity: ::core::primitive::u32,
					pub max_total_size: ::core::primitive::u32,
					pub max_message_size: ::core::primitive::u32,
					pub msg_count: ::core::primitive::u32,
					pub total_size: ::core::primitive::u32,
					pub mqc_head: ::core::option::Option<::subxt::ext::sp_core::H256>,
					pub sender_deposit: ::core::primitive::u128,
					pub recipient_deposit: ::core::primitive::u128,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct HrmpOpenChannelRequest {
					pub confirmed: ::core::primitive::bool,
					pub _age: ::core::primitive::u32,
					pub sender_deposit: ::core::primitive::u128,
					pub max_message_size: ::core::primitive::u32,
					pub max_capacity: ::core::primitive::u32,
					pub max_total_size: ::core::primitive::u32,
				}
			}
			pub mod inclusion {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
					pub enum Call {}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
					pub enum Error {
						#[codec(index = 0)]
						#[doc = "Validator indices are out of order or contains duplicates."]
						UnsortedOrDuplicateValidatorIndices,
						#[codec(index = 1)]
						#[doc = "Dispute statement sets are out of order or contain duplicates."]
						UnsortedOrDuplicateDisputeStatementSet,
						#[codec(index = 2)]
						#[doc = "Backed candidates are out of order (core index) or contain duplicates."]
						UnsortedOrDuplicateBackedCandidates,
						#[codec(index = 3)]
						#[doc = "A different relay parent was provided compared to the on-chain stored one."]
						UnexpectedRelayParent,
						#[codec(index = 4)]
						#[doc = "Availability bitfield has unexpected size."]
						WrongBitfieldSize,
						#[codec(index = 5)]
						#[doc = "Bitfield consists of zeros only."]
						BitfieldAllZeros,
						#[codec(index = 6)]
						#[doc = "Multiple bitfields submitted by same validator or validators out of order by index."]
						BitfieldDuplicateOrUnordered,
						#[codec(index = 7)]
						#[doc = "Validator index out of bounds."]
						ValidatorIndexOutOfBounds,
						#[codec(index = 8)]
						#[doc = "Invalid signature"]
						InvalidBitfieldSignature,
						#[codec(index = 9)]
						#[doc = "Candidate submitted but para not scheduled."]
						UnscheduledCandidate,
						#[codec(index = 10)]
						#[doc = "Candidate scheduled despite pending candidate already existing for the para."]
						CandidateScheduledBeforeParaFree,
						#[codec(index = 11)]
						#[doc = "Candidate included with the wrong collator."]
						WrongCollator,
						#[codec(index = 12)]
						#[doc = "Scheduled cores out of order."]
						ScheduledOutOfOrder,
						#[codec(index = 13)]
						#[doc = "Head data exceeds the configured maximum."]
						HeadDataTooLarge,
						#[codec(index = 14)]
						#[doc = "Code upgrade prematurely."]
						PrematureCodeUpgrade,
						#[codec(index = 15)]
						#[doc = "Output code is too large"]
						NewCodeTooLarge,
						#[codec(index = 16)]
						#[doc = "Candidate not in parent context."]
						CandidateNotInParentContext,
						#[codec(index = 17)]
						#[doc = "Invalid group index in core assignment."]
						InvalidGroupIndex,
						#[codec(index = 18)]
						#[doc = "Insufficient (non-majority) backing."]
						InsufficientBacking,
						#[codec(index = 19)]
						#[doc = "Invalid (bad signature, unknown validator, etc.) backing."]
						InvalidBacking,
						#[codec(index = 20)]
						#[doc = "Collator did not sign PoV."]
						NotCollatorSigned,
						#[codec(index = 21)]
						#[doc = "The validation data hash does not match expected."]
						ValidationDataHashMismatch,
						#[codec(index = 22)]
						#[doc = "The downward message queue is not processed correctly."]
						IncorrectDownwardMessageHandling,
						#[codec(index = 23)]
						#[doc = "At least one upward message sent does not pass the acceptance criteria."]
						InvalidUpwardMessages,
						#[codec(index = 24)]
						#[doc = "The candidate didn't follow the rules of HRMP watermark advancement."]
						HrmpWatermarkMishandling,
						#[codec(index = 25)]
						#[doc = "The HRMP messages sent by the candidate is not valid."]
						InvalidOutboundHrmp,
						#[codec(index = 26)]
						#[doc = "The validation code hash of the candidate is not valid."]
						InvalidValidationCodeHash,
						#[codec(index = 27)]
						#[doc = "The `para_head` hash in the candidate descriptor doesn't match the hash of the actual para head in the"]
						#[doc = "commitments."]
						ParaHeadMismatch,
						#[codec(index = 28)]
						#[doc = "A bitfield that references a freed core,"]
						#[doc = "either intentionally or as part of a concluded"]
						#[doc = "invalid dispute."]
						BitfieldReferencesFreedCore,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
					pub enum Event {
						#[codec(index = 0)]
						#[doc = "A candidate was backed. `[candidate, head_data]`"]
						CandidateBacked(
							runtime_types::polkadot_primitives::v2::CandidateReceipt<
								::subxt::ext::sp_core::H256,
							>,
							runtime_types::polkadot_parachain::primitives::HeadData,
							runtime_types::polkadot_primitives::v2::CoreIndex,
							runtime_types::polkadot_primitives::v2::GroupIndex,
						),
						#[codec(index = 1)]
						#[doc = "A candidate was included. `[candidate, head_data]`"]
						CandidateIncluded(
							runtime_types::polkadot_primitives::v2::CandidateReceipt<
								::subxt::ext::sp_core::H256,
							>,
							runtime_types::polkadot_parachain::primitives::HeadData,
							runtime_types::polkadot_primitives::v2::CoreIndex,
							runtime_types::polkadot_primitives::v2::GroupIndex,
						),
						#[codec(index = 2)]
						#[doc = "A candidate timed out. `[candidate, head_data]`"]
						CandidateTimedOut(
							runtime_types::polkadot_primitives::v2::CandidateReceipt<
								::subxt::ext::sp_core::H256,
							>,
							runtime_types::polkadot_parachain::primitives::HeadData,
							runtime_types::polkadot_primitives::v2::CoreIndex,
						),
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct AvailabilityBitfieldRecord<_0> {
					pub bitfield: runtime_types::polkadot_primitives::v2::AvailabilityBitfield,
					pub submitted_at: _0,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct CandidatePendingAvailability<_0, _1> {
					pub core: runtime_types::polkadot_primitives::v2::CoreIndex,
					pub hash: runtime_types::polkadot_core_primitives::CandidateHash,
					pub descriptor: runtime_types::polkadot_primitives::v2::CandidateDescriptor<_0>,
					pub availability_votes: ::subxt::ext::bitvec::vec::BitVec<
						::core::primitive::u8,
						::subxt::ext::bitvec::order::Lsb0,
					>,
					pub backers: ::subxt::ext::bitvec::vec::BitVec<
						::core::primitive::u8,
						::subxt::ext::bitvec::order::Lsb0,
					>,
					pub relay_parent_number: _1,
					pub backed_in_number: _1,
					pub backing_group: runtime_types::polkadot_primitives::v2::GroupIndex,
				}
			}
			pub mod initializer {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
					pub enum Call {
						#[codec(index = 0)]
						#[doc = "Issue a signal to the consensus engine to forcibly act as though all parachain"]
						#[doc = "blocks in all relay chain blocks up to and including the given number in the current"]
						#[doc = "chain are valid and should be finalized."]
						force_approve { up_to: ::core::primitive::u32 },
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct BufferedSessionChange {
					pub validators: ::std::vec::Vec<
						runtime_types::polkadot_primitives::v2::validator_app::Public,
					>,
					pub queued: ::std::vec::Vec<
						runtime_types::polkadot_primitives::v2::validator_app::Public,
					>,
					pub session_index: ::core::primitive::u32,
				}
			}
			pub mod origin {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum Origin {
						#[codec(index = 0)]
						Parachain(runtime_types::polkadot_parachain::primitives::Id),
					}
				}
			}
			pub mod paras {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
					pub enum Call {
						#[codec(index = 0)]
						#[doc = "Set the storage for the parachain validation code immediately."]
						force_set_current_code {
							para: runtime_types::polkadot_parachain::primitives::Id,
							new_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
						},
						#[codec(index = 1)]
						#[doc = "Set the storage for the current parachain head data immediately."]
						force_set_current_head {
							para: runtime_types::polkadot_parachain::primitives::Id,
							new_head: runtime_types::polkadot_parachain::primitives::HeadData,
						},
						#[codec(index = 2)]
						#[doc = "Schedule an upgrade as if it was scheduled in the given relay parent block."]
						force_schedule_code_upgrade {
							para: runtime_types::polkadot_parachain::primitives::Id,
							new_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
							relay_parent_number: ::core::primitive::u32,
						},
						#[codec(index = 3)]
						#[doc = "Note a new block head for para within the context of the current block."]
						force_note_new_head {
							para: runtime_types::polkadot_parachain::primitives::Id,
							new_head: runtime_types::polkadot_parachain::primitives::HeadData,
						},
						#[codec(index = 4)]
						#[doc = "Put a parachain directly into the next session's action queue."]
						#[doc = "We can't queue it any sooner than this without going into the"]
						#[doc = "initializer..."]
						force_queue_action {
							para: runtime_types::polkadot_parachain::primitives::Id,
						},
						#[codec(index = 5)]
						#[doc = "Adds the validation code to the storage."]
						#[doc = ""]
						#[doc = "The code will not be added if it is already present. Additionally, if PVF pre-checking"]
						#[doc = "is running for that code, it will be instantly accepted."]
						#[doc = ""]
						#[doc = "Otherwise, the code will be added into the storage. Note that the code will be added"]
						#[doc = "into storage with reference count 0. This is to account the fact that there are no users"]
						#[doc = "for this code yet. The caller will have to make sure that this code eventually gets"]
						#[doc = "used by some parachain or removed from the storage to avoid storage leaks. For the latter"]
						#[doc = "prefer to use the `poke_unused_validation_code` dispatchable to raw storage manipulation."]
						#[doc = ""]
						#[doc = "This function is mainly meant to be used for upgrading parachains that do not follow"]
						#[doc = "the go-ahead signal while the PVF pre-checking feature is enabled."]
						add_trusted_validation_code {
							validation_code:
								runtime_types::polkadot_parachain::primitives::ValidationCode,
						},
						#[codec(index = 6)]
						#[doc = "Remove the validation code from the storage iff the reference count is 0."]
						#[doc = ""]
						#[doc = "This is better than removing the storage directly, because it will not remove the code"]
						#[doc = "that was suddenly got used by some parachain while this dispatchable was pending"]
						#[doc = "dispatching."]
						poke_unused_validation_code {
							validation_code_hash:
								runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
						},
						#[codec(index = 7)]
						#[doc = "Includes a statement for a PVF pre-checking vote. Potentially, finalizes the vote and"]
						#[doc = "enacts the results if that was the last vote before achieving the supermajority."]
						include_pvf_check_statement {
							stmt: runtime_types::polkadot_primitives::v2::PvfCheckStatement,
							signature:
								runtime_types::polkadot_primitives::v2::validator_app::Signature,
						},
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
					pub enum Error {
						#[codec(index = 0)]
						#[doc = "Para is not registered in our system."]
						NotRegistered,
						#[codec(index = 1)]
						#[doc = "Para cannot be onboarded because it is already tracked by our system."]
						CannotOnboard,
						#[codec(index = 2)]
						#[doc = "Para cannot be offboarded at this time."]
						CannotOffboard,
						#[codec(index = 3)]
						#[doc = "Para cannot be upgraded to a parachain."]
						CannotUpgrade,
						#[codec(index = 4)]
						#[doc = "Para cannot be downgraded to a parathread."]
						CannotDowngrade,
						#[codec(index = 5)]
						#[doc = "The statement for PVF pre-checking is stale."]
						PvfCheckStatementStale,
						#[codec(index = 6)]
						#[doc = "The statement for PVF pre-checking is for a future session."]
						PvfCheckStatementFuture,
						#[codec(index = 7)]
						#[doc = "Claimed validator index is out of bounds."]
						PvfCheckValidatorIndexOutOfBounds,
						#[codec(index = 8)]
						#[doc = "The signature for the PVF pre-checking is invalid."]
						PvfCheckInvalidSignature,
						#[codec(index = 9)]
						#[doc = "The given validator already has cast a vote."]
						PvfCheckDoubleVote,
						#[codec(index = 10)]
						#[doc = "The given PVF does not exist at the moment of process a vote."]
						PvfCheckSubjectInvalid,
						#[codec(index = 11)]
						#[doc = "The PVF pre-checking statement cannot be included since the PVF pre-checking mechanism"]
						#[doc = "is disabled."]
						PvfCheckDisabled,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
					pub enum Event {
						#[codec(index = 0)]
						#[doc = "Current code has been updated for a Para. `para_id`"]
						CurrentCodeUpdated(runtime_types::polkadot_parachain::primitives::Id),
						#[codec(index = 1)]
						#[doc = "Current head has been updated for a Para. `para_id`"]
						CurrentHeadUpdated(runtime_types::polkadot_parachain::primitives::Id),
						#[codec(index = 2)]
						#[doc = "A code upgrade has been scheduled for a Para. `para_id`"]
						CodeUpgradeScheduled(runtime_types::polkadot_parachain::primitives::Id),
						#[codec(index = 3)]
						#[doc = "A new head has been noted for a Para. `para_id`"]
						NewHeadNoted(runtime_types::polkadot_parachain::primitives::Id),
						#[codec(index = 4)]
						#[doc = "A para has been queued to execute pending actions. `para_id`"]
						ActionQueued(
							runtime_types::polkadot_parachain::primitives::Id,
							::core::primitive::u32,
						),
						#[codec(index = 5)]
						#[doc = "The given para either initiated or subscribed to a PVF check for the given validation"]
						#[doc = "code. `code_hash` `para_id`"]
						PvfCheckStarted(
							runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
							runtime_types::polkadot_parachain::primitives::Id,
						),
						#[codec(index = 6)]
						#[doc = "The given validation code was accepted by the PVF pre-checking vote."]
						#[doc = "`code_hash` `para_id`"]
						PvfCheckAccepted(
							runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
							runtime_types::polkadot_parachain::primitives::Id,
						),
						#[codec(index = 7)]
						#[doc = "The given validation code was rejected by the PVF pre-checking vote."]
						#[doc = "`code_hash` `para_id`"]
						PvfCheckRejected(
							runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
							runtime_types::polkadot_parachain::primitives::Id,
						),
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct ParaGenesisArgs {
					pub genesis_head: runtime_types::polkadot_parachain::primitives::HeadData,
					pub validation_code:
						runtime_types::polkadot_parachain::primitives::ValidationCode,
					pub parachain: ::core::primitive::bool,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum ParaLifecycle {
					#[codec(index = 0)]
					Onboarding,
					#[codec(index = 1)]
					Parathread,
					#[codec(index = 2)]
					Parachain,
					#[codec(index = 3)]
					UpgradingParathread,
					#[codec(index = 4)]
					DowngradingParachain,
					#[codec(index = 5)]
					OffboardingParathread,
					#[codec(index = 6)]
					OffboardingParachain,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct ParaPastCodeMeta<_0> {
					pub upgrade_times: ::std::vec::Vec<
						runtime_types::polkadot_runtime_parachains::paras::ReplacementTimes<_0>,
					>,
					pub last_pruned: ::core::option::Option<_0>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct PvfCheckActiveVoteState<_0> {
					pub votes_accept: ::subxt::ext::bitvec::vec::BitVec<
						::core::primitive::u8,
						::subxt::ext::bitvec::order::Lsb0,
					>,
					pub votes_reject: ::subxt::ext::bitvec::vec::BitVec<
						::core::primitive::u8,
						::subxt::ext::bitvec::order::Lsb0,
					>,
					pub age: _0,
					pub created_at: _0,
					pub causes: ::std::vec::Vec<
						runtime_types::polkadot_runtime_parachains::paras::PvfCheckCause<_0>,
					>,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum PvfCheckCause<_0> {
					#[codec(index = 0)]
					Onboarding(runtime_types::polkadot_parachain::primitives::Id),
					#[codec(index = 1)]
					Upgrade {
						id: runtime_types::polkadot_parachain::primitives::Id,
						relay_parent_number: _0,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct ReplacementTimes<_0> {
					pub expected_at: _0,
					pub activated_at: _0,
				}
			}
			pub mod paras_inherent {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
					pub enum Call {
						#[codec(index = 0)]
						#[doc = "Enter the paras inherent. This will process bitfields and backed candidates."]
						enter {
							data: runtime_types::polkadot_primitives::v2::InherentData<
								runtime_types::sp_runtime::generic::header::Header<
									::core::primitive::u32,
									runtime_types::sp_runtime::traits::BlakeTwo256,
								>,
							>,
						},
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
					pub enum Error {
						#[codec(index = 0)]
						#[doc = "Inclusion inherent called more than once per block."]
						TooManyInclusionInherents,
						#[codec(index = 1)]
						#[doc = "The hash of the submitted parent header doesn't correspond to the saved block hash of"]
						#[doc = "the parent."]
						InvalidParentHeader,
						#[codec(index = 2)]
						#[doc = "Disputed candidate that was concluded invalid."]
						CandidateConcludedInvalid,
						#[codec(index = 3)]
						#[doc = "The data given to the inherent will result in an overweight block."]
						InherentOverweight,
						#[codec(index = 4)]
						#[doc = "The ordering of dispute statements was invalid."]
						DisputeStatementsUnsortedOrDuplicates,
						#[codec(index = 5)]
						#[doc = "A dispute statement was invalid."]
						DisputeInvalid,
					}
				}
			}
			pub mod scheduler {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum AssignmentKind {
					#[codec(index = 0)]
					Parachain,
					#[codec(index = 1)]
					Parathread(
						runtime_types::polkadot_primitives::v2::collator_app::Public,
						::core::primitive::u32,
					),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct CoreAssignment {
					pub core: runtime_types::polkadot_primitives::v2::CoreIndex,
					pub para_id: runtime_types::polkadot_parachain::primitives::Id,
					pub kind: runtime_types::polkadot_runtime_parachains::scheduler::AssignmentKind,
					pub group_idx: runtime_types::polkadot_primitives::v2::GroupIndex,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct ParathreadClaimQueue {
					pub queue: ::std::vec::Vec<
						runtime_types::polkadot_runtime_parachains::scheduler::QueuedParathread,
					>,
					pub next_core_offset: ::core::primitive::u32,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct QueuedParathread {
					pub claim: runtime_types::polkadot_primitives::v2::ParathreadEntry,
					pub core_offset: ::core::primitive::u32,
				}
			}
			pub mod shared {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
					pub enum Call {}
				}
			}
			pub mod ump {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
					pub enum Call {
						#[codec(index = 0)]
						#[doc = "Service a single overweight upward message."]
						#[doc = ""]
						#[doc = "- `origin`: Must pass `ExecuteOverweightOrigin`."]
						#[doc = "- `index`: The index of the overweight message to service."]
						#[doc = "- `weight_limit`: The amount of weight that message execution may take."]
						#[doc = ""]
						#[doc = "Errors:"]
						#[doc = "- `UnknownMessageIndex`: Message of `index` is unknown."]
						#[doc = "- `WeightOverLimit`: Message execution may use greater than `weight_limit`."]
						#[doc = ""]
						#[doc = "Events:"]
						#[doc = "- `OverweightServiced`: On success."]
						service_overweight {
							index: ::core::primitive::u64,
							weight_limit: ::core::primitive::u64,
						},
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
					pub enum Error {
						#[codec(index = 0)]
						#[doc = "The message index given is unknown."]
						UnknownMessageIndex,
						#[codec(index = 1)]
						#[doc = "The amount of weight given is possibly not enough for executing the message."]
						WeightOverLimit,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
					pub enum Event {
						#[codec(index = 0)]
						#[doc = "Upward message is invalid XCM."]
						#[doc = "\\[ id \\]"]
						InvalidFormat([::core::primitive::u8; 32usize]),
						#[codec(index = 1)]
						#[doc = "Upward message is unsupported version of XCM."]
						#[doc = "\\[ id \\]"]
						UnsupportedVersion([::core::primitive::u8; 32usize]),
						#[codec(index = 2)]
						#[doc = "Upward message executed with the given outcome."]
						#[doc = "\\[ id, outcome \\]"]
						ExecutedUpward(
							[::core::primitive::u8; 32usize],
							runtime_types::xcm::v2::traits::Outcome,
						),
						#[codec(index = 3)]
						#[doc = "The weight limit for handling upward messages was reached."]
						#[doc = "\\[ id, remaining, required \\]"]
						WeightExhausted(
							[::core::primitive::u8; 32usize],
							::core::primitive::u64,
							::core::primitive::u64,
						),
						#[codec(index = 4)]
						#[doc = "Some upward messages have been received and will be processed."]
						#[doc = "\\[ para, count, size \\]"]
						UpwardMessagesReceived(
							runtime_types::polkadot_parachain::primitives::Id,
							::core::primitive::u32,
							::core::primitive::u32,
						),
						#[codec(index = 5)]
						#[doc = "The weight budget was exceeded for an individual upward message."]
						#[doc = ""]
						#[doc = "This message can be later dispatched manually using `service_overweight` dispatchable"]
						#[doc = "using the assigned `overweight_index`."]
						#[doc = ""]
						#[doc = "\\[ para, id, overweight_index, required \\]"]
						OverweightEnqueued(
							runtime_types::polkadot_parachain::primitives::Id,
							[::core::primitive::u8; 32usize],
							::core::primitive::u64,
							::core::primitive::u64,
						),
						#[codec(index = 6)]
						#[doc = "Upward message from the overweight queue was executed with the given actual weight"]
						#[doc = "used."]
						#[doc = ""]
						#[doc = "\\[ overweight_index, used \\]"]
						OverweightServiced(::core::primitive::u64, ::core::primitive::u64),
					}
				}
			}
		}
		pub mod primitive_types {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct H256(pub [::core::primitive::u8; 32usize]);
		}
		pub mod sp_arithmetic {
			use super::runtime_types;
			pub mod fixed_point {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					Debug,
				)]
				pub struct FixedU128(pub ::core::primitive::u128);
			}
			pub mod per_things {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					Debug,
				)]
				pub struct PerU16(pub ::core::primitive::u16);
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					Debug,
				)]
				pub struct Perbill(pub ::core::primitive::u32);
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					Debug,
				)]
				pub struct Percent(pub ::core::primitive::u8);
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					Debug,
				)]
				pub struct Permill(pub ::core::primitive::u32);
				#[derive(
					:: subxt :: ext :: codec :: CompactAs,
					:: subxt :: ext :: codec :: Decode,
					:: subxt :: ext :: codec :: Encode,
					Debug,
				)]
				pub struct Perquintill(pub ::core::primitive::u64);
			}
		}
		pub mod sp_authority_discovery {
			use super::runtime_types;
			pub mod app {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct Public(pub runtime_types::sp_core::sr25519::Public);
			}
		}
		pub mod sp_consensus_babe {
			use super::runtime_types;
			pub mod app {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct Public(pub runtime_types::sp_core::sr25519::Public);
			}
			pub mod digests {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum NextConfigDescriptor {
					#[codec(index = 1)]
					V1 {
						c: (::core::primitive::u64, ::core::primitive::u64),
						allowed_slots: runtime_types::sp_consensus_babe::AllowedSlots,
					},
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum PreDigest {
					#[codec(index = 1)]
					Primary(runtime_types::sp_consensus_babe::digests::PrimaryPreDigest),
					#[codec(index = 2)]
					SecondaryPlain(
						runtime_types::sp_consensus_babe::digests::SecondaryPlainPreDigest,
					),
					#[codec(index = 3)]
					SecondaryVRF(runtime_types::sp_consensus_babe::digests::SecondaryVRFPreDigest),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct PrimaryPreDigest {
					pub authority_index: ::core::primitive::u32,
					pub slot: runtime_types::sp_consensus_slots::Slot,
					pub vrf_output: [::core::primitive::u8; 32usize],
					pub vrf_proof: [::core::primitive::u8; 64usize],
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct SecondaryPlainPreDigest {
					pub authority_index: ::core::primitive::u32,
					pub slot: runtime_types::sp_consensus_slots::Slot,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct SecondaryVRFPreDigest {
					pub authority_index: ::core::primitive::u32,
					pub slot: runtime_types::sp_consensus_slots::Slot,
					pub vrf_output: [::core::primitive::u8; 32usize],
					pub vrf_proof: [::core::primitive::u8; 64usize],
				}
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum AllowedSlots {
				#[codec(index = 0)]
				PrimarySlots,
				#[codec(index = 1)]
				PrimaryAndSecondaryPlainSlots,
				#[codec(index = 2)]
				PrimaryAndSecondaryVRFSlots,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct BabeEpochConfiguration {
				pub c: (::core::primitive::u64, ::core::primitive::u64),
				pub allowed_slots: runtime_types::sp_consensus_babe::AllowedSlots,
			}
		}
		pub mod sp_consensus_slots {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct EquivocationProof<_0, _1> {
				pub offender: _1,
				pub slot: runtime_types::sp_consensus_slots::Slot,
				pub first_header: _0,
				pub second_header: _0,
			}
			#[derive(
				:: subxt :: ext :: codec :: CompactAs,
				:: subxt :: ext :: codec :: Decode,
				:: subxt :: ext :: codec :: Encode,
				Debug,
			)]
			pub struct Slot(pub ::core::primitive::u64);
		}
		pub mod sp_core {
			use super::runtime_types;
			pub mod crypto {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct AccountId32(pub [::core::primitive::u8; 32usize]);
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct KeyTypeId(pub [::core::primitive::u8; 4usize]);
			}
			pub mod ecdsa {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct Public(pub [::core::primitive::u8; 33usize]);
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct Signature(pub [::core::primitive::u8; 65usize]);
			}
			pub mod ed25519 {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct Public(pub [::core::primitive::u8; 32usize]);
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct Signature(pub [::core::primitive::u8; 64usize]);
			}
			pub mod offchain {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct OpaqueMultiaddr(pub ::std::vec::Vec<::core::primitive::u8>);
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct OpaqueNetworkState {
					pub peer_id: runtime_types::sp_core::OpaquePeerId,
					pub external_addresses:
						::std::vec::Vec<runtime_types::sp_core::offchain::OpaqueMultiaddr>,
				}
			}
			pub mod sr25519 {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct Public(pub [::core::primitive::u8; 32usize]);
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct Signature(pub [::core::primitive::u8; 64usize]);
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct OpaquePeerId(pub ::std::vec::Vec<::core::primitive::u8>);
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum Void {}
		}
		pub mod sp_finality_grandpa {
			use super::runtime_types;
			pub mod app {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct Public(pub runtime_types::sp_core::ed25519::Public);
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct Signature(pub runtime_types::sp_core::ed25519::Signature);
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum Equivocation<_0, _1> {
				#[codec(index = 0)]
				Prevote(
					runtime_types::finality_grandpa::Equivocation<
						runtime_types::sp_finality_grandpa::app::Public,
						runtime_types::finality_grandpa::Prevote<_0, _1>,
						runtime_types::sp_finality_grandpa::app::Signature,
					>,
				),
				#[codec(index = 1)]
				Precommit(
					runtime_types::finality_grandpa::Equivocation<
						runtime_types::sp_finality_grandpa::app::Public,
						runtime_types::finality_grandpa::Precommit<_0, _1>,
						runtime_types::sp_finality_grandpa::app::Signature,
					>,
				),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct EquivocationProof<_0, _1> {
				pub set_id: ::core::primitive::u64,
				pub equivocation: runtime_types::sp_finality_grandpa::Equivocation<_0, _1>,
			}
		}
		pub mod sp_npos_elections {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ElectionScore {
				pub minimal_stake: ::core::primitive::u128,
				pub sum_stake: ::core::primitive::u128,
				pub sum_stake_squared: ::core::primitive::u128,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct Support<_0> {
				pub total: ::core::primitive::u128,
				pub voters: ::std::vec::Vec<(_0, ::core::primitive::u128)>,
			}
		}
		pub mod sp_runtime {
			use super::runtime_types;
			pub mod bounded {
				use super::runtime_types;
				pub mod bounded_btree_map {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct BoundedBTreeMap<_0, _1>(pub ::subxt::utils::KeyedVec<_0, _1>);
				}
				pub mod bounded_vec {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct BoundedVec<_0>(pub ::std::vec::Vec<_0>);
				}
				pub mod weak_bounded_vec {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct WeakBoundedVec<_0>(pub ::std::vec::Vec<_0>);
				}
			}
			pub mod generic {
				use super::runtime_types;
				pub mod digest {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct Digest {
						pub logs:
							::std::vec::Vec<runtime_types::sp_runtime::generic::digest::DigestItem>,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum DigestItem {
						#[codec(index = 6)]
						PreRuntime(
							[::core::primitive::u8; 4usize],
							::std::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 4)]
						Consensus(
							[::core::primitive::u8; 4usize],
							::std::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 5)]
						Seal(
							[::core::primitive::u8; 4usize],
							::std::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 0)]
						Other(::std::vec::Vec<::core::primitive::u8>),
						#[codec(index = 8)]
						RuntimeEnvironmentUpdated,
					}
				}
				pub mod era {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum Era {
						#[codec(index = 0)]
						Immortal,
						#[codec(index = 1)]
						Mortal1(::core::primitive::u8),
						#[codec(index = 2)]
						Mortal2(::core::primitive::u8),
						#[codec(index = 3)]
						Mortal3(::core::primitive::u8),
						#[codec(index = 4)]
						Mortal4(::core::primitive::u8),
						#[codec(index = 5)]
						Mortal5(::core::primitive::u8),
						#[codec(index = 6)]
						Mortal6(::core::primitive::u8),
						#[codec(index = 7)]
						Mortal7(::core::primitive::u8),
						#[codec(index = 8)]
						Mortal8(::core::primitive::u8),
						#[codec(index = 9)]
						Mortal9(::core::primitive::u8),
						#[codec(index = 10)]
						Mortal10(::core::primitive::u8),
						#[codec(index = 11)]
						Mortal11(::core::primitive::u8),
						#[codec(index = 12)]
						Mortal12(::core::primitive::u8),
						#[codec(index = 13)]
						Mortal13(::core::primitive::u8),
						#[codec(index = 14)]
						Mortal14(::core::primitive::u8),
						#[codec(index = 15)]
						Mortal15(::core::primitive::u8),
						#[codec(index = 16)]
						Mortal16(::core::primitive::u8),
						#[codec(index = 17)]
						Mortal17(::core::primitive::u8),
						#[codec(index = 18)]
						Mortal18(::core::primitive::u8),
						#[codec(index = 19)]
						Mortal19(::core::primitive::u8),
						#[codec(index = 20)]
						Mortal20(::core::primitive::u8),
						#[codec(index = 21)]
						Mortal21(::core::primitive::u8),
						#[codec(index = 22)]
						Mortal22(::core::primitive::u8),
						#[codec(index = 23)]
						Mortal23(::core::primitive::u8),
						#[codec(index = 24)]
						Mortal24(::core::primitive::u8),
						#[codec(index = 25)]
						Mortal25(::core::primitive::u8),
						#[codec(index = 26)]
						Mortal26(::core::primitive::u8),
						#[codec(index = 27)]
						Mortal27(::core::primitive::u8),
						#[codec(index = 28)]
						Mortal28(::core::primitive::u8),
						#[codec(index = 29)]
						Mortal29(::core::primitive::u8),
						#[codec(index = 30)]
						Mortal30(::core::primitive::u8),
						#[codec(index = 31)]
						Mortal31(::core::primitive::u8),
						#[codec(index = 32)]
						Mortal32(::core::primitive::u8),
						#[codec(index = 33)]
						Mortal33(::core::primitive::u8),
						#[codec(index = 34)]
						Mortal34(::core::primitive::u8),
						#[codec(index = 35)]
						Mortal35(::core::primitive::u8),
						#[codec(index = 36)]
						Mortal36(::core::primitive::u8),
						#[codec(index = 37)]
						Mortal37(::core::primitive::u8),
						#[codec(index = 38)]
						Mortal38(::core::primitive::u8),
						#[codec(index = 39)]
						Mortal39(::core::primitive::u8),
						#[codec(index = 40)]
						Mortal40(::core::primitive::u8),
						#[codec(index = 41)]
						Mortal41(::core::primitive::u8),
						#[codec(index = 42)]
						Mortal42(::core::primitive::u8),
						#[codec(index = 43)]
						Mortal43(::core::primitive::u8),
						#[codec(index = 44)]
						Mortal44(::core::primitive::u8),
						#[codec(index = 45)]
						Mortal45(::core::primitive::u8),
						#[codec(index = 46)]
						Mortal46(::core::primitive::u8),
						#[codec(index = 47)]
						Mortal47(::core::primitive::u8),
						#[codec(index = 48)]
						Mortal48(::core::primitive::u8),
						#[codec(index = 49)]
						Mortal49(::core::primitive::u8),
						#[codec(index = 50)]
						Mortal50(::core::primitive::u8),
						#[codec(index = 51)]
						Mortal51(::core::primitive::u8),
						#[codec(index = 52)]
						Mortal52(::core::primitive::u8),
						#[codec(index = 53)]
						Mortal53(::core::primitive::u8),
						#[codec(index = 54)]
						Mortal54(::core::primitive::u8),
						#[codec(index = 55)]
						Mortal55(::core::primitive::u8),
						#[codec(index = 56)]
						Mortal56(::core::primitive::u8),
						#[codec(index = 57)]
						Mortal57(::core::primitive::u8),
						#[codec(index = 58)]
						Mortal58(::core::primitive::u8),
						#[codec(index = 59)]
						Mortal59(::core::primitive::u8),
						#[codec(index = 60)]
						Mortal60(::core::primitive::u8),
						#[codec(index = 61)]
						Mortal61(::core::primitive::u8),
						#[codec(index = 62)]
						Mortal62(::core::primitive::u8),
						#[codec(index = 63)]
						Mortal63(::core::primitive::u8),
						#[codec(index = 64)]
						Mortal64(::core::primitive::u8),
						#[codec(index = 65)]
						Mortal65(::core::primitive::u8),
						#[codec(index = 66)]
						Mortal66(::core::primitive::u8),
						#[codec(index = 67)]
						Mortal67(::core::primitive::u8),
						#[codec(index = 68)]
						Mortal68(::core::primitive::u8),
						#[codec(index = 69)]
						Mortal69(::core::primitive::u8),
						#[codec(index = 70)]
						Mortal70(::core::primitive::u8),
						#[codec(index = 71)]
						Mortal71(::core::primitive::u8),
						#[codec(index = 72)]
						Mortal72(::core::primitive::u8),
						#[codec(index = 73)]
						Mortal73(::core::primitive::u8),
						#[codec(index = 74)]
						Mortal74(::core::primitive::u8),
						#[codec(index = 75)]
						Mortal75(::core::primitive::u8),
						#[codec(index = 76)]
						Mortal76(::core::primitive::u8),
						#[codec(index = 77)]
						Mortal77(::core::primitive::u8),
						#[codec(index = 78)]
						Mortal78(::core::primitive::u8),
						#[codec(index = 79)]
						Mortal79(::core::primitive::u8),
						#[codec(index = 80)]
						Mortal80(::core::primitive::u8),
						#[codec(index = 81)]
						Mortal81(::core::primitive::u8),
						#[codec(index = 82)]
						Mortal82(::core::primitive::u8),
						#[codec(index = 83)]
						Mortal83(::core::primitive::u8),
						#[codec(index = 84)]
						Mortal84(::core::primitive::u8),
						#[codec(index = 85)]
						Mortal85(::core::primitive::u8),
						#[codec(index = 86)]
						Mortal86(::core::primitive::u8),
						#[codec(index = 87)]
						Mortal87(::core::primitive::u8),
						#[codec(index = 88)]
						Mortal88(::core::primitive::u8),
						#[codec(index = 89)]
						Mortal89(::core::primitive::u8),
						#[codec(index = 90)]
						Mortal90(::core::primitive::u8),
						#[codec(index = 91)]
						Mortal91(::core::primitive::u8),
						#[codec(index = 92)]
						Mortal92(::core::primitive::u8),
						#[codec(index = 93)]
						Mortal93(::core::primitive::u8),
						#[codec(index = 94)]
						Mortal94(::core::primitive::u8),
						#[codec(index = 95)]
						Mortal95(::core::primitive::u8),
						#[codec(index = 96)]
						Mortal96(::core::primitive::u8),
						#[codec(index = 97)]
						Mortal97(::core::primitive::u8),
						#[codec(index = 98)]
						Mortal98(::core::primitive::u8),
						#[codec(index = 99)]
						Mortal99(::core::primitive::u8),
						#[codec(index = 100)]
						Mortal100(::core::primitive::u8),
						#[codec(index = 101)]
						Mortal101(::core::primitive::u8),
						#[codec(index = 102)]
						Mortal102(::core::primitive::u8),
						#[codec(index = 103)]
						Mortal103(::core::primitive::u8),
						#[codec(index = 104)]
						Mortal104(::core::primitive::u8),
						#[codec(index = 105)]
						Mortal105(::core::primitive::u8),
						#[codec(index = 106)]
						Mortal106(::core::primitive::u8),
						#[codec(index = 107)]
						Mortal107(::core::primitive::u8),
						#[codec(index = 108)]
						Mortal108(::core::primitive::u8),
						#[codec(index = 109)]
						Mortal109(::core::primitive::u8),
						#[codec(index = 110)]
						Mortal110(::core::primitive::u8),
						#[codec(index = 111)]
						Mortal111(::core::primitive::u8),
						#[codec(index = 112)]
						Mortal112(::core::primitive::u8),
						#[codec(index = 113)]
						Mortal113(::core::primitive::u8),
						#[codec(index = 114)]
						Mortal114(::core::primitive::u8),
						#[codec(index = 115)]
						Mortal115(::core::primitive::u8),
						#[codec(index = 116)]
						Mortal116(::core::primitive::u8),
						#[codec(index = 117)]
						Mortal117(::core::primitive::u8),
						#[codec(index = 118)]
						Mortal118(::core::primitive::u8),
						#[codec(index = 119)]
						Mortal119(::core::primitive::u8),
						#[codec(index = 120)]
						Mortal120(::core::primitive::u8),
						#[codec(index = 121)]
						Mortal121(::core::primitive::u8),
						#[codec(index = 122)]
						Mortal122(::core::primitive::u8),
						#[codec(index = 123)]
						Mortal123(::core::primitive::u8),
						#[codec(index = 124)]
						Mortal124(::core::primitive::u8),
						#[codec(index = 125)]
						Mortal125(::core::primitive::u8),
						#[codec(index = 126)]
						Mortal126(::core::primitive::u8),
						#[codec(index = 127)]
						Mortal127(::core::primitive::u8),
						#[codec(index = 128)]
						Mortal128(::core::primitive::u8),
						#[codec(index = 129)]
						Mortal129(::core::primitive::u8),
						#[codec(index = 130)]
						Mortal130(::core::primitive::u8),
						#[codec(index = 131)]
						Mortal131(::core::primitive::u8),
						#[codec(index = 132)]
						Mortal132(::core::primitive::u8),
						#[codec(index = 133)]
						Mortal133(::core::primitive::u8),
						#[codec(index = 134)]
						Mortal134(::core::primitive::u8),
						#[codec(index = 135)]
						Mortal135(::core::primitive::u8),
						#[codec(index = 136)]
						Mortal136(::core::primitive::u8),
						#[codec(index = 137)]
						Mortal137(::core::primitive::u8),
						#[codec(index = 138)]
						Mortal138(::core::primitive::u8),
						#[codec(index = 139)]
						Mortal139(::core::primitive::u8),
						#[codec(index = 140)]
						Mortal140(::core::primitive::u8),
						#[codec(index = 141)]
						Mortal141(::core::primitive::u8),
						#[codec(index = 142)]
						Mortal142(::core::primitive::u8),
						#[codec(index = 143)]
						Mortal143(::core::primitive::u8),
						#[codec(index = 144)]
						Mortal144(::core::primitive::u8),
						#[codec(index = 145)]
						Mortal145(::core::primitive::u8),
						#[codec(index = 146)]
						Mortal146(::core::primitive::u8),
						#[codec(index = 147)]
						Mortal147(::core::primitive::u8),
						#[codec(index = 148)]
						Mortal148(::core::primitive::u8),
						#[codec(index = 149)]
						Mortal149(::core::primitive::u8),
						#[codec(index = 150)]
						Mortal150(::core::primitive::u8),
						#[codec(index = 151)]
						Mortal151(::core::primitive::u8),
						#[codec(index = 152)]
						Mortal152(::core::primitive::u8),
						#[codec(index = 153)]
						Mortal153(::core::primitive::u8),
						#[codec(index = 154)]
						Mortal154(::core::primitive::u8),
						#[codec(index = 155)]
						Mortal155(::core::primitive::u8),
						#[codec(index = 156)]
						Mortal156(::core::primitive::u8),
						#[codec(index = 157)]
						Mortal157(::core::primitive::u8),
						#[codec(index = 158)]
						Mortal158(::core::primitive::u8),
						#[codec(index = 159)]
						Mortal159(::core::primitive::u8),
						#[codec(index = 160)]
						Mortal160(::core::primitive::u8),
						#[codec(index = 161)]
						Mortal161(::core::primitive::u8),
						#[codec(index = 162)]
						Mortal162(::core::primitive::u8),
						#[codec(index = 163)]
						Mortal163(::core::primitive::u8),
						#[codec(index = 164)]
						Mortal164(::core::primitive::u8),
						#[codec(index = 165)]
						Mortal165(::core::primitive::u8),
						#[codec(index = 166)]
						Mortal166(::core::primitive::u8),
						#[codec(index = 167)]
						Mortal167(::core::primitive::u8),
						#[codec(index = 168)]
						Mortal168(::core::primitive::u8),
						#[codec(index = 169)]
						Mortal169(::core::primitive::u8),
						#[codec(index = 170)]
						Mortal170(::core::primitive::u8),
						#[codec(index = 171)]
						Mortal171(::core::primitive::u8),
						#[codec(index = 172)]
						Mortal172(::core::primitive::u8),
						#[codec(index = 173)]
						Mortal173(::core::primitive::u8),
						#[codec(index = 174)]
						Mortal174(::core::primitive::u8),
						#[codec(index = 175)]
						Mortal175(::core::primitive::u8),
						#[codec(index = 176)]
						Mortal176(::core::primitive::u8),
						#[codec(index = 177)]
						Mortal177(::core::primitive::u8),
						#[codec(index = 178)]
						Mortal178(::core::primitive::u8),
						#[codec(index = 179)]
						Mortal179(::core::primitive::u8),
						#[codec(index = 180)]
						Mortal180(::core::primitive::u8),
						#[codec(index = 181)]
						Mortal181(::core::primitive::u8),
						#[codec(index = 182)]
						Mortal182(::core::primitive::u8),
						#[codec(index = 183)]
						Mortal183(::core::primitive::u8),
						#[codec(index = 184)]
						Mortal184(::core::primitive::u8),
						#[codec(index = 185)]
						Mortal185(::core::primitive::u8),
						#[codec(index = 186)]
						Mortal186(::core::primitive::u8),
						#[codec(index = 187)]
						Mortal187(::core::primitive::u8),
						#[codec(index = 188)]
						Mortal188(::core::primitive::u8),
						#[codec(index = 189)]
						Mortal189(::core::primitive::u8),
						#[codec(index = 190)]
						Mortal190(::core::primitive::u8),
						#[codec(index = 191)]
						Mortal191(::core::primitive::u8),
						#[codec(index = 192)]
						Mortal192(::core::primitive::u8),
						#[codec(index = 193)]
						Mortal193(::core::primitive::u8),
						#[codec(index = 194)]
						Mortal194(::core::primitive::u8),
						#[codec(index = 195)]
						Mortal195(::core::primitive::u8),
						#[codec(index = 196)]
						Mortal196(::core::primitive::u8),
						#[codec(index = 197)]
						Mortal197(::core::primitive::u8),
						#[codec(index = 198)]
						Mortal198(::core::primitive::u8),
						#[codec(index = 199)]
						Mortal199(::core::primitive::u8),
						#[codec(index = 200)]
						Mortal200(::core::primitive::u8),
						#[codec(index = 201)]
						Mortal201(::core::primitive::u8),
						#[codec(index = 202)]
						Mortal202(::core::primitive::u8),
						#[codec(index = 203)]
						Mortal203(::core::primitive::u8),
						#[codec(index = 204)]
						Mortal204(::core::primitive::u8),
						#[codec(index = 205)]
						Mortal205(::core::primitive::u8),
						#[codec(index = 206)]
						Mortal206(::core::primitive::u8),
						#[codec(index = 207)]
						Mortal207(::core::primitive::u8),
						#[codec(index = 208)]
						Mortal208(::core::primitive::u8),
						#[codec(index = 209)]
						Mortal209(::core::primitive::u8),
						#[codec(index = 210)]
						Mortal210(::core::primitive::u8),
						#[codec(index = 211)]
						Mortal211(::core::primitive::u8),
						#[codec(index = 212)]
						Mortal212(::core::primitive::u8),
						#[codec(index = 213)]
						Mortal213(::core::primitive::u8),
						#[codec(index = 214)]
						Mortal214(::core::primitive::u8),
						#[codec(index = 215)]
						Mortal215(::core::primitive::u8),
						#[codec(index = 216)]
						Mortal216(::core::primitive::u8),
						#[codec(index = 217)]
						Mortal217(::core::primitive::u8),
						#[codec(index = 218)]
						Mortal218(::core::primitive::u8),
						#[codec(index = 219)]
						Mortal219(::core::primitive::u8),
						#[codec(index = 220)]
						Mortal220(::core::primitive::u8),
						#[codec(index = 221)]
						Mortal221(::core::primitive::u8),
						#[codec(index = 222)]
						Mortal222(::core::primitive::u8),
						#[codec(index = 223)]
						Mortal223(::core::primitive::u8),
						#[codec(index = 224)]
						Mortal224(::core::primitive::u8),
						#[codec(index = 225)]
						Mortal225(::core::primitive::u8),
						#[codec(index = 226)]
						Mortal226(::core::primitive::u8),
						#[codec(index = 227)]
						Mortal227(::core::primitive::u8),
						#[codec(index = 228)]
						Mortal228(::core::primitive::u8),
						#[codec(index = 229)]
						Mortal229(::core::primitive::u8),
						#[codec(index = 230)]
						Mortal230(::core::primitive::u8),
						#[codec(index = 231)]
						Mortal231(::core::primitive::u8),
						#[codec(index = 232)]
						Mortal232(::core::primitive::u8),
						#[codec(index = 233)]
						Mortal233(::core::primitive::u8),
						#[codec(index = 234)]
						Mortal234(::core::primitive::u8),
						#[codec(index = 235)]
						Mortal235(::core::primitive::u8),
						#[codec(index = 236)]
						Mortal236(::core::primitive::u8),
						#[codec(index = 237)]
						Mortal237(::core::primitive::u8),
						#[codec(index = 238)]
						Mortal238(::core::primitive::u8),
						#[codec(index = 239)]
						Mortal239(::core::primitive::u8),
						#[codec(index = 240)]
						Mortal240(::core::primitive::u8),
						#[codec(index = 241)]
						Mortal241(::core::primitive::u8),
						#[codec(index = 242)]
						Mortal242(::core::primitive::u8),
						#[codec(index = 243)]
						Mortal243(::core::primitive::u8),
						#[codec(index = 244)]
						Mortal244(::core::primitive::u8),
						#[codec(index = 245)]
						Mortal245(::core::primitive::u8),
						#[codec(index = 246)]
						Mortal246(::core::primitive::u8),
						#[codec(index = 247)]
						Mortal247(::core::primitive::u8),
						#[codec(index = 248)]
						Mortal248(::core::primitive::u8),
						#[codec(index = 249)]
						Mortal249(::core::primitive::u8),
						#[codec(index = 250)]
						Mortal250(::core::primitive::u8),
						#[codec(index = 251)]
						Mortal251(::core::primitive::u8),
						#[codec(index = 252)]
						Mortal252(::core::primitive::u8),
						#[codec(index = 253)]
						Mortal253(::core::primitive::u8),
						#[codec(index = 254)]
						Mortal254(::core::primitive::u8),
						#[codec(index = 255)]
						Mortal255(::core::primitive::u8),
					}
				}
				pub mod header {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct Header<_0, _1> {
						pub parent_hash: ::subxt::ext::sp_core::H256,
						#[codec(compact)]
						pub number: _0,
						pub state_root: ::subxt::ext::sp_core::H256,
						pub extrinsics_root: ::subxt::ext::sp_core::H256,
						pub digest: runtime_types::sp_runtime::generic::digest::Digest,
						#[codec(skip)]
						pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
					}
				}
				pub mod unchecked_extrinsic {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct UncheckedExtrinsic<_0, _1, _2, _3>(
						pub ::std::vec::Vec<::core::primitive::u8>,
						#[codec(skip)] pub ::core::marker::PhantomData<(_0, _1, _2, _3)>,
					);
				}
			}
			pub mod multiaddress {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum MultiAddress<_0, _1> {
					#[codec(index = 0)]
					Id(_0),
					#[codec(index = 1)]
					Index(#[codec(compact)] _1),
					#[codec(index = 2)]
					Raw(::std::vec::Vec<::core::primitive::u8>),
					#[codec(index = 3)]
					Address32([::core::primitive::u8; 32usize]),
					#[codec(index = 4)]
					Address20([::core::primitive::u8; 20usize]),
				}
			}
			pub mod traits {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct BlakeTwo256;
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum ArithmeticError {
				#[codec(index = 0)]
				Underflow,
				#[codec(index = 1)]
				Overflow,
				#[codec(index = 2)]
				DivisionByZero,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum DispatchError {
				#[codec(index = 0)]
				Other,
				#[codec(index = 1)]
				CannotLookup,
				#[codec(index = 2)]
				BadOrigin,
				#[codec(index = 3)]
				Module(runtime_types::sp_runtime::ModuleError),
				#[codec(index = 4)]
				ConsumerRemaining,
				#[codec(index = 5)]
				NoProviders,
				#[codec(index = 6)]
				TooManyConsumers,
				#[codec(index = 7)]
				Token(runtime_types::sp_runtime::TokenError),
				#[codec(index = 8)]
				Arithmetic(runtime_types::sp_runtime::ArithmeticError),
				#[codec(index = 9)]
				Transactional(runtime_types::sp_runtime::TransactionalError),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct ModuleError {
				pub index: ::core::primitive::u8,
				pub error: [::core::primitive::u8; 4usize],
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum MultiSignature {
				#[codec(index = 0)]
				Ed25519(runtime_types::sp_core::ed25519::Signature),
				#[codec(index = 1)]
				Sr25519(runtime_types::sp_core::sr25519::Signature),
				#[codec(index = 2)]
				Ecdsa(runtime_types::sp_core::ecdsa::Signature),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum MultiSigner {
				#[codec(index = 0)]
				Ed25519(runtime_types::sp_core::ed25519::Public),
				#[codec(index = 1)]
				Sr25519(runtime_types::sp_core::sr25519::Public),
				#[codec(index = 2)]
				Ecdsa(runtime_types::sp_core::ecdsa::Public),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum TokenError {
				#[codec(index = 0)]
				NoFunds,
				#[codec(index = 1)]
				WouldDie,
				#[codec(index = 2)]
				BelowMinimum,
				#[codec(index = 3)]
				CannotCreate,
				#[codec(index = 4)]
				UnknownAsset,
				#[codec(index = 5)]
				Frozen,
				#[codec(index = 6)]
				Unsupported,
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum TransactionalError {
				#[codec(index = 0)]
				LimitReached,
				#[codec(index = 1)]
				NoLayer,
			}
		}
		pub mod sp_session {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct MembershipProof {
				pub session: ::core::primitive::u32,
				pub trie_nodes: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
				pub validator_count: ::core::primitive::u32,
			}
		}
		pub mod sp_staking {
			use super::runtime_types;
			pub mod offence {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct OffenceDetails<_0, _1> {
					pub offender: _1,
					pub reporters: ::std::vec::Vec<_0>,
				}
			}
		}
		pub mod sp_version {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub struct RuntimeVersion {
				pub spec_name: ::std::string::String,
				pub impl_name: ::std::string::String,
				pub authoring_version: ::core::primitive::u32,
				pub spec_version: ::core::primitive::u32,
				pub impl_version: ::core::primitive::u32,
				pub apis:
					::std::vec::Vec<([::core::primitive::u8; 8usize], ::core::primitive::u32)>,
				pub transaction_version: ::core::primitive::u32,
				pub state_version: ::core::primitive::u8,
			}
		}
		pub mod xcm {
			use super::runtime_types;
			pub mod double_encoded {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct DoubleEncoded {
					pub encoded: ::std::vec::Vec<::core::primitive::u8>,
				}
			}
			pub mod v0 {
				use super::runtime_types;
				pub mod junction {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum BodyId {
						#[codec(index = 0)]
						Unit,
						#[codec(index = 1)]
						Named(
							runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<
								::core::primitive::u8,
							>,
						),
						#[codec(index = 2)]
						Index(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 3)]
						Executive,
						#[codec(index = 4)]
						Technical,
						#[codec(index = 5)]
						Legislative,
						#[codec(index = 6)]
						Judicial,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum BodyPart {
						#[codec(index = 0)]
						Voice,
						#[codec(index = 1)]
						Members {
							#[codec(compact)]
							count: ::core::primitive::u32,
						},
						#[codec(index = 2)]
						Fraction {
							#[codec(compact)]
							nom: ::core::primitive::u32,
							#[codec(compact)]
							denom: ::core::primitive::u32,
						},
						#[codec(index = 3)]
						AtLeastProportion {
							#[codec(compact)]
							nom: ::core::primitive::u32,
							#[codec(compact)]
							denom: ::core::primitive::u32,
						},
						#[codec(index = 4)]
						MoreThanProportion {
							#[codec(compact)]
							nom: ::core::primitive::u32,
							#[codec(compact)]
							denom: ::core::primitive::u32,
						},
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum Junction {
						#[codec(index = 0)]
						Parent,
						#[codec(index = 1)]
						Parachain(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 2)]
						AccountId32 {
							network: runtime_types::xcm::v0::junction::NetworkId,
							id: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 3)]
						AccountIndex64 {
							network: runtime_types::xcm::v0::junction::NetworkId,
							#[codec(compact)]
							index: ::core::primitive::u64,
						},
						#[codec(index = 4)]
						AccountKey20 {
							network: runtime_types::xcm::v0::junction::NetworkId,
							key: [::core::primitive::u8; 20usize],
						},
						#[codec(index = 5)]
						PalletInstance(::core::primitive::u8),
						#[codec(index = 6)]
						GeneralIndex(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 7)]
						GeneralKey(
							runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<
								::core::primitive::u8,
							>,
						),
						#[codec(index = 8)]
						OnlyChild,
						#[codec(index = 9)]
						Plurality {
							id: runtime_types::xcm::v0::junction::BodyId,
							part: runtime_types::xcm::v0::junction::BodyPart,
						},
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum NetworkId {
						#[codec(index = 0)]
						Any,
						#[codec(index = 1)]
						Named(
							runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<
								::core::primitive::u8,
							>,
						),
						#[codec(index = 2)]
						Polkadot,
						#[codec(index = 3)]
						Kusama,
					}
				}
				pub mod multi_asset {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum MultiAsset {
						#[codec(index = 0)]
						None,
						#[codec(index = 1)]
						All,
						#[codec(index = 2)]
						AllFungible,
						#[codec(index = 3)]
						AllNonFungible,
						#[codec(index = 4)]
						AllAbstractFungible { id: ::std::vec::Vec<::core::primitive::u8> },
						#[codec(index = 5)]
						AllAbstractNonFungible { class: ::std::vec::Vec<::core::primitive::u8> },
						#[codec(index = 6)]
						AllConcreteFungible {
							id: runtime_types::xcm::v0::multi_location::MultiLocation,
						},
						#[codec(index = 7)]
						AllConcreteNonFungible {
							class: runtime_types::xcm::v0::multi_location::MultiLocation,
						},
						#[codec(index = 8)]
						AbstractFungible {
							id: ::std::vec::Vec<::core::primitive::u8>,
							#[codec(compact)]
							amount: ::core::primitive::u128,
						},
						#[codec(index = 9)]
						AbstractNonFungible {
							class: ::std::vec::Vec<::core::primitive::u8>,
							instance: runtime_types::xcm::v1::multiasset::AssetInstance,
						},
						#[codec(index = 10)]
						ConcreteFungible {
							id: runtime_types::xcm::v0::multi_location::MultiLocation,
							#[codec(compact)]
							amount: ::core::primitive::u128,
						},
						#[codec(index = 11)]
						ConcreteNonFungible {
							class: runtime_types::xcm::v0::multi_location::MultiLocation,
							instance: runtime_types::xcm::v1::multiasset::AssetInstance,
						},
					}
				}
				pub mod multi_location {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum MultiLocation {
						#[codec(index = 0)]
						Null,
						#[codec(index = 1)]
						X1(runtime_types::xcm::v0::junction::Junction),
						#[codec(index = 2)]
						X2(
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
						),
						#[codec(index = 3)]
						X3(
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
						),
						#[codec(index = 4)]
						X4(
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
						),
						#[codec(index = 5)]
						X5(
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
						),
						#[codec(index = 6)]
						X6(
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
						),
						#[codec(index = 7)]
						X7(
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
						),
						#[codec(index = 8)]
						X8(
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
							runtime_types::xcm::v0::junction::Junction,
						),
					}
				}
				pub mod order {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum Order {
						#[codec(index = 0)]
						Null,
						#[codec(index = 1)]
						DepositAsset {
							assets:
								::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
							dest: runtime_types::xcm::v0::multi_location::MultiLocation,
						},
						#[codec(index = 2)]
						DepositReserveAsset {
							assets:
								::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
							dest: runtime_types::xcm::v0::multi_location::MultiLocation,
							effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
						},
						#[codec(index = 3)]
						ExchangeAsset {
							give: ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
							receive:
								::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
						},
						#[codec(index = 4)]
						InitiateReserveWithdraw {
							assets:
								::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
							reserve: runtime_types::xcm::v0::multi_location::MultiLocation,
							effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
						},
						#[codec(index = 5)]
						InitiateTeleport {
							assets:
								::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
							dest: runtime_types::xcm::v0::multi_location::MultiLocation,
							effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
						},
						#[codec(index = 6)]
						QueryHolding {
							#[codec(compact)]
							query_id: ::core::primitive::u64,
							dest: runtime_types::xcm::v0::multi_location::MultiLocation,
							assets:
								::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
						},
						#[codec(index = 7)]
						BuyExecution {
							fees: runtime_types::xcm::v0::multi_asset::MultiAsset,
							weight: ::core::primitive::u64,
							debt: ::core::primitive::u64,
							halt_on_error: ::core::primitive::bool,
							xcm: ::std::vec::Vec<runtime_types::xcm::v0::Xcm>,
						},
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum OriginKind {
					#[codec(index = 0)]
					Native,
					#[codec(index = 1)]
					SovereignAccount,
					#[codec(index = 2)]
					Superuser,
					#[codec(index = 3)]
					Xcm,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum Response {
					#[codec(index = 0)]
					Assets(::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum Xcm {
					#[codec(index = 0)]
					WithdrawAsset {
						assets: ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
						effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
					},
					#[codec(index = 1)]
					ReserveAssetDeposit {
						assets: ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
						effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
					},
					#[codec(index = 2)]
					TeleportAsset {
						assets: ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
						effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
					},
					#[codec(index = 3)]
					QueryResponse {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v0::Response,
					},
					#[codec(index = 4)]
					TransferAsset {
						assets: ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
						dest: runtime_types::xcm::v0::multi_location::MultiLocation,
					},
					#[codec(index = 5)]
					TransferReserveAsset {
						assets: ::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>,
						dest: runtime_types::xcm::v0::multi_location::MultiLocation,
						effects: ::std::vec::Vec<runtime_types::xcm::v0::order::Order>,
					},
					#[codec(index = 6)]
					Transact {
						origin_type: runtime_types::xcm::v0::OriginKind,
						require_weight_at_most: ::core::primitive::u64,
						call: runtime_types::xcm::double_encoded::DoubleEncoded,
					},
					#[codec(index = 7)]
					HrmpNewChannelOpenRequest {
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						max_message_size: ::core::primitive::u32,
						#[codec(compact)]
						max_capacity: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					HrmpChannelAccepted {
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					HrmpChannelClosing {
						#[codec(compact)]
						initiator: ::core::primitive::u32,
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					RelayedFrom {
						who: runtime_types::xcm::v0::multi_location::MultiLocation,
						message: ::std::boxed::Box<runtime_types::xcm::v0::Xcm>,
					},
				}
			}
			pub mod v1 {
				use super::runtime_types;
				pub mod junction {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum Junction {
						#[codec(index = 0)]
						Parachain(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 1)]
						AccountId32 {
							network: runtime_types::xcm::v0::junction::NetworkId,
							id: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 2)]
						AccountIndex64 {
							network: runtime_types::xcm::v0::junction::NetworkId,
							#[codec(compact)]
							index: ::core::primitive::u64,
						},
						#[codec(index = 3)]
						AccountKey20 {
							network: runtime_types::xcm::v0::junction::NetworkId,
							key: [::core::primitive::u8; 20usize],
						},
						#[codec(index = 4)]
						PalletInstance(::core::primitive::u8),
						#[codec(index = 5)]
						GeneralIndex(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 6)]
						GeneralKey(
							runtime_types::sp_runtime::bounded::weak_bounded_vec::WeakBoundedVec<
								::core::primitive::u8,
							>,
						),
						#[codec(index = 7)]
						OnlyChild,
						#[codec(index = 8)]
						Plurality {
							id: runtime_types::xcm::v0::junction::BodyId,
							part: runtime_types::xcm::v0::junction::BodyPart,
						},
					}
				}
				pub mod multiasset {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum AssetId {
						#[codec(index = 0)]
						Concrete(runtime_types::xcm::v1::multilocation::MultiLocation),
						#[codec(index = 1)]
						Abstract(::std::vec::Vec<::core::primitive::u8>),
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum AssetInstance {
						#[codec(index = 0)]
						Undefined,
						#[codec(index = 1)]
						Index(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 2)]
						Array4([::core::primitive::u8; 4usize]),
						#[codec(index = 3)]
						Array8([::core::primitive::u8; 8usize]),
						#[codec(index = 4)]
						Array16([::core::primitive::u8; 16usize]),
						#[codec(index = 5)]
						Array32([::core::primitive::u8; 32usize]),
						#[codec(index = 6)]
						Blob(::std::vec::Vec<::core::primitive::u8>),
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum Fungibility {
						#[codec(index = 0)]
						Fungible(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 1)]
						NonFungible(runtime_types::xcm::v1::multiasset::AssetInstance),
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct MultiAsset {
						pub id: runtime_types::xcm::v1::multiasset::AssetId,
						pub fun: runtime_types::xcm::v1::multiasset::Fungibility,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum MultiAssetFilter {
						#[codec(index = 0)]
						Definite(runtime_types::xcm::v1::multiasset::MultiAssets),
						#[codec(index = 1)]
						Wild(runtime_types::xcm::v1::multiasset::WildMultiAsset),
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct MultiAssets(
						pub ::std::vec::Vec<runtime_types::xcm::v1::multiasset::MultiAsset>,
					);
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum WildFungibility {
						#[codec(index = 0)]
						Fungible,
						#[codec(index = 1)]
						NonFungible,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum WildMultiAsset {
						#[codec(index = 0)]
						All,
						#[codec(index = 1)]
						AllOf {
							id: runtime_types::xcm::v1::multiasset::AssetId,
							fun: runtime_types::xcm::v1::multiasset::WildFungibility,
						},
					}
				}
				pub mod multilocation {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum Junctions {
						#[codec(index = 0)]
						Here,
						#[codec(index = 1)]
						X1(runtime_types::xcm::v1::junction::Junction),
						#[codec(index = 2)]
						X2(
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
						),
						#[codec(index = 3)]
						X3(
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
						),
						#[codec(index = 4)]
						X4(
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
						),
						#[codec(index = 5)]
						X5(
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
						),
						#[codec(index = 6)]
						X6(
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
						),
						#[codec(index = 7)]
						X7(
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
						),
						#[codec(index = 8)]
						X8(
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
							runtime_types::xcm::v1::junction::Junction,
						),
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub struct MultiLocation {
						pub parents: ::core::primitive::u8,
						pub interior: runtime_types::xcm::v1::multilocation::Junctions,
					}
				}
				pub mod order {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum Order {
						#[codec(index = 0)]
						Noop,
						#[codec(index = 1)]
						DepositAsset {
							assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
							max_assets: ::core::primitive::u32,
							beneficiary: runtime_types::xcm::v1::multilocation::MultiLocation,
						},
						#[codec(index = 2)]
						DepositReserveAsset {
							assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
							max_assets: ::core::primitive::u32,
							dest: runtime_types::xcm::v1::multilocation::MultiLocation,
							effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
						},
						#[codec(index = 3)]
						ExchangeAsset {
							give: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
							receive: runtime_types::xcm::v1::multiasset::MultiAssets,
						},
						#[codec(index = 4)]
						InitiateReserveWithdraw {
							assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
							reserve: runtime_types::xcm::v1::multilocation::MultiLocation,
							effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
						},
						#[codec(index = 5)]
						InitiateTeleport {
							assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
							dest: runtime_types::xcm::v1::multilocation::MultiLocation,
							effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
						},
						#[codec(index = 6)]
						QueryHolding {
							#[codec(compact)]
							query_id: ::core::primitive::u64,
							dest: runtime_types::xcm::v1::multilocation::MultiLocation,
							assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
						},
						#[codec(index = 7)]
						BuyExecution {
							fees: runtime_types::xcm::v1::multiasset::MultiAsset,
							weight: ::core::primitive::u64,
							debt: ::core::primitive::u64,
							halt_on_error: ::core::primitive::bool,
							instructions: ::std::vec::Vec<runtime_types::xcm::v1::Xcm>,
						},
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum Response {
					#[codec(index = 0)]
					Assets(runtime_types::xcm::v1::multiasset::MultiAssets),
					#[codec(index = 1)]
					Version(::core::primitive::u32),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum Xcm {
					#[codec(index = 0)]
					WithdrawAsset {
						assets: runtime_types::xcm::v1::multiasset::MultiAssets,
						effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
					},
					#[codec(index = 1)]
					ReserveAssetDeposited {
						assets: runtime_types::xcm::v1::multiasset::MultiAssets,
						effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
					},
					#[codec(index = 2)]
					ReceiveTeleportedAsset {
						assets: runtime_types::xcm::v1::multiasset::MultiAssets,
						effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
					},
					#[codec(index = 3)]
					QueryResponse {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v1::Response,
					},
					#[codec(index = 4)]
					TransferAsset {
						assets: runtime_types::xcm::v1::multiasset::MultiAssets,
						beneficiary: runtime_types::xcm::v1::multilocation::MultiLocation,
					},
					#[codec(index = 5)]
					TransferReserveAsset {
						assets: runtime_types::xcm::v1::multiasset::MultiAssets,
						dest: runtime_types::xcm::v1::multilocation::MultiLocation,
						effects: ::std::vec::Vec<runtime_types::xcm::v1::order::Order>,
					},
					#[codec(index = 6)]
					Transact {
						origin_type: runtime_types::xcm::v0::OriginKind,
						require_weight_at_most: ::core::primitive::u64,
						call: runtime_types::xcm::double_encoded::DoubleEncoded,
					},
					#[codec(index = 7)]
					HrmpNewChannelOpenRequest {
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						max_message_size: ::core::primitive::u32,
						#[codec(compact)]
						max_capacity: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					HrmpChannelAccepted {
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					HrmpChannelClosing {
						#[codec(compact)]
						initiator: ::core::primitive::u32,
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					RelayedFrom {
						who: runtime_types::xcm::v1::multilocation::Junctions,
						message: ::std::boxed::Box<runtime_types::xcm::v1::Xcm>,
					},
					#[codec(index = 11)]
					SubscribeVersion {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 12)]
					UnsubscribeVersion,
				}
			}
			pub mod v2 {
				use super::runtime_types;
				pub mod traits {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum Error {
						#[codec(index = 0)]
						Overflow,
						#[codec(index = 1)]
						Unimplemented,
						#[codec(index = 2)]
						UntrustedReserveLocation,
						#[codec(index = 3)]
						UntrustedTeleportLocation,
						#[codec(index = 4)]
						MultiLocationFull,
						#[codec(index = 5)]
						MultiLocationNotInvertible,
						#[codec(index = 6)]
						BadOrigin,
						#[codec(index = 7)]
						InvalidLocation,
						#[codec(index = 8)]
						AssetNotFound,
						#[codec(index = 9)]
						FailedToTransactAsset,
						#[codec(index = 10)]
						NotWithdrawable,
						#[codec(index = 11)]
						LocationCannotHold,
						#[codec(index = 12)]
						ExceedsMaxMessageSize,
						#[codec(index = 13)]
						DestinationUnsupported,
						#[codec(index = 14)]
						Transport,
						#[codec(index = 15)]
						Unroutable,
						#[codec(index = 16)]
						UnknownClaim,
						#[codec(index = 17)]
						FailedToDecode,
						#[codec(index = 18)]
						MaxWeightInvalid,
						#[codec(index = 19)]
						NotHoldingFees,
						#[codec(index = 20)]
						TooExpensive,
						#[codec(index = 21)]
						Trap(::core::primitive::u64),
						#[codec(index = 22)]
						UnhandledXcmVersion,
						#[codec(index = 23)]
						WeightLimitReached(::core::primitive::u64),
						#[codec(index = 24)]
						Barrier,
						#[codec(index = 25)]
						WeightNotComputable,
					}
					#[derive(
						:: subxt :: ext :: codec :: Decode,
						:: subxt :: ext :: codec :: Encode,
						Debug,
					)]
					pub enum Outcome {
						#[codec(index = 0)]
						Complete(::core::primitive::u64),
						#[codec(index = 1)]
						Incomplete(::core::primitive::u64, runtime_types::xcm::v2::traits::Error),
						#[codec(index = 2)]
						Error(runtime_types::xcm::v2::traits::Error),
					}
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum Instruction {
					#[codec(index = 0)]
					WithdrawAsset(runtime_types::xcm::v1::multiasset::MultiAssets),
					#[codec(index = 1)]
					ReserveAssetDeposited(runtime_types::xcm::v1::multiasset::MultiAssets),
					#[codec(index = 2)]
					ReceiveTeleportedAsset(runtime_types::xcm::v1::multiasset::MultiAssets),
					#[codec(index = 3)]
					QueryResponse {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v2::Response,
						#[codec(compact)]
						max_weight: ::core::primitive::u64,
					},
					#[codec(index = 4)]
					TransferAsset {
						assets: runtime_types::xcm::v1::multiasset::MultiAssets,
						beneficiary: runtime_types::xcm::v1::multilocation::MultiLocation,
					},
					#[codec(index = 5)]
					TransferReserveAsset {
						assets: runtime_types::xcm::v1::multiasset::MultiAssets,
						dest: runtime_types::xcm::v1::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 6)]
					Transact {
						origin_type: runtime_types::xcm::v0::OriginKind,
						#[codec(compact)]
						require_weight_at_most: ::core::primitive::u64,
						call: runtime_types::xcm::double_encoded::DoubleEncoded,
					},
					#[codec(index = 7)]
					HrmpNewChannelOpenRequest {
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						max_message_size: ::core::primitive::u32,
						#[codec(compact)]
						max_capacity: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					HrmpChannelAccepted {
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					HrmpChannelClosing {
						#[codec(compact)]
						initiator: ::core::primitive::u32,
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					ClearOrigin,
					#[codec(index = 11)]
					DescendOrigin(runtime_types::xcm::v1::multilocation::Junctions),
					#[codec(index = 12)]
					ReportError {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						dest: runtime_types::xcm::v1::multilocation::MultiLocation,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 13)]
					DepositAsset {
						assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_assets: ::core::primitive::u32,
						beneficiary: runtime_types::xcm::v1::multilocation::MultiLocation,
					},
					#[codec(index = 14)]
					DepositReserveAsset {
						assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_assets: ::core::primitive::u32,
						dest: runtime_types::xcm::v1::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 15)]
					ExchangeAsset {
						give: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
						receive: runtime_types::xcm::v1::multiasset::MultiAssets,
					},
					#[codec(index = 16)]
					InitiateReserveWithdraw {
						assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
						reserve: runtime_types::xcm::v1::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 17)]
					InitiateTeleport {
						assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
						dest: runtime_types::xcm::v1::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 18)]
					QueryHolding {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						dest: runtime_types::xcm::v1::multilocation::MultiLocation,
						assets: runtime_types::xcm::v1::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 19)]
					BuyExecution {
						fees: runtime_types::xcm::v1::multiasset::MultiAsset,
						weight_limit: runtime_types::xcm::v2::WeightLimit,
					},
					#[codec(index = 20)]
					RefundSurplus,
					#[codec(index = 21)]
					SetErrorHandler(runtime_types::xcm::v2::Xcm),
					#[codec(index = 22)]
					SetAppendix(runtime_types::xcm::v2::Xcm),
					#[codec(index = 23)]
					ClearError,
					#[codec(index = 24)]
					ClaimAsset {
						assets: runtime_types::xcm::v1::multiasset::MultiAssets,
						ticket: runtime_types::xcm::v1::multilocation::MultiLocation,
					},
					#[codec(index = 25)]
					Trap(#[codec(compact)] ::core::primitive::u64),
					#[codec(index = 26)]
					SubscribeVersion {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 27)]
					UnsubscribeVersion,
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum Response {
					#[codec(index = 0)]
					Null,
					#[codec(index = 1)]
					Assets(runtime_types::xcm::v1::multiasset::MultiAssets),
					#[codec(index = 2)]
					ExecutionResult(
						::core::option::Option<(
							::core::primitive::u32,
							runtime_types::xcm::v2::traits::Error,
						)>,
					),
					#[codec(index = 3)]
					Version(::core::primitive::u32),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub enum WeightLimit {
					#[codec(index = 0)]
					Unlimited,
					#[codec(index = 1)]
					Limited(#[codec(compact)] ::core::primitive::u64),
				}
				#[derive(
					:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
				)]
				pub struct Xcm(pub ::std::vec::Vec<runtime_types::xcm::v2::Instruction>);
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum VersionedMultiAssets {
				#[codec(index = 0)]
				V0(::std::vec::Vec<runtime_types::xcm::v0::multi_asset::MultiAsset>),
				#[codec(index = 1)]
				V1(runtime_types::xcm::v1::multiasset::MultiAssets),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum VersionedMultiLocation {
				#[codec(index = 0)]
				V0(runtime_types::xcm::v0::multi_location::MultiLocation),
				#[codec(index = 1)]
				V1(runtime_types::xcm::v1::multilocation::MultiLocation),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum VersionedResponse {
				#[codec(index = 0)]
				V0(runtime_types::xcm::v0::Response),
				#[codec(index = 1)]
				V1(runtime_types::xcm::v1::Response),
				#[codec(index = 2)]
				V2(runtime_types::xcm::v2::Response),
			}
			#[derive(
				:: subxt :: ext :: codec :: Decode, :: subxt :: ext :: codec :: Encode, Debug,
			)]
			pub enum VersionedXcm {
				#[codec(index = 0)]
				V0(runtime_types::xcm::v0::Xcm),
				#[codec(index = 1)]
				V1(runtime_types::xcm::v1::Xcm),
				#[codec(index = 2)]
				V2(runtime_types::xcm::v2::Xcm),
			}
		}
	}
	#[doc = r" The default error type returned when there is a runtime issue,"]
	#[doc = r" exposed here for ease of use."]
	pub type DispatchError = runtime_types::sp_runtime::DispatchError;
	pub fn constants() -> ConstantsApi {
		ConstantsApi
	}
	pub fn storage() -> StorageApi {
		StorageApi
	}
	pub fn tx() -> TransactionApi {
		TransactionApi
	}
	pub struct ConstantsApi;
	impl ConstantsApi {
		pub fn system(&self) -> system::constants::ConstantsApi {
			system::constants::ConstantsApi
		}
		pub fn babe(&self) -> babe::constants::ConstantsApi {
			babe::constants::ConstantsApi
		}
		pub fn timestamp(&self) -> timestamp::constants::ConstantsApi {
			timestamp::constants::ConstantsApi
		}
		pub fn indices(&self) -> indices::constants::ConstantsApi {
			indices::constants::ConstantsApi
		}
		pub fn balances(&self) -> balances::constants::ConstantsApi {
			balances::constants::ConstantsApi
		}
		pub fn transaction_payment(&self) -> transaction_payment::constants::ConstantsApi {
			transaction_payment::constants::ConstantsApi
		}
		pub fn authorship(&self) -> authorship::constants::ConstantsApi {
			authorship::constants::ConstantsApi
		}
		pub fn staking(&self) -> staking::constants::ConstantsApi {
			staking::constants::ConstantsApi
		}
		pub fn grandpa(&self) -> grandpa::constants::ConstantsApi {
			grandpa::constants::ConstantsApi
		}
		pub fn im_online(&self) -> im_online::constants::ConstantsApi {
			im_online::constants::ConstantsApi
		}
		pub fn democracy(&self) -> democracy::constants::ConstantsApi {
			democracy::constants::ConstantsApi
		}
		pub fn phragmen_election(&self) -> phragmen_election::constants::ConstantsApi {
			phragmen_election::constants::ConstantsApi
		}
		pub fn treasury(&self) -> treasury::constants::ConstantsApi {
			treasury::constants::ConstantsApi
		}
		pub fn claims(&self) -> claims::constants::ConstantsApi {
			claims::constants::ConstantsApi
		}
		pub fn utility(&self) -> utility::constants::ConstantsApi {
			utility::constants::ConstantsApi
		}
		pub fn identity(&self) -> identity::constants::ConstantsApi {
			identity::constants::ConstantsApi
		}
		pub fn society(&self) -> society::constants::ConstantsApi {
			society::constants::ConstantsApi
		}
		pub fn recovery(&self) -> recovery::constants::ConstantsApi {
			recovery::constants::ConstantsApi
		}
		pub fn vesting(&self) -> vesting::constants::ConstantsApi {
			vesting::constants::ConstantsApi
		}
		pub fn scheduler(&self) -> scheduler::constants::ConstantsApi {
			scheduler::constants::ConstantsApi
		}
		pub fn proxy(&self) -> proxy::constants::ConstantsApi {
			proxy::constants::ConstantsApi
		}
		pub fn multisig(&self) -> multisig::constants::ConstantsApi {
			multisig::constants::ConstantsApi
		}
		pub fn bounties(&self) -> bounties::constants::ConstantsApi {
			bounties::constants::ConstantsApi
		}
		pub fn child_bounties(&self) -> child_bounties::constants::ConstantsApi {
			child_bounties::constants::ConstantsApi
		}
		pub fn tips(&self) -> tips::constants::ConstantsApi {
			tips::constants::ConstantsApi
		}
		pub fn election_provider_multi_phase(
			&self,
		) -> election_provider_multi_phase::constants::ConstantsApi {
			election_provider_multi_phase::constants::ConstantsApi
		}
		pub fn gilt(&self) -> gilt::constants::ConstantsApi {
			gilt::constants::ConstantsApi
		}
		pub fn voter_list(&self) -> voter_list::constants::ConstantsApi {
			voter_list::constants::ConstantsApi
		}
		pub fn nomination_pools(&self) -> nomination_pools::constants::ConstantsApi {
			nomination_pools::constants::ConstantsApi
		}
		pub fn paras(&self) -> paras::constants::ConstantsApi {
			paras::constants::ConstantsApi
		}
		pub fn registrar(&self) -> registrar::constants::ConstantsApi {
			registrar::constants::ConstantsApi
		}
		pub fn slots(&self) -> slots::constants::ConstantsApi {
			slots::constants::ConstantsApi
		}
		pub fn auctions(&self) -> auctions::constants::ConstantsApi {
			auctions::constants::ConstantsApi
		}
		pub fn crowdloan(&self) -> crowdloan::constants::ConstantsApi {
			crowdloan::constants::ConstantsApi
		}
	}
	pub struct StorageApi;
	impl StorageApi {
		pub fn system(&self) -> system::storage::StorageApi {
			system::storage::StorageApi
		}
		pub fn babe(&self) -> babe::storage::StorageApi {
			babe::storage::StorageApi
		}
		pub fn timestamp(&self) -> timestamp::storage::StorageApi {
			timestamp::storage::StorageApi
		}
		pub fn indices(&self) -> indices::storage::StorageApi {
			indices::storage::StorageApi
		}
		pub fn balances(&self) -> balances::storage::StorageApi {
			balances::storage::StorageApi
		}
		pub fn transaction_payment(&self) -> transaction_payment::storage::StorageApi {
			transaction_payment::storage::StorageApi
		}
		pub fn authorship(&self) -> authorship::storage::StorageApi {
			authorship::storage::StorageApi
		}
		pub fn staking(&self) -> staking::storage::StorageApi {
			staking::storage::StorageApi
		}
		pub fn offences(&self) -> offences::storage::StorageApi {
			offences::storage::StorageApi
		}
		pub fn session(&self) -> session::storage::StorageApi {
			session::storage::StorageApi
		}
		pub fn grandpa(&self) -> grandpa::storage::StorageApi {
			grandpa::storage::StorageApi
		}
		pub fn im_online(&self) -> im_online::storage::StorageApi {
			im_online::storage::StorageApi
		}
		pub fn democracy(&self) -> democracy::storage::StorageApi {
			democracy::storage::StorageApi
		}
		pub fn council(&self) -> council::storage::StorageApi {
			council::storage::StorageApi
		}
		pub fn technical_committee(&self) -> technical_committee::storage::StorageApi {
			technical_committee::storage::StorageApi
		}
		pub fn phragmen_election(&self) -> phragmen_election::storage::StorageApi {
			phragmen_election::storage::StorageApi
		}
		pub fn technical_membership(&self) -> technical_membership::storage::StorageApi {
			technical_membership::storage::StorageApi
		}
		pub fn treasury(&self) -> treasury::storage::StorageApi {
			treasury::storage::StorageApi
		}
		pub fn claims(&self) -> claims::storage::StorageApi {
			claims::storage::StorageApi
		}
		pub fn identity(&self) -> identity::storage::StorageApi {
			identity::storage::StorageApi
		}
		pub fn society(&self) -> society::storage::StorageApi {
			society::storage::StorageApi
		}
		pub fn recovery(&self) -> recovery::storage::StorageApi {
			recovery::storage::StorageApi
		}
		pub fn vesting(&self) -> vesting::storage::StorageApi {
			vesting::storage::StorageApi
		}
		pub fn scheduler(&self) -> scheduler::storage::StorageApi {
			scheduler::storage::StorageApi
		}
		pub fn proxy(&self) -> proxy::storage::StorageApi {
			proxy::storage::StorageApi
		}
		pub fn multisig(&self) -> multisig::storage::StorageApi {
			multisig::storage::StorageApi
		}
		pub fn preimage(&self) -> preimage::storage::StorageApi {
			preimage::storage::StorageApi
		}
		pub fn bounties(&self) -> bounties::storage::StorageApi {
			bounties::storage::StorageApi
		}
		pub fn child_bounties(&self) -> child_bounties::storage::StorageApi {
			child_bounties::storage::StorageApi
		}
		pub fn tips(&self) -> tips::storage::StorageApi {
			tips::storage::StorageApi
		}
		pub fn election_provider_multi_phase(
			&self,
		) -> election_provider_multi_phase::storage::StorageApi {
			election_provider_multi_phase::storage::StorageApi
		}
		pub fn gilt(&self) -> gilt::storage::StorageApi {
			gilt::storage::StorageApi
		}
		pub fn voter_list(&self) -> voter_list::storage::StorageApi {
			voter_list::storage::StorageApi
		}
		pub fn nomination_pools(&self) -> nomination_pools::storage::StorageApi {
			nomination_pools::storage::StorageApi
		}
		pub fn configuration(&self) -> configuration::storage::StorageApi {
			configuration::storage::StorageApi
		}
		pub fn paras_shared(&self) -> paras_shared::storage::StorageApi {
			paras_shared::storage::StorageApi
		}
		pub fn para_inclusion(&self) -> para_inclusion::storage::StorageApi {
			para_inclusion::storage::StorageApi
		}
		pub fn para_inherent(&self) -> para_inherent::storage::StorageApi {
			para_inherent::storage::StorageApi
		}
		pub fn para_scheduler(&self) -> para_scheduler::storage::StorageApi {
			para_scheduler::storage::StorageApi
		}
		pub fn paras(&self) -> paras::storage::StorageApi {
			paras::storage::StorageApi
		}
		pub fn initializer(&self) -> initializer::storage::StorageApi {
			initializer::storage::StorageApi
		}
		pub fn dmp(&self) -> dmp::storage::StorageApi {
			dmp::storage::StorageApi
		}
		pub fn ump(&self) -> ump::storage::StorageApi {
			ump::storage::StorageApi
		}
		pub fn hrmp(&self) -> hrmp::storage::StorageApi {
			hrmp::storage::StorageApi
		}
		pub fn para_session_info(&self) -> para_session_info::storage::StorageApi {
			para_session_info::storage::StorageApi
		}
		pub fn paras_disputes(&self) -> paras_disputes::storage::StorageApi {
			paras_disputes::storage::StorageApi
		}
		pub fn registrar(&self) -> registrar::storage::StorageApi {
			registrar::storage::StorageApi
		}
		pub fn slots(&self) -> slots::storage::StorageApi {
			slots::storage::StorageApi
		}
		pub fn auctions(&self) -> auctions::storage::StorageApi {
			auctions::storage::StorageApi
		}
		pub fn crowdloan(&self) -> crowdloan::storage::StorageApi {
			crowdloan::storage::StorageApi
		}
		pub fn xcm_pallet(&self) -> xcm_pallet::storage::StorageApi {
			xcm_pallet::storage::StorageApi
		}
	}
	pub struct TransactionApi;
	impl TransactionApi {
		pub fn system(&self) -> system::calls::TransactionApi {
			system::calls::TransactionApi
		}
		pub fn babe(&self) -> babe::calls::TransactionApi {
			babe::calls::TransactionApi
		}
		pub fn timestamp(&self) -> timestamp::calls::TransactionApi {
			timestamp::calls::TransactionApi
		}
		pub fn indices(&self) -> indices::calls::TransactionApi {
			indices::calls::TransactionApi
		}
		pub fn balances(&self) -> balances::calls::TransactionApi {
			balances::calls::TransactionApi
		}
		pub fn authorship(&self) -> authorship::calls::TransactionApi {
			authorship::calls::TransactionApi
		}
		pub fn staking(&self) -> staking::calls::TransactionApi {
			staking::calls::TransactionApi
		}
		pub fn session(&self) -> session::calls::TransactionApi {
			session::calls::TransactionApi
		}
		pub fn grandpa(&self) -> grandpa::calls::TransactionApi {
			grandpa::calls::TransactionApi
		}
		pub fn im_online(&self) -> im_online::calls::TransactionApi {
			im_online::calls::TransactionApi
		}
		pub fn democracy(&self) -> democracy::calls::TransactionApi {
			democracy::calls::TransactionApi
		}
		pub fn council(&self) -> council::calls::TransactionApi {
			council::calls::TransactionApi
		}
		pub fn technical_committee(&self) -> technical_committee::calls::TransactionApi {
			technical_committee::calls::TransactionApi
		}
		pub fn phragmen_election(&self) -> phragmen_election::calls::TransactionApi {
			phragmen_election::calls::TransactionApi
		}
		pub fn technical_membership(&self) -> technical_membership::calls::TransactionApi {
			technical_membership::calls::TransactionApi
		}
		pub fn treasury(&self) -> treasury::calls::TransactionApi {
			treasury::calls::TransactionApi
		}
		pub fn claims(&self) -> claims::calls::TransactionApi {
			claims::calls::TransactionApi
		}
		pub fn utility(&self) -> utility::calls::TransactionApi {
			utility::calls::TransactionApi
		}
		pub fn identity(&self) -> identity::calls::TransactionApi {
			identity::calls::TransactionApi
		}
		pub fn society(&self) -> society::calls::TransactionApi {
			society::calls::TransactionApi
		}
		pub fn recovery(&self) -> recovery::calls::TransactionApi {
			recovery::calls::TransactionApi
		}
		pub fn vesting(&self) -> vesting::calls::TransactionApi {
			vesting::calls::TransactionApi
		}
		pub fn scheduler(&self) -> scheduler::calls::TransactionApi {
			scheduler::calls::TransactionApi
		}
		pub fn proxy(&self) -> proxy::calls::TransactionApi {
			proxy::calls::TransactionApi
		}
		pub fn multisig(&self) -> multisig::calls::TransactionApi {
			multisig::calls::TransactionApi
		}
		pub fn preimage(&self) -> preimage::calls::TransactionApi {
			preimage::calls::TransactionApi
		}
		pub fn bounties(&self) -> bounties::calls::TransactionApi {
			bounties::calls::TransactionApi
		}
		pub fn child_bounties(&self) -> child_bounties::calls::TransactionApi {
			child_bounties::calls::TransactionApi
		}
		pub fn tips(&self) -> tips::calls::TransactionApi {
			tips::calls::TransactionApi
		}
		pub fn election_provider_multi_phase(
			&self,
		) -> election_provider_multi_phase::calls::TransactionApi {
			election_provider_multi_phase::calls::TransactionApi
		}
		pub fn gilt(&self) -> gilt::calls::TransactionApi {
			gilt::calls::TransactionApi
		}
		pub fn voter_list(&self) -> voter_list::calls::TransactionApi {
			voter_list::calls::TransactionApi
		}
		pub fn nomination_pools(&self) -> nomination_pools::calls::TransactionApi {
			nomination_pools::calls::TransactionApi
		}
		pub fn configuration(&self) -> configuration::calls::TransactionApi {
			configuration::calls::TransactionApi
		}
		pub fn paras_shared(&self) -> paras_shared::calls::TransactionApi {
			paras_shared::calls::TransactionApi
		}
		pub fn para_inclusion(&self) -> para_inclusion::calls::TransactionApi {
			para_inclusion::calls::TransactionApi
		}
		pub fn para_inherent(&self) -> para_inherent::calls::TransactionApi {
			para_inherent::calls::TransactionApi
		}
		pub fn paras(&self) -> paras::calls::TransactionApi {
			paras::calls::TransactionApi
		}
		pub fn initializer(&self) -> initializer::calls::TransactionApi {
			initializer::calls::TransactionApi
		}
		pub fn dmp(&self) -> dmp::calls::TransactionApi {
			dmp::calls::TransactionApi
		}
		pub fn ump(&self) -> ump::calls::TransactionApi {
			ump::calls::TransactionApi
		}
		pub fn hrmp(&self) -> hrmp::calls::TransactionApi {
			hrmp::calls::TransactionApi
		}
		pub fn paras_disputes(&self) -> paras_disputes::calls::TransactionApi {
			paras_disputes::calls::TransactionApi
		}
		pub fn registrar(&self) -> registrar::calls::TransactionApi {
			registrar::calls::TransactionApi
		}
		pub fn slots(&self) -> slots::calls::TransactionApi {
			slots::calls::TransactionApi
		}
		pub fn auctions(&self) -> auctions::calls::TransactionApi {
			auctions::calls::TransactionApi
		}
		pub fn crowdloan(&self) -> crowdloan::calls::TransactionApi {
			crowdloan::calls::TransactionApi
		}
		pub fn xcm_pallet(&self) -> xcm_pallet::calls::TransactionApi {
			xcm_pallet::calls::TransactionApi
		}
	}
	#[doc = r" check whether the Client you are using is aligned with the statically generated codegen."]
	pub fn validate_codegen<T: ::subxt::Config, C: ::subxt::client::OfflineClientT<T>>(
		client: &C,
	) -> Result<(), ::subxt::error::MetadataError> {
		let runtime_metadata_hash = client.metadata().metadata_hash(&PALLETS);
		if runtime_metadata_hash !=
			[
				239u8, 200u8, 12u8, 126u8, 205u8, 111u8, 178u8, 255u8, 203u8, 62u8, 133u8, 175u8,
				31u8, 3u8, 135u8, 199u8, 150u8, 226u8, 3u8, 148u8, 127u8, 139u8, 204u8, 151u8,
				140u8, 242u8, 146u8, 250u8, 125u8, 165u8, 173u8, 163u8,
			] {
			Err(::subxt::error::MetadataError::IncompatibleMetadata)
		} else {
			Ok(())
		}
	}
}
