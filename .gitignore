
# custom

.devenv

## no embedded chain specs
rococo-dev-raw.json
rococo-local-raw.json
rococo-local.json
rococo-dev.json
kusama-local.json
kusama-local-raw.json
kusama-dev.json
kusama-dev-raw.json

## logs
*.log


# Generated by Cargo
# will have compiled files and executables
**/target/
# These are backup files generated by rustfmt
**/*.rs.bk

.DS_Store

# The cache for docker container dependency
.cargo

# The cache for chain data in container
.local

# direnv cache
.direnv

node_modules

# don't add vim swap files
.*.swp

.idea
.fleet

# ignore user vscode sttings
.vscode/*
# but include tasks
!.vscode/tasks.json

.rust-analyzer
target
.env

node_modules/
**/yarn-error.log
**/.yarn/
.vercel/

.benchmarkRun

# nix build output
result

**/.asciidoctor

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

data/**
data-agent/**


# cosmos
wasm_client_data/**

*.wasm

.secret/**
.ssh/**